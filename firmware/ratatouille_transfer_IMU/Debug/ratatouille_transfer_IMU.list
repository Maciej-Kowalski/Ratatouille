
ratatouille_transfer_IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015258  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  08015398  08015398  00016398  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015894  08015894  00016894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801589c  0801589c  0001689c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080158a0  080158a0  000168a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002ec  20000008  080158a4  00017008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002028  200002f4  08015b90  000172f4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000231c  08015b90  0001731c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000172f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002da90  00000000  00000000  00017324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005799  00000000  00000000  00044db4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002b40  00000000  00000000  0004a550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000215b  00000000  00000000  0004d090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002abcd  00000000  00000000  0004f1eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002e91b  00000000  00000000  00079db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00100ac5  00000000  00000000  000a86d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a9198  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ca00  00000000  00000000  001a91dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000089  00000000  00000000  001b5bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002f4 	.word	0x200002f4
 800015c:	00000000 	.word	0x00000000
 8000160:	08015380 	.word	0x08015380

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002f8 	.word	0x200002f8
 800017c:	08015380 	.word	0x08015380

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b988 	b.w	8000f20 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	468e      	mov	lr, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d962      	bls.n	8000d04 <__udivmoddi4+0xdc>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	b14e      	cbz	r6, 8000c58 <__udivmoddi4+0x30>
 8000c44:	f1c6 0320 	rsb	r3, r6, #32
 8000c48:	fa01 f806 	lsl.w	r8, r1, r6
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	ea43 0808 	orr.w	r8, r3, r8
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c64:	0c23      	lsrs	r3, r4, #16
 8000c66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c7c:	f080 80ea 	bcs.w	8000e54 <__udivmoddi4+0x22c>
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f240 80e7 	bls.w	8000e54 <__udivmoddi4+0x22c>
 8000c86:	3902      	subs	r1, #2
 8000c88:	443b      	add	r3, r7
 8000c8a:	1a9a      	subs	r2, r3, r2
 8000c8c:	b2a3      	uxth	r3, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9e:	459c      	cmp	ip, r3
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x8e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca8:	f080 80d6 	bcs.w	8000e58 <__udivmoddi4+0x230>
 8000cac:	459c      	cmp	ip, r3
 8000cae:	f240 80d3 	bls.w	8000e58 <__udivmoddi4+0x230>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cba:	eba3 030c 	sub.w	r3, r3, ip
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40f3      	lsrs	r3, r6
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xb6>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb0>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa2>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x14c>
 8000ce6:	4573      	cmp	r3, lr
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xc8>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 8105 	bhi.w	8000efa <__udivmoddi4+0x2d2>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e5      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000cfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000d02:	e7e2      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f000 8090 	beq.w	8000e2a <__udivmoddi4+0x202>
 8000d0a:	fab2 f682 	clz	r6, r2
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	f040 80a4 	bne.w	8000e5c <__udivmoddi4+0x234>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1c:	b280      	uxth	r0, r0
 8000d1e:	b2bc      	uxth	r4, r7
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x11e>
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x11c>
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	f200 80e0 	bhi.w	8000f04 <__udivmoddi4+0x2dc>
 8000d44:	46c4      	mov	ip, r8
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d54:	fb02 f404 	mul.w	r4, r2, r4
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x144>
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x142>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f200 80ca 	bhi.w	8000efe <__udivmoddi4+0x2d6>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa0e f401 	lsl.w	r4, lr, r1
 8000d84:	fa20 f306 	lsr.w	r3, r0, r6
 8000d88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d90:	4323      	orrs	r3, r4
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	fa1f fc87 	uxth.w	ip, r7
 8000d9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9e:	0c1c      	lsrs	r4, r3, #16
 8000da0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x1a0>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dba:	f080 809c 	bcs.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f240 8099 	bls.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	fa1f fe83 	uxth.w	lr, r3
 8000dd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ddc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de0:	45a4      	cmp	ip, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1ce>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dea:	f080 8082 	bcs.w	8000ef2 <__udivmoddi4+0x2ca>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d97f      	bls.n	8000ef2 <__udivmoddi4+0x2ca>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e02:	4564      	cmp	r4, ip
 8000e04:	4673      	mov	r3, lr
 8000e06:	46e1      	mov	r9, ip
 8000e08:	d362      	bcc.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e0a:	d05f      	beq.n	8000ecc <__udivmoddi4+0x2a4>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x1fe>
 8000e0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e12:	eb64 0409 	sbc.w	r4, r4, r9
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431e      	orrs	r6, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c5 6400 	strd	r6, r4, [r5]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e74f      	b.n	8000cca <__udivmoddi4+0xa2>
 8000e2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2e:	0c01      	lsrs	r1, r0, #16
 8000e30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e34:	b280      	uxth	r0, r0
 8000e36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	463c      	mov	r4, r7
 8000e40:	46b8      	mov	r8, r7
 8000e42:	46be      	mov	lr, r7
 8000e44:	2620      	movs	r6, #32
 8000e46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4a:	eba2 0208 	sub.w	r2, r2, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e766      	b.n	8000d22 <__udivmoddi4+0xfa>
 8000e54:	4601      	mov	r1, r0
 8000e56:	e718      	b.n	8000c8a <__udivmoddi4+0x62>
 8000e58:	4610      	mov	r0, r2
 8000e5a:	e72c      	b.n	8000cb6 <__udivmoddi4+0x8e>
 8000e5c:	f1c6 0220 	rsb	r2, r6, #32
 8000e60:	fa2e f302 	lsr.w	r3, lr, r2
 8000e64:	40b7      	lsls	r7, r6
 8000e66:	40b1      	lsls	r1, r6
 8000e68:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e76:	b2bc      	uxth	r4, r7
 8000e78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb08 f904 	mul.w	r9, r8, r4
 8000e86:	40b0      	lsls	r0, r6
 8000e88:	4589      	cmp	r9, r1
 8000e8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8e:	b280      	uxth	r0, r0
 8000e90:	d93e      	bls.n	8000f10 <__udivmoddi4+0x2e8>
 8000e92:	1879      	adds	r1, r7, r1
 8000e94:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e98:	d201      	bcs.n	8000e9e <__udivmoddi4+0x276>
 8000e9a:	4589      	cmp	r9, r1
 8000e9c:	d81f      	bhi.n	8000ede <__udivmoddi4+0x2b6>
 8000e9e:	eba1 0109 	sub.w	r1, r1, r9
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fb09 f804 	mul.w	r8, r9, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	4542      	cmp	r2, r8
 8000eb6:	d229      	bcs.n	8000f0c <__udivmoddi4+0x2e4>
 8000eb8:	18ba      	adds	r2, r7, r2
 8000eba:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ebe:	d2c4      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec0:	4542      	cmp	r2, r8
 8000ec2:	d2c2      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec8:	443a      	add	r2, r7
 8000eca:	e7be      	b.n	8000e4a <__udivmoddi4+0x222>
 8000ecc:	45f0      	cmp	r8, lr
 8000ece:	d29d      	bcs.n	8000e0c <__udivmoddi4+0x1e4>
 8000ed0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed8:	3801      	subs	r0, #1
 8000eda:	46e1      	mov	r9, ip
 8000edc:	e796      	b.n	8000e0c <__udivmoddi4+0x1e4>
 8000ede:	eba7 0909 	sub.w	r9, r7, r9
 8000ee2:	4449      	add	r1, r9
 8000ee4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eec:	fb09 f804 	mul.w	r8, r9, r4
 8000ef0:	e7db      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ef2:	4673      	mov	r3, lr
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1ce>
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	e766      	b.n	8000dc8 <__udivmoddi4+0x1a0>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e6fd      	b.n	8000cfa <__udivmoddi4+0xd2>
 8000efe:	443b      	add	r3, r7
 8000f00:	3a02      	subs	r2, #2
 8000f02:	e733      	b.n	8000d6c <__udivmoddi4+0x144>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	443b      	add	r3, r7
 8000f0a:	e71c      	b.n	8000d46 <__udivmoddi4+0x11e>
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	e79c      	b.n	8000e4a <__udivmoddi4+0x222>
 8000f10:	eba1 0109 	sub.w	r1, r1, r9
 8000f14:	46c4      	mov	ip, r8
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fb09 f804 	mul.w	r8, r9, r4
 8000f1e:	e7c4      	b.n	8000eaa <__udivmoddi4+0x282>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <bmi160_get_regs>:
/*!
 * @brief This API reads the data from the given register address
 * of sensor.
 */
int8_t bmi160_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 8000f24:	b590      	push	{r4, r7, lr}
 8000f26:	b087      	sub	sp, #28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60b9      	str	r1, [r7, #8]
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	4603      	mov	r3, r0
 8000f30:	73fb      	strb	r3, [r7, #15]
 8000f32:	4613      	mov	r3, r2
 8000f34:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	75fb      	strb	r3, [r7, #23]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->read == NULL))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <bmi160_get_regs+0x24>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	69db      	ldr	r3, [r3, #28]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d102      	bne.n	8000f4e <bmi160_get_regs+0x2a>
    {
        rslt = BMI160_E_NULL_PTR;
 8000f48:	23ff      	movs	r3, #255	@ 0xff
 8000f4a:	75fb      	strb	r3, [r7, #23]
 8000f4c:	e017      	b.n	8000f7e <bmi160_get_regs+0x5a>
    }
    else if (len == 0)
 8000f4e:	89bb      	ldrh	r3, [r7, #12]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d102      	bne.n	8000f5a <bmi160_get_regs+0x36>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 8000f54:	23f4      	movs	r3, #244	@ 0xf4
 8000f56:	75fb      	strb	r3, [r7, #23]
 8000f58:	e011      	b.n	8000f7e <bmi160_get_regs+0x5a>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	789b      	ldrb	r3, [r3, #2]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d103      	bne.n	8000f6a <bmi160_get_regs+0x46>
        {
            reg_addr = (reg_addr | BMI160_SPI_RD_MASK);
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f68:	73fb      	strb	r3, [r7, #15]
        }

        rslt = dev->read(dev->id, reg_addr, data, len);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	69dc      	ldr	r4, [r3, #28]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	7858      	ldrb	r0, [r3, #1]
 8000f72:	89bb      	ldrh	r3, [r7, #12]
 8000f74:	7bf9      	ldrb	r1, [r7, #15]
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	47a0      	blx	r4
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000f7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	371c      	adds	r7, #28
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd90      	pop	{r4, r7, pc}

08000f8a <bmi160_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of sensor.
 */
int8_t bmi160_set_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 8000f8a:	b590      	push	{r4, r7, lr}
 8000f8c:	b087      	sub	sp, #28
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	4603      	mov	r3, r0
 8000f96:	73fb      	strb	r3, [r7, #15]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	75fb      	strb	r3, [r7, #23]
    uint8_t count = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	75bb      	strb	r3, [r7, #22]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->write == NULL))
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <bmi160_set_regs+0x28>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6a1b      	ldr	r3, [r3, #32]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d102      	bne.n	8000fb8 <bmi160_set_regs+0x2e>
    {
        rslt = BMI160_E_NULL_PTR;
 8000fb2:	23ff      	movs	r3, #255	@ 0xff
 8000fb4:	75fb      	strb	r3, [r7, #23]
 8000fb6:	e045      	b.n	8001044 <bmi160_set_regs+0xba>
    }
    else if (len == 0)
 8000fb8:	89bb      	ldrh	r3, [r7, #12]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d102      	bne.n	8000fc4 <bmi160_set_regs+0x3a>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 8000fbe:	23f4      	movs	r3, #244	@ 0xf4
 8000fc0:	75fb      	strb	r3, [r7, #23]
 8000fc2:	e03f      	b.n	8001044 <bmi160_set_regs+0xba>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	789b      	ldrb	r3, [r3, #2]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d103      	bne.n	8000fd4 <bmi160_set_regs+0x4a>
        {
            reg_addr = (reg_addr & BMI160_SPI_WR_MASK);
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000fd2:	73fb      	strb	r3, [r7, #15]
        }

        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	7a1b      	ldrb	r3, [r3, #8]
 8000fd8:	2b11      	cmp	r3, #17
 8000fda:	d003      	beq.n	8000fe4 <bmi160_set_regs+0x5a>
            (dev->prev_gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	7c1b      	ldrb	r3, [r3, #16]
        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 8000fe0:	2b15      	cmp	r3, #21
 8000fe2:	d124      	bne.n	800102e <bmi160_set_regs+0xa4>
        {
            rslt = dev->write(dev->id, reg_addr, data, len);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6a1c      	ldr	r4, [r3, #32]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	7858      	ldrb	r0, [r3, #1]
 8000fec:	89bb      	ldrh	r3, [r7, #12]
 8000fee:	7bf9      	ldrb	r1, [r7, #15]
 8000ff0:	68ba      	ldr	r2, [r7, #8]
 8000ff2:	47a0      	blx	r4
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	75fb      	strb	r3, [r7, #23]

            /* Kindly refer bmi160 data sheet section 3.2.4 */
            dev->delay_ms(1);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	4798      	blx	r3
 8001000:	e01a      	b.n	8001038 <bmi160_set_regs+0xae>
        {
            /*Burst write is not allowed in
             * suspend & low power mode */
            for (; count < len; count++)
            {
                rslt = dev->write(dev->id, reg_addr, &data[count], 1);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a1c      	ldr	r4, [r3, #32]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	7858      	ldrb	r0, [r3, #1]
 800100a:	7dbb      	ldrb	r3, [r7, #22]
 800100c:	68ba      	ldr	r2, [r7, #8]
 800100e:	441a      	add	r2, r3
 8001010:	7bf9      	ldrb	r1, [r7, #15]
 8001012:	2301      	movs	r3, #1
 8001014:	47a0      	blx	r4
 8001016:	4603      	mov	r3, r0
 8001018:	75fb      	strb	r3, [r7, #23]
                reg_addr++;
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	3301      	adds	r3, #1
 800101e:	73fb      	strb	r3, [r7, #15]

                /* Kindly refer bmi160 data sheet section 3.2.4 */
                dev->delay_ms(1);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001024:	2001      	movs	r0, #1
 8001026:	4798      	blx	r3
            for (; count < len; count++)
 8001028:	7dbb      	ldrb	r3, [r7, #22]
 800102a:	3301      	adds	r3, #1
 800102c:	75bb      	strb	r3, [r7, #22]
 800102e:	7dbb      	ldrb	r3, [r7, #22]
 8001030:	b29b      	uxth	r3, r3
 8001032:	89ba      	ldrh	r2, [r7, #12]
 8001034:	429a      	cmp	r2, r3
 8001036:	d8e4      	bhi.n	8001002 <bmi160_set_regs+0x78>

            }
        }

        if (rslt != BMI160_OK)
 8001038:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <bmi160_set_regs+0xba>
        {
            rslt = BMI160_E_COM_FAIL;
 8001040:	23fe      	movs	r3, #254	@ 0xfe
 8001042:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8001044:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001048:	4618      	mov	r0, r3
 800104a:	371c      	adds	r7, #28
 800104c:	46bd      	mov	sp, r7
 800104e:	bd90      	pop	{r4, r7, pc}

08001050 <bmi160_init>:
 *  @brief This API is the entry point for sensor.It performs
 *  the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of bmi160 sensor.
 */
int8_t bmi160_init(struct bmi160_dev *dev)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;
    uint8_t try = 3;
 8001058:	2303      	movs	r3, #3
 800105a:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f000 fd3c 	bl	8001ada <null_ptr_check>
 8001062:	4603      	mov	r3, r0
 8001064:	73fb      	strb	r3, [r7, #15]

    /* Dummy read of 0x7F register to enable SPI Interface
     * if SPI is used */
    if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 8001066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d10c      	bne.n	8001088 <bmi160_init+0x38>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	789b      	ldrb	r3, [r3, #2]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d108      	bne.n	8001088 <bmi160_init+0x38>
    {
        rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 8001076:	f107 010d 	add.w	r1, r7, #13
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2201      	movs	r2, #1
 800107e:	207f      	movs	r0, #127	@ 0x7f
 8001080:	f7ff ff50 	bl	8000f24 <bmi160_get_regs>
 8001084:	4603      	mov	r3, r0
 8001086:	73fb      	strb	r3, [r7, #15]
    }

    if (rslt == BMI160_OK)
 8001088:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d127      	bne.n	80010e0 <bmi160_init+0x90>
    {
        /* Assign chip id as zero */
        dev->chip_id = 0;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]

        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 8001096:	e007      	b.n	80010a8 <bmi160_init+0x58>
        {
            /* Read chip_id */
            rslt = bmi160_get_regs(BMI160_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8001098:	6879      	ldr	r1, [r7, #4]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2201      	movs	r2, #1
 800109e:	2000      	movs	r0, #0
 80010a0:	f7ff ff40 	bl	8000f24 <bmi160_get_regs>
 80010a4:	4603      	mov	r3, r0
 80010a6:	73fb      	strb	r3, [r7, #15]
        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 80010a8:	7bbb      	ldrb	r3, [r7, #14]
 80010aa:	1e5a      	subs	r2, r3, #1
 80010ac:	73ba      	strb	r2, [r7, #14]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <bmi160_init+0x6a>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2bd1      	cmp	r3, #209	@ 0xd1
 80010b8:	d1ee      	bne.n	8001098 <bmi160_init+0x48>
        }

        if ((rslt == BMI160_OK) && (dev->chip_id == BMI160_CHIP_ID))
 80010ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d10c      	bne.n	80010dc <bmi160_init+0x8c>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2bd1      	cmp	r3, #209	@ 0xd1
 80010c8:	d108      	bne.n	80010dc <bmi160_init+0x8c>
        {
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	22ff      	movs	r2, #255	@ 0xff
 80010ce:	70da      	strb	r2, [r3, #3]

            /* Soft reset */
            rslt = bmi160_soft_reset(dev);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f000 f80b 	bl	80010ec <bmi160_soft_reset>
 80010d6:	4603      	mov	r3, r0
 80010d8:	73fb      	strb	r3, [r7, #15]
 80010da:	e001      	b.n	80010e0 <bmi160_init+0x90>
        }
        else
        {
            rslt = BMI160_E_DEV_NOT_FOUND;
 80010dc:	23fd      	movs	r3, #253	@ 0xfd
 80010de:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80010e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <bmi160_soft_reset>:
/*!
 * @brief This API resets and restarts the device.
 * All register values are overwritten with default parameters.
 */
int8_t bmi160_soft_reset(struct bmi160_dev *dev)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = BMI160_SOFT_RESET_CMD;
 80010f4:	23b6      	movs	r3, #182	@ 0xb6
 80010f6:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <bmi160_soft_reset+0x1a>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001102:	2b00      	cmp	r3, #0
 8001104:	d102      	bne.n	800110c <bmi160_soft_reset+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 8001106:	23ff      	movs	r3, #255	@ 0xff
 8001108:	73fb      	strb	r3, [r7, #15]
 800110a:	e024      	b.n	8001156 <bmi160_soft_reset+0x6a>
    }
    else
    {
        /* Reset the device */
        rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &data, 1, dev);
 800110c:	f107 010e 	add.w	r1, r7, #14
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2201      	movs	r2, #1
 8001114:	207e      	movs	r0, #126	@ 0x7e
 8001116:	f7ff ff38 	bl	8000f8a <bmi160_set_regs>
 800111a:	4603      	mov	r3, r0
 800111c:	73fb      	strb	r3, [r7, #15]
        dev->delay_ms(BMI160_SOFT_RESET_DELAY_MS);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001122:	2001      	movs	r0, #1
 8001124:	4798      	blx	r3
        if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 8001126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d10c      	bne.n	8001148 <bmi160_soft_reset+0x5c>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	789b      	ldrb	r3, [r3, #2]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d108      	bne.n	8001148 <bmi160_soft_reset+0x5c>
        {
            /* Dummy read of 0x7F register to enable SPI Interface
             * if SPI is used */
            rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 8001136:	f107 010e 	add.w	r1, r7, #14
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2201      	movs	r2, #1
 800113e:	207f      	movs	r0, #127	@ 0x7f
 8001140:	f7ff fef0 	bl	8000f24 <bmi160_get_regs>
 8001144:	4603      	mov	r3, r0
 8001146:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI160_OK)
 8001148:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d102      	bne.n	8001156 <bmi160_soft_reset+0x6a>
        {
            /* Update the default parameters */
            default_param_settg(dev);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f000 fce2 	bl	8001b1a <default_param_settg>
        }
    }

    return rslt;
 8001156:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <bmi160_set_sens_conf>:
/*!
 * @brief This API configures the power mode, range and bandwidth
 * of sensor.
 */
int8_t bmi160_set_sens_conf(struct bmi160_dev *dev)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b084      	sub	sp, #16
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMI160_OK;
 800116a:	2300      	movs	r3, #0
 800116c:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <bmi160_set_sens_conf+0x1a>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001178:	2b00      	cmp	r3, #0
 800117a:	d102      	bne.n	8001182 <bmi160_set_sens_conf+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 800117c:	23ff      	movs	r3, #255	@ 0xff
 800117e:	73fb      	strb	r3, [r7, #15]
 8001180:	e01f      	b.n	80011c2 <bmi160_set_sens_conf+0x60>
    }
    else
    {
        rslt = set_accel_conf(dev);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f000 fcf3 	bl	8001b6e <set_accel_conf>
 8001188:	4603      	mov	r3, r0
 800118a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800118c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d116      	bne.n	80011c2 <bmi160_set_sens_conf+0x60>
        {
            rslt = set_gyro_conf(dev);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f000 fe2f 	bl	8001df8 <set_gyro_conf>
 800119a:	4603      	mov	r3, r0
 800119c:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800119e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10d      	bne.n	80011c2 <bmi160_set_sens_conf+0x60>
            {
                /* write power mode for accel and gyro */
                rslt = bmi160_set_power_mode(dev);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f000 f811 	bl	80011ce <bmi160_set_power_mode>
 80011ac:	4603      	mov	r3, r0
 80011ae:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 80011b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d104      	bne.n	80011c2 <bmi160_set_sens_conf+0x60>
                {
                    rslt = check_invalid_settg(dev);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 fde8 	bl	8001d8e <check_invalid_settg>
 80011be:	4603      	mov	r3, r0
 80011c0:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80011c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <bmi160_set_power_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmi160_set_power_mode(struct bmi160_dev *dev)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <bmi160_set_power_mode+0x1a>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d102      	bne.n	80011ee <bmi160_set_power_mode+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 80011e8:	23ff      	movs	r3, #255	@ 0xff
 80011ea:	73fb      	strb	r3, [r7, #15]
 80011ec:	e00d      	b.n	800120a <bmi160_set_power_mode+0x3c>
    }
    else
    {
        rslt = set_accel_pwr(dev);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f000 ff0c 	bl	800200c <set_accel_pwr>
 80011f4:	4603      	mov	r3, r0
 80011f6:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80011f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d104      	bne.n	800120a <bmi160_set_power_mode+0x3c>
        {
            rslt = set_gyro_pwr(dev);
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f000 ff9a 	bl	800213a <set_gyro_pwr>
 8001206:	4603      	mov	r3, r0
 8001208:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800120a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <bmi160_get_sensor_data>:
 */
int8_t bmi160_get_sensor_data(uint8_t select_sensor,
                              struct bmi160_sensor_data *accel,
                              struct bmi160_sensor_data *gyro,
                              const struct bmi160_dev *dev)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b086      	sub	sp, #24
 800121a:	af00      	add	r7, sp, #0
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
 8001220:	603b      	str	r3, [r7, #0]
 8001222:	4603      	mov	r3, r0
 8001224:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI160_OK;
 8001226:	2300      	movs	r3, #0
 8001228:	75fb      	strb	r3, [r7, #23]
    uint8_t time_sel;
    uint8_t sen_sel;
    uint8_t len = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	75bb      	strb	r3, [r7, #22]

    /*Extract the sensor  and time select information*/
    sen_sel = select_sensor & BMI160_SEN_SEL_MASK;
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	f003 0307 	and.w	r3, r3, #7
 8001234:	757b      	strb	r3, [r7, #21]
    time_sel = ((sen_sel & BMI160_TIME_SEL) >> 2);
 8001236:	7d7b      	ldrb	r3, [r7, #21]
 8001238:	109b      	asrs	r3, r3, #2
 800123a:	b2db      	uxtb	r3, r3
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	753b      	strb	r3, [r7, #20]
    sen_sel = sen_sel & (BMI160_ACCEL_SEL | BMI160_GYRO_SEL);
 8001242:	7d7b      	ldrb	r3, [r7, #21]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	757b      	strb	r3, [r7, #21]
    if (time_sel == 1)
 800124a:	7d3b      	ldrb	r3, [r7, #20]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d101      	bne.n	8001254 <bmi160_get_sensor_data+0x3e>
    {
        len = 3;
 8001250:	2303      	movs	r3, #3
 8001252:	75bb      	strb	r3, [r7, #22]
    }

    /* Null-pointer check */
    if (dev != NULL)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d03c      	beq.n	80012d4 <bmi160_get_sensor_data+0xbe>
    {
        switch (sen_sel)
 800125a:	7d7b      	ldrb	r3, [r7, #21]
 800125c:	2b03      	cmp	r3, #3
 800125e:	d024      	beq.n	80012aa <bmi160_get_sensor_data+0x94>
 8001260:	2b03      	cmp	r3, #3
 8001262:	dc34      	bgt.n	80012ce <bmi160_get_sensor_data+0xb8>
 8001264:	2b01      	cmp	r3, #1
 8001266:	d002      	beq.n	800126e <bmi160_get_sensor_data+0x58>
 8001268:	2b02      	cmp	r3, #2
 800126a:	d00f      	beq.n	800128c <bmi160_get_sensor_data+0x76>
 800126c:	e02f      	b.n	80012ce <bmi160_get_sensor_data+0xb8>
        {
            case BMI160_ACCEL_ONLY:

                /* Null-pointer check */
                if (accel == NULL)
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d102      	bne.n	800127a <bmi160_get_sensor_data+0x64>
                {
                    rslt = BMI160_E_NULL_PTR;
 8001274:	23ff      	movs	r3, #255	@ 0xff
 8001276:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_accel_data(len, accel, dev);
                }

                break;
 8001278:	e02e      	b.n	80012d8 <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_data(len, accel, dev);
 800127a:	7dbb      	ldrb	r3, [r7, #22]
 800127c:	683a      	ldr	r2, [r7, #0]
 800127e:	68b9      	ldr	r1, [r7, #8]
 8001280:	4618      	mov	r0, r3
 8001282:	f000 ff9e 	bl	80021c2 <get_accel_data>
 8001286:	4603      	mov	r3, r0
 8001288:	75fb      	strb	r3, [r7, #23]
                break;
 800128a:	e025      	b.n	80012d8 <bmi160_get_sensor_data+0xc2>
            case BMI160_GYRO_ONLY:

                /* Null-pointer check */
                if (gyro == NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d102      	bne.n	8001298 <bmi160_get_sensor_data+0x82>
                {
                    rslt = BMI160_E_NULL_PTR;
 8001292:	23ff      	movs	r3, #255	@ 0xff
 8001294:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_gyro_data(len, gyro, dev);
                }

                break;
 8001296:	e01f      	b.n	80012d8 <bmi160_get_sensor_data+0xc2>
                    rslt = get_gyro_data(len, gyro, dev);
 8001298:	7dbb      	ldrb	r3, [r7, #22]
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	4618      	mov	r0, r3
 80012a0:	f001 f85b 	bl	800235a <get_gyro_data>
 80012a4:	4603      	mov	r3, r0
 80012a6:	75fb      	strb	r3, [r7, #23]
                break;
 80012a8:	e016      	b.n	80012d8 <bmi160_get_sensor_data+0xc2>
            case BMI160_BOTH_ACCEL_AND_GYRO:

                /* Null-pointer check */
                if ((gyro == NULL) || (accel == NULL))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d002      	beq.n	80012b6 <bmi160_get_sensor_data+0xa0>
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d102      	bne.n	80012bc <bmi160_get_sensor_data+0xa6>
                {
                    rslt = BMI160_E_NULL_PTR;
 80012b6:	23ff      	movs	r3, #255	@ 0xff
 80012b8:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
                }

                break;
 80012ba:	e00d      	b.n	80012d8 <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
 80012bc:	7db8      	ldrb	r0, [r7, #22]
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	68b9      	ldr	r1, [r7, #8]
 80012c4:	f001 f997 	bl	80025f6 <get_accel_gyro_data>
 80012c8:	4603      	mov	r3, r0
 80012ca:	75fb      	strb	r3, [r7, #23]
                break;
 80012cc:	e004      	b.n	80012d8 <bmi160_get_sensor_data+0xc2>
            default:
                rslt = BMI160_E_INVALID_INPUT;
 80012ce:	23fb      	movs	r3, #251	@ 0xfb
 80012d0:	75fb      	strb	r3, [r7, #23]
                break;
 80012d2:	e001      	b.n	80012d8 <bmi160_get_sensor_data+0xc2>
        }
    }
    else
    {
        rslt = BMI160_E_NULL_PTR;
 80012d4:	23ff      	movs	r3, #255	@ 0xff
 80012d6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80012d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <bmi160_set_int_config>:
/*!
 * @brief This API configures the necessary interrupt based on
 *  the user settings in the bmi160_int_settg structure instance.
 */
int8_t bmi160_set_int_config(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 80012ee:	2300      	movs	r3, #0
 80012f0:	73fb      	strb	r3, [r7, #15]

    switch (int_config->int_type)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	785b      	ldrb	r3, [r3, #1]
 80012f6:	2b0d      	cmp	r3, #13
 80012f8:	d879      	bhi.n	80013ee <bmi160_set_int_config+0x10a>
 80012fa:	a201      	add	r2, pc, #4	@ (adr r2, 8001300 <bmi160_set_int_config+0x1c>)
 80012fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001300:	08001339 	.word	0x08001339
 8001304:	08001347 	.word	0x08001347
 8001308:	08001371 	.word	0x08001371
 800130c:	08001363 	.word	0x08001363
 8001310:	08001363 	.word	0x08001363
 8001314:	0800137f 	.word	0x0800137f
 8001318:	0800138d 	.word	0x0800138d
 800131c:	080013a9 	.word	0x080013a9
 8001320:	0800139b 	.word	0x0800139b
 8001324:	08001355 	.word	0x08001355
 8001328:	080013b7 	.word	0x080013b7
 800132c:	080013c5 	.word	0x080013c5
 8001330:	080013d3 	.word	0x080013d3
 8001334:	080013e1 	.word	0x080013e1
    {
        case BMI160_ACC_ANY_MOTION_INT:

            /*Any-motion  interrupt*/
            rslt = set_accel_any_motion_int(int_config, dev);
 8001338:	6839      	ldr	r1, [r7, #0]
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f000 f963 	bl	8001606 <set_accel_any_motion_int>
 8001340:	4603      	mov	r3, r0
 8001342:	73fb      	strb	r3, [r7, #15]
            break;
 8001344:	e054      	b.n	80013f0 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_SIG_MOTION_INT:

            /* Significant motion interrupt */
            rslt = set_accel_sig_motion_int(int_config, dev);
 8001346:	6839      	ldr	r1, [r7, #0]
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f000 f9f6 	bl	800173a <set_accel_sig_motion_int>
 800134e:	4603      	mov	r3, r0
 8001350:	73fb      	strb	r3, [r7, #15]
            break;
 8001352:	e04d      	b.n	80013f0 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_SLOW_NO_MOTION_INT:

            /* Slow or no motion interrupt */
            rslt = set_accel_no_motion_int(int_config, dev);
 8001354:	6839      	ldr	r1, [r7, #0]
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 fa1d 	bl	8001796 <set_accel_no_motion_int>
 800135c:	4603      	mov	r3, r0
 800135e:	73fb      	strb	r3, [r7, #15]
            break;
 8001360:	e046      	b.n	80013f0 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_DOUBLE_TAP_INT:
        case BMI160_ACC_SINGLE_TAP_INT:

            /* Double tap and single tap Interrupt */
            rslt = set_accel_tap_int(int_config, dev);
 8001362:	6839      	ldr	r1, [r7, #0]
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f000 f97c 	bl	8001662 <set_accel_tap_int>
 800136a:	4603      	mov	r3, r0
 800136c:	73fb      	strb	r3, [r7, #15]
            break;
 800136e:	e03f      	b.n	80013f0 <bmi160_set_int_config+0x10c>
        case BMI160_STEP_DETECT_INT:

            /* Step detector interrupt */
            rslt = set_accel_step_detect_int(int_config, dev);
 8001370:	6839      	ldr	r1, [r7, #0]
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f000 fa3d 	bl	80017f2 <set_accel_step_detect_int>
 8001378:	4603      	mov	r3, r0
 800137a:	73fb      	strb	r3, [r7, #15]
            break;
 800137c:	e038      	b.n	80013f0 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_ORIENT_INT:

            /* Orientation interrupt */
            rslt = set_accel_orientation_int(int_config, dev);
 800137e:	6839      	ldr	r1, [r7, #0]
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f000 fa77 	bl	8001874 <set_accel_orientation_int>
 8001386:	4603      	mov	r3, r0
 8001388:	73fb      	strb	r3, [r7, #15]
            break;
 800138a:	e031      	b.n	80013f0 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_FLAT_INT:

            /* Flat detection interrupt */
            rslt = set_accel_flat_detect_int(int_config, dev);
 800138c:	6839      	ldr	r1, [r7, #0]
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 fab1 	bl	80018f6 <set_accel_flat_detect_int>
 8001394:	4603      	mov	r3, r0
 8001396:	73fb      	strb	r3, [r7, #15]
            break;
 8001398:	e02a      	b.n	80013f0 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_LOW_G_INT:

            /* Low-g interrupt */
            rslt = set_accel_low_g_int(int_config, dev);
 800139a:	6839      	ldr	r1, [r7, #0]
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f000 faeb 	bl	8001978 <set_accel_low_g_int>
 80013a2:	4603      	mov	r3, r0
 80013a4:	73fb      	strb	r3, [r7, #15]
            break;
 80013a6:	e023      	b.n	80013f0 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_HIGH_G_INT:

            /* High-g interrupt */
            rslt = set_accel_high_g_int(int_config, dev);
 80013a8:	6839      	ldr	r1, [r7, #0]
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f000 fb2f 	bl	8001a0e <set_accel_high_g_int>
 80013b0:	4603      	mov	r3, r0
 80013b2:	73fb      	strb	r3, [r7, #15]
            break;
 80013b4:	e01c      	b.n	80013f0 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_DATA_RDY_INT:

            /* Data ready interrupt */
            rslt = set_accel_gyro_data_ready_int(int_config, dev);
 80013b6:	6839      	ldr	r1, [r7, #0]
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f000 f98b 	bl	80016d4 <set_accel_gyro_data_ready_int>
 80013be:	4603      	mov	r3, r0
 80013c0:	73fb      	strb	r3, [r7, #15]
            break;
 80013c2:	e015      	b.n	80013f0 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_FIFO_FULL_INT:

            /* Fifo full interrupt */
            rslt = set_fifo_full_int(int_config, dev);
 80013c4:	6839      	ldr	r1, [r7, #0]
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f002 fd7d 	bl	8003ec6 <set_fifo_full_int>
 80013cc:	4603      	mov	r3, r0
 80013ce:	73fb      	strb	r3, [r7, #15]
            break;
 80013d0:	e00e      	b.n	80013f0 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_FIFO_WATERMARK_INT:

            /* Fifo water-mark interrupt */
            rslt = set_fifo_watermark_int(int_config, dev);
 80013d2:	6839      	ldr	r1, [r7, #0]
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f002 fdde 	bl	8003f96 <set_fifo_watermark_int>
 80013da:	4603      	mov	r3, r0
 80013dc:	73fb      	strb	r3, [r7, #15]
            break;
 80013de:	e007      	b.n	80013f0 <bmi160_set_int_config+0x10c>
        case BMI160_FIFO_TAG_INT_PIN:

            /* Fifo tagging feature support */
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 80013e0:	6839      	ldr	r1, [r7, #0]
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 fb5e 	bl	8001aa4 <set_intr_pin_config>
 80013e8:	4603      	mov	r3, r0
 80013ea:	73fb      	strb	r3, [r7, #15]
            break;
 80013ec:	e000      	b.n	80013f0 <bmi160_set_int_config+0x10c>
        default:
            break;
 80013ee:	bf00      	nop
    }

    return rslt;
 80013f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <bmi160_start_foc>:
 *  Gyro FOC always targets value of 0 dps
 */
int8_t bmi160_start_foc(const struct bmi160_foc_conf *foc_conf,
                        struct bmi160_offsets *offset,
                        struct bmi160_dev const *dev)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f000 fb66 	bl	8001ada <null_ptr_check>
 800140e:	4603      	mov	r3, r0
 8001410:	75fb      	strb	r3, [r7, #23]
    if (rslt != BMI160_OK)
 8001412:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d002      	beq.n	8001420 <bmi160_start_foc+0x24>
    {
        rslt = BMI160_E_NULL_PTR;
 800141a:	23ff      	movs	r3, #255	@ 0xff
 800141c:	75fb      	strb	r3, [r7, #23]
 800141e:	e06b      	b.n	80014f8 <bmi160_start_foc+0xfc>
    }
    else
    {
        /* Set the offset enable bits */
        rslt = configure_offset_enable(foc_conf, dev);
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	68f8      	ldr	r0, [r7, #12]
 8001424:	f002 fe3f 	bl	80040a6 <configure_offset_enable>
 8001428:	4603      	mov	r3, r0
 800142a:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 800142c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d161      	bne.n	80014f8 <bmi160_start_foc+0xfc>
        {
            /* Read the FOC config from the sensor */
            rslt = bmi160_get_regs(BMI160_FOC_CONF_ADDR, &data, 1, dev);
 8001434:	f107 0116 	add.w	r1, r7, #22
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2201      	movs	r2, #1
 800143c:	2069      	movs	r0, #105	@ 0x69
 800143e:	f7ff fd71 	bl	8000f24 <bmi160_get_regs>
 8001442:	4603      	mov	r3, r0
 8001444:	75fb      	strb	r3, [r7, #23]

            /* Set the FOC config for gyro */
            data = BMI160_SET_BITS(data, BMI160_GYRO_FOC_EN, foc_conf->foc_gyr_en);
 8001446:	7dbb      	ldrb	r3, [r7, #22]
 8001448:	b25b      	sxtb	r3, r3
 800144a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800144e:	b25a      	sxtb	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	b25b      	sxtb	r3, r3
 8001456:	019b      	lsls	r3, r3, #6
 8001458:	b25b      	sxtb	r3, r3
 800145a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800145e:	b25b      	sxtb	r3, r3
 8001460:	4313      	orrs	r3, r2
 8001462:	b25b      	sxtb	r3, r3
 8001464:	b2db      	uxtb	r3, r3
 8001466:	75bb      	strb	r3, [r7, #22]

            /* Set the FOC config for accel xyz axes */
            data = BMI160_SET_BITS(data, BMI160_ACCEL_FOC_X_CONF, foc_conf->foc_acc_x);
 8001468:	7dbb      	ldrb	r3, [r7, #22]
 800146a:	b25b      	sxtb	r3, r3
 800146c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001470:	b25a      	sxtb	r2, r3
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	785b      	ldrb	r3, [r3, #1]
 8001476:	b25b      	sxtb	r3, r3
 8001478:	011b      	lsls	r3, r3, #4
 800147a:	b25b      	sxtb	r3, r3
 800147c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001480:	b25b      	sxtb	r3, r3
 8001482:	4313      	orrs	r3, r2
 8001484:	b25b      	sxtb	r3, r3
 8001486:	b2db      	uxtb	r3, r3
 8001488:	75bb      	strb	r3, [r7, #22]
            data = BMI160_SET_BITS(data, BMI160_ACCEL_FOC_Y_CONF, foc_conf->foc_acc_y);
 800148a:	7dbb      	ldrb	r3, [r7, #22]
 800148c:	b25b      	sxtb	r3, r3
 800148e:	f023 030c 	bic.w	r3, r3, #12
 8001492:	b25a      	sxtb	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	789b      	ldrb	r3, [r3, #2]
 8001498:	b25b      	sxtb	r3, r3
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	b25b      	sxtb	r3, r3
 800149e:	f003 030c 	and.w	r3, r3, #12
 80014a2:	b25b      	sxtb	r3, r3
 80014a4:	4313      	orrs	r3, r2
 80014a6:	b25b      	sxtb	r3, r3
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	75bb      	strb	r3, [r7, #22]
            data = BMI160_SET_BITS_POS_0(data, BMI160_ACCEL_FOC_Z_CONF, foc_conf->foc_acc_z);
 80014ac:	7dbb      	ldrb	r3, [r7, #22]
 80014ae:	b25b      	sxtb	r3, r3
 80014b0:	f023 0303 	bic.w	r3, r3, #3
 80014b4:	b25a      	sxtb	r2, r3
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	78db      	ldrb	r3, [r3, #3]
 80014ba:	b25b      	sxtb	r3, r3
 80014bc:	f003 0303 	and.w	r3, r3, #3
 80014c0:	b25b      	sxtb	r3, r3
 80014c2:	4313      	orrs	r3, r2
 80014c4:	b25b      	sxtb	r3, r3
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	75bb      	strb	r3, [r7, #22]
            if (rslt == BMI160_OK)
 80014ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d112      	bne.n	80014f8 <bmi160_start_foc+0xfc>
            {
                /* Set the FOC config in the sensor */
                rslt = bmi160_set_regs(BMI160_FOC_CONF_ADDR, &data, 1, dev);
 80014d2:	f107 0116 	add.w	r1, r7, #22
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2201      	movs	r2, #1
 80014da:	2069      	movs	r0, #105	@ 0x69
 80014dc:	f7ff fd55 	bl	8000f8a <bmi160_set_regs>
 80014e0:	4603      	mov	r3, r0
 80014e2:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMI160_OK)
 80014e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d105      	bne.n	80014f8 <bmi160_start_foc+0xfc>
                {
                    /* Procedure to trigger
                     * FOC and check status */
                    rslt = trigger_foc(offset, dev);
 80014ec:	6879      	ldr	r1, [r7, #4]
 80014ee:	68b8      	ldr	r0, [r7, #8]
 80014f0:	f002 fe25 	bl	800413e <trigger_foc>
 80014f4:	4603      	mov	r3, r0
 80014f6:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    }

    return rslt;
 80014f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <bmi160_get_offsets>:

/*!
 *  @brief This API reads and stores the offset values of accel and gyro
 */
int8_t bmi160_get_offsets(struct bmi160_offsets *offset, const struct bmi160_dev *dev)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b088      	sub	sp, #32
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
    uint8_t lsb, msb;
    int16_t offset_msb, offset_lsb;
    int16_t offset_data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800150e:	6838      	ldr	r0, [r7, #0]
 8001510:	f000 fae3 	bl	8001ada <null_ptr_check>
 8001514:	4603      	mov	r3, r0
 8001516:	77fb      	strb	r3, [r7, #31]
    if (rslt != BMI160_OK)
 8001518:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d002      	beq.n	8001526 <bmi160_get_offsets+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8001520:	23ff      	movs	r3, #255	@ 0xff
 8001522:	77fb      	strb	r3, [r7, #31]
 8001524:	e069      	b.n	80015fa <bmi160_get_offsets+0xf6>
    }
    else
    {
        /* Read the FOC config from the sensor */
        rslt = bmi160_get_regs(BMI160_OFFSET_ADDR, data, 7, dev);
 8001526:	f107 010c 	add.w	r1, r7, #12
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	2207      	movs	r2, #7
 800152e:	2071      	movs	r0, #113	@ 0x71
 8001530:	f7ff fcf8 	bl	8000f24 <bmi160_get_regs>
 8001534:	4603      	mov	r3, r0
 8001536:	77fb      	strb	r3, [r7, #31]

        /* Accel offsets */
        offset->off_acc_x = (int8_t)data[0];
 8001538:	7b3b      	ldrb	r3, [r7, #12]
 800153a:	b25a      	sxtb	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	701a      	strb	r2, [r3, #0]
        offset->off_acc_y = (int8_t)data[1];
 8001540:	7b7b      	ldrb	r3, [r7, #13]
 8001542:	b25a      	sxtb	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	705a      	strb	r2, [r3, #1]
        offset->off_acc_z = (int8_t)data[2];
 8001548:	7bbb      	ldrb	r3, [r7, #14]
 800154a:	b25a      	sxtb	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	709a      	strb	r2, [r3, #2]

        /* Gyro x-axis offset */
        lsb = data[3];
 8001550:	7bfb      	ldrb	r3, [r7, #15]
 8001552:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS_POS_0(data[6], BMI160_GYRO_OFFSET_X);
 8001554:	7cbb      	ldrb	r3, [r7, #18]
 8001556:	f003 0303 	and.w	r3, r3, #3
 800155a:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 800155c:	7f7b      	ldrb	r3, [r7, #29]
 800155e:	b21b      	sxth	r3, r3
 8001560:	039b      	lsls	r3, r3, #14
 8001562:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 8001564:	7fbb      	ldrb	r3, [r7, #30]
 8001566:	b21b      	sxth	r3, r3
 8001568:	019b      	lsls	r3, r3, #6
 800156a:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 800156c:	8b7a      	ldrh	r2, [r7, #26]
 800156e:	8b3b      	ldrh	r3, [r7, #24]
 8001570:	4313      	orrs	r3, r2
 8001572:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_x = (int16_t)(offset_data / 64);
 8001574:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001578:	2b00      	cmp	r3, #0
 800157a:	da00      	bge.n	800157e <bmi160_get_offsets+0x7a>
 800157c:	333f      	adds	r3, #63	@ 0x3f
 800157e:	119b      	asrs	r3, r3, #6
 8001580:	b21a      	sxth	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	809a      	strh	r2, [r3, #4]

        /* Gyro y-axis offset */
        lsb = data[4];
 8001586:	7c3b      	ldrb	r3, [r7, #16]
 8001588:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Y);
 800158a:	7cbb      	ldrb	r3, [r7, #18]
 800158c:	109b      	asrs	r3, r3, #2
 800158e:	b2db      	uxtb	r3, r3
 8001590:	f003 0303 	and.w	r3, r3, #3
 8001594:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 8001596:	7f7b      	ldrb	r3, [r7, #29]
 8001598:	b21b      	sxth	r3, r3
 800159a:	039b      	lsls	r3, r3, #14
 800159c:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 800159e:	7fbb      	ldrb	r3, [r7, #30]
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	019b      	lsls	r3, r3, #6
 80015a4:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 80015a6:	8b7a      	ldrh	r2, [r7, #26]
 80015a8:	8b3b      	ldrh	r3, [r7, #24]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_y = (int16_t)(offset_data / 64);
 80015ae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	da00      	bge.n	80015b8 <bmi160_get_offsets+0xb4>
 80015b6:	333f      	adds	r3, #63	@ 0x3f
 80015b8:	119b      	asrs	r3, r3, #6
 80015ba:	b21a      	sxth	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	80da      	strh	r2, [r3, #6]

        /* Gyro z-axis offset */
        lsb = data[5];
 80015c0:	7c7b      	ldrb	r3, [r7, #17]
 80015c2:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Z);
 80015c4:	7cbb      	ldrb	r3, [r7, #18]
 80015c6:	111b      	asrs	r3, r3, #4
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 80015d0:	7f7b      	ldrb	r3, [r7, #29]
 80015d2:	b21b      	sxth	r3, r3
 80015d4:	039b      	lsls	r3, r3, #14
 80015d6:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 80015d8:	7fbb      	ldrb	r3, [r7, #30]
 80015da:	b21b      	sxth	r3, r3
 80015dc:	019b      	lsls	r3, r3, #6
 80015de:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 80015e0:	8b7a      	ldrh	r2, [r7, #26]
 80015e2:	8b3b      	ldrh	r3, [r7, #24]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_z = (int16_t)(offset_data / 64);
 80015e8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	da00      	bge.n	80015f2 <bmi160_get_offsets+0xee>
 80015f0:	333f      	adds	r3, #63	@ 0x3f
 80015f2:	119b      	asrs	r3, r3, #6
 80015f4:	b21a      	sxth	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	811a      	strh	r2, [r3, #8]
    }

    return rslt;
 80015fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3720      	adds	r7, #32
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <set_accel_any_motion_int>:
 * @brief This API sets the any-motion interrupt of the sensor.
 * This interrupt occurs when accel values exceeds preset threshold
 * for a certain period of time.
 */
static int8_t set_accel_any_motion_int(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b084      	sub	sp, #16
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
 800160e:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001610:	6838      	ldr	r0, [r7, #0]
 8001612:	f000 fa62 	bl	8001ada <null_ptr_check>
 8001616:	4603      	mov	r3, r0
 8001618:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 800161a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d102      	bne.n	8001628 <set_accel_any_motion_int+0x22>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d102      	bne.n	800162e <set_accel_any_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8001628:	23ff      	movs	r3, #255	@ 0xff
 800162a:	73fb      	strb	r3, [r7, #15]
 800162c:	e013      	b.n	8001656 <set_accel_any_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg = &(int_config->int_type_cfg.acc_any_motion_int);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3304      	adds	r3, #4
 8001632:	60bb      	str	r3, [r7, #8]
        rslt = enable_accel_any_motion_int(any_motion_int_cfg, dev);
 8001634:	6839      	ldr	r1, [r7, #0]
 8001636:	68b8      	ldr	r0, [r7, #8]
 8001638:	f001 f920 	bl	800287c <enable_accel_any_motion_int>
 800163c:	4603      	mov	r3, r0
 800163e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d106      	bne.n	8001656 <set_accel_any_motion_int+0x50>
        {
            rslt = config_any_motion_int_settg(int_config, any_motion_int_cfg, dev);
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	68b9      	ldr	r1, [r7, #8]
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f001 fb4b 	bl	8002ce8 <config_any_motion_int_settg>
 8001652:	4603      	mov	r3, r0
 8001654:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001656:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800165a:	4618      	mov	r0, r3
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <set_accel_tap_int>:
/*!
 * @brief This API sets tap interrupts.Interrupt is fired when
 * tap movements happen.
 */
static int8_t set_accel_tap_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b084      	sub	sp, #16
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
 800166a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800166c:	6838      	ldr	r0, [r7, #0]
 800166e:	f000 fa34 	bl	8001ada <null_ptr_check>
 8001672:	4603      	mov	r3, r0
 8001674:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8001676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d102      	bne.n	8001684 <set_accel_tap_int+0x22>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d102      	bne.n	800168a <set_accel_tap_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8001684:	23ff      	movs	r3, #255	@ 0xff
 8001686:	73fb      	strb	r3, [r7, #15]
 8001688:	e01e      	b.n	80016c8 <set_accel_tap_int+0x66>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_tap_int_cfg *tap_int_cfg = &(int_config->int_type_cfg.acc_tap_int);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3304      	adds	r3, #4
 800168e:	60bb      	str	r3, [r7, #8]
        rslt = enable_tap_int(int_config, tap_int_cfg, dev);
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	68b9      	ldr	r1, [r7, #8]
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f001 fe8d 	bl	80033b4 <enable_tap_int>
 800169a:	4603      	mov	r3, r0
 800169c:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800169e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d110      	bne.n	80016c8 <set_accel_tap_int+0x66>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 80016a6:	6839      	ldr	r1, [r7, #0]
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f000 f9fb 	bl	8001aa4 <set_intr_pin_config>
 80016ae:	4603      	mov	r3, r0
 80016b0:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80016b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d106      	bne.n	80016c8 <set_accel_tap_int+0x66>
            {
                rslt = config_tap_int_settg(int_config, tap_int_cfg, dev);
 80016ba:	683a      	ldr	r2, [r7, #0]
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f001 fecd 	bl	800345e <config_tap_int_settg>
 80016c4:	4603      	mov	r3, r0
 80016c6:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80016c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <set_accel_gyro_data_ready_int>:
/*!
 * @brief This API sets the data ready interrupt for both accel and gyro.
 * This interrupt occurs when new accel and gyro data comes.
 */
static int8_t set_accel_gyro_data_ready_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80016de:	6838      	ldr	r0, [r7, #0]
 80016e0:	f000 f9fb 	bl	8001ada <null_ptr_check>
 80016e4:	4603      	mov	r3, r0
 80016e6:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80016e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d102      	bne.n	80016f6 <set_accel_gyro_data_ready_int+0x22>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d102      	bne.n	80016fc <set_accel_gyro_data_ready_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80016f6:	23ff      	movs	r3, #255	@ 0xff
 80016f8:	73fb      	strb	r3, [r7, #15]
 80016fa:	e018      	b.n	800172e <set_accel_gyro_data_ready_int+0x5a>
    }
    else
    {
        rslt = enable_data_ready_int(dev);
 80016fc:	6838      	ldr	r0, [r7, #0]
 80016fe:	f001 fb2c 	bl	8002d5a <enable_data_ready_int>
 8001702:	4603      	mov	r3, r0
 8001704:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10f      	bne.n	800172e <set_accel_gyro_data_ready_int+0x5a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 800170e:	6839      	ldr	r1, [r7, #0]
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f000 f9c7 	bl	8001aa4 <set_intr_pin_config>
 8001716:	4603      	mov	r3, r0
 8001718:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800171a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d105      	bne.n	800172e <set_accel_gyro_data_ready_int+0x5a>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 8001722:	6839      	ldr	r1, [r7, #0]
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f001 f9df 	bl	8002ae8 <map_hardware_interrupt>
 800172a:	4603      	mov	r3, r0
 800172c:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800172e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <set_accel_sig_motion_int>:
/*!
 * @brief This API sets the significant motion interrupt of the sensor.This
 * interrupt occurs when there is change in user location.
 */
static int8_t set_accel_sig_motion_int(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b084      	sub	sp, #16
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
 8001742:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001744:	6838      	ldr	r0, [r7, #0]
 8001746:	f000 f9c8 	bl	8001ada <null_ptr_check>
 800174a:	4603      	mov	r3, r0
 800174c:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 800174e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d102      	bne.n	800175c <set_accel_sig_motion_int+0x22>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d102      	bne.n	8001762 <set_accel_sig_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 800175c:	23ff      	movs	r3, #255	@ 0xff
 800175e:	73fb      	strb	r3, [r7, #15]
 8001760:	e013      	b.n	800178a <set_accel_sig_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg = &(int_config->int_type_cfg.acc_sig_motion_int);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3304      	adds	r3, #4
 8001766:	60bb      	str	r3, [r7, #8]
        rslt = enable_sig_motion_int(sig_mot_int_cfg, dev);
 8001768:	6839      	ldr	r1, [r7, #0]
 800176a:	68b8      	ldr	r0, [r7, #8]
 800176c:	f001 fc4d 	bl	800300a <enable_sig_motion_int>
 8001770:	4603      	mov	r3, r0
 8001772:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001774:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d106      	bne.n	800178a <set_accel_sig_motion_int+0x50>
        {
            rslt = config_sig_motion_int_settg(int_config, sig_mot_int_cfg, dev);
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	68b9      	ldr	r1, [r7, #8]
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f001 fc83 	bl	800308c <config_sig_motion_int_settg>
 8001786:	4603      	mov	r3, r0
 8001788:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800178a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <set_accel_no_motion_int>:
 * Slow motion is similar to any motion interrupt.No motion interrupt
 * occurs when slope bet. two accel values falls below preset threshold
 * for preset duration.
 */
static int8_t set_accel_no_motion_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b084      	sub	sp, #16
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
 800179e:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80017a0:	6838      	ldr	r0, [r7, #0]
 80017a2:	f000 f99a 	bl	8001ada <null_ptr_check>
 80017a6:	4603      	mov	r3, r0
 80017a8:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80017aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d102      	bne.n	80017b8 <set_accel_no_motion_int+0x22>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d102      	bne.n	80017be <set_accel_no_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80017b8:	23ff      	movs	r3, #255	@ 0xff
 80017ba:	73fb      	strb	r3, [r7, #15]
 80017bc:	e013      	b.n	80017e6 <set_accel_no_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg = &(int_config->int_type_cfg.acc_no_motion_int);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3304      	adds	r3, #4
 80017c2:	60bb      	str	r3, [r7, #8]
        rslt = enable_no_motion_int(no_mot_int_cfg, dev);
 80017c4:	6839      	ldr	r1, [r7, #0]
 80017c6:	68b8      	ldr	r0, [r7, #8]
 80017c8:	f001 faf4 	bl	8002db4 <enable_no_motion_int>
 80017cc:	4603      	mov	r3, r0
 80017ce:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80017d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d106      	bne.n	80017e6 <set_accel_no_motion_int+0x50>
        {
            /* Configure the INT PIN settings*/
            rslt = config_no_motion_int_settg(int_config, no_mot_int_cfg, dev);
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	68b9      	ldr	r1, [r7, #8]
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f001 fb3e 	bl	8002e5e <config_no_motion_int_settg>
 80017e2:	4603      	mov	r3, r0
 80017e4:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80017e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <set_accel_step_detect_int>:
 * @brief This API sets the step detection interrupt.This interrupt
 * occurs when the single step causes accel values to go above
 * preset threshold.
 */
static int8_t set_accel_step_detect_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b084      	sub	sp, #16
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80017fc:	6838      	ldr	r0, [r7, #0]
 80017fe:	f000 f96c 	bl	8001ada <null_ptr_check>
 8001802:	4603      	mov	r3, r0
 8001804:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8001806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d102      	bne.n	8001814 <set_accel_step_detect_int+0x22>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d102      	bne.n	800181a <set_accel_step_detect_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8001814:	23ff      	movs	r3, #255	@ 0xff
 8001816:	73fb      	strb	r3, [r7, #15]
 8001818:	e026      	b.n	8001868 <set_accel_step_detect_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg = &(int_config->int_type_cfg.acc_step_detect_int);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3304      	adds	r3, #4
 800181e:	60bb      	str	r3, [r7, #8]
        rslt = enable_step_detect_int(step_detect_int_cfg, dev);
 8001820:	6839      	ldr	r1, [r7, #0]
 8001822:	68b8      	ldr	r0, [r7, #8]
 8001824:	f001 fd0b 	bl	800323e <enable_step_detect_int>
 8001828:	4603      	mov	r3, r0
 800182a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800182c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d119      	bne.n	8001868 <set_accel_step_detect_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8001834:	6839      	ldr	r1, [r7, #0]
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 f934 	bl	8001aa4 <set_intr_pin_config>
 800183c:	4603      	mov	r3, r0
 800183e:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001840:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d10f      	bne.n	8001868 <set_accel_step_detect_int+0x76>
            {
                rslt = map_feature_interrupt(int_config, dev);
 8001848:	6839      	ldr	r1, [r7, #0]
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f001 f8b8 	bl	80029c0 <map_feature_interrupt>
 8001850:	4603      	mov	r3, r0
 8001852:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8001854:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d105      	bne.n	8001868 <set_accel_step_detect_int+0x76>
                {
                    rslt = config_step_detect(step_detect_int_cfg, dev);
 800185c:	6839      	ldr	r1, [r7, #0]
 800185e:	68b8      	ldr	r0, [r7, #8]
 8001860:	f001 fd27 	bl	80032b2 <config_step_detect>
 8001864:	4603      	mov	r3, r0
 8001866:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001868:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3710      	adds	r7, #16
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <set_accel_orientation_int>:
 * @brief This API sets the orientation interrupt of the sensor.This
 * interrupt occurs when there is orientation change in the sensor
 * with respect to gravitational field vector g.
 */
static int8_t set_accel_orientation_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800187e:	6838      	ldr	r0, [r7, #0]
 8001880:	f000 f92b 	bl	8001ada <null_ptr_check>
 8001884:	4603      	mov	r3, r0
 8001886:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8001888:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d102      	bne.n	8001896 <set_accel_orientation_int+0x22>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d102      	bne.n	800189c <set_accel_orientation_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8001896:	23ff      	movs	r3, #255	@ 0xff
 8001898:	73fb      	strb	r3, [r7, #15]
 800189a:	e026      	b.n	80018ea <set_accel_orientation_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_orient_int_cfg *orient_int_cfg = &(int_config->int_type_cfg.acc_orient_int);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3304      	adds	r3, #4
 80018a0:	60bb      	str	r3, [r7, #8]
        rslt = enable_orient_int(orient_int_cfg, dev);
 80018a2:	6839      	ldr	r1, [r7, #0]
 80018a4:	68b8      	ldr	r0, [r7, #8]
 80018a6:	f001 fee1 	bl	800366c <enable_orient_int>
 80018aa:	4603      	mov	r3, r0
 80018ac:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80018ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d119      	bne.n	80018ea <set_accel_orientation_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 80018b6:	6839      	ldr	r1, [r7, #0]
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 f8f3 	bl	8001aa4 <set_intr_pin_config>
 80018be:	4603      	mov	r3, r0
 80018c0:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80018c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d10f      	bne.n	80018ea <set_accel_orientation_int+0x76>
            {
                /* map INT pin to orient interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 80018ca:	6839      	ldr	r1, [r7, #0]
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f001 f877 	bl	80029c0 <map_feature_interrupt>
 80018d2:	4603      	mov	r3, r0
 80018d4:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 80018d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d105      	bne.n	80018ea <set_accel_orientation_int+0x76>
                {
                    /* configure the
                     * orientation setting*/
                    rslt = config_orient_int_settg(orient_int_cfg, dev);
 80018de:	6839      	ldr	r1, [r7, #0]
 80018e0:	68b8      	ldr	r0, [r7, #8]
 80018e2:	f001 fefd 	bl	80036e0 <config_orient_int_settg>
 80018e6:	4603      	mov	r3, r0
 80018e8:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80018ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <set_accel_flat_detect_int>:
/*!
 * @brief This API sets the flat interrupt of the sensor.This interrupt
 * occurs in case of flat orientation
 */
static int8_t set_accel_flat_detect_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b084      	sub	sp, #16
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
 80018fe:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001900:	6838      	ldr	r0, [r7, #0]
 8001902:	f000 f8ea 	bl	8001ada <null_ptr_check>
 8001906:	4603      	mov	r3, r0
 8001908:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 800190a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d102      	bne.n	8001918 <set_accel_flat_detect_int+0x22>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d102      	bne.n	800191e <set_accel_flat_detect_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8001918:	23ff      	movs	r3, #255	@ 0xff
 800191a:	73fb      	strb	r3, [r7, #15]
 800191c:	e026      	b.n	800196c <set_accel_flat_detect_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_flat_detect_int_cfg *flat_detect_int = &(int_config->int_type_cfg.acc_flat_int);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	3304      	adds	r3, #4
 8001922:	60bb      	str	r3, [r7, #8]

        /* enable the flat interrupt */
        rslt = enable_flat_int(flat_detect_int, dev);
 8001924:	6839      	ldr	r1, [r7, #0]
 8001926:	68b8      	ldr	r0, [r7, #8]
 8001928:	f001 ff6d 	bl	8003806 <enable_flat_int>
 800192c:	4603      	mov	r3, r0
 800192e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001930:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d119      	bne.n	800196c <set_accel_flat_detect_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8001938:	6839      	ldr	r1, [r7, #0]
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 f8b2 	bl	8001aa4 <set_intr_pin_config>
 8001940:	4603      	mov	r3, r0
 8001942:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001944:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d10f      	bne.n	800196c <set_accel_flat_detect_int+0x76>
            {
                /* map INT pin to flat interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 800194c:	6839      	ldr	r1, [r7, #0]
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f001 f836 	bl	80029c0 <map_feature_interrupt>
 8001954:	4603      	mov	r3, r0
 8001956:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8001958:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d105      	bne.n	800196c <set_accel_flat_detect_int+0x76>
                {
                    /* configure the flat setting*/
                    rslt = config_flat_int_settg(flat_detect_int, dev);
 8001960:	6839      	ldr	r1, [r7, #0]
 8001962:	68b8      	ldr	r0, [r7, #8]
 8001964:	f001 ff86 	bl	8003874 <config_flat_int_settg>
 8001968:	4603      	mov	r3, r0
 800196a:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 800196c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <set_accel_low_g_int>:
/*!
 * @brief This API sets the low-g interrupt of the sensor.This interrupt
 * occurs during free-fall.
 */
static int8_t set_accel_low_g_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001982:	6838      	ldr	r0, [r7, #0]
 8001984:	f000 f8a9 	bl	8001ada <null_ptr_check>
 8001988:	4603      	mov	r3, r0
 800198a:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 800198c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d102      	bne.n	800199a <set_accel_low_g_int+0x22>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d102      	bne.n	80019a0 <set_accel_low_g_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 800199a:	23ff      	movs	r3, #255	@ 0xff
 800199c:	73fb      	strb	r3, [r7, #15]
 800199e:	e030      	b.n	8001a02 <set_accel_low_g_int+0x8a>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_low_g_int_cfg *low_g_int = &(int_config->int_type_cfg.acc_low_g_int);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3304      	adds	r3, #4
 80019a4:	60bb      	str	r3, [r7, #8]

        /* Enable the low-g interrupt*/
        rslt = enable_low_g_int(low_g_int, dev);
 80019a6:	6839      	ldr	r1, [r7, #0]
 80019a8:	68b8      	ldr	r0, [r7, #8]
 80019aa:	f001 ffc0 	bl	800392e <enable_low_g_int>
 80019ae:	4603      	mov	r3, r0
 80019b0:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80019b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d123      	bne.n	8001a02 <set_accel_low_g_int+0x8a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 80019ba:	6839      	ldr	r1, [r7, #0]
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 f871 	bl	8001aa4 <set_intr_pin_config>
 80019c2:	4603      	mov	r3, r0
 80019c4:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80019c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d119      	bne.n	8001a02 <set_accel_low_g_int+0x8a>
            {
                /* Map INT pin to low-g interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 80019ce:	6839      	ldr	r1, [r7, #0]
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 fff5 	bl	80029c0 <map_feature_interrupt>
 80019d6:	4603      	mov	r3, r0
 80019d8:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 80019da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d10f      	bne.n	8001a02 <set_accel_low_g_int+0x8a>
                {
                    /* configure the data source
                     * for low-g interrupt*/
                    rslt = config_low_g_data_src(low_g_int, dev);
 80019e2:	6839      	ldr	r1, [r7, #0]
 80019e4:	68b8      	ldr	r0, [r7, #8]
 80019e6:	f001 ffdc 	bl	80039a2 <config_low_g_data_src>
 80019ea:	4603      	mov	r3, r0
 80019ec:	73fb      	strb	r3, [r7, #15]
                    if (rslt == BMI160_OK)
 80019ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d105      	bne.n	8001a02 <set_accel_low_g_int+0x8a>
                    {
                        rslt = config_low_g_int_settg(low_g_int, dev);
 80019f6:	6839      	ldr	r1, [r7, #0]
 80019f8:	68b8      	ldr	r0, [r7, #8]
 80019fa:	f002 f809 	bl	8003a10 <config_low_g_int_settg>
 80019fe:	4603      	mov	r3, r0
 8001a00:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <set_accel_high_g_int>:
 * occurs if the absolute value of acceleration data of any enabled axis
 * exceeds the programmed threshold and the sign of the value does not
 * change for a preset duration.
 */
static int8_t set_accel_high_g_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b084      	sub	sp, #16
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
 8001a16:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001a18:	6838      	ldr	r0, [r7, #0]
 8001a1a:	f000 f85e 	bl	8001ada <null_ptr_check>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8001a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d102      	bne.n	8001a30 <set_accel_high_g_int+0x22>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d102      	bne.n	8001a36 <set_accel_high_g_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8001a30:	23ff      	movs	r3, #255	@ 0xff
 8001a32:	73fb      	strb	r3, [r7, #15]
 8001a34:	e030      	b.n	8001a98 <set_accel_high_g_int+0x8a>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_high_g_int_cfg *high_g_int_cfg = &(int_config->int_type_cfg.acc_high_g_int);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	60bb      	str	r3, [r7, #8]

        /* Enable the high-g interrupt */
        rslt = enable_high_g_int(high_g_int_cfg, dev);
 8001a3c:	6839      	ldr	r1, [r7, #0]
 8001a3e:	68b8      	ldr	r0, [r7, #8]
 8001a40:	f002 f83a 	bl	8003ab8 <enable_high_g_int>
 8001a44:	4603      	mov	r3, r0
 8001a46:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001a48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d123      	bne.n	8001a98 <set_accel_high_g_int+0x8a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8001a50:	6839      	ldr	r1, [r7, #0]
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 f826 	bl	8001aa4 <set_intr_pin_config>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001a5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d119      	bne.n	8001a98 <set_accel_high_g_int+0x8a>
            {
                /* Map INT pin to high-g interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 8001a64:	6839      	ldr	r1, [r7, #0]
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 ffaa 	bl	80029c0 <map_feature_interrupt>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8001a70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d10f      	bne.n	8001a98 <set_accel_high_g_int+0x8a>
                {
                    /* configure the data source
                     * for high-g interrupt*/
                    rslt = config_high_g_data_src(high_g_int_cfg, dev);
 8001a78:	6839      	ldr	r1, [r7, #0]
 8001a7a:	68b8      	ldr	r0, [r7, #8]
 8001a7c:	f002 f879 	bl	8003b72 <config_high_g_data_src>
 8001a80:	4603      	mov	r3, r0
 8001a82:	73fb      	strb	r3, [r7, #15]
                    if (rslt == BMI160_OK)
 8001a84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d105      	bne.n	8001a98 <set_accel_high_g_int+0x8a>
                    {
                        rslt = config_high_g_int_settg(high_g_int_cfg, dev);
 8001a8c:	6839      	ldr	r1, [r7, #0]
 8001a8e:	68b8      	ldr	r0, [r7, #8]
 8001a90:	f002 f8a6 	bl	8003be0 <config_high_g_int_settg>
 8001a94:	4603      	mov	r3, r0
 8001a96:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001a98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <set_intr_pin_config>:
/*!
 * @brief This API configures the pins to fire the
 * interrupt signal when it occurs.
 */
static int8_t set_intr_pin_config(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* configure the behavioural settings of interrupt pin */
    rslt = config_int_out_ctrl(int_config, dev);
 8001aae:	6839      	ldr	r1, [r7, #0]
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f002 f8d7 	bl	8003c64 <config_int_out_ctrl>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d105      	bne.n	8001ace <set_intr_pin_config+0x2a>
    {
        rslt = config_int_latch(int_config, dev);
 8001ac2:	6839      	ldr	r1, [r7, #0]
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f002 f999 	bl	8003dfc <config_int_latch>
 8001aca:	4603      	mov	r3, r0
 8001acc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi160_dev *dev)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b085      	sub	sp, #20
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d00b      	beq.n	8001b00 <null_ptr_check+0x26>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	69db      	ldr	r3, [r3, #28]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d007      	beq.n	8001b00 <null_ptr_check+0x26>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a1b      	ldr	r3, [r3, #32]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <null_ptr_check+0x26>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d102      	bne.n	8001b06 <null_ptr_check+0x2c>
    {
        rslt = BMI160_E_NULL_PTR;
 8001b00:	23ff      	movs	r3, #255	@ 0xff
 8001b02:	73fb      	strb	r3, [r7, #15]
 8001b04:	e001      	b.n	8001b0a <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI160_OK;
 8001b06:	2300      	movs	r3, #0
 8001b08:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3714      	adds	r7, #20
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <default_param_settg>:
/*!
 * @brief This API sets the default configuration parameters of accel & gyro.
 * Also maintain the previous state of configurations.
 */
static void default_param_settg(struct bmi160_dev *dev)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
    /* Initializing accel and gyro params with
     * default values */
    dev->accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2202      	movs	r2, #2
 8001b26:	71da      	strb	r2, [r3, #7]
    dev->accel_cfg.odr = BMI160_ACCEL_ODR_100HZ;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2208      	movs	r2, #8
 8001b2c:	715a      	strb	r2, [r3, #5]
    dev->accel_cfg.power = BMI160_ACCEL_SUSPEND_MODE;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2210      	movs	r2, #16
 8001b32:	711a      	strb	r2, [r3, #4]
    dev->accel_cfg.range = BMI160_ACCEL_RANGE_2G;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2203      	movs	r2, #3
 8001b38:	719a      	strb	r2, [r3, #6]
    dev->gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	73da      	strb	r2, [r3, #15]
    dev->gyro_cfg.odr = BMI160_GYRO_ODR_100HZ;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2208      	movs	r2, #8
 8001b44:	735a      	strb	r2, [r3, #13]
    dev->gyro_cfg.power = BMI160_GYRO_SUSPEND_MODE;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2214      	movs	r2, #20
 8001b4a:	731a      	strb	r2, [r3, #12]
    dev->gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	739a      	strb	r2, [r3, #14]

    /* To maintain the previous state of accel configuration */
    dev->prev_accel_cfg = dev->accel_cfg;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6852      	ldr	r2, [r2, #4]
 8001b58:	609a      	str	r2, [r3, #8]

    /* To maintain the previous state of gyro configuration */
    dev->prev_gyro_cfg = dev->gyro_cfg;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	68d2      	ldr	r2, [r2, #12]
 8001b60:	611a      	str	r2, [r3, #16]
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <set_accel_conf>:

/*!
 * @brief This API set the accel configuration.
 */
static int8_t set_accel_conf(struct bmi160_dev *dev)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b084      	sub	sp, #16
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 8001b76:	2300      	movs	r3, #0
 8001b78:	81bb      	strh	r3, [r7, #12]

    rslt = check_accel_config(data, dev);
 8001b7a:	f107 030c 	add.w	r3, r7, #12
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f000 f833 	bl	8001bec <check_accel_config>
 8001b86:	4603      	mov	r3, r0
 8001b88:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d126      	bne.n	8001be0 <set_accel_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, &data[0], 1, dev);
 8001b92:	f107 010c 	add.w	r1, r7, #12
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	2040      	movs	r0, #64	@ 0x40
 8001b9c:	f7ff f9f5 	bl	8000f8a <bmi160_set_regs>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001ba4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d119      	bne.n	8001be0 <set_accel_conf+0x72>
        {
            dev->prev_accel_cfg.odr = dev->accel_cfg.odr;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	795a      	ldrb	r2, [r3, #5]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	725a      	strb	r2, [r3, #9]
            dev->prev_accel_cfg.bw = dev->accel_cfg.bw;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	79da      	ldrb	r2, [r3, #7]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	72da      	strb	r2, [r3, #11]

            /* write accel range */
            rslt = bmi160_set_regs(BMI160_ACCEL_RANGE_ADDR, &data[1], 1, dev);
 8001bbc:	f107 030c 	add.w	r3, r7, #12
 8001bc0:	1c59      	adds	r1, r3, #1
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	2041      	movs	r0, #65	@ 0x41
 8001bc8:	f7ff f9df 	bl	8000f8a <bmi160_set_regs>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001bd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d103      	bne.n	8001be0 <set_accel_conf+0x72>
            {
                dev->prev_accel_cfg.range = dev->accel_cfg.range;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	799a      	ldrb	r2, [r3, #6]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	729a      	strb	r2, [r3, #10]
            }
        }
    }

    return rslt;
 8001be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <check_accel_config>:

/*!
 * @brief This API check the accel configuration.
 */
static int8_t check_accel_config(uint8_t *data, const struct bmi160_dev *dev)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read accel Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 2, dev);
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	2040      	movs	r0, #64	@ 0x40
 8001bfe:	f7ff f991 	bl	8000f24 <bmi160_get_regs>
 8001c02:	4603      	mov	r3, r0
 8001c04:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d11b      	bne.n	8001c46 <check_accel_config+0x5a>
    {
        rslt = process_accel_odr(&data[0], dev);
 8001c0e:	6839      	ldr	r1, [r7, #0]
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f81e 	bl	8001c52 <process_accel_odr>
 8001c16:	4603      	mov	r3, r0
 8001c18:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d111      	bne.n	8001c46 <check_accel_config+0x5a>
        {
            rslt = process_accel_bw(&data[0], dev);
 8001c22:	6839      	ldr	r1, [r7, #0]
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 f848 	bl	8001cba <process_accel_bw>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d107      	bne.n	8001c46 <check_accel_config+0x5a>
            {
                rslt = process_accel_range(&data[1], dev);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	6839      	ldr	r1, [r7, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f000 f872 	bl	8001d26 <process_accel_range>
 8001c42:	4603      	mov	r3, r0
 8001c44:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <process_accel_odr>:

/*!
 * @brief This API process the accel odr.
 */
static int8_t process_accel_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b085      	sub	sp, #20
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.odr <= BMI160_ACCEL_ODR_1600HZ)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	795b      	ldrb	r3, [r3, #5]
 8001c6c:	2b0c      	cmp	r3, #12
 8001c6e:	d81a      	bhi.n	8001ca6 <process_accel_odr+0x54>
    {
        if (dev->accel_cfg.odr != dev->prev_accel_cfg.odr)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	795a      	ldrb	r2, [r3, #5]
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	7a5b      	ldrb	r3, [r3, #9]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d016      	beq.n	8001caa <process_accel_odr+0x58>
        {
            odr = (uint8_t)dev->accel_cfg.odr;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	795b      	ldrb	r3, [r3, #5]
 8001c80:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_ODR_MASK;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	f023 030f 	bic.w	r3, r3, #15
 8001c8a:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_ACCEL_ODR_MASK);
 8001c8c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001c90:	f003 030f 	and.w	r3, r3, #15
 8001c94:	b25a      	sxtb	r2, r3
 8001c96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	b25b      	sxtb	r3, r3
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	701a      	strb	r2, [r3, #0]
 8001ca4:	e001      	b.n	8001caa <process_accel_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001ca6:	23fc      	movs	r3, #252	@ 0xfc
 8001ca8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3714      	adds	r7, #20
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <process_accel_bw>:

/*!
 * @brief This API process the accel bandwidth.
 */
static int8_t process_accel_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b085      	sub	sp, #20
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.bw <= BMI160_ACCEL_BW_RES_AVG128)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	79db      	ldrb	r3, [r3, #7]
 8001cd4:	2b07      	cmp	r3, #7
 8001cd6:	d81c      	bhi.n	8001d12 <process_accel_bw+0x58>
    {
        if (dev->accel_cfg.bw != dev->prev_accel_cfg.bw)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	79da      	ldrb	r2, [r3, #7]
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	7adb      	ldrb	r3, [r3, #11]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d018      	beq.n	8001d16 <process_accel_bw+0x5c>
        {
            bw = (uint8_t)dev->accel_cfg.bw;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	79db      	ldrb	r3, [r3, #7]
 8001ce8:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_BW_MASK;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001cf2:	73bb      	strb	r3, [r7, #14]

            /* Adding bandwidth */
            *data = temp | ((bw << 4) & BMI160_ACCEL_BW_MASK);
 8001cf4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001cf8:	011b      	lsls	r3, r3, #4
 8001cfa:	b25b      	sxtb	r3, r3
 8001cfc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d00:	b25a      	sxtb	r2, r3
 8001d02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	b25b      	sxtb	r3, r3
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	701a      	strb	r2, [r3, #0]
 8001d10:	e001      	b.n	8001d16 <process_accel_bw+0x5c>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001d12:	23fc      	movs	r3, #252	@ 0xfc
 8001d14:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <process_accel_range>:

/*!
 * @brief This API process the accel range.
 */
static int8_t process_accel_range(uint8_t *data, const struct bmi160_dev *dev)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b085      	sub	sp, #20
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.range <= BMI160_ACCEL_RANGE_16G)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	799b      	ldrb	r3, [r3, #6]
 8001d40:	2b0c      	cmp	r3, #12
 8001d42:	d81a      	bhi.n	8001d7a <process_accel_range+0x54>
    {
        if (dev->accel_cfg.range != dev->prev_accel_cfg.range)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	799a      	ldrb	r2, [r3, #6]
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	7a9b      	ldrb	r3, [r3, #10]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d016      	beq.n	8001d7e <process_accel_range+0x58>
        {
            range = (uint8_t)dev->accel_cfg.range;
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	799b      	ldrb	r3, [r3, #6]
 8001d54:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_RANGE_MASK;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	f023 030f 	bic.w	r3, r3, #15
 8001d5e:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_ACCEL_RANGE_MASK);
 8001d60:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001d64:	f003 030f 	and.w	r3, r3, #15
 8001d68:	b25a      	sxtb	r2, r3
 8001d6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	b25b      	sxtb	r3, r3
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	701a      	strb	r2, [r3, #0]
 8001d78:	e001      	b.n	8001d7e <process_accel_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001d7a:	23fc      	movs	r3, #252	@ 0xfc
 8001d7c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <check_invalid_settg>:
/*!
 * @brief This API checks the invalid settings for ODR & Bw for
 * Accel and Gyro.
 */
static int8_t check_invalid_settg(const struct bmi160_dev *dev)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b084      	sub	sp, #16
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	73bb      	strb	r3, [r7, #14]

    /* read the error reg */
    rslt = bmi160_get_regs(BMI160_ERROR_REG_ADDR, &data, 1, dev);
 8001d9a:	f107 010e 	add.w	r1, r7, #14
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	2002      	movs	r0, #2
 8001da4:	f7ff f8be 	bl	8000f24 <bmi160_get_regs>
 8001da8:	4603      	mov	r3, r0
 8001daa:	73fb      	strb	r3, [r7, #15]
    data = data >> 1;
 8001dac:	7bbb      	ldrb	r3, [r7, #14]
 8001dae:	085b      	lsrs	r3, r3, #1
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	73bb      	strb	r3, [r7, #14]
    data = data & BMI160_ERR_REG_MASK;
 8001db4:	7bbb      	ldrb	r3, [r7, #14]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	73bb      	strb	r3, [r7, #14]
    if (data == 1)
 8001dbe:	7bbb      	ldrb	r3, [r7, #14]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d102      	bne.n	8001dca <check_invalid_settg+0x3c>
    {
        rslt = BMI160_E_ACCEL_ODR_BW_INVALID;
 8001dc4:	23fa      	movs	r3, #250	@ 0xfa
 8001dc6:	73fb      	strb	r3, [r7, #15]
 8001dc8:	e010      	b.n	8001dec <check_invalid_settg+0x5e>
    }
    else if (data == 2)
 8001dca:	7bbb      	ldrb	r3, [r7, #14]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d102      	bne.n	8001dd6 <check_invalid_settg+0x48>
    {
        rslt = BMI160_E_GYRO_ODR_BW_INVALID;
 8001dd0:	23f9      	movs	r3, #249	@ 0xf9
 8001dd2:	73fb      	strb	r3, [r7, #15]
 8001dd4:	e00a      	b.n	8001dec <check_invalid_settg+0x5e>
    }
    else if (data == 3)
 8001dd6:	7bbb      	ldrb	r3, [r7, #14]
 8001dd8:	2b03      	cmp	r3, #3
 8001dda:	d102      	bne.n	8001de2 <check_invalid_settg+0x54>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INT_INVALID;
 8001ddc:	23f8      	movs	r3, #248	@ 0xf8
 8001dde:	73fb      	strb	r3, [r7, #15]
 8001de0:	e004      	b.n	8001dec <check_invalid_settg+0x5e>
    }
    else if (data == 7)
 8001de2:	7bbb      	ldrb	r3, [r7, #14]
 8001de4:	2b07      	cmp	r3, #7
 8001de6:	d101      	bne.n	8001dec <check_invalid_settg+0x5e>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INVALID;
 8001de8:	23f7      	movs	r3, #247	@ 0xf7
 8001dea:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <set_gyro_conf>:
static int8_t set_gyro_conf(struct bmi160_dev *dev)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 8001e00:	2300      	movs	r3, #0
 8001e02:	81bb      	strh	r3, [r7, #12]

    rslt = check_gyro_config(data, dev);
 8001e04:	f107 030c 	add.w	r3, r7, #12
 8001e08:	6879      	ldr	r1, [r7, #4]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 f833 	bl	8001e76 <check_gyro_config>
 8001e10:	4603      	mov	r3, r0
 8001e12:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001e14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d126      	bne.n	8001e6a <set_gyro_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_GYRO_CONFIG_ADDR, &data[0], 1, dev);
 8001e1c:	f107 010c 	add.w	r1, r7, #12
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	2042      	movs	r0, #66	@ 0x42
 8001e26:	f7ff f8b0 	bl	8000f8a <bmi160_set_regs>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d119      	bne.n	8001e6a <set_gyro_conf+0x72>
        {
            dev->prev_gyro_cfg.odr = dev->gyro_cfg.odr;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	7b5a      	ldrb	r2, [r3, #13]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	745a      	strb	r2, [r3, #17]
            dev->prev_gyro_cfg.bw = dev->gyro_cfg.bw;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	7bda      	ldrb	r2, [r3, #15]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	74da      	strb	r2, [r3, #19]

            /* Write gyro range */
            rslt = bmi160_set_regs(BMI160_GYRO_RANGE_ADDR, &data[1], 1, dev);
 8001e46:	f107 030c 	add.w	r3, r7, #12
 8001e4a:	1c59      	adds	r1, r3, #1
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	2043      	movs	r0, #67	@ 0x43
 8001e52:	f7ff f89a 	bl	8000f8a <bmi160_set_regs>
 8001e56:	4603      	mov	r3, r0
 8001e58:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d103      	bne.n	8001e6a <set_gyro_conf+0x72>
            {
                dev->prev_gyro_cfg.range = dev->gyro_cfg.range;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	7b9a      	ldrb	r2, [r3, #14]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	749a      	strb	r2, [r3, #18]
            }
        }
    }

    return rslt;
 8001e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <check_gyro_config>:

/*!
 * @brief This API check the gyro configuration.
 */
static int8_t check_gyro_config(uint8_t *data, const struct bmi160_dev *dev)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b084      	sub	sp, #16
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
 8001e7e:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read gyro Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_GYRO_CONFIG_ADDR, data, 2, dev);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	2202      	movs	r2, #2
 8001e84:	6879      	ldr	r1, [r7, #4]
 8001e86:	2042      	movs	r0, #66	@ 0x42
 8001e88:	f7ff f84c 	bl	8000f24 <bmi160_get_regs>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001e90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d11b      	bne.n	8001ed0 <check_gyro_config+0x5a>
    {
        rslt = process_gyro_odr(&data[0], dev);
 8001e98:	6839      	ldr	r1, [r7, #0]
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f81e 	bl	8001edc <process_gyro_odr>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001ea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d111      	bne.n	8001ed0 <check_gyro_config+0x5a>
        {
            rslt = process_gyro_bw(&data[0], dev);
 8001eac:	6839      	ldr	r1, [r7, #0]
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f848 	bl	8001f44 <process_gyro_bw>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001eb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d107      	bne.n	8001ed0 <check_gyro_config+0x5a>
            {
                rslt = process_gyro_range(&data[1], dev);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	6839      	ldr	r1, [r7, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f000 f86c 	bl	8001fa4 <process_gyro_range>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001ed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <process_gyro_odr>:

/*!
 * @brief This API process the gyro odr.
 */
static int8_t process_gyro_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.odr <= BMI160_GYRO_ODR_3200HZ)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	7b5b      	ldrb	r3, [r3, #13]
 8001ef6:	2b0d      	cmp	r3, #13
 8001ef8:	d81a      	bhi.n	8001f30 <process_gyro_odr+0x54>
    {
        if (dev->gyro_cfg.odr != dev->prev_gyro_cfg.odr)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	7b5a      	ldrb	r2, [r3, #13]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	7c5b      	ldrb	r3, [r3, #17]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d016      	beq.n	8001f34 <process_gyro_odr+0x58>
        {
            odr = (uint8_t)dev->gyro_cfg.odr;
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	7b5b      	ldrb	r3, [r3, #13]
 8001f0a:	737b      	strb	r3, [r7, #13]
            temp = (*data & ~BMI160_GYRO_ODR_MASK);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	f023 030f 	bic.w	r3, r3, #15
 8001f14:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_GYRO_ODR_MASK);
 8001f16:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	b25a      	sxtb	r2, r3
 8001f20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	b25b      	sxtb	r3, r3
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	701a      	strb	r2, [r3, #0]
 8001f2e:	e001      	b.n	8001f34 <process_gyro_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001f30:	23fc      	movs	r3, #252	@ 0xfc
 8001f32:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <process_gyro_bw>:

/*!
 * @brief This API process the gyro bandwidth.
 */
static int8_t process_gyro_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.bw <= BMI160_GYRO_BW_NORMAL_MODE)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	7bdb      	ldrb	r3, [r3, #15]
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d816      	bhi.n	8001f90 <process_gyro_bw+0x4c>
    {
        bw = (uint8_t)dev->gyro_cfg.bw;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	7bdb      	ldrb	r3, [r3, #15]
 8001f66:	737b      	strb	r3, [r7, #13]
        temp = *data & ~BMI160_GYRO_BW_MASK;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001f70:	73bb      	strb	r3, [r7, #14]

        /* Adding bandwidth */
        *data = temp | ((bw << 4) & BMI160_GYRO_BW_MASK);
 8001f72:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001f76:	011b      	lsls	r3, r3, #4
 8001f78:	b25b      	sxtb	r3, r3
 8001f7a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001f7e:	b25a      	sxtb	r2, r3
 8001f80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	b25b      	sxtb	r3, r3
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	701a      	strb	r2, [r3, #0]
 8001f8e:	e001      	b.n	8001f94 <process_gyro_bw+0x50>
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001f90:	23fc      	movs	r3, #252	@ 0xfc
 8001f92:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001f94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <process_gyro_range>:

/*!
 * @brief This API process the gyro range.
 */
static int8_t process_gyro_range(uint8_t *data, const struct bmi160_dev *dev)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.range <= BMI160_GYRO_RANGE_125_DPS)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	7b9b      	ldrb	r3, [r3, #14]
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	d81a      	bhi.n	8001ff8 <process_gyro_range+0x54>
    {
        if (dev->gyro_cfg.range != dev->prev_gyro_cfg.range)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	7b9a      	ldrb	r2, [r3, #14]
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	7c9b      	ldrb	r3, [r3, #18]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d016      	beq.n	8001ffc <process_gyro_range+0x58>
        {
            range = (uint8_t)dev->gyro_cfg.range;
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	7b9b      	ldrb	r3, [r3, #14]
 8001fd2:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_GYRO_RANGE_MASK;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	f023 0307 	bic.w	r3, r3, #7
 8001fdc:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_GYRO_RANGE_MASK);
 8001fde:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	b25a      	sxtb	r2, r3
 8001fe8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	b25b      	sxtb	r3, r3
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	701a      	strb	r2, [r3, #0]
 8001ff6:	e001      	b.n	8001ffc <process_gyro_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001ff8:	23fc      	movs	r3, #252	@ 0xfc
 8001ffa:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001ffc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <set_accel_pwr>:

/*!
 * @brief This API sets the accel power.
 */
static int8_t set_accel_pwr(struct bmi160_dev *dev)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	73fb      	strb	r3, [r7, #15]
    uint8_t data = 0;
 8002018:	2300      	movs	r3, #0
 800201a:	73bb      	strb	r3, [r7, #14]

    if ((dev->accel_cfg.power >= BMI160_ACCEL_SUSPEND_MODE) && (dev->accel_cfg.power <= BMI160_ACCEL_LOWPOWER_MODE))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	791b      	ldrb	r3, [r3, #4]
 8002020:	2b0f      	cmp	r3, #15
 8002022:	d92b      	bls.n	800207c <set_accel_pwr+0x70>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	791b      	ldrb	r3, [r3, #4]
 8002028:	2b12      	cmp	r3, #18
 800202a:	d827      	bhi.n	800207c <set_accel_pwr+0x70>
    {
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	791a      	ldrb	r2, [r3, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	7a1b      	ldrb	r3, [r3, #8]
 8002034:	429a      	cmp	r2, r3
 8002036:	d024      	beq.n	8002082 <set_accel_pwr+0x76>
        {
            rslt = process_under_sampling(&data, dev);
 8002038:	f107 030e 	add.w	r3, r7, #14
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	4618      	mov	r0, r3
 8002040:	f000 f826 	bl	8002090 <process_under_sampling>
 8002044:	4603      	mov	r3, r0
 8002046:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8002048:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d118      	bne.n	8002082 <set_accel_pwr+0x76>
            {
                /* Write accel power */
                rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->accel_cfg.power, 1, dev);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	1d19      	adds	r1, r3, #4
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	207e      	movs	r0, #126	@ 0x7e
 800205a:	f7fe ff96 	bl	8000f8a <bmi160_set_regs>
 800205e:	4603      	mov	r3, r0
 8002060:	73fb      	strb	r3, [r7, #15]

                /* Add delay of 3.8 ms - refer data sheet table 24*/
                if (dev->prev_accel_cfg.power == BMI160_ACCEL_SUSPEND_MODE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	7a1b      	ldrb	r3, [r3, #8]
 8002066:	2b10      	cmp	r3, #16
 8002068:	d103      	bne.n	8002072 <set_accel_pwr+0x66>
                {
                    dev->delay_ms(BMI160_ACCEL_DELAY_MS);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800206e:	2005      	movs	r0, #5
 8002070:	4798      	blx	r3
                }

                dev->prev_accel_cfg.power = dev->accel_cfg.power;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	791a      	ldrb	r2, [r3, #4]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	721a      	strb	r2, [r3, #8]
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 800207a:	e002      	b.n	8002082 <set_accel_pwr+0x76>
            }
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 800207c:	23f3      	movs	r3, #243	@ 0xf3
 800207e:	73fb      	strb	r3, [r7, #15]
 8002080:	e000      	b.n	8002084 <set_accel_pwr+0x78>
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8002082:	bf00      	nop
    }

    return rslt;
 8002084:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <process_under_sampling>:

/*!
 * @brief This API process the undersampling setting of Accel.
 */
static int8_t process_under_sampling(uint8_t *data, const struct bmi160_dev *dev)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	73bb      	strb	r3, [r7, #14]
    uint8_t pre_filter[2] = { 0 };
 800209e:	2300      	movs	r3, #0
 80020a0:	81bb      	strh	r3, [r7, #12]

    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	2201      	movs	r2, #1
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	2040      	movs	r0, #64	@ 0x40
 80020aa:	f7fe ff3b 	bl	8000f24 <bmi160_get_regs>
 80020ae:	4603      	mov	r3, r0
 80020b0:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80020b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d139      	bne.n	800212e <process_under_sampling+0x9e>
    {
        if (dev->accel_cfg.power == BMI160_ACCEL_LOWPOWER_MODE)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	791b      	ldrb	r3, [r3, #4]
 80020be:	2b12      	cmp	r3, #18
 80020c0:	d120      	bne.n	8002104 <process_under_sampling+0x74>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020ca:	73bb      	strb	r3, [r7, #14]

            /* Set under-sampling parameter */
            *data = temp | ((1 << 7) & BMI160_ACCEL_UNDERSAMPLING_MASK);
 80020cc:	7bbb      	ldrb	r3, [r7, #14]
 80020ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	2201      	movs	r2, #1
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	2040      	movs	r0, #64	@ 0x40
 80020e0:	f7fe ff53 	bl	8000f8a <bmi160_set_regs>
 80020e4:	4603      	mov	r3, r0
 80020e6:	73fb      	strb	r3, [r7, #15]

            /* Disable the pre-filter data in low power mode */
            if (rslt == BMI160_OK)
 80020e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d11e      	bne.n	800212e <process_under_sampling+0x9e>
            {
                /* Disable the Pre-filter data*/
                rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, pre_filter, 2, dev);
 80020f0:	f107 010c 	add.w	r1, r7, #12
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	2202      	movs	r2, #2
 80020f8:	2058      	movs	r0, #88	@ 0x58
 80020fa:	f7fe ff46 	bl	8000f8a <bmi160_set_regs>
 80020fe:	4603      	mov	r3, r0
 8002100:	73fb      	strb	r3, [r7, #15]
 8002102:	e014      	b.n	800212e <process_under_sampling+0x9e>
            }
        }
        else if (*data & BMI160_ACCEL_UNDERSAMPLING_MASK)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	b25b      	sxtb	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	da0f      	bge.n	800212e <process_under_sampling+0x9e>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002116:	73bb      	strb	r3, [r7, #14]

            /* Disable under-sampling parameter if already enabled */
            *data = temp;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	7bba      	ldrb	r2, [r7, #14]
 800211c:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	2201      	movs	r2, #1
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	2040      	movs	r0, #64	@ 0x40
 8002126:	f7fe ff30 	bl	8000f8a <bmi160_set_regs>
 800212a:	4603      	mov	r3, r0
 800212c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800212e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002132:	4618      	mov	r0, r3
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <set_gyro_pwr>:

/*!
 * @brief This API sets the gyro power mode.
 */
static int8_t set_gyro_pwr(struct bmi160_dev *dev)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b084      	sub	sp, #16
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8002142:	2300      	movs	r3, #0
 8002144:	73fb      	strb	r3, [r7, #15]

    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	7b1b      	ldrb	r3, [r3, #12]
 800214a:	2b14      	cmp	r3, #20
 800214c:	d007      	beq.n	800215e <set_gyro_pwr+0x24>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	7b1b      	ldrb	r3, [r3, #12]
 8002152:	2b15      	cmp	r3, #21
 8002154:	d003      	beq.n	800215e <set_gyro_pwr+0x24>
        (dev->gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	7b1b      	ldrb	r3, [r3, #12]
    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 800215a:	2b17      	cmp	r3, #23
 800215c:	d129      	bne.n	80021b2 <set_gyro_pwr+0x78>
    {
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	7b1a      	ldrb	r2, [r3, #12]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	7c1b      	ldrb	r3, [r3, #16]
 8002166:	429a      	cmp	r2, r3
 8002168:	d025      	beq.n	80021b6 <set_gyro_pwr+0x7c>
        {
            /* Write gyro power */
            rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->gyro_cfg.power, 1, dev);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f103 010c 	add.w	r1, r3, #12
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	207e      	movs	r0, #126	@ 0x7e
 8002176:	f7fe ff08 	bl	8000f8a <bmi160_set_regs>
 800217a:	4603      	mov	r3, r0
 800217c:	73fb      	strb	r3, [r7, #15]
            if (dev->prev_gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	7c1b      	ldrb	r3, [r3, #16]
 8002182:	2b14      	cmp	r3, #20
 8002184:	d104      	bne.n	8002190 <set_gyro_pwr+0x56>
            {
                /* Delay of 80 ms - datasheet Table 24 */
                dev->delay_ms(BMI160_GYRO_DELAY_MS);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218a:	2050      	movs	r0, #80	@ 0x50
 800218c:	4798      	blx	r3
 800218e:	e00b      	b.n	80021a8 <set_gyro_pwr+0x6e>
            }
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	7c1b      	ldrb	r3, [r3, #16]
 8002194:	2b17      	cmp	r3, #23
 8002196:	d107      	bne.n	80021a8 <set_gyro_pwr+0x6e>
                     (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	7b1b      	ldrb	r3, [r3, #12]
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 800219c:	2b15      	cmp	r3, #21
 800219e:	d103      	bne.n	80021a8 <set_gyro_pwr+0x6e>
            {
                /* This delay is required for transition from
                 * fast-startup mode to normal mode - datasheet Table 3 */
                dev->delay_ms(10);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a4:	200a      	movs	r0, #10
 80021a6:	4798      	blx	r3
            else
            {
                /* do nothing */
            }

            dev->prev_gyro_cfg.power = dev->gyro_cfg.power;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	7b1a      	ldrb	r2, [r3, #12]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	741a      	strb	r2, [r3, #16]
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 80021b0:	e001      	b.n	80021b6 <set_gyro_pwr+0x7c>
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 80021b2:	23f3      	movs	r3, #243	@ 0xf3
 80021b4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80021b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <get_accel_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_accel_data(uint8_t len, struct bmi160_sensor_data *accel, const struct bmi160_dev *dev)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b08c      	sub	sp, #48	@ 0x30
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	4603      	mov	r3, r0
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
 80021ce:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[9] = { 0 };
 80021d6:	f107 0314 	add.w	r3, r7, #20
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	605a      	str	r2, [r3, #4]
 80021e0:	721a      	strb	r2, [r3, #8]
    uint8_t time_0 = 0;
 80021e2:	2300      	movs	r3, #0
 80021e4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 80021e8:	2300      	movs	r3, #0
 80021ea:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    /* read accel sensor data along with time if requested */
    rslt = bmi160_get_regs(BMI160_ACCEL_DATA_ADDR, data_array, 6 + len, dev);
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	3306      	adds	r3, #6
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	f107 0114 	add.w	r1, r7, #20
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2012      	movs	r0, #18
 8002200:	f7fe fe90 	bl	8000f24 <bmi160_get_regs>
 8002204:	4603      	mov	r3, r0
 8002206:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (rslt == BMI160_OK)
 800220a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800220e:	2b00      	cmp	r3, #0
 8002210:	f040 809a 	bne.w	8002348 <get_accel_data+0x186>
    {
        /* Accel Data */
        lsb = data_array[idx++];
 8002214:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002218:	1c5a      	adds	r2, r3, #1
 800221a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800221e:	3330      	adds	r3, #48	@ 0x30
 8002220:	443b      	add	r3, r7
 8002222:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002226:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800222a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002234:	3330      	adds	r3, #48	@ 0x30
 8002236:	443b      	add	r3, r7
 8002238:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800223c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8002240:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002244:	b21b      	sxth	r3, r3
 8002246:	021b      	lsls	r3, r3, #8
 8002248:	b21a      	sxth	r2, r3
 800224a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800224e:	b21b      	sxth	r3, r3
 8002250:	4313      	orrs	r3, r2
 8002252:	843b      	strh	r3, [r7, #32]
        accel->x = msblsb; /* Data in X axis */
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	8c3a      	ldrh	r2, [r7, #32]
 8002258:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 800225a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002264:	3330      	adds	r3, #48	@ 0x30
 8002266:	443b      	add	r3, r7
 8002268:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800226c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8002270:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800227a:	3330      	adds	r3, #48	@ 0x30
 800227c:	443b      	add	r3, r7
 800227e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002282:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8002286:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800228a:	b21b      	sxth	r3, r3
 800228c:	021b      	lsls	r3, r3, #8
 800228e:	b21a      	sxth	r2, r3
 8002290:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002294:	b21b      	sxth	r3, r3
 8002296:	4313      	orrs	r3, r2
 8002298:	843b      	strh	r3, [r7, #32]
        accel->y = msblsb; /* Data in Y axis */
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	8c3a      	ldrh	r2, [r7, #32]
 800229e:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 80022a0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80022a4:	1c5a      	adds	r2, r3, #1
 80022a6:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80022aa:	3330      	adds	r3, #48	@ 0x30
 80022ac:	443b      	add	r3, r7
 80022ae:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80022b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 80022b6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80022ba:	1c5a      	adds	r2, r3, #1
 80022bc:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80022c0:	3330      	adds	r3, #48	@ 0x30
 80022c2:	443b      	add	r3, r7
 80022c4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80022c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 80022cc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80022d0:	b21b      	sxth	r3, r3
 80022d2:	021b      	lsls	r3, r3, #8
 80022d4:	b21a      	sxth	r2, r3
 80022d6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80022da:	b21b      	sxth	r3, r3
 80022dc:	4313      	orrs	r3, r2
 80022de:	843b      	strh	r3, [r7, #32]
        accel->z = msblsb; /* Data in Z axis */
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	8c3a      	ldrh	r2, [r7, #32]
 80022e4:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	2b03      	cmp	r3, #3
 80022ea:	d129      	bne.n	8002340 <get_accel_data+0x17e>
        {
            time_0 = data_array[idx++];
 80022ec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80022f6:	3330      	adds	r3, #48	@ 0x30
 80022f8:	443b      	add	r3, r7
 80022fa:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80022fe:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 8002302:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002306:	1c5a      	adds	r2, r3, #1
 8002308:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800230c:	3330      	adds	r3, #48	@ 0x30
 800230e:	443b      	add	r3, r7
 8002310:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002314:	021b      	lsls	r3, r3, #8
 8002316:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 8002318:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800231c:	1c5a      	adds	r2, r3, #1
 800231e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002322:	3330      	adds	r3, #48	@ 0x30
 8002324:	443b      	add	r3, r7
 8002326:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800232a:	041b      	lsls	r3, r3, #16
 800232c:	627b      	str	r3, [r7, #36]	@ 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 800232e:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002332:	431a      	orrs	r2, r3
 8002334:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002338:	431a      	orrs	r2, r3
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	609a      	str	r2, [r3, #8]
 800233e:	e006      	b.n	800234e <get_accel_data+0x18c>
        }
        else
        {
            accel->sensortime = 0;
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	2200      	movs	r2, #0
 8002344:	609a      	str	r2, [r3, #8]
 8002346:	e002      	b.n	800234e <get_accel_data+0x18c>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 8002348:	23fe      	movs	r3, #254	@ 0xfe
 800234a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 800234e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8002352:	4618      	mov	r0, r3
 8002354:	3730      	adds	r7, #48	@ 0x30
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <get_gyro_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_gyro_data(uint8_t len, struct bmi160_sensor_data *gyro, const struct bmi160_dev *dev)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b08c      	sub	sp, #48	@ 0x30
 800235e:	af00      	add	r7, sp, #0
 8002360:	4603      	mov	r3, r0
 8002362:	60b9      	str	r1, [r7, #8]
 8002364:	607a      	str	r2, [r7, #4]
 8002366:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 8002368:	2300      	movs	r3, #0
 800236a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[15] = { 0 };
 800236e:	f107 0310 	add.w	r3, r7, #16
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	605a      	str	r2, [r3, #4]
 8002378:	609a      	str	r2, [r3, #8]
 800237a:	f8c3 200b 	str.w	r2, [r3, #11]
    uint8_t time_0 = 0;
 800237e:	2300      	movs	r3, #0
 8002380:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 8002384:	2300      	movs	r3, #0
 8002386:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 8002388:	2300      	movs	r3, #0
 800238a:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    if (len == 0)
 800238c:	7bfb      	ldrb	r3, [r7, #15]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d17e      	bne.n	8002490 <get_gyro_data+0x136>
    {
        /* read gyro data only */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 6, dev);
 8002392:	f107 0110 	add.w	r1, r7, #16
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2206      	movs	r2, #6
 800239a:	200c      	movs	r0, #12
 800239c:	f7fe fdc2 	bl	8000f24 <bmi160_get_regs>
 80023a0:	4603      	mov	r3, r0
 80023a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rslt == BMI160_OK)
 80023a6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d16c      	bne.n	8002488 <get_gyro_data+0x12e>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 80023ae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80023b2:	1c5a      	adds	r2, r3, #1
 80023b4:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80023b8:	3330      	adds	r3, #48	@ 0x30
 80023ba:	443b      	add	r3, r7
 80023bc:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80023c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 80023c4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80023c8:	1c5a      	adds	r2, r3, #1
 80023ca:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80023ce:	3330      	adds	r3, #48	@ 0x30
 80023d0:	443b      	add	r3, r7
 80023d2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80023d6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 80023da:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80023de:	b21b      	sxth	r3, r3
 80023e0:	021b      	lsls	r3, r3, #8
 80023e2:	b21a      	sxth	r2, r3
 80023e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80023e8:	b21b      	sxth	r3, r3
 80023ea:	4313      	orrs	r3, r2
 80023ec:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* Data in X axis */
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	8c3a      	ldrh	r2, [r7, #32]
 80023f2:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 80023f4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80023f8:	1c5a      	adds	r2, r3, #1
 80023fa:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80023fe:	3330      	adds	r3, #48	@ 0x30
 8002400:	443b      	add	r3, r7
 8002402:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002406:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 800240a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800240e:	1c5a      	adds	r2, r3, #1
 8002410:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002414:	3330      	adds	r3, #48	@ 0x30
 8002416:	443b      	add	r3, r7
 8002418:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800241c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8002420:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002424:	b21b      	sxth	r3, r3
 8002426:	021b      	lsls	r3, r3, #8
 8002428:	b21a      	sxth	r2, r3
 800242a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800242e:	b21b      	sxth	r3, r3
 8002430:	4313      	orrs	r3, r2
 8002432:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* Data in Y axis */
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	8c3a      	ldrh	r2, [r7, #32]
 8002438:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 800243a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800243e:	1c5a      	adds	r2, r3, #1
 8002440:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002444:	3330      	adds	r3, #48	@ 0x30
 8002446:	443b      	add	r3, r7
 8002448:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800244c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 8002450:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002454:	1c5a      	adds	r2, r3, #1
 8002456:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800245a:	3330      	adds	r3, #48	@ 0x30
 800245c:	443b      	add	r3, r7
 800245e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002462:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8002466:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800246a:	b21b      	sxth	r3, r3
 800246c:	021b      	lsls	r3, r3, #8
 800246e:	b21a      	sxth	r2, r3
 8002470:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002474:	b21b      	sxth	r3, r3
 8002476:	4313      	orrs	r3, r2
 8002478:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* Data in Z axis */
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	8c3a      	ldrh	r2, [r7, #32]
 800247e:	809a      	strh	r2, [r3, #4]
            gyro->sensortime = 0;
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2200      	movs	r2, #0
 8002484:	609a      	str	r2, [r3, #8]
 8002486:	e0b0      	b.n	80025ea <get_gyro_data+0x290>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 8002488:	23fe      	movs	r3, #254	@ 0xfe
 800248a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800248e:	e0ac      	b.n	80025ea <get_gyro_data+0x290>
        }
    }
    else
    {
        /* read gyro sensor data along with time */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 8002490:	7bfb      	ldrb	r3, [r7, #15]
 8002492:	b29b      	uxth	r3, r3
 8002494:	330c      	adds	r3, #12
 8002496:	b29a      	uxth	r2, r3
 8002498:	f107 0110 	add.w	r1, r7, #16
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	200c      	movs	r0, #12
 80024a0:	f7fe fd40 	bl	8000f24 <bmi160_get_regs>
 80024a4:	4603      	mov	r3, r0
 80024a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rslt == BMI160_OK)
 80024aa:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f040 8098 	bne.w	80025e4 <get_gyro_data+0x28a>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 80024b4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80024be:	3330      	adds	r3, #48	@ 0x30
 80024c0:	443b      	add	r3, r7
 80024c2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80024c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 80024ca:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80024ce:	1c5a      	adds	r2, r3, #1
 80024d0:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80024d4:	3330      	adds	r3, #48	@ 0x30
 80024d6:	443b      	add	r3, r7
 80024d8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80024dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 80024e0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80024e4:	b21b      	sxth	r3, r3
 80024e6:	021b      	lsls	r3, r3, #8
 80024e8:	b21a      	sxth	r2, r3
 80024ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80024ee:	b21b      	sxth	r3, r3
 80024f0:	4313      	orrs	r3, r2
 80024f2:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* gyro X axis data */
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	8c3a      	ldrh	r2, [r7, #32]
 80024f8:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 80024fa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80024fe:	1c5a      	adds	r2, r3, #1
 8002500:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002504:	3330      	adds	r3, #48	@ 0x30
 8002506:	443b      	add	r3, r7
 8002508:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800250c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 8002510:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002514:	1c5a      	adds	r2, r3, #1
 8002516:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800251a:	3330      	adds	r3, #48	@ 0x30
 800251c:	443b      	add	r3, r7
 800251e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002522:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8002526:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800252a:	b21b      	sxth	r3, r3
 800252c:	021b      	lsls	r3, r3, #8
 800252e:	b21a      	sxth	r2, r3
 8002530:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002534:	b21b      	sxth	r3, r3
 8002536:	4313      	orrs	r3, r2
 8002538:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* gyro Y axis data */
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	8c3a      	ldrh	r2, [r7, #32]
 800253e:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 8002540:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002544:	1c5a      	adds	r2, r3, #1
 8002546:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800254a:	3330      	adds	r3, #48	@ 0x30
 800254c:	443b      	add	r3, r7
 800254e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002552:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 8002556:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800255a:	1c5a      	adds	r2, r3, #1
 800255c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002560:	3330      	adds	r3, #48	@ 0x30
 8002562:	443b      	add	r3, r7
 8002564:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002568:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 800256c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002570:	b21b      	sxth	r3, r3
 8002572:	021b      	lsls	r3, r3, #8
 8002574:	b21a      	sxth	r2, r3
 8002576:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800257a:	b21b      	sxth	r3, r3
 800257c:	4313      	orrs	r3, r2
 800257e:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* gyro Z axis data */
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	8c3a      	ldrh	r2, [r7, #32]
 8002584:	809a      	strh	r2, [r3, #4]
            idx = idx + 6;
 8002586:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800258a:	3306      	adds	r3, #6
 800258c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            time_0 = data_array[idx++];
 8002590:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002594:	1c5a      	adds	r2, r3, #1
 8002596:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800259a:	3330      	adds	r3, #48	@ 0x30
 800259c:	443b      	add	r3, r7
 800259e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80025a2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 80025a6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80025aa:	1c5a      	adds	r2, r3, #1
 80025ac:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80025b0:	3330      	adds	r3, #48	@ 0x30
 80025b2:	443b      	add	r3, r7
 80025b4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80025b8:	021b      	lsls	r3, r3, #8
 80025ba:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 80025bc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80025c0:	1c5a      	adds	r2, r3, #1
 80025c2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80025c6:	3330      	adds	r3, #48	@ 0x30
 80025c8:	443b      	add	r3, r7
 80025ca:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80025ce:	041b      	lsls	r3, r3, #16
 80025d0:	627b      	str	r3, [r7, #36]	@ 0x24
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 80025d2:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80025d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d6:	431a      	orrs	r2, r3
 80025d8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80025dc:	431a      	orrs	r2, r3
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	609a      	str	r2, [r3, #8]
 80025e2:	e002      	b.n	80025ea <get_gyro_data+0x290>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 80025e4:	23fe      	movs	r3, #254	@ 0xfe
 80025e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }
    }

    return rslt;
 80025ea:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3730      	adds	r7, #48	@ 0x30
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <get_accel_gyro_data>:
 */
static int8_t get_accel_gyro_data(uint8_t len,
                                  struct bmi160_sensor_data *accel,
                                  struct bmi160_sensor_data *gyro,
                                  const struct bmi160_dev *dev)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b08c      	sub	sp, #48	@ 0x30
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
 8002600:	603b      	str	r3, [r7, #0]
 8002602:	4603      	mov	r3, r0
 8002604:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[15] = { 0 };
 800260c:	f107 0310 	add.w	r3, r7, #16
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	605a      	str	r2, [r3, #4]
 8002616:	609a      	str	r2, [r3, #8]
 8002618:	f8c3 200b 	str.w	r2, [r3, #11]
    uint8_t time_0 = 0;
 800261c:	2300      	movs	r3, #0
 800261e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 8002622:	2300      	movs	r3, #0
 8002624:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 8002626:	2300      	movs	r3, #0
 8002628:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t msb;
    int16_t msblsb;

    /* read both accel and gyro sensor data
     * along with time if requested */
    rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 800262a:	7bfb      	ldrb	r3, [r7, #15]
 800262c:	b29b      	uxth	r3, r3
 800262e:	330c      	adds	r3, #12
 8002630:	b29a      	uxth	r2, r3
 8002632:	f107 0110 	add.w	r1, r7, #16
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	200c      	movs	r0, #12
 800263a:	f7fe fc73 	bl	8000f24 <bmi160_get_regs>
 800263e:	4603      	mov	r3, r0
 8002640:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (rslt == BMI160_OK)
 8002644:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8002648:	2b00      	cmp	r3, #0
 800264a:	f040 810e 	bne.w	800286a <get_accel_gyro_data+0x274>
    {
        /* Gyro Data */
        lsb = data_array[idx++];
 800264e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002652:	1c5a      	adds	r2, r3, #1
 8002654:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002658:	3330      	adds	r3, #48	@ 0x30
 800265a:	443b      	add	r3, r7
 800265c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002660:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8002664:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800266e:	3330      	adds	r3, #48	@ 0x30
 8002670:	443b      	add	r3, r7
 8002672:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002676:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800267a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800267e:	b21b      	sxth	r3, r3
 8002680:	021b      	lsls	r3, r3, #8
 8002682:	b21a      	sxth	r2, r3
 8002684:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002688:	b21b      	sxth	r3, r3
 800268a:	4313      	orrs	r3, r2
 800268c:	843b      	strh	r3, [r7, #32]
        gyro->x = msblsb; /* gyro X axis data */
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	8c3a      	ldrh	r2, [r7, #32]
 8002692:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 8002694:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002698:	1c5a      	adds	r2, r3, #1
 800269a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800269e:	3330      	adds	r3, #48	@ 0x30
 80026a0:	443b      	add	r3, r7
 80026a2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80026a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 80026aa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80026b4:	3330      	adds	r3, #48	@ 0x30
 80026b6:	443b      	add	r3, r7
 80026b8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80026bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 80026c0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80026c4:	b21b      	sxth	r3, r3
 80026c6:	021b      	lsls	r3, r3, #8
 80026c8:	b21a      	sxth	r2, r3
 80026ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80026ce:	b21b      	sxth	r3, r3
 80026d0:	4313      	orrs	r3, r2
 80026d2:	843b      	strh	r3, [r7, #32]
        gyro->y = msblsb; /* gyro Y axis data */
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	8c3a      	ldrh	r2, [r7, #32]
 80026d8:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 80026da:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80026de:	1c5a      	adds	r2, r3, #1
 80026e0:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80026e4:	3330      	adds	r3, #48	@ 0x30
 80026e6:	443b      	add	r3, r7
 80026e8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80026ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 80026f0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80026fa:	3330      	adds	r3, #48	@ 0x30
 80026fc:	443b      	add	r3, r7
 80026fe:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002702:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8002706:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800270a:	b21b      	sxth	r3, r3
 800270c:	021b      	lsls	r3, r3, #8
 800270e:	b21a      	sxth	r2, r3
 8002710:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002714:	b21b      	sxth	r3, r3
 8002716:	4313      	orrs	r3, r2
 8002718:	843b      	strh	r3, [r7, #32]
        gyro->z = msblsb; /* gyro Z axis data */
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	8c3a      	ldrh	r2, [r7, #32]
 800271e:	809a      	strh	r2, [r3, #4]
        /* Accel Data */
        lsb = data_array[idx++];
 8002720:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800272a:	3330      	adds	r3, #48	@ 0x30
 800272c:	443b      	add	r3, r7
 800272e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002732:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8002736:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800273a:	1c5a      	adds	r2, r3, #1
 800273c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002740:	3330      	adds	r3, #48	@ 0x30
 8002742:	443b      	add	r3, r7
 8002744:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002748:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800274c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002750:	b21b      	sxth	r3, r3
 8002752:	021b      	lsls	r3, r3, #8
 8002754:	b21a      	sxth	r2, r3
 8002756:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800275a:	b21b      	sxth	r3, r3
 800275c:	4313      	orrs	r3, r2
 800275e:	843b      	strh	r3, [r7, #32]
        accel->x = (int16_t)msblsb; /* accel X axis data */
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	8c3a      	ldrh	r2, [r7, #32]
 8002764:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 8002766:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002770:	3330      	adds	r3, #48	@ 0x30
 8002772:	443b      	add	r3, r7
 8002774:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002778:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800277c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002780:	1c5a      	adds	r2, r3, #1
 8002782:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002786:	3330      	adds	r3, #48	@ 0x30
 8002788:	443b      	add	r3, r7
 800278a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800278e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8002792:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002796:	b21b      	sxth	r3, r3
 8002798:	021b      	lsls	r3, r3, #8
 800279a:	b21a      	sxth	r2, r3
 800279c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80027a0:	b21b      	sxth	r3, r3
 80027a2:	4313      	orrs	r3, r2
 80027a4:	843b      	strh	r3, [r7, #32]
        accel->y = (int16_t)msblsb; /* accel Y axis data */
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	8c3a      	ldrh	r2, [r7, #32]
 80027aa:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 80027ac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80027b0:	1c5a      	adds	r2, r3, #1
 80027b2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80027b6:	3330      	adds	r3, #48	@ 0x30
 80027b8:	443b      	add	r3, r7
 80027ba:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80027be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 80027c2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80027c6:	1c5a      	adds	r2, r3, #1
 80027c8:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80027cc:	3330      	adds	r3, #48	@ 0x30
 80027ce:	443b      	add	r3, r7
 80027d0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80027d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 80027d8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80027dc:	b21b      	sxth	r3, r3
 80027de:	021b      	lsls	r3, r3, #8
 80027e0:	b21a      	sxth	r2, r3
 80027e2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80027e6:	b21b      	sxth	r3, r3
 80027e8:	4313      	orrs	r3, r2
 80027ea:	843b      	strh	r3, [r7, #32]
        accel->z = (int16_t)msblsb; /* accel Z axis data */
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	8c3a      	ldrh	r2, [r7, #32]
 80027f0:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 80027f2:	7bfb      	ldrb	r3, [r7, #15]
 80027f4:	2b03      	cmp	r3, #3
 80027f6:	d131      	bne.n	800285c <get_accel_gyro_data+0x266>
        {
            time_0 = data_array[idx++];
 80027f8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002802:	3330      	adds	r3, #48	@ 0x30
 8002804:	443b      	add	r3, r7
 8002806:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800280a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 800280e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002812:	1c5a      	adds	r2, r3, #1
 8002814:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002818:	3330      	adds	r3, #48	@ 0x30
 800281a:	443b      	add	r3, r7
 800281c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002820:	021b      	lsls	r3, r3, #8
 8002822:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 8002824:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002828:	1c5a      	adds	r2, r3, #1
 800282a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800282e:	3330      	adds	r3, #48	@ 0x30
 8002830:	443b      	add	r3, r7
 8002832:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002836:	041b      	lsls	r3, r3, #16
 8002838:	627b      	str	r3, [r7, #36]	@ 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 800283a:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800283c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283e:	431a      	orrs	r2, r3
 8002840:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002844:	431a      	orrs	r2, r3
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	609a      	str	r2, [r3, #8]
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 800284a:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800284c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284e:	431a      	orrs	r2, r3
 8002850:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002854:	431a      	orrs	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	609a      	str	r2, [r3, #8]
 800285a:	e009      	b.n	8002870 <get_accel_gyro_data+0x27a>
        }
        else
        {
            accel->sensortime = 0;
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	2200      	movs	r2, #0
 8002860:	609a      	str	r2, [r3, #8]
            gyro->sensortime = 0;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	609a      	str	r2, [r3, #8]
 8002868:	e002      	b.n	8002870 <get_accel_gyro_data+0x27a>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 800286a:	23fe      	movs	r3, #254	@ 0xfe
 800286c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 8002870:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8002874:	4618      	mov	r0, r3
 8002876:	3730      	adds	r7, #48	@ 0x30
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <enable_accel_any_motion_int>:
/*!
 * @brief This API enables the any-motion interrupt for accel.
 */
static int8_t enable_accel_any_motion_int(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                          struct bmi160_dev *dev)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002886:	2300      	movs	r3, #0
 8002888:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 800288a:	2300      	movs	r3, #0
 800288c:	73bb      	strb	r3, [r7, #14]

    /* Enable any motion x, any motion y, any motion z
     * in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 800288e:	f107 010d 	add.w	r1, r7, #13
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	2201      	movs	r2, #1
 8002896:	2050      	movs	r0, #80	@ 0x50
 8002898:	f7fe fb44 	bl	8000f24 <bmi160_get_regs>
 800289c:	4603      	mov	r3, r0
 800289e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80028a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d153      	bne.n	8002950 <enable_accel_any_motion_int+0xd4>
    {
        if (any_motion_int_cfg->anymotion_en == BMI160_ENABLE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d03b      	beq.n	800292e <enable_accel_any_motion_int+0xb2>
        {
            temp = data & ~BMI160_ANY_MOTION_X_INT_EN_MASK;
 80028b6:	7b7b      	ldrb	r3, [r7, #13]
 80028b8:	f023 0301 	bic.w	r3, r3, #1
 80028bc:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion x axis */
            data = temp | (any_motion_int_cfg->anymotion_x & BMI160_ANY_MOTION_X_INT_EN_MASK);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	461a      	mov	r2, r3
 80028ca:	7bbb      	ldrb	r3, [r7, #14]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_ANY_MOTION_Y_INT_EN_MASK;
 80028d2:	7b7b      	ldrb	r3, [r7, #13]
 80028d4:	f023 0302 	bic.w	r3, r3, #2
 80028d8:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion y axis */
            data = temp | ((any_motion_int_cfg->anymotion_y << 1) & BMI160_ANY_MOTION_Y_INT_EN_MASK);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	b25b      	sxtb	r3, r3
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	b25b      	sxtb	r3, r3
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	b25a      	sxtb	r2, r3
 80028f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	b25b      	sxtb	r3, r3
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_ANY_MOTION_Z_INT_EN_MASK;
 80028fc:	7b7b      	ldrb	r3, [r7, #13]
 80028fe:	f023 0304 	bic.w	r3, r3, #4
 8002902:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion z axis */
            data = temp | ((any_motion_int_cfg->anymotion_z << 2) & BMI160_ANY_MOTION_Z_INT_EN_MASK);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800290c:	b2db      	uxtb	r3, r3
 800290e:	b25b      	sxtb	r3, r3
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	b25b      	sxtb	r3, r3
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	b25a      	sxtb	r2, r3
 800291a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800291e:	4313      	orrs	r3, r2
 8002920:	b25b      	sxtb	r3, r3
 8002922:	b2db      	uxtb	r3, r3
 8002924:	737b      	strb	r3, [r7, #13]

            /* any-motion feature selected*/
            dev->any_sig_sel = BMI160_ANY_MOTION_ENABLED;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2200      	movs	r2, #0
 800292a:	70da      	strb	r2, [r3, #3]
 800292c:	e007      	b.n	800293e <enable_accel_any_motion_int+0xc2>
        }
        else
        {
            data = data & ~BMI160_ANY_MOTION_ALL_INT_EN_MASK;
 800292e:	7b7b      	ldrb	r3, [r7, #13]
 8002930:	f023 0307 	bic.w	r3, r3, #7
 8002934:	b2db      	uxtb	r3, r3
 8002936:	737b      	strb	r3, [r7, #13]

            /* neither any-motion feature nor sig-motion selected */
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	22ff      	movs	r2, #255	@ 0xff
 800293c:	70da      	strb	r2, [r3, #3]
        }

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 800293e:	f107 010d 	add.w	r1, r7, #13
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2201      	movs	r2, #1
 8002946:	2050      	movs	r0, #80	@ 0x50
 8002948:	f7fe fb1f 	bl	8000f8a <bmi160_set_regs>
 800294c:	4603      	mov	r3, r0
 800294e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002950:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002954:	4618      	mov	r0, r3
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <disable_sig_motion_int>:

/*!
 * @brief This API disable the sig-motion interrupt.
 */
static int8_t disable_sig_motion_int(const struct bmi160_dev *dev)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 8002964:	2300      	movs	r3, #0
 8002966:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002968:	2300      	movs	r3, #0
 800296a:	73bb      	strb	r3, [r7, #14]

    /* Disabling Significant motion interrupt if enabled */
    rslt = bmi160_get_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 800296c:	f107 010d 	add.w	r1, r7, #13
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	2062      	movs	r0, #98	@ 0x62
 8002976:	f7fe fad5 	bl	8000f24 <bmi160_get_regs>
 800297a:	4603      	mov	r3, r0
 800297c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800297e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d115      	bne.n	80029b2 <disable_sig_motion_int+0x56>
    {
        temp = (data & BMI160_SIG_MOTION_SEL_MASK);
 8002986:	7b7b      	ldrb	r3, [r7, #13]
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	73bb      	strb	r3, [r7, #14]
        if (temp)
 800298e:	7bbb      	ldrb	r3, [r7, #14]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00e      	beq.n	80029b2 <disable_sig_motion_int+0x56>
        {
            temp = data & ~BMI160_SIG_MOTION_SEL_MASK;
 8002994:	7b7b      	ldrb	r3, [r7, #13]
 8002996:	f023 0302 	bic.w	r3, r3, #2
 800299a:	73bb      	strb	r3, [r7, #14]
            data = temp;
 800299c:	7bbb      	ldrb	r3, [r7, #14]
 800299e:	737b      	strb	r3, [r7, #13]

            /* Write data to register */
            rslt = bmi160_set_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 80029a0:	f107 010d 	add.w	r1, r7, #13
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	2062      	movs	r0, #98	@ 0x62
 80029aa:	f7fe faee 	bl	8000f8a <bmi160_set_regs>
 80029ae:	4603      	mov	r3, r0
 80029b0:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80029b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
	...

080029c0 <map_feature_interrupt>:
/*!
 *  @brief This API is used to map/unmap the Any/Sig motion, Step det/Low-g,
 *  Double tap, Single tap, Orientation, Flat, High-G, Nomotion interrupt pins.
 */
static int8_t map_feature_interrupt(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data[3] = { 0, 0, 0 };
 80029ca:	f107 030c 	add.w	r3, r7, #12
 80029ce:	2100      	movs	r1, #0
 80029d0:	460a      	mov	r2, r1
 80029d2:	801a      	strh	r2, [r3, #0]
 80029d4:	460a      	mov	r2, r1
 80029d6:	709a      	strb	r2, [r3, #2]
    uint8_t temp[3] = { 0, 0, 0 };
 80029d8:	f107 0308 	add.w	r3, r7, #8
 80029dc:	2100      	movs	r1, #0
 80029de:	460a      	mov	r2, r1
 80029e0:	801a      	strh	r2, [r3, #0]
 80029e2:	460a      	mov	r2, r1
 80029e4:	709a      	strb	r2, [r3, #2]

    rslt = bmi160_get_regs(BMI160_INT_MAP_0_ADDR, data, 3, dev);
 80029e6:	f107 010c 	add.w	r1, r7, #12
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2203      	movs	r2, #3
 80029ee:	2055      	movs	r0, #85	@ 0x55
 80029f0:	f7fe fa98 	bl	8000f24 <bmi160_get_regs>
 80029f4:	4603      	mov	r3, r0
 80029f6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80029f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d16a      	bne.n	8002ad6 <map_feature_interrupt+0x116>
    {
        temp[0] = data[0] & ~int_mask_lookup_table[int_config->int_type];
 8002a00:	7b3b      	ldrb	r3, [r7, #12]
 8002a02:	b25a      	sxtb	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	785b      	ldrb	r3, [r3, #1]
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4b36      	ldr	r3, [pc, #216]	@ (8002ae4 <map_feature_interrupt+0x124>)
 8002a0c:	5c5b      	ldrb	r3, [r3, r1]
 8002a0e:	b25b      	sxtb	r3, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	b25b      	sxtb	r3, r3
 8002a14:	4013      	ands	r3, r2
 8002a16:	b25b      	sxtb	r3, r3
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	723b      	strb	r3, [r7, #8]
        temp[2] = data[2] & ~int_mask_lookup_table[int_config->int_type];
 8002a1c:	7bbb      	ldrb	r3, [r7, #14]
 8002a1e:	b25a      	sxtb	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	785b      	ldrb	r3, [r3, #1]
 8002a24:	4619      	mov	r1, r3
 8002a26:	4b2f      	ldr	r3, [pc, #188]	@ (8002ae4 <map_feature_interrupt+0x124>)
 8002a28:	5c5b      	ldrb	r3, [r3, r1]
 8002a2a:	b25b      	sxtb	r3, r3
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	b25b      	sxtb	r3, r3
 8002a30:	4013      	ands	r3, r2
 8002a32:	b25b      	sxtb	r3, r3
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	72bb      	strb	r3, [r7, #10]
        switch (int_config->int_channel)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b03      	cmp	r3, #3
 8002a3e:	d83b      	bhi.n	8002ab8 <map_feature_interrupt+0xf8>
 8002a40:	a201      	add	r2, pc, #4	@ (adr r2, 8002a48 <map_feature_interrupt+0x88>)
 8002a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a46:	bf00      	nop
 8002a48:	08002a59 	.word	0x08002a59
 8002a4c:	08002a63 	.word	0x08002a63
 8002a50:	08002a7b 	.word	0x08002a7b
 8002a54:	08002a93 	.word	0x08002a93
        {
            case BMI160_INT_CHANNEL_NONE:
                data[0] = temp[0];
 8002a58:	7a3b      	ldrb	r3, [r7, #8]
 8002a5a:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2];
 8002a5c:	7abb      	ldrb	r3, [r7, #10]
 8002a5e:	73bb      	strb	r3, [r7, #14]
                break;
 8002a60:	e02c      	b.n	8002abc <map_feature_interrupt+0xfc>
            case BMI160_INT_CHANNEL_1:
                data[0] = temp[0] | int_mask_lookup_table[int_config->int_type];
 8002a62:	7a3a      	ldrb	r2, [r7, #8]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	785b      	ldrb	r3, [r3, #1]
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ae4 <map_feature_interrupt+0x124>)
 8002a6c:	5c5b      	ldrb	r3, [r3, r1]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2];
 8002a74:	7abb      	ldrb	r3, [r7, #10]
 8002a76:	73bb      	strb	r3, [r7, #14]
                break;
 8002a78:	e020      	b.n	8002abc <map_feature_interrupt+0xfc>
            case BMI160_INT_CHANNEL_2:
                data[2] = temp[2] | int_mask_lookup_table[int_config->int_type];
 8002a7a:	7aba      	ldrb	r2, [r7, #10]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	785b      	ldrb	r3, [r3, #1]
 8002a80:	4619      	mov	r1, r3
 8002a82:	4b18      	ldr	r3, [pc, #96]	@ (8002ae4 <map_feature_interrupt+0x124>)
 8002a84:	5c5b      	ldrb	r3, [r3, r1]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	73bb      	strb	r3, [r7, #14]
                data[0] = temp[0];
 8002a8c:	7a3b      	ldrb	r3, [r7, #8]
 8002a8e:	733b      	strb	r3, [r7, #12]
                break;
 8002a90:	e014      	b.n	8002abc <map_feature_interrupt+0xfc>
            case BMI160_INT_CHANNEL_BOTH:
                data[0] = temp[0] | int_mask_lookup_table[int_config->int_type];
 8002a92:	7a3a      	ldrb	r2, [r7, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	785b      	ldrb	r3, [r3, #1]
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4b12      	ldr	r3, [pc, #72]	@ (8002ae4 <map_feature_interrupt+0x124>)
 8002a9c:	5c5b      	ldrb	r3, [r3, r1]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2] | int_mask_lookup_table[int_config->int_type];
 8002aa4:	7aba      	ldrb	r2, [r7, #10]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	785b      	ldrb	r3, [r3, #1]
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4b0d      	ldr	r3, [pc, #52]	@ (8002ae4 <map_feature_interrupt+0x124>)
 8002aae:	5c5b      	ldrb	r3, [r3, r1]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	73bb      	strb	r3, [r7, #14]
                break;
 8002ab6:	e001      	b.n	8002abc <map_feature_interrupt+0xfc>
            default:
                rslt = BMI160_E_OUT_OF_RANGE;
 8002ab8:	23fc      	movs	r3, #252	@ 0xfc
 8002aba:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMI160_OK)
 8002abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d108      	bne.n	8002ad6 <map_feature_interrupt+0x116>
        {
            rslt = bmi160_set_regs(BMI160_INT_MAP_0_ADDR, data, 3, dev);
 8002ac4:	f107 010c 	add.w	r1, r7, #12
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	2203      	movs	r2, #3
 8002acc:	2055      	movs	r0, #85	@ 0x55
 8002ace:	f7fe fa5c 	bl	8000f8a <bmi160_set_regs>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8002ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	08015444 	.word	0x08015444

08002ae8 <map_hardware_interrupt>:
/*!
 *  @brief This API is used to map/unmap the Dataready(Accel & Gyro), FIFO full
 *  and FIFO watermark interrupt.
 */
static int8_t map_hardware_interrupt(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002af2:	2300      	movs	r3, #0
 8002af4:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002af6:	2300      	movs	r3, #0
 8002af8:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_MAP_1_ADDR, &data, 1, dev);
 8002afa:	f107 010d 	add.w	r1, r7, #13
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	2201      	movs	r2, #1
 8002b02:	2056      	movs	r0, #86	@ 0x56
 8002b04:	f7fe fa0e 	bl	8000f24 <bmi160_get_regs>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002b0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d168      	bne.n	8002be6 <map_hardware_interrupt+0xfe>
    {
        temp = data & ~int_mask_lookup_table[int_config->int_type];
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	785b      	ldrb	r3, [r3, #1]
 8002b18:	461a      	mov	r2, r3
 8002b1a:	4b36      	ldr	r3, [pc, #216]	@ (8002bf4 <map_hardware_interrupt+0x10c>)
 8002b1c:	5c9b      	ldrb	r3, [r3, r2]
 8002b1e:	b25b      	sxtb	r3, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	b25a      	sxtb	r2, r3
 8002b24:	7b7b      	ldrb	r3, [r7, #13]
 8002b26:	b25b      	sxtb	r3, r3
 8002b28:	4013      	ands	r3, r2
 8002b2a:	b25b      	sxtb	r3, r3
 8002b2c:	73bb      	strb	r3, [r7, #14]
        temp = temp & ~((uint8_t)(int_mask_lookup_table[int_config->int_type] << 4));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	785b      	ldrb	r3, [r3, #1]
 8002b32:	461a      	mov	r2, r3
 8002b34:	4b2f      	ldr	r3, [pc, #188]	@ (8002bf4 <map_hardware_interrupt+0x10c>)
 8002b36:	5c9b      	ldrb	r3, [r3, r2]
 8002b38:	011b      	lsls	r3, r3, #4
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	b25a      	sxtb	r2, r3
 8002b42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b46:	4013      	ands	r3, r2
 8002b48:	b25b      	sxtb	r3, r3
 8002b4a:	73bb      	strb	r3, [r7, #14]
        switch (int_config->int_channel)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b03      	cmp	r3, #3
 8002b52:	d839      	bhi.n	8002bc8 <map_hardware_interrupt+0xe0>
 8002b54:	a201      	add	r2, pc, #4	@ (adr r2, 8002b5c <map_hardware_interrupt+0x74>)
 8002b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b5a:	bf00      	nop
 8002b5c:	08002b6d 	.word	0x08002b6d
 8002b60:	08002b73 	.word	0x08002b73
 8002b64:	08002b8b 	.word	0x08002b8b
 8002b68:	08002b9f 	.word	0x08002b9f
        {
            case BMI160_INT_CHANNEL_NONE:
                data = temp;
 8002b6c:	7bbb      	ldrb	r3, [r7, #14]
 8002b6e:	737b      	strb	r3, [r7, #13]
                break;
 8002b70:	e02c      	b.n	8002bcc <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_1:
                data = temp | (uint8_t)((int_mask_lookup_table[int_config->int_type]) << 4);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	785b      	ldrb	r3, [r3, #1]
 8002b76:	461a      	mov	r2, r3
 8002b78:	4b1e      	ldr	r3, [pc, #120]	@ (8002bf4 <map_hardware_interrupt+0x10c>)
 8002b7a:	5c9b      	ldrb	r3, [r3, r2]
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	7bbb      	ldrb	r3, [r7, #14]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	737b      	strb	r3, [r7, #13]
                break;
 8002b88:	e020      	b.n	8002bcc <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_2:
                data = temp | int_mask_lookup_table[int_config->int_type];
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	785b      	ldrb	r3, [r3, #1]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	4b18      	ldr	r3, [pc, #96]	@ (8002bf4 <map_hardware_interrupt+0x10c>)
 8002b92:	5c9a      	ldrb	r2, [r3, r2]
 8002b94:	7bbb      	ldrb	r3, [r7, #14]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	737b      	strb	r3, [r7, #13]
                break;
 8002b9c:	e016      	b.n	8002bcc <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_BOTH:
                data = temp | int_mask_lookup_table[int_config->int_type];
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	785b      	ldrb	r3, [r3, #1]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	4b13      	ldr	r3, [pc, #76]	@ (8002bf4 <map_hardware_interrupt+0x10c>)
 8002ba6:	5c9a      	ldrb	r2, [r3, r2]
 8002ba8:	7bbb      	ldrb	r3, [r7, #14]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	737b      	strb	r3, [r7, #13]
                data = data | (uint8_t)((int_mask_lookup_table[int_config->int_type]) << 4);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	785b      	ldrb	r3, [r3, #1]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8002bf4 <map_hardware_interrupt+0x10c>)
 8002bb8:	5c9b      	ldrb	r3, [r3, r2]
 8002bba:	011b      	lsls	r3, r3, #4
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	7b7b      	ldrb	r3, [r7, #13]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	737b      	strb	r3, [r7, #13]
                break;
 8002bc6:	e001      	b.n	8002bcc <map_hardware_interrupt+0xe4>
            default:
                rslt = BMI160_E_OUT_OF_RANGE;
 8002bc8:	23fc      	movs	r3, #252	@ 0xfc
 8002bca:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMI160_OK)
 8002bcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d108      	bne.n	8002be6 <map_hardware_interrupt+0xfe>
        {
            rslt = bmi160_set_regs(BMI160_INT_MAP_1_ADDR, &data, 1, dev);
 8002bd4:	f107 010d 	add.w	r1, r7, #13
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	2056      	movs	r0, #86	@ 0x56
 8002bde:	f7fe f9d4 	bl	8000f8a <bmi160_set_regs>
 8002be2:	4603      	mov	r3, r0
 8002be4:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8002be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	08015444 	.word	0x08015444

08002bf8 <config_any_motion_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for any-motion interrupt.
 */
static int8_t config_any_motion_src(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                    const struct bmi160_dev *dev)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002c06:	2300      	movs	r3, #0
 8002c08:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8002c0a:	f107 010d 	add.w	r1, r7, #13
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2201      	movs	r2, #1
 8002c12:	2059      	movs	r0, #89	@ 0x59
 8002c14:	f7fe f986 	bl	8000f24 <bmi160_get_regs>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002c1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d11a      	bne.n	8002c5a <config_any_motion_src+0x62>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 8002c24:	7b7b      	ldrb	r3, [r7, #13]
 8002c26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c2a:	73bb      	strb	r3, [r7, #14]
        data = temp | ((any_motion_int_cfg->anymotion_data_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	b25b      	sxtb	r3, r3
 8002c38:	01db      	lsls	r3, r3, #7
 8002c3a:	b25a      	sxtb	r2, r3
 8002c3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	b25b      	sxtb	r3, r3
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8002c48:	f107 010d 	add.w	r1, r7, #13
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	2059      	movs	r0, #89	@ 0x59
 8002c52:	f7fe f99a 	bl	8000f8a <bmi160_set_regs>
 8002c56:	4603      	mov	r3, r0
 8002c58:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <config_any_dur_threshold>:
 * @brief This API configure the duration and threshold of
 * any-motion interrupt.
 */
static int8_t config_any_dur_threshold(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                       const struct bmi160_dev *dev)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b084      	sub	sp, #16
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
 8002c6e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002c70:	2300      	movs	r3, #0
 8002c72:	733b      	strb	r3, [r7, #12]
    uint8_t temp = 0;
 8002c74:	2300      	movs	r3, #0
 8002c76:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[2] = { 0 };
 8002c78:	2300      	movs	r3, #0
 8002c7a:	813b      	strh	r3, [r7, #8]
    uint8_t dur;

    /* Configure Int Motion 0 register */
    rslt = bmi160_get_regs(BMI160_INT_MOTION_0_ADDR, &data, 1, dev);
 8002c7c:	f107 010c 	add.w	r1, r7, #12
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	2201      	movs	r2, #1
 8002c84:	205f      	movs	r0, #95	@ 0x5f
 8002c86:	f7fe f94d 	bl	8000f24 <bmi160_get_regs>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d122      	bne.n	8002cdc <config_any_dur_threshold+0x76>
    {
        /* slope duration */
        dur = (uint8_t)any_motion_int_cfg->anymotion_dur;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	737b      	strb	r3, [r7, #13]
        temp = data & ~BMI160_SLOPE_INT_DUR_MASK;
 8002ca2:	7b3b      	ldrb	r3, [r7, #12]
 8002ca4:	f023 0303 	bic.w	r3, r3, #3
 8002ca8:	73bb      	strb	r3, [r7, #14]
        data = temp | (dur & BMI160_MOTION_SRC_INT_MASK);
 8002caa:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002cae:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002cb2:	b25a      	sxtb	r2, r3
 8002cb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	b25b      	sxtb	r3, r3
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	733b      	strb	r3, [r7, #12]
        data_array[0] = data;
 8002cc0:	7b3b      	ldrb	r3, [r7, #12]
 8002cc2:	723b      	strb	r3, [r7, #8]

        /* add slope threshold */
        data_array[1] = any_motion_int_cfg->anymotion_thr;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	785b      	ldrb	r3, [r3, #1]
 8002cc8:	727b      	strb	r3, [r7, #9]
        /* INT MOTION 0 and INT MOTION 1 address lie consecutively,
         * hence writing data to respective registers at one go */

        /* Writing to Int_motion 0 and
         * Int_motion 1 Address simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_MOTION_0_ADDR, data_array, 2, dev);
 8002cca:	f107 0108 	add.w	r1, r7, #8
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	205f      	movs	r0, #95	@ 0x5f
 8002cd4:	f7fe f959 	bl	8000f8a <bmi160_set_regs>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002cdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <config_any_motion_int_settg>:
 * @brief This API configure necessary setting of any-motion interrupt.
 */
static int8_t config_any_motion_int_settg(const struct bmi160_int_settg *int_config,
                                          const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                          const struct bmi160_dev *dev)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8002cf4:	6879      	ldr	r1, [r7, #4]
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f7fe fed4 	bl	8001aa4 <set_intr_pin_config>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8002d00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d122      	bne.n	8002d4e <config_any_motion_int_settg+0x66>
    {
        rslt = disable_sig_motion_int(dev);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7ff fe27 	bl	800295c <disable_sig_motion_int>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8002d12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d119      	bne.n	8002d4e <config_any_motion_int_settg+0x66>
        {
            rslt = map_feature_interrupt(int_config, dev);
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f7ff fe4f 	bl	80029c0 <map_feature_interrupt>
 8002d22:	4603      	mov	r3, r0
 8002d24:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 8002d26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10f      	bne.n	8002d4e <config_any_motion_int_settg+0x66>
            {
                rslt = config_any_motion_src(any_motion_int_cfg, dev);
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	68b8      	ldr	r0, [r7, #8]
 8002d32:	f7ff ff61 	bl	8002bf8 <config_any_motion_src>
 8002d36:	4603      	mov	r3, r0
 8002d38:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMI160_OK)
 8002d3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d105      	bne.n	8002d4e <config_any_motion_int_settg+0x66>
                {
                    rslt = config_any_dur_threshold(any_motion_int_cfg, dev);
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	68b8      	ldr	r0, [r7, #8]
 8002d46:	f7ff ff8e 	bl	8002c66 <config_any_dur_threshold>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    }

    return rslt;
 8002d4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <enable_data_ready_int>:

/*!
 * @brief This API enable the data ready interrupt.
 */
static int8_t enable_data_ready_int(const struct bmi160_dev *dev)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b084      	sub	sp, #16
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 8002d62:	2300      	movs	r3, #0
 8002d64:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002d66:	2300      	movs	r3, #0
 8002d68:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8002d6a:	f107 010d 	add.w	r1, r7, #13
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	2051      	movs	r0, #81	@ 0x51
 8002d74:	f7fe f8d6 	bl	8000f24 <bmi160_get_regs>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002d7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d111      	bne.n	8002da8 <enable_data_ready_int+0x4e>
    {
        temp = data & ~BMI160_DATA_RDY_INT_EN_MASK;
 8002d84:	7b7b      	ldrb	r3, [r7, #13]
 8002d86:	f023 0310 	bic.w	r3, r3, #16
 8002d8a:	73bb      	strb	r3, [r7, #14]
        data = temp | ((1 << 4) & BMI160_DATA_RDY_INT_EN_MASK);
 8002d8c:	7bbb      	ldrb	r3, [r7, #14]
 8002d8e:	f043 0310 	orr.w	r3, r3, #16
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	737b      	strb	r3, [r7, #13]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8002d96:	f107 010d 	add.w	r1, r7, #13
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	2051      	movs	r0, #81	@ 0x51
 8002da0:	f7fe f8f3 	bl	8000f8a <bmi160_set_regs>
 8002da4:	4603      	mov	r3, r0
 8002da6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002da8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <enable_no_motion_int>:
/*!
 * @brief This API enables the no motion/slow motion interrupt.
 */
static int8_t enable_no_motion_int(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                   const struct bmi160_dev *dev)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	73bb      	strb	r3, [r7, #14]

    /* Enable no motion x, no motion y, no motion z
     * in Int Enable 2 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 8002dc6:	f107 010d 	add.w	r1, r7, #13
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	2052      	movs	r0, #82	@ 0x52
 8002dd0:	f7fe f8a8 	bl	8000f24 <bmi160_get_regs>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002dd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d138      	bne.n	8002e52 <enable_no_motion_int+0x9e>
    {
        if (no_mot_int_cfg->no_motion_x == 1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d008      	beq.n	8002e00 <enable_no_motion_int+0x4c>
        {
            temp = data & ~BMI160_NO_MOTION_X_INT_EN_MASK;
 8002dee:	7b7b      	ldrb	r3, [r7, #13]
 8002df0:	f023 0301 	bic.w	r3, r3, #1
 8002df4:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | (1 & BMI160_NO_MOTION_X_INT_EN_MASK);
 8002df6:	7bbb      	ldrb	r3, [r7, #14]
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	737b      	strb	r3, [r7, #13]
        }

        if (no_mot_int_cfg->no_motion_y == 1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d008      	beq.n	8002e20 <enable_no_motion_int+0x6c>
        {
            temp = data & ~BMI160_NO_MOTION_Y_INT_EN_MASK;
 8002e0e:	7b7b      	ldrb	r3, [r7, #13]
 8002e10:	f023 0302 	bic.w	r3, r3, #2
 8002e14:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | ((1 << 1) & BMI160_NO_MOTION_Y_INT_EN_MASK);
 8002e16:	7bbb      	ldrb	r3, [r7, #14]
 8002e18:	f043 0302 	orr.w	r3, r3, #2
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	737b      	strb	r3, [r7, #13]
        }

        if (no_mot_int_cfg->no_motion_z == 1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d008      	beq.n	8002e40 <enable_no_motion_int+0x8c>
        {
            temp = data & ~BMI160_NO_MOTION_Z_INT_EN_MASK;
 8002e2e:	7b7b      	ldrb	r3, [r7, #13]
 8002e30:	f023 0304 	bic.w	r3, r3, #4
 8002e34:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | ((1 << 2) & BMI160_NO_MOTION_Z_INT_EN_MASK);
 8002e36:	7bbb      	ldrb	r3, [r7, #14]
 8002e38:	f043 0304 	orr.w	r3, r3, #4
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	737b      	strb	r3, [r7, #13]
        }

        /* write data to Int Enable 2 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 8002e40:	f107 010d 	add.w	r1, r7, #13
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	2201      	movs	r2, #1
 8002e48:	2052      	movs	r0, #82	@ 0x52
 8002e4a:	f7fe f89e 	bl	8000f8a <bmi160_set_regs>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <config_no_motion_int_settg>:
 * no motion/slow motion interrupt.
 */
static int8_t config_no_motion_int_settg(const struct bmi160_int_settg *int_config,
                                         const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                         const struct bmi160_dev *dev)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b086      	sub	sp, #24
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	60f8      	str	r0, [r7, #12]
 8002e66:	60b9      	str	r1, [r7, #8]
 8002e68:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f7fe fe19 	bl	8001aa4 <set_intr_pin_config>
 8002e72:	4603      	mov	r3, r0
 8002e74:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8002e76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d119      	bne.n	8002eb2 <config_no_motion_int_settg+0x54>
    {
        rslt = map_feature_interrupt(int_config, dev);
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f7ff fd9d 	bl	80029c0 <map_feature_interrupt>
 8002e86:	4603      	mov	r3, r0
 8002e88:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8002e8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10f      	bne.n	8002eb2 <config_no_motion_int_settg+0x54>
        {
            rslt = config_no_motion_data_src(no_mot_int_cfg, dev);
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	68b8      	ldr	r0, [r7, #8]
 8002e96:	f000 f812 	bl	8002ebe <config_no_motion_data_src>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 8002e9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d105      	bne.n	8002eb2 <config_no_motion_int_settg+0x54>
            {
                rslt = config_no_motion_dur_thr(no_mot_int_cfg, dev);
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	68b8      	ldr	r0, [r7, #8]
 8002eaa:	f000 f83f 	bl	8002f2c <config_no_motion_dur_thr>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8002eb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <config_no_motion_data_src>:
/*!
 * @brief This API configure the source of interrupt for no motion.
 */
static int8_t config_no_motion_data_src(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                        const struct bmi160_dev *dev)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b084      	sub	sp, #16
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
 8002ec6:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8002ed0:	f107 010d 	add.w	r1, r7, #13
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	2059      	movs	r0, #89	@ 0x59
 8002eda:	f7fe f823 	bl	8000f24 <bmi160_get_regs>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d11a      	bne.n	8002f20 <config_no_motion_data_src+0x62>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 8002eea:	7b7b      	ldrb	r3, [r7, #13]
 8002eec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ef0:	73bb      	strb	r3, [r7, #14]
        data = temp | ((no_mot_int_cfg->no_motion_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	785b      	ldrb	r3, [r3, #1]
 8002ef6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	b25b      	sxtb	r3, r3
 8002efe:	01db      	lsls	r3, r3, #7
 8002f00:	b25a      	sxtb	r2, r3
 8002f02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	b25b      	sxtb	r3, r3
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8002f0e:	f107 010d 	add.w	r1, r7, #13
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2201      	movs	r2, #1
 8002f16:	2059      	movs	r0, #89	@ 0x59
 8002f18:	f7fe f837 	bl	8000f8a <bmi160_set_regs>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <config_no_motion_dur_thr>:
 * @brief This API configure the duration and threshold of
 * no motion/slow motion interrupt along with selection of no/slow motion.
 */
static int8_t config_no_motion_dur_thr(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                       const struct bmi160_dev *dev)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002f36:	2300      	movs	r3, #0
 8002f38:	72fb      	strb	r3, [r7, #11]
    uint8_t temp = 0;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	73bb      	strb	r3, [r7, #14]
    uint8_t temp_1 = 0;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	737b      	strb	r3, [r7, #13]
    uint8_t reg_addr;
    uint8_t data_array[2] = { 0 };
 8002f42:	2300      	movs	r3, #0
 8002f44:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_MOTION register */
    reg_addr = BMI160_INT_MOTION_0_ADDR;
 8002f46:	235f      	movs	r3, #95	@ 0x5f
 8002f48:	733b      	strb	r3, [r7, #12]
    rslt = bmi160_get_regs(reg_addr, &data, 1, dev);
 8002f4a:	f107 010b 	add.w	r1, r7, #11
 8002f4e:	7b38      	ldrb	r0, [r7, #12]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f7fd ffe6 	bl	8000f24 <bmi160_get_regs>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d14c      	bne.n	8002ffe <config_no_motion_dur_thr+0xd2>
    {
        temp = data & ~BMI160_NO_MOTION_INT_DUR_MASK;
 8002f64:	7afb      	ldrb	r3, [r7, #11]
 8002f66:	f003 0303 	and.w	r3, r3, #3
 8002f6a:	73bb      	strb	r3, [r7, #14]

        /* Adding no_motion duration */
        data = temp | ((no_mot_int_cfg->no_motion_dur << 2) & BMI160_NO_MOTION_INT_DUR_MASK);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	b25b      	sxtb	r3, r3
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	b25a      	sxtb	r2, r3
 8002f7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	b25b      	sxtb	r3, r3
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	72fb      	strb	r3, [r7, #11]

        /* Write data to NO_MOTION 0 address */
        rslt = bmi160_set_regs(reg_addr, &data, 1, dev);
 8002f88:	f107 010b 	add.w	r1, r7, #11
 8002f8c:	7b38      	ldrb	r0, [r7, #12]
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f7fd fffa 	bl	8000f8a <bmi160_set_regs>
 8002f96:	4603      	mov	r3, r0
 8002f98:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8002f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d12d      	bne.n	8002ffe <config_no_motion_dur_thr+0xd2>
        {
            reg_addr = BMI160_INT_MOTION_3_ADDR;
 8002fa2:	2362      	movs	r3, #98	@ 0x62
 8002fa4:	733b      	strb	r3, [r7, #12]
            rslt = bmi160_get_regs(reg_addr, &data, 1, dev);
 8002fa6:	f107 010b 	add.w	r1, r7, #11
 8002faa:	7b38      	ldrb	r0, [r7, #12]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f7fd ffb8 	bl	8000f24 <bmi160_get_regs>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8002fb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d11e      	bne.n	8002ffe <config_no_motion_dur_thr+0xd2>
            {
                temp = data & ~BMI160_NO_MOTION_SEL_BIT_MASK;
 8002fc0:	7afb      	ldrb	r3, [r7, #11]
 8002fc2:	f023 0301 	bic.w	r3, r3, #1
 8002fc6:	73bb      	strb	r3, [r7, #14]

                /* Adding no_motion_sel bit */
                temp_1 = (no_mot_int_cfg->no_motion_sel & BMI160_NO_MOTION_SEL_BIT_MASK);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	785b      	ldrb	r3, [r3, #1]
 8002fcc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	737b      	strb	r3, [r7, #13]
                data = (temp | temp_1);
 8002fd4:	7bba      	ldrb	r2, [r7, #14]
 8002fd6:	7b7b      	ldrb	r3, [r7, #13]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	72fb      	strb	r3, [r7, #11]
                data_array[1] = data;
 8002fde:	7afb      	ldrb	r3, [r7, #11]
 8002fe0:	727b      	strb	r3, [r7, #9]

                /* Adding no motion threshold */
                data_array[0] = no_mot_int_cfg->no_motion_thres;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	789b      	ldrb	r3, [r3, #2]
 8002fe6:	723b      	strb	r3, [r7, #8]
                reg_addr = BMI160_INT_MOTION_2_ADDR;
 8002fe8:	2361      	movs	r3, #97	@ 0x61
 8002fea:	733b      	strb	r3, [r7, #12]

                /* writing data to INT_MOTION 2 and INT_MOTION 3
                 * address simultaneously */
                rslt = bmi160_set_regs(reg_addr, data_array, 2, dev);
 8002fec:	f107 0108 	add.w	r1, r7, #8
 8002ff0:	7b38      	ldrb	r0, [r7, #12]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	f7fd ffc8 	bl	8000f8a <bmi160_set_regs>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8002ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <enable_sig_motion_int>:

/*!
 * @brief This API enables the sig-motion motion interrupt.
 */
static int8_t enable_sig_motion_int(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg, struct bmi160_dev *dev)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b084      	sub	sp, #16
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
 8003012:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8003014:	2300      	movs	r3, #0
 8003016:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8003018:	2300      	movs	r3, #0
 800301a:	73bb      	strb	r3, [r7, #14]

    /* For significant motion,enable any motion x,any motion y,
     * any motion z in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 800301c:	f107 010d 	add.w	r1, r7, #13
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	2201      	movs	r2, #1
 8003024:	2050      	movs	r0, #80	@ 0x50
 8003026:	f7fd ff7d 	bl	8000f24 <bmi160_get_regs>
 800302a:	4603      	mov	r3, r0
 800302c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800302e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d124      	bne.n	8003080 <enable_sig_motion_int+0x76>
    {
        if (sig_mot_int_cfg->sig_en == BMI160_ENABLE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	f003 0320 	and.w	r3, r3, #32
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00c      	beq.n	800305e <enable_sig_motion_int+0x54>
        {
            temp = data & ~BMI160_SIG_MOTION_INT_EN_MASK;
 8003044:	7b7b      	ldrb	r3, [r7, #13]
 8003046:	f023 0307 	bic.w	r3, r3, #7
 800304a:	73bb      	strb	r3, [r7, #14]
            data = temp | (7 & BMI160_SIG_MOTION_INT_EN_MASK);
 800304c:	7bbb      	ldrb	r3, [r7, #14]
 800304e:	f043 0307 	orr.w	r3, r3, #7
 8003052:	b2db      	uxtb	r3, r3
 8003054:	737b      	strb	r3, [r7, #13]

            /* sig-motion feature selected*/
            dev->any_sig_sel = BMI160_SIG_MOTION_ENABLED;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	2201      	movs	r2, #1
 800305a:	70da      	strb	r2, [r3, #3]
 800305c:	e007      	b.n	800306e <enable_sig_motion_int+0x64>
        }
        else
        {
            data = data & ~BMI160_SIG_MOTION_INT_EN_MASK;
 800305e:	7b7b      	ldrb	r3, [r7, #13]
 8003060:	f023 0307 	bic.w	r3, r3, #7
 8003064:	b2db      	uxtb	r3, r3
 8003066:	737b      	strb	r3, [r7, #13]

            /* neither any-motion feature nor sig-motion selected */
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	22ff      	movs	r2, #255	@ 0xff
 800306c:	70da      	strb	r2, [r3, #3]
        }

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 800306e:	f107 010d 	add.w	r1, r7, #13
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	2201      	movs	r2, #1
 8003076:	2050      	movs	r0, #80	@ 0x50
 8003078:	f7fd ff87 	bl	8000f8a <bmi160_set_regs>
 800307c:	4603      	mov	r3, r0
 800307e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003080:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <config_sig_motion_int_settg>:
 * significant motion interrupt.
 */
static int8_t config_sig_motion_int_settg(const struct bmi160_int_settg *int_config,
                                          const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                          const struct bmi160_dev *dev)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f7fe fd02 	bl	8001aa4 <set_intr_pin_config>
 80030a0:	4603      	mov	r3, r0
 80030a2:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 80030a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d119      	bne.n	80030e0 <config_sig_motion_int_settg+0x54>
    {
        rslt = map_feature_interrupt(int_config, dev);
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f7ff fc86 	bl	80029c0 <map_feature_interrupt>
 80030b4:	4603      	mov	r3, r0
 80030b6:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 80030b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10f      	bne.n	80030e0 <config_sig_motion_int_settg+0x54>
        {
            rslt = config_sig_motion_data_src(sig_mot_int_cfg, dev);
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	68b8      	ldr	r0, [r7, #8]
 80030c4:	f000 f812 	bl	80030ec <config_sig_motion_data_src>
 80030c8:	4603      	mov	r3, r0
 80030ca:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 80030cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d105      	bne.n	80030e0 <config_sig_motion_int_settg+0x54>
            {
                rslt = config_sig_dur_threshold(sig_mot_int_cfg, dev);
 80030d4:	6879      	ldr	r1, [r7, #4]
 80030d6:	68b8      	ldr	r0, [r7, #8]
 80030d8:	f000 f83f 	bl	800315a <config_sig_dur_threshold>
 80030dc:	4603      	mov	r3, r0
 80030de:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 80030e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <config_sig_motion_data_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for sig motion interrupt.
 */
static int8_t config_sig_motion_data_src(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                         const struct bmi160_dev *dev)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80030f6:	2300      	movs	r3, #0
 80030f8:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80030fa:	2300      	movs	r3, #0
 80030fc:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 80030fe:	f107 010d 	add.w	r1, r7, #13
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	2201      	movs	r2, #1
 8003106:	2059      	movs	r0, #89	@ 0x59
 8003108:	f7fd ff0c 	bl	8000f24 <bmi160_get_regs>
 800310c:	4603      	mov	r3, r0
 800310e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003110:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d11a      	bne.n	800314e <config_sig_motion_data_src+0x62>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 8003118:	7b7b      	ldrb	r3, [r7, #13]
 800311a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800311e:	73bb      	strb	r3, [r7, #14]
        data = temp | ((sig_mot_int_cfg->sig_data_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003128:	b2db      	uxtb	r3, r3
 800312a:	b25b      	sxtb	r3, r3
 800312c:	01db      	lsls	r3, r3, #7
 800312e:	b25a      	sxtb	r2, r3
 8003130:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003134:	4313      	orrs	r3, r2
 8003136:	b25b      	sxtb	r3, r3
 8003138:	b2db      	uxtb	r3, r3
 800313a:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 800313c:	f107 010d 	add.w	r1, r7, #13
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	2201      	movs	r2, #1
 8003144:	2059      	movs	r0, #89	@ 0x59
 8003146:	f7fd ff20 	bl	8000f8a <bmi160_set_regs>
 800314a:	4603      	mov	r3, r0
 800314c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800314e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <config_sig_dur_threshold>:
 * @brief This API configure the threshold, skip and proof time of
 * sig motion interrupt.
 */
static int8_t config_sig_dur_threshold(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                       const struct bmi160_dev *dev)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b084      	sub	sp, #16
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
 8003162:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;
    uint8_t temp = 0;
 8003164:	2300      	movs	r3, #0
 8003166:	73bb      	strb	r3, [r7, #14]

    /* Configuring INT_MOTION registers */

    /* Write significant motion threshold.
     * This threshold is same as any motion threshold */
    data = sig_mot_int_cfg->sig_mot_thres;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	785b      	ldrb	r3, [r3, #1]
 800316c:	737b      	strb	r3, [r7, #13]

    /* Write data to INT_MOTION 1 address */
    rslt = bmi160_set_regs(BMI160_INT_MOTION_1_ADDR, &data, 1, dev);
 800316e:	f107 010d 	add.w	r1, r7, #13
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2201      	movs	r2, #1
 8003176:	2060      	movs	r0, #96	@ 0x60
 8003178:	f7fd ff07 	bl	8000f8a <bmi160_set_regs>
 800317c:	4603      	mov	r3, r0
 800317e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d154      	bne.n	8003232 <config_sig_dur_threshold+0xd8>
    {
        rslt = bmi160_get_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 8003188:	f107 010d 	add.w	r1, r7, #13
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	2201      	movs	r2, #1
 8003190:	2062      	movs	r0, #98	@ 0x62
 8003192:	f7fd fec7 	bl	8000f24 <bmi160_get_regs>
 8003196:	4603      	mov	r3, r0
 8003198:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800319a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d147      	bne.n	8003232 <config_sig_dur_threshold+0xd8>
        {
            temp = data & ~BMI160_SIG_MOTION_SKIP_MASK;
 80031a2:	7b7b      	ldrb	r3, [r7, #13]
 80031a4:	f023 030c 	bic.w	r3, r3, #12
 80031a8:	73bb      	strb	r3, [r7, #14]

            /* adding skip time of sig_motion interrupt*/
            data = temp | ((sig_mot_int_cfg->sig_mot_skip << 2) & BMI160_SIG_MOTION_SKIP_MASK);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	b25b      	sxtb	r3, r3
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	b25b      	sxtb	r3, r3
 80031ba:	f003 030c 	and.w	r3, r3, #12
 80031be:	b25a      	sxtb	r2, r3
 80031c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	b25b      	sxtb	r3, r3
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_SIG_MOTION_PROOF_MASK;
 80031cc:	7b7b      	ldrb	r3, [r7, #13]
 80031ce:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80031d2:	73bb      	strb	r3, [r7, #14]

            /* adding proof time of sig_motion interrupt */
            data = temp | ((sig_mot_int_cfg->sig_mot_proof << 4) & BMI160_SIG_MOTION_PROOF_MASK);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	b25b      	sxtb	r3, r3
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	b25b      	sxtb	r3, r3
 80031e4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80031e8:	b25a      	sxtb	r2, r3
 80031ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	b25b      	sxtb	r3, r3
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	737b      	strb	r3, [r7, #13]

            /* configure the int_sig_mot_sel bit to select
             * significant motion interrupt */
            temp = data & ~BMI160_SIG_MOTION_SEL_MASK;
 80031f6:	7b7b      	ldrb	r3, [r7, #13]
 80031f8:	f023 0302 	bic.w	r3, r3, #2
 80031fc:	73bb      	strb	r3, [r7, #14]
            data = temp | ((sig_mot_int_cfg->sig_en << 1) & BMI160_SIG_MOTION_SEL_MASK);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003206:	b2db      	uxtb	r3, r3
 8003208:	b25b      	sxtb	r3, r3
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	b25b      	sxtb	r3, r3
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	b25a      	sxtb	r2, r3
 8003214:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003218:	4313      	orrs	r3, r2
 800321a:	b25b      	sxtb	r3, r3
 800321c:	b2db      	uxtb	r3, r3
 800321e:	737b      	strb	r3, [r7, #13]
            rslt = bmi160_set_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 8003220:	f107 010d 	add.w	r1, r7, #13
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	2201      	movs	r2, #1
 8003228:	2062      	movs	r0, #98	@ 0x62
 800322a:	f7fd feae 	bl	8000f8a <bmi160_set_regs>
 800322e:	4603      	mov	r3, r0
 8003230:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8003232:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <enable_step_detect_int>:
/*!
 * @brief This API enables the step detector interrupt.
 */
static int8_t enable_step_detect_int(const struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg,
                                     const struct bmi160_dev *dev)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b084      	sub	sp, #16
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
 8003246:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8003248:	2300      	movs	r3, #0
 800324a:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 800324c:	2300      	movs	r3, #0
 800324e:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 2 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 8003250:	f107 010d 	add.w	r1, r7, #13
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	2201      	movs	r2, #1
 8003258:	2052      	movs	r0, #82	@ 0x52
 800325a:	f7fd fe63 	bl	8000f24 <bmi160_get_regs>
 800325e:	4603      	mov	r3, r0
 8003260:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d11d      	bne.n	80032a6 <enable_step_detect_int+0x68>
    {
        temp = data & ~BMI160_STEP_DETECT_INT_EN_MASK;
 800326a:	7b7b      	ldrb	r3, [r7, #13]
 800326c:	f023 0308 	bic.w	r3, r3, #8
 8003270:	73bb      	strb	r3, [r7, #14]
        data = temp | ((step_detect_int_cfg->step_detector_en << 3) & BMI160_STEP_DETECT_INT_EN_MASK);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800327a:	b2db      	uxtb	r3, r3
 800327c:	b25b      	sxtb	r3, r3
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	b25b      	sxtb	r3, r3
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	b25a      	sxtb	r2, r3
 8003288:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800328c:	4313      	orrs	r3, r2
 800328e:	b25b      	sxtb	r3, r3
 8003290:	b2db      	uxtb	r3, r3
 8003292:	737b      	strb	r3, [r7, #13]

        /* Writing data to INT ENABLE 2 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 8003294:	f107 010d 	add.w	r1, r7, #13
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	2201      	movs	r2, #1
 800329c:	2052      	movs	r0, #82	@ 0x52
 800329e:	f7fd fe74 	bl	8000f8a <bmi160_set_regs>
 80032a2:	4603      	mov	r3, r0
 80032a4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80032a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <config_step_detect>:
/*!
 * @brief This API configure the step detector parameter.
 */
static int8_t config_step_detect(const struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg,
                                 const struct bmi160_dev *dev)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b084      	sub	sp, #16
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
 80032ba:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 80032bc:	2300      	movs	r3, #0
 80032be:	73fb      	strb	r3, [r7, #15]
    uint8_t data_array[2] = { 0 };
 80032c0:	2300      	movs	r3, #0
 80032c2:	81bb      	strh	r3, [r7, #12]

    if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_NORMAL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d104      	bne.n	80032dc <config_step_detect+0x2a>
    {
        /* Normal mode setting */
        data_array[0] = 0x15;
 80032d2:	2315      	movs	r3, #21
 80032d4:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x03;
 80032d6:	2303      	movs	r3, #3
 80032d8:	737b      	strb	r3, [r7, #13]
 80032da:	e05c      	b.n	8003396 <config_step_detect+0xe4>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_SENSITIVE)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b40      	cmp	r3, #64	@ 0x40
 80032e8:	d104      	bne.n	80032f4 <config_step_detect+0x42>
    {
        /* Sensitive mode setting */
        data_array[0] = 0x2D;
 80032ea:	232d      	movs	r3, #45	@ 0x2d
 80032ec:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x00;
 80032ee:	2300      	movs	r3, #0
 80032f0:	737b      	strb	r3, [r7, #13]
 80032f2:	e050      	b.n	8003396 <config_step_detect+0xe4>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_ROBUST)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b80      	cmp	r3, #128	@ 0x80
 8003300:	d104      	bne.n	800330c <config_step_detect+0x5a>
    {
        /* Robust mode setting */
        data_array[0] = 0x1D;
 8003302:	231d      	movs	r3, #29
 8003304:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x07;
 8003306:	2307      	movs	r3, #7
 8003308:	737b      	strb	r3, [r7, #13]
 800330a:	e044      	b.n	8003396 <config_step_detect+0xe4>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_USER_DEFINE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2bc0      	cmp	r3, #192	@ 0xc0
 8003318:	d13d      	bne.n	8003396 <config_step_detect+0xe4>
    {
        /* Non recommended User defined setting */
        /* Configuring STEP_CONFIG register */
        rslt = bmi160_get_regs(BMI160_INT_STEP_CONFIG_0_ADDR, &data_array[0], 2, dev);
 800331a:	f107 010c 	add.w	r1, r7, #12
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2202      	movs	r2, #2
 8003322:	207a      	movs	r0, #122	@ 0x7a
 8003324:	f7fd fdfe 	bl	8000f24 <bmi160_get_regs>
 8003328:	4603      	mov	r3, r0
 800332a:	73bb      	strb	r3, [r7, #14]
        if (rslt == BMI160_OK)
 800332c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d130      	bne.n	8003396 <config_step_detect+0xe4>
        {
            temp = data_array[0] & ~BMI160_STEP_DETECT_MIN_THRES_MASK;
 8003334:	7b3b      	ldrb	r3, [r7, #12]
 8003336:	f023 0318 	bic.w	r3, r3, #24
 800333a:	73fb      	strb	r3, [r7, #15]

            /* Adding min_threshold */
            data_array[0] = temp | ((step_detect_int_cfg->min_threshold << 3) & BMI160_STEP_DETECT_MIN_THRES_MASK);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8003344:	b2db      	uxtb	r3, r3
 8003346:	b25b      	sxtb	r3, r3
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	b25b      	sxtb	r3, r3
 800334c:	f003 0318 	and.w	r3, r3, #24
 8003350:	b25a      	sxtb	r2, r3
 8003352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003356:	4313      	orrs	r3, r2
 8003358:	b25b      	sxtb	r3, r3
 800335a:	b2db      	uxtb	r3, r3
 800335c:	733b      	strb	r3, [r7, #12]
            temp = data_array[0] & ~BMI160_STEP_DETECT_STEPTIME_MIN_MASK;
 800335e:	7b3b      	ldrb	r3, [r7, #12]
 8003360:	f023 0307 	bic.w	r3, r3, #7
 8003364:	73fb      	strb	r3, [r7, #15]

            /* Adding steptime_min */
            data_array[0] = temp | ((step_detect_int_cfg->steptime_min) & BMI160_STEP_DETECT_STEPTIME_MIN_MASK);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800336e:	b2db      	uxtb	r3, r3
 8003370:	461a      	mov	r2, r3
 8003372:	7bfb      	ldrb	r3, [r7, #15]
 8003374:	4313      	orrs	r3, r2
 8003376:	b2db      	uxtb	r3, r3
 8003378:	733b      	strb	r3, [r7, #12]
            temp = data_array[1] & ~BMI160_STEP_MIN_BUF_MASK;
 800337a:	7b7b      	ldrb	r3, [r7, #13]
 800337c:	f023 0307 	bic.w	r3, r3, #7
 8003380:	73fb      	strb	r3, [r7, #15]

            /* Adding steptime_min */
            data_array[1] = temp | ((step_detect_int_cfg->step_min_buf) & BMI160_STEP_MIN_BUF_MASK);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	785b      	ldrb	r3, [r3, #1]
 8003386:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800338a:	b2db      	uxtb	r3, r3
 800338c:	461a      	mov	r2, r3
 800338e:	7bfb      	ldrb	r3, [r7, #15]
 8003390:	4313      	orrs	r3, r2
 8003392:	b2db      	uxtb	r3, r3
 8003394:	737b      	strb	r3, [r7, #13]
        }
    }

    /* Write data to STEP_CONFIG register */
    rslt = bmi160_set_regs(BMI160_INT_STEP_CONFIG_0_ADDR, data_array, 2, dev);
 8003396:	f107 010c 	add.w	r1, r7, #12
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2202      	movs	r2, #2
 800339e:	207a      	movs	r0, #122	@ 0x7a
 80033a0:	f7fd fdf3 	bl	8000f8a <bmi160_set_regs>
 80033a4:	4603      	mov	r3, r0
 80033a6:	73bb      	strb	r3, [r7, #14]

    return rslt;
 80033a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <enable_tap_int>:
 * @brief This API enables the single/double tap interrupt.
 */
static int8_t enable_tap_int(const struct bmi160_int_settg *int_config,
                             const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                             const struct bmi160_dev *dev)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 80033c0:	2300      	movs	r3, #0
 80033c2:	757b      	strb	r3, [r7, #21]
    uint8_t temp = 0;
 80033c4:	2300      	movs	r3, #0
 80033c6:	75bb      	strb	r3, [r7, #22]

    /* Enable single tap or double tap interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 80033c8:	f107 0115 	add.w	r1, r7, #21
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	2050      	movs	r0, #80	@ 0x50
 80033d2:	f7fd fda7 	bl	8000f24 <bmi160_get_regs>
 80033d6:	4603      	mov	r3, r0
 80033d8:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 80033da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d137      	bne.n	8003452 <enable_tap_int+0x9e>
    {
        if (int_config->int_type == BMI160_ACC_SINGLE_TAP_INT)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	785b      	ldrb	r3, [r3, #1]
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d115      	bne.n	8003416 <enable_tap_int+0x62>
        {
            temp = data & ~BMI160_SINGLE_TAP_INT_EN_MASK;
 80033ea:	7d7b      	ldrb	r3, [r7, #21]
 80033ec:	f023 0320 	bic.w	r3, r3, #32
 80033f0:	75bb      	strb	r3, [r7, #22]
            data = temp | ((tap_int_cfg->tap_en << 5) & BMI160_SINGLE_TAP_INT_EN_MASK);
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	785b      	ldrb	r3, [r3, #1]
 80033f6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	b25b      	sxtb	r3, r3
 80033fe:	015b      	lsls	r3, r3, #5
 8003400:	b25b      	sxtb	r3, r3
 8003402:	f003 0320 	and.w	r3, r3, #32
 8003406:	b25a      	sxtb	r2, r3
 8003408:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800340c:	4313      	orrs	r3, r2
 800340e:	b25b      	sxtb	r3, r3
 8003410:	b2db      	uxtb	r3, r3
 8003412:	757b      	strb	r3, [r7, #21]
 8003414:	e014      	b.n	8003440 <enable_tap_int+0x8c>
        }
        else
        {
            temp = data & ~BMI160_DOUBLE_TAP_INT_EN_MASK;
 8003416:	7d7b      	ldrb	r3, [r7, #21]
 8003418:	f023 0310 	bic.w	r3, r3, #16
 800341c:	75bb      	strb	r3, [r7, #22]
            data = temp | ((tap_int_cfg->tap_en << 4) & BMI160_DOUBLE_TAP_INT_EN_MASK);
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	785b      	ldrb	r3, [r3, #1]
 8003422:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003426:	b2db      	uxtb	r3, r3
 8003428:	b25b      	sxtb	r3, r3
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	b25b      	sxtb	r3, r3
 800342e:	f003 0310 	and.w	r3, r3, #16
 8003432:	b25a      	sxtb	r2, r3
 8003434:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003438:	4313      	orrs	r3, r2
 800343a:	b25b      	sxtb	r3, r3
 800343c:	b2db      	uxtb	r3, r3
 800343e:	757b      	strb	r3, [r7, #21]
        }

        /* Write to Enable 0 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8003440:	f107 0115 	add.w	r1, r7, #21
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	2050      	movs	r0, #80	@ 0x50
 800344a:	f7fd fd9e 	bl	8000f8a <bmi160_set_regs>
 800344e:	4603      	mov	r3, r0
 8003450:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003452:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003456:	4618      	mov	r0, r3
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <config_tap_int_settg>:
 * tap interrupt.
 */
static int8_t config_tap_int_settg(const struct bmi160_int_settg *int_config,
                                   const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                                   const struct bmi160_dev *dev)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b086      	sub	sp, #24
 8003462:	af00      	add	r7, sp, #0
 8003464:	60f8      	str	r0, [r7, #12]
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 800346a:	6879      	ldr	r1, [r7, #4]
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f7fe fb19 	bl	8001aa4 <set_intr_pin_config>
 8003472:	4603      	mov	r3, r0
 8003474:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8003476:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d11a      	bne.n	80034b4 <config_tap_int_settg+0x56>
    {
        rslt = map_feature_interrupt(int_config, dev);
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f7ff fa9d 	bl	80029c0 <map_feature_interrupt>
 8003486:	4603      	mov	r3, r0
 8003488:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 800348a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d110      	bne.n	80034b4 <config_tap_int_settg+0x56>
        {
            rslt = config_tap_data_src(tap_int_cfg, dev);
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	68b8      	ldr	r0, [r7, #8]
 8003496:	f000 f813 	bl	80034c0 <config_tap_data_src>
 800349a:	4603      	mov	r3, r0
 800349c:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 800349e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d106      	bne.n	80034b4 <config_tap_int_settg+0x56>
            {
                rslt = config_tap_param(int_config, tap_int_cfg, dev);
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	68b9      	ldr	r1, [r7, #8]
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 f842 	bl	8003534 <config_tap_param>
 80034b0:	4603      	mov	r3, r0
 80034b2:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 80034b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3718      	adds	r7, #24
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <config_tap_data_src>:
/*!
 * @brief This API configure the source of data(filter & pre-filter)
 * for tap interrupt.
 */
static int8_t config_tap_data_src(const struct bmi160_acc_tap_int_cfg *tap_int_cfg, const struct bmi160_dev *dev)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80034ca:	2300      	movs	r3, #0
 80034cc:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80034ce:	2300      	movs	r3, #0
 80034d0:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 80034d2:	f107 010d 	add.w	r1, r7, #13
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	2201      	movs	r2, #1
 80034da:	2058      	movs	r0, #88	@ 0x58
 80034dc:	f7fd fd22 	bl	8000f24 <bmi160_get_regs>
 80034e0:	4603      	mov	r3, r0
 80034e2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80034e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d11d      	bne.n	8003528 <config_tap_data_src+0x68>
    {
        temp = data & ~BMI160_TAP_SRC_INT_MASK;
 80034ec:	7b7b      	ldrb	r3, [r7, #13]
 80034ee:	f023 0308 	bic.w	r3, r3, #8
 80034f2:	73bb      	strb	r3, [r7, #14]
        data = temp | ((tap_int_cfg->tap_data_src << 3) & BMI160_TAP_SRC_INT_MASK);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	785b      	ldrb	r3, [r3, #1]
 80034f8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	b25b      	sxtb	r3, r3
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	b25b      	sxtb	r3, r3
 8003504:	f003 0308 	and.w	r3, r3, #8
 8003508:	b25a      	sxtb	r2, r3
 800350a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800350e:	4313      	orrs	r3, r2
 8003510:	b25b      	sxtb	r3, r3
 8003512:	b2db      	uxtb	r3, r3
 8003514:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8003516:	f107 010d 	add.w	r1, r7, #13
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2201      	movs	r2, #1
 800351e:	2058      	movs	r0, #88	@ 0x58
 8003520:	f7fd fd33 	bl	8000f8a <bmi160_set_regs>
 8003524:	4603      	mov	r3, r0
 8003526:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003528:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <config_tap_param>:
 * Threshold, quite, shock, and duration.
 */
static int8_t config_tap_param(const struct bmi160_int_settg *int_config,
                               const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                               const struct bmi160_dev *dev)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b088      	sub	sp, #32
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t temp = 0;
 8003540:	2300      	movs	r3, #0
 8003542:	777b      	strb	r3, [r7, #29]
    uint8_t data = 0;
 8003544:	2300      	movs	r3, #0
 8003546:	77bb      	strb	r3, [r7, #30]
    uint8_t data_array[2] = { 0 };
 8003548:	2300      	movs	r3, #0
 800354a:	82bb      	strh	r3, [r7, #20]
    uint8_t count = 0;
 800354c:	2300      	movs	r3, #0
 800354e:	773b      	strb	r3, [r7, #28]
    uint8_t dur, shock, quiet, thres;

    /* Configure tap 0 register for tap shock,tap quiet duration
     * in case of single tap interrupt */
    rslt = bmi160_get_regs(BMI160_INT_TAP_0_ADDR, data_array, 2, dev);
 8003550:	f107 0114 	add.w	r1, r7, #20
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2202      	movs	r2, #2
 8003558:	2063      	movs	r0, #99	@ 0x63
 800355a:	f7fd fce3 	bl	8000f24 <bmi160_get_regs>
 800355e:	4603      	mov	r3, r0
 8003560:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMI160_OK)
 8003562:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d17a      	bne.n	8003660 <config_tap_param+0x12c>
    {
        data = data_array[count];
 800356a:	7f3b      	ldrb	r3, [r7, #28]
 800356c:	3320      	adds	r3, #32
 800356e:	443b      	add	r3, r7
 8003570:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003574:	77bb      	strb	r3, [r7, #30]
        if (int_config->int_type == BMI160_ACC_DOUBLE_TAP_INT)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	785b      	ldrb	r3, [r3, #1]
 800357a:	2b03      	cmp	r3, #3
 800357c:	d113      	bne.n	80035a6 <config_tap_param+0x72>
        {
            dur = (uint8_t)tap_int_cfg->tap_dur;
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	f3c3 13c2 	ubfx	r3, r3, #7, #3
 8003586:	b2db      	uxtb	r3, r3
 8003588:	76fb      	strb	r3, [r7, #27]
            temp = (data & ~BMI160_TAP_DUR_MASK);
 800358a:	7fbb      	ldrb	r3, [r7, #30]
 800358c:	f023 0307 	bic.w	r3, r3, #7
 8003590:	777b      	strb	r3, [r7, #29]

            /* Add tap duration data in case of
             * double tap interrupt */
            data = temp | (dur & BMI160_TAP_DUR_MASK);
 8003592:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003596:	f003 0307 	and.w	r3, r3, #7
 800359a:	b25a      	sxtb	r2, r3
 800359c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	b25b      	sxtb	r3, r3
 80035a4:	77bb      	strb	r3, [r7, #30]
        }

        shock = (uint8_t)tap_int_cfg->tap_shock;
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	76bb      	strb	r3, [r7, #26]
        temp = data & ~BMI160_TAP_SHOCK_DUR_MASK;
 80035b2:	7fbb      	ldrb	r3, [r7, #30]
 80035b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035b8:	777b      	strb	r3, [r7, #29]
        data = temp | ((shock << 6) & BMI160_TAP_SHOCK_DUR_MASK);
 80035ba:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80035be:	019b      	lsls	r3, r3, #6
 80035c0:	b25b      	sxtb	r3, r3
 80035c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035c6:	b25a      	sxtb	r2, r3
 80035c8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	b25b      	sxtb	r3, r3
 80035d0:	77bb      	strb	r3, [r7, #30]
        quiet = (uint8_t)tap_int_cfg->tap_quiet;
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	767b      	strb	r3, [r7, #25]
        temp = data & ~BMI160_TAP_QUIET_DUR_MASK;
 80035de:	7fbb      	ldrb	r3, [r7, #30]
 80035e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035e4:	777b      	strb	r3, [r7, #29]
        data = temp | ((quiet << 7) & BMI160_TAP_QUIET_DUR_MASK);
 80035e6:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80035ea:	01db      	lsls	r3, r3, #7
 80035ec:	b25a      	sxtb	r2, r3
 80035ee:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	b25b      	sxtb	r3, r3
 80035f6:	77bb      	strb	r3, [r7, #30]
        data_array[count++] = data;
 80035f8:	7f3b      	ldrb	r3, [r7, #28]
 80035fa:	1c5a      	adds	r2, r3, #1
 80035fc:	773a      	strb	r2, [r7, #28]
 80035fe:	3320      	adds	r3, #32
 8003600:	443b      	add	r3, r7
 8003602:	7fba      	ldrb	r2, [r7, #30]
 8003604:	f803 2c0c 	strb.w	r2, [r3, #-12]
        data = data_array[count];
 8003608:	7f3b      	ldrb	r3, [r7, #28]
 800360a:	3320      	adds	r3, #32
 800360c:	443b      	add	r3, r7
 800360e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003612:	77bb      	strb	r3, [r7, #30]
        thres = (uint8_t)tap_int_cfg->tap_thr;
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800361c:	b2db      	uxtb	r3, r3
 800361e:	763b      	strb	r3, [r7, #24]
        temp = data & ~BMI160_TAP_THRES_MASK;
 8003620:	7fbb      	ldrb	r3, [r7, #30]
 8003622:	f023 031f 	bic.w	r3, r3, #31
 8003626:	777b      	strb	r3, [r7, #29]
        data = temp | (thres & BMI160_TAP_THRES_MASK);
 8003628:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800362c:	f003 031f 	and.w	r3, r3, #31
 8003630:	b25a      	sxtb	r2, r3
 8003632:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003636:	4313      	orrs	r3, r2
 8003638:	b25b      	sxtb	r3, r3
 800363a:	77bb      	strb	r3, [r7, #30]
        data_array[count++] = data;
 800363c:	7f3b      	ldrb	r3, [r7, #28]
 800363e:	1c5a      	adds	r2, r3, #1
 8003640:	773a      	strb	r2, [r7, #28]
 8003642:	3320      	adds	r3, #32
 8003644:	443b      	add	r3, r7
 8003646:	7fba      	ldrb	r2, [r7, #30]
 8003648:	f803 2c0c 	strb.w	r2, [r3, #-12]

        /* TAP 0 and TAP 1 address lie consecutively,
         * hence writing data to respective registers at one go */

        /* Writing to Tap 0 and Tap 1 Address simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_TAP_0_ADDR, data_array, count, dev);
 800364c:	7f3b      	ldrb	r3, [r7, #28]
 800364e:	b29a      	uxth	r2, r3
 8003650:	f107 0114 	add.w	r1, r7, #20
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2063      	movs	r0, #99	@ 0x63
 8003658:	f7fd fc97 	bl	8000f8a <bmi160_set_regs>
 800365c:	4603      	mov	r3, r0
 800365e:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8003660:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3720      	adds	r7, #32
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <enable_orient_int>:

/*!
 * @brief This API enables the orient interrupt.
 */
static int8_t enable_orient_int(const struct bmi160_acc_orient_int_cfg *orient_int_cfg, const struct bmi160_dev *dev)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8003676:	2300      	movs	r3, #0
 8003678:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 800367a:	2300      	movs	r3, #0
 800367c:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 800367e:	f107 010d 	add.w	r1, r7, #13
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	2201      	movs	r2, #1
 8003686:	2050      	movs	r0, #80	@ 0x50
 8003688:	f7fd fc4c 	bl	8000f24 <bmi160_get_regs>
 800368c:	4603      	mov	r3, r0
 800368e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003690:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d11d      	bne.n	80036d4 <enable_orient_int+0x68>
    {
        temp = data & ~BMI160_ORIENT_INT_EN_MASK;
 8003698:	7b7b      	ldrb	r3, [r7, #13]
 800369a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800369e:	73bb      	strb	r3, [r7, #14]
        data = temp | ((orient_int_cfg->orient_en << 6) & BMI160_ORIENT_INT_EN_MASK);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	789b      	ldrb	r3, [r3, #2]
 80036a4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	b25b      	sxtb	r3, r3
 80036ac:	019b      	lsls	r3, r3, #6
 80036ae:	b25b      	sxtb	r3, r3
 80036b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036b4:	b25a      	sxtb	r2, r3
 80036b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	b25b      	sxtb	r3, r3
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 80036c2:	f107 010d 	add.w	r1, r7, #13
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	2201      	movs	r2, #1
 80036ca:	2050      	movs	r0, #80	@ 0x50
 80036cc:	f7fd fc5d 	bl	8000f8a <bmi160_set_regs>
 80036d0:	4603      	mov	r3, r0
 80036d2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80036d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <config_orient_int_settg>:
/*!
 * @brief This API configure the necessary setting of orientation interrupt.
 */
static int8_t config_orient_int_settg(const struct bmi160_acc_orient_int_cfg *orient_int_cfg,
                                      const struct bmi160_dev *dev)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80036ea:	2300      	movs	r3, #0
 80036ec:	73bb      	strb	r3, [r7, #14]
    uint8_t temp = 0;
 80036ee:	2300      	movs	r3, #0
 80036f0:	737b      	strb	r3, [r7, #13]
    uint8_t data_array[2] = { 0, 0 };
 80036f2:	2300      	movs	r3, #0
 80036f4:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_ORIENT registers */
    rslt = bmi160_get_regs(BMI160_INT_ORIENT_0_ADDR, data_array, 2, dev);
 80036f6:	f107 0108 	add.w	r1, r7, #8
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2202      	movs	r2, #2
 80036fe:	2065      	movs	r0, #101	@ 0x65
 8003700:	f7fd fc10 	bl	8000f24 <bmi160_get_regs>
 8003704:	4603      	mov	r3, r0
 8003706:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003708:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d174      	bne.n	80037fa <config_orient_int_settg+0x11a>
    {
        data = data_array[0];
 8003710:	7a3b      	ldrb	r3, [r7, #8]
 8003712:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_MODE_MASK;
 8003714:	7bbb      	ldrb	r3, [r7, #14]
 8003716:	f023 0303 	bic.w	r3, r3, #3
 800371a:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation mode */
        data = temp | ((orient_int_cfg->orient_mode) & BMI160_ORIENT_MODE_MASK);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003724:	b2db      	uxtb	r3, r3
 8003726:	461a      	mov	r2, r3
 8003728:	7b7b      	ldrb	r3, [r7, #13]
 800372a:	4313      	orrs	r3, r2
 800372c:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_BLOCK_MASK;
 800372e:	7bbb      	ldrb	r3, [r7, #14]
 8003730:	f023 030c 	bic.w	r3, r3, #12
 8003734:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation blocking */
        data = temp | ((orient_int_cfg->orient_blocking << 2) & BMI160_ORIENT_BLOCK_MASK);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800373e:	b2db      	uxtb	r3, r3
 8003740:	b25b      	sxtb	r3, r3
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	b25b      	sxtb	r3, r3
 8003746:	f003 030c 	and.w	r3, r3, #12
 800374a:	b25a      	sxtb	r2, r3
 800374c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003750:	4313      	orrs	r3, r2
 8003752:	b25b      	sxtb	r3, r3
 8003754:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_HYST_MASK;
 8003756:	7bbb      	ldrb	r3, [r7, #14]
 8003758:	f003 030f 	and.w	r3, r3, #15
 800375c:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation hysteresis */
        data = temp | ((orient_int_cfg->orient_hyst << 4) & BMI160_ORIENT_HYST_MASK);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003766:	b2db      	uxtb	r3, r3
 8003768:	b25b      	sxtb	r3, r3
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	b25a      	sxtb	r2, r3
 800376e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003772:	4313      	orrs	r3, r2
 8003774:	b25b      	sxtb	r3, r3
 8003776:	73bb      	strb	r3, [r7, #14]
        data_array[0] = data;
 8003778:	7bbb      	ldrb	r3, [r7, #14]
 800377a:	723b      	strb	r3, [r7, #8]
        data = data_array[1];
 800377c:	7a7b      	ldrb	r3, [r7, #9]
 800377e:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_THETA_MASK;
 8003780:	7bbb      	ldrb	r3, [r7, #14]
 8003782:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003786:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation threshold */
        data = temp | ((orient_int_cfg->orient_theta) & BMI160_ORIENT_THETA_MASK);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	785b      	ldrb	r3, [r3, #1]
 800378c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003790:	b2db      	uxtb	r3, r3
 8003792:	461a      	mov	r2, r3
 8003794:	7b7b      	ldrb	r3, [r7, #13]
 8003796:	4313      	orrs	r3, r2
 8003798:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_UD_ENABLE;
 800379a:	7bbb      	ldrb	r3, [r7, #14]
 800379c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037a0:	737b      	strb	r3, [r7, #13]

        /* Adding Orient_ud_en */
        data = temp | ((orient_int_cfg->orient_ud_en << 6) & BMI160_ORIENT_UD_ENABLE);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	785b      	ldrb	r3, [r3, #1]
 80037a6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	b25b      	sxtb	r3, r3
 80037ae:	019b      	lsls	r3, r3, #6
 80037b0:	b25b      	sxtb	r3, r3
 80037b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037b6:	b25a      	sxtb	r2, r3
 80037b8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80037bc:	4313      	orrs	r3, r2
 80037be:	b25b      	sxtb	r3, r3
 80037c0:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_AXES_EN_MASK;
 80037c2:	7bbb      	ldrb	r3, [r7, #14]
 80037c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80037c8:	737b      	strb	r3, [r7, #13]

        /* Adding axes_en */
        data = temp | ((orient_int_cfg->axes_ex << 7) & BMI160_AXES_EN_MASK);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	785b      	ldrb	r3, [r3, #1]
 80037ce:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	b25b      	sxtb	r3, r3
 80037d6:	01db      	lsls	r3, r3, #7
 80037d8:	b25a      	sxtb	r2, r3
 80037da:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80037de:	4313      	orrs	r3, r2
 80037e0:	b25b      	sxtb	r3, r3
 80037e2:	73bb      	strb	r3, [r7, #14]
        data_array[1] = data;
 80037e4:	7bbb      	ldrb	r3, [r7, #14]
 80037e6:	727b      	strb	r3, [r7, #9]

        /* Writing data to INT_ORIENT 0 and INT_ORIENT 1
         * registers simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_ORIENT_0_ADDR, data_array, 2, dev);
 80037e8:	f107 0108 	add.w	r1, r7, #8
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	2202      	movs	r2, #2
 80037f0:	2065      	movs	r0, #101	@ 0x65
 80037f2:	f7fd fbca 	bl	8000f8a <bmi160_set_regs>
 80037f6:	4603      	mov	r3, r0
 80037f8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80037fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <enable_flat_int>:

/*!
 * @brief This API enables the flat interrupt.
 */
static int8_t enable_flat_int(const struct bmi160_acc_flat_detect_int_cfg *flat_int, const struct bmi160_dev *dev)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b084      	sub	sp, #16
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
 800380e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8003810:	2300      	movs	r3, #0
 8003812:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8003814:	2300      	movs	r3, #0
 8003816:	73bb      	strb	r3, [r7, #14]

    /* Enable flat interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8003818:	f107 010d 	add.w	r1, r7, #13
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	2201      	movs	r2, #1
 8003820:	2050      	movs	r0, #80	@ 0x50
 8003822:	f7fd fb7f 	bl	8000f24 <bmi160_get_regs>
 8003826:	4603      	mov	r3, r0
 8003828:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800382a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d11a      	bne.n	8003868 <enable_flat_int+0x62>
    {
        temp = data & ~BMI160_FLAT_INT_EN_MASK;
 8003832:	7b7b      	ldrb	r3, [r7, #13]
 8003834:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003838:	73bb      	strb	r3, [r7, #14]
        data = temp | ((flat_int->flat_en << 7) & BMI160_FLAT_INT_EN_MASK);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	785b      	ldrb	r3, [r3, #1]
 800383e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003842:	b2db      	uxtb	r3, r3
 8003844:	b25b      	sxtb	r3, r3
 8003846:	01db      	lsls	r3, r3, #7
 8003848:	b25a      	sxtb	r2, r3
 800384a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800384e:	4313      	orrs	r3, r2
 8003850:	b25b      	sxtb	r3, r3
 8003852:	b2db      	uxtb	r3, r3
 8003854:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8003856:	f107 010d 	add.w	r1, r7, #13
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	2201      	movs	r2, #1
 800385e:	2050      	movs	r0, #80	@ 0x50
 8003860:	f7fd fb93 	bl	8000f8a <bmi160_set_regs>
 8003864:	4603      	mov	r3, r0
 8003866:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003868:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <config_flat_int_settg>:

/*!
 * @brief This API configure the necessary setting of flat interrupt.
 */
static int8_t config_flat_int_settg(const struct bmi160_acc_flat_detect_int_cfg *flat_int, const struct bmi160_dev *dev)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800387e:	2300      	movs	r3, #0
 8003880:	73bb      	strb	r3, [r7, #14]
    uint8_t temp = 0;
 8003882:	2300      	movs	r3, #0
 8003884:	737b      	strb	r3, [r7, #13]
    uint8_t data_array[2] = { 0, 0 };
 8003886:	2300      	movs	r3, #0
 8003888:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_FLAT register */
    rslt = bmi160_get_regs(BMI160_INT_FLAT_0_ADDR, data_array, 2, dev);
 800388a:	f107 0108 	add.w	r1, r7, #8
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	2202      	movs	r2, #2
 8003892:	2067      	movs	r0, #103	@ 0x67
 8003894:	f7fd fb46 	bl	8000f24 <bmi160_get_regs>
 8003898:	4603      	mov	r3, r0
 800389a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800389c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d13e      	bne.n	8003922 <config_flat_int_settg+0xae>
    {
        data = data_array[0];
 80038a4:	7a3b      	ldrb	r3, [r7, #8]
 80038a6:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_THRES_MASK;
 80038a8:	7bbb      	ldrb	r3, [r7, #14]
 80038aa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80038ae:	737b      	strb	r3, [r7, #13]

        /* Adding flat theta */
        data = temp | ((flat_int->flat_theta) & BMI160_FLAT_THRES_MASK);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	461a      	mov	r2, r3
 80038bc:	7b7b      	ldrb	r3, [r7, #13]
 80038be:	4313      	orrs	r3, r2
 80038c0:	73bb      	strb	r3, [r7, #14]
        data_array[0] = data;
 80038c2:	7bbb      	ldrb	r3, [r7, #14]
 80038c4:	723b      	strb	r3, [r7, #8]
        data = data_array[1];
 80038c6:	7a7b      	ldrb	r3, [r7, #9]
 80038c8:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_HOLD_TIME_MASK;
 80038ca:	7bbb      	ldrb	r3, [r7, #14]
 80038cc:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80038d0:	737b      	strb	r3, [r7, #13]

        /* Adding flat hold time */
        data = temp | ((flat_int->flat_hold_time << 4) & BMI160_FLAT_HOLD_TIME_MASK);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	785b      	ldrb	r3, [r3, #1]
 80038d6:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	b25b      	sxtb	r3, r3
 80038de:	011b      	lsls	r3, r3, #4
 80038e0:	b25b      	sxtb	r3, r3
 80038e2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80038e6:	b25a      	sxtb	r2, r3
 80038e8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	b25b      	sxtb	r3, r3
 80038f0:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_HYST_MASK;
 80038f2:	7bbb      	ldrb	r3, [r7, #14]
 80038f4:	f023 0307 	bic.w	r3, r3, #7
 80038f8:	737b      	strb	r3, [r7, #13]

        /* Adding flat hysteresis */
        data = temp | ((flat_int->flat_hy) & BMI160_FLAT_HYST_MASK);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	881b      	ldrh	r3, [r3, #0]
 80038fe:	f3c3 1382 	ubfx	r3, r3, #6, #3
 8003902:	b2db      	uxtb	r3, r3
 8003904:	461a      	mov	r2, r3
 8003906:	7b7b      	ldrb	r3, [r7, #13]
 8003908:	4313      	orrs	r3, r2
 800390a:	73bb      	strb	r3, [r7, #14]
        data_array[1] = data;
 800390c:	7bbb      	ldrb	r3, [r7, #14]
 800390e:	727b      	strb	r3, [r7, #9]

        /* Writing data to INT_FLAT 0 and INT_FLAT 1
         * registers simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_FLAT_0_ADDR, data_array, 2, dev);
 8003910:	f107 0108 	add.w	r1, r7, #8
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	2202      	movs	r2, #2
 8003918:	2067      	movs	r0, #103	@ 0x67
 800391a:	f7fd fb36 	bl	8000f8a <bmi160_set_regs>
 800391e:	4603      	mov	r3, r0
 8003920:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003922:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <enable_low_g_int>:

/*!
 * @brief This API enables the Low-g interrupt.
 */
static int8_t enable_low_g_int(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b084      	sub	sp, #16
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
 8003936:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8003938:	2300      	movs	r3, #0
 800393a:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 800393c:	2300      	movs	r3, #0
 800393e:	73bb      	strb	r3, [r7, #14]

    /* Enable low-g interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8003940:	f107 010d 	add.w	r1, r7, #13
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	2201      	movs	r2, #1
 8003948:	2051      	movs	r0, #81	@ 0x51
 800394a:	f7fd faeb 	bl	8000f24 <bmi160_get_regs>
 800394e:	4603      	mov	r3, r0
 8003950:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d11d      	bne.n	8003996 <enable_low_g_int+0x68>
    {
        temp = data & ~BMI160_LOW_G_INT_EN_MASK;
 800395a:	7b7b      	ldrb	r3, [r7, #13]
 800395c:	f023 0308 	bic.w	r3, r3, #8
 8003960:	73bb      	strb	r3, [r7, #14]
        data = temp | ((low_g_int->low_en << 3) & BMI160_LOW_G_INT_EN_MASK);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	789b      	ldrb	r3, [r3, #2]
 8003966:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800396a:	b2db      	uxtb	r3, r3
 800396c:	b25b      	sxtb	r3, r3
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	b25b      	sxtb	r3, r3
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	b25a      	sxtb	r2, r3
 8003978:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800397c:	4313      	orrs	r3, r2
 800397e:	b25b      	sxtb	r3, r3
 8003980:	b2db      	uxtb	r3, r3
 8003982:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8003984:	f107 010d 	add.w	r1, r7, #13
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	2201      	movs	r2, #1
 800398c:	2051      	movs	r0, #81	@ 0x51
 800398e:	f7fd fafc 	bl	8000f8a <bmi160_set_regs>
 8003992:	4603      	mov	r3, r0
 8003994:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003996:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <config_low_g_data_src>:
/*!
 * @brief This API configure the source of data(filter & pre-filter)
 * for low-g interrupt.
 */
static int8_t config_low_g_data_src(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b084      	sub	sp, #16
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
 80039aa:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80039ac:	2300      	movs	r3, #0
 80039ae:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80039b0:	2300      	movs	r3, #0
 80039b2:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 80039b4:	f107 010d 	add.w	r1, r7, #13
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	2201      	movs	r2, #1
 80039bc:	2058      	movs	r0, #88	@ 0x58
 80039be:	f7fd fab1 	bl	8000f24 <bmi160_get_regs>
 80039c2:	4603      	mov	r3, r0
 80039c4:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80039c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d11a      	bne.n	8003a04 <config_low_g_data_src+0x62>
    {
        temp = data & ~BMI160_LOW_HIGH_SRC_INT_MASK;
 80039ce:	7b7b      	ldrb	r3, [r7, #13]
 80039d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039d4:	73bb      	strb	r3, [r7, #14]
        data = temp | ((low_g_int->low_data_src << 7) & BMI160_LOW_HIGH_SRC_INT_MASK);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	789b      	ldrb	r3, [r3, #2]
 80039da:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	b25b      	sxtb	r3, r3
 80039e2:	01db      	lsls	r3, r3, #7
 80039e4:	b25a      	sxtb	r2, r3
 80039e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	b25b      	sxtb	r3, r3
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 80039f2:	f107 010d 	add.w	r1, r7, #13
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	2201      	movs	r2, #1
 80039fa:	2058      	movs	r0, #88	@ 0x58
 80039fc:	f7fd fac5 	bl	8000f8a <bmi160_set_regs>
 8003a00:	4603      	mov	r3, r0
 8003a02:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003a04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <config_low_g_int_settg>:

/*!
 * @brief This API configure the necessary setting of low-g interrupt.
 */
static int8_t config_low_g_int_settg(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[3] = { 0, 0, 0 };
 8003a1e:	f107 0308 	add.w	r3, r7, #8
 8003a22:	2100      	movs	r1, #0
 8003a24:	460a      	mov	r2, r1
 8003a26:	801a      	strh	r2, [r3, #0]
 8003a28:	460a      	mov	r2, r1
 8003a2a:	709a      	strb	r2, [r3, #2]

    /* Configuring INT_LOWHIGH register for low-g interrupt */
    rslt = bmi160_get_regs(BMI160_INT_LOWHIGH_2_ADDR, &data_array[2], 1, dev);
 8003a2c:	f107 0308 	add.w	r3, r7, #8
 8003a30:	1c99      	adds	r1, r3, #2
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	2201      	movs	r2, #1
 8003a36:	205c      	movs	r0, #92	@ 0x5c
 8003a38:	f7fd fa74 	bl	8000f24 <bmi160_get_regs>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003a40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d131      	bne.n	8003aac <config_low_g_int_settg+0x9c>
    {
        temp = data_array[2] & ~BMI160_LOW_G_HYST_MASK;
 8003a48:	7abb      	ldrb	r3, [r7, #10]
 8003a4a:	f023 0303 	bic.w	r3, r3, #3
 8003a4e:	73bb      	strb	r3, [r7, #14]

        /* Adding low-g hysteresis */
        data_array[2] = temp | (low_g_int->low_hyst & BMI160_LOW_G_HYST_MASK);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	789b      	ldrb	r3, [r3, #2]
 8003a54:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	7bbb      	ldrb	r3, [r7, #14]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	72bb      	strb	r3, [r7, #10]
        temp = data_array[2] & ~BMI160_LOW_G_LOW_MODE_MASK;
 8003a64:	7abb      	ldrb	r3, [r7, #10]
 8003a66:	f023 0304 	bic.w	r3, r3, #4
 8003a6a:	73bb      	strb	r3, [r7, #14]

        /* Adding low-mode */
        data_array[2] = temp | ((low_g_int->low_mode << 2) & BMI160_LOW_G_LOW_MODE_MASK);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	789b      	ldrb	r3, [r3, #2]
 8003a70:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	b25b      	sxtb	r3, r3
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	b25b      	sxtb	r3, r3
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	b25a      	sxtb	r2, r3
 8003a82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	b25b      	sxtb	r3, r3
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	72bb      	strb	r3, [r7, #10]

        /* Adding low-g threshold */
        data_array[1] = low_g_int->low_thres;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	785b      	ldrb	r3, [r3, #1]
 8003a92:	727b      	strb	r3, [r7, #9]

        /* Adding low-g interrupt delay */
        data_array[0] = low_g_int->low_dur;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	723b      	strb	r3, [r7, #8]

        /* Writing data to INT_LOWHIGH 0,1,2 registers simultaneously*/
        rslt = bmi160_set_regs(BMI160_INT_LOWHIGH_0_ADDR, data_array, 3, dev);
 8003a9a:	f107 0108 	add.w	r1, r7, #8
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2203      	movs	r2, #3
 8003aa2:	205a      	movs	r0, #90	@ 0x5a
 8003aa4:	f7fd fa71 	bl	8000f8a <bmi160_set_regs>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003aac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <enable_high_g_int>:

/*!
 * @brief This API enables the high-g interrupt.
 */
static int8_t enable_high_g_int(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg, const struct bmi160_dev *dev)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	73bb      	strb	r3, [r7, #14]

    /* Enable low-g interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8003aca:	f107 010d 	add.w	r1, r7, #13
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	2051      	movs	r0, #81	@ 0x51
 8003ad4:	f7fd fa26 	bl	8000f24 <bmi160_get_regs>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003adc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d140      	bne.n	8003b66 <enable_high_g_int+0xae>
    {
        /* Adding high-g X-axis */
        temp = data & ~BMI160_HIGH_G_X_INT_EN_MASK;
 8003ae4:	7b7b      	ldrb	r3, [r7, #13]
 8003ae6:	f023 0301 	bic.w	r3, r3, #1
 8003aea:	73bb      	strb	r3, [r7, #14]
        data = temp | (high_g_int_cfg->high_g_x & BMI160_HIGH_G_X_INT_EN_MASK);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	461a      	mov	r2, r3
 8003af8:	7bbb      	ldrb	r3, [r7, #14]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	737b      	strb	r3, [r7, #13]

        /* Adding high-g Y-axis */
        temp = data & ~BMI160_HIGH_G_Y_INT_EN_MASK;
 8003b00:	7b7b      	ldrb	r3, [r7, #13]
 8003b02:	f023 0302 	bic.w	r3, r3, #2
 8003b06:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_g_y << 1) & BMI160_HIGH_G_Y_INT_EN_MASK);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	b25b      	sxtb	r3, r3
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	b25b      	sxtb	r3, r3
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	b25a      	sxtb	r2, r3
 8003b1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	b25b      	sxtb	r3, r3
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	737b      	strb	r3, [r7, #13]

        /* Adding high-g Z-axis */
        temp = data & ~BMI160_HIGH_G_Z_INT_EN_MASK;
 8003b2a:	7b7b      	ldrb	r3, [r7, #13]
 8003b2c:	f023 0304 	bic.w	r3, r3, #4
 8003b30:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_g_z << 2) & BMI160_HIGH_G_Z_INT_EN_MASK);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	b25b      	sxtb	r3, r3
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	b25b      	sxtb	r3, r3
 8003b42:	f003 0304 	and.w	r3, r3, #4
 8003b46:	b25a      	sxtb	r2, r3
 8003b48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	b25b      	sxtb	r3, r3
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8003b54:	f107 010d 	add.w	r1, r7, #13
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	2051      	movs	r0, #81	@ 0x51
 8003b5e:	f7fd fa14 	bl	8000f8a <bmi160_set_regs>
 8003b62:	4603      	mov	r3, r0
 8003b64:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <config_high_g_data_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for high-g interrupt.
 */
static int8_t config_high_g_data_src(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg,
                                     const struct bmi160_dev *dev)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b084      	sub	sp, #16
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
 8003b7a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8003b80:	2300      	movs	r3, #0
 8003b82:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8003b84:	f107 010d 	add.w	r1, r7, #13
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	2058      	movs	r0, #88	@ 0x58
 8003b8e:	f7fd f9c9 	bl	8000f24 <bmi160_get_regs>
 8003b92:	4603      	mov	r3, r0
 8003b94:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d11a      	bne.n	8003bd4 <config_high_g_data_src+0x62>
    {
        temp = data & ~BMI160_LOW_HIGH_SRC_INT_MASK;
 8003b9e:	7b7b      	ldrb	r3, [r7, #13]
 8003ba0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ba4:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_data_src << 7) & BMI160_LOW_HIGH_SRC_INT_MASK);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	b25b      	sxtb	r3, r3
 8003bb2:	01db      	lsls	r3, r3, #7
 8003bb4:	b25a      	sxtb	r2, r3
 8003bb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	b25b      	sxtb	r3, r3
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8003bc2:	f107 010d 	add.w	r1, r7, #13
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	2058      	movs	r0, #88	@ 0x58
 8003bcc:	f7fd f9dd 	bl	8000f8a <bmi160_set_regs>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003bd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <config_high_g_int_settg>:
/*!
 * @brief This API configure the necessary setting of high-g interrupt.
 */
static int8_t config_high_g_int_settg(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg,
                                      const struct bmi160_dev *dev)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8003bea:	2300      	movs	r3, #0
 8003bec:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[3] = { 0, 0, 0 };
 8003bee:	f107 0308 	add.w	r3, r7, #8
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	460a      	mov	r2, r1
 8003bf6:	801a      	strh	r2, [r3, #0]
 8003bf8:	460a      	mov	r2, r1
 8003bfa:	709a      	strb	r2, [r3, #2]

    rslt = bmi160_get_regs(BMI160_INT_LOWHIGH_2_ADDR, &data_array[0], 1, dev);
 8003bfc:	f107 0108 	add.w	r1, r7, #8
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	2201      	movs	r2, #1
 8003c04:	205c      	movs	r0, #92	@ 0x5c
 8003c06:	f7fd f98d 	bl	8000f24 <bmi160_get_regs>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d120      	bne.n	8003c58 <config_high_g_int_settg+0x78>
    {
        temp = data_array[0] & ~BMI160_HIGH_G_HYST_MASK;
 8003c16:	7a3b      	ldrb	r3, [r7, #8]
 8003c18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c1c:	73bb      	strb	r3, [r7, #14]

        /* Adding high-g hysteresis */
        data_array[0] = temp | ((high_g_int_cfg->high_hy << 6) & BMI160_HIGH_G_HYST_MASK);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	b25b      	sxtb	r3, r3
 8003c2a:	019b      	lsls	r3, r3, #6
 8003c2c:	b25a      	sxtb	r2, r3
 8003c2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	b25b      	sxtb	r3, r3
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	723b      	strb	r3, [r7, #8]

        /* Adding high-g duration */
        data_array[1] = high_g_int_cfg->high_dur;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	789b      	ldrb	r3, [r3, #2]
 8003c3e:	727b      	strb	r3, [r7, #9]

        /* Adding high-g threshold */
        data_array[2] = high_g_int_cfg->high_thres;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	785b      	ldrb	r3, [r3, #1]
 8003c44:	72bb      	strb	r3, [r7, #10]
        rslt = bmi160_set_regs(BMI160_INT_LOWHIGH_2_ADDR, data_array, 3, dev);
 8003c46:	f107 0108 	add.w	r1, r7, #8
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2203      	movs	r2, #3
 8003c4e:	205c      	movs	r0, #92	@ 0x5c
 8003c50:	f7fd f99b 	bl	8000f8a <bmi160_set_regs>
 8003c54:	4603      	mov	r3, r0
 8003c56:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003c58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <config_int_out_ctrl>:

/*!
 * @brief This API configure the behavioural setting of interrupt pin.
 */
static int8_t config_int_out_ctrl(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	75bb      	strb	r3, [r7, #22]
    uint8_t data = 0;
 8003c72:	2300      	movs	r3, #0
 8003c74:	73fb      	strb	r3, [r7, #15]

    /* Configuration of output interrupt signals on pins INT1 and INT2 are
     * done in BMI160_INT_OUT_CTRL_ADDR register*/
    rslt = bmi160_get_regs(BMI160_INT_OUT_CTRL_ADDR, &data, 1, dev);
 8003c76:	f107 010f 	add.w	r1, r7, #15
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	2053      	movs	r0, #83	@ 0x53
 8003c80:	f7fd f950 	bl	8000f24 <bmi160_get_regs>
 8003c84:	4603      	mov	r3, r0
 8003c86:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8003c88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f040 80af 	bne.w	8003df0 <config_int_out_ctrl+0x18c>
    {
        /* updating the interrupt pin structure to local structure */
        const struct bmi160_int_pin_settg *intr_pin_sett = &(int_config->int_pin_settg);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	3302      	adds	r3, #2
 8003c96:	613b      	str	r3, [r7, #16]

        /* Configuring channel 1 */
        if (int_config->int_channel == BMI160_INT_CHANNEL_1)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d14d      	bne.n	8003d3c <config_int_out_ctrl+0xd8>
        {
            /* Output enable */
            temp = data & ~BMI160_INT1_OUTPUT_EN_MASK;
 8003ca0:	7bfb      	ldrb	r3, [r7, #15]
 8003ca2:	f023 0308 	bic.w	r3, r3, #8
 8003ca6:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_en << 3) & BMI160_INT1_OUTPUT_EN_MASK);
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	b25b      	sxtb	r3, r3
 8003cb4:	00db      	lsls	r3, r3, #3
 8003cb6:	b25b      	sxtb	r3, r3
 8003cb8:	f003 0308 	and.w	r3, r3, #8
 8003cbc:	b25a      	sxtb	r2, r3
 8003cbe:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	b25b      	sxtb	r3, r3
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	73fb      	strb	r3, [r7, #15]

            /* Output mode */
            temp = data & ~BMI160_INT1_OUTPUT_MODE_MASK;
 8003cca:	7bfb      	ldrb	r3, [r7, #15]
 8003ccc:	f023 0304 	bic.w	r3, r3, #4
 8003cd0:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_mode << 2) & BMI160_INT1_OUTPUT_MODE_MASK);
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	b25b      	sxtb	r3, r3
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	b25b      	sxtb	r3, r3
 8003ce2:	f003 0304 	and.w	r3, r3, #4
 8003ce6:	b25a      	sxtb	r2, r3
 8003ce8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	b25b      	sxtb	r3, r3
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	73fb      	strb	r3, [r7, #15]

            /* Output type */
            temp = data & ~BMI160_INT1_OUTPUT_TYPE_MASK;
 8003cf4:	7bfb      	ldrb	r3, [r7, #15]
 8003cf6:	f023 0302 	bic.w	r3, r3, #2
 8003cfa:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_type << 1) & BMI160_INT1_OUTPUT_TYPE_MASK);
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	b25b      	sxtb	r3, r3
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	b25b      	sxtb	r3, r3
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	b25a      	sxtb	r2, r3
 8003d12:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	b25b      	sxtb	r3, r3
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	73fb      	strb	r3, [r7, #15]

            /* edge control */
            temp = data & ~BMI160_INT1_EDGE_CTRL_MASK;
 8003d1e:	7bfb      	ldrb	r3, [r7, #15]
 8003d20:	f023 0301 	bic.w	r3, r3, #1
 8003d24:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->edge_ctrl) & BMI160_INT1_EDGE_CTRL_MASK);
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	461a      	mov	r2, r3
 8003d32:	7dbb      	ldrb	r3, [r7, #22]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	73fb      	strb	r3, [r7, #15]
 8003d3a:	e050      	b.n	8003dde <config_int_out_ctrl+0x17a>
        }
        else
        {
            /* Configuring channel 2 */
            /* Output enable */
            temp = data & ~BMI160_INT2_OUTPUT_EN_MASK;
 8003d3c:	7bfb      	ldrb	r3, [r7, #15]
 8003d3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d42:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_en << 7) & BMI160_INT2_OUTPUT_EN_MASK);
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	b25b      	sxtb	r3, r3
 8003d50:	01db      	lsls	r3, r3, #7
 8003d52:	b25a      	sxtb	r2, r3
 8003d54:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	b25b      	sxtb	r3, r3
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	73fb      	strb	r3, [r7, #15]

            /* Output mode */
            temp = data & ~BMI160_INT2_OUTPUT_MODE_MASK;
 8003d60:	7bfb      	ldrb	r3, [r7, #15]
 8003d62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d66:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_mode << 6) & BMI160_INT2_OUTPUT_MODE_MASK);
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	b25b      	sxtb	r3, r3
 8003d74:	019b      	lsls	r3, r3, #6
 8003d76:	b25b      	sxtb	r3, r3
 8003d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d7c:	b25a      	sxtb	r2, r3
 8003d7e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	b25b      	sxtb	r3, r3
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	73fb      	strb	r3, [r7, #15]

            /* Output type */
            temp = data & ~BMI160_INT2_OUTPUT_TYPE_MASK;
 8003d8a:	7bfb      	ldrb	r3, [r7, #15]
 8003d8c:	f023 0320 	bic.w	r3, r3, #32
 8003d90:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_type << 5) & BMI160_INT2_OUTPUT_TYPE_MASK);
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	b25b      	sxtb	r3, r3
 8003d9e:	015b      	lsls	r3, r3, #5
 8003da0:	b25b      	sxtb	r3, r3
 8003da2:	f003 0320 	and.w	r3, r3, #32
 8003da6:	b25a      	sxtb	r2, r3
 8003da8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	b25b      	sxtb	r3, r3
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	73fb      	strb	r3, [r7, #15]

            /* edge control */
            temp = data & ~BMI160_INT2_EDGE_CTRL_MASK;
 8003db4:	7bfb      	ldrb	r3, [r7, #15]
 8003db6:	f023 0310 	bic.w	r3, r3, #16
 8003dba:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->edge_ctrl << 4) & BMI160_INT2_EDGE_CTRL_MASK);
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	b25b      	sxtb	r3, r3
 8003dc8:	011b      	lsls	r3, r3, #4
 8003dca:	b25b      	sxtb	r3, r3
 8003dcc:	f003 0310 	and.w	r3, r3, #16
 8003dd0:	b25a      	sxtb	r2, r3
 8003dd2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	b25b      	sxtb	r3, r3
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	73fb      	strb	r3, [r7, #15]
        }

        rslt = bmi160_set_regs(BMI160_INT_OUT_CTRL_ADDR, &data, 1, dev);
 8003dde:	f107 010f 	add.w	r1, r7, #15
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2201      	movs	r2, #1
 8003de6:	2053      	movs	r0, #83	@ 0x53
 8003de8:	f7fd f8cf 	bl	8000f8a <bmi160_set_regs>
 8003dec:	4603      	mov	r3, r0
 8003dee:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003df0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <config_int_latch>:

/*!
 * @brief This API configure the mode(input enable, latch or non-latch) of interrupt pin.
 */
static int8_t config_int_latch(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8003e06:	2300      	movs	r3, #0
 8003e08:	75bb      	strb	r3, [r7, #22]
    uint8_t data = 0;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	73fb      	strb	r3, [r7, #15]

    /* Configuration of latch on pins INT1 and INT2 are done in
     * BMI160_INT_LATCH_ADDR register*/
    rslt = bmi160_get_regs(BMI160_INT_LATCH_ADDR, &data, 1, dev);
 8003e0e:	f107 010f 	add.w	r1, r7, #15
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	2201      	movs	r2, #1
 8003e16:	2054      	movs	r0, #84	@ 0x54
 8003e18:	f7fd f884 	bl	8000f24 <bmi160_get_regs>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8003e20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d148      	bne.n	8003eba <config_int_latch+0xbe>
    {
        /* updating the interrupt pin structure to local structure */
        const struct bmi160_int_pin_settg *intr_pin_sett = &(int_config->int_pin_settg);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3302      	adds	r3, #2
 8003e2c:	613b      	str	r3, [r7, #16]
        if (int_config->int_channel == BMI160_INT_CHANNEL_1)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d115      	bne.n	8003e62 <config_int_latch+0x66>
        {
            /* Configuring channel 1 */
            /* Input enable */
            temp = data & ~BMI160_INT1_INPUT_EN_MASK;
 8003e36:	7bfb      	ldrb	r3, [r7, #15]
 8003e38:	f023 0310 	bic.w	r3, r3, #16
 8003e3c:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->input_en << 4) & BMI160_INT1_INPUT_EN_MASK);
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	b25b      	sxtb	r3, r3
 8003e4a:	011b      	lsls	r3, r3, #4
 8003e4c:	b25b      	sxtb	r3, r3
 8003e4e:	f003 0310 	and.w	r3, r3, #16
 8003e52:	b25a      	sxtb	r2, r3
 8003e54:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	b25b      	sxtb	r3, r3
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	73fb      	strb	r3, [r7, #15]
 8003e60:	e014      	b.n	8003e8c <config_int_latch+0x90>
        }
        else
        {
            /* Configuring channel 2 */
            /* Input enable */
            temp = data & ~BMI160_INT2_INPUT_EN_MASK;
 8003e62:	7bfb      	ldrb	r3, [r7, #15]
 8003e64:	f023 0320 	bic.w	r3, r3, #32
 8003e68:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->input_en << 5) & BMI160_INT2_INPUT_EN_MASK);
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	b25b      	sxtb	r3, r3
 8003e76:	015b      	lsls	r3, r3, #5
 8003e78:	b25b      	sxtb	r3, r3
 8003e7a:	f003 0320 	and.w	r3, r3, #32
 8003e7e:	b25a      	sxtb	r2, r3
 8003e80:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	b25b      	sxtb	r3, r3
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	73fb      	strb	r3, [r7, #15]

        /* In case of latch interrupt,update the latch duration */

        /* Latching holds the interrupt for the amount of latch
         * duration time */
        temp = data & ~BMI160_INT_LATCH_MASK;
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
 8003e8e:	f023 030f 	bic.w	r3, r3, #15
 8003e92:	75bb      	strb	r3, [r7, #22]
        data = temp | (intr_pin_sett->latch_dur & BMI160_INT_LATCH_MASK);
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	7dbb      	ldrb	r3, [r7, #22]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	73fb      	strb	r3, [r7, #15]

        /* OUT_CTRL_INT and LATCH_INT address lie consecutively,
         * hence writing data to respective registers at one go */
        rslt = bmi160_set_regs(BMI160_INT_LATCH_ADDR, &data, 1, dev);
 8003ea8:	f107 010f 	add.w	r1, r7, #15
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	2054      	movs	r0, #84	@ 0x54
 8003eb2:	f7fd f86a 	bl	8000f8a <bmi160_set_regs>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003eba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <set_fifo_full_int>:
 *  @brief This API sets FIFO full interrupt of the sensor.This interrupt
 *  occurs when the FIFO is full and the next full data sample would cause
 *  a FIFO overflow, which may delete the old samples.
 */
static int8_t set_fifo_full_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b084      	sub	sp, #16
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
 8003ece:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <set_fifo_full_int+0x1c>
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d102      	bne.n	8003ee8 <set_fifo_full_int+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8003ee2:	23ff      	movs	r3, #255	@ 0xff
 8003ee4:	73fb      	strb	r3, [r7, #15]
 8003ee6:	e019      	b.n	8003f1c <set_fifo_full_int+0x56>
    }
    else
    {
        /*enable the fifo full interrupt */
        rslt = enable_fifo_full_int(int_config, dev);
 8003ee8:	6839      	ldr	r1, [r7, #0]
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f81c 	bl	8003f28 <enable_fifo_full_int>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8003ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10f      	bne.n	8003f1c <set_fifo_full_int+0x56>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8003efc:	6839      	ldr	r1, [r7, #0]
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7fd fdd0 	bl	8001aa4 <set_intr_pin_config>
 8003f04:	4603      	mov	r3, r0
 8003f06:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8003f08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d105      	bne.n	8003f1c <set_fifo_full_int+0x56>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 8003f10:	6839      	ldr	r1, [r7, #0]
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7fe fde8 	bl	8002ae8 <map_hardware_interrupt>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8003f1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <enable_fifo_full_int>:

/*!
 * @brief This enable the FIFO full interrupt engine.
 */
static int8_t enable_fifo_full_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8003f32:	2300      	movs	r3, #0
 8003f34:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8003f36:	f107 010e 	add.w	r1, r7, #14
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	2051      	movs	r0, #81	@ 0x51
 8003f40:	f7fc fff0 	bl	8000f24 <bmi160_get_regs>
 8003f44:	4603      	mov	r3, r0
 8003f46:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003f48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d11c      	bne.n	8003f8a <enable_fifo_full_int+0x62>
    {
        data = BMI160_SET_BITS(data, BMI160_FIFO_FULL_INT, int_config->fifo_full_int_en);
 8003f50:	7bbb      	ldrb	r3, [r7, #14]
 8003f52:	b25b      	sxtb	r3, r3
 8003f54:	f023 0320 	bic.w	r3, r3, #32
 8003f58:	b25a      	sxtb	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	7a1b      	ldrb	r3, [r3, #8]
 8003f5e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	b25b      	sxtb	r3, r3
 8003f66:	015b      	lsls	r3, r3, #5
 8003f68:	b25b      	sxtb	r3, r3
 8003f6a:	f003 0320 	and.w	r3, r3, #32
 8003f6e:	b25b      	sxtb	r3, r3
 8003f70:	4313      	orrs	r3, r2
 8003f72:	b25b      	sxtb	r3, r3
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	73bb      	strb	r3, [r7, #14]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8003f78:	f107 010e 	add.w	r1, r7, #14
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	2051      	movs	r0, #81	@ 0x51
 8003f82:	f7fd f802 	bl	8000f8a <bmi160_set_regs>
 8003f86:	4603      	mov	r3, r0
 8003f88:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <set_fifo_watermark_int>:
 *  @brief This API sets FIFO watermark interrupt of the sensor.The FIFO
 *  watermark interrupt is fired, when the FIFO fill level is above a fifo
 *  watermark.
 */
static int8_t set_fifo_watermark_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b084      	sub	sp, #16
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
 8003f9e:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->delay_ms == NULL))
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <set_fifo_watermark_int+0x1c>
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d102      	bne.n	8003fb8 <set_fifo_watermark_int+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8003fb2:	23ff      	movs	r3, #255	@ 0xff
 8003fb4:	73fb      	strb	r3, [r7, #15]
 8003fb6:	e019      	b.n	8003fec <set_fifo_watermark_int+0x56>
    }
    else
    {
        /* Enable fifo-watermark interrupt in Int Enable 1 register */
        rslt = enable_fifo_wtm_int(int_config, dev);
 8003fb8:	6839      	ldr	r1, [r7, #0]
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f81c 	bl	8003ff8 <enable_fifo_wtm_int>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8003fc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10f      	bne.n	8003fec <set_fifo_watermark_int+0x56>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8003fcc:	6839      	ldr	r1, [r7, #0]
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7fd fd68 	bl	8001aa4 <set_intr_pin_config>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8003fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d105      	bne.n	8003fec <set_fifo_watermark_int+0x56>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 8003fe0:	6839      	ldr	r1, [r7, #0]
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7fe fd80 	bl	8002ae8 <map_hardware_interrupt>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8003fec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <enable_fifo_wtm_int>:

/*!
 * @brief This enable the FIFO watermark interrupt engine.
 */
static int8_t enable_fifo_wtm_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8004002:	2300      	movs	r3, #0
 8004004:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8004006:	f107 010e 	add.w	r1, r7, #14
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2201      	movs	r2, #1
 800400e:	2051      	movs	r0, #81	@ 0x51
 8004010:	f7fc ff88 	bl	8000f24 <bmi160_get_regs>
 8004014:	4603      	mov	r3, r0
 8004016:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8004018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d11c      	bne.n	800405a <enable_fifo_wtm_int+0x62>
    {
        data = BMI160_SET_BITS(data, BMI160_FIFO_WTM_INT, int_config->fifo_wtm_int_en);
 8004020:	7bbb      	ldrb	r3, [r7, #14]
 8004022:	b25b      	sxtb	r3, r3
 8004024:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004028:	b25a      	sxtb	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	7a1b      	ldrb	r3, [r3, #8]
 800402e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004032:	b2db      	uxtb	r3, r3
 8004034:	b25b      	sxtb	r3, r3
 8004036:	019b      	lsls	r3, r3, #6
 8004038:	b25b      	sxtb	r3, r3
 800403a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800403e:	b25b      	sxtb	r3, r3
 8004040:	4313      	orrs	r3, r2
 8004042:	b25b      	sxtb	r3, r3
 8004044:	b2db      	uxtb	r3, r3
 8004046:	73bb      	strb	r3, [r7, #14]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8004048:	f107 010e 	add.w	r1, r7, #14
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	2201      	movs	r2, #1
 8004050:	2051      	movs	r0, #81	@ 0x51
 8004052:	f7fc ff9a 	bl	8000f8a <bmi160_set_regs>
 8004056:	4603      	mov	r3, r0
 8004058:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800405a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <get_foc_status>:

/*!
 *  @brief This API is used to get the FOC status from the sensor
 */
static int8_t get_foc_status(uint8_t *foc_status, struct bmi160_dev const *dev)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b084      	sub	sp, #16
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
 800406e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;

    /* Read the FOC status from sensor */
    rslt = bmi160_get_regs(BMI160_STATUS_ADDR, &data, 1, dev);
 8004070:	f107 010e 	add.w	r1, r7, #14
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	2201      	movs	r2, #1
 8004078:	201b      	movs	r0, #27
 800407a:	f7fc ff53 	bl	8000f24 <bmi160_get_regs>
 800407e:	4603      	mov	r3, r0
 8004080:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8004082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d107      	bne.n	800409a <get_foc_status+0x34>
    {
        /* Get the foc_status bit */
        *foc_status = BMI160_GET_BITS(data, BMI160_FOC_STATUS);
 800408a:	7bbb      	ldrb	r3, [r7, #14]
 800408c:	10db      	asrs	r3, r3, #3
 800408e:	b2db      	uxtb	r3, r3
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	b2da      	uxtb	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800409a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <configure_offset_enable>:

/*!
 *  @brief This API is used to configure the offset enable bits in the sensor
 */
static int8_t configure_offset_enable(const struct bmi160_foc_conf *foc_conf, struct bmi160_dev const *dev)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b084      	sub	sp, #16
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
 80040ae:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80040b0:	6838      	ldr	r0, [r7, #0]
 80040b2:	f7fd fd12 	bl	8001ada <null_ptr_check>
 80040b6:	4603      	mov	r3, r0
 80040b8:	73fb      	strb	r3, [r7, #15]
    if (rslt != BMI160_OK)
 80040ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d002      	beq.n	80040c8 <configure_offset_enable+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 80040c2:	23ff      	movs	r3, #255	@ 0xff
 80040c4:	73fb      	strb	r3, [r7, #15]
 80040c6:	e034      	b.n	8004132 <configure_offset_enable+0x8c>
    }
    else
    {
        /* Read the FOC config from the sensor */
        rslt = bmi160_get_regs(BMI160_OFFSET_CONF_ADDR, &data, 1, dev);
 80040c8:	f107 010e 	add.w	r1, r7, #14
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	2201      	movs	r2, #1
 80040d0:	2077      	movs	r0, #119	@ 0x77
 80040d2:	f7fc ff27 	bl	8000f24 <bmi160_get_regs>
 80040d6:	4603      	mov	r3, r0
 80040d8:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80040da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d127      	bne.n	8004132 <configure_offset_enable+0x8c>
        {
            /* Set the offset enable/disable for gyro */
            data = BMI160_SET_BITS(data, BMI160_GYRO_OFFSET_EN, foc_conf->gyro_off_en);
 80040e2:	7bbb      	ldrb	r3, [r7, #14]
 80040e4:	b25b      	sxtb	r3, r3
 80040e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040ea:	b25a      	sxtb	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	795b      	ldrb	r3, [r3, #5]
 80040f0:	b25b      	sxtb	r3, r3
 80040f2:	01db      	lsls	r3, r3, #7
 80040f4:	b25b      	sxtb	r3, r3
 80040f6:	4313      	orrs	r3, r2
 80040f8:	b25b      	sxtb	r3, r3
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	73bb      	strb	r3, [r7, #14]

            /* Set the offset enable/disable for accel */
            data = BMI160_SET_BITS(data, BMI160_ACCEL_OFFSET_EN, foc_conf->acc_off_en);
 80040fe:	7bbb      	ldrb	r3, [r7, #14]
 8004100:	b25b      	sxtb	r3, r3
 8004102:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004106:	b25a      	sxtb	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	791b      	ldrb	r3, [r3, #4]
 800410c:	b25b      	sxtb	r3, r3
 800410e:	019b      	lsls	r3, r3, #6
 8004110:	b25b      	sxtb	r3, r3
 8004112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004116:	b25b      	sxtb	r3, r3
 8004118:	4313      	orrs	r3, r2
 800411a:	b25b      	sxtb	r3, r3
 800411c:	b2db      	uxtb	r3, r3
 800411e:	73bb      	strb	r3, [r7, #14]

            /* Set the offset config in the sensor */
            rslt = bmi160_set_regs(BMI160_OFFSET_CONF_ADDR, &data, 1, dev);
 8004120:	f107 010e 	add.w	r1, r7, #14
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	2201      	movs	r2, #1
 8004128:	2077      	movs	r0, #119	@ 0x77
 800412a:	f7fc ff2e 	bl	8000f8a <bmi160_set_regs>
 800412e:	4603      	mov	r3, r0
 8004130:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8004132:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004136:	4618      	mov	r0, r3
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <trigger_foc>:

static int8_t trigger_foc(struct bmi160_offsets *offset, struct bmi160_dev const *dev)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b088      	sub	sp, #32
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
 8004146:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t foc_status = BMI160_ENABLE;
 8004148:	2301      	movs	r3, #1
 800414a:	777b      	strb	r3, [r7, #29]
    uint8_t cmd = BMI160_START_FOC_CMD;
 800414c:	2303      	movs	r3, #3
 800414e:	773b      	strb	r3, [r7, #28]
    uint8_t timeout = 0;
 8004150:	2300      	movs	r3, #0
 8004152:	77bb      	strb	r3, [r7, #30]
    uint8_t data_array[20];

    /* Start the FOC process */
    rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &cmd, 1, dev);
 8004154:	f107 011c 	add.w	r1, r7, #28
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	2201      	movs	r2, #1
 800415c:	207e      	movs	r0, #126	@ 0x7e
 800415e:	f7fc ff14 	bl	8000f8a <bmi160_set_regs>
 8004162:	4603      	mov	r3, r0
 8004164:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMI160_OK)
 8004166:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d141      	bne.n	80041f2 <trigger_foc+0xb4>
    {
        /* Check the FOC status*/
        rslt = get_foc_status(&foc_status, dev);
 800416e:	f107 031d 	add.w	r3, r7, #29
 8004172:	6839      	ldr	r1, [r7, #0]
 8004174:	4618      	mov	r0, r3
 8004176:	f7ff ff76 	bl	8004066 <get_foc_status>
 800417a:	4603      	mov	r3, r0
 800417c:	77fb      	strb	r3, [r7, #31]

        if ((rslt != BMI160_OK) || (foc_status != BMI160_ENABLE))
 800417e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d112      	bne.n	80041ac <trigger_foc+0x6e>
 8004186:	7f7b      	ldrb	r3, [r7, #29]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d025      	beq.n	80041d8 <trigger_foc+0x9a>
        {
            while ((foc_status != BMI160_ENABLE) && (timeout < 32))
 800418c:	e00e      	b.n	80041ac <trigger_foc+0x6e>
            {
                /* Maximum time of 250ms is given in 10
                 * steps of 25ms each - 250ms refer datasheet 2.9.1 */
                dev->delay_ms(25);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004192:	2019      	movs	r0, #25
 8004194:	4798      	blx	r3

                /* Check the FOC status*/
                rslt = get_foc_status(&foc_status, dev);
 8004196:	f107 031d 	add.w	r3, r7, #29
 800419a:	6839      	ldr	r1, [r7, #0]
 800419c:	4618      	mov	r0, r3
 800419e:	f7ff ff62 	bl	8004066 <get_foc_status>
 80041a2:	4603      	mov	r3, r0
 80041a4:	77fb      	strb	r3, [r7, #31]
                timeout++;
 80041a6:	7fbb      	ldrb	r3, [r7, #30]
 80041a8:	3301      	adds	r3, #1
 80041aa:	77bb      	strb	r3, [r7, #30]
            while ((foc_status != BMI160_ENABLE) && (timeout < 32))
 80041ac:	7f7b      	ldrb	r3, [r7, #29]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d002      	beq.n	80041b8 <trigger_foc+0x7a>
 80041b2:	7fbb      	ldrb	r3, [r7, #30]
 80041b4:	2b1f      	cmp	r3, #31
 80041b6:	d9ea      	bls.n	800418e <trigger_foc+0x50>
            }

            if ((rslt == BMI160_OK) && (foc_status == BMI160_ENABLE))
 80041b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d109      	bne.n	80041d4 <trigger_foc+0x96>
 80041c0:	7f7b      	ldrb	r3, [r7, #29]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d106      	bne.n	80041d4 <trigger_foc+0x96>
            {
                /* Get offset values from sensor */
                rslt = bmi160_get_offsets(offset, dev);
 80041c6:	6839      	ldr	r1, [r7, #0]
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f7fd f99b 	bl	8001504 <bmi160_get_offsets>
 80041ce:	4603      	mov	r3, r0
 80041d0:	77fb      	strb	r3, [r7, #31]
 80041d2:	e001      	b.n	80041d8 <trigger_foc+0x9a>
            }
            else
            {
                /* FOC failure case */
                rslt = BMI160_E_FOC_FAILURE;
 80041d4:	23f5      	movs	r3, #245	@ 0xf5
 80041d6:	77fb      	strb	r3, [r7, #31]
            }
        }

        if (rslt == BMI160_OK)
 80041d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d108      	bne.n	80041f2 <trigger_foc+0xb4>
        {
            /* Read registers 0x04-0x17 */
            rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 20, dev);
 80041e0:	f107 0108 	add.w	r1, r7, #8
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	2214      	movs	r2, #20
 80041e8:	200c      	movs	r0, #12
 80041ea:	f7fc fe9b 	bl	8000f24 <bmi160_get_regs>
 80041ee:	4603      	mov	r3, r0
 80041f0:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 80041f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3720      	adds	r7, #32
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
	...

08004200 <BMI160_init>:
uint8_t BMI160_Ascale_bit, BMI160_Gscale_bit;

float bmi160_aRes, bmi160_gRes;

int8_t BMI160_init(BMI160_t *DataStruct)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]

	int8_t rslt;

	set_bmi160_Ares();
 8004208:	f000 f970 	bl	80044ec <set_bmi160_Ares>
	set_bmi160_Gres();
 800420c:	f000 f99a 	bl	8004544 <set_bmi160_Gres>
	get_bmi160_Ares();
 8004210:	f000 f9ca 	bl	80045a8 <get_bmi160_Ares>
	get_bmi160_Gres();
 8004214:	f000 f9fe 	bl	8004614 <get_bmi160_Gres>

    sensor.id = 0;
 8004218:	4b52      	ldr	r3, [pc, #328]	@ (8004364 <BMI160_init+0x164>)
 800421a:	2200      	movs	r2, #0
 800421c:	705a      	strb	r2, [r3, #1]
    sensor.intf = BMI160_I2C_INTF;
 800421e:	4b51      	ldr	r3, [pc, #324]	@ (8004364 <BMI160_init+0x164>)
 8004220:	2200      	movs	r2, #0
 8004222:	709a      	strb	r2, [r3, #2]
    sensor.read = SensorAPI_I2Cx_Read;
 8004224:	4b4f      	ldr	r3, [pc, #316]	@ (8004364 <BMI160_init+0x164>)
 8004226:	4a50      	ldr	r2, [pc, #320]	@ (8004368 <BMI160_init+0x168>)
 8004228:	61da      	str	r2, [r3, #28]
    sensor.write = SensorAPI_I2Cx_Write;
 800422a:	4b4e      	ldr	r3, [pc, #312]	@ (8004364 <BMI160_init+0x164>)
 800422c:	4a4f      	ldr	r2, [pc, #316]	@ (800436c <BMI160_init+0x16c>)
 800422e:	621a      	str	r2, [r3, #32]
    sensor.delay_ms = HAL_Delay;
 8004230:	4b4c      	ldr	r3, [pc, #304]	@ (8004364 <BMI160_init+0x164>)
 8004232:	4a4f      	ldr	r2, [pc, #316]	@ (8004370 <BMI160_init+0x170>)
 8004234:	625a      	str	r2, [r3, #36]	@ 0x24
    sensor.read_write_len = 32;
 8004236:	4b4b      	ldr	r3, [pc, #300]	@ (8004364 <BMI160_init+0x164>)
 8004238:	2220      	movs	r2, #32
 800423a:	851a      	strh	r2, [r3, #40]	@ 0x28

    rslt = bmi160_soft_reset(&sensor);
 800423c:	4849      	ldr	r0, [pc, #292]	@ (8004364 <BMI160_init+0x164>)
 800423e:	f7fc ff55 	bl	80010ec <bmi160_soft_reset>
 8004242:	4603      	mov	r3, r0
 8004244:	73fb      	strb	r3, [r7, #15]
    sensor.delay_ms(200);
 8004246:	4b47      	ldr	r3, [pc, #284]	@ (8004364 <BMI160_init+0x164>)
 8004248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424a:	20c8      	movs	r0, #200	@ 0xc8
 800424c:	4798      	blx	r3
    rslt = bmi160_init(&sensor);
 800424e:	4845      	ldr	r0, [pc, #276]	@ (8004364 <BMI160_init+0x164>)
 8004250:	f7fc fefe 	bl	8001050 <bmi160_init>
 8004254:	4603      	mov	r3, r0
 8004256:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    uint8_t reg_addr = BMI160_CHIP_ID_ADDR;
 8004258:	2300      	movs	r3, #0
 800425a:	73bb      	strb	r3, [r7, #14]
    uint8_t chipID = 0;
 800425c:	2300      	movs	r3, #0
 800425e:	72fb      	strb	r3, [r7, #11]
    uint16_t len = 1;
 8004260:	2301      	movs	r3, #1
 8004262:	81bb      	strh	r3, [r7, #12]
    rslt = bmi160_get_regs(reg_addr, &chipID, len, &sensor);
 8004264:	89ba      	ldrh	r2, [r7, #12]
 8004266:	f107 010b 	add.w	r1, r7, #11
 800426a:	7bb8      	ldrb	r0, [r7, #14]
 800426c:	4b3d      	ldr	r3, [pc, #244]	@ (8004364 <BMI160_init+0x164>)
 800426e:	f7fc fe59 	bl	8000f24 <bmi160_get_regs>
 8004272:	4603      	mov	r3, r0
 8004274:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    /* Select the Output data rate, range of accelerometer sensor */
    sensor.accel_cfg.odr = BMI160_ACCEL_ODR_800HZ; //BMI160_ACCEL_ODR_400HZ
 8004276:	4b3b      	ldr	r3, [pc, #236]	@ (8004364 <BMI160_init+0x164>)
 8004278:	220b      	movs	r2, #11
 800427a:	715a      	strb	r2, [r3, #5]
    sensor.delay_ms(100);
 800427c:	4b39      	ldr	r3, [pc, #228]	@ (8004364 <BMI160_init+0x164>)
 800427e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004280:	2064      	movs	r0, #100	@ 0x64
 8004282:	4798      	blx	r3
    sensor.accel_cfg.range = BMI160_Ascale_bit;
 8004284:	4b3b      	ldr	r3, [pc, #236]	@ (8004374 <BMI160_init+0x174>)
 8004286:	781a      	ldrb	r2, [r3, #0]
 8004288:	4b36      	ldr	r3, [pc, #216]	@ (8004364 <BMI160_init+0x164>)
 800428a:	719a      	strb	r2, [r3, #6]
    sensor.delay_ms(100);
 800428c:	4b35      	ldr	r3, [pc, #212]	@ (8004364 <BMI160_init+0x164>)
 800428e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004290:	2064      	movs	r0, #100	@ 0x64
 8004292:	4798      	blx	r3

    /* Select the power mode of accelerometer sensor */
    sensor.accel_cfg.power = BMI160_ACCEL_NORMAL_MODE;
 8004294:	4b33      	ldr	r3, [pc, #204]	@ (8004364 <BMI160_init+0x164>)
 8004296:	2211      	movs	r2, #17
 8004298:	711a      	strb	r2, [r3, #4]
    sensor.delay_ms(100);
 800429a:	4b32      	ldr	r3, [pc, #200]	@ (8004364 <BMI160_init+0x164>)
 800429c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429e:	2064      	movs	r0, #100	@ 0x64
 80042a0:	4798      	blx	r3
    sensor.accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4; //BMI160_ACCEL_BW_OSR2_AVG2
 80042a2:	4b30      	ldr	r3, [pc, #192]	@ (8004364 <BMI160_init+0x164>)
 80042a4:	2202      	movs	r2, #2
 80042a6:	71da      	strb	r2, [r3, #7]
    sensor.delay_ms(100);
 80042a8:	4b2e      	ldr	r3, [pc, #184]	@ (8004364 <BMI160_init+0x164>)
 80042aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ac:	2064      	movs	r0, #100	@ 0x64
 80042ae:	4798      	blx	r3


    /* Select the Output data rate, range of Gyroscope sensor */
    sensor.gyro_cfg.odr = BMI160_GYRO_ODR_800HZ; //BMI160_GYRO_ODR_400HZ
 80042b0:	4b2c      	ldr	r3, [pc, #176]	@ (8004364 <BMI160_init+0x164>)
 80042b2:	220b      	movs	r2, #11
 80042b4:	735a      	strb	r2, [r3, #13]
    sensor.delay_ms(100);
 80042b6:	4b2b      	ldr	r3, [pc, #172]	@ (8004364 <BMI160_init+0x164>)
 80042b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ba:	2064      	movs	r0, #100	@ 0x64
 80042bc:	4798      	blx	r3
    sensor.gyro_cfg.range = BMI160_Gscale_bit; // BMI160_GYRO_RANGE_250_DPS
 80042be:	4b2e      	ldr	r3, [pc, #184]	@ (8004378 <BMI160_init+0x178>)
 80042c0:	781a      	ldrb	r2, [r3, #0]
 80042c2:	4b28      	ldr	r3, [pc, #160]	@ (8004364 <BMI160_init+0x164>)
 80042c4:	739a      	strb	r2, [r3, #14]
    sensor.delay_ms(100);
 80042c6:	4b27      	ldr	r3, [pc, #156]	@ (8004364 <BMI160_init+0x164>)
 80042c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ca:	2064      	movs	r0, #100	@ 0x64
 80042cc:	4798      	blx	r3

    /* Select the power mode of Gyroscope sensor */
    sensor.gyro_cfg.power = BMI160_GYRO_NORMAL_MODE;
 80042ce:	4b25      	ldr	r3, [pc, #148]	@ (8004364 <BMI160_init+0x164>)
 80042d0:	2215      	movs	r2, #21
 80042d2:	731a      	strb	r2, [r3, #12]
    sensor.delay_ms(100);
 80042d4:	4b23      	ldr	r3, [pc, #140]	@ (8004364 <BMI160_init+0x164>)
 80042d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d8:	2064      	movs	r0, #100	@ 0x64
 80042da:	4798      	blx	r3
    sensor.gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE; //BMI160_GYRO_BW_NORMAL_MODE
 80042dc:	4b21      	ldr	r3, [pc, #132]	@ (8004364 <BMI160_init+0x164>)
 80042de:	2202      	movs	r2, #2
 80042e0:	73da      	strb	r2, [r3, #15]
    sensor.delay_ms(100);
 80042e2:	4b20      	ldr	r3, [pc, #128]	@ (8004364 <BMI160_init+0x164>)
 80042e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e6:	2064      	movs	r0, #100	@ 0x64
 80042e8:	4798      	blx	r3

    /* Set the sensor configuration */
    rslt = bmi160_set_sens_conf(&sensor);
 80042ea:	481e      	ldr	r0, [pc, #120]	@ (8004364 <BMI160_init+0x164>)
 80042ec:	f7fc ff39 	bl	8001162 <bmi160_set_sens_conf>
 80042f0:	4603      	mov	r3, r0
 80042f2:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    rslt = start_foc();
 80042f4:	f000 f844 	bl	8004380 <start_foc>
 80042f8:	4603      	mov	r3, r0
 80042fa:	73fb      	strb	r3, [r7, #15]

	/********************************************************************/

    /* Select the Interrupt channel/pin */
    int_config.int_channel = BMI160_INT_CHANNEL_1;// Interrupt channel/pin 1
 80042fc:	4b1f      	ldr	r3, [pc, #124]	@ (800437c <BMI160_init+0x17c>)
 80042fe:	2201      	movs	r2, #1
 8004300:	701a      	strb	r2, [r3, #0]

    /* Select the Interrupt type */
    int_config.int_type = BMI160_ACC_GYRO_DATA_RDY_INT;// Choosing Any motion interrupt
 8004302:	4b1e      	ldr	r3, [pc, #120]	@ (800437c <BMI160_init+0x17c>)
 8004304:	220a      	movs	r2, #10
 8004306:	705a      	strb	r2, [r3, #1]
    /* Select the interrupt channel/pin settings */
    int_config.int_pin_settg.output_en = BMI160_ENABLE;// Enabling interrupt pins to act as output pin
 8004308:	4a1c      	ldr	r2, [pc, #112]	@ (800437c <BMI160_init+0x17c>)
 800430a:	7893      	ldrb	r3, [r2, #2]
 800430c:	f043 0301 	orr.w	r3, r3, #1
 8004310:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.output_mode = BMI160_DISABLE;// Choosing push-pull mode for interrupt pin
 8004312:	4a1a      	ldr	r2, [pc, #104]	@ (800437c <BMI160_init+0x17c>)
 8004314:	7893      	ldrb	r3, [r2, #2]
 8004316:	f023 0302 	bic.w	r3, r3, #2
 800431a:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.output_type = BMI160_DISABLE;// Choosing active low output
 800431c:	4a17      	ldr	r2, [pc, #92]	@ (800437c <BMI160_init+0x17c>)
 800431e:	7893      	ldrb	r3, [r2, #2]
 8004320:	f023 0304 	bic.w	r3, r3, #4
 8004324:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.edge_ctrl = BMI160_ENABLE;// Choosing edge triggered output
 8004326:	4a15      	ldr	r2, [pc, #84]	@ (800437c <BMI160_init+0x17c>)
 8004328:	7893      	ldrb	r3, [r2, #2]
 800432a:	f043 0308 	orr.w	r3, r3, #8
 800432e:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.input_en = BMI160_DISABLE;// Disabling interrupt pin to act as input
 8004330:	4a12      	ldr	r2, [pc, #72]	@ (800437c <BMI160_init+0x17c>)
 8004332:	7893      	ldrb	r3, [r2, #2]
 8004334:	f023 0310 	bic.w	r3, r3, #16
 8004338:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.latch_dur = BMI160_LATCH_DUR_NONE;// non-latched output
 800433a:	4a10      	ldr	r2, [pc, #64]	@ (800437c <BMI160_init+0x17c>)
 800433c:	8853      	ldrh	r3, [r2, #2]
 800433e:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8004342:	8053      	strh	r3, [r2, #2]

    /* Set the Any-motion interrupt */
    rslt = bmi160_set_int_config(&int_config, &sensor); /* sensor is an instance of the structure bmi160_dev  */
 8004344:	4907      	ldr	r1, [pc, #28]	@ (8004364 <BMI160_init+0x164>)
 8004346:	480d      	ldr	r0, [pc, #52]	@ (800437c <BMI160_init+0x17c>)
 8004348:	f7fc ffcc 	bl	80012e4 <bmi160_set_int_config>
 800434c:	4603      	mov	r3, r0
 800434e:	73fb      	strb	r3, [r7, #15]

    DataStruct->INIT_OK_i8 = rslt;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	7bfa      	ldrb	r2, [r7, #15]
 8004354:	761a      	strb	r2, [r3, #24]
    return rslt;
 8004356:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800435a:	4618      	mov	r0, r3
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	20000310 	.word	0x20000310
 8004368:	0800469d 	.word	0x0800469d
 800436c:	080046e1 	.word	0x080046e1
 8004370:	080057a5 	.word	0x080057a5
 8004374:	20000372 	.word	0x20000372
 8004378:	20000373 	.word	0x20000373
 800437c:	20000368 	.word	0x20000368

08004380 <start_foc>:

int8_t start_foc()
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
	int8_t rslt = 0;
 8004386:	2300      	movs	r3, #0
 8004388:	71fb      	strb	r3, [r7, #7]

	/* Enable FOC for accel with target values of z = 1g ; x,y as 0g */
	foc_conf.acc_off_en = BMI160_ENABLE;
 800438a:	4b13      	ldr	r3, [pc, #76]	@ (80043d8 <start_foc+0x58>)
 800438c:	2201      	movs	r2, #1
 800438e:	711a      	strb	r2, [r3, #4]
	foc_conf.foc_acc_x  = BMI160_FOC_ACCEL_0G;
 8004390:	4b11      	ldr	r3, [pc, #68]	@ (80043d8 <start_foc+0x58>)
 8004392:	2203      	movs	r2, #3
 8004394:	705a      	strb	r2, [r3, #1]
	foc_conf.foc_acc_y  = BMI160_FOC_ACCEL_0G;
 8004396:	4b10      	ldr	r3, [pc, #64]	@ (80043d8 <start_foc+0x58>)
 8004398:	2203      	movs	r2, #3
 800439a:	709a      	strb	r2, [r3, #2]
	foc_conf.foc_acc_z  = BMI160_FOC_ACCEL_POSITIVE_G;
 800439c:	4b0e      	ldr	r3, [pc, #56]	@ (80043d8 <start_foc+0x58>)
 800439e:	2201      	movs	r2, #1
 80043a0:	70da      	strb	r2, [r3, #3]
	sensor.delay_ms(100);
 80043a2:	4b0e      	ldr	r3, [pc, #56]	@ (80043dc <start_foc+0x5c>)
 80043a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a6:	2064      	movs	r0, #100	@ 0x64
 80043a8:	4798      	blx	r3

	/* Enable FOC for gyro */
	foc_conf.foc_gyr_en = BMI160_ENABLE;
 80043aa:	4b0b      	ldr	r3, [pc, #44]	@ (80043d8 <start_foc+0x58>)
 80043ac:	2201      	movs	r2, #1
 80043ae:	701a      	strb	r2, [r3, #0]
	foc_conf.gyro_off_en = BMI160_ENABLE;
 80043b0:	4b09      	ldr	r3, [pc, #36]	@ (80043d8 <start_foc+0x58>)
 80043b2:	2201      	movs	r2, #1
 80043b4:	715a      	strb	r2, [r3, #5]
	sensor.delay_ms(100);
 80043b6:	4b09      	ldr	r3, [pc, #36]	@ (80043dc <start_foc+0x5c>)
 80043b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ba:	2064      	movs	r0, #100	@ 0x64
 80043bc:	4798      	blx	r3

	rslt = bmi160_start_foc(&foc_conf, &offsets, &sensor);
 80043be:	4a07      	ldr	r2, [pc, #28]	@ (80043dc <start_foc+0x5c>)
 80043c0:	4907      	ldr	r1, [pc, #28]	@ (80043e0 <start_foc+0x60>)
 80043c2:	4805      	ldr	r0, [pc, #20]	@ (80043d8 <start_foc+0x58>)
 80043c4:	f7fd f81a 	bl	80013fc <bmi160_start_foc>
 80043c8:	4603      	mov	r3, r0
 80043ca:	71fb      	strb	r3, [r7, #7]

	return rslt;
 80043cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3708      	adds	r7, #8
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	20000354 	.word	0x20000354
 80043dc:	20000310 	.word	0x20000310
 80043e0:	2000035c 	.word	0x2000035c

080043e4 <bmi160ReadAccelGyro>:

int8_t bmi160ReadAccelGyro(BMI160_t *DataStruct)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b08a      	sub	sp, #40	@ 0x28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	float ax, ay, az, gx, gy, gz;

	rslt = bmi160_get_sensor_data((BMI160_ACCEL_SEL | BMI160_GYRO_SEL), &accel, &gyro, &sensor);
 80043ec:	4b3a      	ldr	r3, [pc, #232]	@ (80044d8 <bmi160ReadAccelGyro+0xf4>)
 80043ee:	4a3b      	ldr	r2, [pc, #236]	@ (80044dc <bmi160ReadAccelGyro+0xf8>)
 80043f0:	493b      	ldr	r1, [pc, #236]	@ (80044e0 <bmi160ReadAccelGyro+0xfc>)
 80043f2:	2003      	movs	r0, #3
 80043f4:	f7fc ff0f 	bl	8001216 <bmi160_get_sensor_data>
 80043f8:	4603      	mov	r3, r0
 80043fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	ax = (float)accel.x / bmi160_aRes;
 80043fe:	4b38      	ldr	r3, [pc, #224]	@ (80044e0 <bmi160ReadAccelGyro+0xfc>)
 8004400:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004404:	ee07 3a90 	vmov	s15, r3
 8004408:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800440c:	4b35      	ldr	r3, [pc, #212]	@ (80044e4 <bmi160ReadAccelGyro+0x100>)
 800440e:	ed93 7a00 	vldr	s14, [r3]
 8004412:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004416:	edc7 7a08 	vstr	s15, [r7, #32]
	ay = (float)accel.y / bmi160_aRes;
 800441a:	4b31      	ldr	r3, [pc, #196]	@ (80044e0 <bmi160ReadAccelGyro+0xfc>)
 800441c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004420:	ee07 3a90 	vmov	s15, r3
 8004424:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004428:	4b2e      	ldr	r3, [pc, #184]	@ (80044e4 <bmi160ReadAccelGyro+0x100>)
 800442a:	ed93 7a00 	vldr	s14, [r3]
 800442e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004432:	edc7 7a07 	vstr	s15, [r7, #28]
	az = (float)accel.z / bmi160_aRes;
 8004436:	4b2a      	ldr	r3, [pc, #168]	@ (80044e0 <bmi160ReadAccelGyro+0xfc>)
 8004438:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800443c:	ee07 3a90 	vmov	s15, r3
 8004440:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004444:	4b27      	ldr	r3, [pc, #156]	@ (80044e4 <bmi160ReadAccelGyro+0x100>)
 8004446:	ed93 7a00 	vldr	s14, [r3]
 800444a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800444e:	edc7 7a06 	vstr	s15, [r7, #24]

	gx = (float)gyro.x / bmi160_gRes;
 8004452:	4b22      	ldr	r3, [pc, #136]	@ (80044dc <bmi160ReadAccelGyro+0xf8>)
 8004454:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004458:	ee07 3a90 	vmov	s15, r3
 800445c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004460:	4b21      	ldr	r3, [pc, #132]	@ (80044e8 <bmi160ReadAccelGyro+0x104>)
 8004462:	ed93 7a00 	vldr	s14, [r3]
 8004466:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800446a:	edc7 7a05 	vstr	s15, [r7, #20]
	gy = (float)gyro.y / bmi160_gRes;
 800446e:	4b1b      	ldr	r3, [pc, #108]	@ (80044dc <bmi160ReadAccelGyro+0xf8>)
 8004470:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004474:	ee07 3a90 	vmov	s15, r3
 8004478:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800447c:	4b1a      	ldr	r3, [pc, #104]	@ (80044e8 <bmi160ReadAccelGyro+0x104>)
 800447e:	ed93 7a00 	vldr	s14, [r3]
 8004482:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004486:	edc7 7a04 	vstr	s15, [r7, #16]
	gz = (float)gyro.z / bmi160_gRes;
 800448a:	4b14      	ldr	r3, [pc, #80]	@ (80044dc <bmi160ReadAccelGyro+0xf8>)
 800448c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004490:	ee07 3a90 	vmov	s15, r3
 8004494:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004498:	4b13      	ldr	r3, [pc, #76]	@ (80044e8 <bmi160ReadAccelGyro+0x104>)
 800449a:	ed93 7a00 	vldr	s14, [r3]
 800449e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044a2:	edc7 7a03 	vstr	s15, [r7, #12]


	DataStruct->BMI160_Ax_f32 = ax;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a3a      	ldr	r2, [r7, #32]
 80044aa:	601a      	str	r2, [r3, #0]
	DataStruct->BMI160_Ay_f32 = ay;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	69fa      	ldr	r2, [r7, #28]
 80044b0:	605a      	str	r2, [r3, #4]
	DataStruct->BMI160_Az_f32 = az;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	609a      	str	r2, [r3, #8]

	DataStruct->BMI160_Gx_f32 = gx;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	60da      	str	r2, [r3, #12]
	DataStruct->BMI160_Gy_f32 = gy;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	611a      	str	r2, [r3, #16]
	DataStruct->BMI160_Gz_f32 = gz;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	615a      	str	r2, [r3, #20]

	return rslt;
 80044ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3728      	adds	r7, #40	@ 0x28
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	20000310 	.word	0x20000310
 80044dc:	20000348 	.word	0x20000348
 80044e0:	2000033c 	.word	0x2000033c
 80044e4:	20000374 	.word	0x20000374
 80044e8:	20000378 	.word	0x20000378

080044ec <set_bmi160_Ares>:

void set_bmi160_Ares()
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
	switch (BMI160_Asens)
 80044f0:	4b12      	ldr	r3, [pc, #72]	@ (800453c <set_bmi160_Ares+0x50>)
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	3b01      	subs	r3, #1
 80044f6:	2b03      	cmp	r3, #3
 80044f8:	d81a      	bhi.n	8004530 <set_bmi160_Ares+0x44>
 80044fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004500 <set_bmi160_Ares+0x14>)
 80044fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004500:	08004511 	.word	0x08004511
 8004504:	08004519 	.word	0x08004519
 8004508:	08004521 	.word	0x08004521
 800450c:	08004529 	.word	0x08004529
	{
		case AFS_2G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_2G;
 8004510:	4b0b      	ldr	r3, [pc, #44]	@ (8004540 <set_bmi160_Ares+0x54>)
 8004512:	2203      	movs	r2, #3
 8004514:	701a      	strb	r2, [r3, #0]
			break;
 8004516:	e00b      	b.n	8004530 <set_bmi160_Ares+0x44>
		case AFS_4G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_4G;
 8004518:	4b09      	ldr	r3, [pc, #36]	@ (8004540 <set_bmi160_Ares+0x54>)
 800451a:	2205      	movs	r2, #5
 800451c:	701a      	strb	r2, [r3, #0]
			break;
 800451e:	e007      	b.n	8004530 <set_bmi160_Ares+0x44>
		case AFS_8G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_8G;
 8004520:	4b07      	ldr	r3, [pc, #28]	@ (8004540 <set_bmi160_Ares+0x54>)
 8004522:	2208      	movs	r2, #8
 8004524:	701a      	strb	r2, [r3, #0]
			break;
 8004526:	e003      	b.n	8004530 <set_bmi160_Ares+0x44>
		case AFS_16G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_16G;
 8004528:	4b05      	ldr	r3, [pc, #20]	@ (8004540 <set_bmi160_Ares+0x54>)
 800452a:	220c      	movs	r2, #12
 800452c:	701a      	strb	r2, [r3, #0]
			break;
 800452e:	bf00      	nop
	}
}
 8004530:	bf00      	nop
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	20000008 	.word	0x20000008
 8004540:	20000372 	.word	0x20000372

08004544 <set_bmi160_Gres>:

void set_bmi160_Gres()
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
	switch (BMI160_Gsens)
 8004548:	4b15      	ldr	r3, [pc, #84]	@ (80045a0 <set_bmi160_Gres+0x5c>)
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	3b01      	subs	r3, #1
 800454e:	2b04      	cmp	r3, #4
 8004550:	d820      	bhi.n	8004594 <set_bmi160_Gres+0x50>
 8004552:	a201      	add	r2, pc, #4	@ (adr r2, 8004558 <set_bmi160_Gres+0x14>)
 8004554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004558:	0800456d 	.word	0x0800456d
 800455c:	08004575 	.word	0x08004575
 8004560:	0800457d 	.word	0x0800457d
 8004564:	08004585 	.word	0x08004585
 8004568:	0800458d 	.word	0x0800458d
	{
		case GFS_125DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_125_DPS;
 800456c:	4b0d      	ldr	r3, [pc, #52]	@ (80045a4 <set_bmi160_Gres+0x60>)
 800456e:	2204      	movs	r2, #4
 8004570:	701a      	strb	r2, [r3, #0]
			break;
 8004572:	e00f      	b.n	8004594 <set_bmi160_Gres+0x50>
		case GFS_250DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_250_DPS;
 8004574:	4b0b      	ldr	r3, [pc, #44]	@ (80045a4 <set_bmi160_Gres+0x60>)
 8004576:	2203      	movs	r2, #3
 8004578:	701a      	strb	r2, [r3, #0]
			break;
 800457a:	e00b      	b.n	8004594 <set_bmi160_Gres+0x50>
		case GFS_500DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_500_DPS;
 800457c:	4b09      	ldr	r3, [pc, #36]	@ (80045a4 <set_bmi160_Gres+0x60>)
 800457e:	2202      	movs	r2, #2
 8004580:	701a      	strb	r2, [r3, #0]
			break;
 8004582:	e007      	b.n	8004594 <set_bmi160_Gres+0x50>
		case GFS_1000DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_1000_DPS;
 8004584:	4b07      	ldr	r3, [pc, #28]	@ (80045a4 <set_bmi160_Gres+0x60>)
 8004586:	2201      	movs	r2, #1
 8004588:	701a      	strb	r2, [r3, #0]
			break;
 800458a:	e003      	b.n	8004594 <set_bmi160_Gres+0x50>
		case GFS_2000DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_2000_DPS;
 800458c:	4b05      	ldr	r3, [pc, #20]	@ (80045a4 <set_bmi160_Gres+0x60>)
 800458e:	2200      	movs	r2, #0
 8004590:	701a      	strb	r2, [r3, #0]
			break;
 8004592:	bf00      	nop
	}
}
 8004594:	bf00      	nop
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	20000009 	.word	0x20000009
 80045a4:	20000373 	.word	0x20000373

080045a8 <get_bmi160_Ares>:

void get_bmi160_Ares()
{
 80045a8:	b480      	push	{r7}
 80045aa:	af00      	add	r7, sp, #0
	switch (BMI160_Ascale)
 80045ac:	4b17      	ldr	r3, [pc, #92]	@ (800460c <get_bmi160_Ares+0x64>)
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	2b04      	cmp	r3, #4
 80045b2:	d826      	bhi.n	8004602 <get_bmi160_Ares+0x5a>
 80045b4:	a201      	add	r2, pc, #4	@ (adr r2, 80045bc <get_bmi160_Ares+0x14>)
 80045b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ba:	bf00      	nop
 80045bc:	080045d1 	.word	0x080045d1
 80045c0:	080045db 	.word	0x080045db
 80045c4:	080045e5 	.word	0x080045e5
 80045c8:	080045ef 	.word	0x080045ef
 80045cc:	080045f9 	.word	0x080045f9
	{
		case AFS_RAW:
			bmi160_aRes = 1.0f;
 80045d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004610 <get_bmi160_Ares+0x68>)
 80045d2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80045d6:	601a      	str	r2, [r3, #0]
			break;
 80045d8:	e013      	b.n	8004602 <get_bmi160_Ares+0x5a>
		case AFS_2G:
			bmi160_aRes = 16384.0f;
 80045da:	4b0d      	ldr	r3, [pc, #52]	@ (8004610 <get_bmi160_Ares+0x68>)
 80045dc:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 80045e0:	601a      	str	r2, [r3, #0]
			break;
 80045e2:	e00e      	b.n	8004602 <get_bmi160_Ares+0x5a>
		case AFS_4G:
			bmi160_aRes = 8192.0f;
 80045e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004610 <get_bmi160_Ares+0x68>)
 80045e6:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 80045ea:	601a      	str	r2, [r3, #0]
			break;
 80045ec:	e009      	b.n	8004602 <get_bmi160_Ares+0x5a>
		case AFS_8G:
			bmi160_aRes = 4096.0f;
 80045ee:	4b08      	ldr	r3, [pc, #32]	@ (8004610 <get_bmi160_Ares+0x68>)
 80045f0:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 80045f4:	601a      	str	r2, [r3, #0]
			break;
 80045f6:	e004      	b.n	8004602 <get_bmi160_Ares+0x5a>
		case AFS_16G:
			bmi160_aRes = 2048.0f;
 80045f8:	4b05      	ldr	r3, [pc, #20]	@ (8004610 <get_bmi160_Ares+0x68>)
 80045fa:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 80045fe:	601a      	str	r2, [r3, #0]
			break;
 8004600:	bf00      	nop
	}
}
 8004602:	bf00      	nop
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	2000000a 	.word	0x2000000a
 8004610:	20000374 	.word	0x20000374

08004614 <get_bmi160_Gres>:

void get_bmi160_Gres()
{
 8004614:	b480      	push	{r7}
 8004616:	af00      	add	r7, sp, #0
	switch (BMI160_Gscale)
 8004618:	4b18      	ldr	r3, [pc, #96]	@ (800467c <get_bmi160_Gres+0x68>)
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	2b05      	cmp	r3, #5
 800461e:	d828      	bhi.n	8004672 <get_bmi160_Gres+0x5e>
 8004620:	a201      	add	r2, pc, #4	@ (adr r2, 8004628 <get_bmi160_Gres+0x14>)
 8004622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004626:	bf00      	nop
 8004628:	08004641 	.word	0x08004641
 800462c:	0800464b 	.word	0x0800464b
 8004630:	08004653 	.word	0x08004653
 8004634:	0800465b 	.word	0x0800465b
 8004638:	08004663 	.word	0x08004663
 800463c:	0800466b 	.word	0x0800466b
	{
		case GFS_RAW:
			bmi160_aRes = 1.0f;
 8004640:	4b0f      	ldr	r3, [pc, #60]	@ (8004680 <get_bmi160_Gres+0x6c>)
 8004642:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004646:	601a      	str	r2, [r3, #0]
			break;
 8004648:	e013      	b.n	8004672 <get_bmi160_Gres+0x5e>
		case GFS_125DPS:
			bmi160_gRes = 262.4f;
 800464a:	4b0e      	ldr	r3, [pc, #56]	@ (8004684 <get_bmi160_Gres+0x70>)
 800464c:	4a0e      	ldr	r2, [pc, #56]	@ (8004688 <get_bmi160_Gres+0x74>)
 800464e:	601a      	str	r2, [r3, #0]
			break;
 8004650:	e00f      	b.n	8004672 <get_bmi160_Gres+0x5e>
		case GFS_250DPS:
			bmi160_gRes = 131.2f;
 8004652:	4b0c      	ldr	r3, [pc, #48]	@ (8004684 <get_bmi160_Gres+0x70>)
 8004654:	4a0d      	ldr	r2, [pc, #52]	@ (800468c <get_bmi160_Gres+0x78>)
 8004656:	601a      	str	r2, [r3, #0]
			break;
 8004658:	e00b      	b.n	8004672 <get_bmi160_Gres+0x5e>
		case GFS_500DPS:
			bmi160_gRes = 65.6f;
 800465a:	4b0a      	ldr	r3, [pc, #40]	@ (8004684 <get_bmi160_Gres+0x70>)
 800465c:	4a0c      	ldr	r2, [pc, #48]	@ (8004690 <get_bmi160_Gres+0x7c>)
 800465e:	601a      	str	r2, [r3, #0]
			break;
 8004660:	e007      	b.n	8004672 <get_bmi160_Gres+0x5e>
		case GFS_1000DPS:
			bmi160_gRes = 32.8f;
 8004662:	4b08      	ldr	r3, [pc, #32]	@ (8004684 <get_bmi160_Gres+0x70>)
 8004664:	4a0b      	ldr	r2, [pc, #44]	@ (8004694 <get_bmi160_Gres+0x80>)
 8004666:	601a      	str	r2, [r3, #0]
			break;
 8004668:	e003      	b.n	8004672 <get_bmi160_Gres+0x5e>
		case GFS_2000DPS:
			bmi160_gRes = 16.4f;
 800466a:	4b06      	ldr	r3, [pc, #24]	@ (8004684 <get_bmi160_Gres+0x70>)
 800466c:	4a0a      	ldr	r2, [pc, #40]	@ (8004698 <get_bmi160_Gres+0x84>)
 800466e:	601a      	str	r2, [r3, #0]
			break;
 8004670:	bf00      	nop
	}
}
 8004672:	bf00      	nop
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	2000000b 	.word	0x2000000b
 8004680:	20000374 	.word	0x20000374
 8004684:	20000378 	.word	0x20000378
 8004688:	43833333 	.word	0x43833333
 800468c:	43033333 	.word	0x43033333
 8004690:	42833333 	.word	0x42833333
 8004694:	42033333 	.word	0x42033333
 8004698:	41833333 	.word	0x41833333

0800469c <SensorAPI_I2Cx_Read>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af02      	add	r7, sp, #8
 80046a2:	603a      	str	r2, [r7, #0]
 80046a4:	461a      	mov	r2, r3
 80046a6:	4603      	mov	r3, r0
 80046a8:	71fb      	strb	r3, [r7, #7]
 80046aa:	460b      	mov	r3, r1
 80046ac:	71bb      	strb	r3, [r7, #6]
 80046ae:	4613      	mov	r3, r2
 80046b0:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, &reg_addr, 1, I2CTIMEOUT);
 80046b2:	1dba      	adds	r2, r7, #6
 80046b4:	2364      	movs	r3, #100	@ 0x64
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	2301      	movs	r3, #1
 80046ba:	21d2      	movs	r1, #210	@ 0xd2
 80046bc:	4807      	ldr	r0, [pc, #28]	@ (80046dc <SensorAPI_I2Cx_Read+0x40>)
 80046be:	f003 f983 	bl	80079c8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&I2C_HANDLE, BMI160_ADDR, data, len, I2CTIMEOUT);
 80046c2:	88bb      	ldrh	r3, [r7, #4]
 80046c4:	2264      	movs	r2, #100	@ 0x64
 80046c6:	9200      	str	r2, [sp, #0]
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	21d2      	movs	r1, #210	@ 0xd2
 80046cc:	4803      	ldr	r0, [pc, #12]	@ (80046dc <SensorAPI_I2Cx_Read+0x40>)
 80046ce:	f003 fa93 	bl	8007bf8 <HAL_I2C_Master_Receive>
	return 0;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3708      	adds	r7, #8
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	2000066c 	.word	0x2000066c

080046e0 <SensorAPI_I2Cx_Write>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af02      	add	r7, sp, #8
 80046e6:	603a      	str	r2, [r7, #0]
 80046e8:	461a      	mov	r2, r3
 80046ea:	4603      	mov	r3, r0
 80046ec:	71fb      	strb	r3, [r7, #7]
 80046ee:	460b      	mov	r3, r1
 80046f0:	71bb      	strb	r3, [r7, #6]
 80046f2:	4613      	mov	r3, r2
 80046f4:	80bb      	strh	r3, [r7, #4]
	GTXBuffer[0] = reg_addr;
 80046f6:	4a0c      	ldr	r2, [pc, #48]	@ (8004728 <SensorAPI_I2Cx_Write+0x48>)
 80046f8:	79bb      	ldrb	r3, [r7, #6]
 80046fa:	7013      	strb	r3, [r2, #0]
	memcpy(&GTXBuffer[1], data, len);
 80046fc:	88bb      	ldrh	r3, [r7, #4]
 80046fe:	461a      	mov	r2, r3
 8004700:	6839      	ldr	r1, [r7, #0]
 8004702:	480a      	ldr	r0, [pc, #40]	@ (800472c <SensorAPI_I2Cx_Write+0x4c>)
 8004704:	f00e ff5f 	bl	80135c6 <memcpy>

	HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, GTXBuffer, len+1, I2CTIMEOUT);
 8004708:	88bb      	ldrh	r3, [r7, #4]
 800470a:	3301      	adds	r3, #1
 800470c:	b29b      	uxth	r3, r3
 800470e:	2264      	movs	r2, #100	@ 0x64
 8004710:	9200      	str	r2, [sp, #0]
 8004712:	4a05      	ldr	r2, [pc, #20]	@ (8004728 <SensorAPI_I2Cx_Write+0x48>)
 8004714:	21d2      	movs	r1, #210	@ 0xd2
 8004716:	4806      	ldr	r0, [pc, #24]	@ (8004730 <SensorAPI_I2Cx_Write+0x50>)
 8004718:	f003 f956 	bl	80079c8 <HAL_I2C_Master_Transmit>
	return 0;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	2000037c 	.word	0x2000037c
 800472c:	2000037d 	.word	0x2000037d
 8004730:	2000066c 	.word	0x2000066c

08004734 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800473c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004740:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004742:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4313      	orrs	r3, r2
 800474a:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800474c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004750:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4013      	ands	r3, r2
 8004756:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004758:	68fb      	ldr	r3, [r7, #12]
}
 800475a:	bf00      	nop
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004766:	b480      	push	{r7}
 8004768:	b085      	sub	sp, #20
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800476e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004772:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004774:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4313      	orrs	r3, r2
 800477c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800477e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004782:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4013      	ands	r3, r2
 8004788:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800478a:	68fb      	ldr	r3, [r7, #12]
}
 800478c:	bf00      	nop
 800478e:	3714      	adds	r7, #20
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2)
  {
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
	////this updates the X and Y axes of my joystick
	  for(uint8_t i = 0; i<hadc1.Init.NbrOfConversion; i++){
 80047a0:	2300      	movs	r3, #0
 80047a2:	73fb      	strb	r3, [r7, #15]
 80047a4:	e00a      	b.n	80047bc <HAL_TIM_PeriodElapsedCallback+0x24>
		  mic = (uint16_t) rawValues[0];
 80047a6:	4b0c      	ldr	r3, [pc, #48]	@ (80047d8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80047a8:	881a      	ldrh	r2, [r3, #0]
 80047aa:	4b0c      	ldr	r3, [pc, #48]	@ (80047dc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80047ac:	801a      	strh	r2, [r3, #0]
		  mic2 = mic;
 80047ae:	4b0b      	ldr	r3, [pc, #44]	@ (80047dc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80047b0:	881a      	ldrh	r2, [r3, #0]
 80047b2:	4b0b      	ldr	r3, [pc, #44]	@ (80047e0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80047b4:	801a      	strh	r2, [r3, #0]
	  for(uint8_t i = 0; i<hadc1.Init.NbrOfConversion; i++){
 80047b6:	7bfb      	ldrb	r3, [r7, #15]
 80047b8:	3301      	adds	r3, #1
 80047ba:	73fb      	strb	r3, [r7, #15]
 80047bc:	7bfa      	ldrb	r2, [r7, #15]
 80047be:	4b09      	ldr	r3, [pc, #36]	@ (80047e4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d3ef      	bcc.n	80047a6 <HAL_TIM_PeriodElapsedCallback+0xe>
	  }
	  flag = 1;
 80047c6:	4b08      	ldr	r3, [pc, #32]	@ (80047e8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80047c8:	2201      	movs	r2, #1
 80047ca:	701a      	strb	r2, [r3, #0]
	  sprintf(msg, "X axis: %hu, Y axis: %hu \r\n", Xaxis, Yaxis);
	  status = CDC_Transmit_FS(msg, strlen((char*)msg));
	  if (status == USBD_OK) {
	  	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin); // Example: Toggle LED on success
	  }*/
  }
 80047cc:	bf00      	nop
 80047ce:	3714      	adds	r7, #20
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	20000710 	.word	0x20000710
 80047dc:	2000070c 	.word	0x2000070c
 80047e0:	2000070e 	.word	0x2000070e
 80047e4:	200005a8 	.word	0x200005a8
 80047e8:	20000714 	.word	0x20000714
 80047ec:	00000000 	.word	0x00000000

080047f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80047f0:	b590      	push	{r4, r7, lr}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80047f6:	f000 ff4f 	bl	8005698 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80047fa:	f000 f8e3 	bl	80049c4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80047fe:	f000 f945 	bl	8004a8c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004802:	f000 fa89 	bl	8004d18 <MX_GPIO_Init>
  MX_DMA_Init();
 8004806:	f000 fa75 	bl	8004cf4 <MX_DMA_Init>
  MX_ADC1_Init();
 800480a:	f000 f971 	bl	8004af0 <MX_ADC1_Init>
  MX_TIM2_Init();
 800480e:	f000 fa23 	bl	8004c58 <MX_TIM2_Init>
  MX_USB_Device_Init();
 8004812:	f00d fba1 	bl	8011f58 <MX_USB_Device_Init>
  MX_I2C1_Init();
 8004816:	f000 f9df 	bl	8004bd8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ////This begins the process of storing our ADC readings into the DMA. The DMA can be thought of a temporary storage location.
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) rawValues, 2);
 800481a:	2202      	movs	r2, #2
 800481c:	495e      	ldr	r1, [pc, #376]	@ (8004998 <main+0x1a8>)
 800481e:	485f      	ldr	r0, [pc, #380]	@ (800499c <main+0x1ac>)
 8004820:	f001 fb18 	bl	8005e54 <HAL_ADC_Start_DMA>
    ////This begins our timer 2
  HAL_TIM_Base_Start_IT(&htim2);
 8004824:	485e      	ldr	r0, [pc, #376]	@ (80049a0 <main+0x1b0>)
 8004826:	f007 ff75 	bl	800c714 <HAL_TIM_Base_Start_IT>

  while (BMI160_init(imu_t) == 1); // waits for IMU to be ready
 800482a:	bf00      	nop
 800482c:	4b5d      	ldr	r3, [pc, #372]	@ (80049a4 <main+0x1b4>)
 800482e:	466c      	mov	r4, sp
 8004830:	f103 0210 	add.w	r2, r3, #16
 8004834:	ca07      	ldmia	r2, {r0, r1, r2}
 8004836:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800483a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800483c:	f7ff fce0 	bl	8004200 <BMI160_init>
 8004840:	4603      	mov	r3, r0
 8004842:	2b01      	cmp	r3, #1
 8004844:	d0f2      	beq.n	800482c <main+0x3c>
  }

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 8004846:	2000      	movs	r0, #0
 8004848:	f000 fdb4 	bl	80053b4 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 800484c:	2001      	movs	r0, #1
 800484e:	f000 fdb1 	bl	80053b4 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8004852:	2002      	movs	r0, #2
 8004854:	f000 fdae 	bl	80053b4 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8004858:	2101      	movs	r1, #1
 800485a:	2000      	movs	r0, #0
 800485c:	f000 fdfe 	bl	800545c <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8004860:	2101      	movs	r1, #1
 8004862:	2001      	movs	r0, #1
 8004864:	f000 fdfa 	bl	800545c <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 8004868:	2101      	movs	r1, #1
 800486a:	2002      	movs	r0, #2
 800486c:	f000 fdf6 	bl	800545c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8004870:	4b4d      	ldr	r3, [pc, #308]	@ (80049a8 <main+0x1b8>)
 8004872:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004876:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8004878:	4b4b      	ldr	r3, [pc, #300]	@ (80049a8 <main+0x1b8>)
 800487a:	2200      	movs	r2, #0
 800487c:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800487e:	4b4a      	ldr	r3, [pc, #296]	@ (80049a8 <main+0x1b8>)
 8004880:	2200      	movs	r2, #0
 8004882:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8004884:	4b48      	ldr	r3, [pc, #288]	@ (80049a8 <main+0x1b8>)
 8004886:	2200      	movs	r2, #0
 8004888:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800488a:	4b47      	ldr	r3, [pc, #284]	@ (80049a8 <main+0x1b8>)
 800488c:	2200      	movs	r2, #0
 800488e:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8004890:	4945      	ldr	r1, [pc, #276]	@ (80049a8 <main+0x1b8>)
 8004892:	2000      	movs	r0, #0
 8004894:	f000 fe52 	bl	800553c <BSP_COM_Init>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d001      	beq.n	80048a2 <main+0xb2>
  {
    Error_Handler();
 800489e:	f000 fa67 	bl	8004d70 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /*                                                                          ********************************************************************* */
  while (1)
  {
	  bmi160ReadAccelGyro(&imu_t);
 80048a2:	4840      	ldr	r0, [pc, #256]	@ (80049a4 <main+0x1b4>)
 80048a4:	f7ff fd9e 	bl	80043e4 <bmi160ReadAccelGyro>

	  if (flag==1){
 80048a8:	4b40      	ldr	r3, [pc, #256]	@ (80049ac <main+0x1bc>)
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d1f8      	bne.n	80048a2 <main+0xb2>
//		  g_f32[0] = imu_t.BMI160_Gx_f32*0.0174533;
//		  g_f32[1] = imu_t.BMI160_Gy_f32*0.0174533;
//		  g_f32[2] = imu_t.BMI160_Gz_f32*0.0174533;

		  // head orientation
		  a_f32[1] = imu_t.BMI160_Ax_f32*g;
 80048b0:	4b3c      	ldr	r3, [pc, #240]	@ (80049a4 <main+0x1b4>)
 80048b2:	ed93 7a00 	vldr	s14, [r3]
 80048b6:	4b3e      	ldr	r3, [pc, #248]	@ (80049b0 <main+0x1c0>)
 80048b8:	edd3 7a00 	vldr	s15, [r3]
 80048bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048c0:	4b3c      	ldr	r3, [pc, #240]	@ (80049b4 <main+0x1c4>)
 80048c2:	edc3 7a01 	vstr	s15, [r3, #4]
		  a_f32[2] = imu_t.BMI160_Ay_f32*g;
 80048c6:	4b37      	ldr	r3, [pc, #220]	@ (80049a4 <main+0x1b4>)
 80048c8:	ed93 7a01 	vldr	s14, [r3, #4]
 80048cc:	4b38      	ldr	r3, [pc, #224]	@ (80049b0 <main+0x1c0>)
 80048ce:	edd3 7a00 	vldr	s15, [r3]
 80048d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048d6:	4b37      	ldr	r3, [pc, #220]	@ (80049b4 <main+0x1c4>)
 80048d8:	edc3 7a02 	vstr	s15, [r3, #8]
		  a_f32[0] = imu_t.BMI160_Az_f32*g;
 80048dc:	4b31      	ldr	r3, [pc, #196]	@ (80049a4 <main+0x1b4>)
 80048de:	ed93 7a02 	vldr	s14, [r3, #8]
 80048e2:	4b33      	ldr	r3, [pc, #204]	@ (80049b0 <main+0x1c0>)
 80048e4:	edd3 7a00 	vldr	s15, [r3]
 80048e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ec:	4b31      	ldr	r3, [pc, #196]	@ (80049b4 <main+0x1c4>)
 80048ee:	edc3 7a00 	vstr	s15, [r3]

		  g_f32[1] = imu_t.BMI160_Gx_f32*0.0174533;
 80048f2:	4b2c      	ldr	r3, [pc, #176]	@ (80049a4 <main+0x1b4>)
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7fb fdfe 	bl	80004f8 <__aeabi_f2d>
 80048fc:	a324      	add	r3, pc, #144	@ (adr r3, 8004990 <main+0x1a0>)
 80048fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004902:	f7fb fe51 	bl	80005a8 <__aeabi_dmul>
 8004906:	4602      	mov	r2, r0
 8004908:	460b      	mov	r3, r1
 800490a:	4610      	mov	r0, r2
 800490c:	4619      	mov	r1, r3
 800490e:	f7fc f923 	bl	8000b58 <__aeabi_d2f>
 8004912:	4603      	mov	r3, r0
 8004914:	4a28      	ldr	r2, [pc, #160]	@ (80049b8 <main+0x1c8>)
 8004916:	6053      	str	r3, [r2, #4]
		  g_f32[2] = imu_t.BMI160_Gy_f32*0.0174533;
 8004918:	4b22      	ldr	r3, [pc, #136]	@ (80049a4 <main+0x1b4>)
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	4618      	mov	r0, r3
 800491e:	f7fb fdeb 	bl	80004f8 <__aeabi_f2d>
 8004922:	a31b      	add	r3, pc, #108	@ (adr r3, 8004990 <main+0x1a0>)
 8004924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004928:	f7fb fe3e 	bl	80005a8 <__aeabi_dmul>
 800492c:	4602      	mov	r2, r0
 800492e:	460b      	mov	r3, r1
 8004930:	4610      	mov	r0, r2
 8004932:	4619      	mov	r1, r3
 8004934:	f7fc f910 	bl	8000b58 <__aeabi_d2f>
 8004938:	4603      	mov	r3, r0
 800493a:	4a1f      	ldr	r2, [pc, #124]	@ (80049b8 <main+0x1c8>)
 800493c:	6093      	str	r3, [r2, #8]
		  g_f32[0] = imu_t.BMI160_Gz_f32*0.0174533;
 800493e:	4b19      	ldr	r3, [pc, #100]	@ (80049a4 <main+0x1b4>)
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	4618      	mov	r0, r3
 8004944:	f7fb fdd8 	bl	80004f8 <__aeabi_f2d>
 8004948:	a311      	add	r3, pc, #68	@ (adr r3, 8004990 <main+0x1a0>)
 800494a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494e:	f7fb fe2b 	bl	80005a8 <__aeabi_dmul>
 8004952:	4602      	mov	r2, r0
 8004954:	460b      	mov	r3, r1
 8004956:	4610      	mov	r0, r2
 8004958:	4619      	mov	r1, r3
 800495a:	f7fc f8fd 	bl	8000b58 <__aeabi_d2f>
 800495e:	4603      	mov	r3, r0
 8004960:	4a15      	ldr	r2, [pc, #84]	@ (80049b8 <main+0x1c8>)
 8004962:	6013      	str	r3, [r2, #0]

		  prepare_data_packet_IMU(g_f32,a_f32,USB_buffer,&packet_length);
 8004964:	4b15      	ldr	r3, [pc, #84]	@ (80049bc <main+0x1cc>)
 8004966:	4a16      	ldr	r2, [pc, #88]	@ (80049c0 <main+0x1d0>)
 8004968:	4912      	ldr	r1, [pc, #72]	@ (80049b4 <main+0x1c4>)
 800496a:	4813      	ldr	r0, [pc, #76]	@ (80049b8 <main+0x1c8>)
 800496c:	f000 f9e1 	bl	8004d32 <prepare_data_packet_IMU>
		  CDC_Transmit_FS(USB_buffer, packet_length);
 8004970:	4b12      	ldr	r3, [pc, #72]	@ (80049bc <main+0x1cc>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	b29b      	uxth	r3, r3
 8004976:	4619      	mov	r1, r3
 8004978:	4811      	ldr	r0, [pc, #68]	@ (80049c0 <main+0x1d0>)
 800497a:	f00d fbab 	bl	80120d4 <CDC_Transmit_FS>
		  BSP_LED_Toggle(LED_GREEN);
 800497e:	2001      	movs	r0, #1
 8004980:	f000 fd52 	bl	8005428 <BSP_LED_Toggle>
		  //HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
		  //snprintf(msg, sizeof(msg), "a: %.2f, g: %.2f", a_f32[0], g_f32[0]);
		  //CDC_Transmit_FS((uint8_t *)msg, strlen(msg));

		  flag = 0;
 8004984:	4b09      	ldr	r3, [pc, #36]	@ (80049ac <main+0x1bc>)
 8004986:	2200      	movs	r2, #0
 8004988:	701a      	strb	r2, [r3, #0]
	  bmi160ReadAccelGyro(&imu_t);
 800498a:	e78a      	b.n	80048a2 <main+0xb2>
 800498c:	f3af 8000 	nop.w
 8004990:	22d4405f 	.word	0x22d4405f
 8004994:	3f91df47 	.word	0x3f91df47
 8004998:	20000710 	.word	0x20000710
 800499c:	200005a8 	.word	0x200005a8
 80049a0:	200006c0 	.word	0x200006c0
 80049a4:	2000057c 	.word	0x2000057c
 80049a8:	20000598 	.word	0x20000598
 80049ac:	20000714 	.word	0x20000714
 80049b0:	2000000c 	.word	0x2000000c
 80049b4:	20000748 	.word	0x20000748
 80049b8:	2000073c 	.word	0x2000073c
 80049bc:	20000738 	.word	0x20000738
 80049c0:	20000718 	.word	0x20000718

080049c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b09a      	sub	sp, #104	@ 0x68
 80049c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80049ca:	f107 0320 	add.w	r3, r7, #32
 80049ce:	2248      	movs	r2, #72	@ 0x48
 80049d0:	2100      	movs	r1, #0
 80049d2:	4618      	mov	r0, r3
 80049d4:	f00e fd77 	bl	80134c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80049d8:	1d3b      	adds	r3, r7, #4
 80049da:	2200      	movs	r2, #0
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	605a      	str	r2, [r3, #4]
 80049e0:	609a      	str	r2, [r3, #8]
 80049e2:	60da      	str	r2, [r3, #12]
 80049e4:	611a      	str	r2, [r3, #16]
 80049e6:	615a      	str	r2, [r3, #20]
 80049e8:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80049ea:	4b27      	ldr	r3, [pc, #156]	@ (8004a88 <SystemClock_Config+0xc4>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80049f2:	4a25      	ldr	r2, [pc, #148]	@ (8004a88 <SystemClock_Config+0xc4>)
 80049f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80049f8:	6013      	str	r3, [r2, #0]
 80049fa:	4b23      	ldr	r3, [pc, #140]	@ (8004a88 <SystemClock_Config+0xc4>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004a02:	603b      	str	r3, [r7, #0]
 8004a04:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8004a06:	2303      	movs	r3, #3
 8004a08:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004a0a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004a10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004a16:	2340      	movs	r3, #64	@ 0x40
 8004a18:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8004a22:	2310      	movs	r3, #16
 8004a24:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8004a26:	2308      	movs	r3, #8
 8004a28:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004a2a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004a2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004a30:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004a34:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004a36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a3a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a3c:	f107 0320 	add.w	r3, r7, #32
 8004a40:	4618      	mov	r0, r3
 8004a42:	f006 fbd7 	bl	800b1f4 <HAL_RCC_OscConfig>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8004a4c:	f000 f990 	bl	8004d70 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8004a50:	236f      	movs	r3, #111	@ 0x6f
 8004a52:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a54:	2303      	movs	r3, #3
 8004a56:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004a60:	2300      	movs	r3, #0
 8004a62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8004a64:	2380      	movs	r3, #128	@ 0x80
 8004a66:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004a6c:	1d3b      	adds	r3, r7, #4
 8004a6e:	2103      	movs	r1, #3
 8004a70:	4618      	mov	r0, r3
 8004a72:	f006 ff33 	bl	800b8dc <HAL_RCC_ClockConfig>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d001      	beq.n	8004a80 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8004a7c:	f000 f978 	bl	8004d70 <Error_Handler>
  }
}
 8004a80:	bf00      	nop
 8004a82:	3768      	adds	r7, #104	@ 0x68
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	58000400 	.word	0x58000400

08004a8c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b094      	sub	sp, #80	@ 0x50
 8004a90:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004a92:	463b      	mov	r3, r7
 8004a94:	2250      	movs	r2, #80	@ 0x50
 8004a96:	2100      	movs	r1, #0
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f00e fd14 	bl	80134c6 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 8004a9e:	f44f 5314 	mov.w	r3, #9472	@ 0x2500
 8004aa2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8004aa4:	2306      	movs	r3, #6
 8004aa6:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8004aa8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004aac:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8004aae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ab2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8004ab4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004ab8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8004aba:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 8004abe:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8004ac0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004ac4:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8004ac6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8004acc:	2300      	movs	r3, #0
 8004ace:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ad4:	463b      	mov	r3, r7
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f007 fb3d 	bl	800c156 <HAL_RCCEx_PeriphCLKConfig>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8004ae2:	f000 f945 	bl	8004d70 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8004ae6:	bf00      	nop
 8004ae8:	3750      	adds	r7, #80	@ 0x50
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
	...

08004af0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004af6:	463b      	mov	r3, r7
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	605a      	str	r2, [r3, #4]
 8004afe:	609a      	str	r2, [r3, #8]
 8004b00:	60da      	str	r2, [r3, #12]
 8004b02:	611a      	str	r2, [r3, #16]
 8004b04:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8004b06:	4b30      	ldr	r3, [pc, #192]	@ (8004bc8 <MX_ADC1_Init+0xd8>)
 8004b08:	4a30      	ldr	r2, [pc, #192]	@ (8004bcc <MX_ADC1_Init+0xdc>)
 8004b0a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8004b0c:	4b2e      	ldr	r3, [pc, #184]	@ (8004bc8 <MX_ADC1_Init+0xd8>)
 8004b0e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004b12:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004b14:	4b2c      	ldr	r3, [pc, #176]	@ (8004bc8 <MX_ADC1_Init+0xd8>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004b1a:	4b2b      	ldr	r3, [pc, #172]	@ (8004bc8 <MX_ADC1_Init+0xd8>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004b20:	4b29      	ldr	r3, [pc, #164]	@ (8004bc8 <MX_ADC1_Init+0xd8>)
 8004b22:	2201      	movs	r2, #1
 8004b24:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004b26:	4b28      	ldr	r3, [pc, #160]	@ (8004bc8 <MX_ADC1_Init+0xd8>)
 8004b28:	2204      	movs	r2, #4
 8004b2a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004b2c:	4b26      	ldr	r3, [pc, #152]	@ (8004bc8 <MX_ADC1_Init+0xd8>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004b32:	4b25      	ldr	r3, [pc, #148]	@ (8004bc8 <MX_ADC1_Init+0xd8>)
 8004b34:	2201      	movs	r2, #1
 8004b36:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8004b38:	4b23      	ldr	r3, [pc, #140]	@ (8004bc8 <MX_ADC1_Init+0xd8>)
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004b3e:	4b22      	ldr	r3, [pc, #136]	@ (8004bc8 <MX_ADC1_Init+0xd8>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004b46:	4b20      	ldr	r3, [pc, #128]	@ (8004bc8 <MX_ADC1_Init+0xd8>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004b4c:	4b1e      	ldr	r3, [pc, #120]	@ (8004bc8 <MX_ADC1_Init+0xd8>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004b52:	4b1d      	ldr	r3, [pc, #116]	@ (8004bc8 <MX_ADC1_Init+0xd8>)
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8004bc8 <MX_ADC1_Init+0xd8>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8004b60:	4b19      	ldr	r3, [pc, #100]	@ (8004bc8 <MX_ADC1_Init+0xd8>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004b68:	4817      	ldr	r0, [pc, #92]	@ (8004bc8 <MX_ADC1_Init+0xd8>)
 8004b6a:	f001 f827 	bl	8005bbc <HAL_ADC_Init>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d001      	beq.n	8004b78 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8004b74:	f000 f8fc 	bl	8004d70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004b78:	4b15      	ldr	r3, [pc, #84]	@ (8004bd0 <MX_ADC1_Init+0xe0>)
 8004b7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004b7c:	2306      	movs	r3, #6
 8004b7e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8004b80:	2306      	movs	r3, #6
 8004b82:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004b84:	237f      	movs	r3, #127	@ 0x7f
 8004b86:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004b88:	2304      	movs	r3, #4
 8004b8a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004b90:	463b      	mov	r3, r7
 8004b92:	4619      	mov	r1, r3
 8004b94:	480c      	ldr	r0, [pc, #48]	@ (8004bc8 <MX_ADC1_Init+0xd8>)
 8004b96:	f001 fbbf 	bl	8006318 <HAL_ADC_ConfigChannel>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d001      	beq.n	8004ba4 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8004ba0:	f000 f8e6 	bl	8004d70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8004bd4 <MX_ADC1_Init+0xe4>)
 8004ba6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004ba8:	230c      	movs	r3, #12
 8004baa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004bac:	463b      	mov	r3, r7
 8004bae:	4619      	mov	r1, r3
 8004bb0:	4805      	ldr	r0, [pc, #20]	@ (8004bc8 <MX_ADC1_Init+0xd8>)
 8004bb2:	f001 fbb1 	bl	8006318 <HAL_ADC_ConfigChannel>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8004bbc:	f000 f8d8 	bl	8004d70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004bc0:	bf00      	nop
 8004bc2:	3718      	adds	r7, #24
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	200005a8 	.word	0x200005a8
 8004bcc:	50040000 	.word	0x50040000
 8004bd0:	04300002 	.word	0x04300002
 8004bd4:	08600004 	.word	0x08600004

08004bd8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8004c4c <MX_I2C1_Init+0x74>)
 8004bde:	4a1c      	ldr	r2, [pc, #112]	@ (8004c50 <MX_I2C1_Init+0x78>)
 8004be0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 8004be2:	4b1a      	ldr	r3, [pc, #104]	@ (8004c4c <MX_I2C1_Init+0x74>)
 8004be4:	4a1b      	ldr	r2, [pc, #108]	@ (8004c54 <MX_I2C1_Init+0x7c>)
 8004be6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004be8:	4b18      	ldr	r3, [pc, #96]	@ (8004c4c <MX_I2C1_Init+0x74>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004bee:	4b17      	ldr	r3, [pc, #92]	@ (8004c4c <MX_I2C1_Init+0x74>)
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004bf4:	4b15      	ldr	r3, [pc, #84]	@ (8004c4c <MX_I2C1_Init+0x74>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004bfa:	4b14      	ldr	r3, [pc, #80]	@ (8004c4c <MX_I2C1_Init+0x74>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004c00:	4b12      	ldr	r3, [pc, #72]	@ (8004c4c <MX_I2C1_Init+0x74>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004c06:	4b11      	ldr	r3, [pc, #68]	@ (8004c4c <MX_I2C1_Init+0x74>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8004c4c <MX_I2C1_Init+0x74>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004c12:	480e      	ldr	r0, [pc, #56]	@ (8004c4c <MX_I2C1_Init+0x74>)
 8004c14:	f002 fe3d 	bl	8007892 <HAL_I2C_Init>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004c1e:	f000 f8a7 	bl	8004d70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004c22:	2100      	movs	r1, #0
 8004c24:	4809      	ldr	r0, [pc, #36]	@ (8004c4c <MX_I2C1_Init+0x74>)
 8004c26:	f004 f977 	bl	8008f18 <HAL_I2CEx_ConfigAnalogFilter>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d001      	beq.n	8004c34 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004c30:	f000 f89e 	bl	8004d70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004c34:	2100      	movs	r1, #0
 8004c36:	4805      	ldr	r0, [pc, #20]	@ (8004c4c <MX_I2C1_Init+0x74>)
 8004c38:	f004 f9b9 	bl	8008fae <HAL_I2CEx_ConfigDigitalFilter>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004c42:	f000 f895 	bl	8004d70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004c46:	bf00      	nop
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	2000066c 	.word	0x2000066c
 8004c50:	40005400 	.word	0x40005400
 8004c54:	10b17db5 	.word	0x10b17db5

08004c58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b088      	sub	sp, #32
 8004c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c5e:	f107 0310 	add.w	r3, r7, #16
 8004c62:	2200      	movs	r2, #0
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	605a      	str	r2, [r3, #4]
 8004c68:	609a      	str	r2, [r3, #8]
 8004c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c6c:	1d3b      	adds	r3, r7, #4
 8004c6e:	2200      	movs	r2, #0
 8004c70:	601a      	str	r2, [r3, #0]
 8004c72:	605a      	str	r2, [r3, #4]
 8004c74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004c76:	4b1e      	ldr	r3, [pc, #120]	@ (8004cf0 <MX_TIM2_Init+0x98>)
 8004c78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004c7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 8004c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8004cf0 <MX_TIM2_Init+0x98>)
 8004c80:	220a      	movs	r2, #10
 8004c82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c84:	4b1a      	ldr	r3, [pc, #104]	@ (8004cf0 <MX_TIM2_Init+0x98>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64000-1;
 8004c8a:	4b19      	ldr	r3, [pc, #100]	@ (8004cf0 <MX_TIM2_Init+0x98>)
 8004c8c:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8004c90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c92:	4b17      	ldr	r3, [pc, #92]	@ (8004cf0 <MX_TIM2_Init+0x98>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004c98:	4b15      	ldr	r3, [pc, #84]	@ (8004cf0 <MX_TIM2_Init+0x98>)
 8004c9a:	2280      	movs	r2, #128	@ 0x80
 8004c9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004c9e:	4814      	ldr	r0, [pc, #80]	@ (8004cf0 <MX_TIM2_Init+0x98>)
 8004ca0:	f007 fce0 	bl	800c664 <HAL_TIM_Base_Init>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004caa:	f000 f861 	bl	8004d70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004cae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004cb2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004cb4:	f107 0310 	add.w	r3, r7, #16
 8004cb8:	4619      	mov	r1, r3
 8004cba:	480d      	ldr	r0, [pc, #52]	@ (8004cf0 <MX_TIM2_Init+0x98>)
 8004cbc:	f007 fe7f 	bl	800c9be <HAL_TIM_ConfigClockSource>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004cc6:	f000 f853 	bl	8004d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004cca:	2320      	movs	r3, #32
 8004ccc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004cd2:	1d3b      	adds	r3, r7, #4
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	4806      	ldr	r0, [pc, #24]	@ (8004cf0 <MX_TIM2_Init+0x98>)
 8004cd8:	f008 f86e 	bl	800cdb8 <HAL_TIMEx_MasterConfigSynchronization>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004ce2:	f000 f845 	bl	8004d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004ce6:	bf00      	nop
 8004ce8:	3720      	adds	r7, #32
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	200006c0 	.word	0x200006c0

08004cf4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004cf8:	2004      	movs	r0, #4
 8004cfa:	f7ff fd1b 	bl	8004734 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004cfe:	2001      	movs	r0, #1
 8004d00:	f7ff fd18 	bl	8004734 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004d04:	2200      	movs	r2, #0
 8004d06:	2100      	movs	r1, #0
 8004d08:	200b      	movs	r0, #11
 8004d0a:	f002 f8e6 	bl	8006eda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004d0e:	200b      	movs	r0, #11
 8004d10:	f002 f8fd 	bl	8006f0e <HAL_NVIC_EnableIRQ>

}
 8004d14:	bf00      	nop
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d1c:	2004      	movs	r0, #4
 8004d1e:	f7ff fd22 	bl	8004766 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d22:	2002      	movs	r0, #2
 8004d24:	f7ff fd1f 	bl	8004766 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d28:	2001      	movs	r0, #1
 8004d2a:	f7ff fd1c 	bl	8004766 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004d2e:	bf00      	nop
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <prepare_data_packet_IMU>:
    buffer[1 + 2 * sizeof(float) * 3 + sizeof(uint16_t)] = (uint16_t)var2;*/

    // Set the total length of the packet
    *length = 1 + 2 * sizeof(float) * 3 + 2*sizeof(uint16_t);
}
void prepare_data_packet_IMU(float g_f32[3], float a_f32[3], uint8_t *buffer, size_t *length) {
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b084      	sub	sp, #16
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	60f8      	str	r0, [r7, #12]
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	607a      	str	r2, [r7, #4]
 8004d3e:	603b      	str	r3, [r7, #0]
    // Define the start byte
    buffer[0] = (uint8_t)-128;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2280      	movs	r2, #128	@ 0x80
 8004d44:	701a      	strb	r2, [r3, #0]
    memcpy(&buffer[1], g_f32, sizeof(float) * 3);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	3301      	adds	r3, #1
 8004d4a:	220c      	movs	r2, #12
 8004d4c:	68f9      	ldr	r1, [r7, #12]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f00e fc39 	bl	80135c6 <memcpy>
    memcpy(&buffer[1 + sizeof(float) * 3], a_f32, sizeof(float) * 3);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	330d      	adds	r3, #13
 8004d58:	220c      	movs	r2, #12
 8004d5a:	68b9      	ldr	r1, [r7, #8]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f00e fc32 	bl	80135c6 <memcpy>

    // Set the total length of the packet
    *length = 1 + 2 * sizeof(float) * 3;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	2219      	movs	r2, #25
 8004d66:	601a      	str	r2, [r3, #0]
}
 8004d68:	bf00      	nop
 8004d6a:	3710      	adds	r7, #16
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d70:	b480      	push	{r7}
 8004d72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004d74:	b672      	cpsid	i
}
 8004d76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004d78:	bf00      	nop
 8004d7a:	e7fd      	b.n	8004d78 <Error_Handler+0x8>

08004d7c <LL_AHB2_GRP1_EnableClock>:
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004d84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d88:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004d94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d98:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004da0:	68fb      	ldr	r3, [r7, #12]
}
 8004da2:	bf00      	nop
 8004da4:	3714      	adds	r7, #20
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b085      	sub	sp, #20
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004db6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dba:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004dbc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004dc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4013      	ands	r3, r2
 8004dd0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
}
 8004dd4:	bf00      	nop
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004de4:	bf00      	nop
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
	...

08004df0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b088      	sub	sp, #32
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004df8:	f107 030c 	add.w	r3, r7, #12
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	601a      	str	r2, [r3, #0]
 8004e00:	605a      	str	r2, [r3, #4]
 8004e02:	609a      	str	r2, [r3, #8]
 8004e04:	60da      	str	r2, [r3, #12]
 8004e06:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a26      	ldr	r2, [pc, #152]	@ (8004ea8 <HAL_ADC_MspInit+0xb8>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d145      	bne.n	8004e9e <HAL_ADC_MspInit+0xae>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004e12:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004e16:	f7ff ffb1 	bl	8004d7c <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e1a:	2004      	movs	r0, #4
 8004e1c:	f7ff ffae 	bl	8004d7c <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004e20:	2303      	movs	r3, #3
 8004e22:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e24:	2303      	movs	r3, #3
 8004e26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e2c:	f107 030c 	add.w	r3, r7, #12
 8004e30:	4619      	mov	r1, r3
 8004e32:	481e      	ldr	r0, [pc, #120]	@ (8004eac <HAL_ADC_MspInit+0xbc>)
 8004e34:	f002 fb68 	bl	8007508 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004e38:	4b1d      	ldr	r3, [pc, #116]	@ (8004eb0 <HAL_ADC_MspInit+0xc0>)
 8004e3a:	4a1e      	ldr	r2, [pc, #120]	@ (8004eb4 <HAL_ADC_MspInit+0xc4>)
 8004e3c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004e3e:	4b1c      	ldr	r3, [pc, #112]	@ (8004eb0 <HAL_ADC_MspInit+0xc0>)
 8004e40:	2205      	movs	r2, #5
 8004e42:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e44:	4b1a      	ldr	r3, [pc, #104]	@ (8004eb0 <HAL_ADC_MspInit+0xc0>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e4a:	4b19      	ldr	r3, [pc, #100]	@ (8004eb0 <HAL_ADC_MspInit+0xc0>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004e50:	4b17      	ldr	r3, [pc, #92]	@ (8004eb0 <HAL_ADC_MspInit+0xc0>)
 8004e52:	2280      	movs	r2, #128	@ 0x80
 8004e54:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004e56:	4b16      	ldr	r3, [pc, #88]	@ (8004eb0 <HAL_ADC_MspInit+0xc0>)
 8004e58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e5c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004e5e:	4b14      	ldr	r3, [pc, #80]	@ (8004eb0 <HAL_ADC_MspInit+0xc0>)
 8004e60:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e64:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004e66:	4b12      	ldr	r3, [pc, #72]	@ (8004eb0 <HAL_ADC_MspInit+0xc0>)
 8004e68:	2220      	movs	r2, #32
 8004e6a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004e6c:	4b10      	ldr	r3, [pc, #64]	@ (8004eb0 <HAL_ADC_MspInit+0xc0>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004e72:	480f      	ldr	r0, [pc, #60]	@ (8004eb0 <HAL_ADC_MspInit+0xc0>)
 8004e74:	f002 f866 	bl	8006f44 <HAL_DMA_Init>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <HAL_ADC_MspInit+0x92>
    {
      Error_Handler();
 8004e7e:	f7ff ff77 	bl	8004d70 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a0a      	ldr	r2, [pc, #40]	@ (8004eb0 <HAL_ADC_MspInit+0xc0>)
 8004e86:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004e88:	4a09      	ldr	r2, [pc, #36]	@ (8004eb0 <HAL_ADC_MspInit+0xc0>)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 2, 0);
 8004e8e:	2200      	movs	r2, #0
 8004e90:	2102      	movs	r1, #2
 8004e92:	2012      	movs	r0, #18
 8004e94:	f002 f821 	bl	8006eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8004e98:	2012      	movs	r0, #18
 8004e9a:	f002 f838 	bl	8006f0e <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8004e9e:	bf00      	nop
 8004ea0:	3720      	adds	r7, #32
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	50040000 	.word	0x50040000
 8004eac:	48000800 	.word	0x48000800
 8004eb0:	2000060c 	.word	0x2000060c
 8004eb4:	40020008 	.word	0x40020008

08004eb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b09c      	sub	sp, #112	@ 0x70
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ec0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	605a      	str	r2, [r3, #4]
 8004eca:	609a      	str	r2, [r3, #8]
 8004ecc:	60da      	str	r2, [r3, #12]
 8004ece:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004ed0:	f107 030c 	add.w	r3, r7, #12
 8004ed4:	2250      	movs	r2, #80	@ 0x50
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f00e faf4 	bl	80134c6 <memset>
  if(hi2c->Instance==I2C1)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a1f      	ldr	r2, [pc, #124]	@ (8004f60 <HAL_I2C_MspInit+0xa8>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d136      	bne.n	8004f56 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004ee8:	2304      	movs	r3, #4
 8004eea:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004eec:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8004ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ef2:	f107 030c 	add.w	r3, r7, #12
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f007 f92d 	bl	800c156 <HAL_RCCEx_PeriphCLKConfig>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004f02:	f7ff ff35 	bl	8004d70 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f06:	2002      	movs	r0, #2
 8004f08:	f7ff ff38 	bl	8004d7c <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004f0c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004f10:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f12:	2312      	movs	r3, #18
 8004f14:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f16:	2300      	movs	r3, #0
 8004f18:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004f1e:	2304      	movs	r3, #4
 8004f20:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f22:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004f26:	4619      	mov	r1, r3
 8004f28:	480e      	ldr	r0, [pc, #56]	@ (8004f64 <HAL_I2C_MspInit+0xac>)
 8004f2a:	f002 faed 	bl	8007508 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004f2e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8004f32:	f7ff ff3c 	bl	8004dae <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004f36:	2200      	movs	r2, #0
 8004f38:	2100      	movs	r1, #0
 8004f3a:	201e      	movs	r0, #30
 8004f3c:	f001 ffcd 	bl	8006eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004f40:	201e      	movs	r0, #30
 8004f42:	f001 ffe4 	bl	8006f0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004f46:	2200      	movs	r2, #0
 8004f48:	2100      	movs	r1, #0
 8004f4a:	201f      	movs	r0, #31
 8004f4c:	f001 ffc5 	bl	8006eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004f50:	201f      	movs	r0, #31
 8004f52:	f001 ffdc 	bl	8006f0e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8004f56:	bf00      	nop
 8004f58:	3770      	adds	r7, #112	@ 0x70
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	40005400 	.word	0x40005400
 8004f64:	48000400 	.word	0x48000400

08004f68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f78:	d10a      	bne.n	8004f90 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004f7a:	2001      	movs	r0, #1
 8004f7c:	f7ff ff17 	bl	8004dae <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004f80:	2200      	movs	r2, #0
 8004f82:	2100      	movs	r1, #0
 8004f84:	201c      	movs	r0, #28
 8004f86:	f001 ffa8 	bl	8006eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004f8a:	201c      	movs	r0, #28
 8004f8c:	f001 ffbf 	bl	8006f0e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8004f90:	bf00      	nop
 8004f92:	3708      	adds	r7, #8
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004f9c:	bf00      	nop
 8004f9e:	e7fd      	b.n	8004f9c <NMI_Handler+0x4>

08004fa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004fa4:	bf00      	nop
 8004fa6:	e7fd      	b.n	8004fa4 <HardFault_Handler+0x4>

08004fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004fac:	bf00      	nop
 8004fae:	e7fd      	b.n	8004fac <MemManage_Handler+0x4>

08004fb0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004fb4:	bf00      	nop
 8004fb6:	e7fd      	b.n	8004fb4 <BusFault_Handler+0x4>

08004fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004fbc:	bf00      	nop
 8004fbe:	e7fd      	b.n	8004fbc <UsageFault_Handler+0x4>

08004fc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004fc4:	bf00      	nop
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004fd2:	bf00      	nop
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004fe0:	bf00      	nop
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004fee:	f000 fbad 	bl	800574c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ff2:	bf00      	nop
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 8004ffa:	2001      	movs	r0, #1
 8004ffc:	f002 fc26 	bl	800784c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005000:	bf00      	nop
 8005002:	bd80      	pop	{r7, pc}

08005004 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 8005008:	2002      	movs	r0, #2
 800500a:	f002 fc1f 	bl	800784c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800500e:	bf00      	nop
 8005010:	bd80      	pop	{r7, pc}

08005012 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005012:	b580      	push	{r7, lr}
 8005014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 8005016:	2010      	movs	r0, #16
 8005018:	f002 fc18 	bl	800784c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800501c:	bf00      	nop
 800501e:	bd80      	pop	{r7, pc}

08005020 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005024:	4802      	ldr	r0, [pc, #8]	@ (8005030 <DMA1_Channel1_IRQHandler+0x10>)
 8005026:	f002 f90f 	bl	8007248 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800502a:	bf00      	nop
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	2000060c 	.word	0x2000060c

08005034 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005038:	4802      	ldr	r0, [pc, #8]	@ (8005044 <ADC1_IRQHandler+0x10>)
 800503a:	f000 ff8f 	bl	8005f5c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800503e:	bf00      	nop
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	200005a8 	.word	0x200005a8

08005048 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt.
  */
void USB_HP_IRQHandler(void)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800504c:	4802      	ldr	r0, [pc, #8]	@ (8005058 <USB_HP_IRQHandler+0x10>)
 800504e:	f004 f8ea 	bl	8009226 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 8005052:	bf00      	nop
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	20001cd4 	.word	0x20001cd4

0800505c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005060:	4802      	ldr	r0, [pc, #8]	@ (800506c <USB_LP_IRQHandler+0x10>)
 8005062:	f004 f8e0 	bl	8009226 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8005066:	bf00      	nop
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	20001cd4 	.word	0x20001cd4

08005070 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005074:	4802      	ldr	r0, [pc, #8]	@ (8005080 <TIM2_IRQHandler+0x10>)
 8005076:	f007 fb9b 	bl	800c7b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800507a:	bf00      	nop
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	200006c0 	.word	0x200006c0

08005084 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005088:	4802      	ldr	r0, [pc, #8]	@ (8005094 <I2C1_EV_IRQHandler+0x10>)
 800508a:	f002 feab 	bl	8007de4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800508e:	bf00      	nop
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	2000066c 	.word	0x2000066c

08005098 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800509c:	4802      	ldr	r0, [pc, #8]	@ (80050a8 <I2C1_ER_IRQHandler+0x10>)
 800509e:	f002 febb 	bl	8007e18 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80050a2:	bf00      	nop
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	2000066c 	.word	0x2000066c

080050ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
  return 1;
 80050b0:	2301      	movs	r3, #1
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <_kill>:

int _kill(int pid, int sig)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80050c6:	f00e fa51 	bl	801356c <__errno>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2216      	movs	r2, #22
 80050ce:	601a      	str	r2, [r3, #0]
  return -1;
 80050d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3708      	adds	r7, #8
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <_exit>:

void _exit (int status)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80050e4:	f04f 31ff 	mov.w	r1, #4294967295
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f7ff ffe7 	bl	80050bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80050ee:	bf00      	nop
 80050f0:	e7fd      	b.n	80050ee <_exit+0x12>

080050f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b086      	sub	sp, #24
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	60f8      	str	r0, [r7, #12]
 80050fa:	60b9      	str	r1, [r7, #8]
 80050fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050fe:	2300      	movs	r3, #0
 8005100:	617b      	str	r3, [r7, #20]
 8005102:	e00a      	b.n	800511a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005104:	f3af 8000 	nop.w
 8005108:	4601      	mov	r1, r0
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	60ba      	str	r2, [r7, #8]
 8005110:	b2ca      	uxtb	r2, r1
 8005112:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	3301      	adds	r3, #1
 8005118:	617b      	str	r3, [r7, #20]
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	429a      	cmp	r2, r3
 8005120:	dbf0      	blt.n	8005104 <_read+0x12>
  }

  return len;
 8005122:	687b      	ldr	r3, [r7, #4]
}
 8005124:	4618      	mov	r0, r3
 8005126:	3718      	adds	r7, #24
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005138:	2300      	movs	r3, #0
 800513a:	617b      	str	r3, [r7, #20]
 800513c:	e009      	b.n	8005152 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	1c5a      	adds	r2, r3, #1
 8005142:	60ba      	str	r2, [r7, #8]
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	4618      	mov	r0, r3
 8005148:	f000 fa5a 	bl	8005600 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	3301      	adds	r3, #1
 8005150:	617b      	str	r3, [r7, #20]
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	429a      	cmp	r2, r3
 8005158:	dbf1      	blt.n	800513e <_write+0x12>
  }
  return len;
 800515a:	687b      	ldr	r3, [r7, #4]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3718      	adds	r7, #24
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <_close>:

int _close(int file)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800516c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005170:	4618      	mov	r0, r3
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800518c:	605a      	str	r2, [r3, #4]
  return 0;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <_isatty>:

int _isatty(int file)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80051a4:	2301      	movs	r3, #1
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b085      	sub	sp, #20
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	60f8      	str	r0, [r7, #12]
 80051ba:	60b9      	str	r1, [r7, #8]
 80051bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80051d4:	4a14      	ldr	r2, [pc, #80]	@ (8005228 <_sbrk+0x5c>)
 80051d6:	4b15      	ldr	r3, [pc, #84]	@ (800522c <_sbrk+0x60>)
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80051e0:	4b13      	ldr	r3, [pc, #76]	@ (8005230 <_sbrk+0x64>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d102      	bne.n	80051ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80051e8:	4b11      	ldr	r3, [pc, #68]	@ (8005230 <_sbrk+0x64>)
 80051ea:	4a12      	ldr	r2, [pc, #72]	@ (8005234 <_sbrk+0x68>)
 80051ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80051ee:	4b10      	ldr	r3, [pc, #64]	@ (8005230 <_sbrk+0x64>)
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4413      	add	r3, r2
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d207      	bcs.n	800520c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80051fc:	f00e f9b6 	bl	801356c <__errno>
 8005200:	4603      	mov	r3, r0
 8005202:	220c      	movs	r2, #12
 8005204:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005206:	f04f 33ff 	mov.w	r3, #4294967295
 800520a:	e009      	b.n	8005220 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800520c:	4b08      	ldr	r3, [pc, #32]	@ (8005230 <_sbrk+0x64>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005212:	4b07      	ldr	r3, [pc, #28]	@ (8005230 <_sbrk+0x64>)
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4413      	add	r3, r2
 800521a:	4a05      	ldr	r2, [pc, #20]	@ (8005230 <_sbrk+0x64>)
 800521c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800521e:	68fb      	ldr	r3, [r7, #12]
}
 8005220:	4618      	mov	r0, r3
 8005222:	3718      	adds	r7, #24
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	20030000 	.word	0x20030000
 800522c:	00000400 	.word	0x00000400
 8005230:	20000754 	.word	0x20000754
 8005234:	20002320 	.word	0x20002320

08005238 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005238:	b480      	push	{r7}
 800523a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800523c:	4b24      	ldr	r3, [pc, #144]	@ (80052d0 <SystemInit+0x98>)
 800523e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005242:	4a23      	ldr	r2, [pc, #140]	@ (80052d0 <SystemInit+0x98>)
 8005244:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005248:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800524c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005256:	f043 0301 	orr.w	r3, r3, #1
 800525a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800525c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005260:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8005264:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8005266:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005270:	4b18      	ldr	r3, [pc, #96]	@ (80052d4 <SystemInit+0x9c>)
 8005272:	4013      	ands	r3, r2
 8005274:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8005276:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800527a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800527e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005282:	f023 0305 	bic.w	r3, r3, #5
 8005286:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800528a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800528e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005292:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005296:	f023 0301 	bic.w	r3, r3, #1
 800529a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800529e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052a2:	4a0d      	ldr	r2, [pc, #52]	@ (80052d8 <SystemInit+0xa0>)
 80052a4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80052a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052aa:	4a0b      	ldr	r2, [pc, #44]	@ (80052d8 <SystemInit+0xa0>)
 80052ac:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80052ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052bc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80052be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052c2:	2200      	movs	r2, #0
 80052c4:	619a      	str	r2, [r3, #24]
}
 80052c6:	bf00      	nop
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr
 80052d0:	e000ed00 	.word	0xe000ed00
 80052d4:	faf6fefb 	.word	0xfaf6fefb
 80052d8:	22041000 	.word	0x22041000

080052dc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80052dc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80052de:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80052e0:	3304      	adds	r3, #4

080052e2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80052e2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80052e4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80052e6:	d3f9      	bcc.n	80052dc <CopyDataInit>
  bx lr
 80052e8:	4770      	bx	lr

080052ea <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80052ea:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80052ec:	3004      	adds	r0, #4

080052ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80052ee:	4288      	cmp	r0, r1
  bcc FillZerobss
 80052f0:	d3fb      	bcc.n	80052ea <FillZerobss>
  bx lr
 80052f2:	4770      	bx	lr

080052f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80052f4:	480c      	ldr	r0, [pc, #48]	@ (8005328 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80052f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80052f8:	f7ff ff9e 	bl	8005238 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80052fc:	480b      	ldr	r0, [pc, #44]	@ (800532c <LoopForever+0x6>)
 80052fe:	490c      	ldr	r1, [pc, #48]	@ (8005330 <LoopForever+0xa>)
 8005300:	4a0c      	ldr	r2, [pc, #48]	@ (8005334 <LoopForever+0xe>)
 8005302:	2300      	movs	r3, #0
 8005304:	f7ff ffed 	bl	80052e2 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8005308:	480b      	ldr	r0, [pc, #44]	@ (8005338 <LoopForever+0x12>)
 800530a:	490c      	ldr	r1, [pc, #48]	@ (800533c <LoopForever+0x16>)
 800530c:	4a0c      	ldr	r2, [pc, #48]	@ (8005340 <LoopForever+0x1a>)
 800530e:	2300      	movs	r3, #0
 8005310:	f7ff ffe7 	bl	80052e2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8005314:	480b      	ldr	r0, [pc, #44]	@ (8005344 <LoopForever+0x1e>)
 8005316:	490c      	ldr	r1, [pc, #48]	@ (8005348 <LoopForever+0x22>)
 8005318:	2300      	movs	r3, #0
 800531a:	f7ff ffe8 	bl	80052ee <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800531e:	f00e f92b 	bl	8013578 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8005322:	f7ff fa65 	bl	80047f0 <main>

08005326 <LoopForever>:

LoopForever:
  b LoopForever
 8005326:	e7fe      	b.n	8005326 <LoopForever>
  ldr   r0, =_estack
 8005328:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800532c:	20000008 	.word	0x20000008
 8005330:	200002f4 	.word	0x200002f4
 8005334:	080158a4 	.word	0x080158a4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8005338:	20030000 	.word	0x20030000
 800533c:	20030000 	.word	0x20030000
 8005340:	08015b90 	.word	0x08015b90
  INIT_BSS _sbss, _ebss
 8005344:	200002f4 	.word	0x200002f4
 8005348:	2000231c 	.word	0x2000231c

0800534c <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800534c:	e7fe      	b.n	800534c <AES1_IRQHandler>

0800534e <LL_AHB2_GRP1_EnableClock>:
{
 800534e:	b480      	push	{r7}
 8005350:	b085      	sub	sp, #20
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005356:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800535a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800535c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4313      	orrs	r3, r2
 8005364:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005366:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800536a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4013      	ands	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005372:	68fb      	ldr	r3, [r7, #12]
}
 8005374:	bf00      	nop
 8005376:	3714      	adds	r7, #20
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8005388:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800538c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800538e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4313      	orrs	r3, r2
 8005396:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005398:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800539c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4013      	ands	r3, r2
 80053a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80053a4:	68fb      	ldr	r3, [r7, #12]
}
 80053a6:	bf00      	nop
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
	...

080053b4 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b088      	sub	sp, #32
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	4603      	mov	r3, r0
 80053bc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 80053be:	f107 030c 	add.w	r3, r7, #12
 80053c2:	2200      	movs	r2, #0
 80053c4:	601a      	str	r2, [r3, #0]
 80053c6:	605a      	str	r2, [r3, #4]
 80053c8:	609a      	str	r2, [r3, #8]
 80053ca:	60da      	str	r2, [r3, #12]
 80053cc:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80053ce:	2002      	movs	r0, #2
 80053d0:	f7ff ffbd 	bl	800534e <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 80053d4:	79fb      	ldrb	r3, [r7, #7]
 80053d6:	4a12      	ldr	r2, [pc, #72]	@ (8005420 <BSP_LED_Init+0x6c>)
 80053d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053dc:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053de:	2301      	movs	r3, #1
 80053e0:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 80053e2:	2300      	movs	r3, #0
 80053e4:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80053e6:	2302      	movs	r3, #2
 80053e8:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 80053ea:	79fb      	ldrb	r3, [r7, #7]
 80053ec:	4a0d      	ldr	r2, [pc, #52]	@ (8005424 <BSP_LED_Init+0x70>)
 80053ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053f2:	f107 020c 	add.w	r2, r7, #12
 80053f6:	4611      	mov	r1, r2
 80053f8:	4618      	mov	r0, r3
 80053fa:	f002 f885 	bl	8007508 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 80053fe:	79fb      	ldrb	r3, [r7, #7]
 8005400:	4a08      	ldr	r2, [pc, #32]	@ (8005424 <BSP_LED_Init+0x70>)
 8005402:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005406:	79fb      	ldrb	r3, [r7, #7]
 8005408:	4a05      	ldr	r2, [pc, #20]	@ (8005420 <BSP_LED_Init+0x6c>)
 800540a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800540e:	2200      	movs	r2, #0
 8005410:	4619      	mov	r1, r3
 8005412:	f002 f9e9 	bl	80077e8 <HAL_GPIO_WritePin>
}
 8005416:	bf00      	nop
 8005418:	3720      	adds	r7, #32
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	080154f4 	.word	0x080154f4
 8005424:	20000014 	.word	0x20000014

08005428 <BSP_LED_Toggle>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	4603      	mov	r3, r0
 8005430:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8005432:	79fb      	ldrb	r3, [r7, #7]
 8005434:	4a07      	ldr	r2, [pc, #28]	@ (8005454 <BSP_LED_Toggle+0x2c>)
 8005436:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800543a:	79fb      	ldrb	r3, [r7, #7]
 800543c:	4906      	ldr	r1, [pc, #24]	@ (8005458 <BSP_LED_Toggle+0x30>)
 800543e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005442:	4619      	mov	r1, r3
 8005444:	4610      	mov	r0, r2
 8005446:	f002 f9e7 	bl	8007818 <HAL_GPIO_TogglePin>
}
 800544a:	bf00      	nop
 800544c:	3708      	adds	r7, #8
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	20000014 	.word	0x20000014
 8005458:	080154f4 	.word	0x080154f4

0800545c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b088      	sub	sp, #32
 8005460:	af00      	add	r7, sp, #0
 8005462:	4603      	mov	r3, r0
 8005464:	460a      	mov	r2, r1
 8005466:	71fb      	strb	r3, [r7, #7]
 8005468:	4613      	mov	r3, r2
 800546a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 800546c:	f107 030c 	add.w	r3, r7, #12
 8005470:	2200      	movs	r2, #0
 8005472:	601a      	str	r2, [r3, #0]
 8005474:	605a      	str	r2, [r3, #4]
 8005476:	609a      	str	r2, [r3, #8]
 8005478:	60da      	str	r2, [r3, #12]
 800547a:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800547c:	79fb      	ldrb	r3, [r7, #7]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d103      	bne.n	800548a <BSP_PB_Init+0x2e>
 8005482:	2004      	movs	r0, #4
 8005484:	f7ff ff63 	bl	800534e <LL_AHB2_GRP1_EnableClock>
 8005488:	e00c      	b.n	80054a4 <BSP_PB_Init+0x48>
 800548a:	79fb      	ldrb	r3, [r7, #7]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d103      	bne.n	8005498 <BSP_PB_Init+0x3c>
 8005490:	2008      	movs	r0, #8
 8005492:	f7ff ff5c 	bl	800534e <LL_AHB2_GRP1_EnableClock>
 8005496:	e005      	b.n	80054a4 <BSP_PB_Init+0x48>
 8005498:	79fb      	ldrb	r3, [r7, #7]
 800549a:	2b02      	cmp	r3, #2
 800549c:	d102      	bne.n	80054a4 <BSP_PB_Init+0x48>
 800549e:	2008      	movs	r0, #8
 80054a0:	f7ff ff55 	bl	800534e <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80054a4:	79bb      	ldrb	r3, [r7, #6]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d117      	bne.n	80054da <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 80054aa:	79fb      	ldrb	r3, [r7, #7]
 80054ac:	4a20      	ldr	r2, [pc, #128]	@ (8005530 <BSP_PB_Init+0xd4>)
 80054ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054b2:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 80054b4:	2300      	movs	r3, #0
 80054b6:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 80054b8:	2301      	movs	r3, #1
 80054ba:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80054bc:	2302      	movs	r3, #2
 80054be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80054c0:	79fb      	ldrb	r3, [r7, #7]
 80054c2:	4a1c      	ldr	r2, [pc, #112]	@ (8005534 <BSP_PB_Init+0xd8>)
 80054c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054c8:	f107 020c 	add.w	r2, r7, #12
 80054cc:	4611      	mov	r1, r2
 80054ce:	4618      	mov	r0, r3
 80054d0:	f002 f81a 	bl	8007508 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 80054d4:	2001      	movs	r0, #1
 80054d6:	f000 f965 	bl	80057a4 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80054da:	79bb      	ldrb	r3, [r7, #6]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d123      	bne.n	8005528 <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 80054e0:	79fb      	ldrb	r3, [r7, #7]
 80054e2:	4a13      	ldr	r2, [pc, #76]	@ (8005530 <BSP_PB_Init+0xd4>)
 80054e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054e8:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 80054ea:	2301      	movs	r3, #1
 80054ec:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 80054ee:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80054f2:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80054f4:	79fb      	ldrb	r3, [r7, #7]
 80054f6:	4a0f      	ldr	r2, [pc, #60]	@ (8005534 <BSP_PB_Init+0xd8>)
 80054f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054fc:	f107 020c 	add.w	r2, r7, #12
 8005500:	4611      	mov	r1, r2
 8005502:	4618      	mov	r0, r3
 8005504:	f002 f800 	bl	8007508 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8005508:	79fb      	ldrb	r3, [r7, #7]
 800550a:	4a0b      	ldr	r2, [pc, #44]	@ (8005538 <BSP_PB_Init+0xdc>)
 800550c:	5cd3      	ldrb	r3, [r2, r3]
 800550e:	b25b      	sxtb	r3, r3
 8005510:	2200      	movs	r2, #0
 8005512:	210f      	movs	r1, #15
 8005514:	4618      	mov	r0, r3
 8005516:	f001 fce0 	bl	8006eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800551a:	79fb      	ldrb	r3, [r7, #7]
 800551c:	4a06      	ldr	r2, [pc, #24]	@ (8005538 <BSP_PB_Init+0xdc>)
 800551e:	5cd3      	ldrb	r3, [r2, r3]
 8005520:	b25b      	sxtb	r3, r3
 8005522:	4618      	mov	r0, r3
 8005524:	f001 fcf3 	bl	8006f0e <HAL_NVIC_EnableIRQ>
  }
}
 8005528:	bf00      	nop
 800552a:	3720      	adds	r7, #32
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	080154fc 	.word	0x080154fc
 8005534:	20000020 	.word	0x20000020
 8005538:	08015504 	.word	0x08015504

0800553c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	4603      	mov	r3, r0
 8005544:	6039      	str	r1, [r7, #0]
 8005546:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8005548:	2300      	movs	r3, #0
 800554a:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800554c:	79fb      	ldrb	r3, [r7, #7]
 800554e:	2b01      	cmp	r3, #1
 8005550:	d903      	bls.n	800555a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005552:	f06f 0301 	mvn.w	r3, #1
 8005556:	60fb      	str	r3, [r7, #12]
 8005558:	e018      	b.n	800558c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800555a:	79fb      	ldrb	r3, [r7, #7]
 800555c:	2294      	movs	r2, #148	@ 0x94
 800555e:	fb02 f303 	mul.w	r3, r2, r3
 8005562:	4a0d      	ldr	r2, [pc, #52]	@ (8005598 <BSP_COM_Init+0x5c>)
 8005564:	4413      	add	r3, r2
 8005566:	4618      	mov	r0, r3
 8005568:	f000 f866 	bl	8005638 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 800556c:	79fb      	ldrb	r3, [r7, #7]
 800556e:	2294      	movs	r2, #148	@ 0x94
 8005570:	fb02 f303 	mul.w	r3, r2, r3
 8005574:	4a08      	ldr	r2, [pc, #32]	@ (8005598 <BSP_COM_Init+0x5c>)
 8005576:	4413      	add	r3, r2
 8005578:	6839      	ldr	r1, [r7, #0]
 800557a:	4618      	mov	r0, r3
 800557c:	f000 f80e 	bl	800559c <MX_LPUART1_Init>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d002      	beq.n	800558c <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8005586:	f06f 0303 	mvn.w	r3, #3
 800558a:	e000      	b.n	800558e <BSP_COM_Init+0x52>
    }
  }

  return ret;
 800558c:	68fb      	ldr	r3, [r7, #12]
}
 800558e:	4618      	mov	r0, r3
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	20000758 	.word	0x20000758

0800559c <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80055a6:	4b15      	ldr	r3, [pc, #84]	@ (80055fc <MX_LPUART1_Init+0x60>)
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	220c      	movs	r2, #12
 80055ba:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	895b      	ldrh	r3, [r3, #10]
 80055c0:	461a      	mov	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	685a      	ldr	r2, [r3, #4]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	891b      	ldrh	r3, [r3, #8]
 80055d2:	461a      	mov	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	899b      	ldrh	r3, [r3, #12]
 80055dc:	461a      	mov	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80055e8:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f007 fc82 	bl	800cef4 <HAL_UART_Init>
 80055f0:	4603      	mov	r3, r0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3708      	adds	r7, #8
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	2000002c 	.word	0x2000002c

08005600 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8005608:	4b09      	ldr	r3, [pc, #36]	@ (8005630 <__io_putchar+0x30>)
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	461a      	mov	r2, r3
 800560e:	2394      	movs	r3, #148	@ 0x94
 8005610:	fb02 f303 	mul.w	r3, r2, r3
 8005614:	4a07      	ldr	r2, [pc, #28]	@ (8005634 <__io_putchar+0x34>)
 8005616:	1898      	adds	r0, r3, r2
 8005618:	1d39      	adds	r1, r7, #4
 800561a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800561e:	2201      	movs	r2, #1
 8005620:	f007 fcc2 	bl	800cfa8 <HAL_UART_Transmit>
  return ch;
 8005624:	687b      	ldr	r3, [r7, #4]
}
 8005626:	4618      	mov	r0, r3
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	200007ec 	.word	0x200007ec
 8005634:	20000758 	.word	0x20000758

08005638 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b088      	sub	sp, #32
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8005640:	2002      	movs	r0, #2
 8005642:	f7ff fe84 	bl	800534e <LL_AHB2_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
 8005646:	2002      	movs	r0, #2
 8005648:	f7ff fe81 	bl	800534e <LL_AHB2_GRP1_EnableClock>

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 800564c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8005650:	f7ff fe96 	bl	8005380 <LL_APB2_GRP1_EnableClock>

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8005654:	2340      	movs	r3, #64	@ 0x40
 8005656:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005658:	2302      	movs	r3, #2
 800565a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800565c:	2302      	movs	r3, #2
 800565e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005660:	2301      	movs	r3, #1
 8005662:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8005664:	2307      	movs	r3, #7
 8005666:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8005668:	f107 030c 	add.w	r3, r7, #12
 800566c:	4619      	mov	r1, r3
 800566e:	4809      	ldr	r0, [pc, #36]	@ (8005694 <COM1_MspInit+0x5c>)
 8005670:	f001 ff4a 	bl	8007508 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8005674:	2380      	movs	r3, #128	@ 0x80
 8005676:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8005678:	2302      	movs	r3, #2
 800567a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800567c:	2307      	movs	r3, #7
 800567e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8005680:	f107 030c 	add.w	r3, r7, #12
 8005684:	4619      	mov	r1, r3
 8005686:	4803      	ldr	r0, [pc, #12]	@ (8005694 <COM1_MspInit+0x5c>)
 8005688:	f001 ff3e 	bl	8007508 <HAL_GPIO_Init>
}
 800568c:	bf00      	nop
 800568e:	3720      	adds	r7, #32
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	48000400 	.word	0x48000400

08005698 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800569e:	2300      	movs	r3, #0
 80056a0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80056a2:	4b0c      	ldr	r3, [pc, #48]	@ (80056d4 <HAL_Init+0x3c>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a0b      	ldr	r2, [pc, #44]	@ (80056d4 <HAL_Init+0x3c>)
 80056a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056ac:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80056ae:	2003      	movs	r0, #3
 80056b0:	f001 fc08 	bl	8006ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80056b4:	2000      	movs	r0, #0
 80056b6:	f000 f80f 	bl	80056d8 <HAL_InitTick>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d002      	beq.n	80056c6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	71fb      	strb	r3, [r7, #7]
 80056c4:	e001      	b.n	80056ca <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80056c6:	f7ff fb8b 	bl	8004de0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80056ca:	79fb      	ldrb	r3, [r7, #7]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3708      	adds	r7, #8
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	58004000 	.word	0x58004000

080056d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80056e0:	2300      	movs	r3, #0
 80056e2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80056e4:	4b17      	ldr	r3, [pc, #92]	@ (8005744 <HAL_InitTick+0x6c>)
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d024      	beq.n	8005736 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80056ec:	f006 faa2 	bl	800bc34 <HAL_RCC_GetHCLKFreq>
 80056f0:	4602      	mov	r2, r0
 80056f2:	4b14      	ldr	r3, [pc, #80]	@ (8005744 <HAL_InitTick+0x6c>)
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	4619      	mov	r1, r3
 80056f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80056fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8005700:	fbb2 f3f3 	udiv	r3, r2, r3
 8005704:	4618      	mov	r0, r3
 8005706:	f001 fc10 	bl	8006f2a <HAL_SYSTICK_Config>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10f      	bne.n	8005730 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b0f      	cmp	r3, #15
 8005714:	d809      	bhi.n	800572a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005716:	2200      	movs	r2, #0
 8005718:	6879      	ldr	r1, [r7, #4]
 800571a:	f04f 30ff 	mov.w	r0, #4294967295
 800571e:	f001 fbdc 	bl	8006eda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005722:	4a09      	ldr	r2, [pc, #36]	@ (8005748 <HAL_InitTick+0x70>)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6013      	str	r3, [r2, #0]
 8005728:	e007      	b.n	800573a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	73fb      	strb	r3, [r7, #15]
 800572e:	e004      	b.n	800573a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	73fb      	strb	r3, [r7, #15]
 8005734:	e001      	b.n	800573a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800573a:	7bfb      	ldrb	r3, [r7, #15]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	20000034 	.word	0x20000034
 8005748:	20000030 	.word	0x20000030

0800574c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800574c:	b480      	push	{r7}
 800574e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005750:	4b06      	ldr	r3, [pc, #24]	@ (800576c <HAL_IncTick+0x20>)
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	461a      	mov	r2, r3
 8005756:	4b06      	ldr	r3, [pc, #24]	@ (8005770 <HAL_IncTick+0x24>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4413      	add	r3, r2
 800575c:	4a04      	ldr	r2, [pc, #16]	@ (8005770 <HAL_IncTick+0x24>)
 800575e:	6013      	str	r3, [r2, #0]
}
 8005760:	bf00      	nop
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	20000034 	.word	0x20000034
 8005770:	200007f0 	.word	0x200007f0

08005774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005774:	b480      	push	{r7}
 8005776:	af00      	add	r7, sp, #0
  return uwTick;
 8005778:	4b03      	ldr	r3, [pc, #12]	@ (8005788 <HAL_GetTick+0x14>)
 800577a:	681b      	ldr	r3, [r3, #0]
}
 800577c:	4618      	mov	r0, r3
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	200007f0 	.word	0x200007f0

0800578c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800578c:	b480      	push	{r7}
 800578e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8005790:	4b03      	ldr	r3, [pc, #12]	@ (80057a0 <HAL_GetTickPrio+0x14>)
 8005792:	681b      	ldr	r3, [r3, #0]
}
 8005794:	4618      	mov	r0, r3
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	20000030 	.word	0x20000030

080057a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80057ac:	f7ff ffe2 	bl	8005774 <HAL_GetTick>
 80057b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057bc:	d005      	beq.n	80057ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80057be:	4b0a      	ldr	r3, [pc, #40]	@ (80057e8 <HAL_Delay+0x44>)
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	461a      	mov	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	4413      	add	r3, r2
 80057c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80057ca:	bf00      	nop
 80057cc:	f7ff ffd2 	bl	8005774 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d8f7      	bhi.n	80057cc <HAL_Delay+0x28>
  {
  }
}
 80057dc:	bf00      	nop
 80057de:	bf00      	nop
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	20000034 	.word	0x20000034

080057ec <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	431a      	orrs	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8005806:	bf00      	nop
 8005808:	370c      	adds	r7, #12
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005812:	b480      	push	{r7}
 8005814:	b083      	sub	sp, #12
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
 800581a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	431a      	orrs	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	609a      	str	r2, [r3, #8]
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8005848:	4618      	mov	r0, r3
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005854:	b480      	push	{r7}
 8005856:	b087      	sub	sp, #28
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
 8005860:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	3360      	adds	r3, #96	@ 0x60
 8005866:	461a      	mov	r2, r3
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	4413      	add	r3, r2
 800586e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	4b08      	ldr	r3, [pc, #32]	@ (8005898 <LL_ADC_SetOffset+0x44>)
 8005876:	4013      	ands	r3, r2
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800587e:	683a      	ldr	r2, [r7, #0]
 8005880:	430a      	orrs	r2, r1
 8005882:	4313      	orrs	r3, r2
 8005884:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800588c:	bf00      	nop
 800588e:	371c      	adds	r7, #28
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr
 8005898:	03fff000 	.word	0x03fff000

0800589c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	3360      	adds	r3, #96	@ 0x60
 80058aa:	461a      	mov	r2, r3
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3714      	adds	r7, #20
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b087      	sub	sp, #28
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	3360      	adds	r3, #96	@ 0x60
 80058d8:	461a      	mov	r2, r3
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4413      	add	r3, r2
 80058e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	431a      	orrs	r2, r3
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80058f2:	bf00      	nop
 80058f4:	371c      	adds	r7, #28
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr

080058fe <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80058fe:	b480      	push	{r7}
 8005900:	b083      	sub	sp, #12
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800590e:	2b00      	cmp	r3, #0
 8005910:	d101      	bne.n	8005916 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005912:	2301      	movs	r3, #1
 8005914:	e000      	b.n	8005918 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005916:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8005918:	4618      	mov	r0, r3
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005924:	b480      	push	{r7}
 8005926:	b087      	sub	sp, #28
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	3330      	adds	r3, #48	@ 0x30
 8005934:	461a      	mov	r2, r3
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	0a1b      	lsrs	r3, r3, #8
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	f003 030c 	and.w	r3, r3, #12
 8005940:	4413      	add	r3, r2
 8005942:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	f003 031f 	and.w	r3, r3, #31
 800594e:	211f      	movs	r1, #31
 8005950:	fa01 f303 	lsl.w	r3, r1, r3
 8005954:	43db      	mvns	r3, r3
 8005956:	401a      	ands	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	0e9b      	lsrs	r3, r3, #26
 800595c:	f003 011f 	and.w	r1, r3, #31
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f003 031f 	and.w	r3, r3, #31
 8005966:	fa01 f303 	lsl.w	r3, r1, r3
 800596a:	431a      	orrs	r2, r3
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8005970:	bf00      	nop
 8005972:	371c      	adds	r7, #28
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	f003 0303 	and.w	r3, r3, #3
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800598c:	4618      	mov	r0, r3
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059a4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80059ac:	2301      	movs	r3, #1
 80059ae:	e000      	b.n	80059b2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80059be:	b480      	push	{r7}
 80059c0:	b087      	sub	sp, #28
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	60f8      	str	r0, [r7, #12]
 80059c6:	60b9      	str	r1, [r7, #8]
 80059c8:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	3314      	adds	r3, #20
 80059ce:	461a      	mov	r2, r3
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	0e5b      	lsrs	r3, r3, #25
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	f003 0304 	and.w	r3, r3, #4
 80059da:	4413      	add	r3, r2
 80059dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	0d1b      	lsrs	r3, r3, #20
 80059e6:	f003 031f 	and.w	r3, r3, #31
 80059ea:	2107      	movs	r1, #7
 80059ec:	fa01 f303 	lsl.w	r3, r1, r3
 80059f0:	43db      	mvns	r3, r3
 80059f2:	401a      	ands	r2, r3
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	0d1b      	lsrs	r3, r3, #20
 80059f8:	f003 031f 	and.w	r3, r3, #31
 80059fc:	6879      	ldr	r1, [r7, #4]
 80059fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005a02:	431a      	orrs	r2, r3
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8005a08:	bf00      	nop
 8005a0a:	371c      	adds	r7, #28
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a2c:	43db      	mvns	r3, r3
 8005a2e:	401a      	ands	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f003 0318 	and.w	r3, r3, #24
 8005a36:	4908      	ldr	r1, [pc, #32]	@ (8005a58 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005a38:	40d9      	lsrs	r1, r3
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	400b      	ands	r3, r1
 8005a3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a42:	431a      	orrs	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005a4a:	bf00      	nop
 8005a4c:	3714      	adds	r7, #20
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	0007ffff 	.word	0x0007ffff

08005a5c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005a6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	6093      	str	r3, [r2, #8]
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a94:	d101      	bne.n	8005a9a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005a96:	2301      	movs	r3, #1
 8005a98:	e000      	b.n	8005a9c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8005ab8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005abc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ae0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ae4:	d101      	bne.n	8005aea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e000      	b.n	8005aec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005b08:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005b0c:	f043 0201 	orr.w	r2, r3, #1
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d101      	bne.n	8005b38 <LL_ADC_IsEnabled+0x18>
 8005b34:	2301      	movs	r3, #1
 8005b36:	e000      	b.n	8005b3a <LL_ADC_IsEnabled+0x1a>
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	370c      	adds	r7, #12
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr

08005b46 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005b46:	b480      	push	{r7}
 8005b48:	b083      	sub	sp, #12
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005b56:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005b5a:	f043 0204 	orr.w	r2, r3, #4
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005b62:	bf00      	nop
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b083      	sub	sp, #12
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f003 0304 	and.w	r3, r3, #4
 8005b7e:	2b04      	cmp	r3, #4
 8005b80:	d101      	bne.n	8005b86 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005b82:	2301      	movs	r3, #1
 8005b84:	e000      	b.n	8005b88 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f003 0308 	and.w	r3, r3, #8
 8005ba4:	2b08      	cmp	r3, #8
 8005ba6:	d101      	bne.n	8005bac <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e000      	b.n	8005bae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	370c      	adds	r7, #12
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
	...

08005bbc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b088      	sub	sp, #32
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e12e      	b.n	8005e38 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d109      	bne.n	8005bfc <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f7ff f901 	bl	8004df0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7ff ff3d 	bl	8005a80 <LL_ADC_IsDeepPowerDownEnabled>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d004      	beq.n	8005c16 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7ff ff23 	bl	8005a5c <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7ff ff58 	bl	8005ad0 <LL_ADC_IsInternalRegulatorEnabled>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d115      	bne.n	8005c52 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7ff ff3c 	bl	8005aa8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005c30:	4b83      	ldr	r3, [pc, #524]	@ (8005e40 <HAL_ADC_Init+0x284>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	099b      	lsrs	r3, r3, #6
 8005c36:	4a83      	ldr	r2, [pc, #524]	@ (8005e44 <HAL_ADC_Init+0x288>)
 8005c38:	fba2 2303 	umull	r2, r3, r2, r3
 8005c3c:	099b      	lsrs	r3, r3, #6
 8005c3e:	3301      	adds	r3, #1
 8005c40:	005b      	lsls	r3, r3, #1
 8005c42:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005c44:	e002      	b.n	8005c4c <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1f9      	bne.n	8005c46 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7ff ff3a 	bl	8005ad0 <LL_ADC_IsInternalRegulatorEnabled>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d10d      	bne.n	8005c7e <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c66:	f043 0210 	orr.w	r2, r3, #16
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c72:	f043 0201 	orr.w	r2, r3, #1
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7ff ff73 	bl	8005b6e <LL_ADC_REG_IsConversionOngoing>
 8005c88:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c8e:	f003 0310 	and.w	r3, r3, #16
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f040 80c7 	bne.w	8005e26 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	f040 80c3 	bne.w	8005e26 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ca4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005ca8:	f043 0202 	orr.w	r2, r3, #2
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7ff ff33 	bl	8005b20 <LL_ADC_IsEnabled>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10b      	bne.n	8005cd8 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005cc0:	4861      	ldr	r0, [pc, #388]	@ (8005e48 <HAL_ADC_Init+0x28c>)
 8005cc2:	f7ff ff2d 	bl	8005b20 <LL_ADC_IsEnabled>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d105      	bne.n	8005cd8 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	485e      	ldr	r0, [pc, #376]	@ (8005e4c <HAL_ADC_Init+0x290>)
 8005cd4:	f7ff fd8a 	bl	80057ec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	7e5b      	ldrb	r3, [r3, #25]
 8005cdc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005ce2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005ce8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005cee:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005cf6:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8005cf8:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005cfa:	69ba      	ldr	r2, [r7, #24]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d106      	bne.n	8005d18 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	045b      	lsls	r3, r3, #17
 8005d12:	69ba      	ldr	r2, [r7, #24]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d009      	beq.n	8005d34 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d24:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d2c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005d2e:	69ba      	ldr	r2, [r7, #24]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68da      	ldr	r2, [r3, #12]
 8005d3a:	4b45      	ldr	r3, [pc, #276]	@ (8005e50 <HAL_ADC_Init+0x294>)
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	6812      	ldr	r2, [r2, #0]
 8005d42:	69b9      	ldr	r1, [r7, #24]
 8005d44:	430b      	orrs	r3, r1
 8005d46:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7ff ff0e 	bl	8005b6e <LL_ADC_REG_IsConversionOngoing>
 8005d52:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f7ff ff1b 	bl	8005b94 <LL_ADC_INJ_IsConversionOngoing>
 8005d5e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d13d      	bne.n	8005de2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d13a      	bne.n	8005de2 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005d70:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005d78:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d88:	f023 0302 	bic.w	r3, r3, #2
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	6812      	ldr	r2, [r2, #0]
 8005d90:	69b9      	ldr	r1, [r7, #24]
 8005d92:	430b      	orrs	r3, r1
 8005d94:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d118      	bne.n	8005dd2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005daa:	f023 0304 	bic.w	r3, r3, #4
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005db6:	4311      	orrs	r1, r2
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005dbc:	4311      	orrs	r1, r2
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	431a      	orrs	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f042 0201 	orr.w	r2, r2, #1
 8005dce:	611a      	str	r2, [r3, #16]
 8005dd0:	e007      	b.n	8005de2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	691a      	ldr	r2, [r3, #16]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f022 0201 	bic.w	r2, r2, #1
 8005de0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d10c      	bne.n	8005e04 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005df0:	f023 010f 	bic.w	r1, r3, #15
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	1e5a      	subs	r2, r3, #1
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e02:	e007      	b.n	8005e14 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f022 020f 	bic.w	r2, r2, #15
 8005e12:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e18:	f023 0303 	bic.w	r3, r3, #3
 8005e1c:	f043 0201 	orr.w	r2, r3, #1
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	655a      	str	r2, [r3, #84]	@ 0x54
 8005e24:	e007      	b.n	8005e36 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e2a:	f043 0210 	orr.w	r2, r3, #16
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005e36:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3720      	adds	r7, #32
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	20000010 	.word	0x20000010
 8005e44:	053e2d63 	.word	0x053e2d63
 8005e48:	50040000 	.word	0x50040000
 8005e4c:	50040300 	.word	0x50040300
 8005e50:	fff0c007 	.word	0xfff0c007

08005e54 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7ff fe82 	bl	8005b6e <LL_ADC_REG_IsConversionOngoing>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d167      	bne.n	8005f40 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d101      	bne.n	8005e7e <HAL_ADC_Start_DMA+0x2a>
 8005e7a:	2302      	movs	r3, #2
 8005e7c:	e063      	b.n	8005f46 <HAL_ADC_Start_DMA+0xf2>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f000 fe0c 	bl	8006aa4 <ADC_Enable>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005e90:	7dfb      	ldrb	r3, [r7, #23]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d14f      	bne.n	8005f36 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e9a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005e9e:	f023 0301 	bic.w	r3, r3, #1
 8005ea2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d006      	beq.n	8005ec4 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eba:	f023 0206 	bic.w	r2, r3, #6
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	659a      	str	r2, [r3, #88]	@ 0x58
 8005ec2:	e002      	b.n	8005eca <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ece:	4a20      	ldr	r2, [pc, #128]	@ (8005f50 <HAL_ADC_Start_DMA+0xfc>)
 8005ed0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ed6:	4a1f      	ldr	r2, [pc, #124]	@ (8005f54 <HAL_ADC_Start_DMA+0x100>)
 8005ed8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ede:	4a1e      	ldr	r2, [pc, #120]	@ (8005f58 <HAL_ADC_Start_DMA+0x104>)
 8005ee0:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	221c      	movs	r2, #28
 8005ee8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	685a      	ldr	r2, [r3, #4]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f042 0210 	orr.w	r2, r2, #16
 8005f00:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68da      	ldr	r2, [r3, #12]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f042 0201 	orr.w	r2, r2, #1
 8005f10:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	3340      	adds	r3, #64	@ 0x40
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f001 f8b7 	bl	8007094 <HAL_DMA_Start_IT>
 8005f26:	4603      	mov	r3, r0
 8005f28:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7ff fe09 	bl	8005b46 <LL_ADC_REG_StartConversion>
 8005f34:	e006      	b.n	8005f44 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005f3e:	e001      	b.n	8005f44 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005f40:	2302      	movs	r3, #2
 8005f42:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005f44:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3718      	adds	r7, #24
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	08006b99 	.word	0x08006b99
 8005f54:	08006c71 	.word	0x08006c71
 8005f58:	08006c8d 	.word	0x08006c8d

08005f5c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b088      	sub	sp, #32
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005f64:	2300      	movs	r3, #0
 8005f66:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	f003 0302 	and.w	r3, r3, #2
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d017      	beq.n	8005fb2 <HAL_ADC_IRQHandler+0x56>
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d012      	beq.n	8005fb2 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f90:	f003 0310 	and.w	r3, r3, #16
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d105      	bne.n	8005fa4 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f9c:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 feb3 	bl	8006d10 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2202      	movs	r2, #2
 8005fb0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	f003 0304 	and.w	r3, r3, #4
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d004      	beq.n	8005fc6 <HAL_ADC_IRQHandler+0x6a>
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	f003 0304 	and.w	r3, r3, #4
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d109      	bne.n	8005fda <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d05d      	beq.n	800608c <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	f003 0308 	and.w	r3, r3, #8
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d058      	beq.n	800608c <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fde:	f003 0310 	and.w	r3, r3, #16
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d105      	bne.n	8005ff2 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fea:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7ff fc81 	bl	80058fe <LL_ADC_REG_IsTriggerSourceSWStart>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d03d      	beq.n	800607e <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800600c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006010:	d035      	beq.n	800607e <HAL_ADC_IRQHandler+0x122>
#endif /* ADC_SUPPORT_2_5_MSPS */
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0308 	and.w	r3, r3, #8
 800601c:	2b08      	cmp	r3, #8
 800601e:	d12e      	bne.n	800607e <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4618      	mov	r0, r3
 8006026:	f7ff fda2 	bl	8005b6e <LL_ADC_REG_IsConversionOngoing>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d11a      	bne.n	8006066 <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	685a      	ldr	r2, [r3, #4]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f022 020c 	bic.w	r2, r2, #12
 800603e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006044:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006050:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006054:	2b00      	cmp	r3, #0
 8006056:	d112      	bne.n	800607e <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800605c:	f043 0201 	orr.w	r2, r3, #1
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	655a      	str	r2, [r3, #84]	@ 0x54
 8006064:	e00b      	b.n	800607e <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800606a:	f043 0210 	orr.w	r2, r3, #16
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006076:	f043 0201 	orr.w	r2, r3, #1
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f922 	bl	80062c8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	220c      	movs	r2, #12
 800608a:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	f003 0320 	and.w	r3, r3, #32
 8006092:	2b00      	cmp	r3, #0
 8006094:	d004      	beq.n	80060a0 <HAL_ADC_IRQHandler+0x144>
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f003 0320 	and.w	r3, r3, #32
 800609c:	2b00      	cmp	r3, #0
 800609e:	d109      	bne.n	80060b4 <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d074      	beq.n	8006194 <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d06f      	beq.n	8006194 <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060b8:	f003 0310 	and.w	r3, r3, #16
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d105      	bne.n	80060cc <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060c4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7ff fc61 	bl	8005998 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80060d6:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4618      	mov	r0, r3
 80060de:	f7ff fc0e 	bl	80058fe <LL_ADC_REG_IsTriggerSourceSWStart>
 80060e2:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d049      	beq.n	8006186 <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d007      	beq.n	800610c <HAL_ADC_IRQHandler+0x1b0>
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d041      	beq.n	8006186 <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8006108:	2b00      	cmp	r3, #0
 800610a:	d13c      	bne.n	8006186 <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006116:	2b40      	cmp	r3, #64	@ 0x40
 8006118:	d135      	bne.n	8006186 <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d12e      	bne.n	8006186 <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4618      	mov	r0, r3
 800612e:	f7ff fd31 	bl	8005b94 <LL_ADC_INJ_IsConversionOngoing>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d11a      	bne.n	800616e <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006146:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800614c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800615c:	2b00      	cmp	r3, #0
 800615e:	d112      	bne.n	8006186 <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006164:	f043 0201 	orr.w	r2, r3, #1
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	655a      	str	r2, [r3, #84]	@ 0x54
 800616c:	e00b      	b.n	8006186 <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006172:	f043 0210 	orr.w	r2, r3, #16
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800617e:	f043 0201 	orr.w	r2, r3, #1
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 fd9a 	bl	8006cc0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2260      	movs	r2, #96	@ 0x60
 8006192:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800619a:	2b00      	cmp	r3, #0
 800619c:	d011      	beq.n	80061c2 <HAL_ADC_IRQHandler+0x266>
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00c      	beq.n	80061c2 <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061ac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 f89b 	bl	80062f0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2280      	movs	r2, #128	@ 0x80
 80061c0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d012      	beq.n	80061f2 <HAL_ADC_IRQHandler+0x296>
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00d      	beq.n	80061f2 <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061da:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 fd80 	bl	8006ce8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80061f0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d012      	beq.n	8006222 <HAL_ADC_IRQHandler+0x2c6>
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00d      	beq.n	8006222 <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800620a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 fd72 	bl	8006cfc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006220:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	f003 0310 	and.w	r3, r3, #16
 8006228:	2b00      	cmp	r3, #0
 800622a:	d02b      	beq.n	8006284 <HAL_ADC_IRQHandler+0x328>
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	f003 0310 	and.w	r3, r3, #16
 8006232:	2b00      	cmp	r3, #0
 8006234:	d026      	beq.n	8006284 <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800623a:	2b00      	cmp	r3, #0
 800623c:	d102      	bne.n	8006244 <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 800623e:	2301      	movs	r3, #1
 8006240:	61fb      	str	r3, [r7, #28]
 8006242:	e009      	b.n	8006258 <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4618      	mov	r0, r3
 800624a:	f7ff fb97 	bl	800597c <LL_ADC_REG_GetDMATransfer>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 8006254:	2301      	movs	r3, #1
 8006256:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d10e      	bne.n	800627c <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006262:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800626e:	f043 0202 	orr.w	r2, r3, #2
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f844 	bl	8006304 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2210      	movs	r2, #16
 8006282:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800628a:	2b00      	cmp	r3, #0
 800628c:	d018      	beq.n	80062c0 <HAL_ADC_IRQHandler+0x364>
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006294:	2b00      	cmp	r3, #0
 8006296:	d013      	beq.n	80062c0 <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800629c:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062a8:	f043 0208 	orr.w	r2, r3, #8
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80062b8:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 fd0a 	bl	8006cd4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 80062c0:	bf00      	nop
 80062c2:	3720      	adds	r7, #32
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800630c:	bf00      	nop
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b0b6      	sub	sp, #216	@ 0xd8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006322:	2300      	movs	r3, #0
 8006324:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8006328:	2300      	movs	r3, #0
 800632a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006332:	2b01      	cmp	r3, #1
 8006334:	d101      	bne.n	800633a <HAL_ADC_ConfigChannel+0x22>
 8006336:	2302      	movs	r3, #2
 8006338:	e39f      	b.n	8006a7a <HAL_ADC_ConfigChannel+0x762>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4618      	mov	r0, r3
 8006348:	f7ff fc11 	bl	8005b6e <LL_ADC_REG_IsConversionOngoing>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	f040 8384 	bne.w	8006a5c <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6818      	ldr	r0, [r3, #0]
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	6859      	ldr	r1, [r3, #4]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	461a      	mov	r2, r3
 8006362:	f7ff fadf 	bl	8005924 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4618      	mov	r0, r3
 800636c:	f7ff fbff 	bl	8005b6e <LL_ADC_REG_IsConversionOngoing>
 8006370:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4618      	mov	r0, r3
 800637a:	f7ff fc0b 	bl	8005b94 <LL_ADC_INJ_IsConversionOngoing>
 800637e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006382:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006386:	2b00      	cmp	r3, #0
 8006388:	f040 81a6 	bne.w	80066d8 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800638c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006390:	2b00      	cmp	r3, #0
 8006392:	f040 81a1 	bne.w	80066d8 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6818      	ldr	r0, [r3, #0]
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	6819      	ldr	r1, [r3, #0]
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	461a      	mov	r2, r3
 80063a4:	f7ff fb0b 	bl	80059be <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	695a      	ldr	r2, [r3, #20]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	08db      	lsrs	r3, r3, #3
 80063b4:	f003 0303 	and.w	r3, r3, #3
 80063b8:	005b      	lsls	r3, r3, #1
 80063ba:	fa02 f303 	lsl.w	r3, r2, r3
 80063be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	2b04      	cmp	r3, #4
 80063c8:	d00a      	beq.n	80063e0 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6818      	ldr	r0, [r3, #0]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	6919      	ldr	r1, [r3, #16]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80063da:	f7ff fa3b 	bl	8005854 <LL_ADC_SetOffset>
 80063de:	e17b      	b.n	80066d8 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2100      	movs	r1, #0
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7ff fa58 	bl	800589c <LL_ADC_GetOffsetChannel>
 80063ec:	4603      	mov	r3, r0
 80063ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10a      	bne.n	800640c <HAL_ADC_ConfigChannel+0xf4>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2100      	movs	r1, #0
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7ff fa4d 	bl	800589c <LL_ADC_GetOffsetChannel>
 8006402:	4603      	mov	r3, r0
 8006404:	0e9b      	lsrs	r3, r3, #26
 8006406:	f003 021f 	and.w	r2, r3, #31
 800640a:	e01e      	b.n	800644a <HAL_ADC_ConfigChannel+0x132>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2100      	movs	r1, #0
 8006412:	4618      	mov	r0, r3
 8006414:	f7ff fa42 	bl	800589c <LL_ADC_GetOffsetChannel>
 8006418:	4603      	mov	r3, r0
 800641a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800641e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006422:	fa93 f3a3 	rbit	r3, r3
 8006426:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800642a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800642e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006432:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006436:	2b00      	cmp	r3, #0
 8006438:	d101      	bne.n	800643e <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 800643a:	2320      	movs	r3, #32
 800643c:	e004      	b.n	8006448 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 800643e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006442:	fab3 f383 	clz	r3, r3
 8006446:	b2db      	uxtb	r3, r3
 8006448:	461a      	mov	r2, r3
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006452:	2b00      	cmp	r3, #0
 8006454:	d105      	bne.n	8006462 <HAL_ADC_ConfigChannel+0x14a>
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	0e9b      	lsrs	r3, r3, #26
 800645c:	f003 031f 	and.w	r3, r3, #31
 8006460:	e018      	b.n	8006494 <HAL_ADC_ConfigChannel+0x17c>
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800646a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800646e:	fa93 f3a3 	rbit	r3, r3
 8006472:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8006476:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800647a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800647e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8006486:	2320      	movs	r3, #32
 8006488:	e004      	b.n	8006494 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 800648a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800648e:	fab3 f383 	clz	r3, r3
 8006492:	b2db      	uxtb	r3, r3
 8006494:	429a      	cmp	r2, r3
 8006496:	d106      	bne.n	80064a6 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2200      	movs	r2, #0
 800649e:	2100      	movs	r1, #0
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7ff fa11 	bl	80058c8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2101      	movs	r1, #1
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7ff f9f5 	bl	800589c <LL_ADC_GetOffsetChannel>
 80064b2:	4603      	mov	r3, r0
 80064b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10a      	bne.n	80064d2 <HAL_ADC_ConfigChannel+0x1ba>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2101      	movs	r1, #1
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7ff f9ea 	bl	800589c <LL_ADC_GetOffsetChannel>
 80064c8:	4603      	mov	r3, r0
 80064ca:	0e9b      	lsrs	r3, r3, #26
 80064cc:	f003 021f 	and.w	r2, r3, #31
 80064d0:	e01e      	b.n	8006510 <HAL_ADC_ConfigChannel+0x1f8>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2101      	movs	r1, #1
 80064d8:	4618      	mov	r0, r3
 80064da:	f7ff f9df 	bl	800589c <LL_ADC_GetOffsetChannel>
 80064de:	4603      	mov	r3, r0
 80064e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80064e8:	fa93 f3a3 	rbit	r3, r3
 80064ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80064f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80064f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80064f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d101      	bne.n	8006504 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8006500:	2320      	movs	r3, #32
 8006502:	e004      	b.n	800650e <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8006504:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006508:	fab3 f383 	clz	r3, r3
 800650c:	b2db      	uxtb	r3, r3
 800650e:	461a      	mov	r2, r3
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006518:	2b00      	cmp	r3, #0
 800651a:	d105      	bne.n	8006528 <HAL_ADC_ConfigChannel+0x210>
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	0e9b      	lsrs	r3, r3, #26
 8006522:	f003 031f 	and.w	r3, r3, #31
 8006526:	e018      	b.n	800655a <HAL_ADC_ConfigChannel+0x242>
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006530:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006534:	fa93 f3a3 	rbit	r3, r3
 8006538:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800653c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006540:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8006544:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006548:	2b00      	cmp	r3, #0
 800654a:	d101      	bne.n	8006550 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 800654c:	2320      	movs	r3, #32
 800654e:	e004      	b.n	800655a <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8006550:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006554:	fab3 f383 	clz	r3, r3
 8006558:	b2db      	uxtb	r3, r3
 800655a:	429a      	cmp	r2, r3
 800655c:	d106      	bne.n	800656c <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2200      	movs	r2, #0
 8006564:	2101      	movs	r1, #1
 8006566:	4618      	mov	r0, r3
 8006568:	f7ff f9ae 	bl	80058c8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2102      	movs	r1, #2
 8006572:	4618      	mov	r0, r3
 8006574:	f7ff f992 	bl	800589c <LL_ADC_GetOffsetChannel>
 8006578:	4603      	mov	r3, r0
 800657a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800657e:	2b00      	cmp	r3, #0
 8006580:	d10a      	bne.n	8006598 <HAL_ADC_ConfigChannel+0x280>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2102      	movs	r1, #2
 8006588:	4618      	mov	r0, r3
 800658a:	f7ff f987 	bl	800589c <LL_ADC_GetOffsetChannel>
 800658e:	4603      	mov	r3, r0
 8006590:	0e9b      	lsrs	r3, r3, #26
 8006592:	f003 021f 	and.w	r2, r3, #31
 8006596:	e01e      	b.n	80065d6 <HAL_ADC_ConfigChannel+0x2be>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2102      	movs	r1, #2
 800659e:	4618      	mov	r0, r3
 80065a0:	f7ff f97c 	bl	800589c <LL_ADC_GetOffsetChannel>
 80065a4:	4603      	mov	r3, r0
 80065a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065ae:	fa93 f3a3 	rbit	r3, r3
 80065b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80065b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80065ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80065be:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 80065c6:	2320      	movs	r3, #32
 80065c8:	e004      	b.n	80065d4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80065ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80065ce:	fab3 f383 	clz	r3, r3
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	461a      	mov	r2, r3
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d105      	bne.n	80065ee <HAL_ADC_ConfigChannel+0x2d6>
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	0e9b      	lsrs	r3, r3, #26
 80065e8:	f003 031f 	and.w	r3, r3, #31
 80065ec:	e016      	b.n	800661c <HAL_ADC_ConfigChannel+0x304>
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80065fa:	fa93 f3a3 	rbit	r3, r3
 80065fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8006600:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006602:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8006606:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800660a:	2b00      	cmp	r3, #0
 800660c:	d101      	bne.n	8006612 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 800660e:	2320      	movs	r3, #32
 8006610:	e004      	b.n	800661c <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8006612:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006616:	fab3 f383 	clz	r3, r3
 800661a:	b2db      	uxtb	r3, r3
 800661c:	429a      	cmp	r2, r3
 800661e:	d106      	bne.n	800662e <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2200      	movs	r2, #0
 8006626:	2102      	movs	r1, #2
 8006628:	4618      	mov	r0, r3
 800662a:	f7ff f94d 	bl	80058c8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2103      	movs	r1, #3
 8006634:	4618      	mov	r0, r3
 8006636:	f7ff f931 	bl	800589c <LL_ADC_GetOffsetChannel>
 800663a:	4603      	mov	r3, r0
 800663c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10a      	bne.n	800665a <HAL_ADC_ConfigChannel+0x342>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2103      	movs	r1, #3
 800664a:	4618      	mov	r0, r3
 800664c:	f7ff f926 	bl	800589c <LL_ADC_GetOffsetChannel>
 8006650:	4603      	mov	r3, r0
 8006652:	0e9b      	lsrs	r3, r3, #26
 8006654:	f003 021f 	and.w	r2, r3, #31
 8006658:	e017      	b.n	800668a <HAL_ADC_ConfigChannel+0x372>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2103      	movs	r1, #3
 8006660:	4618      	mov	r0, r3
 8006662:	f7ff f91b 	bl	800589c <LL_ADC_GetOffsetChannel>
 8006666:	4603      	mov	r3, r0
 8006668:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800666a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800666c:	fa93 f3a3 	rbit	r3, r3
 8006670:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8006672:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006674:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8006676:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006678:	2b00      	cmp	r3, #0
 800667a:	d101      	bne.n	8006680 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 800667c:	2320      	movs	r3, #32
 800667e:	e003      	b.n	8006688 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8006680:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006682:	fab3 f383 	clz	r3, r3
 8006686:	b2db      	uxtb	r3, r3
 8006688:	461a      	mov	r2, r3
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006692:	2b00      	cmp	r3, #0
 8006694:	d105      	bne.n	80066a2 <HAL_ADC_ConfigChannel+0x38a>
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	0e9b      	lsrs	r3, r3, #26
 800669c:	f003 031f 	and.w	r3, r3, #31
 80066a0:	e011      	b.n	80066c6 <HAL_ADC_ConfigChannel+0x3ae>
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80066aa:	fa93 f3a3 	rbit	r3, r3
 80066ae:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80066b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80066b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80066b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d101      	bne.n	80066be <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 80066ba:	2320      	movs	r3, #32
 80066bc:	e003      	b.n	80066c6 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 80066be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066c0:	fab3 f383 	clz	r3, r3
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d106      	bne.n	80066d8 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2200      	movs	r2, #0
 80066d0:	2103      	movs	r1, #3
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7ff f8f8 	bl	80058c8 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4618      	mov	r0, r3
 80066de:	f7ff fa1f 	bl	8005b20 <LL_ADC_IsEnabled>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f040 81c2 	bne.w	8006a6e <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6818      	ldr	r0, [r3, #0]
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	6819      	ldr	r1, [r3, #0]
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	461a      	mov	r2, r3
 80066f8:	f7ff f98c 	bl	8005a14 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	4a8e      	ldr	r2, [pc, #568]	@ (800693c <HAL_ADC_ConfigChannel+0x624>)
 8006702:	4293      	cmp	r3, r2
 8006704:	f040 8130 	bne.w	8006968 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10b      	bne.n	8006730 <HAL_ADC_ConfigChannel+0x418>
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	0e9b      	lsrs	r3, r3, #26
 800671e:	3301      	adds	r3, #1
 8006720:	f003 031f 	and.w	r3, r3, #31
 8006724:	2b09      	cmp	r3, #9
 8006726:	bf94      	ite	ls
 8006728:	2301      	movls	r3, #1
 800672a:	2300      	movhi	r3, #0
 800672c:	b2db      	uxtb	r3, r3
 800672e:	e019      	b.n	8006764 <HAL_ADC_ConfigChannel+0x44c>
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006736:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006738:	fa93 f3a3 	rbit	r3, r3
 800673c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800673e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006740:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8006742:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006744:	2b00      	cmp	r3, #0
 8006746:	d101      	bne.n	800674c <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8006748:	2320      	movs	r3, #32
 800674a:	e003      	b.n	8006754 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 800674c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800674e:	fab3 f383 	clz	r3, r3
 8006752:	b2db      	uxtb	r3, r3
 8006754:	3301      	adds	r3, #1
 8006756:	f003 031f 	and.w	r3, r3, #31
 800675a:	2b09      	cmp	r3, #9
 800675c:	bf94      	ite	ls
 800675e:	2301      	movls	r3, #1
 8006760:	2300      	movhi	r3, #0
 8006762:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006764:	2b00      	cmp	r3, #0
 8006766:	d079      	beq.n	800685c <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006770:	2b00      	cmp	r3, #0
 8006772:	d107      	bne.n	8006784 <HAL_ADC_ConfigChannel+0x46c>
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	0e9b      	lsrs	r3, r3, #26
 800677a:	3301      	adds	r3, #1
 800677c:	069b      	lsls	r3, r3, #26
 800677e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006782:	e015      	b.n	80067b0 <HAL_ADC_ConfigChannel+0x498>
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800678a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800678c:	fa93 f3a3 	rbit	r3, r3
 8006790:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8006792:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006794:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8006796:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006798:	2b00      	cmp	r3, #0
 800679a:	d101      	bne.n	80067a0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800679c:	2320      	movs	r3, #32
 800679e:	e003      	b.n	80067a8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80067a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067a2:	fab3 f383 	clz	r3, r3
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	3301      	adds	r3, #1
 80067aa:	069b      	lsls	r3, r3, #26
 80067ac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d109      	bne.n	80067d0 <HAL_ADC_ConfigChannel+0x4b8>
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	0e9b      	lsrs	r3, r3, #26
 80067c2:	3301      	adds	r3, #1
 80067c4:	f003 031f 	and.w	r3, r3, #31
 80067c8:	2101      	movs	r1, #1
 80067ca:	fa01 f303 	lsl.w	r3, r1, r3
 80067ce:	e017      	b.n	8006800 <HAL_ADC_ConfigChannel+0x4e8>
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067d8:	fa93 f3a3 	rbit	r3, r3
 80067dc:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80067de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80067e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d101      	bne.n	80067ec <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 80067e8:	2320      	movs	r3, #32
 80067ea:	e003      	b.n	80067f4 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 80067ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067ee:	fab3 f383 	clz	r3, r3
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	3301      	adds	r3, #1
 80067f6:	f003 031f 	and.w	r3, r3, #31
 80067fa:	2101      	movs	r1, #1
 80067fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006800:	ea42 0103 	orr.w	r1, r2, r3
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10a      	bne.n	8006826 <HAL_ADC_ConfigChannel+0x50e>
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	0e9b      	lsrs	r3, r3, #26
 8006816:	3301      	adds	r3, #1
 8006818:	f003 021f 	and.w	r2, r3, #31
 800681c:	4613      	mov	r3, r2
 800681e:	005b      	lsls	r3, r3, #1
 8006820:	4413      	add	r3, r2
 8006822:	051b      	lsls	r3, r3, #20
 8006824:	e018      	b.n	8006858 <HAL_ADC_ConfigChannel+0x540>
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800682c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800682e:	fa93 f3a3 	rbit	r3, r3
 8006832:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8006834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006836:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8006838:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800683e:	2320      	movs	r3, #32
 8006840:	e003      	b.n	800684a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8006842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006844:	fab3 f383 	clz	r3, r3
 8006848:	b2db      	uxtb	r3, r3
 800684a:	3301      	adds	r3, #1
 800684c:	f003 021f 	and.w	r2, r3, #31
 8006850:	4613      	mov	r3, r2
 8006852:	005b      	lsls	r3, r3, #1
 8006854:	4413      	add	r3, r2
 8006856:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006858:	430b      	orrs	r3, r1
 800685a:	e080      	b.n	800695e <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006864:	2b00      	cmp	r3, #0
 8006866:	d107      	bne.n	8006878 <HAL_ADC_ConfigChannel+0x560>
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	0e9b      	lsrs	r3, r3, #26
 800686e:	3301      	adds	r3, #1
 8006870:	069b      	lsls	r3, r3, #26
 8006872:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006876:	e015      	b.n	80068a4 <HAL_ADC_ConfigChannel+0x58c>
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800687e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006880:	fa93 f3a3 	rbit	r3, r3
 8006884:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8006886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006888:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800688a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688c:	2b00      	cmp	r3, #0
 800688e:	d101      	bne.n	8006894 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8006890:	2320      	movs	r3, #32
 8006892:	e003      	b.n	800689c <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8006894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006896:	fab3 f383 	clz	r3, r3
 800689a:	b2db      	uxtb	r3, r3
 800689c:	3301      	adds	r3, #1
 800689e:	069b      	lsls	r3, r3, #26
 80068a0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d109      	bne.n	80068c4 <HAL_ADC_ConfigChannel+0x5ac>
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	0e9b      	lsrs	r3, r3, #26
 80068b6:	3301      	adds	r3, #1
 80068b8:	f003 031f 	and.w	r3, r3, #31
 80068bc:	2101      	movs	r1, #1
 80068be:	fa01 f303 	lsl.w	r3, r1, r3
 80068c2:	e017      	b.n	80068f4 <HAL_ADC_ConfigChannel+0x5dc>
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068ca:	6a3b      	ldr	r3, [r7, #32]
 80068cc:	fa93 f3a3 	rbit	r3, r3
 80068d0:	61fb      	str	r3, [r7, #28]
  return result;
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80068d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d101      	bne.n	80068e0 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 80068dc:	2320      	movs	r3, #32
 80068de:	e003      	b.n	80068e8 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 80068e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e2:	fab3 f383 	clz	r3, r3
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	3301      	adds	r3, #1
 80068ea:	f003 031f 	and.w	r3, r3, #31
 80068ee:	2101      	movs	r1, #1
 80068f0:	fa01 f303 	lsl.w	r3, r1, r3
 80068f4:	ea42 0103 	orr.w	r1, r2, r3
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10d      	bne.n	8006920 <HAL_ADC_ConfigChannel+0x608>
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	0e9b      	lsrs	r3, r3, #26
 800690a:	3301      	adds	r3, #1
 800690c:	f003 021f 	and.w	r2, r3, #31
 8006910:	4613      	mov	r3, r2
 8006912:	005b      	lsls	r3, r3, #1
 8006914:	4413      	add	r3, r2
 8006916:	3b1e      	subs	r3, #30
 8006918:	051b      	lsls	r3, r3, #20
 800691a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800691e:	e01d      	b.n	800695c <HAL_ADC_ConfigChannel+0x644>
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	fa93 f3a3 	rbit	r3, r3
 800692c:	613b      	str	r3, [r7, #16]
  return result;
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d103      	bne.n	8006940 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8006938:	2320      	movs	r3, #32
 800693a:	e005      	b.n	8006948 <HAL_ADC_ConfigChannel+0x630>
 800693c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	fab3 f383 	clz	r3, r3
 8006946:	b2db      	uxtb	r3, r3
 8006948:	3301      	adds	r3, #1
 800694a:	f003 021f 	and.w	r2, r3, #31
 800694e:	4613      	mov	r3, r2
 8006950:	005b      	lsls	r3, r3, #1
 8006952:	4413      	add	r3, r2
 8006954:	3b1e      	subs	r3, #30
 8006956:	051b      	lsls	r3, r3, #20
 8006958:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800695c:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 800695e:	683a      	ldr	r2, [r7, #0]
 8006960:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006962:	4619      	mov	r1, r3
 8006964:	f7ff f82b 	bl	80059be <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	4b45      	ldr	r3, [pc, #276]	@ (8006a84 <HAL_ADC_ConfigChannel+0x76c>)
 800696e:	4013      	ands	r3, r2
 8006970:	2b00      	cmp	r3, #0
 8006972:	d07c      	beq.n	8006a6e <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006974:	4844      	ldr	r0, [pc, #272]	@ (8006a88 <HAL_ADC_ConfigChannel+0x770>)
 8006976:	f7fe ff5f 	bl	8005838 <LL_ADC_GetCommonPathInternalCh>
 800697a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800697e:	4843      	ldr	r0, [pc, #268]	@ (8006a8c <HAL_ADC_ConfigChannel+0x774>)
 8006980:	f7ff f8ce 	bl	8005b20 <LL_ADC_IsEnabled>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d15e      	bne.n	8006a48 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a40      	ldr	r2, [pc, #256]	@ (8006a90 <HAL_ADC_ConfigChannel+0x778>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d127      	bne.n	80069e4 <HAL_ADC_ConfigChannel+0x6cc>
 8006994:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006998:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d121      	bne.n	80069e4 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a39      	ldr	r2, [pc, #228]	@ (8006a8c <HAL_ADC_ConfigChannel+0x774>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d161      	bne.n	8006a6e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80069aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80069ae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80069b2:	4619      	mov	r1, r3
 80069b4:	4834      	ldr	r0, [pc, #208]	@ (8006a88 <HAL_ADC_ConfigChannel+0x770>)
 80069b6:	f7fe ff2c 	bl	8005812 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80069ba:	4b36      	ldr	r3, [pc, #216]	@ (8006a94 <HAL_ADC_ConfigChannel+0x77c>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	099b      	lsrs	r3, r3, #6
 80069c0:	4a35      	ldr	r2, [pc, #212]	@ (8006a98 <HAL_ADC_ConfigChannel+0x780>)
 80069c2:	fba2 2303 	umull	r2, r3, r2, r3
 80069c6:	099b      	lsrs	r3, r3, #6
 80069c8:	1c5a      	adds	r2, r3, #1
 80069ca:	4613      	mov	r3, r2
 80069cc:	005b      	lsls	r3, r3, #1
 80069ce:	4413      	add	r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80069d4:	e002      	b.n	80069dc <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	3b01      	subs	r3, #1
 80069da:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1f9      	bne.n	80069d6 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80069e2:	e044      	b.n	8006a6e <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a2c      	ldr	r2, [pc, #176]	@ (8006a9c <HAL_ADC_ConfigChannel+0x784>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d113      	bne.n	8006a16 <HAL_ADC_ConfigChannel+0x6fe>
 80069ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80069f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10d      	bne.n	8006a16 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a23      	ldr	r2, [pc, #140]	@ (8006a8c <HAL_ADC_ConfigChannel+0x774>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d134      	bne.n	8006a6e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006a04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006a08:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	481e      	ldr	r0, [pc, #120]	@ (8006a88 <HAL_ADC_ConfigChannel+0x770>)
 8006a10:	f7fe feff 	bl	8005812 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006a14:	e02b      	b.n	8006a6e <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a21      	ldr	r2, [pc, #132]	@ (8006aa0 <HAL_ADC_ConfigChannel+0x788>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d126      	bne.n	8006a6e <HAL_ADC_ConfigChannel+0x756>
 8006a20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006a24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d120      	bne.n	8006a6e <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a16      	ldr	r2, [pc, #88]	@ (8006a8c <HAL_ADC_ConfigChannel+0x774>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d11b      	bne.n	8006a6e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8006a36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006a3a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006a3e:	4619      	mov	r1, r3
 8006a40:	4811      	ldr	r0, [pc, #68]	@ (8006a88 <HAL_ADC_ConfigChannel+0x770>)
 8006a42:	f7fe fee6 	bl	8005812 <LL_ADC_SetCommonPathInternalCh>
 8006a46:	e012      	b.n	8006a6e <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a4c:	f043 0220 	orr.w	r2, r3, #32
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8006a5a:	e008      	b.n	8006a6e <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a60:	f043 0220 	orr.w	r2, r3, #32
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8006a76:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	37d8      	adds	r7, #216	@ 0xd8
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	80080000 	.word	0x80080000
 8006a88:	50040300 	.word	0x50040300
 8006a8c:	50040000 	.word	0x50040000
 8006a90:	c7520000 	.word	0xc7520000
 8006a94:	20000010 	.word	0x20000010
 8006a98:	053e2d63 	.word	0x053e2d63
 8006a9c:	cb840000 	.word	0xcb840000
 8006aa0:	80000001 	.word	0x80000001

08006aa4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006aac:	2300      	movs	r3, #0
 8006aae:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7ff f833 	bl	8005b20 <LL_ADC_IsEnabled>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d15e      	bne.n	8006b7e <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689a      	ldr	r2, [r3, #8]
 8006ac6:	4b30      	ldr	r3, [pc, #192]	@ (8006b88 <ADC_Enable+0xe4>)
 8006ac8:	4013      	ands	r3, r2
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00d      	beq.n	8006aea <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ad2:	f043 0210 	orr.w	r2, r3, #16
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ade:	f043 0201 	orr.w	r2, r3, #1
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e04a      	b.n	8006b80 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7ff f802 	bl	8005af8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006af4:	4825      	ldr	r0, [pc, #148]	@ (8006b8c <ADC_Enable+0xe8>)
 8006af6:	f7fe fe9f 	bl	8005838 <LL_ADC_GetCommonPathInternalCh>
 8006afa:	4603      	mov	r3, r0
 8006afc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00f      	beq.n	8006b24 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006b04:	4b22      	ldr	r3, [pc, #136]	@ (8006b90 <ADC_Enable+0xec>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	099b      	lsrs	r3, r3, #6
 8006b0a:	4a22      	ldr	r2, [pc, #136]	@ (8006b94 <ADC_Enable+0xf0>)
 8006b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b10:	099b      	lsrs	r3, r3, #6
 8006b12:	3301      	adds	r3, #1
 8006b14:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8006b16:	e002      	b.n	8006b1e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d1f9      	bne.n	8006b18 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8006b24:	f7fe fe26 	bl	8005774 <HAL_GetTick>
 8006b28:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006b2a:	e021      	b.n	8006b70 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4618      	mov	r0, r3
 8006b32:	f7fe fff5 	bl	8005b20 <LL_ADC_IsEnabled>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d104      	bne.n	8006b46 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7fe ffd9 	bl	8005af8 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006b46:	f7fe fe15 	bl	8005774 <HAL_GetTick>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	d90d      	bls.n	8006b70 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b58:	f043 0210 	orr.w	r2, r3, #16
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b64:	f043 0201 	orr.w	r2, r3, #1
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e007      	b.n	8006b80 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 0301 	and.w	r3, r3, #1
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d1d6      	bne.n	8006b2c <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	8000003f 	.word	0x8000003f
 8006b8c:	50040300 	.word	0x50040300
 8006b90:	20000010 	.word	0x20000010
 8006b94:	053e2d63 	.word	0x053e2d63

08006b98 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ba4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006baa:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d14b      	bne.n	8006c4a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bb6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0308 	and.w	r3, r3, #8
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d021      	beq.n	8006c10 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f7fe fe94 	bl	80058fe <LL_ADC_REG_IsTriggerSourceSWStart>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d032      	beq.n	8006c42 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d12b      	bne.n	8006c42 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bee:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bfa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d11f      	bne.n	8006c42 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c06:	f043 0201 	orr.w	r2, r3, #1
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	655a      	str	r2, [r3, #84]	@ 0x54
 8006c0e:	e018      	b.n	8006c42 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	f003 0302 	and.w	r3, r3, #2
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d111      	bne.n	8006c42 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c22:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d105      	bne.n	8006c42 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c3a:	f043 0201 	orr.w	r2, r3, #1
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f7ff fb40 	bl	80062c8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006c48:	e00e      	b.n	8006c68 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c4e:	f003 0310 	and.w	r3, r3, #16
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d003      	beq.n	8006c5e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	f7ff fb54 	bl	8006304 <HAL_ADC_ErrorCallback>
}
 8006c5c:	e004      	b.n	8006c68 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	4798      	blx	r3
}
 8006c68:	bf00      	nop
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c7c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f7ff fb2c 	bl	80062dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006c84:	bf00      	nop
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c98:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c9e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006caa:	f043 0204 	orr.w	r2, r3, #4
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006cb2:	68f8      	ldr	r0, [r7, #12]
 8006cb4:	f7ff fb26 	bl	8006304 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006cb8:	bf00      	nop
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006cc8:	bf00      	nop
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006cdc:	bf00      	nop
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006d04:	bf00      	nop
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f003 0307 	and.w	r3, r3, #7
 8006d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006d34:	4b0c      	ldr	r3, [pc, #48]	@ (8006d68 <__NVIC_SetPriorityGrouping+0x44>)
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006d40:	4013      	ands	r3, r2
 8006d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006d4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006d50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006d56:	4a04      	ldr	r2, [pc, #16]	@ (8006d68 <__NVIC_SetPriorityGrouping+0x44>)
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	60d3      	str	r3, [r2, #12]
}
 8006d5c:	bf00      	nop
 8006d5e:	3714      	adds	r7, #20
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr
 8006d68:	e000ed00 	.word	0xe000ed00

08006d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006d70:	4b04      	ldr	r3, [pc, #16]	@ (8006d84 <__NVIC_GetPriorityGrouping+0x18>)
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	0a1b      	lsrs	r3, r3, #8
 8006d76:	f003 0307 	and.w	r3, r3, #7
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr
 8006d84:	e000ed00 	.word	0xe000ed00

08006d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	4603      	mov	r3, r0
 8006d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	db0b      	blt.n	8006db2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d9a:	79fb      	ldrb	r3, [r7, #7]
 8006d9c:	f003 021f 	and.w	r2, r3, #31
 8006da0:	4907      	ldr	r1, [pc, #28]	@ (8006dc0 <__NVIC_EnableIRQ+0x38>)
 8006da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006da6:	095b      	lsrs	r3, r3, #5
 8006da8:	2001      	movs	r0, #1
 8006daa:	fa00 f202 	lsl.w	r2, r0, r2
 8006dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006db2:	bf00      	nop
 8006db4:	370c      	adds	r7, #12
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	e000e100 	.word	0xe000e100

08006dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	4603      	mov	r3, r0
 8006dcc:	6039      	str	r1, [r7, #0]
 8006dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	db0a      	blt.n	8006dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	b2da      	uxtb	r2, r3
 8006ddc:	490c      	ldr	r1, [pc, #48]	@ (8006e10 <__NVIC_SetPriority+0x4c>)
 8006dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006de2:	0112      	lsls	r2, r2, #4
 8006de4:	b2d2      	uxtb	r2, r2
 8006de6:	440b      	add	r3, r1
 8006de8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006dec:	e00a      	b.n	8006e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	b2da      	uxtb	r2, r3
 8006df2:	4908      	ldr	r1, [pc, #32]	@ (8006e14 <__NVIC_SetPriority+0x50>)
 8006df4:	79fb      	ldrb	r3, [r7, #7]
 8006df6:	f003 030f 	and.w	r3, r3, #15
 8006dfa:	3b04      	subs	r3, #4
 8006dfc:	0112      	lsls	r2, r2, #4
 8006dfe:	b2d2      	uxtb	r2, r2
 8006e00:	440b      	add	r3, r1
 8006e02:	761a      	strb	r2, [r3, #24]
}
 8006e04:	bf00      	nop
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr
 8006e10:	e000e100 	.word	0xe000e100
 8006e14:	e000ed00 	.word	0xe000ed00

08006e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b089      	sub	sp, #36	@ 0x24
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f003 0307 	and.w	r3, r3, #7
 8006e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	f1c3 0307 	rsb	r3, r3, #7
 8006e32:	2b04      	cmp	r3, #4
 8006e34:	bf28      	it	cs
 8006e36:	2304      	movcs	r3, #4
 8006e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	3304      	adds	r3, #4
 8006e3e:	2b06      	cmp	r3, #6
 8006e40:	d902      	bls.n	8006e48 <NVIC_EncodePriority+0x30>
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	3b03      	subs	r3, #3
 8006e46:	e000      	b.n	8006e4a <NVIC_EncodePriority+0x32>
 8006e48:	2300      	movs	r3, #0
 8006e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	fa02 f303 	lsl.w	r3, r2, r3
 8006e56:	43da      	mvns	r2, r3
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	401a      	ands	r2, r3
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006e60:	f04f 31ff 	mov.w	r1, #4294967295
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	fa01 f303 	lsl.w	r3, r1, r3
 8006e6a:	43d9      	mvns	r1, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e70:	4313      	orrs	r3, r2
         );
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3724      	adds	r7, #36	@ 0x24
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr
	...

08006e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e90:	d301      	bcc.n	8006e96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006e92:	2301      	movs	r3, #1
 8006e94:	e00f      	b.n	8006eb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006e96:	4a0a      	ldr	r2, [pc, #40]	@ (8006ec0 <SysTick_Config+0x40>)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006e9e:	210f      	movs	r1, #15
 8006ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ea4:	f7ff ff8e 	bl	8006dc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006ea8:	4b05      	ldr	r3, [pc, #20]	@ (8006ec0 <SysTick_Config+0x40>)
 8006eaa:	2200      	movs	r2, #0
 8006eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006eae:	4b04      	ldr	r3, [pc, #16]	@ (8006ec0 <SysTick_Config+0x40>)
 8006eb0:	2207      	movs	r2, #7
 8006eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3708      	adds	r7, #8
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	e000e010 	.word	0xe000e010

08006ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f7ff ff29 	bl	8006d24 <__NVIC_SetPriorityGrouping>
}
 8006ed2:	bf00      	nop
 8006ed4:	3708      	adds	r7, #8
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b086      	sub	sp, #24
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	60b9      	str	r1, [r7, #8]
 8006ee4:	607a      	str	r2, [r7, #4]
 8006ee6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006ee8:	f7ff ff40 	bl	8006d6c <__NVIC_GetPriorityGrouping>
 8006eec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	68b9      	ldr	r1, [r7, #8]
 8006ef2:	6978      	ldr	r0, [r7, #20]
 8006ef4:	f7ff ff90 	bl	8006e18 <NVIC_EncodePriority>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006efe:	4611      	mov	r1, r2
 8006f00:	4618      	mov	r0, r3
 8006f02:	f7ff ff5f 	bl	8006dc4 <__NVIC_SetPriority>
}
 8006f06:	bf00      	nop
 8006f08:	3718      	adds	r7, #24
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b082      	sub	sp, #8
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	4603      	mov	r3, r0
 8006f16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f7ff ff33 	bl	8006d88 <__NVIC_EnableIRQ>
}
 8006f22:	bf00      	nop
 8006f24:	3708      	adds	r7, #8
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b082      	sub	sp, #8
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f7ff ffa4 	bl	8006e80 <SysTick_Config>
 8006f38:	4603      	mov	r3, r0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
	...

08006f44 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d101      	bne.n	8006f56 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e08e      	b.n	8007074 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	4b47      	ldr	r3, [pc, #284]	@ (800707c <HAL_DMA_Init+0x138>)
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d80f      	bhi.n	8006f82 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	461a      	mov	r2, r3
 8006f68:	4b45      	ldr	r3, [pc, #276]	@ (8007080 <HAL_DMA_Init+0x13c>)
 8006f6a:	4413      	add	r3, r2
 8006f6c:	4a45      	ldr	r2, [pc, #276]	@ (8007084 <HAL_DMA_Init+0x140>)
 8006f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f72:	091b      	lsrs	r3, r3, #4
 8006f74:	009a      	lsls	r2, r3, #2
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a42      	ldr	r2, [pc, #264]	@ (8007088 <HAL_DMA_Init+0x144>)
 8006f7e:	641a      	str	r2, [r3, #64]	@ 0x40
 8006f80:	e00e      	b.n	8006fa0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	461a      	mov	r2, r3
 8006f88:	4b40      	ldr	r3, [pc, #256]	@ (800708c <HAL_DMA_Init+0x148>)
 8006f8a:	4413      	add	r3, r2
 8006f8c:	4a3d      	ldr	r2, [pc, #244]	@ (8007084 <HAL_DMA_Init+0x140>)
 8006f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f92:	091b      	lsrs	r3, r3, #4
 8006f94:	009a      	lsls	r2, r3, #2
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a3c      	ldr	r2, [pc, #240]	@ (8007090 <HAL_DMA_Init+0x14c>)
 8006f9e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2202      	movs	r2, #2
 8006fa4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006fb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006fc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006fd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	699b      	ldr	r3, [r3, #24]
 8006fd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006fdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fa24 	bl	8007440 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007000:	d102      	bne.n	8007008 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007010:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8007014:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800701e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d010      	beq.n	800704a <HAL_DMA_Init+0x106>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	2b04      	cmp	r3, #4
 800702e:	d80c      	bhi.n	800704a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 fa43 	bl	80074bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800703a:	2200      	movs	r2, #0
 800703c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007046:	605a      	str	r2, [r3, #4]
 8007048:	e008      	b.n	800705c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2201      	movs	r2, #1
 8007066:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	40020407 	.word	0x40020407
 8007080:	bffdfff8 	.word	0xbffdfff8
 8007084:	cccccccd 	.word	0xcccccccd
 8007088:	40020000 	.word	0x40020000
 800708c:	bffdfbf8 	.word	0xbffdfbf8
 8007090:	40020400 	.word	0x40020400

08007094 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b086      	sub	sp, #24
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	607a      	str	r2, [r7, #4]
 80070a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070a2:	2300      	movs	r3, #0
 80070a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d101      	bne.n	80070b4 <HAL_DMA_Start_IT+0x20>
 80070b0:	2302      	movs	r3, #2
 80070b2:	e066      	b.n	8007182 <HAL_DMA_Start_IT+0xee>
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d155      	bne.n	8007174 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2202      	movs	r2, #2
 80070cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f022 0201 	bic.w	r2, r2, #1
 80070e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	68b9      	ldr	r1, [r7, #8]
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 f968 	bl	80073c2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d008      	beq.n	800710c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f042 020e 	orr.w	r2, r2, #14
 8007108:	601a      	str	r2, [r3, #0]
 800710a:	e00f      	b.n	800712c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f022 0204 	bic.w	r2, r2, #4
 800711a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f042 020a 	orr.w	r2, r2, #10
 800712a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d007      	beq.n	800714a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007144:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007148:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800714e:	2b00      	cmp	r3, #0
 8007150:	d007      	beq.n	8007162 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800715c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007160:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f042 0201 	orr.w	r2, r2, #1
 8007170:	601a      	str	r2, [r3, #0]
 8007172:	e005      	b.n	8007180 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800717c:	2302      	movs	r3, #2
 800717e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007180:	7dfb      	ldrb	r3, [r7, #23]
}
 8007182:	4618      	mov	r0, r3
 8007184:	3718      	adds	r7, #24
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b084      	sub	sp, #16
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007192:	2300      	movs	r3, #0
 8007194:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800719c:	b2db      	uxtb	r3, r3
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d005      	beq.n	80071ae <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2204      	movs	r2, #4
 80071a6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	73fb      	strb	r3, [r7, #15]
 80071ac:	e047      	b.n	800723e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f022 020e 	bic.w	r2, r2, #14
 80071bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f022 0201 	bic.w	r2, r2, #1
 80071cc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80071dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071e2:	f003 021c 	and.w	r2, r3, #28
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ea:	2101      	movs	r1, #1
 80071ec:	fa01 f202 	lsl.w	r2, r1, r2
 80071f0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80071fa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00c      	beq.n	800721e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800720e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007212:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800721c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2201      	movs	r2, #1
 8007222:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007232:	2b00      	cmp	r3, #0
 8007234:	d003      	beq.n	800723e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	4798      	blx	r3
    }
  }
  return status;
 800723e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007240:	4618      	mov	r0, r3
 8007242:	3710      	adds	r7, #16
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007264:	f003 031c 	and.w	r3, r3, #28
 8007268:	2204      	movs	r2, #4
 800726a:	409a      	lsls	r2, r3
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	4013      	ands	r3, r2
 8007270:	2b00      	cmp	r3, #0
 8007272:	d026      	beq.n	80072c2 <HAL_DMA_IRQHandler+0x7a>
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	f003 0304 	and.w	r3, r3, #4
 800727a:	2b00      	cmp	r3, #0
 800727c:	d021      	beq.n	80072c2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0320 	and.w	r3, r3, #32
 8007288:	2b00      	cmp	r3, #0
 800728a:	d107      	bne.n	800729c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f022 0204 	bic.w	r2, r2, #4
 800729a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072a0:	f003 021c 	and.w	r2, r3, #28
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a8:	2104      	movs	r1, #4
 80072aa:	fa01 f202 	lsl.w	r2, r1, r2
 80072ae:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d071      	beq.n	800739c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80072c0:	e06c      	b.n	800739c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072c6:	f003 031c 	and.w	r3, r3, #28
 80072ca:	2202      	movs	r2, #2
 80072cc:	409a      	lsls	r2, r3
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	4013      	ands	r3, r2
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d02e      	beq.n	8007334 <HAL_DMA_IRQHandler+0xec>
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	f003 0302 	and.w	r3, r3, #2
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d029      	beq.n	8007334 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 0320 	and.w	r3, r3, #32
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d10b      	bne.n	8007306 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f022 020a 	bic.w	r2, r2, #10
 80072fc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2201      	movs	r2, #1
 8007302:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800730a:	f003 021c 	and.w	r2, r3, #28
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007312:	2102      	movs	r1, #2
 8007314:	fa01 f202 	lsl.w	r2, r1, r2
 8007318:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007326:	2b00      	cmp	r3, #0
 8007328:	d038      	beq.n	800739c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007332:	e033      	b.n	800739c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007338:	f003 031c 	and.w	r3, r3, #28
 800733c:	2208      	movs	r2, #8
 800733e:	409a      	lsls	r2, r3
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	4013      	ands	r3, r2
 8007344:	2b00      	cmp	r3, #0
 8007346:	d02a      	beq.n	800739e <HAL_DMA_IRQHandler+0x156>
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	f003 0308 	and.w	r3, r3, #8
 800734e:	2b00      	cmp	r3, #0
 8007350:	d025      	beq.n	800739e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f022 020e 	bic.w	r2, r2, #14
 8007360:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007366:	f003 021c 	and.w	r2, r3, #28
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800736e:	2101      	movs	r1, #1
 8007370:	fa01 f202 	lsl.w	r2, r1, r2
 8007374:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2201      	movs	r2, #1
 800737a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007390:	2b00      	cmp	r3, #0
 8007392:	d004      	beq.n	800739e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800739c:	bf00      	nop
 800739e:	bf00      	nop
}
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80073a6:	b480      	push	{r7}
 80073a8:	b083      	sub	sp, #12
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80073b4:	b2db      	uxtb	r3, r3
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	370c      	adds	r7, #12
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr

080073c2 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80073c2:	b480      	push	{r7}
 80073c4:	b085      	sub	sp, #20
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	60f8      	str	r0, [r7, #12]
 80073ca:	60b9      	str	r1, [r7, #8]
 80073cc:	607a      	str	r2, [r7, #4]
 80073ce:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80073d8:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d004      	beq.n	80073ec <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80073ea:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073f0:	f003 021c 	and.w	r2, r3, #28
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f8:	2101      	movs	r1, #1
 80073fa:	fa01 f202 	lsl.w	r2, r1, r2
 80073fe:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	683a      	ldr	r2, [r7, #0]
 8007406:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	2b10      	cmp	r3, #16
 800740e:	d108      	bne.n	8007422 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68ba      	ldr	r2, [r7, #8]
 800741e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007420:	e007      	b.n	8007432 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	60da      	str	r2, [r3, #12]
}
 8007432:	bf00      	nop
 8007434:	3714      	adds	r7, #20
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr
	...

08007440 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007440:	b480      	push	{r7}
 8007442:	b085      	sub	sp, #20
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	461a      	mov	r2, r3
 800744e:	4b17      	ldr	r3, [pc, #92]	@ (80074ac <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007450:	429a      	cmp	r2, r3
 8007452:	d80a      	bhi.n	800746a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007458:	089b      	lsrs	r3, r3, #2
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007460:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	6493      	str	r3, [r2, #72]	@ 0x48
 8007468:	e007      	b.n	800747a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800746e:	089b      	lsrs	r3, r3, #2
 8007470:	009a      	lsls	r2, r3, #2
 8007472:	4b0f      	ldr	r3, [pc, #60]	@ (80074b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007474:	4413      	add	r3, r2
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	b2db      	uxtb	r3, r3
 8007480:	3b08      	subs	r3, #8
 8007482:	4a0c      	ldr	r2, [pc, #48]	@ (80074b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007484:	fba2 2303 	umull	r2, r3, r2, r3
 8007488:	091b      	lsrs	r3, r3, #4
 800748a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a0a      	ldr	r2, [pc, #40]	@ (80074b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007490:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f003 031f 	and.w	r3, r3, #31
 8007498:	2201      	movs	r2, #1
 800749a:	409a      	lsls	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80074a0:	bf00      	nop
 80074a2:	3714      	adds	r7, #20
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr
 80074ac:	40020407 	.word	0x40020407
 80074b0:	4002081c 	.word	0x4002081c
 80074b4:	cccccccd 	.word	0xcccccccd
 80074b8:	40020880 	.word	0x40020880

080074bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80074cc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	4b0b      	ldr	r3, [pc, #44]	@ (8007500 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80074d2:	4413      	add	r3, r2
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	461a      	mov	r2, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a09      	ldr	r2, [pc, #36]	@ (8007504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80074e0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	3b01      	subs	r3, #1
 80074e6:	f003 0303 	and.w	r3, r3, #3
 80074ea:	2201      	movs	r2, #1
 80074ec:	409a      	lsls	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80074f2:	bf00      	nop
 80074f4:	3714      	adds	r7, #20
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	1000823f 	.word	0x1000823f
 8007504:	40020940 	.word	0x40020940

08007508 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007508:	b480      	push	{r7}
 800750a:	b087      	sub	sp, #28
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007512:	2300      	movs	r3, #0
 8007514:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007516:	e14c      	b.n	80077b2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	2101      	movs	r1, #1
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	fa01 f303 	lsl.w	r3, r1, r3
 8007524:	4013      	ands	r3, r2
 8007526:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2b00      	cmp	r3, #0
 800752c:	f000 813e 	beq.w	80077ac <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	f003 0303 	and.w	r3, r3, #3
 8007538:	2b01      	cmp	r3, #1
 800753a:	d005      	beq.n	8007548 <HAL_GPIO_Init+0x40>
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	f003 0303 	and.w	r3, r3, #3
 8007544:	2b02      	cmp	r3, #2
 8007546:	d130      	bne.n	80075aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	005b      	lsls	r3, r3, #1
 8007552:	2203      	movs	r2, #3
 8007554:	fa02 f303 	lsl.w	r3, r2, r3
 8007558:	43db      	mvns	r3, r3
 800755a:	693a      	ldr	r2, [r7, #16]
 800755c:	4013      	ands	r3, r2
 800755e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	68da      	ldr	r2, [r3, #12]
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	005b      	lsls	r3, r3, #1
 8007568:	fa02 f303 	lsl.w	r3, r2, r3
 800756c:	693a      	ldr	r2, [r7, #16]
 800756e:	4313      	orrs	r3, r2
 8007570:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	693a      	ldr	r2, [r7, #16]
 8007576:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800757e:	2201      	movs	r2, #1
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	fa02 f303 	lsl.w	r3, r2, r3
 8007586:	43db      	mvns	r3, r3
 8007588:	693a      	ldr	r2, [r7, #16]
 800758a:	4013      	ands	r3, r2
 800758c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	091b      	lsrs	r3, r3, #4
 8007594:	f003 0201 	and.w	r2, r3, #1
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	fa02 f303 	lsl.w	r3, r2, r3
 800759e:	693a      	ldr	r2, [r7, #16]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	693a      	ldr	r2, [r7, #16]
 80075a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	f003 0303 	and.w	r3, r3, #3
 80075b2:	2b03      	cmp	r3, #3
 80075b4:	d017      	beq.n	80075e6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	005b      	lsls	r3, r3, #1
 80075c0:	2203      	movs	r2, #3
 80075c2:	fa02 f303 	lsl.w	r3, r2, r3
 80075c6:	43db      	mvns	r3, r3
 80075c8:	693a      	ldr	r2, [r7, #16]
 80075ca:	4013      	ands	r3, r2
 80075cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	689a      	ldr	r2, [r3, #8]
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	005b      	lsls	r3, r3, #1
 80075d6:	fa02 f303 	lsl.w	r3, r2, r3
 80075da:	693a      	ldr	r2, [r7, #16]
 80075dc:	4313      	orrs	r3, r2
 80075de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	693a      	ldr	r2, [r7, #16]
 80075e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	f003 0303 	and.w	r3, r3, #3
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d123      	bne.n	800763a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	08da      	lsrs	r2, r3, #3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	3208      	adds	r2, #8
 80075fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	f003 0307 	and.w	r3, r3, #7
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	220f      	movs	r2, #15
 800760a:	fa02 f303 	lsl.w	r3, r2, r3
 800760e:	43db      	mvns	r3, r3
 8007610:	693a      	ldr	r2, [r7, #16]
 8007612:	4013      	ands	r3, r2
 8007614:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	691a      	ldr	r2, [r3, #16]
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	f003 0307 	and.w	r3, r3, #7
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	fa02 f303 	lsl.w	r3, r2, r3
 8007626:	693a      	ldr	r2, [r7, #16]
 8007628:	4313      	orrs	r3, r2
 800762a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	08da      	lsrs	r2, r3, #3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	3208      	adds	r2, #8
 8007634:	6939      	ldr	r1, [r7, #16]
 8007636:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	005b      	lsls	r3, r3, #1
 8007644:	2203      	movs	r2, #3
 8007646:	fa02 f303 	lsl.w	r3, r2, r3
 800764a:	43db      	mvns	r3, r3
 800764c:	693a      	ldr	r2, [r7, #16]
 800764e:	4013      	ands	r3, r2
 8007650:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	f003 0203 	and.w	r2, r3, #3
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	005b      	lsls	r3, r3, #1
 800765e:	fa02 f303 	lsl.w	r3, r2, r3
 8007662:	693a      	ldr	r2, [r7, #16]
 8007664:	4313      	orrs	r3, r2
 8007666:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	693a      	ldr	r2, [r7, #16]
 800766c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007676:	2b00      	cmp	r3, #0
 8007678:	f000 8098 	beq.w	80077ac <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800767c:	4a54      	ldr	r2, [pc, #336]	@ (80077d0 <HAL_GPIO_Init+0x2c8>)
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	089b      	lsrs	r3, r3, #2
 8007682:	3302      	adds	r3, #2
 8007684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007688:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	f003 0303 	and.w	r3, r3, #3
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	220f      	movs	r2, #15
 8007694:	fa02 f303 	lsl.w	r3, r2, r3
 8007698:	43db      	mvns	r3, r3
 800769a:	693a      	ldr	r2, [r7, #16]
 800769c:	4013      	ands	r3, r2
 800769e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80076a6:	d019      	beq.n	80076dc <HAL_GPIO_Init+0x1d4>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a4a      	ldr	r2, [pc, #296]	@ (80077d4 <HAL_GPIO_Init+0x2cc>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d013      	beq.n	80076d8 <HAL_GPIO_Init+0x1d0>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a49      	ldr	r2, [pc, #292]	@ (80077d8 <HAL_GPIO_Init+0x2d0>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d00d      	beq.n	80076d4 <HAL_GPIO_Init+0x1cc>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a48      	ldr	r2, [pc, #288]	@ (80077dc <HAL_GPIO_Init+0x2d4>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d007      	beq.n	80076d0 <HAL_GPIO_Init+0x1c8>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a47      	ldr	r2, [pc, #284]	@ (80077e0 <HAL_GPIO_Init+0x2d8>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d101      	bne.n	80076cc <HAL_GPIO_Init+0x1c4>
 80076c8:	2304      	movs	r3, #4
 80076ca:	e008      	b.n	80076de <HAL_GPIO_Init+0x1d6>
 80076cc:	2307      	movs	r3, #7
 80076ce:	e006      	b.n	80076de <HAL_GPIO_Init+0x1d6>
 80076d0:	2303      	movs	r3, #3
 80076d2:	e004      	b.n	80076de <HAL_GPIO_Init+0x1d6>
 80076d4:	2302      	movs	r3, #2
 80076d6:	e002      	b.n	80076de <HAL_GPIO_Init+0x1d6>
 80076d8:	2301      	movs	r3, #1
 80076da:	e000      	b.n	80076de <HAL_GPIO_Init+0x1d6>
 80076dc:	2300      	movs	r3, #0
 80076de:	697a      	ldr	r2, [r7, #20]
 80076e0:	f002 0203 	and.w	r2, r2, #3
 80076e4:	0092      	lsls	r2, r2, #2
 80076e6:	4093      	lsls	r3, r2
 80076e8:	693a      	ldr	r2, [r7, #16]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80076ee:	4938      	ldr	r1, [pc, #224]	@ (80077d0 <HAL_GPIO_Init+0x2c8>)
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	089b      	lsrs	r3, r3, #2
 80076f4:	3302      	adds	r3, #2
 80076f6:	693a      	ldr	r2, [r7, #16]
 80076f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80076fc:	4b39      	ldr	r3, [pc, #228]	@ (80077e4 <HAL_GPIO_Init+0x2dc>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	43db      	mvns	r3, r3
 8007706:	693a      	ldr	r2, [r7, #16]
 8007708:	4013      	ands	r3, r2
 800770a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007714:	2b00      	cmp	r3, #0
 8007716:	d003      	beq.n	8007720 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8007718:	693a      	ldr	r2, [r7, #16]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	4313      	orrs	r3, r2
 800771e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007720:	4a30      	ldr	r2, [pc, #192]	@ (80077e4 <HAL_GPIO_Init+0x2dc>)
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007726:	4b2f      	ldr	r3, [pc, #188]	@ (80077e4 <HAL_GPIO_Init+0x2dc>)
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	43db      	mvns	r3, r3
 8007730:	693a      	ldr	r2, [r7, #16]
 8007732:	4013      	ands	r3, r2
 8007734:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800773e:	2b00      	cmp	r3, #0
 8007740:	d003      	beq.n	800774a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8007742:	693a      	ldr	r2, [r7, #16]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	4313      	orrs	r3, r2
 8007748:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800774a:	4a26      	ldr	r2, [pc, #152]	@ (80077e4 <HAL_GPIO_Init+0x2dc>)
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007750:	4b24      	ldr	r3, [pc, #144]	@ (80077e4 <HAL_GPIO_Init+0x2dc>)
 8007752:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007756:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	43db      	mvns	r3, r3
 800775c:	693a      	ldr	r2, [r7, #16]
 800775e:	4013      	ands	r3, r2
 8007760:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800776a:	2b00      	cmp	r3, #0
 800776c:	d003      	beq.n	8007776 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800776e:	693a      	ldr	r2, [r7, #16]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	4313      	orrs	r3, r2
 8007774:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007776:	4a1b      	ldr	r2, [pc, #108]	@ (80077e4 <HAL_GPIO_Init+0x2dc>)
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800777e:	4b19      	ldr	r3, [pc, #100]	@ (80077e4 <HAL_GPIO_Init+0x2dc>)
 8007780:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007784:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	43db      	mvns	r3, r3
 800778a:	693a      	ldr	r2, [r7, #16]
 800778c:	4013      	ands	r3, r2
 800778e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007798:	2b00      	cmp	r3, #0
 800779a:	d003      	beq.n	80077a4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800779c:	693a      	ldr	r2, [r7, #16]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80077a4:	4a0f      	ldr	r2, [pc, #60]	@ (80077e4 <HAL_GPIO_Init+0x2dc>)
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	3301      	adds	r3, #1
 80077b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	fa22 f303 	lsr.w	r3, r2, r3
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f47f aeab 	bne.w	8007518 <HAL_GPIO_Init+0x10>
  }
}
 80077c2:	bf00      	nop
 80077c4:	bf00      	nop
 80077c6:	371c      	adds	r7, #28
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr
 80077d0:	40010000 	.word	0x40010000
 80077d4:	48000400 	.word	0x48000400
 80077d8:	48000800 	.word	0x48000800
 80077dc:	48000c00 	.word	0x48000c00
 80077e0:	48001000 	.word	0x48001000
 80077e4:	58000800 	.word	0x58000800

080077e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	460b      	mov	r3, r1
 80077f2:	807b      	strh	r3, [r7, #2]
 80077f4:	4613      	mov	r3, r2
 80077f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80077f8:	787b      	ldrb	r3, [r7, #1]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d003      	beq.n	8007806 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80077fe:	887a      	ldrh	r2, [r7, #2]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007804:	e002      	b.n	800780c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007806:	887a      	ldrh	r2, [r7, #2]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800780c:	bf00      	nop
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007818:	b480      	push	{r7}
 800781a:	b085      	sub	sp, #20
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	460b      	mov	r3, r1
 8007822:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	695b      	ldr	r3, [r3, #20]
 8007828:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800782a:	887a      	ldrh	r2, [r7, #2]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	4013      	ands	r3, r2
 8007830:	041a      	lsls	r2, r3, #16
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	43d9      	mvns	r1, r3
 8007836:	887b      	ldrh	r3, [r7, #2]
 8007838:	400b      	ands	r3, r1
 800783a:	431a      	orrs	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	619a      	str	r2, [r3, #24]
}
 8007840:	bf00      	nop
 8007842:	3714      	adds	r7, #20
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	4603      	mov	r3, r0
 8007854:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007856:	4b08      	ldr	r3, [pc, #32]	@ (8007878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007858:	68da      	ldr	r2, [r3, #12]
 800785a:	88fb      	ldrh	r3, [r7, #6]
 800785c:	4013      	ands	r3, r2
 800785e:	2b00      	cmp	r3, #0
 8007860:	d006      	beq.n	8007870 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007862:	4a05      	ldr	r2, [pc, #20]	@ (8007878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007864:	88fb      	ldrh	r3, [r7, #6]
 8007866:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007868:	88fb      	ldrh	r3, [r7, #6]
 800786a:	4618      	mov	r0, r3
 800786c:	f000 f806 	bl	800787c <HAL_GPIO_EXTI_Callback>
  }
}
 8007870:	bf00      	nop
 8007872:	3708      	adds	r7, #8
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}
 8007878:	58000800 	.word	0x58000800

0800787c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	4603      	mov	r3, r0
 8007884:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007886:	bf00      	nop
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b082      	sub	sp, #8
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d101      	bne.n	80078a4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80078a0:	2301      	movs	r3, #1
 80078a2:	e08d      	b.n	80079c0 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d106      	bne.n	80078be <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f7fd fafd 	bl	8004eb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2224      	movs	r2, #36	@ 0x24
 80078c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f022 0201 	bic.w	r2, r2, #1
 80078d4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	685a      	ldr	r2, [r3, #4]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80078e2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	689a      	ldr	r2, [r3, #8]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80078f2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d107      	bne.n	800790c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	689a      	ldr	r2, [r3, #8]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007908:	609a      	str	r2, [r3, #8]
 800790a:	e006      	b.n	800791a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	689a      	ldr	r2, [r3, #8]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007918:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	2b02      	cmp	r3, #2
 8007920:	d108      	bne.n	8007934 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	685a      	ldr	r2, [r3, #4]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007930:	605a      	str	r2, [r3, #4]
 8007932:	e007      	b.n	8007944 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	685a      	ldr	r2, [r3, #4]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007942:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	6812      	ldr	r2, [r2, #0]
 800794e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007952:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007956:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68da      	ldr	r2, [r3, #12]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007966:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	691a      	ldr	r2, [r3, #16]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	695b      	ldr	r3, [r3, #20]
 8007970:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	699b      	ldr	r3, [r3, #24]
 8007978:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	430a      	orrs	r2, r1
 8007980:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	69d9      	ldr	r1, [r3, #28]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6a1a      	ldr	r2, [r3, #32]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	430a      	orrs	r2, r1
 8007990:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f042 0201 	orr.w	r2, r2, #1
 80079a0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2220      	movs	r2, #32
 80079ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80079be:	2300      	movs	r3, #0
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3708      	adds	r7, #8
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b088      	sub	sp, #32
 80079cc:	af02      	add	r7, sp, #8
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	607a      	str	r2, [r7, #4]
 80079d2:	461a      	mov	r2, r3
 80079d4:	460b      	mov	r3, r1
 80079d6:	817b      	strh	r3, [r7, #10]
 80079d8:	4613      	mov	r3, r2
 80079da:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	2b20      	cmp	r3, #32
 80079e6:	f040 80fd 	bne.w	8007be4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d101      	bne.n	80079f8 <HAL_I2C_Master_Transmit+0x30>
 80079f4:	2302      	movs	r3, #2
 80079f6:	e0f6      	b.n	8007be6 <HAL_I2C_Master_Transmit+0x21e>
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007a00:	f7fd feb8 	bl	8005774 <HAL_GetTick>
 8007a04:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	9300      	str	r3, [sp, #0]
 8007a0a:	2319      	movs	r3, #25
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	f000 ffa1 	bl	800895a <I2C_WaitOnFlagUntilTimeout>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d001      	beq.n	8007a22 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e0e1      	b.n	8007be6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2221      	movs	r2, #33	@ 0x21
 8007a26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2210      	movs	r2, #16
 8007a2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2200      	movs	r2, #0
 8007a36:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	893a      	ldrh	r2, [r7, #8]
 8007a42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2200      	movs	r2, #0
 8007a48:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	2bff      	cmp	r3, #255	@ 0xff
 8007a52:	d906      	bls.n	8007a62 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	22ff      	movs	r2, #255	@ 0xff
 8007a58:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007a5a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007a5e:	617b      	str	r3, [r7, #20]
 8007a60:	e007      	b.n	8007a72 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a66:	b29a      	uxth	r2, r3
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007a6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007a70:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d024      	beq.n	8007ac4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a7e:	781a      	ldrb	r2, [r3, #0]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a8a:	1c5a      	adds	r2, r3, #1
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	3b01      	subs	r3, #1
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	b2da      	uxtb	r2, r3
 8007ab4:	8979      	ldrh	r1, [r7, #10]
 8007ab6:	4b4e      	ldr	r3, [pc, #312]	@ (8007bf0 <HAL_I2C_Master_Transmit+0x228>)
 8007ab8:	9300      	str	r3, [sp, #0]
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	68f8      	ldr	r0, [r7, #12]
 8007abe:	f001 f99b 	bl	8008df8 <I2C_TransferConfig>
 8007ac2:	e066      	b.n	8007b92 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ac8:	b2da      	uxtb	r2, r3
 8007aca:	8979      	ldrh	r1, [r7, #10]
 8007acc:	4b48      	ldr	r3, [pc, #288]	@ (8007bf0 <HAL_I2C_Master_Transmit+0x228>)
 8007ace:	9300      	str	r3, [sp, #0]
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f001 f990 	bl	8008df8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007ad8:	e05b      	b.n	8007b92 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ada:	693a      	ldr	r2, [r7, #16]
 8007adc:	6a39      	ldr	r1, [r7, #32]
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	f000 ff94 	bl	8008a0c <I2C_WaitOnTXISFlagUntilTimeout>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d001      	beq.n	8007aee <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	e07b      	b.n	8007be6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007af2:	781a      	ldrb	r2, [r3, #0]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007afe:	1c5a      	adds	r2, r3, #1
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	b29a      	uxth	r2, r3
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b16:	3b01      	subs	r3, #1
 8007b18:	b29a      	uxth	r2, r3
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d034      	beq.n	8007b92 <HAL_I2C_Master_Transmit+0x1ca>
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d130      	bne.n	8007b92 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	9300      	str	r3, [sp, #0]
 8007b34:	6a3b      	ldr	r3, [r7, #32]
 8007b36:	2200      	movs	r2, #0
 8007b38:	2180      	movs	r1, #128	@ 0x80
 8007b3a:	68f8      	ldr	r0, [r7, #12]
 8007b3c:	f000 ff0d 	bl	800895a <I2C_WaitOnFlagUntilTimeout>
 8007b40:	4603      	mov	r3, r0
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d001      	beq.n	8007b4a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	e04d      	b.n	8007be6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	2bff      	cmp	r3, #255	@ 0xff
 8007b52:	d90e      	bls.n	8007b72 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	22ff      	movs	r2, #255	@ 0xff
 8007b58:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b5e:	b2da      	uxtb	r2, r3
 8007b60:	8979      	ldrh	r1, [r7, #10]
 8007b62:	2300      	movs	r3, #0
 8007b64:	9300      	str	r3, [sp, #0]
 8007b66:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f001 f944 	bl	8008df8 <I2C_TransferConfig>
 8007b70:	e00f      	b.n	8007b92 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b76:	b29a      	uxth	r2, r3
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b80:	b2da      	uxtb	r2, r3
 8007b82:	8979      	ldrh	r1, [r7, #10]
 8007b84:	2300      	movs	r3, #0
 8007b86:	9300      	str	r3, [sp, #0]
 8007b88:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007b8c:	68f8      	ldr	r0, [r7, #12]
 8007b8e:	f001 f933 	bl	8008df8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d19e      	bne.n	8007ada <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b9c:	693a      	ldr	r2, [r7, #16]
 8007b9e:	6a39      	ldr	r1, [r7, #32]
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f000 ff7a 	bl	8008a9a <I2C_WaitOnSTOPFlagUntilTimeout>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d001      	beq.n	8007bb0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	e01a      	b.n	8007be6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	2220      	movs	r2, #32
 8007bb6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	6859      	ldr	r1, [r3, #4]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8007bf4 <HAL_I2C_Master_Transmit+0x22c>)
 8007bc4:	400b      	ands	r3, r1
 8007bc6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2220      	movs	r2, #32
 8007bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007be0:	2300      	movs	r3, #0
 8007be2:	e000      	b.n	8007be6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8007be4:	2302      	movs	r3, #2
  }
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3718      	adds	r7, #24
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	80002000 	.word	0x80002000
 8007bf4:	fe00e800 	.word	0xfe00e800

08007bf8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b088      	sub	sp, #32
 8007bfc:	af02      	add	r7, sp, #8
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	607a      	str	r2, [r7, #4]
 8007c02:	461a      	mov	r2, r3
 8007c04:	460b      	mov	r3, r1
 8007c06:	817b      	strh	r3, [r7, #10]
 8007c08:	4613      	mov	r3, r2
 8007c0a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	2b20      	cmp	r3, #32
 8007c16:	f040 80db 	bne.w	8007dd0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d101      	bne.n	8007c28 <HAL_I2C_Master_Receive+0x30>
 8007c24:	2302      	movs	r3, #2
 8007c26:	e0d4      	b.n	8007dd2 <HAL_I2C_Master_Receive+0x1da>
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007c30:	f7fd fda0 	bl	8005774 <HAL_GetTick>
 8007c34:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	2319      	movs	r3, #25
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	f000 fe89 	bl	800895a <I2C_WaitOnFlagUntilTimeout>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d001      	beq.n	8007c52 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e0bf      	b.n	8007dd2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2222      	movs	r2, #34	@ 0x22
 8007c56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2210      	movs	r2, #16
 8007c5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	893a      	ldrh	r2, [r7, #8]
 8007c72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2200      	movs	r2, #0
 8007c78:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	2bff      	cmp	r3, #255	@ 0xff
 8007c82:	d90e      	bls.n	8007ca2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	22ff      	movs	r2, #255	@ 0xff
 8007c88:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c8e:	b2da      	uxtb	r2, r3
 8007c90:	8979      	ldrh	r1, [r7, #10]
 8007c92:	4b52      	ldr	r3, [pc, #328]	@ (8007ddc <HAL_I2C_Master_Receive+0x1e4>)
 8007c94:	9300      	str	r3, [sp, #0]
 8007c96:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f001 f8ac 	bl	8008df8 <I2C_TransferConfig>
 8007ca0:	e06d      	b.n	8007d7e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cb0:	b2da      	uxtb	r2, r3
 8007cb2:	8979      	ldrh	r1, [r7, #10]
 8007cb4:	4b49      	ldr	r3, [pc, #292]	@ (8007ddc <HAL_I2C_Master_Receive+0x1e4>)
 8007cb6:	9300      	str	r3, [sp, #0]
 8007cb8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f001 f89b 	bl	8008df8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007cc2:	e05c      	b.n	8007d7e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007cc4:	697a      	ldr	r2, [r7, #20]
 8007cc6:	6a39      	ldr	r1, [r7, #32]
 8007cc8:	68f8      	ldr	r0, [r7, #12]
 8007cca:	f000 ff29 	bl	8008b20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d001      	beq.n	8007cd8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e07c      	b.n	8007dd2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ce2:	b2d2      	uxtb	r2, r2
 8007ce4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cea:	1c5a      	adds	r2, r3, #1
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	3b01      	subs	r3, #1
 8007d04:	b29a      	uxth	r2, r3
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d034      	beq.n	8007d7e <HAL_I2C_Master_Receive+0x186>
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d130      	bne.n	8007d7e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	6a3b      	ldr	r3, [r7, #32]
 8007d22:	2200      	movs	r2, #0
 8007d24:	2180      	movs	r1, #128	@ 0x80
 8007d26:	68f8      	ldr	r0, [r7, #12]
 8007d28:	f000 fe17 	bl	800895a <I2C_WaitOnFlagUntilTimeout>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d001      	beq.n	8007d36 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	e04d      	b.n	8007dd2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	2bff      	cmp	r3, #255	@ 0xff
 8007d3e:	d90e      	bls.n	8007d5e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	22ff      	movs	r2, #255	@ 0xff
 8007d44:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d4a:	b2da      	uxtb	r2, r3
 8007d4c:	8979      	ldrh	r1, [r7, #10]
 8007d4e:	2300      	movs	r3, #0
 8007d50:	9300      	str	r3, [sp, #0]
 8007d52:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007d56:	68f8      	ldr	r0, [r7, #12]
 8007d58:	f001 f84e 	bl	8008df8 <I2C_TransferConfig>
 8007d5c:	e00f      	b.n	8007d7e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d6c:	b2da      	uxtb	r2, r3
 8007d6e:	8979      	ldrh	r1, [r7, #10]
 8007d70:	2300      	movs	r3, #0
 8007d72:	9300      	str	r3, [sp, #0]
 8007d74:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f001 f83d 	bl	8008df8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d19d      	bne.n	8007cc4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d88:	697a      	ldr	r2, [r7, #20]
 8007d8a:	6a39      	ldr	r1, [r7, #32]
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f000 fe84 	bl	8008a9a <I2C_WaitOnSTOPFlagUntilTimeout>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d001      	beq.n	8007d9c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e01a      	b.n	8007dd2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2220      	movs	r2, #32
 8007da2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	6859      	ldr	r1, [r3, #4]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	4b0c      	ldr	r3, [pc, #48]	@ (8007de0 <HAL_I2C_Master_Receive+0x1e8>)
 8007db0:	400b      	ands	r3, r1
 8007db2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2220      	movs	r2, #32
 8007db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	e000      	b.n	8007dd2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007dd0:	2302      	movs	r3, #2
  }
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3718      	adds	r7, #24
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	80002400 	.word	0x80002400
 8007de0:	fe00e800 	.word	0xfe00e800

08007de4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	699b      	ldr	r3, [r3, #24]
 8007df2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d005      	beq.n	8007e10 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e08:	68ba      	ldr	r2, [r7, #8]
 8007e0a:	68f9      	ldr	r1, [r7, #12]
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	4798      	blx	r3
  }
}
 8007e10:	bf00      	nop
 8007e12:	3710      	adds	r7, #16
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b086      	sub	sp, #24
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	699b      	ldr	r3, [r3, #24]
 8007e26:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	0a1b      	lsrs	r3, r3, #8
 8007e34:	f003 0301 	and.w	r3, r3, #1
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d010      	beq.n	8007e5e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	09db      	lsrs	r3, r3, #7
 8007e40:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d00a      	beq.n	8007e5e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e4c:	f043 0201 	orr.w	r2, r3, #1
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007e5c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	0a9b      	lsrs	r3, r3, #10
 8007e62:	f003 0301 	and.w	r3, r3, #1
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d010      	beq.n	8007e8c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	09db      	lsrs	r3, r3, #7
 8007e6e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00a      	beq.n	8007e8c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e7a:	f043 0208 	orr.w	r2, r3, #8
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007e8a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	0a5b      	lsrs	r3, r3, #9
 8007e90:	f003 0301 	and.w	r3, r3, #1
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d010      	beq.n	8007eba <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	09db      	lsrs	r3, r3, #7
 8007e9c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00a      	beq.n	8007eba <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ea8:	f043 0202 	orr.w	r2, r3, #2
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007eb8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ebe:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f003 030b 	and.w	r3, r3, #11
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d003      	beq.n	8007ed2 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8007eca:	68f9      	ldr	r1, [r7, #12]
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 fbeb 	bl	80086a8 <I2C_ITError>
  }
}
 8007ed2:	bf00      	nop
 8007ed4:	3718      	adds	r7, #24
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007eda:	b480      	push	{r7}
 8007edc:	b083      	sub	sp, #12
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007ee2:	bf00      	nop
 8007ee4:	370c      	adds	r7, #12
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr

08007eee <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007eee:	b480      	push	{r7}
 8007ef0:	b083      	sub	sp, #12
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007ef6:	bf00      	nop
 8007ef8:	370c      	adds	r7, #12
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr

08007f02 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007f02:	b480      	push	{r7}
 8007f04:	b083      	sub	sp, #12
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	70fb      	strb	r3, [r7, #3]
 8007f0e:	4613      	mov	r3, r2
 8007f10:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007f12:	bf00      	nop
 8007f14:	370c      	adds	r7, #12
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr

08007f1e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f1e:	b480      	push	{r7}
 8007f20:	b083      	sub	sp, #12
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007f26:	bf00      	nop
 8007f28:	370c      	adds	r7, #12
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b083      	sub	sp, #12
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007f3a:	bf00      	nop
 8007f3c:	370c      	adds	r7, #12
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr

08007f46 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f46:	b480      	push	{r7}
 8007f48:	b083      	sub	sp, #12
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007f4e:	bf00      	nop
 8007f50:	370c      	adds	r7, #12
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr

08007f5a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b086      	sub	sp, #24
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	60f8      	str	r0, [r7, #12]
 8007f62:	60b9      	str	r1, [r7, #8]
 8007f64:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d101      	bne.n	8007f7e <I2C_Slave_ISR_IT+0x24>
 8007f7a:	2302      	movs	r3, #2
 8007f7c:	e0ed      	b.n	800815a <I2C_Slave_ISR_IT+0x200>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2201      	movs	r2, #1
 8007f82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	095b      	lsrs	r3, r3, #5
 8007f8a:	f003 0301 	and.w	r3, r3, #1
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d00a      	beq.n	8007fa8 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	095b      	lsrs	r3, r3, #5
 8007f96:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d004      	beq.n	8007fa8 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007f9e:	6939      	ldr	r1, [r7, #16]
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	f000 f9c1 	bl	8008328 <I2C_ITSlaveCplt>
 8007fa6:	e0d3      	b.n	8008150 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	091b      	lsrs	r3, r3, #4
 8007fac:	f003 0301 	and.w	r3, r3, #1
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d04d      	beq.n	8008050 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	091b      	lsrs	r3, r3, #4
 8007fb8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d047      	beq.n	8008050 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d128      	bne.n	800801c <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	2b28      	cmp	r3, #40	@ 0x28
 8007fd4:	d108      	bne.n	8007fe8 <I2C_Slave_ISR_IT+0x8e>
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007fdc:	d104      	bne.n	8007fe8 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007fde:	6939      	ldr	r1, [r7, #16]
 8007fe0:	68f8      	ldr	r0, [r7, #12]
 8007fe2:	f000 fb0b 	bl	80085fc <I2C_ITListenCplt>
 8007fe6:	e032      	b.n	800804e <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	2b29      	cmp	r3, #41	@ 0x29
 8007ff2:	d10e      	bne.n	8008012 <I2C_Slave_ISR_IT+0xb8>
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007ffa:	d00a      	beq.n	8008012 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2210      	movs	r2, #16
 8008002:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f000 fc66 	bl	80088d6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800800a:	68f8      	ldr	r0, [r7, #12]
 800800c:	f000 f92d 	bl	800826a <I2C_ITSlaveSeqCplt>
 8008010:	e01d      	b.n	800804e <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	2210      	movs	r2, #16
 8008018:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800801a:	e096      	b.n	800814a <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	2210      	movs	r2, #16
 8008022:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008028:	f043 0204 	orr.w	r2, r3, #4
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d004      	beq.n	8008040 <I2C_Slave_ISR_IT+0xe6>
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800803c:	f040 8085 	bne.w	800814a <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008044:	4619      	mov	r1, r3
 8008046:	68f8      	ldr	r0, [r7, #12]
 8008048:	f000 fb2e 	bl	80086a8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800804c:	e07d      	b.n	800814a <I2C_Slave_ISR_IT+0x1f0>
 800804e:	e07c      	b.n	800814a <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	089b      	lsrs	r3, r3, #2
 8008054:	f003 0301 	and.w	r3, r3, #1
 8008058:	2b00      	cmp	r3, #0
 800805a:	d030      	beq.n	80080be <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	089b      	lsrs	r3, r3, #2
 8008060:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008064:	2b00      	cmp	r3, #0
 8008066:	d02a      	beq.n	80080be <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800806c:	b29b      	uxth	r3, r3
 800806e:	2b00      	cmp	r3, #0
 8008070:	d018      	beq.n	80080a4 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800807c:	b2d2      	uxtb	r2, r2
 800807e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008084:	1c5a      	adds	r2, r3, #1
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800808e:	3b01      	subs	r3, #1
 8008090:	b29a      	uxth	r2, r3
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800809a:	b29b      	uxth	r3, r3
 800809c:	3b01      	subs	r3, #1
 800809e:	b29a      	uxth	r2, r3
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d14f      	bne.n	800814e <I2C_Slave_ISR_IT+0x1f4>
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80080b4:	d04b      	beq.n	800814e <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80080b6:	68f8      	ldr	r0, [r7, #12]
 80080b8:	f000 f8d7 	bl	800826a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80080bc:	e047      	b.n	800814e <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	08db      	lsrs	r3, r3, #3
 80080c2:	f003 0301 	and.w	r3, r3, #1
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00a      	beq.n	80080e0 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	08db      	lsrs	r3, r3, #3
 80080ce:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d004      	beq.n	80080e0 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80080d6:	6939      	ldr	r1, [r7, #16]
 80080d8:	68f8      	ldr	r0, [r7, #12]
 80080da:	f000 f842 	bl	8008162 <I2C_ITAddrCplt>
 80080de:	e037      	b.n	8008150 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	085b      	lsrs	r3, r3, #1
 80080e4:	f003 0301 	and.w	r3, r3, #1
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d031      	beq.n	8008150 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	085b      	lsrs	r3, r3, #1
 80080f0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d02b      	beq.n	8008150 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d018      	beq.n	8008134 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008106:	781a      	ldrb	r2, [r3, #0]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008112:	1c5a      	adds	r2, r3, #1
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800811c:	b29b      	uxth	r3, r3
 800811e:	3b01      	subs	r3, #1
 8008120:	b29a      	uxth	r2, r3
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800812a:	3b01      	subs	r3, #1
 800812c:	b29a      	uxth	r2, r3
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008132:	e00d      	b.n	8008150 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800813a:	d002      	beq.n	8008142 <I2C_Slave_ISR_IT+0x1e8>
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d106      	bne.n	8008150 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008142:	68f8      	ldr	r0, [r7, #12]
 8008144:	f000 f891 	bl	800826a <I2C_ITSlaveSeqCplt>
 8008148:	e002      	b.n	8008150 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800814a:	bf00      	nop
 800814c:	e000      	b.n	8008150 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800814e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2200      	movs	r2, #0
 8008154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3718      	adds	r7, #24
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008162:	b580      	push	{r7, lr}
 8008164:	b084      	sub	sp, #16
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
 800816a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008172:	b2db      	uxtb	r3, r3
 8008174:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008178:	2b28      	cmp	r3, #40	@ 0x28
 800817a:	d16a      	bne.n	8008252 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	699b      	ldr	r3, [r3, #24]
 8008182:	0c1b      	lsrs	r3, r3, #16
 8008184:	b2db      	uxtb	r3, r3
 8008186:	f003 0301 	and.w	r3, r3, #1
 800818a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	699b      	ldr	r3, [r3, #24]
 8008192:	0c1b      	lsrs	r3, r3, #16
 8008194:	b29b      	uxth	r3, r3
 8008196:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800819a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081a8:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80081b6:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	2b02      	cmp	r3, #2
 80081be:	d138      	bne.n	8008232 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80081c0:	897b      	ldrh	r3, [r7, #10]
 80081c2:	09db      	lsrs	r3, r3, #7
 80081c4:	b29a      	uxth	r2, r3
 80081c6:	89bb      	ldrh	r3, [r7, #12]
 80081c8:	4053      	eors	r3, r2
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	f003 0306 	and.w	r3, r3, #6
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d11c      	bne.n	800820e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80081d4:	897b      	ldrh	r3, [r7, #10]
 80081d6:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081dc:	1c5a      	adds	r2, r3, #1
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d13b      	bne.n	8008262 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	2208      	movs	r2, #8
 80081f6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008200:	89ba      	ldrh	r2, [r7, #12]
 8008202:	7bfb      	ldrb	r3, [r7, #15]
 8008204:	4619      	mov	r1, r3
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f7ff fe7b 	bl	8007f02 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800820c:	e029      	b.n	8008262 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800820e:	893b      	ldrh	r3, [r7, #8]
 8008210:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008212:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 fe20 	bl	8008e5c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008224:	89ba      	ldrh	r2, [r7, #12]
 8008226:	7bfb      	ldrb	r3, [r7, #15]
 8008228:	4619      	mov	r1, r3
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f7ff fe69 	bl	8007f02 <HAL_I2C_AddrCallback>
}
 8008230:	e017      	b.n	8008262 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008232:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 fe10 	bl	8008e5c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008244:	89ba      	ldrh	r2, [r7, #12]
 8008246:	7bfb      	ldrb	r3, [r7, #15]
 8008248:	4619      	mov	r1, r3
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f7ff fe59 	bl	8007f02 <HAL_I2C_AddrCallback>
}
 8008250:	e007      	b.n	8008262 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	2208      	movs	r2, #8
 8008258:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8008262:	bf00      	nop
 8008264:	3710      	adds	r7, #16
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b084      	sub	sp, #16
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	0b9b      	lsrs	r3, r3, #14
 8008286:	f003 0301 	and.w	r3, r3, #1
 800828a:	2b00      	cmp	r3, #0
 800828c:	d008      	beq.n	80082a0 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800829c:	601a      	str	r2, [r3, #0]
 800829e:	e00d      	b.n	80082bc <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	0bdb      	lsrs	r3, r3, #15
 80082a4:	f003 0301 	and.w	r3, r3, #1
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d007      	beq.n	80082bc <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80082ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	2b29      	cmp	r3, #41	@ 0x29
 80082c6:	d112      	bne.n	80082ee <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2228      	movs	r2, #40	@ 0x28
 80082cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2221      	movs	r2, #33	@ 0x21
 80082d4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80082d6:	2101      	movs	r1, #1
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 fdbf 	bl	8008e5c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f7ff fdf7 	bl	8007eda <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80082ec:	e017      	b.n	800831e <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80082f8:	d111      	bne.n	800831e <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2228      	movs	r2, #40	@ 0x28
 80082fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2222      	movs	r2, #34	@ 0x22
 8008306:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008308:	2102      	movs	r1, #2
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 fda6 	bl	8008e5c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f7ff fde8 	bl	8007eee <HAL_I2C_SlaveRxCpltCallback>
}
 800831e:	bf00      	nop
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
	...

08008328 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b086      	sub	sp, #24
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008342:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800834a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2220      	movs	r2, #32
 8008352:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008354:	7afb      	ldrb	r3, [r7, #11]
 8008356:	2b21      	cmp	r3, #33	@ 0x21
 8008358:	d002      	beq.n	8008360 <I2C_ITSlaveCplt+0x38>
 800835a:	7afb      	ldrb	r3, [r7, #11]
 800835c:	2b29      	cmp	r3, #41	@ 0x29
 800835e:	d108      	bne.n	8008372 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8008360:	f248 0101 	movw	r1, #32769	@ 0x8001
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 fd79 	bl	8008e5c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2221      	movs	r2, #33	@ 0x21
 800836e:	631a      	str	r2, [r3, #48]	@ 0x30
 8008370:	e019      	b.n	80083a6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008372:	7afb      	ldrb	r3, [r7, #11]
 8008374:	2b22      	cmp	r3, #34	@ 0x22
 8008376:	d002      	beq.n	800837e <I2C_ITSlaveCplt+0x56>
 8008378:	7afb      	ldrb	r3, [r7, #11]
 800837a:	2b2a      	cmp	r3, #42	@ 0x2a
 800837c:	d108      	bne.n	8008390 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800837e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fd6a 	bl	8008e5c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2222      	movs	r2, #34	@ 0x22
 800838c:	631a      	str	r2, [r3, #48]	@ 0x30
 800838e:	e00a      	b.n	80083a6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8008390:	7afb      	ldrb	r3, [r7, #11]
 8008392:	2b28      	cmp	r3, #40	@ 0x28
 8008394:	d107      	bne.n	80083a6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8008396:	f248 0103 	movw	r1, #32771	@ 0x8003
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 fd5e 	bl	8008e5c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	685a      	ldr	r2, [r3, #4]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80083b4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	6859      	ldr	r1, [r3, #4]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	4b8c      	ldr	r3, [pc, #560]	@ (80085f4 <I2C_ITSlaveCplt+0x2cc>)
 80083c2:	400b      	ands	r3, r1
 80083c4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 fa85 	bl	80088d6 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	0b9b      	lsrs	r3, r3, #14
 80083d0:	f003 0301 	and.w	r3, r3, #1
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d013      	beq.n	8008400 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80083e6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d020      	beq.n	8008432 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	b29a      	uxth	r2, r3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80083fe:	e018      	b.n	8008432 <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	0bdb      	lsrs	r3, r3, #15
 8008404:	f003 0301 	and.w	r3, r3, #1
 8008408:	2b00      	cmp	r3, #0
 800840a:	d012      	beq.n	8008432 <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800841a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008420:	2b00      	cmp	r3, #0
 8008422:	d006      	beq.n	8008432 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	b29a      	uxth	r2, r3
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	089b      	lsrs	r3, r3, #2
 8008436:	f003 0301 	and.w	r3, r3, #1
 800843a:	2b00      	cmp	r3, #0
 800843c:	d020      	beq.n	8008480 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	f023 0304 	bic.w	r3, r3, #4
 8008444:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008450:	b2d2      	uxtb	r2, r2
 8008452:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008458:	1c5a      	adds	r2, r3, #1
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00c      	beq.n	8008480 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800846a:	3b01      	subs	r3, #1
 800846c:	b29a      	uxth	r2, r3
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008476:	b29b      	uxth	r3, r3
 8008478:	3b01      	subs	r3, #1
 800847a:	b29a      	uxth	r2, r3
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008484:	b29b      	uxth	r3, r3
 8008486:	2b00      	cmp	r3, #0
 8008488:	d005      	beq.n	8008496 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800848e:	f043 0204 	orr.w	r2, r3, #4
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	091b      	lsrs	r3, r3, #4
 800849a:	f003 0301 	and.w	r3, r3, #1
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d04a      	beq.n	8008538 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	091b      	lsrs	r3, r3, #4
 80084a6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d044      	beq.n	8008538 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d128      	bne.n	800850a <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	2b28      	cmp	r3, #40	@ 0x28
 80084c2:	d108      	bne.n	80084d6 <I2C_ITSlaveCplt+0x1ae>
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80084ca:	d104      	bne.n	80084d6 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80084cc:	6979      	ldr	r1, [r7, #20]
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 f894 	bl	80085fc <I2C_ITListenCplt>
 80084d4:	e030      	b.n	8008538 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	2b29      	cmp	r3, #41	@ 0x29
 80084e0:	d10e      	bne.n	8008500 <I2C_ITSlaveCplt+0x1d8>
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80084e8:	d00a      	beq.n	8008500 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2210      	movs	r2, #16
 80084f0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 f9ef 	bl	80088d6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f7ff feb6 	bl	800826a <I2C_ITSlaveSeqCplt>
 80084fe:	e01b      	b.n	8008538 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2210      	movs	r2, #16
 8008506:	61da      	str	r2, [r3, #28]
 8008508:	e016      	b.n	8008538 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2210      	movs	r2, #16
 8008510:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008516:	f043 0204 	orr.w	r2, r3, #4
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d003      	beq.n	800852c <I2C_ITSlaveCplt+0x204>
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800852a:	d105      	bne.n	8008538 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008530:	4619      	mov	r1, r3
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 f8b8 	bl	80086a8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800854a:	2b00      	cmp	r3, #0
 800854c:	d010      	beq.n	8008570 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008552:	4619      	mov	r1, r3
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 f8a7 	bl	80086a8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008560:	b2db      	uxtb	r3, r3
 8008562:	2b28      	cmp	r3, #40	@ 0x28
 8008564:	d141      	bne.n	80085ea <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008566:	6979      	ldr	r1, [r7, #20]
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 f847 	bl	80085fc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800856e:	e03c      	b.n	80085ea <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008574:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008578:	d014      	beq.n	80085a4 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f7ff fe75 	bl	800826a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4a1d      	ldr	r2, [pc, #116]	@ (80085f8 <I2C_ITSlaveCplt+0x2d0>)
 8008584:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2220      	movs	r2, #32
 800858a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2200      	movs	r2, #0
 8008592:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f7ff fcbe 	bl	8007f1e <HAL_I2C_ListenCpltCallback>
}
 80085a2:	e022      	b.n	80085ea <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	2b22      	cmp	r3, #34	@ 0x22
 80085ae:	d10e      	bne.n	80085ce <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2220      	movs	r2, #32
 80085b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f7ff fc91 	bl	8007eee <HAL_I2C_SlaveRxCpltCallback>
}
 80085cc:	e00d      	b.n	80085ea <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2220      	movs	r2, #32
 80085d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2200      	movs	r2, #0
 80085da:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f7ff fc78 	bl	8007eda <HAL_I2C_SlaveTxCpltCallback>
}
 80085ea:	bf00      	nop
 80085ec:	3718      	adds	r7, #24
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	fe00e800 	.word	0xfe00e800
 80085f8:	ffff0000 	.word	0xffff0000

080085fc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4a26      	ldr	r2, [pc, #152]	@ (80086a4 <I2C_ITListenCplt+0xa8>)
 800860a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2220      	movs	r2, #32
 8008616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	089b      	lsrs	r3, r3, #2
 800862c:	f003 0301 	and.w	r3, r3, #1
 8008630:	2b00      	cmp	r3, #0
 8008632:	d022      	beq.n	800867a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800863e:	b2d2      	uxtb	r2, r2
 8008640:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008646:	1c5a      	adds	r2, r3, #1
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008650:	2b00      	cmp	r3, #0
 8008652:	d012      	beq.n	800867a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008658:	3b01      	subs	r3, #1
 800865a:	b29a      	uxth	r2, r3
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008664:	b29b      	uxth	r3, r3
 8008666:	3b01      	subs	r3, #1
 8008668:	b29a      	uxth	r2, r3
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008672:	f043 0204 	orr.w	r2, r3, #4
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800867a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 fbec 	bl	8008e5c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2210      	movs	r2, #16
 800868a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2200      	movs	r2, #0
 8008690:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f7ff fc42 	bl	8007f1e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800869a:	bf00      	nop
 800869c:	3708      	adds	r7, #8
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	ffff0000 	.word	0xffff0000

080086a8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086b8:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	4a6d      	ldr	r2, [pc, #436]	@ (800887c <I2C_ITError+0x1d4>)
 80086c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	431a      	orrs	r2, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80086da:	7bfb      	ldrb	r3, [r7, #15]
 80086dc:	2b28      	cmp	r3, #40	@ 0x28
 80086de:	d005      	beq.n	80086ec <I2C_ITError+0x44>
 80086e0:	7bfb      	ldrb	r3, [r7, #15]
 80086e2:	2b29      	cmp	r3, #41	@ 0x29
 80086e4:	d002      	beq.n	80086ec <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80086e6:	7bfb      	ldrb	r3, [r7, #15]
 80086e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80086ea:	d10b      	bne.n	8008704 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80086ec:	2103      	movs	r1, #3
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 fbb4 	bl	8008e5c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2228      	movs	r2, #40	@ 0x28
 80086f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a60      	ldr	r2, [pc, #384]	@ (8008880 <I2C_ITError+0x1d8>)
 8008700:	635a      	str	r2, [r3, #52]	@ 0x34
 8008702:	e030      	b.n	8008766 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008704:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 fba7 	bl	8008e5c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 f8e1 	bl	80088d6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800871a:	b2db      	uxtb	r3, r3
 800871c:	2b60      	cmp	r3, #96	@ 0x60
 800871e:	d01f      	beq.n	8008760 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2220      	movs	r2, #32
 8008724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	699b      	ldr	r3, [r3, #24]
 800872e:	f003 0320 	and.w	r3, r3, #32
 8008732:	2b20      	cmp	r3, #32
 8008734:	d114      	bne.n	8008760 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	699b      	ldr	r3, [r3, #24]
 800873c:	f003 0310 	and.w	r3, r3, #16
 8008740:	2b10      	cmp	r3, #16
 8008742:	d109      	bne.n	8008758 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	2210      	movs	r2, #16
 800874a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008750:	f043 0204 	orr.w	r2, r3, #4
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2220      	movs	r2, #32
 800875e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800876a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008770:	2b00      	cmp	r3, #0
 8008772:	d039      	beq.n	80087e8 <I2C_ITError+0x140>
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	2b11      	cmp	r3, #17
 8008778:	d002      	beq.n	8008780 <I2C_ITError+0xd8>
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	2b21      	cmp	r3, #33	@ 0x21
 800877e:	d133      	bne.n	80087e8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800878a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800878e:	d107      	bne.n	80087a0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800879e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7fe fdfe 	bl	80073a6 <HAL_DMA_GetState>
 80087aa:	4603      	mov	r3, r0
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d017      	beq.n	80087e0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087b4:	4a33      	ldr	r2, [pc, #204]	@ (8008884 <I2C_ITError+0x1dc>)
 80087b6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7fe fce0 	bl	800718a <HAL_DMA_Abort_IT>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d04d      	beq.n	800886c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80087da:	4610      	mov	r0, r2
 80087dc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80087de:	e045      	b.n	800886c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 f851 	bl	8008888 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80087e6:	e041      	b.n	800886c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d039      	beq.n	8008864 <I2C_ITError+0x1bc>
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	2b12      	cmp	r3, #18
 80087f4:	d002      	beq.n	80087fc <I2C_ITError+0x154>
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	2b22      	cmp	r3, #34	@ 0x22
 80087fa:	d133      	bne.n	8008864 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008806:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800880a:	d107      	bne.n	800881c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800881a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008820:	4618      	mov	r0, r3
 8008822:	f7fe fdc0 	bl	80073a6 <HAL_DMA_GetState>
 8008826:	4603      	mov	r3, r0
 8008828:	2b01      	cmp	r3, #1
 800882a:	d017      	beq.n	800885c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008830:	4a14      	ldr	r2, [pc, #80]	@ (8008884 <I2C_ITError+0x1dc>)
 8008832:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008840:	4618      	mov	r0, r3
 8008842:	f7fe fca2 	bl	800718a <HAL_DMA_Abort_IT>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d011      	beq.n	8008870 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008856:	4610      	mov	r0, r2
 8008858:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800885a:	e009      	b.n	8008870 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 f813 	bl	8008888 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008862:	e005      	b.n	8008870 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 f80f 	bl	8008888 <I2C_TreatErrorCallback>
  }
}
 800886a:	e002      	b.n	8008872 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800886c:	bf00      	nop
 800886e:	e000      	b.n	8008872 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008870:	bf00      	nop
}
 8008872:	bf00      	nop
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	ffff0000 	.word	0xffff0000
 8008880:	08007f5b 	.word	0x08007f5b
 8008884:	0800891f 	.word	0x0800891f

08008888 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008896:	b2db      	uxtb	r3, r3
 8008898:	2b60      	cmp	r3, #96	@ 0x60
 800889a:	d10e      	bne.n	80088ba <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2220      	movs	r2, #32
 80088a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f7ff fb47 	bl	8007f46 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80088b8:	e009      	b.n	80088ce <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f7ff fb32 	bl	8007f32 <HAL_I2C_ErrorCallback>
}
 80088ce:	bf00      	nop
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80088d6:	b480      	push	{r7}
 80088d8:	b083      	sub	sp, #12
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	699b      	ldr	r3, [r3, #24]
 80088e4:	f003 0302 	and.w	r3, r3, #2
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	d103      	bne.n	80088f4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2200      	movs	r2, #0
 80088f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	699b      	ldr	r3, [r3, #24]
 80088fa:	f003 0301 	and.w	r3, r3, #1
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d007      	beq.n	8008912 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	699a      	ldr	r2, [r3, #24]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f042 0201 	orr.w	r2, r2, #1
 8008910:	619a      	str	r2, [r3, #24]
  }
}
 8008912:	bf00      	nop
 8008914:	370c      	adds	r7, #12
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr

0800891e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b084      	sub	sp, #16
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800892a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008930:	2b00      	cmp	r3, #0
 8008932:	d003      	beq.n	800893c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008938:	2200      	movs	r2, #0
 800893a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008940:	2b00      	cmp	r3, #0
 8008942:	d003      	beq.n	800894c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008948:	2200      	movs	r2, #0
 800894a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f7ff ff9b 	bl	8008888 <I2C_TreatErrorCallback>
}
 8008952:	bf00      	nop
 8008954:	3710      	adds	r7, #16
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b084      	sub	sp, #16
 800895e:	af00      	add	r7, sp, #0
 8008960:	60f8      	str	r0, [r7, #12]
 8008962:	60b9      	str	r1, [r7, #8]
 8008964:	603b      	str	r3, [r7, #0]
 8008966:	4613      	mov	r3, r2
 8008968:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800896a:	e03b      	b.n	80089e4 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800896c:	69ba      	ldr	r2, [r7, #24]
 800896e:	6839      	ldr	r1, [r7, #0]
 8008970:	68f8      	ldr	r0, [r7, #12]
 8008972:	f000 f961 	bl	8008c38 <I2C_IsErrorOccurred>
 8008976:	4603      	mov	r3, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d001      	beq.n	8008980 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800897c:	2301      	movs	r3, #1
 800897e:	e041      	b.n	8008a04 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008986:	d02d      	beq.n	80089e4 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008988:	f7fc fef4 	bl	8005774 <HAL_GetTick>
 800898c:	4602      	mov	r2, r0
 800898e:	69bb      	ldr	r3, [r7, #24]
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	683a      	ldr	r2, [r7, #0]
 8008994:	429a      	cmp	r2, r3
 8008996:	d302      	bcc.n	800899e <I2C_WaitOnFlagUntilTimeout+0x44>
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d122      	bne.n	80089e4 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	699a      	ldr	r2, [r3, #24]
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	4013      	ands	r3, r2
 80089a8:	68ba      	ldr	r2, [r7, #8]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	bf0c      	ite	eq
 80089ae:	2301      	moveq	r3, #1
 80089b0:	2300      	movne	r3, #0
 80089b2:	b2db      	uxtb	r3, r3
 80089b4:	461a      	mov	r2, r3
 80089b6:	79fb      	ldrb	r3, [r7, #7]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d113      	bne.n	80089e4 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089c0:	f043 0220 	orr.w	r2, r3, #32
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2220      	movs	r2, #32
 80089cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80089e0:	2301      	movs	r3, #1
 80089e2:	e00f      	b.n	8008a04 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	699a      	ldr	r2, [r3, #24]
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	4013      	ands	r3, r2
 80089ee:	68ba      	ldr	r2, [r7, #8]
 80089f0:	429a      	cmp	r2, r3
 80089f2:	bf0c      	ite	eq
 80089f4:	2301      	moveq	r3, #1
 80089f6:	2300      	movne	r3, #0
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	461a      	mov	r2, r3
 80089fc:	79fb      	ldrb	r3, [r7, #7]
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d0b4      	beq.n	800896c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a02:	2300      	movs	r3, #0
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3710      	adds	r7, #16
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008a18:	e033      	b.n	8008a82 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	68b9      	ldr	r1, [r7, #8]
 8008a1e:	68f8      	ldr	r0, [r7, #12]
 8008a20:	f000 f90a 	bl	8008c38 <I2C_IsErrorOccurred>
 8008a24:	4603      	mov	r3, r0
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d001      	beq.n	8008a2e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	e031      	b.n	8008a92 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a34:	d025      	beq.n	8008a82 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a36:	f7fc fe9d 	bl	8005774 <HAL_GetTick>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	1ad3      	subs	r3, r2, r3
 8008a40:	68ba      	ldr	r2, [r7, #8]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d302      	bcc.n	8008a4c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d11a      	bne.n	8008a82 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	699b      	ldr	r3, [r3, #24]
 8008a52:	f003 0302 	and.w	r3, r3, #2
 8008a56:	2b02      	cmp	r3, #2
 8008a58:	d013      	beq.n	8008a82 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a5e:	f043 0220 	orr.w	r2, r3, #32
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2220      	movs	r2, #32
 8008a6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e007      	b.n	8008a92 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	699b      	ldr	r3, [r3, #24]
 8008a88:	f003 0302 	and.w	r3, r3, #2
 8008a8c:	2b02      	cmp	r3, #2
 8008a8e:	d1c4      	bne.n	8008a1a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008a9a:	b580      	push	{r7, lr}
 8008a9c:	b084      	sub	sp, #16
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	60f8      	str	r0, [r7, #12]
 8008aa2:	60b9      	str	r1, [r7, #8]
 8008aa4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008aa6:	e02f      	b.n	8008b08 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	68b9      	ldr	r1, [r7, #8]
 8008aac:	68f8      	ldr	r0, [r7, #12]
 8008aae:	f000 f8c3 	bl	8008c38 <I2C_IsErrorOccurred>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d001      	beq.n	8008abc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e02d      	b.n	8008b18 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008abc:	f7fc fe5a 	bl	8005774 <HAL_GetTick>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	1ad3      	subs	r3, r2, r3
 8008ac6:	68ba      	ldr	r2, [r7, #8]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d302      	bcc.n	8008ad2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d11a      	bne.n	8008b08 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	699b      	ldr	r3, [r3, #24]
 8008ad8:	f003 0320 	and.w	r3, r3, #32
 8008adc:	2b20      	cmp	r3, #32
 8008ade:	d013      	beq.n	8008b08 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ae4:	f043 0220 	orr.w	r2, r3, #32
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2220      	movs	r2, #32
 8008af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2200      	movs	r2, #0
 8008b00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	e007      	b.n	8008b18 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	699b      	ldr	r3, [r3, #24]
 8008b0e:	f003 0320 	and.w	r3, r3, #32
 8008b12:	2b20      	cmp	r3, #32
 8008b14:	d1c8      	bne.n	8008aa8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008b16:	2300      	movs	r3, #0
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3710      	adds	r7, #16
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b086      	sub	sp, #24
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	60b9      	str	r1, [r7, #8]
 8008b2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008b30:	e071      	b.n	8008c16 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	68b9      	ldr	r1, [r7, #8]
 8008b36:	68f8      	ldr	r0, [r7, #12]
 8008b38:	f000 f87e 	bl	8008c38 <I2C_IsErrorOccurred>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d001      	beq.n	8008b46 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	699b      	ldr	r3, [r3, #24]
 8008b4c:	f003 0320 	and.w	r3, r3, #32
 8008b50:	2b20      	cmp	r3, #32
 8008b52:	d13b      	bne.n	8008bcc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8008b54:	7dfb      	ldrb	r3, [r7, #23]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d138      	bne.n	8008bcc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	699b      	ldr	r3, [r3, #24]
 8008b60:	f003 0304 	and.w	r3, r3, #4
 8008b64:	2b04      	cmp	r3, #4
 8008b66:	d105      	bne.n	8008b74 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d001      	beq.n	8008b74 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8008b70:	2300      	movs	r3, #0
 8008b72:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	699b      	ldr	r3, [r3, #24]
 8008b7a:	f003 0310 	and.w	r3, r3, #16
 8008b7e:	2b10      	cmp	r3, #16
 8008b80:	d121      	bne.n	8008bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2210      	movs	r2, #16
 8008b88:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2204      	movs	r2, #4
 8008b8e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2220      	movs	r2, #32
 8008b96:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	6859      	ldr	r1, [r3, #4]
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	4b24      	ldr	r3, [pc, #144]	@ (8008c34 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8008ba4:	400b      	ands	r3, r1
 8008ba6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2220      	movs	r2, #32
 8008bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	75fb      	strb	r3, [r7, #23]
 8008bc4:	e002      	b.n	8008bcc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8008bcc:	f7fc fdd2 	bl	8005774 <HAL_GetTick>
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	1ad3      	subs	r3, r2, r3
 8008bd6:	68ba      	ldr	r2, [r7, #8]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d302      	bcc.n	8008be2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d119      	bne.n	8008c16 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8008be2:	7dfb      	ldrb	r3, [r7, #23]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d116      	bne.n	8008c16 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	699b      	ldr	r3, [r3, #24]
 8008bee:	f003 0304 	and.w	r3, r3, #4
 8008bf2:	2b04      	cmp	r3, #4
 8008bf4:	d00f      	beq.n	8008c16 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bfa:	f043 0220 	orr.w	r2, r3, #32
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2220      	movs	r2, #32
 8008c06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	699b      	ldr	r3, [r3, #24]
 8008c1c:	f003 0304 	and.w	r3, r3, #4
 8008c20:	2b04      	cmp	r3, #4
 8008c22:	d002      	beq.n	8008c2a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8008c24:	7dfb      	ldrb	r3, [r7, #23]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d083      	beq.n	8008b32 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8008c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3718      	adds	r7, #24
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}
 8008c34:	fe00e800 	.word	0xfe00e800

08008c38 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b08a      	sub	sp, #40	@ 0x28
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c44:	2300      	movs	r3, #0
 8008c46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	699b      	ldr	r3, [r3, #24]
 8008c50:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008c52:	2300      	movs	r3, #0
 8008c54:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	f003 0310 	and.w	r3, r3, #16
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d068      	beq.n	8008d36 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	2210      	movs	r2, #16
 8008c6a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008c6c:	e049      	b.n	8008d02 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c74:	d045      	beq.n	8008d02 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008c76:	f7fc fd7d 	bl	8005774 <HAL_GetTick>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	1ad3      	subs	r3, r2, r3
 8008c80:	68ba      	ldr	r2, [r7, #8]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d302      	bcc.n	8008c8c <I2C_IsErrorOccurred+0x54>
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d13a      	bne.n	8008d02 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c96:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008c9e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	699b      	ldr	r3, [r3, #24]
 8008ca6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008caa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008cae:	d121      	bne.n	8008cf4 <I2C_IsErrorOccurred+0xbc>
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008cb6:	d01d      	beq.n	8008cf4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008cb8:	7cfb      	ldrb	r3, [r7, #19]
 8008cba:	2b20      	cmp	r3, #32
 8008cbc:	d01a      	beq.n	8008cf4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	685a      	ldr	r2, [r3, #4]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008ccc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008cce:	f7fc fd51 	bl	8005774 <HAL_GetTick>
 8008cd2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008cd4:	e00e      	b.n	8008cf4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008cd6:	f7fc fd4d 	bl	8005774 <HAL_GetTick>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	1ad3      	subs	r3, r2, r3
 8008ce0:	2b19      	cmp	r3, #25
 8008ce2:	d907      	bls.n	8008cf4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008ce4:	6a3b      	ldr	r3, [r7, #32]
 8008ce6:	f043 0320 	orr.w	r3, r3, #32
 8008cea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008cec:	2301      	movs	r3, #1
 8008cee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8008cf2:	e006      	b.n	8008d02 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	699b      	ldr	r3, [r3, #24]
 8008cfa:	f003 0320 	and.w	r3, r3, #32
 8008cfe:	2b20      	cmp	r3, #32
 8008d00:	d1e9      	bne.n	8008cd6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	699b      	ldr	r3, [r3, #24]
 8008d08:	f003 0320 	and.w	r3, r3, #32
 8008d0c:	2b20      	cmp	r3, #32
 8008d0e:	d003      	beq.n	8008d18 <I2C_IsErrorOccurred+0xe0>
 8008d10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d0aa      	beq.n	8008c6e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008d18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d103      	bne.n	8008d28 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	2220      	movs	r2, #32
 8008d26:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008d28:	6a3b      	ldr	r3, [r7, #32]
 8008d2a:	f043 0304 	orr.w	r3, r3, #4
 8008d2e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008d30:	2301      	movs	r3, #1
 8008d32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	699b      	ldr	r3, [r3, #24]
 8008d3c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d00b      	beq.n	8008d60 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008d48:	6a3b      	ldr	r3, [r7, #32]
 8008d4a:	f043 0301 	orr.w	r3, r3, #1
 8008d4e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008d58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008d60:	69bb      	ldr	r3, [r7, #24]
 8008d62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d00b      	beq.n	8008d82 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008d6a:	6a3b      	ldr	r3, [r7, #32]
 8008d6c:	f043 0308 	orr.w	r3, r3, #8
 8008d70:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008d7a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d00b      	beq.n	8008da4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008d8c:	6a3b      	ldr	r3, [r7, #32]
 8008d8e:	f043 0302 	orr.w	r3, r3, #2
 8008d92:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008d9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008da4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d01c      	beq.n	8008de6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008dac:	68f8      	ldr	r0, [r7, #12]
 8008dae:	f7ff fd92 	bl	80088d6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	6859      	ldr	r1, [r3, #4]
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8008df4 <I2C_IsErrorOccurred+0x1bc>)
 8008dbe:	400b      	ands	r3, r1
 8008dc0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008dc6:	6a3b      	ldr	r3, [r7, #32]
 8008dc8:	431a      	orrs	r2, r3
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2220      	movs	r2, #32
 8008dd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008de6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3728      	adds	r7, #40	@ 0x28
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	fe00e800 	.word	0xfe00e800

08008df8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b087      	sub	sp, #28
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	60f8      	str	r0, [r7, #12]
 8008e00:	607b      	str	r3, [r7, #4]
 8008e02:	460b      	mov	r3, r1
 8008e04:	817b      	strh	r3, [r7, #10]
 8008e06:	4613      	mov	r3, r2
 8008e08:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008e0a:	897b      	ldrh	r3, [r7, #10]
 8008e0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008e10:	7a7b      	ldrb	r3, [r7, #9]
 8008e12:	041b      	lsls	r3, r3, #16
 8008e14:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008e18:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008e1e:	6a3b      	ldr	r3, [r7, #32]
 8008e20:	4313      	orrs	r3, r2
 8008e22:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008e26:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	685a      	ldr	r2, [r3, #4]
 8008e2e:	6a3b      	ldr	r3, [r7, #32]
 8008e30:	0d5b      	lsrs	r3, r3, #21
 8008e32:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008e36:	4b08      	ldr	r3, [pc, #32]	@ (8008e58 <I2C_TransferConfig+0x60>)
 8008e38:	430b      	orrs	r3, r1
 8008e3a:	43db      	mvns	r3, r3
 8008e3c:	ea02 0103 	and.w	r1, r2, r3
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	697a      	ldr	r2, [r7, #20]
 8008e46:	430a      	orrs	r2, r1
 8008e48:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008e4a:	bf00      	nop
 8008e4c:	371c      	adds	r7, #28
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop
 8008e58:	03ff63ff 	.word	0x03ff63ff

08008e5c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b085      	sub	sp, #20
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	460b      	mov	r3, r1
 8008e66:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008e6c:	887b      	ldrh	r3, [r7, #2]
 8008e6e:	f003 0301 	and.w	r3, r3, #1
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d00f      	beq.n	8008e96 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8008e7c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008e8a:	2b28      	cmp	r3, #40	@ 0x28
 8008e8c:	d003      	beq.n	8008e96 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008e94:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008e96:	887b      	ldrh	r3, [r7, #2]
 8008e98:	f003 0302 	and.w	r3, r3, #2
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d00f      	beq.n	8008ec0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8008ea6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008eae:	b2db      	uxtb	r3, r3
 8008eb0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008eb4:	2b28      	cmp	r3, #40	@ 0x28
 8008eb6:	d003      	beq.n	8008ec0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008ebe:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008ec0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	da03      	bge.n	8008ed0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008ece:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008ed0:	887b      	ldrh	r3, [r7, #2]
 8008ed2:	2b10      	cmp	r3, #16
 8008ed4:	d103      	bne.n	8008ede <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008edc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008ede:	887b      	ldrh	r3, [r7, #2]
 8008ee0:	2b20      	cmp	r3, #32
 8008ee2:	d103      	bne.n	8008eec <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f043 0320 	orr.w	r3, r3, #32
 8008eea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008eec:	887b      	ldrh	r3, [r7, #2]
 8008eee:	2b40      	cmp	r3, #64	@ 0x40
 8008ef0:	d103      	bne.n	8008efa <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ef8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	6819      	ldr	r1, [r3, #0]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	43da      	mvns	r2, r3
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	400a      	ands	r2, r1
 8008f0a:	601a      	str	r2, [r3, #0]
}
 8008f0c:	bf00      	nop
 8008f0e:	3714      	adds	r7, #20
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	2b20      	cmp	r3, #32
 8008f2c:	d138      	bne.n	8008fa0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d101      	bne.n	8008f3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008f38:	2302      	movs	r3, #2
 8008f3a:	e032      	b.n	8008fa2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2224      	movs	r2, #36	@ 0x24
 8008f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f022 0201 	bic.w	r2, r2, #1
 8008f5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008f6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	6819      	ldr	r1, [r3, #0]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	683a      	ldr	r2, [r7, #0]
 8008f78:	430a      	orrs	r2, r1
 8008f7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f042 0201 	orr.w	r2, r2, #1
 8008f8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2220      	movs	r2, #32
 8008f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2200      	movs	r2, #0
 8008f98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	e000      	b.n	8008fa2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008fa0:	2302      	movs	r3, #2
  }
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	370c      	adds	r7, #12
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr

08008fae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008fae:	b480      	push	{r7}
 8008fb0:	b085      	sub	sp, #20
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
 8008fb6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	2b20      	cmp	r3, #32
 8008fc2:	d139      	bne.n	8009038 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d101      	bne.n	8008fd2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008fce:	2302      	movs	r3, #2
 8008fd0:	e033      	b.n	800903a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2224      	movs	r2, #36	@ 0x24
 8008fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f022 0201 	bic.w	r2, r2, #1
 8008ff0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009000:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	021b      	lsls	r3, r3, #8
 8009006:	68fa      	ldr	r2, [r7, #12]
 8009008:	4313      	orrs	r3, r2
 800900a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	68fa      	ldr	r2, [r7, #12]
 8009012:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f042 0201 	orr.w	r2, r2, #1
 8009022:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2220      	movs	r2, #32
 8009028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009034:	2300      	movs	r3, #0
 8009036:	e000      	b.n	800903a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009038:	2302      	movs	r3, #2
  }
}
 800903a:	4618      	mov	r0, r3
 800903c:	3714      	adds	r7, #20
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr

08009046 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009046:	b580      	push	{r7, lr}
 8009048:	b084      	sub	sp, #16
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d101      	bne.n	8009058 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009054:	2301      	movs	r3, #1
 8009056:	e0c0      	b.n	80091da <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800905e:	b2db      	uxtb	r3, r3
 8009060:	2b00      	cmp	r3, #0
 8009062:	d106      	bne.n	8009072 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f009 f9ab 	bl	80123c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2203      	movs	r2, #3
 8009076:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4618      	mov	r0, r3
 8009080:	f004 fc7e 	bl	800d980 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009084:	2300      	movs	r3, #0
 8009086:	73fb      	strb	r3, [r7, #15]
 8009088:	e03e      	b.n	8009108 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800908a:	7bfa      	ldrb	r2, [r7, #15]
 800908c:	6879      	ldr	r1, [r7, #4]
 800908e:	4613      	mov	r3, r2
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	4413      	add	r3, r2
 8009094:	00db      	lsls	r3, r3, #3
 8009096:	440b      	add	r3, r1
 8009098:	3311      	adds	r3, #17
 800909a:	2201      	movs	r2, #1
 800909c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800909e:	7bfa      	ldrb	r2, [r7, #15]
 80090a0:	6879      	ldr	r1, [r7, #4]
 80090a2:	4613      	mov	r3, r2
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	4413      	add	r3, r2
 80090a8:	00db      	lsls	r3, r3, #3
 80090aa:	440b      	add	r3, r1
 80090ac:	3310      	adds	r3, #16
 80090ae:	7bfa      	ldrb	r2, [r7, #15]
 80090b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80090b2:	7bfa      	ldrb	r2, [r7, #15]
 80090b4:	6879      	ldr	r1, [r7, #4]
 80090b6:	4613      	mov	r3, r2
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	4413      	add	r3, r2
 80090bc:	00db      	lsls	r3, r3, #3
 80090be:	440b      	add	r3, r1
 80090c0:	3313      	adds	r3, #19
 80090c2:	2200      	movs	r2, #0
 80090c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80090c6:	7bfa      	ldrb	r2, [r7, #15]
 80090c8:	6879      	ldr	r1, [r7, #4]
 80090ca:	4613      	mov	r3, r2
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	4413      	add	r3, r2
 80090d0:	00db      	lsls	r3, r3, #3
 80090d2:	440b      	add	r3, r1
 80090d4:	3320      	adds	r3, #32
 80090d6:	2200      	movs	r2, #0
 80090d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80090da:	7bfa      	ldrb	r2, [r7, #15]
 80090dc:	6879      	ldr	r1, [r7, #4]
 80090de:	4613      	mov	r3, r2
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	4413      	add	r3, r2
 80090e4:	00db      	lsls	r3, r3, #3
 80090e6:	440b      	add	r3, r1
 80090e8:	3324      	adds	r3, #36	@ 0x24
 80090ea:	2200      	movs	r2, #0
 80090ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80090ee:	7bfb      	ldrb	r3, [r7, #15]
 80090f0:	6879      	ldr	r1, [r7, #4]
 80090f2:	1c5a      	adds	r2, r3, #1
 80090f4:	4613      	mov	r3, r2
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	4413      	add	r3, r2
 80090fa:	00db      	lsls	r3, r3, #3
 80090fc:	440b      	add	r3, r1
 80090fe:	2200      	movs	r2, #0
 8009100:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009102:	7bfb      	ldrb	r3, [r7, #15]
 8009104:	3301      	adds	r3, #1
 8009106:	73fb      	strb	r3, [r7, #15]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	791b      	ldrb	r3, [r3, #4]
 800910c:	7bfa      	ldrb	r2, [r7, #15]
 800910e:	429a      	cmp	r2, r3
 8009110:	d3bb      	bcc.n	800908a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009112:	2300      	movs	r3, #0
 8009114:	73fb      	strb	r3, [r7, #15]
 8009116:	e044      	b.n	80091a2 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009118:	7bfa      	ldrb	r2, [r7, #15]
 800911a:	6879      	ldr	r1, [r7, #4]
 800911c:	4613      	mov	r3, r2
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	4413      	add	r3, r2
 8009122:	00db      	lsls	r3, r3, #3
 8009124:	440b      	add	r3, r1
 8009126:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800912a:	2200      	movs	r2, #0
 800912c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800912e:	7bfa      	ldrb	r2, [r7, #15]
 8009130:	6879      	ldr	r1, [r7, #4]
 8009132:	4613      	mov	r3, r2
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	4413      	add	r3, r2
 8009138:	00db      	lsls	r3, r3, #3
 800913a:	440b      	add	r3, r1
 800913c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009140:	7bfa      	ldrb	r2, [r7, #15]
 8009142:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009144:	7bfa      	ldrb	r2, [r7, #15]
 8009146:	6879      	ldr	r1, [r7, #4]
 8009148:	4613      	mov	r3, r2
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	4413      	add	r3, r2
 800914e:	00db      	lsls	r3, r3, #3
 8009150:	440b      	add	r3, r1
 8009152:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8009156:	2200      	movs	r2, #0
 8009158:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800915a:	7bfa      	ldrb	r2, [r7, #15]
 800915c:	6879      	ldr	r1, [r7, #4]
 800915e:	4613      	mov	r3, r2
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	4413      	add	r3, r2
 8009164:	00db      	lsls	r3, r3, #3
 8009166:	440b      	add	r3, r1
 8009168:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800916c:	2200      	movs	r2, #0
 800916e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009170:	7bfa      	ldrb	r2, [r7, #15]
 8009172:	6879      	ldr	r1, [r7, #4]
 8009174:	4613      	mov	r3, r2
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	4413      	add	r3, r2
 800917a:	00db      	lsls	r3, r3, #3
 800917c:	440b      	add	r3, r1
 800917e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009182:	2200      	movs	r2, #0
 8009184:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009186:	7bfa      	ldrb	r2, [r7, #15]
 8009188:	6879      	ldr	r1, [r7, #4]
 800918a:	4613      	mov	r3, r2
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	4413      	add	r3, r2
 8009190:	00db      	lsls	r3, r3, #3
 8009192:	440b      	add	r3, r1
 8009194:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8009198:	2200      	movs	r2, #0
 800919a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800919c:	7bfb      	ldrb	r3, [r7, #15]
 800919e:	3301      	adds	r3, #1
 80091a0:	73fb      	strb	r3, [r7, #15]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	791b      	ldrb	r3, [r3, #4]
 80091a6:	7bfa      	ldrb	r2, [r7, #15]
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d3b5      	bcc.n	8009118 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6818      	ldr	r0, [r3, #0]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	3304      	adds	r3, #4
 80091b4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80091b8:	f004 fbfd 	bl	800d9b6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2201      	movs	r2, #1
 80091c6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	7a9b      	ldrb	r3, [r3, #10]
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d102      	bne.n	80091d8 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f001 fc40 	bl	800aa58 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80091d8:	2300      	movs	r3, #0
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b082      	sub	sp, #8
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d101      	bne.n	80091f8 <HAL_PCD_Start+0x16>
 80091f4:	2302      	movs	r3, #2
 80091f6:	e012      	b.n	800921e <HAL_PCD_Start+0x3c>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2201      	movs	r2, #1
 80091fc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4618      	mov	r0, r3
 8009206:	f004 fba4 	bl	800d952 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4618      	mov	r0, r3
 8009210:	f006 fe65 	bl	800fede <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800921c:	2300      	movs	r3, #0
}
 800921e:	4618      	mov	r0, r3
 8009220:	3708      	adds	r7, #8
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}

08009226 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009226:	b580      	push	{r7, lr}
 8009228:	b084      	sub	sp, #16
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4618      	mov	r0, r3
 8009234:	f006 fe6a 	bl	800ff0c <USB_ReadInterrupts>
 8009238:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009240:	2b00      	cmp	r3, #0
 8009242:	d003      	beq.n	800924c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 fb04 	bl	8009852 <PCD_EP_ISR_Handler>

    return;
 800924a:	e110      	b.n	800946e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009252:	2b00      	cmp	r3, #0
 8009254:	d013      	beq.n	800927e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800925e:	b29a      	uxth	r2, r3
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009268:	b292      	uxth	r2, r2
 800926a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f009 f93f 	bl	80124f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8009274:	2100      	movs	r1, #0
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 f8fc 	bl	8009474 <HAL_PCD_SetAddress>

    return;
 800927c:	e0f7      	b.n	800946e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009284:	2b00      	cmp	r3, #0
 8009286:	d00c      	beq.n	80092a2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009290:	b29a      	uxth	r2, r3
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800929a:	b292      	uxth	r2, r2
 800929c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80092a0:	e0e5      	b.n	800946e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d00c      	beq.n	80092c6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80092b4:	b29a      	uxth	r2, r3
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80092be:	b292      	uxth	r2, r2
 80092c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80092c4:	e0d3      	b.n	800946e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d034      	beq.n	800933a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80092d8:	b29a      	uxth	r2, r3
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f022 0204 	bic.w	r2, r2, #4
 80092e2:	b292      	uxth	r2, r2
 80092e4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80092f0:	b29a      	uxth	r2, r3
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f022 0208 	bic.w	r2, r2, #8
 80092fa:	b292      	uxth	r2, r2
 80092fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8009306:	2b01      	cmp	r3, #1
 8009308:	d107      	bne.n	800931a <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009312:	2100      	movs	r1, #0
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f009 fae1 	bl	80128dc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f009 f922 	bl	8012564 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009328:	b29a      	uxth	r2, r3
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009332:	b292      	uxth	r2, r2
 8009334:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8009338:	e099      	b.n	800946e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009340:	2b00      	cmp	r3, #0
 8009342:	d027      	beq.n	8009394 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800934c:	b29a      	uxth	r2, r3
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f042 0208 	orr.w	r2, r2, #8
 8009356:	b292      	uxth	r2, r2
 8009358:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009364:	b29a      	uxth	r2, r3
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800936e:	b292      	uxth	r2, r2
 8009370:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800937c:	b29a      	uxth	r2, r3
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f042 0204 	orr.w	r2, r2, #4
 8009386:	b292      	uxth	r2, r2
 8009388:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f009 f8cf 	bl	8012530 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8009392:	e06c      	b.n	800946e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800939a:	2b00      	cmp	r3, #0
 800939c:	d040      	beq.n	8009420 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80093a6:	b29a      	uxth	r2, r3
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80093b0:	b292      	uxth	r2, r2
 80093b2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d12b      	bne.n	8009418 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80093c8:	b29a      	uxth	r2, r3
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f042 0204 	orr.w	r2, r2, #4
 80093d2:	b292      	uxth	r2, r2
 80093d4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80093e0:	b29a      	uxth	r2, r3
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f042 0208 	orr.w	r2, r2, #8
 80093ea:	b292      	uxth	r2, r2
 80093ec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2201      	movs	r2, #1
 80093f4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8009400:	b29b      	uxth	r3, r3
 8009402:	089b      	lsrs	r3, r3, #2
 8009404:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800940e:	2101      	movs	r1, #1
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f009 fa63 	bl	80128dc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8009416:	e02a      	b.n	800946e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f009 f889 	bl	8012530 <HAL_PCD_SuspendCallback>
    return;
 800941e:	e026      	b.n	800946e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00f      	beq.n	800944a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009432:	b29a      	uxth	r2, r3
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800943c:	b292      	uxth	r2, r2
 800943e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f009 f847 	bl	80124d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8009448:	e011      	b.n	800946e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009450:	2b00      	cmp	r3, #0
 8009452:	d00c      	beq.n	800946e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800945c:	b29a      	uxth	r2, r3
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009466:	b292      	uxth	r2, r2
 8009468:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800946c:	bf00      	nop
  }
}
 800946e:	3710      	adds	r7, #16
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b082      	sub	sp, #8
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	460b      	mov	r3, r1
 800947e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8009486:	2b01      	cmp	r3, #1
 8009488:	d101      	bne.n	800948e <HAL_PCD_SetAddress+0x1a>
 800948a:	2302      	movs	r3, #2
 800948c:	e012      	b.n	80094b4 <HAL_PCD_SetAddress+0x40>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2201      	movs	r2, #1
 8009492:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	78fa      	ldrb	r2, [r7, #3]
 800949a:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	78fa      	ldrb	r2, [r7, #3]
 80094a2:	4611      	mov	r1, r2
 80094a4:	4618      	mov	r0, r3
 80094a6:	f006 fd06 	bl	800feb6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3708      	adds	r7, #8
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	4608      	mov	r0, r1
 80094c6:	4611      	mov	r1, r2
 80094c8:	461a      	mov	r2, r3
 80094ca:	4603      	mov	r3, r0
 80094cc:	70fb      	strb	r3, [r7, #3]
 80094ce:	460b      	mov	r3, r1
 80094d0:	803b      	strh	r3, [r7, #0]
 80094d2:	4613      	mov	r3, r2
 80094d4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80094d6:	2300      	movs	r3, #0
 80094d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80094da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	da0e      	bge.n	8009500 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80094e2:	78fb      	ldrb	r3, [r7, #3]
 80094e4:	f003 0207 	and.w	r2, r3, #7
 80094e8:	4613      	mov	r3, r2
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	4413      	add	r3, r2
 80094ee:	00db      	lsls	r3, r3, #3
 80094f0:	3310      	adds	r3, #16
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	4413      	add	r3, r2
 80094f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2201      	movs	r2, #1
 80094fc:	705a      	strb	r2, [r3, #1]
 80094fe:	e00e      	b.n	800951e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009500:	78fb      	ldrb	r3, [r7, #3]
 8009502:	f003 0207 	and.w	r2, r3, #7
 8009506:	4613      	mov	r3, r2
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	4413      	add	r3, r2
 800950c:	00db      	lsls	r3, r3, #3
 800950e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	4413      	add	r3, r2
 8009516:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2200      	movs	r2, #0
 800951c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800951e:	78fb      	ldrb	r3, [r7, #3]
 8009520:	f003 0307 	and.w	r3, r3, #7
 8009524:	b2da      	uxtb	r2, r3
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800952a:	883a      	ldrh	r2, [r7, #0]
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	78ba      	ldrb	r2, [r7, #2]
 8009534:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009536:	78bb      	ldrb	r3, [r7, #2]
 8009538:	2b02      	cmp	r3, #2
 800953a:	d102      	bne.n	8009542 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2200      	movs	r2, #0
 8009540:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8009548:	2b01      	cmp	r3, #1
 800954a:	d101      	bne.n	8009550 <HAL_PCD_EP_Open+0x94>
 800954c:	2302      	movs	r3, #2
 800954e:	e00e      	b.n	800956e <HAL_PCD_EP_Open+0xb2>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2201      	movs	r2, #1
 8009554:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	68f9      	ldr	r1, [r7, #12]
 800955e:	4618      	mov	r0, r3
 8009560:	f004 fa48 	bl	800d9f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800956c:	7afb      	ldrb	r3, [r7, #11]
}
 800956e:	4618      	mov	r0, r3
 8009570:	3710      	adds	r7, #16
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}

08009576 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009576:	b580      	push	{r7, lr}
 8009578:	b084      	sub	sp, #16
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
 800957e:	460b      	mov	r3, r1
 8009580:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009582:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009586:	2b00      	cmp	r3, #0
 8009588:	da0e      	bge.n	80095a8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800958a:	78fb      	ldrb	r3, [r7, #3]
 800958c:	f003 0207 	and.w	r2, r3, #7
 8009590:	4613      	mov	r3, r2
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	4413      	add	r3, r2
 8009596:	00db      	lsls	r3, r3, #3
 8009598:	3310      	adds	r3, #16
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	4413      	add	r3, r2
 800959e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2201      	movs	r2, #1
 80095a4:	705a      	strb	r2, [r3, #1]
 80095a6:	e00e      	b.n	80095c6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80095a8:	78fb      	ldrb	r3, [r7, #3]
 80095aa:	f003 0207 	and.w	r2, r3, #7
 80095ae:	4613      	mov	r3, r2
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	4413      	add	r3, r2
 80095b4:	00db      	lsls	r3, r3, #3
 80095b6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	4413      	add	r3, r2
 80095be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2200      	movs	r2, #0
 80095c4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80095c6:	78fb      	ldrb	r3, [r7, #3]
 80095c8:	f003 0307 	and.w	r3, r3, #7
 80095cc:	b2da      	uxtb	r2, r3
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d101      	bne.n	80095e0 <HAL_PCD_EP_Close+0x6a>
 80095dc:	2302      	movs	r3, #2
 80095de:	e00e      	b.n	80095fe <HAL_PCD_EP_Close+0x88>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2201      	movs	r2, #1
 80095e4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	68f9      	ldr	r1, [r7, #12]
 80095ee:	4618      	mov	r0, r3
 80095f0:	f004 fdc4 	bl	800e17c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80095fc:	2300      	movs	r3, #0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3710      	adds	r7, #16
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}

08009606 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009606:	b580      	push	{r7, lr}
 8009608:	b086      	sub	sp, #24
 800960a:	af00      	add	r7, sp, #0
 800960c:	60f8      	str	r0, [r7, #12]
 800960e:	607a      	str	r2, [r7, #4]
 8009610:	603b      	str	r3, [r7, #0]
 8009612:	460b      	mov	r3, r1
 8009614:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009616:	7afb      	ldrb	r3, [r7, #11]
 8009618:	f003 0207 	and.w	r2, r3, #7
 800961c:	4613      	mov	r3, r2
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	4413      	add	r3, r2
 8009622:	00db      	lsls	r3, r3, #3
 8009624:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009628:	68fa      	ldr	r2, [r7, #12]
 800962a:	4413      	add	r3, r2
 800962c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	683a      	ldr	r2, [r7, #0]
 8009638:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	2200      	movs	r2, #0
 800963e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	2200      	movs	r2, #0
 8009644:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009646:	7afb      	ldrb	r3, [r7, #11]
 8009648:	f003 0307 	and.w	r3, r3, #7
 800964c:	b2da      	uxtb	r2, r3
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	6979      	ldr	r1, [r7, #20]
 8009658:	4618      	mov	r0, r3
 800965a:	f004 ff7c 	bl	800e556 <USB_EPStartXfer>

  return HAL_OK;
 800965e:	2300      	movs	r3, #0
}
 8009660:	4618      	mov	r0, r3
 8009662:	3718      	adds	r7, #24
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8009668:	b480      	push	{r7}
 800966a:	b083      	sub	sp, #12
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	460b      	mov	r3, r1
 8009672:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009674:	78fb      	ldrb	r3, [r7, #3]
 8009676:	f003 0207 	and.w	r2, r3, #7
 800967a:	6879      	ldr	r1, [r7, #4]
 800967c:	4613      	mov	r3, r2
 800967e:	009b      	lsls	r3, r3, #2
 8009680:	4413      	add	r3, r2
 8009682:	00db      	lsls	r3, r3, #3
 8009684:	440b      	add	r3, r1
 8009686:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800968a:	681b      	ldr	r3, [r3, #0]
}
 800968c:	4618      	mov	r0, r3
 800968e:	370c      	adds	r7, #12
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr

08009698 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b086      	sub	sp, #24
 800969c:	af00      	add	r7, sp, #0
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	607a      	str	r2, [r7, #4]
 80096a2:	603b      	str	r3, [r7, #0]
 80096a4:	460b      	mov	r3, r1
 80096a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80096a8:	7afb      	ldrb	r3, [r7, #11]
 80096aa:	f003 0207 	and.w	r2, r3, #7
 80096ae:	4613      	mov	r3, r2
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	4413      	add	r3, r2
 80096b4:	00db      	lsls	r3, r3, #3
 80096b6:	3310      	adds	r3, #16
 80096b8:	68fa      	ldr	r2, [r7, #12]
 80096ba:	4413      	add	r3, r2
 80096bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	683a      	ldr	r2, [r7, #0]
 80096c8:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	2201      	movs	r2, #1
 80096ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	683a      	ldr	r2, [r7, #0]
 80096d6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	2200      	movs	r2, #0
 80096dc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	2201      	movs	r2, #1
 80096e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80096e4:	7afb      	ldrb	r3, [r7, #11]
 80096e6:	f003 0307 	and.w	r3, r3, #7
 80096ea:	b2da      	uxtb	r2, r3
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	6979      	ldr	r1, [r7, #20]
 80096f6:	4618      	mov	r0, r3
 80096f8:	f004 ff2d 	bl	800e556 <USB_EPStartXfer>

  return HAL_OK;
 80096fc:	2300      	movs	r3, #0
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3718      	adds	r7, #24
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}

08009706 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009706:	b580      	push	{r7, lr}
 8009708:	b084      	sub	sp, #16
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
 800970e:	460b      	mov	r3, r1
 8009710:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009712:	78fb      	ldrb	r3, [r7, #3]
 8009714:	f003 0307 	and.w	r3, r3, #7
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	7912      	ldrb	r2, [r2, #4]
 800971c:	4293      	cmp	r3, r2
 800971e:	d901      	bls.n	8009724 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009720:	2301      	movs	r3, #1
 8009722:	e03e      	b.n	80097a2 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009724:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009728:	2b00      	cmp	r3, #0
 800972a:	da0e      	bge.n	800974a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800972c:	78fb      	ldrb	r3, [r7, #3]
 800972e:	f003 0207 	and.w	r2, r3, #7
 8009732:	4613      	mov	r3, r2
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	4413      	add	r3, r2
 8009738:	00db      	lsls	r3, r3, #3
 800973a:	3310      	adds	r3, #16
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	4413      	add	r3, r2
 8009740:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2201      	movs	r2, #1
 8009746:	705a      	strb	r2, [r3, #1]
 8009748:	e00c      	b.n	8009764 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800974a:	78fa      	ldrb	r2, [r7, #3]
 800974c:	4613      	mov	r3, r2
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	4413      	add	r3, r2
 8009752:	00db      	lsls	r3, r3, #3
 8009754:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	4413      	add	r3, r2
 800975c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2200      	movs	r2, #0
 8009762:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2201      	movs	r2, #1
 8009768:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800976a:	78fb      	ldrb	r3, [r7, #3]
 800976c:	f003 0307 	and.w	r3, r3, #7
 8009770:	b2da      	uxtb	r2, r3
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800977c:	2b01      	cmp	r3, #1
 800977e:	d101      	bne.n	8009784 <HAL_PCD_EP_SetStall+0x7e>
 8009780:	2302      	movs	r3, #2
 8009782:	e00e      	b.n	80097a2 <HAL_PCD_EP_SetStall+0x9c>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2201      	movs	r2, #1
 8009788:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	68f9      	ldr	r1, [r7, #12]
 8009792:	4618      	mov	r0, r3
 8009794:	f006 fa90 	bl	800fcb8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80097a0:	2300      	movs	r3, #0
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3710      	adds	r7, #16
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}

080097aa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80097aa:	b580      	push	{r7, lr}
 80097ac:	b084      	sub	sp, #16
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
 80097b2:	460b      	mov	r3, r1
 80097b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80097b6:	78fb      	ldrb	r3, [r7, #3]
 80097b8:	f003 030f 	and.w	r3, r3, #15
 80097bc:	687a      	ldr	r2, [r7, #4]
 80097be:	7912      	ldrb	r2, [r2, #4]
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d901      	bls.n	80097c8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80097c4:	2301      	movs	r3, #1
 80097c6:	e040      	b.n	800984a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80097c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	da0e      	bge.n	80097ee <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80097d0:	78fb      	ldrb	r3, [r7, #3]
 80097d2:	f003 0207 	and.w	r2, r3, #7
 80097d6:	4613      	mov	r3, r2
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	4413      	add	r3, r2
 80097dc:	00db      	lsls	r3, r3, #3
 80097de:	3310      	adds	r3, #16
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	4413      	add	r3, r2
 80097e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2201      	movs	r2, #1
 80097ea:	705a      	strb	r2, [r3, #1]
 80097ec:	e00e      	b.n	800980c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80097ee:	78fb      	ldrb	r3, [r7, #3]
 80097f0:	f003 0207 	and.w	r2, r3, #7
 80097f4:	4613      	mov	r3, r2
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	4413      	add	r3, r2
 80097fa:	00db      	lsls	r3, r3, #3
 80097fc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	4413      	add	r3, r2
 8009804:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2200      	movs	r2, #0
 800980a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2200      	movs	r2, #0
 8009810:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009812:	78fb      	ldrb	r3, [r7, #3]
 8009814:	f003 0307 	and.w	r3, r3, #7
 8009818:	b2da      	uxtb	r2, r3
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8009824:	2b01      	cmp	r3, #1
 8009826:	d101      	bne.n	800982c <HAL_PCD_EP_ClrStall+0x82>
 8009828:	2302      	movs	r3, #2
 800982a:	e00e      	b.n	800984a <HAL_PCD_EP_ClrStall+0xa0>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	68f9      	ldr	r1, [r7, #12]
 800983a:	4618      	mov	r0, r3
 800983c:	f006 fa8d 	bl	800fd5a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8009848:	2300      	movs	r3, #0
}
 800984a:	4618      	mov	r0, r3
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b096      	sub	sp, #88	@ 0x58
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800985a:	e3ad      	b.n	8009fb8 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009864:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8009868:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800986c:	b2db      	uxtb	r3, r3
 800986e:	f003 030f 	and.w	r3, r3, #15
 8009872:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8009876:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800987a:	2b00      	cmp	r3, #0
 800987c:	f040 816f 	bne.w	8009b5e <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8009880:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009884:	f003 0310 	and.w	r3, r3, #16
 8009888:	2b00      	cmp	r3, #0
 800988a:	d14c      	bne.n	8009926 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	881b      	ldrh	r3, [r3, #0]
 8009892:	b29b      	uxth	r3, r3
 8009894:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8009898:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800989c:	81fb      	strh	r3, [r7, #14]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	89fb      	ldrh	r3, [r7, #14]
 80098a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	3310      	adds	r3, #16
 80098b4:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098be:	b29b      	uxth	r3, r3
 80098c0:	461a      	mov	r2, r3
 80098c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	00db      	lsls	r3, r3, #3
 80098c8:	4413      	add	r3, r2
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	6812      	ldr	r2, [r2, #0]
 80098ce:	4413      	add	r3, r2
 80098d0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80098d4:	881b      	ldrh	r3, [r3, #0]
 80098d6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80098da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098dc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80098de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098e0:	695a      	ldr	r2, [r3, #20]
 80098e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098e4:	69db      	ldr	r3, [r3, #28]
 80098e6:	441a      	add	r2, r3
 80098e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098ea:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80098ec:	2100      	movs	r1, #0
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f008 fdd7 	bl	80124a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	7b1b      	ldrb	r3, [r3, #12]
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	f000 835c 	beq.w	8009fb8 <PCD_EP_ISR_Handler+0x766>
 8009900:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009902:	699b      	ldr	r3, [r3, #24]
 8009904:	2b00      	cmp	r3, #0
 8009906:	f040 8357 	bne.w	8009fb8 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	7b1b      	ldrb	r3, [r3, #12]
 800990e:	b2db      	uxtb	r3, r3
 8009910:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009914:	b2da      	uxtb	r2, r3
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2200      	movs	r2, #0
 8009922:	731a      	strb	r2, [r3, #12]
 8009924:	e348      	b.n	8009fb8 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800992c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	881b      	ldrh	r3, [r3, #0]
 8009934:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8009938:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800993c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009940:	2b00      	cmp	r3, #0
 8009942:	d032      	beq.n	80099aa <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800994c:	b29b      	uxth	r3, r3
 800994e:	461a      	mov	r2, r3
 8009950:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	00db      	lsls	r3, r3, #3
 8009956:	4413      	add	r3, r2
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	6812      	ldr	r2, [r2, #0]
 800995c:	4413      	add	r3, r2
 800995e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009962:	881b      	ldrh	r3, [r3, #0]
 8009964:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009968:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800996a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6818      	ldr	r0, [r3, #0]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8009976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009978:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800997a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800997c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800997e:	b29b      	uxth	r3, r3
 8009980:	f006 fb17 	bl	800ffb2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	881b      	ldrh	r3, [r3, #0]
 800998a:	b29a      	uxth	r2, r3
 800998c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8009990:	4013      	ands	r3, r2
 8009992:	823b      	strh	r3, [r7, #16]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	8a3a      	ldrh	r2, [r7, #16]
 800999a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800999e:	b292      	uxth	r2, r2
 80099a0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f008 fd50 	bl	8012448 <HAL_PCD_SetupStageCallback>
 80099a8:	e306      	b.n	8009fb8 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80099aa:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	f280 8302 	bge.w	8009fb8 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	881b      	ldrh	r3, [r3, #0]
 80099ba:	b29a      	uxth	r2, r3
 80099bc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80099c0:	4013      	ands	r3, r2
 80099c2:	83fb      	strh	r3, [r7, #30]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	8bfa      	ldrh	r2, [r7, #30]
 80099ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80099ce:	b292      	uxth	r2, r2
 80099d0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80099da:	b29b      	uxth	r3, r3
 80099dc:	461a      	mov	r2, r3
 80099de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	00db      	lsls	r3, r3, #3
 80099e4:	4413      	add	r3, r2
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	6812      	ldr	r2, [r2, #0]
 80099ea:	4413      	add	r3, r2
 80099ec:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80099f0:	881b      	ldrh	r3, [r3, #0]
 80099f2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80099f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099f8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80099fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099fc:	69db      	ldr	r3, [r3, #28]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d019      	beq.n	8009a36 <PCD_EP_ISR_Handler+0x1e4>
 8009a02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a04:	695b      	ldr	r3, [r3, #20]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d015      	beq.n	8009a36 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6818      	ldr	r0, [r3, #0]
 8009a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a10:	6959      	ldr	r1, [r3, #20]
 8009a12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a14:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8009a16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a18:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	f006 fac9 	bl	800ffb2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8009a20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a22:	695a      	ldr	r2, [r3, #20]
 8009a24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a26:	69db      	ldr	r3, [r3, #28]
 8009a28:	441a      	add	r2, r3
 8009a2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a2c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8009a2e:	2100      	movs	r1, #0
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f008 fd1b 	bl	801246c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	881b      	ldrh	r3, [r3, #0]
 8009a3c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8009a40:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009a44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	f040 82b5 	bne.w	8009fb8 <PCD_EP_ISR_Handler+0x766>
 8009a4e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009a52:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009a56:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009a5a:	f000 82ad 	beq.w	8009fb8 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	61bb      	str	r3, [r7, #24]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	461a      	mov	r2, r3
 8009a70:	69bb      	ldr	r3, [r7, #24]
 8009a72:	4413      	add	r3, r2
 8009a74:	61bb      	str	r3, [r7, #24]
 8009a76:	69bb      	ldr	r3, [r7, #24]
 8009a78:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009a7c:	617b      	str	r3, [r7, #20]
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	881b      	ldrh	r3, [r3, #0]
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a88:	b29a      	uxth	r2, r3
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	801a      	strh	r2, [r3, #0]
 8009a8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a90:	691b      	ldr	r3, [r3, #16]
 8009a92:	2b3e      	cmp	r3, #62	@ 0x3e
 8009a94:	d91d      	bls.n	8009ad2 <PCD_EP_ISR_Handler+0x280>
 8009a96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a98:	691b      	ldr	r3, [r3, #16]
 8009a9a:	095b      	lsrs	r3, r3, #5
 8009a9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009aa0:	691b      	ldr	r3, [r3, #16]
 8009aa2:	f003 031f 	and.w	r3, r3, #31
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d102      	bne.n	8009ab0 <PCD_EP_ISR_Handler+0x25e>
 8009aaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009aac:	3b01      	subs	r3, #1
 8009aae:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	881b      	ldrh	r3, [r3, #0]
 8009ab4:	b29a      	uxth	r2, r3
 8009ab6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	029b      	lsls	r3, r3, #10
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ac6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009aca:	b29a      	uxth	r2, r3
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	801a      	strh	r2, [r3, #0]
 8009ad0:	e026      	b.n	8009b20 <PCD_EP_ISR_Handler+0x2ce>
 8009ad2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ad4:	691b      	ldr	r3, [r3, #16]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d10a      	bne.n	8009af0 <PCD_EP_ISR_Handler+0x29e>
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	881b      	ldrh	r3, [r3, #0]
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ae4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ae8:	b29a      	uxth	r2, r3
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	801a      	strh	r2, [r3, #0]
 8009aee:	e017      	b.n	8009b20 <PCD_EP_ISR_Handler+0x2ce>
 8009af0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009af2:	691b      	ldr	r3, [r3, #16]
 8009af4:	085b      	lsrs	r3, r3, #1
 8009af6:	647b      	str	r3, [r7, #68]	@ 0x44
 8009af8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009afa:	691b      	ldr	r3, [r3, #16]
 8009afc:	f003 0301 	and.w	r3, r3, #1
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d002      	beq.n	8009b0a <PCD_EP_ISR_Handler+0x2b8>
 8009b04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b06:	3301      	adds	r3, #1
 8009b08:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	881b      	ldrh	r3, [r3, #0]
 8009b0e:	b29a      	uxth	r2, r3
 8009b10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	029b      	lsls	r3, r3, #10
 8009b16:	b29b      	uxth	r3, r3
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	b29a      	uxth	r2, r3
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	881b      	ldrh	r3, [r3, #0]
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009b2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b30:	827b      	strh	r3, [r7, #18]
 8009b32:	8a7b      	ldrh	r3, [r7, #18]
 8009b34:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009b38:	827b      	strh	r3, [r7, #18]
 8009b3a:	8a7b      	ldrh	r3, [r7, #18]
 8009b3c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009b40:	827b      	strh	r3, [r7, #18]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	8a7b      	ldrh	r3, [r7, #18]
 8009b48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	8013      	strh	r3, [r2, #0]
 8009b5c:	e22c      	b.n	8009fb8 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	461a      	mov	r2, r3
 8009b64:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	4413      	add	r3, r2
 8009b6c:	881b      	ldrh	r3, [r3, #0]
 8009b6e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009b72:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	f280 80f6 	bge.w	8009d68 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	461a      	mov	r2, r3
 8009b82:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	4413      	add	r3, r2
 8009b8a:	881b      	ldrh	r3, [r3, #0]
 8009b8c:	b29a      	uxth	r2, r3
 8009b8e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8009b92:	4013      	ands	r3, r2
 8009b94:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8009ba2:	009b      	lsls	r3, r3, #2
 8009ba4:	4413      	add	r3, r2
 8009ba6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8009baa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009bae:	b292      	uxth	r2, r2
 8009bb0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8009bb2:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8009bb6:	4613      	mov	r3, r2
 8009bb8:	009b      	lsls	r3, r3, #2
 8009bba:	4413      	add	r3, r2
 8009bbc:	00db      	lsls	r3, r3, #3
 8009bbe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	4413      	add	r3, r2
 8009bc6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8009bc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009bca:	7b1b      	ldrb	r3, [r3, #12]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d123      	bne.n	8009c18 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	461a      	mov	r2, r3
 8009bdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	00db      	lsls	r3, r3, #3
 8009be2:	4413      	add	r3, r2
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	6812      	ldr	r2, [r2, #0]
 8009be8:	4413      	add	r3, r2
 8009bea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009bee:	881b      	ldrh	r3, [r3, #0]
 8009bf0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009bf4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8009bf8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	f000 808e 	beq.w	8009d1e <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6818      	ldr	r0, [r3, #0]
 8009c06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c08:	6959      	ldr	r1, [r3, #20]
 8009c0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c0c:	88da      	ldrh	r2, [r3, #6]
 8009c0e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009c12:	f006 f9ce 	bl	800ffb2 <USB_ReadPMA>
 8009c16:	e082      	b.n	8009d1e <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8009c18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c1a:	78db      	ldrb	r3, [r3, #3]
 8009c1c:	2b02      	cmp	r3, #2
 8009c1e:	d10a      	bne.n	8009c36 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8009c20:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009c24:	461a      	mov	r2, r3
 8009c26:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 f9d3 	bl	8009fd4 <HAL_PCD_EP_DB_Receive>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8009c34:	e073      	b.n	8009d1e <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	009b      	lsls	r3, r3, #2
 8009c42:	4413      	add	r3, r2
 8009c44:	881b      	ldrh	r3, [r3, #0]
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c50:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	461a      	mov	r2, r3
 8009c5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	009b      	lsls	r3, r3, #2
 8009c60:	441a      	add	r2, r3
 8009c62:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8009c66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c72:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	461a      	mov	r2, r3
 8009c80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	4413      	add	r3, r2
 8009c88:	881b      	ldrh	r3, [r3, #0]
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d022      	beq.n	8009cda <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	00db      	lsls	r3, r3, #3
 8009ca6:	4413      	add	r3, r2
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	6812      	ldr	r2, [r2, #0]
 8009cac:	4413      	add	r3, r2
 8009cae:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009cb2:	881b      	ldrh	r3, [r3, #0]
 8009cb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009cb8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8009cbc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d02c      	beq.n	8009d1e <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6818      	ldr	r0, [r3, #0]
 8009cc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009cca:	6959      	ldr	r1, [r3, #20]
 8009ccc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009cce:	891a      	ldrh	r2, [r3, #8]
 8009cd0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009cd4:	f006 f96d 	bl	800ffb2 <USB_ReadPMA>
 8009cd8:	e021      	b.n	8009d1e <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ce2:	b29b      	uxth	r3, r3
 8009ce4:	461a      	mov	r2, r3
 8009ce6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	00db      	lsls	r3, r3, #3
 8009cec:	4413      	add	r3, r2
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	6812      	ldr	r2, [r2, #0]
 8009cf2:	4413      	add	r3, r2
 8009cf4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009cf8:	881b      	ldrh	r3, [r3, #0]
 8009cfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009cfe:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8009d02:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d009      	beq.n	8009d1e <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6818      	ldr	r0, [r3, #0]
 8009d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d10:	6959      	ldr	r1, [r3, #20]
 8009d12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d14:	895a      	ldrh	r2, [r3, #10]
 8009d16:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009d1a:	f006 f94a 	bl	800ffb2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8009d1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d20:	69da      	ldr	r2, [r3, #28]
 8009d22:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009d26:	441a      	add	r2, r3
 8009d28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d2a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8009d2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d2e:	695a      	ldr	r2, [r3, #20]
 8009d30:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009d34:	441a      	add	r2, r3
 8009d36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d38:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8009d3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d3c:	699b      	ldr	r3, [r3, #24]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d005      	beq.n	8009d4e <PCD_EP_ISR_Handler+0x4fc>
 8009d42:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8009d46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d48:	691b      	ldr	r3, [r3, #16]
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d206      	bcs.n	8009d5c <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8009d4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	4619      	mov	r1, r3
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f008 fb89 	bl	801246c <HAL_PCD_DataOutStageCallback>
 8009d5a:	e005      	b.n	8009d68 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009d62:	4618      	mov	r0, r3
 8009d64:	f004 fbf7 	bl	800e556 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8009d68:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009d6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	f000 8121 	beq.w	8009fb8 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8009d76:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8009d7a:	4613      	mov	r3, r2
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	4413      	add	r3, r2
 8009d80:	00db      	lsls	r3, r3, #3
 8009d82:	3310      	adds	r3, #16
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	4413      	add	r3, r2
 8009d88:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	461a      	mov	r2, r3
 8009d90:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8009d94:	009b      	lsls	r3, r3, #2
 8009d96:	4413      	add	r3, r2
 8009d98:	881b      	ldrh	r3, [r3, #0]
 8009d9a:	b29b      	uxth	r3, r3
 8009d9c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8009da0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009da4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	461a      	mov	r2, r3
 8009dae:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8009db2:	009b      	lsls	r3, r3, #2
 8009db4:	441a      	add	r2, r3
 8009db6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009dba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009dbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8009dc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009dc8:	78db      	ldrb	r3, [r3, #3]
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	f040 80a2 	bne.w	8009f14 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8009dd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8009dd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009dd8:	7b1b      	ldrb	r3, [r3, #12]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	f000 8093 	beq.w	8009f06 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009de0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009de4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d046      	beq.n	8009e7a <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009dec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009dee:	785b      	ldrb	r3, [r3, #1]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d126      	bne.n	8009e42 <PCD_EP_ISR_Handler+0x5f0>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	627b      	str	r3, [r7, #36]	@ 0x24
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	461a      	mov	r2, r3
 8009e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e08:	4413      	add	r3, r2
 8009e0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	00da      	lsls	r2, r3, #3
 8009e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e14:	4413      	add	r3, r2
 8009e16:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009e1a:	623b      	str	r3, [r7, #32]
 8009e1c:	6a3b      	ldr	r3, [r7, #32]
 8009e1e:	881b      	ldrh	r3, [r3, #0]
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e26:	b29a      	uxth	r2, r3
 8009e28:	6a3b      	ldr	r3, [r7, #32]
 8009e2a:	801a      	strh	r2, [r3, #0]
 8009e2c:	6a3b      	ldr	r3, [r7, #32]
 8009e2e:	881b      	ldrh	r3, [r3, #0]
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e3a:	b29a      	uxth	r2, r3
 8009e3c:	6a3b      	ldr	r3, [r7, #32]
 8009e3e:	801a      	strh	r2, [r3, #0]
 8009e40:	e061      	b.n	8009f06 <PCD_EP_ISR_Handler+0x6b4>
 8009e42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e44:	785b      	ldrb	r3, [r3, #1]
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d15d      	bne.n	8009f06 <PCD_EP_ISR_Handler+0x6b4>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e5e:	4413      	add	r3, r2
 8009e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e64:	781b      	ldrb	r3, [r3, #0]
 8009e66:	00da      	lsls	r2, r3, #3
 8009e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e6a:	4413      	add	r3, r2
 8009e6c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009e70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e74:	2200      	movs	r2, #0
 8009e76:	801a      	strh	r2, [r3, #0]
 8009e78:	e045      	b.n	8009f06 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e82:	785b      	ldrb	r3, [r3, #1]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d126      	bne.n	8009ed6 <PCD_EP_ISR_Handler+0x684>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	461a      	mov	r2, r3
 8009e9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e9c:	4413      	add	r3, r2
 8009e9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ea2:	781b      	ldrb	r3, [r3, #0]
 8009ea4:	00da      	lsls	r2, r3, #3
 8009ea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ea8:	4413      	add	r3, r2
 8009eaa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009eae:	633b      	str	r3, [r7, #48]	@ 0x30
 8009eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb2:	881b      	ldrh	r3, [r3, #0]
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009eba:	b29a      	uxth	r2, r3
 8009ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ebe:	801a      	strh	r2, [r3, #0]
 8009ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ec2:	881b      	ldrh	r3, [r3, #0]
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009eca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ece:	b29a      	uxth	r2, r3
 8009ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ed2:	801a      	strh	r2, [r3, #0]
 8009ed4:	e017      	b.n	8009f06 <PCD_EP_ISR_Handler+0x6b4>
 8009ed6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ed8:	785b      	ldrb	r3, [r3, #1]
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d113      	bne.n	8009f06 <PCD_EP_ISR_Handler+0x6b4>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	461a      	mov	r2, r3
 8009eea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009eec:	4413      	add	r3, r2
 8009eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ef0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ef2:	781b      	ldrb	r3, [r3, #0]
 8009ef4:	00da      	lsls	r2, r3, #3
 8009ef6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ef8:	4413      	add	r3, r2
 8009efa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009efe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f02:	2200      	movs	r2, #0
 8009f04:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009f06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f008 fac8 	bl	80124a2 <HAL_PCD_DataInStageCallback>
 8009f12:	e051      	b.n	8009fb8 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8009f14:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d144      	bne.n	8009faa <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	00db      	lsls	r3, r3, #3
 8009f32:	4413      	add	r3, r2
 8009f34:	687a      	ldr	r2, [r7, #4]
 8009f36:	6812      	ldr	r2, [r2, #0]
 8009f38:	4413      	add	r3, r2
 8009f3a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009f3e:	881b      	ldrh	r3, [r3, #0]
 8009f40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f44:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8009f48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f4a:	699a      	ldr	r2, [r3, #24]
 8009f4c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d907      	bls.n	8009f64 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8009f54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f56:	699a      	ldr	r2, [r3, #24]
 8009f58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009f5c:	1ad2      	subs	r2, r2, r3
 8009f5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f60:	619a      	str	r2, [r3, #24]
 8009f62:	e002      	b.n	8009f6a <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8009f64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f66:	2200      	movs	r2, #0
 8009f68:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8009f6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f6c:	699b      	ldr	r3, [r3, #24]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d106      	bne.n	8009f80 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009f72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	4619      	mov	r1, r3
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f008 fa92 	bl	80124a2 <HAL_PCD_DataInStageCallback>
 8009f7e:	e01b      	b.n	8009fb8 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8009f80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f82:	695a      	ldr	r2, [r3, #20]
 8009f84:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009f88:	441a      	add	r2, r3
 8009f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f8c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8009f8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f90:	69da      	ldr	r2, [r3, #28]
 8009f92:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009f96:	441a      	add	r2, r3
 8009f98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f9a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f004 fad7 	bl	800e556 <USB_EPStartXfer>
 8009fa8:	e006      	b.n	8009fb8 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8009faa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009fae:	461a      	mov	r2, r3
 8009fb0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 f917 	bl	800a1e6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	b21b      	sxth	r3, r3
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	f6ff ac49 	blt.w	800985c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8009fca:	2300      	movs	r3, #0
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3758      	adds	r7, #88	@ 0x58
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b088      	sub	sp, #32
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	60b9      	str	r1, [r7, #8]
 8009fde:	4613      	mov	r3, r2
 8009fe0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009fe2:	88fb      	ldrh	r3, [r7, #6]
 8009fe4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d07c      	beq.n	800a0e6 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ff4:	b29b      	uxth	r3, r3
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	00db      	lsls	r3, r3, #3
 8009ffe:	4413      	add	r3, r2
 800a000:	68fa      	ldr	r2, [r7, #12]
 800a002:	6812      	ldr	r2, [r2, #0]
 800a004:	4413      	add	r3, r2
 800a006:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a00a:	881b      	ldrh	r3, [r3, #0]
 800a00c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a010:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	699a      	ldr	r2, [r3, #24]
 800a016:	8b7b      	ldrh	r3, [r7, #26]
 800a018:	429a      	cmp	r2, r3
 800a01a:	d306      	bcc.n	800a02a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	699a      	ldr	r2, [r3, #24]
 800a020:	8b7b      	ldrh	r3, [r7, #26]
 800a022:	1ad2      	subs	r2, r2, r3
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	619a      	str	r2, [r3, #24]
 800a028:	e002      	b.n	800a030 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	2200      	movs	r2, #0
 800a02e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	699b      	ldr	r3, [r3, #24]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d123      	bne.n	800a080 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	461a      	mov	r2, r3
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	4413      	add	r3, r2
 800a046:	881b      	ldrh	r3, [r3, #0]
 800a048:	b29b      	uxth	r3, r3
 800a04a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a04e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a052:	833b      	strh	r3, [r7, #24]
 800a054:	8b3b      	ldrh	r3, [r7, #24]
 800a056:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a05a:	833b      	strh	r3, [r7, #24]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	461a      	mov	r2, r3
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	441a      	add	r2, r3
 800a06a:	8b3b      	ldrh	r3, [r7, #24]
 800a06c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a070:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a074:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a078:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a080:	88fb      	ldrh	r3, [r7, #6]
 800a082:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a086:	2b00      	cmp	r3, #0
 800a088:	d01f      	beq.n	800a0ca <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	461a      	mov	r2, r3
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	4413      	add	r3, r2
 800a098:	881b      	ldrh	r3, [r3, #0]
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a0a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0a4:	82fb      	strh	r3, [r7, #22]
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	441a      	add	r2, r3
 800a0b4:	8afb      	ldrh	r3, [r7, #22]
 800a0b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a0ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a0be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a0c2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800a0ca:	8b7b      	ldrh	r3, [r7, #26]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	f000 8085 	beq.w	800a1dc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	6818      	ldr	r0, [r3, #0]
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	6959      	ldr	r1, [r3, #20]
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	891a      	ldrh	r2, [r3, #8]
 800a0de:	8b7b      	ldrh	r3, [r7, #26]
 800a0e0:	f005 ff67 	bl	800ffb2 <USB_ReadPMA>
 800a0e4:	e07a      	b.n	800a1dc <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a0ee:	b29b      	uxth	r3, r3
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	00db      	lsls	r3, r3, #3
 800a0f8:	4413      	add	r3, r2
 800a0fa:	68fa      	ldr	r2, [r7, #12]
 800a0fc:	6812      	ldr	r2, [r2, #0]
 800a0fe:	4413      	add	r3, r2
 800a100:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a104:	881b      	ldrh	r3, [r3, #0]
 800a106:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a10a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	699a      	ldr	r2, [r3, #24]
 800a110:	8b7b      	ldrh	r3, [r7, #26]
 800a112:	429a      	cmp	r2, r3
 800a114:	d306      	bcc.n	800a124 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	699a      	ldr	r2, [r3, #24]
 800a11a:	8b7b      	ldrh	r3, [r7, #26]
 800a11c:	1ad2      	subs	r2, r2, r3
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	619a      	str	r2, [r3, #24]
 800a122:	e002      	b.n	800a12a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	2200      	movs	r2, #0
 800a128:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	699b      	ldr	r3, [r3, #24]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d123      	bne.n	800a17a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	461a      	mov	r2, r3
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	009b      	lsls	r3, r3, #2
 800a13e:	4413      	add	r3, r2
 800a140:	881b      	ldrh	r3, [r3, #0]
 800a142:	b29b      	uxth	r3, r3
 800a144:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a148:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a14c:	83fb      	strh	r3, [r7, #30]
 800a14e:	8bfb      	ldrh	r3, [r7, #30]
 800a150:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a154:	83fb      	strh	r3, [r7, #30]
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	461a      	mov	r2, r3
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	441a      	add	r2, r3
 800a164:	8bfb      	ldrh	r3, [r7, #30]
 800a166:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a16a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a16e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a176:	b29b      	uxth	r3, r3
 800a178:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800a17a:	88fb      	ldrh	r3, [r7, #6]
 800a17c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a180:	2b00      	cmp	r3, #0
 800a182:	d11f      	bne.n	800a1c4 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	461a      	mov	r2, r3
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	009b      	lsls	r3, r3, #2
 800a190:	4413      	add	r3, r2
 800a192:	881b      	ldrh	r3, [r3, #0]
 800a194:	b29b      	uxth	r3, r3
 800a196:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a19a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a19e:	83bb      	strh	r3, [r7, #28]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	441a      	add	r2, r3
 800a1ae:	8bbb      	ldrh	r3, [r7, #28]
 800a1b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a1b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a1b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a1bc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a1c0:	b29b      	uxth	r3, r3
 800a1c2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800a1c4:	8b7b      	ldrh	r3, [r7, #26]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d008      	beq.n	800a1dc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	6818      	ldr	r0, [r3, #0]
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	6959      	ldr	r1, [r3, #20]
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	895a      	ldrh	r2, [r3, #10]
 800a1d6:	8b7b      	ldrh	r3, [r7, #26]
 800a1d8:	f005 feeb 	bl	800ffb2 <USB_ReadPMA>
    }
  }

  return count;
 800a1dc:	8b7b      	ldrh	r3, [r7, #26]
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3720      	adds	r7, #32
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}

0800a1e6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800a1e6:	b580      	push	{r7, lr}
 800a1e8:	b0a4      	sub	sp, #144	@ 0x90
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	60f8      	str	r0, [r7, #12]
 800a1ee:	60b9      	str	r1, [r7, #8]
 800a1f0:	4613      	mov	r3, r2
 800a1f2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a1f4:	88fb      	ldrh	r3, [r7, #6]
 800a1f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	f000 81db 	beq.w	800a5b6 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a208:	b29b      	uxth	r3, r3
 800a20a:	461a      	mov	r2, r3
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	00db      	lsls	r3, r3, #3
 800a212:	4413      	add	r3, r2
 800a214:	68fa      	ldr	r2, [r7, #12]
 800a216:	6812      	ldr	r2, [r2, #0]
 800a218:	4413      	add	r3, r2
 800a21a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a21e:	881b      	ldrh	r3, [r3, #0]
 800a220:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a224:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	699a      	ldr	r2, [r3, #24]
 800a22c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a230:	429a      	cmp	r2, r3
 800a232:	d907      	bls.n	800a244 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	699a      	ldr	r2, [r3, #24]
 800a238:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a23c:	1ad2      	subs	r2, r2, r3
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	619a      	str	r2, [r3, #24]
 800a242:	e002      	b.n	800a24a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	2200      	movs	r2, #0
 800a248:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	699b      	ldr	r3, [r3, #24]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	f040 80b9 	bne.w	800a3c6 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	785b      	ldrb	r3, [r3, #1]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d126      	bne.n	800a2aa <HAL_PCD_EP_DB_Transmit+0xc4>
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	461a      	mov	r2, r3
 800a26e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a270:	4413      	add	r3, r2
 800a272:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	00da      	lsls	r2, r3, #3
 800a27a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a27c:	4413      	add	r3, r2
 800a27e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a282:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a286:	881b      	ldrh	r3, [r3, #0]
 800a288:	b29b      	uxth	r3, r3
 800a28a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a28e:	b29a      	uxth	r2, r3
 800a290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a292:	801a      	strh	r2, [r3, #0]
 800a294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a296:	881b      	ldrh	r3, [r3, #0]
 800a298:	b29b      	uxth	r3, r3
 800a29a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a29e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2a2:	b29a      	uxth	r2, r3
 800a2a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2a6:	801a      	strh	r2, [r3, #0]
 800a2a8:	e01a      	b.n	800a2e0 <HAL_PCD_EP_DB_Transmit+0xfa>
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	785b      	ldrb	r3, [r3, #1]
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d116      	bne.n	800a2e0 <HAL_PCD_EP_DB_Transmit+0xfa>
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2c6:	4413      	add	r3, r2
 800a2c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	00da      	lsls	r2, r3, #3
 800a2d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2d2:	4413      	add	r3, r2
 800a2d4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a2d8:	633b      	str	r3, [r7, #48]	@ 0x30
 800a2da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2dc:	2200      	movs	r2, #0
 800a2de:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	785b      	ldrb	r3, [r3, #1]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d126      	bne.n	800a33c <HAL_PCD_EP_DB_Transmit+0x156>
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	61fb      	str	r3, [r7, #28]
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a2fc:	b29b      	uxth	r3, r3
 800a2fe:	461a      	mov	r2, r3
 800a300:	69fb      	ldr	r3, [r7, #28]
 800a302:	4413      	add	r3, r2
 800a304:	61fb      	str	r3, [r7, #28]
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	00da      	lsls	r2, r3, #3
 800a30c:	69fb      	ldr	r3, [r7, #28]
 800a30e:	4413      	add	r3, r2
 800a310:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a314:	61bb      	str	r3, [r7, #24]
 800a316:	69bb      	ldr	r3, [r7, #24]
 800a318:	881b      	ldrh	r3, [r3, #0]
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a320:	b29a      	uxth	r2, r3
 800a322:	69bb      	ldr	r3, [r7, #24]
 800a324:	801a      	strh	r2, [r3, #0]
 800a326:	69bb      	ldr	r3, [r7, #24]
 800a328:	881b      	ldrh	r3, [r3, #0]
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a330:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a334:	b29a      	uxth	r2, r3
 800a336:	69bb      	ldr	r3, [r7, #24]
 800a338:	801a      	strh	r2, [r3, #0]
 800a33a:	e017      	b.n	800a36c <HAL_PCD_EP_DB_Transmit+0x186>
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	785b      	ldrb	r3, [r3, #1]
 800a340:	2b01      	cmp	r3, #1
 800a342:	d113      	bne.n	800a36c <HAL_PCD_EP_DB_Transmit+0x186>
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a34c:	b29b      	uxth	r3, r3
 800a34e:	461a      	mov	r2, r3
 800a350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a352:	4413      	add	r3, r2
 800a354:	627b      	str	r3, [r7, #36]	@ 0x24
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	00da      	lsls	r2, r3, #3
 800a35c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a35e:	4413      	add	r3, r2
 800a360:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a364:	623b      	str	r3, [r7, #32]
 800a366:	6a3b      	ldr	r3, [r7, #32]
 800a368:	2200      	movs	r2, #0
 800a36a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	4619      	mov	r1, r3
 800a372:	68f8      	ldr	r0, [r7, #12]
 800a374:	f008 f895 	bl	80124a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a378:	88fb      	ldrh	r3, [r7, #6]
 800a37a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a37e:	2b00      	cmp	r3, #0
 800a380:	f000 82fa 	beq.w	800a978 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	461a      	mov	r2, r3
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	4413      	add	r3, r2
 800a392:	881b      	ldrh	r3, [r3, #0]
 800a394:	b29b      	uxth	r3, r3
 800a396:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a39a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a39e:	82fb      	strh	r3, [r7, #22]
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	461a      	mov	r2, r3
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	781b      	ldrb	r3, [r3, #0]
 800a3aa:	009b      	lsls	r3, r3, #2
 800a3ac:	441a      	add	r2, r3
 800a3ae:	8afb      	ldrh	r3, [r7, #22]
 800a3b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a3b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a3b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a3bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	8013      	strh	r3, [r2, #0]
 800a3c4:	e2d8      	b.n	800a978 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a3c6:	88fb      	ldrh	r3, [r7, #6]
 800a3c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d021      	beq.n	800a414 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	009b      	lsls	r3, r3, #2
 800a3dc:	4413      	add	r3, r2
 800a3de:	881b      	ldrh	r3, [r3, #0]
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a3e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3ea:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	781b      	ldrb	r3, [r3, #0]
 800a3f8:	009b      	lsls	r3, r3, #2
 800a3fa:	441a      	add	r2, r3
 800a3fc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a400:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a404:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a408:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a40c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a410:	b29b      	uxth	r3, r3
 800a412:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a41a:	2b01      	cmp	r3, #1
 800a41c:	f040 82ac 	bne.w	800a978 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	695a      	ldr	r2, [r3, #20]
 800a424:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a428:	441a      	add	r2, r3
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	69da      	ldr	r2, [r3, #28]
 800a432:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a436:	441a      	add	r2, r3
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	6a1a      	ldr	r2, [r3, #32]
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	691b      	ldr	r3, [r3, #16]
 800a444:	429a      	cmp	r2, r3
 800a446:	d30b      	bcc.n	800a460 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	691b      	ldr	r3, [r3, #16]
 800a44c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	6a1a      	ldr	r2, [r3, #32]
 800a454:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a458:	1ad2      	subs	r2, r2, r3
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	621a      	str	r2, [r3, #32]
 800a45e:	e017      	b.n	800a490 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	6a1b      	ldr	r3, [r3, #32]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d108      	bne.n	800a47a <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800a468:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a46c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	2200      	movs	r2, #0
 800a474:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800a478:	e00a      	b.n	800a490 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	2200      	movs	r2, #0
 800a47e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	6a1b      	ldr	r3, [r3, #32]
 800a486:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	2200      	movs	r2, #0
 800a48e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	785b      	ldrb	r3, [r3, #1]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d165      	bne.n	800a564 <HAL_PCD_EP_DB_Transmit+0x37e>
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4ac:	4413      	add	r3, r2
 800a4ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	781b      	ldrb	r3, [r3, #0]
 800a4b4:	00da      	lsls	r2, r3, #3
 800a4b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4b8:	4413      	add	r3, r2
 800a4ba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a4be:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a4c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4c2:	881b      	ldrh	r3, [r3, #0]
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a4ca:	b29a      	uxth	r2, r3
 800a4cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ce:	801a      	strh	r2, [r3, #0]
 800a4d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a4d4:	2b3e      	cmp	r3, #62	@ 0x3e
 800a4d6:	d91d      	bls.n	800a514 <HAL_PCD_EP_DB_Transmit+0x32e>
 800a4d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a4dc:	095b      	lsrs	r3, r3, #5
 800a4de:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a4e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a4e4:	f003 031f 	and.w	r3, r3, #31
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d102      	bne.n	800a4f2 <HAL_PCD_EP_DB_Transmit+0x30c>
 800a4ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4ee:	3b01      	subs	r3, #1
 800a4f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a4f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4f4:	881b      	ldrh	r3, [r3, #0]
 800a4f6:	b29a      	uxth	r2, r3
 800a4f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	029b      	lsls	r3, r3, #10
 800a4fe:	b29b      	uxth	r3, r3
 800a500:	4313      	orrs	r3, r2
 800a502:	b29b      	uxth	r3, r3
 800a504:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a508:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a50c:	b29a      	uxth	r2, r3
 800a50e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a510:	801a      	strh	r2, [r3, #0]
 800a512:	e044      	b.n	800a59e <HAL_PCD_EP_DB_Transmit+0x3b8>
 800a514:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d10a      	bne.n	800a532 <HAL_PCD_EP_DB_Transmit+0x34c>
 800a51c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a51e:	881b      	ldrh	r3, [r3, #0]
 800a520:	b29b      	uxth	r3, r3
 800a522:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a526:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a52a:	b29a      	uxth	r2, r3
 800a52c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a52e:	801a      	strh	r2, [r3, #0]
 800a530:	e035      	b.n	800a59e <HAL_PCD_EP_DB_Transmit+0x3b8>
 800a532:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a536:	085b      	lsrs	r3, r3, #1
 800a538:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a53a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a53e:	f003 0301 	and.w	r3, r3, #1
 800a542:	2b00      	cmp	r3, #0
 800a544:	d002      	beq.n	800a54c <HAL_PCD_EP_DB_Transmit+0x366>
 800a546:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a548:	3301      	adds	r3, #1
 800a54a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a54c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a54e:	881b      	ldrh	r3, [r3, #0]
 800a550:	b29a      	uxth	r2, r3
 800a552:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a554:	b29b      	uxth	r3, r3
 800a556:	029b      	lsls	r3, r3, #10
 800a558:	b29b      	uxth	r3, r3
 800a55a:	4313      	orrs	r3, r2
 800a55c:	b29a      	uxth	r2, r3
 800a55e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a560:	801a      	strh	r2, [r3, #0]
 800a562:	e01c      	b.n	800a59e <HAL_PCD_EP_DB_Transmit+0x3b8>
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	785b      	ldrb	r3, [r3, #1]
 800a568:	2b01      	cmp	r3, #1
 800a56a:	d118      	bne.n	800a59e <HAL_PCD_EP_DB_Transmit+0x3b8>
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	647b      	str	r3, [r7, #68]	@ 0x44
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	461a      	mov	r2, r3
 800a57e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a580:	4413      	add	r3, r2
 800a582:	647b      	str	r3, [r7, #68]	@ 0x44
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	781b      	ldrb	r3, [r3, #0]
 800a588:	00da      	lsls	r2, r3, #3
 800a58a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a58c:	4413      	add	r3, r2
 800a58e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a592:	643b      	str	r3, [r7, #64]	@ 0x40
 800a594:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a598:	b29a      	uxth	r2, r3
 800a59a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a59c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	6818      	ldr	r0, [r3, #0]
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	6959      	ldr	r1, [r3, #20]
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	891a      	ldrh	r2, [r3, #8]
 800a5aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	f005 fcbc 	bl	800ff2c <USB_WritePMA>
 800a5b4:	e1e0      	b.n	800a978 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a5be:	b29b      	uxth	r3, r3
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	781b      	ldrb	r3, [r3, #0]
 800a5c6:	00db      	lsls	r3, r3, #3
 800a5c8:	4413      	add	r3, r2
 800a5ca:	68fa      	ldr	r2, [r7, #12]
 800a5cc:	6812      	ldr	r2, [r2, #0]
 800a5ce:	4413      	add	r3, r2
 800a5d0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a5d4:	881b      	ldrh	r3, [r3, #0]
 800a5d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a5da:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	699a      	ldr	r2, [r3, #24]
 800a5e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d307      	bcc.n	800a5fa <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	699a      	ldr	r2, [r3, #24]
 800a5ee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a5f2:	1ad2      	subs	r2, r2, r3
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	619a      	str	r2, [r3, #24]
 800a5f8:	e002      	b.n	800a600 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	699b      	ldr	r3, [r3, #24]
 800a604:	2b00      	cmp	r3, #0
 800a606:	f040 80c0 	bne.w	800a78a <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	785b      	ldrb	r3, [r3, #1]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d126      	bne.n	800a660 <HAL_PCD_EP_DB_Transmit+0x47a>
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a620:	b29b      	uxth	r3, r3
 800a622:	461a      	mov	r2, r3
 800a624:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a626:	4413      	add	r3, r2
 800a628:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	781b      	ldrb	r3, [r3, #0]
 800a62e:	00da      	lsls	r2, r3, #3
 800a630:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a632:	4413      	add	r3, r2
 800a634:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a638:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a63a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a63c:	881b      	ldrh	r3, [r3, #0]
 800a63e:	b29b      	uxth	r3, r3
 800a640:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a644:	b29a      	uxth	r2, r3
 800a646:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a648:	801a      	strh	r2, [r3, #0]
 800a64a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a64c:	881b      	ldrh	r3, [r3, #0]
 800a64e:	b29b      	uxth	r3, r3
 800a650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a658:	b29a      	uxth	r2, r3
 800a65a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a65c:	801a      	strh	r2, [r3, #0]
 800a65e:	e01a      	b.n	800a696 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	785b      	ldrb	r3, [r3, #1]
 800a664:	2b01      	cmp	r3, #1
 800a666:	d116      	bne.n	800a696 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	667b      	str	r3, [r7, #100]	@ 0x64
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a676:	b29b      	uxth	r3, r3
 800a678:	461a      	mov	r2, r3
 800a67a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a67c:	4413      	add	r3, r2
 800a67e:	667b      	str	r3, [r7, #100]	@ 0x64
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	781b      	ldrb	r3, [r3, #0]
 800a684:	00da      	lsls	r2, r3, #3
 800a686:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a688:	4413      	add	r3, r2
 800a68a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a68e:	663b      	str	r3, [r7, #96]	@ 0x60
 800a690:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a692:	2200      	movs	r2, #0
 800a694:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	677b      	str	r3, [r7, #116]	@ 0x74
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	785b      	ldrb	r3, [r3, #1]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d12b      	bne.n	800a6fc <HAL_PCD_EP_DB_Transmit+0x516>
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6b8:	4413      	add	r3, r2
 800a6ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	781b      	ldrb	r3, [r3, #0]
 800a6c0:	00da      	lsls	r2, r3, #3
 800a6c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6c4:	4413      	add	r3, r2
 800a6c6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a6ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a6ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a6d2:	881b      	ldrh	r3, [r3, #0]
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a6da:	b29a      	uxth	r2, r3
 800a6dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a6e0:	801a      	strh	r2, [r3, #0]
 800a6e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a6e6:	881b      	ldrh	r3, [r3, #0]
 800a6e8:	b29b      	uxth	r3, r3
 800a6ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6f2:	b29a      	uxth	r2, r3
 800a6f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a6f8:	801a      	strh	r2, [r3, #0]
 800a6fa:	e017      	b.n	800a72c <HAL_PCD_EP_DB_Transmit+0x546>
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	785b      	ldrb	r3, [r3, #1]
 800a700:	2b01      	cmp	r3, #1
 800a702:	d113      	bne.n	800a72c <HAL_PCD_EP_DB_Transmit+0x546>
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a70c:	b29b      	uxth	r3, r3
 800a70e:	461a      	mov	r2, r3
 800a710:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a712:	4413      	add	r3, r2
 800a714:	677b      	str	r3, [r7, #116]	@ 0x74
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	781b      	ldrb	r3, [r3, #0]
 800a71a:	00da      	lsls	r2, r3, #3
 800a71c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a71e:	4413      	add	r3, r2
 800a720:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a724:	673b      	str	r3, [r7, #112]	@ 0x70
 800a726:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a728:	2200      	movs	r2, #0
 800a72a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	4619      	mov	r1, r3
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	f007 feb5 	bl	80124a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a738:	88fb      	ldrh	r3, [r7, #6]
 800a73a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a73e:	2b00      	cmp	r3, #0
 800a740:	f040 811a 	bne.w	800a978 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	461a      	mov	r2, r3
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	781b      	ldrb	r3, [r3, #0]
 800a74e:	009b      	lsls	r3, r3, #2
 800a750:	4413      	add	r3, r2
 800a752:	881b      	ldrh	r3, [r3, #0]
 800a754:	b29b      	uxth	r3, r3
 800a756:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a75a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a75e:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	461a      	mov	r2, r3
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	009b      	lsls	r3, r3, #2
 800a76e:	441a      	add	r2, r3
 800a770:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800a774:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a778:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a77c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a780:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a784:	b29b      	uxth	r3, r3
 800a786:	8013      	strh	r3, [r2, #0]
 800a788:	e0f6      	b.n	800a978 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a78a:	88fb      	ldrh	r3, [r7, #6]
 800a78c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a790:	2b00      	cmp	r3, #0
 800a792:	d121      	bne.n	800a7d8 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	461a      	mov	r2, r3
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	4413      	add	r3, r2
 800a7a2:	881b      	ldrh	r3, [r3, #0]
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a7aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7ae:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	781b      	ldrb	r3, [r3, #0]
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	441a      	add	r2, r3
 800a7c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a7c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a7c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a7cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a7d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	f040 80ca 	bne.w	800a978 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	695a      	ldr	r2, [r3, #20]
 800a7e8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a7ec:	441a      	add	r2, r3
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	69da      	ldr	r2, [r3, #28]
 800a7f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a7fa:	441a      	add	r2, r3
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	6a1a      	ldr	r2, [r3, #32]
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	691b      	ldr	r3, [r3, #16]
 800a808:	429a      	cmp	r2, r3
 800a80a:	d30b      	bcc.n	800a824 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	691b      	ldr	r3, [r3, #16]
 800a810:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	6a1a      	ldr	r2, [r3, #32]
 800a818:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a81c:	1ad2      	subs	r2, r2, r3
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	621a      	str	r2, [r3, #32]
 800a822:	e017      	b.n	800a854 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	6a1b      	ldr	r3, [r3, #32]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d108      	bne.n	800a83e <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800a82c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a830:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	2200      	movs	r2, #0
 800a838:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800a83c:	e00a      	b.n	800a854 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	6a1b      	ldr	r3, [r3, #32]
 800a842:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	2200      	movs	r2, #0
 800a84a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	2200      	movs	r2, #0
 800a850:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	657b      	str	r3, [r7, #84]	@ 0x54
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	785b      	ldrb	r3, [r3, #1]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d165      	bne.n	800a92e <HAL_PCD_EP_DB_Transmit+0x748>
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a870:	b29b      	uxth	r3, r3
 800a872:	461a      	mov	r2, r3
 800a874:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a876:	4413      	add	r3, r2
 800a878:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	00da      	lsls	r2, r3, #3
 800a880:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a882:	4413      	add	r3, r2
 800a884:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a888:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a88a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a88c:	881b      	ldrh	r3, [r3, #0]
 800a88e:	b29b      	uxth	r3, r3
 800a890:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a894:	b29a      	uxth	r2, r3
 800a896:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a898:	801a      	strh	r2, [r3, #0]
 800a89a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a89e:	2b3e      	cmp	r3, #62	@ 0x3e
 800a8a0:	d91d      	bls.n	800a8de <HAL_PCD_EP_DB_Transmit+0x6f8>
 800a8a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a8a6:	095b      	lsrs	r3, r3, #5
 800a8a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a8aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a8ae:	f003 031f 	and.w	r3, r3, #31
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d102      	bne.n	800a8bc <HAL_PCD_EP_DB_Transmit+0x6d6>
 800a8b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a8b8:	3b01      	subs	r3, #1
 800a8ba:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a8bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a8be:	881b      	ldrh	r3, [r3, #0]
 800a8c0:	b29a      	uxth	r2, r3
 800a8c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a8c4:	b29b      	uxth	r3, r3
 800a8c6:	029b      	lsls	r3, r3, #10
 800a8c8:	b29b      	uxth	r3, r3
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	b29b      	uxth	r3, r3
 800a8ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8d6:	b29a      	uxth	r2, r3
 800a8d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a8da:	801a      	strh	r2, [r3, #0]
 800a8dc:	e041      	b.n	800a962 <HAL_PCD_EP_DB_Transmit+0x77c>
 800a8de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d10a      	bne.n	800a8fc <HAL_PCD_EP_DB_Transmit+0x716>
 800a8e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a8e8:	881b      	ldrh	r3, [r3, #0]
 800a8ea:	b29b      	uxth	r3, r3
 800a8ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8f4:	b29a      	uxth	r2, r3
 800a8f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a8f8:	801a      	strh	r2, [r3, #0]
 800a8fa:	e032      	b.n	800a962 <HAL_PCD_EP_DB_Transmit+0x77c>
 800a8fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a900:	085b      	lsrs	r3, r3, #1
 800a902:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a904:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a908:	f003 0301 	and.w	r3, r3, #1
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d002      	beq.n	800a916 <HAL_PCD_EP_DB_Transmit+0x730>
 800a910:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a912:	3301      	adds	r3, #1
 800a914:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a916:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a918:	881b      	ldrh	r3, [r3, #0]
 800a91a:	b29a      	uxth	r2, r3
 800a91c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a91e:	b29b      	uxth	r3, r3
 800a920:	029b      	lsls	r3, r3, #10
 800a922:	b29b      	uxth	r3, r3
 800a924:	4313      	orrs	r3, r2
 800a926:	b29a      	uxth	r2, r3
 800a928:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a92a:	801a      	strh	r2, [r3, #0]
 800a92c:	e019      	b.n	800a962 <HAL_PCD_EP_DB_Transmit+0x77c>
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	785b      	ldrb	r3, [r3, #1]
 800a932:	2b01      	cmp	r3, #1
 800a934:	d115      	bne.n	800a962 <HAL_PCD_EP_DB_Transmit+0x77c>
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a93e:	b29b      	uxth	r3, r3
 800a940:	461a      	mov	r2, r3
 800a942:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a944:	4413      	add	r3, r2
 800a946:	657b      	str	r3, [r7, #84]	@ 0x54
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	781b      	ldrb	r3, [r3, #0]
 800a94c:	00da      	lsls	r2, r3, #3
 800a94e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a950:	4413      	add	r3, r2
 800a952:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a956:	653b      	str	r3, [r7, #80]	@ 0x50
 800a958:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a95c:	b29a      	uxth	r2, r3
 800a95e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a960:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	6818      	ldr	r0, [r3, #0]
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	6959      	ldr	r1, [r3, #20]
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	895a      	ldrh	r2, [r3, #10]
 800a96e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a972:	b29b      	uxth	r3, r3
 800a974:	f005 fada 	bl	800ff2c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	461a      	mov	r2, r3
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	781b      	ldrb	r3, [r3, #0]
 800a982:	009b      	lsls	r3, r3, #2
 800a984:	4413      	add	r3, r2
 800a986:	881b      	ldrh	r3, [r3, #0]
 800a988:	b29b      	uxth	r3, r3
 800a98a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a98e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a992:	82bb      	strh	r3, [r7, #20]
 800a994:	8abb      	ldrh	r3, [r7, #20]
 800a996:	f083 0310 	eor.w	r3, r3, #16
 800a99a:	82bb      	strh	r3, [r7, #20]
 800a99c:	8abb      	ldrh	r3, [r7, #20]
 800a99e:	f083 0320 	eor.w	r3, r3, #32
 800a9a2:	82bb      	strh	r3, [r7, #20]
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	461a      	mov	r2, r3
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	009b      	lsls	r3, r3, #2
 800a9b0:	441a      	add	r2, r3
 800a9b2:	8abb      	ldrh	r3, [r7, #20]
 800a9b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a9b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a9bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a9c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9c4:	b29b      	uxth	r3, r3
 800a9c6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800a9c8:	2300      	movs	r3, #0
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3790      	adds	r7, #144	@ 0x90
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}

0800a9d2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800a9d2:	b480      	push	{r7}
 800a9d4:	b087      	sub	sp, #28
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	60f8      	str	r0, [r7, #12]
 800a9da:	607b      	str	r3, [r7, #4]
 800a9dc:	460b      	mov	r3, r1
 800a9de:	817b      	strh	r3, [r7, #10]
 800a9e0:	4613      	mov	r3, r2
 800a9e2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800a9e4:	897b      	ldrh	r3, [r7, #10]
 800a9e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9ea:	b29b      	uxth	r3, r3
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d00b      	beq.n	800aa08 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a9f0:	897b      	ldrh	r3, [r7, #10]
 800a9f2:	f003 0207 	and.w	r2, r3, #7
 800a9f6:	4613      	mov	r3, r2
 800a9f8:	009b      	lsls	r3, r3, #2
 800a9fa:	4413      	add	r3, r2
 800a9fc:	00db      	lsls	r3, r3, #3
 800a9fe:	3310      	adds	r3, #16
 800aa00:	68fa      	ldr	r2, [r7, #12]
 800aa02:	4413      	add	r3, r2
 800aa04:	617b      	str	r3, [r7, #20]
 800aa06:	e009      	b.n	800aa1c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800aa08:	897a      	ldrh	r2, [r7, #10]
 800aa0a:	4613      	mov	r3, r2
 800aa0c:	009b      	lsls	r3, r3, #2
 800aa0e:	4413      	add	r3, r2
 800aa10:	00db      	lsls	r3, r3, #3
 800aa12:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aa16:	68fa      	ldr	r2, [r7, #12]
 800aa18:	4413      	add	r3, r2
 800aa1a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800aa1c:	893b      	ldrh	r3, [r7, #8]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d107      	bne.n	800aa32 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	2200      	movs	r2, #0
 800aa26:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	b29a      	uxth	r2, r3
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	80da      	strh	r2, [r3, #6]
 800aa30:	e00b      	b.n	800aa4a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	2201      	movs	r2, #1
 800aa36:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	b29a      	uxth	r2, r3
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	0c1b      	lsrs	r3, r3, #16
 800aa44:	b29a      	uxth	r2, r3
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800aa4a:	2300      	movs	r3, #0
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	371c      	adds	r7, #28
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr

0800aa58 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b085      	sub	sp, #20
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2201      	movs	r2, #1
 800aa6a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2200      	movs	r2, #0
 800aa72:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800aa7c:	b29b      	uxth	r3, r3
 800aa7e:	f043 0301 	orr.w	r3, r3, #1
 800aa82:	b29a      	uxth	r2, r3
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800aa90:	b29b      	uxth	r3, r3
 800aa92:	f043 0302 	orr.w	r3, r3, #2
 800aa96:	b29a      	uxth	r2, r3
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800aa9e:	2300      	movs	r3, #0
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3714      	adds	r7, #20
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr

0800aaac <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800aaac:	b480      	push	{r7}
 800aaae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aab0:	4b05      	ldr	r3, [pc, #20]	@ (800aac8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a04      	ldr	r2, [pc, #16]	@ (800aac8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800aab6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aaba:	6013      	str	r3, [r2, #0]
}
 800aabc:	bf00      	nop
 800aabe:	46bd      	mov	sp, r7
 800aac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac4:	4770      	bx	lr
 800aac6:	bf00      	nop
 800aac8:	58000400 	.word	0x58000400

0800aacc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800aacc:	b480      	push	{r7}
 800aace:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800aad0:	4b04      	ldr	r3, [pc, #16]	@ (800aae4 <HAL_PWREx_GetVoltageRange+0x18>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800aad8:	4618      	mov	r0, r3
 800aada:	46bd      	mov	sp, r7
 800aadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae0:	4770      	bx	lr
 800aae2:	bf00      	nop
 800aae4:	58000400 	.word	0x58000400

0800aae8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800aae8:	b480      	push	{r7}
 800aaea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800aaec:	4b05      	ldr	r3, [pc, #20]	@ (800ab04 <HAL_PWREx_EnableVddUSB+0x1c>)
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	4a04      	ldr	r2, [pc, #16]	@ (800ab04 <HAL_PWREx_EnableVddUSB+0x1c>)
 800aaf2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800aaf6:	6053      	str	r3, [r2, #4]
}
 800aaf8:	bf00      	nop
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr
 800ab02:	bf00      	nop
 800ab04:	58000400 	.word	0x58000400

0800ab08 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800ab0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ab16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab1a:	d101      	bne.n	800ab20 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	e000      	b.n	800ab22 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800ab20:	2300      	movs	r3, #0
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	46bd      	mov	sp, r7
 800ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2a:	4770      	bx	lr

0800ab2c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800ab30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ab3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ab3e:	6013      	str	r3, [r2, #0]
}
 800ab40:	bf00      	nop
 800ab42:	46bd      	mov	sp, r7
 800ab44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab48:	4770      	bx	lr

0800ab4a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800ab4a:	b480      	push	{r7}
 800ab4c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800ab4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ab58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ab5c:	6013      	str	r3, [r2, #0]
}
 800ab5e:	bf00      	nop
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr

0800ab68 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800ab6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab7a:	d101      	bne.n	800ab80 <LL_RCC_HSE_IsReady+0x18>
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	e000      	b.n	800ab82 <LL_RCC_HSE_IsReady+0x1a>
 800ab80:	2300      	movs	r3, #0
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr

0800ab8c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800ab90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ab9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ab9e:	6013      	str	r3, [r2, #0]
}
 800aba0:	bf00      	nop
 800aba2:	46bd      	mov	sp, r7
 800aba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba8:	4770      	bx	lr

0800abaa <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800abaa:	b480      	push	{r7}
 800abac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800abae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800abb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800abbc:	6013      	str	r3, [r2, #0]
}
 800abbe:	bf00      	nop
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr

0800abc8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800abc8:	b480      	push	{r7}
 800abca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800abcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800abd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800abda:	d101      	bne.n	800abe0 <LL_RCC_HSI_IsReady+0x18>
 800abdc:	2301      	movs	r3, #1
 800abde:	e000      	b.n	800abe2 <LL_RCC_HSI_IsReady+0x1a>
 800abe0:	2300      	movs	r3, #0
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr

0800abec <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800abec:	b480      	push	{r7}
 800abee:	b083      	sub	sp, #12
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800abf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	061b      	lsls	r3, r3, #24
 800ac02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ac06:	4313      	orrs	r3, r2
 800ac08:	604b      	str	r3, [r1, #4]
}
 800ac0a:	bf00      	nop
 800ac0c:	370c      	adds	r7, #12
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac14:	4770      	bx	lr

0800ac16 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800ac16:	b480      	push	{r7}
 800ac18:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800ac1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ac22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ac26:	f043 0301 	orr.w	r3, r3, #1
 800ac2a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800ac2e:	bf00      	nop
 800ac30:	46bd      	mov	sp, r7
 800ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac36:	4770      	bx	lr

0800ac38 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800ac3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac40:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ac44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ac48:	f023 0301 	bic.w	r3, r3, #1
 800ac4c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800ac50:	bf00      	nop
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr

0800ac5a <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800ac5a:	b480      	push	{r7}
 800ac5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800ac5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac62:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ac66:	f003 0302 	and.w	r3, r3, #2
 800ac6a:	2b02      	cmp	r3, #2
 800ac6c:	d101      	bne.n	800ac72 <LL_RCC_HSI48_IsReady+0x18>
 800ac6e:	2301      	movs	r3, #1
 800ac70:	e000      	b.n	800ac74 <LL_RCC_HSI48_IsReady+0x1a>
 800ac72:	2300      	movs	r3, #0
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	46bd      	mov	sp, r7
 800ac78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7c:	4770      	bx	lr

0800ac7e <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 800ac7e:	b480      	push	{r7}
 800ac80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800ac82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ac8e:	f043 0301 	orr.w	r3, r3, #1
 800ac92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800ac96:	bf00      	nop
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr

0800aca0 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 800aca0:	b480      	push	{r7}
 800aca2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800aca4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800acb0:	f023 0301 	bic.w	r3, r3, #1
 800acb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800acb8:	bf00      	nop
 800acba:	46bd      	mov	sp, r7
 800acbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc0:	4770      	bx	lr

0800acc2 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 800acc2:	b480      	push	{r7}
 800acc4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800acc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800acca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800acd2:	f043 0304 	orr.w	r3, r3, #4
 800acd6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800acda:	bf00      	nop
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr

0800ace4 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 800ace4:	b480      	push	{r7}
 800ace6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800ace8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800acec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acf0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800acf4:	f023 0304 	bic.w	r3, r3, #4
 800acf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800acfc:	bf00      	nop
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr

0800ad06 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800ad06:	b480      	push	{r7}
 800ad08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800ad0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad12:	f003 0302 	and.w	r3, r3, #2
 800ad16:	2b02      	cmp	r3, #2
 800ad18:	d101      	bne.n	800ad1e <LL_RCC_LSE_IsReady+0x18>
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	e000      	b.n	800ad20 <LL_RCC_LSE_IsReady+0x1a>
 800ad1e:	2300      	movs	r3, #0
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	46bd      	mov	sp, r7
 800ad24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad28:	4770      	bx	lr

0800ad2a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800ad2a:	b480      	push	{r7}
 800ad2c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800ad2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ad36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ad3a:	f043 0301 	orr.w	r3, r3, #1
 800ad3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800ad42:	bf00      	nop
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr

0800ad4c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800ad50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ad58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ad5c:	f023 0301 	bic.w	r3, r3, #1
 800ad60:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800ad64:	bf00      	nop
 800ad66:	46bd      	mov	sp, r7
 800ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6c:	4770      	bx	lr

0800ad6e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800ad6e:	b480      	push	{r7}
 800ad70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800ad72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ad7a:	f003 0302 	and.w	r3, r3, #2
 800ad7e:	2b02      	cmp	r3, #2
 800ad80:	d101      	bne.n	800ad86 <LL_RCC_LSI1_IsReady+0x18>
 800ad82:	2301      	movs	r3, #1
 800ad84:	e000      	b.n	800ad88 <LL_RCC_LSI1_IsReady+0x1a>
 800ad86:	2300      	movs	r3, #0
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr

0800ad92 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800ad92:	b480      	push	{r7}
 800ad94:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800ad96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ad9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ada2:	f043 0304 	orr.w	r3, r3, #4
 800ada6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800adaa:	bf00      	nop
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr

0800adb4 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 800adb4:	b480      	push	{r7}
 800adb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800adb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800adbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800adc0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800adc4:	f023 0304 	bic.w	r3, r3, #4
 800adc8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800adcc:	bf00      	nop
 800adce:	46bd      	mov	sp, r7
 800add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add4:	4770      	bx	lr

0800add6 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800add6:	b480      	push	{r7}
 800add8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800adda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800adde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ade2:	f003 0308 	and.w	r3, r3, #8
 800ade6:	2b08      	cmp	r3, #8
 800ade8:	d101      	bne.n	800adee <LL_RCC_LSI2_IsReady+0x18>
 800adea:	2301      	movs	r3, #1
 800adec:	e000      	b.n	800adf0 <LL_RCC_LSI2_IsReady+0x1a>
 800adee:	2300      	movs	r3, #0
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	46bd      	mov	sp, r7
 800adf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf8:	4770      	bx	lr

0800adfa <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800adfa:	b480      	push	{r7}
 800adfc:	b083      	sub	sp, #12
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800ae02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ae0a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	021b      	lsls	r3, r3, #8
 800ae12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ae16:	4313      	orrs	r3, r2
 800ae18:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800ae1c:	bf00      	nop
 800ae1e:	370c      	adds	r7, #12
 800ae20:	46bd      	mov	sp, r7
 800ae22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae26:	4770      	bx	lr

0800ae28 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800ae2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ae36:	f043 0301 	orr.w	r3, r3, #1
 800ae3a:	6013      	str	r3, [r2, #0]
}
 800ae3c:	bf00      	nop
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr

0800ae46 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800ae46:	b480      	push	{r7}
 800ae48:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800ae4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ae54:	f023 0301 	bic.w	r3, r3, #1
 800ae58:	6013      	str	r3, [r2, #0]
}
 800ae5a:	bf00      	nop
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr

0800ae64 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800ae64:	b480      	push	{r7}
 800ae66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800ae68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f003 0302 	and.w	r3, r3, #2
 800ae72:	2b02      	cmp	r3, #2
 800ae74:	d101      	bne.n	800ae7a <LL_RCC_MSI_IsReady+0x16>
 800ae76:	2301      	movs	r3, #1
 800ae78:	e000      	b.n	800ae7c <LL_RCC_MSI_IsReady+0x18>
 800ae7a:	2300      	movs	r3, #0
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae84:	4770      	bx	lr

0800ae86 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800ae86:	b480      	push	{r7}
 800ae88:	b083      	sub	sp, #12
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800ae8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ae98:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	600b      	str	r3, [r1, #0]
}
 800aea2:	bf00      	nop
 800aea4:	370c      	adds	r7, #12
 800aea6:	46bd      	mov	sp, r7
 800aea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeac:	4770      	bx	lr

0800aeae <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800aeae:	b480      	push	{r7}
 800aeb0:	b083      	sub	sp, #12
 800aeb2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800aeb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800aebe:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2bb0      	cmp	r3, #176	@ 0xb0
 800aec4:	d901      	bls.n	800aeca <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800aec6:	23b0      	movs	r3, #176	@ 0xb0
 800aec8:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800aeca:	687b      	ldr	r3, [r7, #4]
}
 800aecc:	4618      	mov	r0, r3
 800aece:	370c      	adds	r7, #12
 800aed0:	46bd      	mov	sp, r7
 800aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed6:	4770      	bx	lr

0800aed8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b083      	sub	sp, #12
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800aee0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aee4:	685b      	ldr	r3, [r3, #4]
 800aee6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	021b      	lsls	r3, r3, #8
 800aeee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800aef2:	4313      	orrs	r3, r2
 800aef4:	604b      	str	r3, [r1, #4]
}
 800aef6:	bf00      	nop
 800aef8:	370c      	adds	r7, #12
 800aefa:	46bd      	mov	sp, r7
 800aefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af00:	4770      	bx	lr

0800af02 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800af02:	b480      	push	{r7}
 800af04:	b083      	sub	sp, #12
 800af06:	af00      	add	r7, sp, #0
 800af08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800af0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af0e:	689b      	ldr	r3, [r3, #8]
 800af10:	f023 0203 	bic.w	r2, r3, #3
 800af14:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	4313      	orrs	r3, r2
 800af1c:	608b      	str	r3, [r1, #8]
}
 800af1e:	bf00      	nop
 800af20:	370c      	adds	r7, #12
 800af22:	46bd      	mov	sp, r7
 800af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af28:	4770      	bx	lr

0800af2a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800af2a:	b480      	push	{r7}
 800af2c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800af2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af32:	689b      	ldr	r3, [r3, #8]
 800af34:	f003 030c 	and.w	r3, r3, #12
}
 800af38:	4618      	mov	r0, r3
 800af3a:	46bd      	mov	sp, r7
 800af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af40:	4770      	bx	lr

0800af42 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800af42:	b480      	push	{r7}
 800af44:	b083      	sub	sp, #12
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800af4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af4e:	689b      	ldr	r3, [r3, #8]
 800af50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800af54:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	4313      	orrs	r3, r2
 800af5c:	608b      	str	r3, [r1, #8]
}
 800af5e:	bf00      	nop
 800af60:	370c      	adds	r7, #12
 800af62:	46bd      	mov	sp, r7
 800af64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af68:	4770      	bx	lr

0800af6a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800af6a:	b480      	push	{r7}
 800af6c:	b083      	sub	sp, #12
 800af6e:	af00      	add	r7, sp, #0
 800af70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800af72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af76:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800af7a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800af7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	4313      	orrs	r3, r2
 800af86:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800af8a:	bf00      	nop
 800af8c:	370c      	adds	r7, #12
 800af8e:	46bd      	mov	sp, r7
 800af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af94:	4770      	bx	lr

0800af96 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800af96:	b480      	push	{r7}
 800af98:	b083      	sub	sp, #12
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800af9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800afa2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800afa6:	f023 020f 	bic.w	r2, r3, #15
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	091b      	lsrs	r3, r3, #4
 800afae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800afb2:	4313      	orrs	r3, r2
 800afb4:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800afb8:	bf00      	nop
 800afba:	370c      	adds	r7, #12
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	4770      	bx	lr

0800afc4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b083      	sub	sp, #12
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800afcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800afd0:	689b      	ldr	r3, [r3, #8]
 800afd2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800afd6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	4313      	orrs	r3, r2
 800afde:	608b      	str	r3, [r1, #8]
}
 800afe0:	bf00      	nop
 800afe2:	370c      	adds	r7, #12
 800afe4:	46bd      	mov	sp, r7
 800afe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afea:	4770      	bx	lr

0800afec <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800afec:	b480      	push	{r7}
 800afee:	b083      	sub	sp, #12
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800aff4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aff8:	689b      	ldr	r3, [r3, #8]
 800affa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800affe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	4313      	orrs	r3, r2
 800b006:	608b      	str	r3, [r1, #8]
}
 800b008:	bf00      	nop
 800b00a:	370c      	adds	r7, #12
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr

0800b014 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800b014:	b480      	push	{r7}
 800b016:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800b018:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b01c:	689b      	ldr	r3, [r3, #8]
 800b01e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800b022:	4618      	mov	r0, r3
 800b024:	46bd      	mov	sp, r7
 800b026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02a:	4770      	bx	lr

0800b02c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 800b02c:	b480      	push	{r7}
 800b02e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800b030:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b034:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800b038:	011b      	lsls	r3, r3, #4
 800b03a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800b03e:	4618      	mov	r0, r3
 800b040:	46bd      	mov	sp, r7
 800b042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b046:	4770      	bx	lr

0800b048 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800b048:	b480      	push	{r7}
 800b04a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800b04c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b050:	689b      	ldr	r3, [r3, #8]
 800b052:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800b056:	4618      	mov	r0, r3
 800b058:	46bd      	mov	sp, r7
 800b05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05e:	4770      	bx	lr

0800b060 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800b060:	b480      	push	{r7}
 800b062:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800b064:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b068:	689b      	ldr	r3, [r3, #8]
 800b06a:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800b06e:	4618      	mov	r0, r3
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr

0800b078 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800b078:	b480      	push	{r7}
 800b07a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800b07c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b086:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b08a:	6013      	str	r3, [r2, #0]
}
 800b08c:	bf00      	nop
 800b08e:	46bd      	mov	sp, r7
 800b090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b094:	4770      	bx	lr

0800b096 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800b096:	b480      	push	{r7}
 800b098:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800b09a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b0a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b0a8:	6013      	str	r3, [r2, #0]
}
 800b0aa:	bf00      	nop
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr

0800b0b4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800b0b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b0c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b0c6:	d101      	bne.n	800b0cc <LL_RCC_PLL_IsReady+0x18>
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	e000      	b.n	800b0ce <LL_RCC_PLL_IsReady+0x1a>
 800b0cc:	2300      	movs	r3, #0
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d6:	4770      	bx	lr

0800b0d8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800b0dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b0e0:	68db      	ldr	r3, [r3, #12]
 800b0e2:	0a1b      	lsrs	r3, r3, #8
 800b0e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f0:	4770      	bx	lr

0800b0f2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800b0f2:	b480      	push	{r7}
 800b0f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800b0f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b0fa:	68db      	ldr	r3, [r3, #12]
 800b0fc:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800b100:	4618      	mov	r0, r3
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr

0800b10a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800b10a:	b480      	push	{r7}
 800b10c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800b10e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b112:	68db      	ldr	r3, [r3, #12]
 800b114:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800b118:	4618      	mov	r0, r3
 800b11a:	46bd      	mov	sp, r7
 800b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b120:	4770      	bx	lr

0800b122 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800b122:	b480      	push	{r7}
 800b124:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800b126:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b12a:	68db      	ldr	r3, [r3, #12]
 800b12c:	f003 0303 	and.w	r3, r3, #3
}
 800b130:	4618      	mov	r0, r3
 800b132:	46bd      	mov	sp, r7
 800b134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b138:	4770      	bx	lr

0800b13a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800b13a:	b480      	push	{r7}
 800b13c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800b13e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b142:	689b      	ldr	r3, [r3, #8]
 800b144:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b148:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b14c:	d101      	bne.n	800b152 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800b14e:	2301      	movs	r3, #1
 800b150:	e000      	b.n	800b154 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800b152:	2300      	movs	r3, #0
}
 800b154:	4618      	mov	r0, r3
 800b156:	46bd      	mov	sp, r7
 800b158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15c:	4770      	bx	lr

0800b15e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800b15e:	b480      	push	{r7}
 800b160:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800b162:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b166:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800b16a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b16e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b172:	d101      	bne.n	800b178 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800b174:	2301      	movs	r3, #1
 800b176:	e000      	b.n	800b17a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800b178:	2300      	movs	r3, #0
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr

0800b184 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800b184:	b480      	push	{r7}
 800b186:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800b188:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b18c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800b190:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b194:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b198:	d101      	bne.n	800b19e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800b19a:	2301      	movs	r3, #1
 800b19c:	e000      	b.n	800b1a0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800b19e:	2300      	movs	r3, #0
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a8:	4770      	bx	lr

0800b1aa <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800b1aa:	b480      	push	{r7}
 800b1ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800b1ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b1b2:	689b      	ldr	r3, [r3, #8]
 800b1b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b1bc:	d101      	bne.n	800b1c2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800b1be:	2301      	movs	r3, #1
 800b1c0:	e000      	b.n	800b1c4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800b1c2:	2300      	movs	r3, #0
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1cc:	4770      	bx	lr

0800b1ce <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800b1ce:	b480      	push	{r7}
 800b1d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800b1d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b1d6:	689b      	ldr	r3, [r3, #8]
 800b1d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b1dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b1e0:	d101      	bne.n	800b1e6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	e000      	b.n	800b1e8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800b1e6:	2300      	movs	r3, #0
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f0:	4770      	bx	lr
	...

0800b1f4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b1f4:	b590      	push	{r4, r7, lr}
 800b1f6:	b08d      	sub	sp, #52	@ 0x34
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d101      	bne.n	800b206 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b202:	2301      	movs	r3, #1
 800b204:	e363      	b.n	800b8ce <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f003 0320 	and.w	r3, r3, #32
 800b20e:	2b00      	cmp	r3, #0
 800b210:	f000 808d 	beq.w	800b32e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b214:	f7ff fe89 	bl	800af2a <LL_RCC_GetSysClkSource>
 800b218:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b21a:	f7ff ff82 	bl	800b122 <LL_RCC_PLL_GetMainSource>
 800b21e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800b220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b222:	2b00      	cmp	r3, #0
 800b224:	d005      	beq.n	800b232 <HAL_RCC_OscConfig+0x3e>
 800b226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b228:	2b0c      	cmp	r3, #12
 800b22a:	d147      	bne.n	800b2bc <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800b22c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b22e:	2b01      	cmp	r3, #1
 800b230:	d144      	bne.n	800b2bc <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	69db      	ldr	r3, [r3, #28]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d101      	bne.n	800b23e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800b23a:	2301      	movs	r3, #1
 800b23c:	e347      	b.n	800b8ce <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800b242:	f7ff fe34 	bl	800aeae <LL_RCC_MSI_GetRange>
 800b246:	4603      	mov	r3, r0
 800b248:	429c      	cmp	r4, r3
 800b24a:	d914      	bls.n	800b276 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b250:	4618      	mov	r0, r3
 800b252:	f000 fd2f 	bl	800bcb4 <RCC_SetFlashLatencyFromMSIRange>
 800b256:	4603      	mov	r3, r0
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d001      	beq.n	800b260 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800b25c:	2301      	movs	r3, #1
 800b25e:	e336      	b.n	800b8ce <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b264:	4618      	mov	r0, r3
 800b266:	f7ff fe0e 	bl	800ae86 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6a1b      	ldr	r3, [r3, #32]
 800b26e:	4618      	mov	r0, r3
 800b270:	f7ff fe32 	bl	800aed8 <LL_RCC_MSI_SetCalibTrimming>
 800b274:	e013      	b.n	800b29e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7ff fe03 	bl	800ae86 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6a1b      	ldr	r3, [r3, #32]
 800b284:	4618      	mov	r0, r3
 800b286:	f7ff fe27 	bl	800aed8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b28e:	4618      	mov	r0, r3
 800b290:	f000 fd10 	bl	800bcb4 <RCC_SetFlashLatencyFromMSIRange>
 800b294:	4603      	mov	r3, r0
 800b296:	2b00      	cmp	r3, #0
 800b298:	d001      	beq.n	800b29e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800b29a:	2301      	movs	r3, #1
 800b29c:	e317      	b.n	800b8ce <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800b29e:	f000 fcc9 	bl	800bc34 <HAL_RCC_GetHCLKFreq>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	4aa4      	ldr	r2, [pc, #656]	@ (800b538 <HAL_RCC_OscConfig+0x344>)
 800b2a6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b2a8:	4ba4      	ldr	r3, [pc, #656]	@ (800b53c <HAL_RCC_OscConfig+0x348>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f7fa fa13 	bl	80056d8 <HAL_InitTick>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d039      	beq.n	800b32c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	e308      	b.n	800b8ce <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	69db      	ldr	r3, [r3, #28]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d01e      	beq.n	800b302 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800b2c4:	f7ff fdb0 	bl	800ae28 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b2c8:	f7fa fa54 	bl	8005774 <HAL_GetTick>
 800b2cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800b2ce:	e008      	b.n	800b2e2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b2d0:	f7fa fa50 	bl	8005774 <HAL_GetTick>
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2d8:	1ad3      	subs	r3, r2, r3
 800b2da:	2b02      	cmp	r3, #2
 800b2dc:	d901      	bls.n	800b2e2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800b2de:	2303      	movs	r3, #3
 800b2e0:	e2f5      	b.n	800b8ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800b2e2:	f7ff fdbf 	bl	800ae64 <LL_RCC_MSI_IsReady>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d0f1      	beq.n	800b2d0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f7ff fdc8 	bl	800ae86 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6a1b      	ldr	r3, [r3, #32]
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f7ff fdec 	bl	800aed8 <LL_RCC_MSI_SetCalibTrimming>
 800b300:	e015      	b.n	800b32e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800b302:	f7ff fda0 	bl	800ae46 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b306:	f7fa fa35 	bl	8005774 <HAL_GetTick>
 800b30a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800b30c:	e008      	b.n	800b320 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b30e:	f7fa fa31 	bl	8005774 <HAL_GetTick>
 800b312:	4602      	mov	r2, r0
 800b314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b316:	1ad3      	subs	r3, r2, r3
 800b318:	2b02      	cmp	r3, #2
 800b31a:	d901      	bls.n	800b320 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800b31c:	2303      	movs	r3, #3
 800b31e:	e2d6      	b.n	800b8ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800b320:	f7ff fda0 	bl	800ae64 <LL_RCC_MSI_IsReady>
 800b324:	4603      	mov	r3, r0
 800b326:	2b00      	cmp	r3, #0
 800b328:	d1f1      	bne.n	800b30e <HAL_RCC_OscConfig+0x11a>
 800b32a:	e000      	b.n	800b32e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800b32c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f003 0301 	and.w	r3, r3, #1
 800b336:	2b00      	cmp	r3, #0
 800b338:	d047      	beq.n	800b3ca <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b33a:	f7ff fdf6 	bl	800af2a <LL_RCC_GetSysClkSource>
 800b33e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b340:	f7ff feef 	bl	800b122 <LL_RCC_PLL_GetMainSource>
 800b344:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800b346:	6a3b      	ldr	r3, [r7, #32]
 800b348:	2b08      	cmp	r3, #8
 800b34a:	d005      	beq.n	800b358 <HAL_RCC_OscConfig+0x164>
 800b34c:	6a3b      	ldr	r3, [r7, #32]
 800b34e:	2b0c      	cmp	r3, #12
 800b350:	d108      	bne.n	800b364 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800b352:	69fb      	ldr	r3, [r7, #28]
 800b354:	2b03      	cmp	r3, #3
 800b356:	d105      	bne.n	800b364 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	685b      	ldr	r3, [r3, #4]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d134      	bne.n	800b3ca <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800b360:	2301      	movs	r3, #1
 800b362:	e2b4      	b.n	800b8ce <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	685b      	ldr	r3, [r3, #4]
 800b368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b36c:	d102      	bne.n	800b374 <HAL_RCC_OscConfig+0x180>
 800b36e:	f7ff fbdd 	bl	800ab2c <LL_RCC_HSE_Enable>
 800b372:	e001      	b.n	800b378 <HAL_RCC_OscConfig+0x184>
 800b374:	f7ff fbe9 	bl	800ab4a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	685b      	ldr	r3, [r3, #4]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d012      	beq.n	800b3a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b380:	f7fa f9f8 	bl	8005774 <HAL_GetTick>
 800b384:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800b386:	e008      	b.n	800b39a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b388:	f7fa f9f4 	bl	8005774 <HAL_GetTick>
 800b38c:	4602      	mov	r2, r0
 800b38e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b390:	1ad3      	subs	r3, r2, r3
 800b392:	2b64      	cmp	r3, #100	@ 0x64
 800b394:	d901      	bls.n	800b39a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800b396:	2303      	movs	r3, #3
 800b398:	e299      	b.n	800b8ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800b39a:	f7ff fbe5 	bl	800ab68 <LL_RCC_HSE_IsReady>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d0f1      	beq.n	800b388 <HAL_RCC_OscConfig+0x194>
 800b3a4:	e011      	b.n	800b3ca <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3a6:	f7fa f9e5 	bl	8005774 <HAL_GetTick>
 800b3aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800b3ac:	e008      	b.n	800b3c0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b3ae:	f7fa f9e1 	bl	8005774 <HAL_GetTick>
 800b3b2:	4602      	mov	r2, r0
 800b3b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3b6:	1ad3      	subs	r3, r2, r3
 800b3b8:	2b64      	cmp	r3, #100	@ 0x64
 800b3ba:	d901      	bls.n	800b3c0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800b3bc:	2303      	movs	r3, #3
 800b3be:	e286      	b.n	800b8ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800b3c0:	f7ff fbd2 	bl	800ab68 <LL_RCC_HSE_IsReady>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d1f1      	bne.n	800b3ae <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f003 0302 	and.w	r3, r3, #2
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d04c      	beq.n	800b470 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b3d6:	f7ff fda8 	bl	800af2a <LL_RCC_GetSysClkSource>
 800b3da:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b3dc:	f7ff fea1 	bl	800b122 <LL_RCC_PLL_GetMainSource>
 800b3e0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800b3e2:	69bb      	ldr	r3, [r7, #24]
 800b3e4:	2b04      	cmp	r3, #4
 800b3e6:	d005      	beq.n	800b3f4 <HAL_RCC_OscConfig+0x200>
 800b3e8:	69bb      	ldr	r3, [r7, #24]
 800b3ea:	2b0c      	cmp	r3, #12
 800b3ec:	d10e      	bne.n	800b40c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	2b02      	cmp	r3, #2
 800b3f2:	d10b      	bne.n	800b40c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	68db      	ldr	r3, [r3, #12]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d101      	bne.n	800b400 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	e266      	b.n	800b8ce <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	691b      	ldr	r3, [r3, #16]
 800b404:	4618      	mov	r0, r3
 800b406:	f7ff fbf1 	bl	800abec <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800b40a:	e031      	b.n	800b470 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	68db      	ldr	r3, [r3, #12]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d019      	beq.n	800b448 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b414:	f7ff fbba 	bl	800ab8c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b418:	f7fa f9ac 	bl	8005774 <HAL_GetTick>
 800b41c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800b41e:	e008      	b.n	800b432 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b420:	f7fa f9a8 	bl	8005774 <HAL_GetTick>
 800b424:	4602      	mov	r2, r0
 800b426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b428:	1ad3      	subs	r3, r2, r3
 800b42a:	2b02      	cmp	r3, #2
 800b42c:	d901      	bls.n	800b432 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800b42e:	2303      	movs	r3, #3
 800b430:	e24d      	b.n	800b8ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800b432:	f7ff fbc9 	bl	800abc8 <LL_RCC_HSI_IsReady>
 800b436:	4603      	mov	r3, r0
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d0f1      	beq.n	800b420 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	691b      	ldr	r3, [r3, #16]
 800b440:	4618      	mov	r0, r3
 800b442:	f7ff fbd3 	bl	800abec <LL_RCC_HSI_SetCalibTrimming>
 800b446:	e013      	b.n	800b470 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b448:	f7ff fbaf 	bl	800abaa <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b44c:	f7fa f992 	bl	8005774 <HAL_GetTick>
 800b450:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800b452:	e008      	b.n	800b466 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b454:	f7fa f98e 	bl	8005774 <HAL_GetTick>
 800b458:	4602      	mov	r2, r0
 800b45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b45c:	1ad3      	subs	r3, r2, r3
 800b45e:	2b02      	cmp	r3, #2
 800b460:	d901      	bls.n	800b466 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800b462:	2303      	movs	r3, #3
 800b464:	e233      	b.n	800b8ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800b466:	f7ff fbaf 	bl	800abc8 <LL_RCC_HSI_IsReady>
 800b46a:	4603      	mov	r3, r0
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d1f1      	bne.n	800b454 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f003 0308 	and.w	r3, r3, #8
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d106      	bne.n	800b48a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800b484:	2b00      	cmp	r3, #0
 800b486:	f000 80a3 	beq.w	800b5d0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	695b      	ldr	r3, [r3, #20]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d076      	beq.n	800b580 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f003 0310 	and.w	r3, r3, #16
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d046      	beq.n	800b52c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800b49e:	f7ff fc66 	bl	800ad6e <LL_RCC_LSI1_IsReady>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d113      	bne.n	800b4d0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800b4a8:	f7ff fc3f 	bl	800ad2a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b4ac:	f7fa f962 	bl	8005774 <HAL_GetTick>
 800b4b0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800b4b2:	e008      	b.n	800b4c6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b4b4:	f7fa f95e 	bl	8005774 <HAL_GetTick>
 800b4b8:	4602      	mov	r2, r0
 800b4ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4bc:	1ad3      	subs	r3, r2, r3
 800b4be:	2b02      	cmp	r3, #2
 800b4c0:	d901      	bls.n	800b4c6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800b4c2:	2303      	movs	r3, #3
 800b4c4:	e203      	b.n	800b8ce <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800b4c6:	f7ff fc52 	bl	800ad6e <LL_RCC_LSI1_IsReady>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d0f1      	beq.n	800b4b4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800b4d0:	f7ff fc5f 	bl	800ad92 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4d4:	f7fa f94e 	bl	8005774 <HAL_GetTick>
 800b4d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800b4da:	e008      	b.n	800b4ee <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b4dc:	f7fa f94a 	bl	8005774 <HAL_GetTick>
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4e4:	1ad3      	subs	r3, r2, r3
 800b4e6:	2b03      	cmp	r3, #3
 800b4e8:	d901      	bls.n	800b4ee <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800b4ea:	2303      	movs	r3, #3
 800b4ec:	e1ef      	b.n	800b8ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800b4ee:	f7ff fc72 	bl	800add6 <LL_RCC_LSI2_IsReady>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d0f1      	beq.n	800b4dc <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	699b      	ldr	r3, [r3, #24]
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f7ff fc7c 	bl	800adfa <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800b502:	f7ff fc23 	bl	800ad4c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b506:	f7fa f935 	bl	8005774 <HAL_GetTick>
 800b50a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800b50c:	e008      	b.n	800b520 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b50e:	f7fa f931 	bl	8005774 <HAL_GetTick>
 800b512:	4602      	mov	r2, r0
 800b514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b516:	1ad3      	subs	r3, r2, r3
 800b518:	2b02      	cmp	r3, #2
 800b51a:	d901      	bls.n	800b520 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800b51c:	2303      	movs	r3, #3
 800b51e:	e1d6      	b.n	800b8ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800b520:	f7ff fc25 	bl	800ad6e <LL_RCC_LSI1_IsReady>
 800b524:	4603      	mov	r3, r0
 800b526:	2b00      	cmp	r3, #0
 800b528:	d1f1      	bne.n	800b50e <HAL_RCC_OscConfig+0x31a>
 800b52a:	e051      	b.n	800b5d0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800b52c:	f7ff fbfd 	bl	800ad2a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b530:	f7fa f920 	bl	8005774 <HAL_GetTick>
 800b534:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800b536:	e00c      	b.n	800b552 <HAL_RCC_OscConfig+0x35e>
 800b538:	20000010 	.word	0x20000010
 800b53c:	20000030 	.word	0x20000030
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b540:	f7fa f918 	bl	8005774 <HAL_GetTick>
 800b544:	4602      	mov	r2, r0
 800b546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b548:	1ad3      	subs	r3, r2, r3
 800b54a:	2b02      	cmp	r3, #2
 800b54c:	d901      	bls.n	800b552 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800b54e:	2303      	movs	r3, #3
 800b550:	e1bd      	b.n	800b8ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800b552:	f7ff fc0c 	bl	800ad6e <LL_RCC_LSI1_IsReady>
 800b556:	4603      	mov	r3, r0
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d0f1      	beq.n	800b540 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800b55c:	f7ff fc2a 	bl	800adb4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800b560:	e008      	b.n	800b574 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b562:	f7fa f907 	bl	8005774 <HAL_GetTick>
 800b566:	4602      	mov	r2, r0
 800b568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b56a:	1ad3      	subs	r3, r2, r3
 800b56c:	2b03      	cmp	r3, #3
 800b56e:	d901      	bls.n	800b574 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800b570:	2303      	movs	r3, #3
 800b572:	e1ac      	b.n	800b8ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800b574:	f7ff fc2f 	bl	800add6 <LL_RCC_LSI2_IsReady>
 800b578:	4603      	mov	r3, r0
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d1f1      	bne.n	800b562 <HAL_RCC_OscConfig+0x36e>
 800b57e:	e027      	b.n	800b5d0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800b580:	f7ff fc18 	bl	800adb4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b584:	f7fa f8f6 	bl	8005774 <HAL_GetTick>
 800b588:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800b58a:	e008      	b.n	800b59e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b58c:	f7fa f8f2 	bl	8005774 <HAL_GetTick>
 800b590:	4602      	mov	r2, r0
 800b592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b594:	1ad3      	subs	r3, r2, r3
 800b596:	2b03      	cmp	r3, #3
 800b598:	d901      	bls.n	800b59e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800b59a:	2303      	movs	r3, #3
 800b59c:	e197      	b.n	800b8ce <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800b59e:	f7ff fc1a 	bl	800add6 <LL_RCC_LSI2_IsReady>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d1f1      	bne.n	800b58c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800b5a8:	f7ff fbd0 	bl	800ad4c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b5ac:	f7fa f8e2 	bl	8005774 <HAL_GetTick>
 800b5b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800b5b2:	e008      	b.n	800b5c6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b5b4:	f7fa f8de 	bl	8005774 <HAL_GetTick>
 800b5b8:	4602      	mov	r2, r0
 800b5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5bc:	1ad3      	subs	r3, r2, r3
 800b5be:	2b02      	cmp	r3, #2
 800b5c0:	d901      	bls.n	800b5c6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800b5c2:	2303      	movs	r3, #3
 800b5c4:	e183      	b.n	800b8ce <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800b5c6:	f7ff fbd2 	bl	800ad6e <LL_RCC_LSI1_IsReady>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d1f1      	bne.n	800b5b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f003 0304 	and.w	r3, r3, #4
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d05b      	beq.n	800b694 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b5dc:	4ba7      	ldr	r3, [pc, #668]	@ (800b87c <HAL_RCC_OscConfig+0x688>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d114      	bne.n	800b612 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800b5e8:	f7ff fa60 	bl	800aaac <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b5ec:	f7fa f8c2 	bl	8005774 <HAL_GetTick>
 800b5f0:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b5f2:	e008      	b.n	800b606 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b5f4:	f7fa f8be 	bl	8005774 <HAL_GetTick>
 800b5f8:	4602      	mov	r2, r0
 800b5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5fc:	1ad3      	subs	r3, r2, r3
 800b5fe:	2b02      	cmp	r3, #2
 800b600:	d901      	bls.n	800b606 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800b602:	2303      	movs	r3, #3
 800b604:	e163      	b.n	800b8ce <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b606:	4b9d      	ldr	r3, [pc, #628]	@ (800b87c <HAL_RCC_OscConfig+0x688>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d0f0      	beq.n	800b5f4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	689b      	ldr	r3, [r3, #8]
 800b616:	2b01      	cmp	r3, #1
 800b618:	d102      	bne.n	800b620 <HAL_RCC_OscConfig+0x42c>
 800b61a:	f7ff fb30 	bl	800ac7e <LL_RCC_LSE_Enable>
 800b61e:	e00c      	b.n	800b63a <HAL_RCC_OscConfig+0x446>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	689b      	ldr	r3, [r3, #8]
 800b624:	2b05      	cmp	r3, #5
 800b626:	d104      	bne.n	800b632 <HAL_RCC_OscConfig+0x43e>
 800b628:	f7ff fb4b 	bl	800acc2 <LL_RCC_LSE_EnableBypass>
 800b62c:	f7ff fb27 	bl	800ac7e <LL_RCC_LSE_Enable>
 800b630:	e003      	b.n	800b63a <HAL_RCC_OscConfig+0x446>
 800b632:	f7ff fb35 	bl	800aca0 <LL_RCC_LSE_Disable>
 800b636:	f7ff fb55 	bl	800ace4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	689b      	ldr	r3, [r3, #8]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d014      	beq.n	800b66c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b642:	f7fa f897 	bl	8005774 <HAL_GetTick>
 800b646:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800b648:	e00a      	b.n	800b660 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b64a:	f7fa f893 	bl	8005774 <HAL_GetTick>
 800b64e:	4602      	mov	r2, r0
 800b650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b652:	1ad3      	subs	r3, r2, r3
 800b654:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b658:	4293      	cmp	r3, r2
 800b65a:	d901      	bls.n	800b660 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800b65c:	2303      	movs	r3, #3
 800b65e:	e136      	b.n	800b8ce <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800b660:	f7ff fb51 	bl	800ad06 <LL_RCC_LSE_IsReady>
 800b664:	4603      	mov	r3, r0
 800b666:	2b00      	cmp	r3, #0
 800b668:	d0ef      	beq.n	800b64a <HAL_RCC_OscConfig+0x456>
 800b66a:	e013      	b.n	800b694 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b66c:	f7fa f882 	bl	8005774 <HAL_GetTick>
 800b670:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800b672:	e00a      	b.n	800b68a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b674:	f7fa f87e 	bl	8005774 <HAL_GetTick>
 800b678:	4602      	mov	r2, r0
 800b67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b67c:	1ad3      	subs	r3, r2, r3
 800b67e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b682:	4293      	cmp	r3, r2
 800b684:	d901      	bls.n	800b68a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800b686:	2303      	movs	r3, #3
 800b688:	e121      	b.n	800b8ce <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800b68a:	f7ff fb3c 	bl	800ad06 <LL_RCC_LSE_IsReady>
 800b68e:	4603      	mov	r3, r0
 800b690:	2b00      	cmp	r3, #0
 800b692:	d1ef      	bne.n	800b674 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d02c      	beq.n	800b6fa <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d014      	beq.n	800b6d2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b6a8:	f7ff fab5 	bl	800ac16 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6ac:	f7fa f862 	bl	8005774 <HAL_GetTick>
 800b6b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800b6b2:	e008      	b.n	800b6c6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b6b4:	f7fa f85e 	bl	8005774 <HAL_GetTick>
 800b6b8:	4602      	mov	r2, r0
 800b6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6bc:	1ad3      	subs	r3, r2, r3
 800b6be:	2b02      	cmp	r3, #2
 800b6c0:	d901      	bls.n	800b6c6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800b6c2:	2303      	movs	r3, #3
 800b6c4:	e103      	b.n	800b8ce <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800b6c6:	f7ff fac8 	bl	800ac5a <LL_RCC_HSI48_IsReady>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d0f1      	beq.n	800b6b4 <HAL_RCC_OscConfig+0x4c0>
 800b6d0:	e013      	b.n	800b6fa <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b6d2:	f7ff fab1 	bl	800ac38 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6d6:	f7fa f84d 	bl	8005774 <HAL_GetTick>
 800b6da:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800b6dc:	e008      	b.n	800b6f0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b6de:	f7fa f849 	bl	8005774 <HAL_GetTick>
 800b6e2:	4602      	mov	r2, r0
 800b6e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6e6:	1ad3      	subs	r3, r2, r3
 800b6e8:	2b02      	cmp	r3, #2
 800b6ea:	d901      	bls.n	800b6f0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800b6ec:	2303      	movs	r3, #3
 800b6ee:	e0ee      	b.n	800b8ce <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800b6f0:	f7ff fab3 	bl	800ac5a <LL_RCC_HSI48_IsReady>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d1f1      	bne.n	800b6de <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	f000 80e4 	beq.w	800b8cc <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b704:	f7ff fc11 	bl	800af2a <LL_RCC_GetSysClkSource>
 800b708:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800b70a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b70e:	68db      	ldr	r3, [r3, #12]
 800b710:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b716:	2b02      	cmp	r3, #2
 800b718:	f040 80b4 	bne.w	800b884 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	f003 0203 	and.w	r2, r3, #3
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b726:	429a      	cmp	r2, r3
 800b728:	d123      	bne.n	800b772 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b734:	429a      	cmp	r2, r3
 800b736:	d11c      	bne.n	800b772 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	0a1b      	lsrs	r3, r3, #8
 800b73c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b744:	429a      	cmp	r2, r3
 800b746:	d114      	bne.n	800b772 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800b752:	429a      	cmp	r2, r3
 800b754:	d10d      	bne.n	800b772 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b760:	429a      	cmp	r2, r3
 800b762:	d106      	bne.n	800b772 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800b76e:	429a      	cmp	r2, r3
 800b770:	d05d      	beq.n	800b82e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	2b0c      	cmp	r3, #12
 800b776:	d058      	beq.n	800b82a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800b778:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b782:	2b00      	cmp	r3, #0
 800b784:	d001      	beq.n	800b78a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800b786:	2301      	movs	r3, #1
 800b788:	e0a1      	b.n	800b8ce <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800b78a:	f7ff fc84 	bl	800b096 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b78e:	f7f9 fff1 	bl	8005774 <HAL_GetTick>
 800b792:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b794:	e008      	b.n	800b7a8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b796:	f7f9 ffed 	bl	8005774 <HAL_GetTick>
 800b79a:	4602      	mov	r2, r0
 800b79c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b79e:	1ad3      	subs	r3, r2, r3
 800b7a0:	2b02      	cmp	r3, #2
 800b7a2:	d901      	bls.n	800b7a8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800b7a4:	2303      	movs	r3, #3
 800b7a6:	e092      	b.n	800b8ce <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b7a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d1ef      	bne.n	800b796 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b7b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b7ba:	68da      	ldr	r2, [r3, #12]
 800b7bc:	4b30      	ldr	r3, [pc, #192]	@ (800b880 <HAL_RCC_OscConfig+0x68c>)
 800b7be:	4013      	ands	r3, r2
 800b7c0:	687a      	ldr	r2, [r7, #4]
 800b7c2:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800b7c4:	687a      	ldr	r2, [r7, #4]
 800b7c6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b7c8:	4311      	orrs	r1, r2
 800b7ca:	687a      	ldr	r2, [r7, #4]
 800b7cc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b7ce:	0212      	lsls	r2, r2, #8
 800b7d0:	4311      	orrs	r1, r2
 800b7d2:	687a      	ldr	r2, [r7, #4]
 800b7d4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b7d6:	4311      	orrs	r1, r2
 800b7d8:	687a      	ldr	r2, [r7, #4]
 800b7da:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800b7dc:	4311      	orrs	r1, r2
 800b7de:	687a      	ldr	r2, [r7, #4]
 800b7e0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800b7e2:	430a      	orrs	r2, r1
 800b7e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b7e8:	4313      	orrs	r3, r2
 800b7ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800b7ec:	f7ff fc44 	bl	800b078 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b7f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b7f4:	68db      	ldr	r3, [r3, #12]
 800b7f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b7fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b7fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b800:	f7f9 ffb8 	bl	8005774 <HAL_GetTick>
 800b804:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b806:	e008      	b.n	800b81a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b808:	f7f9 ffb4 	bl	8005774 <HAL_GetTick>
 800b80c:	4602      	mov	r2, r0
 800b80e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b810:	1ad3      	subs	r3, r2, r3
 800b812:	2b02      	cmp	r3, #2
 800b814:	d901      	bls.n	800b81a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800b816:	2303      	movs	r3, #3
 800b818:	e059      	b.n	800b8ce <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b81a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b824:	2b00      	cmp	r3, #0
 800b826:	d0ef      	beq.n	800b808 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b828:	e050      	b.n	800b8cc <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800b82a:	2301      	movs	r3, #1
 800b82c:	e04f      	b.n	800b8ce <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b82e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d147      	bne.n	800b8cc <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800b83c:	f7ff fc1c 	bl	800b078 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b840:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b844:	68db      	ldr	r3, [r3, #12]
 800b846:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b84a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b84e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b850:	f7f9 ff90 	bl	8005774 <HAL_GetTick>
 800b854:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b856:	e008      	b.n	800b86a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b858:	f7f9 ff8c 	bl	8005774 <HAL_GetTick>
 800b85c:	4602      	mov	r2, r0
 800b85e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b860:	1ad3      	subs	r3, r2, r3
 800b862:	2b02      	cmp	r3, #2
 800b864:	d901      	bls.n	800b86a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800b866:	2303      	movs	r3, #3
 800b868:	e031      	b.n	800b8ce <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b86a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b874:	2b00      	cmp	r3, #0
 800b876:	d0ef      	beq.n	800b858 <HAL_RCC_OscConfig+0x664>
 800b878:	e028      	b.n	800b8cc <HAL_RCC_OscConfig+0x6d8>
 800b87a:	bf00      	nop
 800b87c:	58000400 	.word	0x58000400
 800b880:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	2b0c      	cmp	r3, #12
 800b888:	d01e      	beq.n	800b8c8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b88a:	f7ff fc04 	bl	800b096 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b88e:	f7f9 ff71 	bl	8005774 <HAL_GetTick>
 800b892:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b894:	e008      	b.n	800b8a8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b896:	f7f9 ff6d 	bl	8005774 <HAL_GetTick>
 800b89a:	4602      	mov	r2, r0
 800b89c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b89e:	1ad3      	subs	r3, r2, r3
 800b8a0:	2b02      	cmp	r3, #2
 800b8a2:	d901      	bls.n	800b8a8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800b8a4:	2303      	movs	r3, #3
 800b8a6:	e012      	b.n	800b8ce <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b8a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d1ef      	bne.n	800b896 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800b8b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b8ba:	68da      	ldr	r2, [r3, #12]
 800b8bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b8c0:	4b05      	ldr	r3, [pc, #20]	@ (800b8d8 <HAL_RCC_OscConfig+0x6e4>)
 800b8c2:	4013      	ands	r3, r2
 800b8c4:	60cb      	str	r3, [r1, #12]
 800b8c6:	e001      	b.n	800b8cc <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	e000      	b.n	800b8ce <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800b8cc:	2300      	movs	r3, #0
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3734      	adds	r7, #52	@ 0x34
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd90      	pop	{r4, r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	eefefffc 	.word	0xeefefffc

0800b8dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b084      	sub	sp, #16
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d101      	bne.n	800b8f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	e12d      	b.n	800bb4c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b8f0:	4b98      	ldr	r3, [pc, #608]	@ (800bb54 <HAL_RCC_ClockConfig+0x278>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f003 0307 	and.w	r3, r3, #7
 800b8f8:	683a      	ldr	r2, [r7, #0]
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	d91b      	bls.n	800b936 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b8fe:	4b95      	ldr	r3, [pc, #596]	@ (800bb54 <HAL_RCC_ClockConfig+0x278>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f023 0207 	bic.w	r2, r3, #7
 800b906:	4993      	ldr	r1, [pc, #588]	@ (800bb54 <HAL_RCC_ClockConfig+0x278>)
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	4313      	orrs	r3, r2
 800b90c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b90e:	f7f9 ff31 	bl	8005774 <HAL_GetTick>
 800b912:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b914:	e008      	b.n	800b928 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b916:	f7f9 ff2d 	bl	8005774 <HAL_GetTick>
 800b91a:	4602      	mov	r2, r0
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	1ad3      	subs	r3, r2, r3
 800b920:	2b02      	cmp	r3, #2
 800b922:	d901      	bls.n	800b928 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800b924:	2303      	movs	r3, #3
 800b926:	e111      	b.n	800bb4c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b928:	4b8a      	ldr	r3, [pc, #552]	@ (800bb54 <HAL_RCC_ClockConfig+0x278>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f003 0307 	and.w	r3, r3, #7
 800b930:	683a      	ldr	r2, [r7, #0]
 800b932:	429a      	cmp	r2, r3
 800b934:	d1ef      	bne.n	800b916 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f003 0302 	and.w	r3, r3, #2
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d016      	beq.n	800b970 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	689b      	ldr	r3, [r3, #8]
 800b946:	4618      	mov	r0, r3
 800b948:	f7ff fafb 	bl	800af42 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b94c:	f7f9 ff12 	bl	8005774 <HAL_GetTick>
 800b950:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800b952:	e008      	b.n	800b966 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b954:	f7f9 ff0e 	bl	8005774 <HAL_GetTick>
 800b958:	4602      	mov	r2, r0
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	1ad3      	subs	r3, r2, r3
 800b95e:	2b02      	cmp	r3, #2
 800b960:	d901      	bls.n	800b966 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800b962:	2303      	movs	r3, #3
 800b964:	e0f2      	b.n	800bb4c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800b966:	f7ff fbe8 	bl	800b13a <LL_RCC_IsActiveFlag_HPRE>
 800b96a:	4603      	mov	r3, r0
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d0f1      	beq.n	800b954 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f003 0320 	and.w	r3, r3, #32
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d016      	beq.n	800b9aa <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	695b      	ldr	r3, [r3, #20]
 800b980:	4618      	mov	r0, r3
 800b982:	f7ff faf2 	bl	800af6a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b986:	f7f9 fef5 	bl	8005774 <HAL_GetTick>
 800b98a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800b98c:	e008      	b.n	800b9a0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b98e:	f7f9 fef1 	bl	8005774 <HAL_GetTick>
 800b992:	4602      	mov	r2, r0
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	1ad3      	subs	r3, r2, r3
 800b998:	2b02      	cmp	r3, #2
 800b99a:	d901      	bls.n	800b9a0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800b99c:	2303      	movs	r3, #3
 800b99e:	e0d5      	b.n	800bb4c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800b9a0:	f7ff fbdd 	bl	800b15e <LL_RCC_IsActiveFlag_C2HPRE>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d0f1      	beq.n	800b98e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d016      	beq.n	800b9e4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	699b      	ldr	r3, [r3, #24]
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7ff faeb 	bl	800af96 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b9c0:	f7f9 fed8 	bl	8005774 <HAL_GetTick>
 800b9c4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800b9c6:	e008      	b.n	800b9da <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b9c8:	f7f9 fed4 	bl	8005774 <HAL_GetTick>
 800b9cc:	4602      	mov	r2, r0
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	1ad3      	subs	r3, r2, r3
 800b9d2:	2b02      	cmp	r3, #2
 800b9d4:	d901      	bls.n	800b9da <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800b9d6:	2303      	movs	r3, #3
 800b9d8:	e0b8      	b.n	800bb4c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800b9da:	f7ff fbd3 	bl	800b184 <LL_RCC_IsActiveFlag_SHDHPRE>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d0f1      	beq.n	800b9c8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f003 0304 	and.w	r3, r3, #4
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d016      	beq.n	800ba1e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	68db      	ldr	r3, [r3, #12]
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f7ff fae5 	bl	800afc4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b9fa:	f7f9 febb 	bl	8005774 <HAL_GetTick>
 800b9fe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800ba00:	e008      	b.n	800ba14 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ba02:	f7f9 feb7 	bl	8005774 <HAL_GetTick>
 800ba06:	4602      	mov	r2, r0
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	1ad3      	subs	r3, r2, r3
 800ba0c:	2b02      	cmp	r3, #2
 800ba0e:	d901      	bls.n	800ba14 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800ba10:	2303      	movs	r3, #3
 800ba12:	e09b      	b.n	800bb4c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800ba14:	f7ff fbc9 	bl	800b1aa <LL_RCC_IsActiveFlag_PPRE1>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d0f1      	beq.n	800ba02 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	f003 0308 	and.w	r3, r3, #8
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d017      	beq.n	800ba5a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	691b      	ldr	r3, [r3, #16]
 800ba2e:	00db      	lsls	r3, r3, #3
 800ba30:	4618      	mov	r0, r3
 800ba32:	f7ff fadb 	bl	800afec <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ba36:	f7f9 fe9d 	bl	8005774 <HAL_GetTick>
 800ba3a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800ba3c:	e008      	b.n	800ba50 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ba3e:	f7f9 fe99 	bl	8005774 <HAL_GetTick>
 800ba42:	4602      	mov	r2, r0
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	1ad3      	subs	r3, r2, r3
 800ba48:	2b02      	cmp	r3, #2
 800ba4a:	d901      	bls.n	800ba50 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800ba4c:	2303      	movs	r3, #3
 800ba4e:	e07d      	b.n	800bb4c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800ba50:	f7ff fbbd 	bl	800b1ce <LL_RCC_IsActiveFlag_PPRE2>
 800ba54:	4603      	mov	r3, r0
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d0f1      	beq.n	800ba3e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f003 0301 	and.w	r3, r3, #1
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d043      	beq.n	800baee <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	685b      	ldr	r3, [r3, #4]
 800ba6a:	2b02      	cmp	r3, #2
 800ba6c:	d106      	bne.n	800ba7c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800ba6e:	f7ff f87b 	bl	800ab68 <LL_RCC_HSE_IsReady>
 800ba72:	4603      	mov	r3, r0
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d11e      	bne.n	800bab6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800ba78:	2301      	movs	r3, #1
 800ba7a:	e067      	b.n	800bb4c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	2b03      	cmp	r3, #3
 800ba82:	d106      	bne.n	800ba92 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800ba84:	f7ff fb16 	bl	800b0b4 <LL_RCC_PLL_IsReady>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d113      	bne.n	800bab6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800ba8e:	2301      	movs	r3, #1
 800ba90:	e05c      	b.n	800bb4c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d106      	bne.n	800baa8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800ba9a:	f7ff f9e3 	bl	800ae64 <LL_RCC_MSI_IsReady>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d108      	bne.n	800bab6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800baa4:	2301      	movs	r3, #1
 800baa6:	e051      	b.n	800bb4c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800baa8:	f7ff f88e 	bl	800abc8 <LL_RCC_HSI_IsReady>
 800baac:	4603      	mov	r3, r0
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d101      	bne.n	800bab6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800bab2:	2301      	movs	r3, #1
 800bab4:	e04a      	b.n	800bb4c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	685b      	ldr	r3, [r3, #4]
 800baba:	4618      	mov	r0, r3
 800babc:	f7ff fa21 	bl	800af02 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bac0:	f7f9 fe58 	bl	8005774 <HAL_GetTick>
 800bac4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bac6:	e00a      	b.n	800bade <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bac8:	f7f9 fe54 	bl	8005774 <HAL_GetTick>
 800bacc:	4602      	mov	r2, r0
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	1ad3      	subs	r3, r2, r3
 800bad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d901      	bls.n	800bade <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800bada:	2303      	movs	r3, #3
 800badc:	e036      	b.n	800bb4c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bade:	f7ff fa24 	bl	800af2a <LL_RCC_GetSysClkSource>
 800bae2:	4602      	mov	r2, r0
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	009b      	lsls	r3, r3, #2
 800baea:	429a      	cmp	r2, r3
 800baec:	d1ec      	bne.n	800bac8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800baee:	4b19      	ldr	r3, [pc, #100]	@ (800bb54 <HAL_RCC_ClockConfig+0x278>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	f003 0307 	and.w	r3, r3, #7
 800baf6:	683a      	ldr	r2, [r7, #0]
 800baf8:	429a      	cmp	r2, r3
 800bafa:	d21b      	bcs.n	800bb34 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bafc:	4b15      	ldr	r3, [pc, #84]	@ (800bb54 <HAL_RCC_ClockConfig+0x278>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f023 0207 	bic.w	r2, r3, #7
 800bb04:	4913      	ldr	r1, [pc, #76]	@ (800bb54 <HAL_RCC_ClockConfig+0x278>)
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	4313      	orrs	r3, r2
 800bb0a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb0c:	f7f9 fe32 	bl	8005774 <HAL_GetTick>
 800bb10:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bb12:	e008      	b.n	800bb26 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800bb14:	f7f9 fe2e 	bl	8005774 <HAL_GetTick>
 800bb18:	4602      	mov	r2, r0
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	1ad3      	subs	r3, r2, r3
 800bb1e:	2b02      	cmp	r3, #2
 800bb20:	d901      	bls.n	800bb26 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800bb22:	2303      	movs	r3, #3
 800bb24:	e012      	b.n	800bb4c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bb26:	4b0b      	ldr	r3, [pc, #44]	@ (800bb54 <HAL_RCC_ClockConfig+0x278>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f003 0307 	and.w	r3, r3, #7
 800bb2e:	683a      	ldr	r2, [r7, #0]
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d1ef      	bne.n	800bb14 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800bb34:	f000 f87e 	bl	800bc34 <HAL_RCC_GetHCLKFreq>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	4a07      	ldr	r2, [pc, #28]	@ (800bb58 <HAL_RCC_ClockConfig+0x27c>)
 800bb3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800bb3e:	f7f9 fe25 	bl	800578c <HAL_GetTickPrio>
 800bb42:	4603      	mov	r3, r0
 800bb44:	4618      	mov	r0, r3
 800bb46:	f7f9 fdc7 	bl	80056d8 <HAL_InitTick>
 800bb4a:	4603      	mov	r3, r0
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3710      	adds	r7, #16
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}
 800bb54:	58004000 	.word	0x58004000
 800bb58:	20000010 	.word	0x20000010

0800bb5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bb5c:	b590      	push	{r4, r7, lr}
 800bb5e:	b085      	sub	sp, #20
 800bb60:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bb62:	f7ff f9e2 	bl	800af2a <LL_RCC_GetSysClkSource>
 800bb66:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d10a      	bne.n	800bb84 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800bb6e:	f7ff f99e 	bl	800aeae <LL_RCC_MSI_GetRange>
 800bb72:	4603      	mov	r3, r0
 800bb74:	091b      	lsrs	r3, r3, #4
 800bb76:	f003 030f 	and.w	r3, r3, #15
 800bb7a:	4a2b      	ldr	r2, [pc, #172]	@ (800bc28 <HAL_RCC_GetSysClockFreq+0xcc>)
 800bb7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb80:	60fb      	str	r3, [r7, #12]
 800bb82:	e04b      	b.n	800bc1c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2b04      	cmp	r3, #4
 800bb88:	d102      	bne.n	800bb90 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800bb8a:	4b28      	ldr	r3, [pc, #160]	@ (800bc2c <HAL_RCC_GetSysClockFreq+0xd0>)
 800bb8c:	60fb      	str	r3, [r7, #12]
 800bb8e:	e045      	b.n	800bc1c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2b08      	cmp	r3, #8
 800bb94:	d10a      	bne.n	800bbac <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800bb96:	f7fe ffb7 	bl	800ab08 <LL_RCC_HSE_IsEnabledDiv2>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	2b01      	cmp	r3, #1
 800bb9e:	d102      	bne.n	800bba6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800bba0:	4b22      	ldr	r3, [pc, #136]	@ (800bc2c <HAL_RCC_GetSysClockFreq+0xd0>)
 800bba2:	60fb      	str	r3, [r7, #12]
 800bba4:	e03a      	b.n	800bc1c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800bba6:	4b22      	ldr	r3, [pc, #136]	@ (800bc30 <HAL_RCC_GetSysClockFreq+0xd4>)
 800bba8:	60fb      	str	r3, [r7, #12]
 800bbaa:	e037      	b.n	800bc1c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800bbac:	f7ff fab9 	bl	800b122 <LL_RCC_PLL_GetMainSource>
 800bbb0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	2b02      	cmp	r3, #2
 800bbb6:	d003      	beq.n	800bbc0 <HAL_RCC_GetSysClockFreq+0x64>
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	2b03      	cmp	r3, #3
 800bbbc:	d003      	beq.n	800bbc6 <HAL_RCC_GetSysClockFreq+0x6a>
 800bbbe:	e00d      	b.n	800bbdc <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800bbc0:	4b1a      	ldr	r3, [pc, #104]	@ (800bc2c <HAL_RCC_GetSysClockFreq+0xd0>)
 800bbc2:	60bb      	str	r3, [r7, #8]
        break;
 800bbc4:	e015      	b.n	800bbf2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800bbc6:	f7fe ff9f 	bl	800ab08 <LL_RCC_HSE_IsEnabledDiv2>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	2b01      	cmp	r3, #1
 800bbce:	d102      	bne.n	800bbd6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800bbd0:	4b16      	ldr	r3, [pc, #88]	@ (800bc2c <HAL_RCC_GetSysClockFreq+0xd0>)
 800bbd2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800bbd4:	e00d      	b.n	800bbf2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800bbd6:	4b16      	ldr	r3, [pc, #88]	@ (800bc30 <HAL_RCC_GetSysClockFreq+0xd4>)
 800bbd8:	60bb      	str	r3, [r7, #8]
        break;
 800bbda:	e00a      	b.n	800bbf2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800bbdc:	f7ff f967 	bl	800aeae <LL_RCC_MSI_GetRange>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	091b      	lsrs	r3, r3, #4
 800bbe4:	f003 030f 	and.w	r3, r3, #15
 800bbe8:	4a0f      	ldr	r2, [pc, #60]	@ (800bc28 <HAL_RCC_GetSysClockFreq+0xcc>)
 800bbea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbee:	60bb      	str	r3, [r7, #8]
        break;
 800bbf0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800bbf2:	f7ff fa71 	bl	800b0d8 <LL_RCC_PLL_GetN>
 800bbf6:	4602      	mov	r2, r0
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	fb03 f402 	mul.w	r4, r3, r2
 800bbfe:	f7ff fa84 	bl	800b10a <LL_RCC_PLL_GetDivider>
 800bc02:	4603      	mov	r3, r0
 800bc04:	091b      	lsrs	r3, r3, #4
 800bc06:	3301      	adds	r3, #1
 800bc08:	fbb4 f4f3 	udiv	r4, r4, r3
 800bc0c:	f7ff fa71 	bl	800b0f2 <LL_RCC_PLL_GetR>
 800bc10:	4603      	mov	r3, r0
 800bc12:	0f5b      	lsrs	r3, r3, #29
 800bc14:	3301      	adds	r3, #1
 800bc16:	fbb4 f3f3 	udiv	r3, r4, r3
 800bc1a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	3714      	adds	r7, #20
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd90      	pop	{r4, r7, pc}
 800bc26:	bf00      	nop
 800bc28:	080154b4 	.word	0x080154b4
 800bc2c:	00f42400 	.word	0x00f42400
 800bc30:	01e84800 	.word	0x01e84800

0800bc34 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bc34:	b598      	push	{r3, r4, r7, lr}
 800bc36:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800bc38:	f7ff ff90 	bl	800bb5c <HAL_RCC_GetSysClockFreq>
 800bc3c:	4604      	mov	r4, r0
 800bc3e:	f7ff f9e9 	bl	800b014 <LL_RCC_GetAHBPrescaler>
 800bc42:	4603      	mov	r3, r0
 800bc44:	091b      	lsrs	r3, r3, #4
 800bc46:	f003 030f 	and.w	r3, r3, #15
 800bc4a:	4a03      	ldr	r2, [pc, #12]	@ (800bc58 <HAL_RCC_GetHCLKFreq+0x24>)
 800bc4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc50:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	bd98      	pop	{r3, r4, r7, pc}
 800bc58:	08015454 	.word	0x08015454

0800bc5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bc5c:	b598      	push	{r3, r4, r7, lr}
 800bc5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800bc60:	f7ff ffe8 	bl	800bc34 <HAL_RCC_GetHCLKFreq>
 800bc64:	4604      	mov	r4, r0
 800bc66:	f7ff f9ef 	bl	800b048 <LL_RCC_GetAPB1Prescaler>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	0a1b      	lsrs	r3, r3, #8
 800bc6e:	f003 0307 	and.w	r3, r3, #7
 800bc72:	4a04      	ldr	r2, [pc, #16]	@ (800bc84 <HAL_RCC_GetPCLK1Freq+0x28>)
 800bc74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc78:	f003 031f 	and.w	r3, r3, #31
 800bc7c:	fa24 f303 	lsr.w	r3, r4, r3
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	bd98      	pop	{r3, r4, r7, pc}
 800bc84:	08015494 	.word	0x08015494

0800bc88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bc88:	b598      	push	{r3, r4, r7, lr}
 800bc8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800bc8c:	f7ff ffd2 	bl	800bc34 <HAL_RCC_GetHCLKFreq>
 800bc90:	4604      	mov	r4, r0
 800bc92:	f7ff f9e5 	bl	800b060 <LL_RCC_GetAPB2Prescaler>
 800bc96:	4603      	mov	r3, r0
 800bc98:	0adb      	lsrs	r3, r3, #11
 800bc9a:	f003 0307 	and.w	r3, r3, #7
 800bc9e:	4a04      	ldr	r2, [pc, #16]	@ (800bcb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800bca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bca4:	f003 031f 	and.w	r3, r3, #31
 800bca8:	fa24 f303 	lsr.w	r3, r4, r3
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	bd98      	pop	{r3, r4, r7, pc}
 800bcb0:	08015494 	.word	0x08015494

0800bcb4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800bcb4:	b590      	push	{r4, r7, lr}
 800bcb6:	b085      	sub	sp, #20
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2bb0      	cmp	r3, #176	@ 0xb0
 800bcc0:	d903      	bls.n	800bcca <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800bcc2:	4b15      	ldr	r3, [pc, #84]	@ (800bd18 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800bcc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcc6:	60fb      	str	r3, [r7, #12]
 800bcc8:	e007      	b.n	800bcda <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	091b      	lsrs	r3, r3, #4
 800bcce:	f003 030f 	and.w	r3, r3, #15
 800bcd2:	4a11      	ldr	r2, [pc, #68]	@ (800bd18 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800bcd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcd8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800bcda:	f7ff f9a7 	bl	800b02c <LL_RCC_GetAHB4Prescaler>
 800bcde:	4603      	mov	r3, r0
 800bce0:	091b      	lsrs	r3, r3, #4
 800bce2:	f003 030f 	and.w	r3, r3, #15
 800bce6:	4a0d      	ldr	r2, [pc, #52]	@ (800bd1c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800bce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcec:	68fa      	ldr	r2, [r7, #12]
 800bcee:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcf2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	4a0a      	ldr	r2, [pc, #40]	@ (800bd20 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800bcf8:	fba2 2303 	umull	r2, r3, r2, r3
 800bcfc:	0c9c      	lsrs	r4, r3, #18
 800bcfe:	f7fe fee5 	bl	800aacc <HAL_PWREx_GetVoltageRange>
 800bd02:	4603      	mov	r3, r0
 800bd04:	4619      	mov	r1, r3
 800bd06:	4620      	mov	r0, r4
 800bd08:	f000 f80c 	bl	800bd24 <RCC_SetFlashLatency>
 800bd0c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	3714      	adds	r7, #20
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd90      	pop	{r4, r7, pc}
 800bd16:	bf00      	nop
 800bd18:	080154b4 	.word	0x080154b4
 800bd1c:	08015454 	.word	0x08015454
 800bd20:	431bde83 	.word	0x431bde83

0800bd24 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800bd24:	b590      	push	{r4, r7, lr}
 800bd26:	b093      	sub	sp, #76	@ 0x4c
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
 800bd2c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800bd2e:	4b37      	ldr	r3, [pc, #220]	@ (800be0c <RCC_SetFlashLatency+0xe8>)
 800bd30:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800bd34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bd36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800bd3a:	4a35      	ldr	r2, [pc, #212]	@ (800be10 <RCC_SetFlashLatency+0xec>)
 800bd3c:	f107 031c 	add.w	r3, r7, #28
 800bd40:	ca07      	ldmia	r2, {r0, r1, r2}
 800bd42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800bd46:	4b33      	ldr	r3, [pc, #204]	@ (800be14 <RCC_SetFlashLatency+0xf0>)
 800bd48:	f107 040c 	add.w	r4, r7, #12
 800bd4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bd4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800bd52:	2300      	movs	r3, #0
 800bd54:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd5c:	d11a      	bne.n	800bd94 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800bd5e:	2300      	movs	r3, #0
 800bd60:	643b      	str	r3, [r7, #64]	@ 0x40
 800bd62:	e013      	b.n	800bd8c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800bd64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd66:	009b      	lsls	r3, r3, #2
 800bd68:	3348      	adds	r3, #72	@ 0x48
 800bd6a:	443b      	add	r3, r7
 800bd6c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800bd70:	687a      	ldr	r2, [r7, #4]
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d807      	bhi.n	800bd86 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800bd76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd78:	009b      	lsls	r3, r3, #2
 800bd7a:	3348      	adds	r3, #72	@ 0x48
 800bd7c:	443b      	add	r3, r7
 800bd7e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800bd82:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800bd84:	e020      	b.n	800bdc8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800bd86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd88:	3301      	adds	r3, #1
 800bd8a:	643b      	str	r3, [r7, #64]	@ 0x40
 800bd8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd8e:	2b03      	cmp	r3, #3
 800bd90:	d9e8      	bls.n	800bd64 <RCC_SetFlashLatency+0x40>
 800bd92:	e019      	b.n	800bdc8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800bd94:	2300      	movs	r3, #0
 800bd96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bd98:	e013      	b.n	800bdc2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800bd9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd9c:	009b      	lsls	r3, r3, #2
 800bd9e:	3348      	adds	r3, #72	@ 0x48
 800bda0:	443b      	add	r3, r7
 800bda2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800bda6:	687a      	ldr	r2, [r7, #4]
 800bda8:	429a      	cmp	r2, r3
 800bdaa:	d807      	bhi.n	800bdbc <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800bdac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdae:	009b      	lsls	r3, r3, #2
 800bdb0:	3348      	adds	r3, #72	@ 0x48
 800bdb2:	443b      	add	r3, r7
 800bdb4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800bdb8:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800bdba:	e005      	b.n	800bdc8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800bdbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bdc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdc4:	2b02      	cmp	r3, #2
 800bdc6:	d9e8      	bls.n	800bd9a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800bdc8:	4b13      	ldr	r3, [pc, #76]	@ (800be18 <RCC_SetFlashLatency+0xf4>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f023 0207 	bic.w	r2, r3, #7
 800bdd0:	4911      	ldr	r1, [pc, #68]	@ (800be18 <RCC_SetFlashLatency+0xf4>)
 800bdd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bdd4:	4313      	orrs	r3, r2
 800bdd6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bdd8:	f7f9 fccc 	bl	8005774 <HAL_GetTick>
 800bddc:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800bdde:	e008      	b.n	800bdf2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800bde0:	f7f9 fcc8 	bl	8005774 <HAL_GetTick>
 800bde4:	4602      	mov	r2, r0
 800bde6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bde8:	1ad3      	subs	r3, r2, r3
 800bdea:	2b02      	cmp	r3, #2
 800bdec:	d901      	bls.n	800bdf2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800bdee:	2303      	movs	r3, #3
 800bdf0:	e007      	b.n	800be02 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800bdf2:	4b09      	ldr	r3, [pc, #36]	@ (800be18 <RCC_SetFlashLatency+0xf4>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f003 0307 	and.w	r3, r3, #7
 800bdfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	d1ef      	bne.n	800bde0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800be00:	2300      	movs	r3, #0
}
 800be02:	4618      	mov	r0, r3
 800be04:	374c      	adds	r7, #76	@ 0x4c
 800be06:	46bd      	mov	sp, r7
 800be08:	bd90      	pop	{r4, r7, pc}
 800be0a:	bf00      	nop
 800be0c:	08015398 	.word	0x08015398
 800be10:	080153a8 	.word	0x080153a8
 800be14:	080153b4 	.word	0x080153b4
 800be18:	58004000 	.word	0x58004000

0800be1c <LL_RCC_LSE_IsEnabled>:
{
 800be1c:	b480      	push	{r7}
 800be1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800be20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be28:	f003 0301 	and.w	r3, r3, #1
 800be2c:	2b01      	cmp	r3, #1
 800be2e:	d101      	bne.n	800be34 <LL_RCC_LSE_IsEnabled+0x18>
 800be30:	2301      	movs	r3, #1
 800be32:	e000      	b.n	800be36 <LL_RCC_LSE_IsEnabled+0x1a>
 800be34:	2300      	movs	r3, #0
}
 800be36:	4618      	mov	r0, r3
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr

0800be40 <LL_RCC_LSE_IsReady>:
{
 800be40:	b480      	push	{r7}
 800be42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800be44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be4c:	f003 0302 	and.w	r3, r3, #2
 800be50:	2b02      	cmp	r3, #2
 800be52:	d101      	bne.n	800be58 <LL_RCC_LSE_IsReady+0x18>
 800be54:	2301      	movs	r3, #1
 800be56:	e000      	b.n	800be5a <LL_RCC_LSE_IsReady+0x1a>
 800be58:	2300      	movs	r3, #0
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	46bd      	mov	sp, r7
 800be5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be62:	4770      	bx	lr

0800be64 <LL_RCC_SetRFWKPClockSource>:
{
 800be64:	b480      	push	{r7}
 800be66:	b083      	sub	sp, #12
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800be6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800be74:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800be78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	4313      	orrs	r3, r2
 800be80:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800be84:	bf00      	nop
 800be86:	370c      	adds	r7, #12
 800be88:	46bd      	mov	sp, r7
 800be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8e:	4770      	bx	lr

0800be90 <LL_RCC_SetSMPSClockSource>:
{
 800be90:	b480      	push	{r7}
 800be92:	b083      	sub	sp, #12
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800be98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be9e:	f023 0203 	bic.w	r2, r3, #3
 800bea2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	4313      	orrs	r3, r2
 800beaa:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800beac:	bf00      	nop
 800beae:	370c      	adds	r7, #12
 800beb0:	46bd      	mov	sp, r7
 800beb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb6:	4770      	bx	lr

0800beb8 <LL_RCC_SetSMPSPrescaler>:
{
 800beb8:	b480      	push	{r7}
 800beba:	b083      	sub	sp, #12
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800bec0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bec6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800beca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	4313      	orrs	r3, r2
 800bed2:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800bed4:	bf00      	nop
 800bed6:	370c      	adds	r7, #12
 800bed8:	46bd      	mov	sp, r7
 800beda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bede:	4770      	bx	lr

0800bee0 <LL_RCC_SetUSARTClockSource>:
{
 800bee0:	b480      	push	{r7}
 800bee2:	b083      	sub	sp, #12
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800bee8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800beec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bef0:	f023 0203 	bic.w	r2, r3, #3
 800bef4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	4313      	orrs	r3, r2
 800befc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bf00:	bf00      	nop
 800bf02:	370c      	adds	r7, #12
 800bf04:	46bd      	mov	sp, r7
 800bf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0a:	4770      	bx	lr

0800bf0c <LL_RCC_SetLPUARTClockSource>:
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b083      	sub	sp, #12
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800bf14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf1c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bf20:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	4313      	orrs	r3, r2
 800bf28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bf2c:	bf00      	nop
 800bf2e:	370c      	adds	r7, #12
 800bf30:	46bd      	mov	sp, r7
 800bf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf36:	4770      	bx	lr

0800bf38 <LL_RCC_SetI2CClockSource>:
{
 800bf38:	b480      	push	{r7}
 800bf3a:	b083      	sub	sp, #12
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800bf40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf44:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	091b      	lsrs	r3, r3, #4
 800bf4c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800bf50:	43db      	mvns	r3, r3
 800bf52:	401a      	ands	r2, r3
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	011b      	lsls	r3, r3, #4
 800bf58:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800bf5c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bf60:	4313      	orrs	r3, r2
 800bf62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bf66:	bf00      	nop
 800bf68:	370c      	adds	r7, #12
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf70:	4770      	bx	lr

0800bf72 <LL_RCC_SetLPTIMClockSource>:
{
 800bf72:	b480      	push	{r7}
 800bf74:	b083      	sub	sp, #12
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800bf7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf7e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	0c1b      	lsrs	r3, r3, #16
 800bf86:	041b      	lsls	r3, r3, #16
 800bf88:	43db      	mvns	r3, r3
 800bf8a:	401a      	ands	r2, r3
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	041b      	lsls	r3, r3, #16
 800bf90:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bf94:	4313      	orrs	r3, r2
 800bf96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bf9a:	bf00      	nop
 800bf9c:	370c      	adds	r7, #12
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa4:	4770      	bx	lr

0800bfa6 <LL_RCC_SetSAIClockSource>:
{
 800bfa6:	b480      	push	{r7}
 800bfa8:	b083      	sub	sp, #12
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800bfae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bfb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bfb6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800bfba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	4313      	orrs	r3, r2
 800bfc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bfc6:	bf00      	nop
 800bfc8:	370c      	adds	r7, #12
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd0:	4770      	bx	lr

0800bfd2 <LL_RCC_SetRNGClockSource>:
{
 800bfd2:	b480      	push	{r7}
 800bfd4:	b083      	sub	sp, #12
 800bfd6:	af00      	add	r7, sp, #0
 800bfd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800bfda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bfde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bfe2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800bfe6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	4313      	orrs	r3, r2
 800bfee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bff2:	bf00      	nop
 800bff4:	370c      	adds	r7, #12
 800bff6:	46bd      	mov	sp, r7
 800bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffc:	4770      	bx	lr

0800bffe <LL_RCC_SetCLK48ClockSource>:
{
 800bffe:	b480      	push	{r7}
 800c000:	b083      	sub	sp, #12
 800c002:	af00      	add	r7, sp, #0
 800c004:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800c006:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c00a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c00e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800c012:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	4313      	orrs	r3, r2
 800c01a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c01e:	bf00      	nop
 800c020:	370c      	adds	r7, #12
 800c022:	46bd      	mov	sp, r7
 800c024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c028:	4770      	bx	lr

0800c02a <LL_RCC_SetUSBClockSource>:
{
 800c02a:	b580      	push	{r7, lr}
 800c02c:	b082      	sub	sp, #8
 800c02e:	af00      	add	r7, sp, #0
 800c030:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	f7ff ffe3 	bl	800bffe <LL_RCC_SetCLK48ClockSource>
}
 800c038:	bf00      	nop
 800c03a:	3708      	adds	r7, #8
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}

0800c040 <LL_RCC_SetADCClockSource>:
{
 800c040:	b480      	push	{r7}
 800c042:	b083      	sub	sp, #12
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800c048:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c04c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c050:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800c054:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	4313      	orrs	r3, r2
 800c05c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c060:	bf00      	nop
 800c062:	370c      	adds	r7, #12
 800c064:	46bd      	mov	sp, r7
 800c066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06a:	4770      	bx	lr

0800c06c <LL_RCC_SetRTCClockSource>:
{
 800c06c:	b480      	push	{r7}
 800c06e:	b083      	sub	sp, #12
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800c074:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c07c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c080:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	4313      	orrs	r3, r2
 800c088:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800c08c:	bf00      	nop
 800c08e:	370c      	adds	r7, #12
 800c090:	46bd      	mov	sp, r7
 800c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c096:	4770      	bx	lr

0800c098 <LL_RCC_GetRTCClockSource>:
{
 800c098:	b480      	push	{r7}
 800c09a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800c09c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c0a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b0:	4770      	bx	lr

0800c0b2 <LL_RCC_ForceBackupDomainReset>:
{
 800c0b2:	b480      	push	{r7}
 800c0b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800c0b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c0ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c0c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c0c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800c0ca:	bf00      	nop
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d2:	4770      	bx	lr

0800c0d4 <LL_RCC_ReleaseBackupDomainReset>:
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800c0d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c0dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c0e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c0e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800c0ec:	bf00      	nop
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f4:	4770      	bx	lr

0800c0f6 <LL_RCC_PLLSAI1_Enable>:
{
 800c0f6:	b480      	push	{r7}
 800c0f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800c0fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c104:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c108:	6013      	str	r3, [r2, #0]
}
 800c10a:	bf00      	nop
 800c10c:	46bd      	mov	sp, r7
 800c10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c112:	4770      	bx	lr

0800c114 <LL_RCC_PLLSAI1_Disable>:
{
 800c114:	b480      	push	{r7}
 800c116:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800c118:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c122:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c126:	6013      	str	r3, [r2, #0]
}
 800c128:	bf00      	nop
 800c12a:	46bd      	mov	sp, r7
 800c12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c130:	4770      	bx	lr

0800c132 <LL_RCC_PLLSAI1_IsReady>:
{
 800c132:	b480      	push	{r7}
 800c134:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800c136:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c140:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c144:	d101      	bne.n	800c14a <LL_RCC_PLLSAI1_IsReady+0x18>
 800c146:	2301      	movs	r3, #1
 800c148:	e000      	b.n	800c14c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800c14a:	2300      	movs	r3, #0
}
 800c14c:	4618      	mov	r0, r3
 800c14e:	46bd      	mov	sp, r7
 800c150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c154:	4770      	bx	lr

0800c156 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c156:	b580      	push	{r7, lr}
 800c158:	b088      	sub	sp, #32
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800c15e:	2300      	movs	r3, #0
 800c160:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800c162:	2300      	movs	r3, #0
 800c164:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d034      	beq.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c176:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c17a:	d021      	beq.n	800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800c17c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c180:	d81b      	bhi.n	800c1ba <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c182:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c186:	d01d      	beq.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800c188:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c18c:	d815      	bhi.n	800c1ba <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d00b      	beq.n	800c1aa <HAL_RCCEx_PeriphCLKConfig+0x54>
 800c192:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c196:	d110      	bne.n	800c1ba <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800c198:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c19c:	68db      	ldr	r3, [r3, #12]
 800c19e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c1a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c1a6:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800c1a8:	e00d      	b.n	800c1c6 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	3304      	adds	r3, #4
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f000 f947 	bl	800c442 <RCCEx_PLLSAI1_ConfigNP>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800c1b8:	e005      	b.n	800c1c6 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	77fb      	strb	r3, [r7, #31]
        break;
 800c1be:	e002      	b.n	800c1c6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800c1c0:	bf00      	nop
 800c1c2:	e000      	b.n	800c1c6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800c1c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1c6:	7ffb      	ldrb	r3, [r7, #31]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d105      	bne.n	800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f7ff fee8 	bl	800bfa6 <LL_RCC_SetSAIClockSource>
 800c1d6:	e001      	b.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1d8:	7ffb      	ldrb	r3, [r7, #31]
 800c1da:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d046      	beq.n	800c276 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800c1e8:	f7ff ff56 	bl	800c098 <LL_RCC_GetRTCClockSource>
 800c1ec:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1f2:	69ba      	ldr	r2, [r7, #24]
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d03c      	beq.n	800c272 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800c1f8:	f7fe fc58 	bl	800aaac <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800c1fc:	69bb      	ldr	r3, [r7, #24]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d105      	bne.n	800c20e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c206:	4618      	mov	r0, r3
 800c208:	f7ff ff30 	bl	800c06c <LL_RCC_SetRTCClockSource>
 800c20c:	e02e      	b.n	800c26c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800c20e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c216:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800c218:	f7ff ff4b 	bl	800c0b2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800c21c:	f7ff ff5a 	bl	800c0d4 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c22a:	4313      	orrs	r3, r2
 800c22c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800c22e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800c238:	f7ff fdf0 	bl	800be1c <LL_RCC_LSE_IsEnabled>
 800c23c:	4603      	mov	r3, r0
 800c23e:	2b01      	cmp	r3, #1
 800c240:	d114      	bne.n	800c26c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c242:	f7f9 fa97 	bl	8005774 <HAL_GetTick>
 800c246:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800c248:	e00b      	b.n	800c262 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c24a:	f7f9 fa93 	bl	8005774 <HAL_GetTick>
 800c24e:	4602      	mov	r2, r0
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	1ad3      	subs	r3, r2, r3
 800c254:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c258:	4293      	cmp	r3, r2
 800c25a:	d902      	bls.n	800c262 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800c25c:	2303      	movs	r3, #3
 800c25e:	77fb      	strb	r3, [r7, #31]
              break;
 800c260:	e004      	b.n	800c26c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800c262:	f7ff fded 	bl	800be40 <LL_RCC_LSE_IsReady>
 800c266:	4603      	mov	r3, r0
 800c268:	2b01      	cmp	r3, #1
 800c26a:	d1ee      	bne.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800c26c:	7ffb      	ldrb	r3, [r7, #31]
 800c26e:	77bb      	strb	r3, [r7, #30]
 800c270:	e001      	b.n	800c276 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c272:	7ffb      	ldrb	r3, [r7, #31]
 800c274:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f003 0301 	and.w	r3, r3, #1
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d004      	beq.n	800c28c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	699b      	ldr	r3, [r3, #24]
 800c286:	4618      	mov	r0, r3
 800c288:	f7ff fe2a 	bl	800bee0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	f003 0302 	and.w	r3, r3, #2
 800c294:	2b00      	cmp	r3, #0
 800c296:	d004      	beq.n	800c2a2 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	69db      	ldr	r3, [r3, #28]
 800c29c:	4618      	mov	r0, r3
 800c29e:	f7ff fe35 	bl	800bf0c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f003 0310 	and.w	r3, r3, #16
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d004      	beq.n	800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f7ff fe5d 	bl	800bf72 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f003 0320 	and.w	r3, r3, #32
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d004      	beq.n	800c2ce <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f7ff fe52 	bl	800bf72 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f003 0304 	and.w	r3, r3, #4
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d004      	beq.n	800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6a1b      	ldr	r3, [r3, #32]
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f7ff fe2a 	bl	800bf38 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f003 0308 	and.w	r3, r3, #8
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d004      	beq.n	800c2fa <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f7ff fe1f 	bl	800bf38 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c302:	2b00      	cmp	r3, #0
 800c304:	d022      	beq.n	800c34c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c30a:	4618      	mov	r0, r3
 800c30c:	f7ff fe8d 	bl	800c02a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c314:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c318:	d107      	bne.n	800c32a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800c31a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c31e:	68db      	ldr	r3, [r3, #12]
 800c320:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c324:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c328:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c32e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c332:	d10b      	bne.n	800c34c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	3304      	adds	r3, #4
 800c338:	4618      	mov	r0, r3
 800c33a:	f000 f8dd 	bl	800c4f8 <RCCEx_PLLSAI1_ConfigNQ>
 800c33e:	4603      	mov	r3, r0
 800c340:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800c342:	7ffb      	ldrb	r3, [r7, #31]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d001      	beq.n	800c34c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800c348:	7ffb      	ldrb	r3, [r7, #31]
 800c34a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c354:	2b00      	cmp	r3, #0
 800c356:	d02b      	beq.n	800c3b0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c35c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c360:	d008      	beq.n	800c374 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c366:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c36a:	d003      	beq.n	800c374 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c370:	2b00      	cmp	r3, #0
 800c372:	d105      	bne.n	800c380 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c378:	4618      	mov	r0, r3
 800c37a:	f7ff fe2a 	bl	800bfd2 <LL_RCC_SetRNGClockSource>
 800c37e:	e00a      	b.n	800c396 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c384:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c388:	60fb      	str	r3, [r7, #12]
 800c38a:	2000      	movs	r0, #0
 800c38c:	f7ff fe21 	bl	800bfd2 <LL_RCC_SetRNGClockSource>
 800c390:	68f8      	ldr	r0, [r7, #12]
 800c392:	f7ff fe34 	bl	800bffe <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c39a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800c39e:	d107      	bne.n	800c3b0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800c3a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c3a4:	68db      	ldr	r3, [r3, #12]
 800c3a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c3aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c3ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d022      	beq.n	800c402 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f7ff fe3d 	bl	800c040 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c3ce:	d107      	bne.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c3d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c3d4:	68db      	ldr	r3, [r3, #12]
 800c3d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c3da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c3de:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c3e8:	d10b      	bne.n	800c402 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	3304      	adds	r3, #4
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f000 f8dd 	bl	800c5ae <RCCEx_PLLSAI1_ConfigNR>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800c3f8:	7ffb      	ldrb	r3, [r7, #31]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d001      	beq.n	800c402 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800c3fe:	7ffb      	ldrb	r3, [r7, #31]
 800c400:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d004      	beq.n	800c418 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c412:	4618      	mov	r0, r3
 800c414:	f7ff fd26 	bl	800be64 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c420:	2b00      	cmp	r3, #0
 800c422:	d009      	beq.n	800c438 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c428:	4618      	mov	r0, r3
 800c42a:	f7ff fd45 	bl	800beb8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c432:	4618      	mov	r0, r3
 800c434:	f7ff fd2c 	bl	800be90 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800c438:	7fbb      	ldrb	r3, [r7, #30]
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	3720      	adds	r7, #32
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}

0800c442 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800c442:	b580      	push	{r7, lr}
 800c444:	b084      	sub	sp, #16
 800c446:	af00      	add	r7, sp, #0
 800c448:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c44a:	2300      	movs	r3, #0
 800c44c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c44e:	f7ff fe61 	bl	800c114 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c452:	f7f9 f98f 	bl	8005774 <HAL_GetTick>
 800c456:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c458:	e009      	b.n	800c46e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c45a:	f7f9 f98b 	bl	8005774 <HAL_GetTick>
 800c45e:	4602      	mov	r2, r0
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	1ad3      	subs	r3, r2, r3
 800c464:	2b02      	cmp	r3, #2
 800c466:	d902      	bls.n	800c46e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800c468:	2303      	movs	r3, #3
 800c46a:	73fb      	strb	r3, [r7, #15]
      break;
 800c46c:	e004      	b.n	800c478 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c46e:	f7ff fe60 	bl	800c132 <LL_RCC_PLLSAI1_IsReady>
 800c472:	4603      	mov	r3, r0
 800c474:	2b00      	cmp	r3, #0
 800c476:	d1f0      	bne.n	800c45a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800c478:	7bfb      	ldrb	r3, [r7, #15]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d137      	bne.n	800c4ee <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800c47e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c482:	691b      	ldr	r3, [r3, #16]
 800c484:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	021b      	lsls	r3, r3, #8
 800c48e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c492:	4313      	orrs	r3, r2
 800c494:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800c496:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c49a:	691b      	ldr	r3, [r3, #16]
 800c49c:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	685b      	ldr	r3, [r3, #4]
 800c4a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c4a8:	4313      	orrs	r3, r2
 800c4aa:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800c4ac:	f7ff fe23 	bl	800c0f6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c4b0:	f7f9 f960 	bl	8005774 <HAL_GetTick>
 800c4b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c4b6:	e009      	b.n	800c4cc <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c4b8:	f7f9 f95c 	bl	8005774 <HAL_GetTick>
 800c4bc:	4602      	mov	r2, r0
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	1ad3      	subs	r3, r2, r3
 800c4c2:	2b02      	cmp	r3, #2
 800c4c4:	d902      	bls.n	800c4cc <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800c4c6:	2303      	movs	r3, #3
 800c4c8:	73fb      	strb	r3, [r7, #15]
        break;
 800c4ca:	e004      	b.n	800c4d6 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c4cc:	f7ff fe31 	bl	800c132 <LL_RCC_PLLSAI1_IsReady>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	2b01      	cmp	r3, #1
 800c4d4:	d1f0      	bne.n	800c4b8 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800c4d6:	7bfb      	ldrb	r3, [r7, #15]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d108      	bne.n	800c4ee <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800c4dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c4e0:	691a      	ldr	r2, [r3, #16]
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	691b      	ldr	r3, [r3, #16]
 800c4e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c4ea:	4313      	orrs	r3, r2
 800c4ec:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800c4ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	3710      	adds	r7, #16
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}

0800c4f8 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b084      	sub	sp, #16
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c500:	2300      	movs	r3, #0
 800c502:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c504:	f7ff fe06 	bl	800c114 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c508:	f7f9 f934 	bl	8005774 <HAL_GetTick>
 800c50c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c50e:	e009      	b.n	800c524 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c510:	f7f9 f930 	bl	8005774 <HAL_GetTick>
 800c514:	4602      	mov	r2, r0
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	1ad3      	subs	r3, r2, r3
 800c51a:	2b02      	cmp	r3, #2
 800c51c:	d902      	bls.n	800c524 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800c51e:	2303      	movs	r3, #3
 800c520:	73fb      	strb	r3, [r7, #15]
      break;
 800c522:	e004      	b.n	800c52e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c524:	f7ff fe05 	bl	800c132 <LL_RCC_PLLSAI1_IsReady>
 800c528:	4603      	mov	r3, r0
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d1f0      	bne.n	800c510 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800c52e:	7bfb      	ldrb	r3, [r7, #15]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d137      	bne.n	800c5a4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800c534:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c538:	691b      	ldr	r3, [r3, #16]
 800c53a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	021b      	lsls	r3, r3, #8
 800c544:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c548:	4313      	orrs	r3, r2
 800c54a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800c54c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c550:	691b      	ldr	r3, [r3, #16]
 800c552:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	689b      	ldr	r3, [r3, #8]
 800c55a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c55e:	4313      	orrs	r3, r2
 800c560:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800c562:	f7ff fdc8 	bl	800c0f6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c566:	f7f9 f905 	bl	8005774 <HAL_GetTick>
 800c56a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c56c:	e009      	b.n	800c582 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c56e:	f7f9 f901 	bl	8005774 <HAL_GetTick>
 800c572:	4602      	mov	r2, r0
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	1ad3      	subs	r3, r2, r3
 800c578:	2b02      	cmp	r3, #2
 800c57a:	d902      	bls.n	800c582 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800c57c:	2303      	movs	r3, #3
 800c57e:	73fb      	strb	r3, [r7, #15]
        break;
 800c580:	e004      	b.n	800c58c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c582:	f7ff fdd6 	bl	800c132 <LL_RCC_PLLSAI1_IsReady>
 800c586:	4603      	mov	r3, r0
 800c588:	2b01      	cmp	r3, #1
 800c58a:	d1f0      	bne.n	800c56e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800c58c:	7bfb      	ldrb	r3, [r7, #15]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d108      	bne.n	800c5a4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800c592:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c596:	691a      	ldr	r2, [r3, #16]
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	691b      	ldr	r3, [r3, #16]
 800c59c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c5a0:	4313      	orrs	r3, r2
 800c5a2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800c5a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3710      	adds	r7, #16
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}

0800c5ae <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800c5ae:	b580      	push	{r7, lr}
 800c5b0:	b084      	sub	sp, #16
 800c5b2:	af00      	add	r7, sp, #0
 800c5b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c5ba:	f7ff fdab 	bl	800c114 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c5be:	f7f9 f8d9 	bl	8005774 <HAL_GetTick>
 800c5c2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c5c4:	e009      	b.n	800c5da <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c5c6:	f7f9 f8d5 	bl	8005774 <HAL_GetTick>
 800c5ca:	4602      	mov	r2, r0
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	1ad3      	subs	r3, r2, r3
 800c5d0:	2b02      	cmp	r3, #2
 800c5d2:	d902      	bls.n	800c5da <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800c5d4:	2303      	movs	r3, #3
 800c5d6:	73fb      	strb	r3, [r7, #15]
      break;
 800c5d8:	e004      	b.n	800c5e4 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c5da:	f7ff fdaa 	bl	800c132 <LL_RCC_PLLSAI1_IsReady>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d1f0      	bne.n	800c5c6 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800c5e4:	7bfb      	ldrb	r3, [r7, #15]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d137      	bne.n	800c65a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800c5ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c5ee:	691b      	ldr	r3, [r3, #16]
 800c5f0:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	021b      	lsls	r3, r3, #8
 800c5fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c5fe:	4313      	orrs	r3, r2
 800c600:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800c602:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c606:	691b      	ldr	r3, [r3, #16]
 800c608:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	68db      	ldr	r3, [r3, #12]
 800c610:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c614:	4313      	orrs	r3, r2
 800c616:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800c618:	f7ff fd6d 	bl	800c0f6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c61c:	f7f9 f8aa 	bl	8005774 <HAL_GetTick>
 800c620:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c622:	e009      	b.n	800c638 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c624:	f7f9 f8a6 	bl	8005774 <HAL_GetTick>
 800c628:	4602      	mov	r2, r0
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	1ad3      	subs	r3, r2, r3
 800c62e:	2b02      	cmp	r3, #2
 800c630:	d902      	bls.n	800c638 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800c632:	2303      	movs	r3, #3
 800c634:	73fb      	strb	r3, [r7, #15]
        break;
 800c636:	e004      	b.n	800c642 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c638:	f7ff fd7b 	bl	800c132 <LL_RCC_PLLSAI1_IsReady>
 800c63c:	4603      	mov	r3, r0
 800c63e:	2b01      	cmp	r3, #1
 800c640:	d1f0      	bne.n	800c624 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800c642:	7bfb      	ldrb	r3, [r7, #15]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d108      	bne.n	800c65a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800c648:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c64c:	691a      	ldr	r2, [r3, #16]
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	691b      	ldr	r3, [r3, #16]
 800c652:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c656:	4313      	orrs	r3, r2
 800c658:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800c65a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3710      	adds	r7, #16
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}

0800c664 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b082      	sub	sp, #8
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d101      	bne.n	800c676 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c672:	2301      	movs	r3, #1
 800c674:	e049      	b.n	800c70a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c67c:	b2db      	uxtb	r3, r3
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d106      	bne.n	800c690 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2200      	movs	r2, #0
 800c686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f7f8 fc6c 	bl	8004f68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2202      	movs	r2, #2
 800c694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681a      	ldr	r2, [r3, #0]
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	3304      	adds	r3, #4
 800c6a0:	4619      	mov	r1, r3
 800c6a2:	4610      	mov	r0, r2
 800c6a4:	f000 fa7c 	bl	800cba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2201      	movs	r2, #1
 800c6bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2201      	movs	r2, #1
 800c6c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2201      	movs	r2, #1
 800c6dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2201      	movs	r2, #1
 800c6ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2201      	movs	r2, #1
 800c6f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2201      	movs	r2, #1
 800c6fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2201      	movs	r2, #1
 800c704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c708:	2300      	movs	r3, #0
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3708      	adds	r7, #8
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}
	...

0800c714 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c714:	b480      	push	{r7}
 800c716:	b085      	sub	sp, #20
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c722:	b2db      	uxtb	r3, r3
 800c724:	2b01      	cmp	r3, #1
 800c726:	d001      	beq.n	800c72c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c728:	2301      	movs	r3, #1
 800c72a:	e036      	b.n	800c79a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2202      	movs	r2, #2
 800c730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	68da      	ldr	r2, [r3, #12]
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	f042 0201 	orr.w	r2, r2, #1
 800c742:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	4a17      	ldr	r2, [pc, #92]	@ (800c7a8 <HAL_TIM_Base_Start_IT+0x94>)
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d004      	beq.n	800c758 <HAL_TIM_Base_Start_IT+0x44>
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c756:	d115      	bne.n	800c784 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	689a      	ldr	r2, [r3, #8]
 800c75e:	4b13      	ldr	r3, [pc, #76]	@ (800c7ac <HAL_TIM_Base_Start_IT+0x98>)
 800c760:	4013      	ands	r3, r2
 800c762:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	2b06      	cmp	r3, #6
 800c768:	d015      	beq.n	800c796 <HAL_TIM_Base_Start_IT+0x82>
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c770:	d011      	beq.n	800c796 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	681a      	ldr	r2, [r3, #0]
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f042 0201 	orr.w	r2, r2, #1
 800c780:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c782:	e008      	b.n	800c796 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	681a      	ldr	r2, [r3, #0]
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f042 0201 	orr.w	r2, r2, #1
 800c792:	601a      	str	r2, [r3, #0]
 800c794:	e000      	b.n	800c798 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c796:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c798:	2300      	movs	r3, #0
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3714      	adds	r7, #20
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a4:	4770      	bx	lr
 800c7a6:	bf00      	nop
 800c7a8:	40012c00 	.word	0x40012c00
 800c7ac:	00010007 	.word	0x00010007

0800c7b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b084      	sub	sp, #16
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	68db      	ldr	r3, [r3, #12]
 800c7be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	691b      	ldr	r3, [r3, #16]
 800c7c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	f003 0302 	and.w	r3, r3, #2
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d020      	beq.n	800c814 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	f003 0302 	and.w	r3, r3, #2
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d01b      	beq.n	800c814 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	f06f 0202 	mvn.w	r2, #2
 800c7e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2201      	movs	r2, #1
 800c7ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	699b      	ldr	r3, [r3, #24]
 800c7f2:	f003 0303 	and.w	r3, r3, #3
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d003      	beq.n	800c802 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f000 f9b2 	bl	800cb64 <HAL_TIM_IC_CaptureCallback>
 800c800:	e005      	b.n	800c80e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f000 f9a4 	bl	800cb50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f000 f9b5 	bl	800cb78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2200      	movs	r2, #0
 800c812:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	f003 0304 	and.w	r3, r3, #4
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d020      	beq.n	800c860 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	f003 0304 	and.w	r3, r3, #4
 800c824:	2b00      	cmp	r3, #0
 800c826:	d01b      	beq.n	800c860 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	f06f 0204 	mvn.w	r2, #4
 800c830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2202      	movs	r2, #2
 800c836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	699b      	ldr	r3, [r3, #24]
 800c83e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c842:	2b00      	cmp	r3, #0
 800c844:	d003      	beq.n	800c84e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f000 f98c 	bl	800cb64 <HAL_TIM_IC_CaptureCallback>
 800c84c:	e005      	b.n	800c85a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f000 f97e 	bl	800cb50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f000 f98f 	bl	800cb78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2200      	movs	r2, #0
 800c85e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	f003 0308 	and.w	r3, r3, #8
 800c866:	2b00      	cmp	r3, #0
 800c868:	d020      	beq.n	800c8ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	f003 0308 	and.w	r3, r3, #8
 800c870:	2b00      	cmp	r3, #0
 800c872:	d01b      	beq.n	800c8ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f06f 0208 	mvn.w	r2, #8
 800c87c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2204      	movs	r2, #4
 800c882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	69db      	ldr	r3, [r3, #28]
 800c88a:	f003 0303 	and.w	r3, r3, #3
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d003      	beq.n	800c89a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f000 f966 	bl	800cb64 <HAL_TIM_IC_CaptureCallback>
 800c898:	e005      	b.n	800c8a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f000 f958 	bl	800cb50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f000 f969 	bl	800cb78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	f003 0310 	and.w	r3, r3, #16
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d020      	beq.n	800c8f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	f003 0310 	and.w	r3, r3, #16
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d01b      	beq.n	800c8f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	f06f 0210 	mvn.w	r2, #16
 800c8c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2208      	movs	r2, #8
 800c8ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	69db      	ldr	r3, [r3, #28]
 800c8d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d003      	beq.n	800c8e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f000 f940 	bl	800cb64 <HAL_TIM_IC_CaptureCallback>
 800c8e4:	e005      	b.n	800c8f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f000 f932 	bl	800cb50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f000 f943 	bl	800cb78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	f003 0301 	and.w	r3, r3, #1
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d00c      	beq.n	800c91c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	f003 0301 	and.w	r3, r3, #1
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d007      	beq.n	800c91c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	f06f 0201 	mvn.w	r2, #1
 800c914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f7f7 ff3e 	bl	8004798 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c922:	2b00      	cmp	r3, #0
 800c924:	d104      	bne.n	800c930 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d00c      	beq.n	800c94a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c936:	2b00      	cmp	r3, #0
 800c938:	d007      	beq.n	800c94a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f000 faa1 	bl	800ce8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c950:	2b00      	cmp	r3, #0
 800c952:	d00c      	beq.n	800c96e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d007      	beq.n	800c96e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f000 fa99 	bl	800cea0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c974:	2b00      	cmp	r3, #0
 800c976:	d00c      	beq.n	800c992 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d007      	beq.n	800c992 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c98a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f000 f8fd 	bl	800cb8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	f003 0320 	and.w	r3, r3, #32
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d00c      	beq.n	800c9b6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	f003 0320 	and.w	r3, r3, #32
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d007      	beq.n	800c9b6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	f06f 0220 	mvn.w	r2, #32
 800c9ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f000 fa61 	bl	800ce78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c9b6:	bf00      	nop
 800c9b8:	3710      	adds	r7, #16
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}

0800c9be <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c9be:	b580      	push	{r7, lr}
 800c9c0:	b084      	sub	sp, #16
 800c9c2:	af00      	add	r7, sp, #0
 800c9c4:	6078      	str	r0, [r7, #4]
 800c9c6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c9d2:	2b01      	cmp	r3, #1
 800c9d4:	d101      	bne.n	800c9da <HAL_TIM_ConfigClockSource+0x1c>
 800c9d6:	2302      	movs	r3, #2
 800c9d8:	e0b6      	b.n	800cb48 <HAL_TIM_ConfigClockSource+0x18a>
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2201      	movs	r2, #1
 800c9de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2202      	movs	r2, #2
 800c9e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	689b      	ldr	r3, [r3, #8]
 800c9f0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800c9f8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c9fc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ca04:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	68ba      	ldr	r2, [r7, #8]
 800ca0c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ca16:	d03e      	beq.n	800ca96 <HAL_TIM_ConfigClockSource+0xd8>
 800ca18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ca1c:	f200 8087 	bhi.w	800cb2e <HAL_TIM_ConfigClockSource+0x170>
 800ca20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca24:	f000 8086 	beq.w	800cb34 <HAL_TIM_ConfigClockSource+0x176>
 800ca28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca2c:	d87f      	bhi.n	800cb2e <HAL_TIM_ConfigClockSource+0x170>
 800ca2e:	2b70      	cmp	r3, #112	@ 0x70
 800ca30:	d01a      	beq.n	800ca68 <HAL_TIM_ConfigClockSource+0xaa>
 800ca32:	2b70      	cmp	r3, #112	@ 0x70
 800ca34:	d87b      	bhi.n	800cb2e <HAL_TIM_ConfigClockSource+0x170>
 800ca36:	2b60      	cmp	r3, #96	@ 0x60
 800ca38:	d050      	beq.n	800cadc <HAL_TIM_ConfigClockSource+0x11e>
 800ca3a:	2b60      	cmp	r3, #96	@ 0x60
 800ca3c:	d877      	bhi.n	800cb2e <HAL_TIM_ConfigClockSource+0x170>
 800ca3e:	2b50      	cmp	r3, #80	@ 0x50
 800ca40:	d03c      	beq.n	800cabc <HAL_TIM_ConfigClockSource+0xfe>
 800ca42:	2b50      	cmp	r3, #80	@ 0x50
 800ca44:	d873      	bhi.n	800cb2e <HAL_TIM_ConfigClockSource+0x170>
 800ca46:	2b40      	cmp	r3, #64	@ 0x40
 800ca48:	d058      	beq.n	800cafc <HAL_TIM_ConfigClockSource+0x13e>
 800ca4a:	2b40      	cmp	r3, #64	@ 0x40
 800ca4c:	d86f      	bhi.n	800cb2e <HAL_TIM_ConfigClockSource+0x170>
 800ca4e:	2b30      	cmp	r3, #48	@ 0x30
 800ca50:	d064      	beq.n	800cb1c <HAL_TIM_ConfigClockSource+0x15e>
 800ca52:	2b30      	cmp	r3, #48	@ 0x30
 800ca54:	d86b      	bhi.n	800cb2e <HAL_TIM_ConfigClockSource+0x170>
 800ca56:	2b20      	cmp	r3, #32
 800ca58:	d060      	beq.n	800cb1c <HAL_TIM_ConfigClockSource+0x15e>
 800ca5a:	2b20      	cmp	r3, #32
 800ca5c:	d867      	bhi.n	800cb2e <HAL_TIM_ConfigClockSource+0x170>
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d05c      	beq.n	800cb1c <HAL_TIM_ConfigClockSource+0x15e>
 800ca62:	2b10      	cmp	r3, #16
 800ca64:	d05a      	beq.n	800cb1c <HAL_TIM_ConfigClockSource+0x15e>
 800ca66:	e062      	b.n	800cb2e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ca78:	f000 f97e 	bl	800cd78 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	689b      	ldr	r3, [r3, #8]
 800ca82:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ca8a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	68ba      	ldr	r2, [r7, #8]
 800ca92:	609a      	str	r2, [r3, #8]
      break;
 800ca94:	e04f      	b.n	800cb36 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800caa6:	f000 f967 	bl	800cd78 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	689a      	ldr	r2, [r3, #8]
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cab8:	609a      	str	r2, [r3, #8]
      break;
 800caba:	e03c      	b.n	800cb36 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cac8:	461a      	mov	r2, r3
 800caca:	f000 f8d9 	bl	800cc80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	2150      	movs	r1, #80	@ 0x50
 800cad4:	4618      	mov	r0, r3
 800cad6:	f000 f932 	bl	800cd3e <TIM_ITRx_SetConfig>
      break;
 800cada:	e02c      	b.n	800cb36 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cae8:	461a      	mov	r2, r3
 800caea:	f000 f8f8 	bl	800ccde <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	2160      	movs	r1, #96	@ 0x60
 800caf4:	4618      	mov	r0, r3
 800caf6:	f000 f922 	bl	800cd3e <TIM_ITRx_SetConfig>
      break;
 800cafa:	e01c      	b.n	800cb36 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cb08:	461a      	mov	r2, r3
 800cb0a:	f000 f8b9 	bl	800cc80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	2140      	movs	r1, #64	@ 0x40
 800cb14:	4618      	mov	r0, r3
 800cb16:	f000 f912 	bl	800cd3e <TIM_ITRx_SetConfig>
      break;
 800cb1a:	e00c      	b.n	800cb36 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681a      	ldr	r2, [r3, #0]
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	4619      	mov	r1, r3
 800cb26:	4610      	mov	r0, r2
 800cb28:	f000 f909 	bl	800cd3e <TIM_ITRx_SetConfig>
      break;
 800cb2c:	e003      	b.n	800cb36 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800cb2e:	2301      	movs	r3, #1
 800cb30:	73fb      	strb	r3, [r7, #15]
      break;
 800cb32:	e000      	b.n	800cb36 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800cb34:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2201      	movs	r2, #1
 800cb3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2200      	movs	r2, #0
 800cb42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cb46:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3710      	adds	r7, #16
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cb50:	b480      	push	{r7}
 800cb52:	b083      	sub	sp, #12
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cb58:	bf00      	nop
 800cb5a:	370c      	adds	r7, #12
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr

0800cb64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cb64:	b480      	push	{r7}
 800cb66:	b083      	sub	sp, #12
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cb6c:	bf00      	nop
 800cb6e:	370c      	adds	r7, #12
 800cb70:	46bd      	mov	sp, r7
 800cb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb76:	4770      	bx	lr

0800cb78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b083      	sub	sp, #12
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cb80:	bf00      	nop
 800cb82:	370c      	adds	r7, #12
 800cb84:	46bd      	mov	sp, r7
 800cb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8a:	4770      	bx	lr

0800cb8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b083      	sub	sp, #12
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cb94:	bf00      	nop
 800cb96:	370c      	adds	r7, #12
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9e:	4770      	bx	lr

0800cba0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cba0:	b480      	push	{r7}
 800cba2:	b085      	sub	sp, #20
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
 800cba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	4a30      	ldr	r2, [pc, #192]	@ (800cc74 <TIM_Base_SetConfig+0xd4>)
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	d003      	beq.n	800cbc0 <TIM_Base_SetConfig+0x20>
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cbbe:	d108      	bne.n	800cbd2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cbc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	685b      	ldr	r3, [r3, #4]
 800cbcc:	68fa      	ldr	r2, [r7, #12]
 800cbce:	4313      	orrs	r3, r2
 800cbd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	4a27      	ldr	r2, [pc, #156]	@ (800cc74 <TIM_Base_SetConfig+0xd4>)
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d00b      	beq.n	800cbf2 <TIM_Base_SetConfig+0x52>
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cbe0:	d007      	beq.n	800cbf2 <TIM_Base_SetConfig+0x52>
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	4a24      	ldr	r2, [pc, #144]	@ (800cc78 <TIM_Base_SetConfig+0xd8>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d003      	beq.n	800cbf2 <TIM_Base_SetConfig+0x52>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	4a23      	ldr	r2, [pc, #140]	@ (800cc7c <TIM_Base_SetConfig+0xdc>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d108      	bne.n	800cc04 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cbf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	68db      	ldr	r3, [r3, #12]
 800cbfe:	68fa      	ldr	r2, [r7, #12]
 800cc00:	4313      	orrs	r3, r2
 800cc02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	695b      	ldr	r3, [r3, #20]
 800cc0e:	4313      	orrs	r3, r2
 800cc10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	68fa      	ldr	r2, [r7, #12]
 800cc16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	689a      	ldr	r2, [r3, #8]
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	681a      	ldr	r2, [r3, #0]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	4a12      	ldr	r2, [pc, #72]	@ (800cc74 <TIM_Base_SetConfig+0xd4>)
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	d007      	beq.n	800cc40 <TIM_Base_SetConfig+0xa0>
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	4a11      	ldr	r2, [pc, #68]	@ (800cc78 <TIM_Base_SetConfig+0xd8>)
 800cc34:	4293      	cmp	r3, r2
 800cc36:	d003      	beq.n	800cc40 <TIM_Base_SetConfig+0xa0>
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	4a10      	ldr	r2, [pc, #64]	@ (800cc7c <TIM_Base_SetConfig+0xdc>)
 800cc3c:	4293      	cmp	r3, r2
 800cc3e:	d103      	bne.n	800cc48 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	691a      	ldr	r2, [r3, #16]
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2201      	movs	r2, #1
 800cc4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	691b      	ldr	r3, [r3, #16]
 800cc52:	f003 0301 	and.w	r3, r3, #1
 800cc56:	2b01      	cmp	r3, #1
 800cc58:	d105      	bne.n	800cc66 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	691b      	ldr	r3, [r3, #16]
 800cc5e:	f023 0201 	bic.w	r2, r3, #1
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	611a      	str	r2, [r3, #16]
  }
}
 800cc66:	bf00      	nop
 800cc68:	3714      	adds	r7, #20
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc70:	4770      	bx	lr
 800cc72:	bf00      	nop
 800cc74:	40012c00 	.word	0x40012c00
 800cc78:	40014400 	.word	0x40014400
 800cc7c:	40014800 	.word	0x40014800

0800cc80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc80:	b480      	push	{r7}
 800cc82:	b087      	sub	sp, #28
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	60f8      	str	r0, [r7, #12]
 800cc88:	60b9      	str	r1, [r7, #8]
 800cc8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	6a1b      	ldr	r3, [r3, #32]
 800cc90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	6a1b      	ldr	r3, [r3, #32]
 800cc96:	f023 0201 	bic.w	r2, r3, #1
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	699b      	ldr	r3, [r3, #24]
 800cca2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cca4:	693b      	ldr	r3, [r7, #16]
 800cca6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ccaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	011b      	lsls	r3, r3, #4
 800ccb0:	693a      	ldr	r2, [r7, #16]
 800ccb2:	4313      	orrs	r3, r2
 800ccb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	f023 030a 	bic.w	r3, r3, #10
 800ccbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ccbe:	697a      	ldr	r2, [r7, #20]
 800ccc0:	68bb      	ldr	r3, [r7, #8]
 800ccc2:	4313      	orrs	r3, r2
 800ccc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	693a      	ldr	r2, [r7, #16]
 800ccca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	697a      	ldr	r2, [r7, #20]
 800ccd0:	621a      	str	r2, [r3, #32]
}
 800ccd2:	bf00      	nop
 800ccd4:	371c      	adds	r7, #28
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccdc:	4770      	bx	lr

0800ccde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ccde:	b480      	push	{r7}
 800cce0:	b087      	sub	sp, #28
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	60f8      	str	r0, [r7, #12]
 800cce6:	60b9      	str	r1, [r7, #8]
 800cce8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	6a1b      	ldr	r3, [r3, #32]
 800ccee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	6a1b      	ldr	r3, [r3, #32]
 800ccf4:	f023 0210 	bic.w	r2, r3, #16
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	699b      	ldr	r3, [r3, #24]
 800cd00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cd02:	693b      	ldr	r3, [r7, #16]
 800cd04:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800cd08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	031b      	lsls	r3, r3, #12
 800cd0e:	693a      	ldr	r2, [r7, #16]
 800cd10:	4313      	orrs	r3, r2
 800cd12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cd14:	697b      	ldr	r3, [r7, #20]
 800cd16:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800cd1a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	011b      	lsls	r3, r3, #4
 800cd20:	697a      	ldr	r2, [r7, #20]
 800cd22:	4313      	orrs	r3, r2
 800cd24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	693a      	ldr	r2, [r7, #16]
 800cd2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	697a      	ldr	r2, [r7, #20]
 800cd30:	621a      	str	r2, [r3, #32]
}
 800cd32:	bf00      	nop
 800cd34:	371c      	adds	r7, #28
 800cd36:	46bd      	mov	sp, r7
 800cd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3c:	4770      	bx	lr

0800cd3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cd3e:	b480      	push	{r7}
 800cd40:	b085      	sub	sp, #20
 800cd42:	af00      	add	r7, sp, #0
 800cd44:	6078      	str	r0, [r7, #4]
 800cd46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	689b      	ldr	r3, [r3, #8]
 800cd4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800cd54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cd5a:	683a      	ldr	r2, [r7, #0]
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	4313      	orrs	r3, r2
 800cd60:	f043 0307 	orr.w	r3, r3, #7
 800cd64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	68fa      	ldr	r2, [r7, #12]
 800cd6a:	609a      	str	r2, [r3, #8]
}
 800cd6c:	bf00      	nop
 800cd6e:	3714      	adds	r7, #20
 800cd70:	46bd      	mov	sp, r7
 800cd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd76:	4770      	bx	lr

0800cd78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cd78:	b480      	push	{r7}
 800cd7a:	b087      	sub	sp, #28
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	60f8      	str	r0, [r7, #12]
 800cd80:	60b9      	str	r1, [r7, #8]
 800cd82:	607a      	str	r2, [r7, #4]
 800cd84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	689b      	ldr	r3, [r3, #8]
 800cd8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cd92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	021a      	lsls	r2, r3, #8
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	431a      	orrs	r2, r3
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	4313      	orrs	r3, r2
 800cda0:	697a      	ldr	r2, [r7, #20]
 800cda2:	4313      	orrs	r3, r2
 800cda4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	697a      	ldr	r2, [r7, #20]
 800cdaa:	609a      	str	r2, [r3, #8]
}
 800cdac:	bf00      	nop
 800cdae:	371c      	adds	r7, #28
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb6:	4770      	bx	lr

0800cdb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cdb8:	b480      	push	{r7}
 800cdba:	b085      	sub	sp, #20
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
 800cdc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cdc8:	2b01      	cmp	r3, #1
 800cdca:	d101      	bne.n	800cdd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cdcc:	2302      	movs	r3, #2
 800cdce:	e04a      	b.n	800ce66 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2201      	movs	r2, #1
 800cdd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2202      	movs	r2, #2
 800cddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	685b      	ldr	r3, [r3, #4]
 800cde6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	689b      	ldr	r3, [r3, #8]
 800cdee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	4a1f      	ldr	r2, [pc, #124]	@ (800ce74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d108      	bne.n	800ce0c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ce00:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	685b      	ldr	r3, [r3, #4]
 800ce06:	68fa      	ldr	r2, [r7, #12]
 800ce08:	4313      	orrs	r3, r2
 800ce0a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	68fa      	ldr	r2, [r7, #12]
 800ce1a:	4313      	orrs	r3, r2
 800ce1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	68fa      	ldr	r2, [r7, #12]
 800ce24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	4a12      	ldr	r2, [pc, #72]	@ (800ce74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d004      	beq.n	800ce3a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce38:	d10c      	bne.n	800ce54 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ce40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	689b      	ldr	r3, [r3, #8]
 800ce46:	68ba      	ldr	r2, [r7, #8]
 800ce48:	4313      	orrs	r3, r2
 800ce4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	68ba      	ldr	r2, [r7, #8]
 800ce52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2201      	movs	r2, #1
 800ce58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2200      	movs	r2, #0
 800ce60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ce64:	2300      	movs	r3, #0
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3714      	adds	r7, #20
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce70:	4770      	bx	lr
 800ce72:	bf00      	nop
 800ce74:	40012c00 	.word	0x40012c00

0800ce78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b083      	sub	sp, #12
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ce80:	bf00      	nop
 800ce82:	370c      	adds	r7, #12
 800ce84:	46bd      	mov	sp, r7
 800ce86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8a:	4770      	bx	lr

0800ce8c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ce8c:	b480      	push	{r7}
 800ce8e:	b083      	sub	sp, #12
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ce94:	bf00      	nop
 800ce96:	370c      	adds	r7, #12
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9e:	4770      	bx	lr

0800cea0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cea0:	b480      	push	{r7}
 800cea2:	b083      	sub	sp, #12
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cea8:	bf00      	nop
 800ceaa:	370c      	adds	r7, #12
 800ceac:	46bd      	mov	sp, r7
 800ceae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb2:	4770      	bx	lr

0800ceb4 <LL_RCC_GetUSARTClockSource>:
{
 800ceb4:	b480      	push	{r7}
 800ceb6:	b083      	sub	sp, #12
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800cebc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cec0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	4013      	ands	r3, r2
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	370c      	adds	r7, #12
 800cecc:	46bd      	mov	sp, r7
 800cece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced2:	4770      	bx	lr

0800ced4 <LL_RCC_GetLPUARTClockSource>:
{
 800ced4:	b480      	push	{r7}
 800ced6:	b083      	sub	sp, #12
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800cedc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cee0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	4013      	ands	r3, r2
}
 800cee8:	4618      	mov	r0, r3
 800ceea:	370c      	adds	r7, #12
 800ceec:	46bd      	mov	sp, r7
 800ceee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef2:	4770      	bx	lr

0800cef4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b082      	sub	sp, #8
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d101      	bne.n	800cf06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cf02:	2301      	movs	r3, #1
 800cf04:	e042      	b.n	800cf8c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d106      	bne.n	800cf1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2200      	movs	r2, #0
 800cf14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cf18:	6878      	ldr	r0, [r7, #4]
 800cf1a:	f000 f83b 	bl	800cf94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2224      	movs	r2, #36	@ 0x24
 800cf22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	681a      	ldr	r2, [r3, #0]
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	f022 0201 	bic.w	r2, r2, #1
 800cf34:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d002      	beq.n	800cf44 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f000 fae8 	bl	800d514 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f000 f8bd 	bl	800d0c4 <UART_SetConfig>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	2b01      	cmp	r3, #1
 800cf4e:	d101      	bne.n	800cf54 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800cf50:	2301      	movs	r3, #1
 800cf52:	e01b      	b.n	800cf8c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	685a      	ldr	r2, [r3, #4]
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cf62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	689a      	ldr	r2, [r3, #8]
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cf72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	681a      	ldr	r2, [r3, #0]
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	f042 0201 	orr.w	r2, r2, #1
 800cf82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f000 fb67 	bl	800d658 <UART_CheckIdleState>
 800cf8a:	4603      	mov	r3, r0
}
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	3708      	adds	r7, #8
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}

0800cf94 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800cf94:	b480      	push	{r7}
 800cf96:	b083      	sub	sp, #12
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800cf9c:	bf00      	nop
 800cf9e:	370c      	adds	r7, #12
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa6:	4770      	bx	lr

0800cfa8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b08a      	sub	sp, #40	@ 0x28
 800cfac:	af02      	add	r7, sp, #8
 800cfae:	60f8      	str	r0, [r7, #12]
 800cfb0:	60b9      	str	r1, [r7, #8]
 800cfb2:	603b      	str	r3, [r7, #0]
 800cfb4:	4613      	mov	r3, r2
 800cfb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cfbe:	2b20      	cmp	r3, #32
 800cfc0:	d17b      	bne.n	800d0ba <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800cfc2:	68bb      	ldr	r3, [r7, #8]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d002      	beq.n	800cfce <HAL_UART_Transmit+0x26>
 800cfc8:	88fb      	ldrh	r3, [r7, #6]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d101      	bne.n	800cfd2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800cfce:	2301      	movs	r3, #1
 800cfd0:	e074      	b.n	800d0bc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	2221      	movs	r2, #33	@ 0x21
 800cfde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cfe2:	f7f8 fbc7 	bl	8005774 <HAL_GetTick>
 800cfe6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	88fa      	ldrh	r2, [r7, #6]
 800cfec:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	88fa      	ldrh	r2, [r7, #6]
 800cff4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	689b      	ldr	r3, [r3, #8]
 800cffc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d000:	d108      	bne.n	800d014 <HAL_UART_Transmit+0x6c>
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	691b      	ldr	r3, [r3, #16]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d104      	bne.n	800d014 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d00a:	2300      	movs	r3, #0
 800d00c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	61bb      	str	r3, [r7, #24]
 800d012:	e003      	b.n	800d01c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d018:	2300      	movs	r3, #0
 800d01a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d01c:	e030      	b.n	800d080 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	9300      	str	r3, [sp, #0]
 800d022:	697b      	ldr	r3, [r7, #20]
 800d024:	2200      	movs	r2, #0
 800d026:	2180      	movs	r1, #128	@ 0x80
 800d028:	68f8      	ldr	r0, [r7, #12]
 800d02a:	f000 fbbf 	bl	800d7ac <UART_WaitOnFlagUntilTimeout>
 800d02e:	4603      	mov	r3, r0
 800d030:	2b00      	cmp	r3, #0
 800d032:	d005      	beq.n	800d040 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	2220      	movs	r2, #32
 800d038:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800d03c:	2303      	movs	r3, #3
 800d03e:	e03d      	b.n	800d0bc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d040:	69fb      	ldr	r3, [r7, #28]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d10b      	bne.n	800d05e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d046:	69bb      	ldr	r3, [r7, #24]
 800d048:	881b      	ldrh	r3, [r3, #0]
 800d04a:	461a      	mov	r2, r3
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d054:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800d056:	69bb      	ldr	r3, [r7, #24]
 800d058:	3302      	adds	r3, #2
 800d05a:	61bb      	str	r3, [r7, #24]
 800d05c:	e007      	b.n	800d06e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d05e:	69fb      	ldr	r3, [r7, #28]
 800d060:	781a      	ldrb	r2, [r3, #0]
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800d068:	69fb      	ldr	r3, [r7, #28]
 800d06a:	3301      	adds	r3, #1
 800d06c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d074:	b29b      	uxth	r3, r3
 800d076:	3b01      	subs	r3, #1
 800d078:	b29a      	uxth	r2, r3
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d086:	b29b      	uxth	r3, r3
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d1c8      	bne.n	800d01e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	9300      	str	r3, [sp, #0]
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	2200      	movs	r2, #0
 800d094:	2140      	movs	r1, #64	@ 0x40
 800d096:	68f8      	ldr	r0, [r7, #12]
 800d098:	f000 fb88 	bl	800d7ac <UART_WaitOnFlagUntilTimeout>
 800d09c:	4603      	mov	r3, r0
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d005      	beq.n	800d0ae <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	2220      	movs	r2, #32
 800d0a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800d0aa:	2303      	movs	r3, #3
 800d0ac:	e006      	b.n	800d0bc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	2220      	movs	r2, #32
 800d0b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	e000      	b.n	800d0bc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d0ba:	2302      	movs	r3, #2
  }
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3720      	adds	r7, #32
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}

0800d0c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d0c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d0c8:	b08c      	sub	sp, #48	@ 0x30
 800d0ca:	af00      	add	r7, sp, #0
 800d0cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d0d4:	697b      	ldr	r3, [r7, #20]
 800d0d6:	689a      	ldr	r2, [r3, #8]
 800d0d8:	697b      	ldr	r3, [r7, #20]
 800d0da:	691b      	ldr	r3, [r3, #16]
 800d0dc:	431a      	orrs	r2, r3
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	695b      	ldr	r3, [r3, #20]
 800d0e2:	431a      	orrs	r2, r3
 800d0e4:	697b      	ldr	r3, [r7, #20]
 800d0e6:	69db      	ldr	r3, [r3, #28]
 800d0e8:	4313      	orrs	r3, r2
 800d0ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d0ec:	697b      	ldr	r3, [r7, #20]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	681a      	ldr	r2, [r3, #0]
 800d0f2:	4baf      	ldr	r3, [pc, #700]	@ (800d3b0 <UART_SetConfig+0x2ec>)
 800d0f4:	4013      	ands	r3, r2
 800d0f6:	697a      	ldr	r2, [r7, #20]
 800d0f8:	6812      	ldr	r2, [r2, #0]
 800d0fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d0fc:	430b      	orrs	r3, r1
 800d0fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	685b      	ldr	r3, [r3, #4]
 800d106:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	68da      	ldr	r2, [r3, #12]
 800d10e:	697b      	ldr	r3, [r7, #20]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	430a      	orrs	r2, r1
 800d114:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	699b      	ldr	r3, [r3, #24]
 800d11a:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d11c:	697b      	ldr	r3, [r7, #20]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	4aa4      	ldr	r2, [pc, #656]	@ (800d3b4 <UART_SetConfig+0x2f0>)
 800d122:	4293      	cmp	r3, r2
 800d124:	d004      	beq.n	800d130 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	6a1b      	ldr	r3, [r3, #32]
 800d12a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d12c:	4313      	orrs	r3, r2
 800d12e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d130:	697b      	ldr	r3, [r7, #20]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	689b      	ldr	r3, [r3, #8]
 800d136:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800d13a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800d13e:	697a      	ldr	r2, [r7, #20]
 800d140:	6812      	ldr	r2, [r2, #0]
 800d142:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d144:	430b      	orrs	r3, r1
 800d146:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d148:	697b      	ldr	r3, [r7, #20]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d14e:	f023 010f 	bic.w	r1, r3, #15
 800d152:	697b      	ldr	r3, [r7, #20]
 800d154:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	430a      	orrs	r2, r1
 800d15c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	4a95      	ldr	r2, [pc, #596]	@ (800d3b8 <UART_SetConfig+0x2f4>)
 800d164:	4293      	cmp	r3, r2
 800d166:	d125      	bne.n	800d1b4 <UART_SetConfig+0xf0>
 800d168:	2003      	movs	r0, #3
 800d16a:	f7ff fea3 	bl	800ceb4 <LL_RCC_GetUSARTClockSource>
 800d16e:	4603      	mov	r3, r0
 800d170:	2b03      	cmp	r3, #3
 800d172:	d81b      	bhi.n	800d1ac <UART_SetConfig+0xe8>
 800d174:	a201      	add	r2, pc, #4	@ (adr r2, 800d17c <UART_SetConfig+0xb8>)
 800d176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d17a:	bf00      	nop
 800d17c:	0800d18d 	.word	0x0800d18d
 800d180:	0800d19d 	.word	0x0800d19d
 800d184:	0800d195 	.word	0x0800d195
 800d188:	0800d1a5 	.word	0x0800d1a5
 800d18c:	2301      	movs	r3, #1
 800d18e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d192:	e042      	b.n	800d21a <UART_SetConfig+0x156>
 800d194:	2302      	movs	r3, #2
 800d196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d19a:	e03e      	b.n	800d21a <UART_SetConfig+0x156>
 800d19c:	2304      	movs	r3, #4
 800d19e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d1a2:	e03a      	b.n	800d21a <UART_SetConfig+0x156>
 800d1a4:	2308      	movs	r3, #8
 800d1a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d1aa:	e036      	b.n	800d21a <UART_SetConfig+0x156>
 800d1ac:	2310      	movs	r3, #16
 800d1ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d1b2:	e032      	b.n	800d21a <UART_SetConfig+0x156>
 800d1b4:	697b      	ldr	r3, [r7, #20]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	4a7e      	ldr	r2, [pc, #504]	@ (800d3b4 <UART_SetConfig+0x2f0>)
 800d1ba:	4293      	cmp	r3, r2
 800d1bc:	d12a      	bne.n	800d214 <UART_SetConfig+0x150>
 800d1be:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800d1c2:	f7ff fe87 	bl	800ced4 <LL_RCC_GetLPUARTClockSource>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d1cc:	d01a      	beq.n	800d204 <UART_SetConfig+0x140>
 800d1ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d1d2:	d81b      	bhi.n	800d20c <UART_SetConfig+0x148>
 800d1d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d1d8:	d00c      	beq.n	800d1f4 <UART_SetConfig+0x130>
 800d1da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d1de:	d815      	bhi.n	800d20c <UART_SetConfig+0x148>
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d003      	beq.n	800d1ec <UART_SetConfig+0x128>
 800d1e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d1e8:	d008      	beq.n	800d1fc <UART_SetConfig+0x138>
 800d1ea:	e00f      	b.n	800d20c <UART_SetConfig+0x148>
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d1f2:	e012      	b.n	800d21a <UART_SetConfig+0x156>
 800d1f4:	2302      	movs	r3, #2
 800d1f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d1fa:	e00e      	b.n	800d21a <UART_SetConfig+0x156>
 800d1fc:	2304      	movs	r3, #4
 800d1fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d202:	e00a      	b.n	800d21a <UART_SetConfig+0x156>
 800d204:	2308      	movs	r3, #8
 800d206:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d20a:	e006      	b.n	800d21a <UART_SetConfig+0x156>
 800d20c:	2310      	movs	r3, #16
 800d20e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d212:	e002      	b.n	800d21a <UART_SetConfig+0x156>
 800d214:	2310      	movs	r3, #16
 800d216:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	4a65      	ldr	r2, [pc, #404]	@ (800d3b4 <UART_SetConfig+0x2f0>)
 800d220:	4293      	cmp	r3, r2
 800d222:	f040 8097 	bne.w	800d354 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d226:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d22a:	2b08      	cmp	r3, #8
 800d22c:	d823      	bhi.n	800d276 <UART_SetConfig+0x1b2>
 800d22e:	a201      	add	r2, pc, #4	@ (adr r2, 800d234 <UART_SetConfig+0x170>)
 800d230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d234:	0800d259 	.word	0x0800d259
 800d238:	0800d277 	.word	0x0800d277
 800d23c:	0800d261 	.word	0x0800d261
 800d240:	0800d277 	.word	0x0800d277
 800d244:	0800d267 	.word	0x0800d267
 800d248:	0800d277 	.word	0x0800d277
 800d24c:	0800d277 	.word	0x0800d277
 800d250:	0800d277 	.word	0x0800d277
 800d254:	0800d26f 	.word	0x0800d26f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d258:	f7fe fd00 	bl	800bc5c <HAL_RCC_GetPCLK1Freq>
 800d25c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d25e:	e010      	b.n	800d282 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d260:	4b56      	ldr	r3, [pc, #344]	@ (800d3bc <UART_SetConfig+0x2f8>)
 800d262:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d264:	e00d      	b.n	800d282 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d266:	f7fe fc79 	bl	800bb5c <HAL_RCC_GetSysClockFreq>
 800d26a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d26c:	e009      	b.n	800d282 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d26e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d272:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d274:	e005      	b.n	800d282 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800d276:	2300      	movs	r3, #0
 800d278:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d27a:	2301      	movs	r3, #1
 800d27c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d280:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d284:	2b00      	cmp	r3, #0
 800d286:	f000 812b 	beq.w	800d4e0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d28e:	4a4c      	ldr	r2, [pc, #304]	@ (800d3c0 <UART_SetConfig+0x2fc>)
 800d290:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d294:	461a      	mov	r2, r3
 800d296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d298:	fbb3 f3f2 	udiv	r3, r3, r2
 800d29c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d29e:	697b      	ldr	r3, [r7, #20]
 800d2a0:	685a      	ldr	r2, [r3, #4]
 800d2a2:	4613      	mov	r3, r2
 800d2a4:	005b      	lsls	r3, r3, #1
 800d2a6:	4413      	add	r3, r2
 800d2a8:	69ba      	ldr	r2, [r7, #24]
 800d2aa:	429a      	cmp	r2, r3
 800d2ac:	d305      	bcc.n	800d2ba <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d2ae:	697b      	ldr	r3, [r7, #20]
 800d2b0:	685b      	ldr	r3, [r3, #4]
 800d2b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d2b4:	69ba      	ldr	r2, [r7, #24]
 800d2b6:	429a      	cmp	r2, r3
 800d2b8:	d903      	bls.n	800d2c2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d2c0:	e10e      	b.n	800d4e0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d2c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	60bb      	str	r3, [r7, #8]
 800d2c8:	60fa      	str	r2, [r7, #12]
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2ce:	4a3c      	ldr	r2, [pc, #240]	@ (800d3c0 <UART_SetConfig+0x2fc>)
 800d2d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d2d4:	b29b      	uxth	r3, r3
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	603b      	str	r3, [r7, #0]
 800d2da:	607a      	str	r2, [r7, #4]
 800d2dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d2e4:	f7f3 fc88 	bl	8000bf8 <__aeabi_uldivmod>
 800d2e8:	4602      	mov	r2, r0
 800d2ea:	460b      	mov	r3, r1
 800d2ec:	4610      	mov	r0, r2
 800d2ee:	4619      	mov	r1, r3
 800d2f0:	f04f 0200 	mov.w	r2, #0
 800d2f4:	f04f 0300 	mov.w	r3, #0
 800d2f8:	020b      	lsls	r3, r1, #8
 800d2fa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d2fe:	0202      	lsls	r2, r0, #8
 800d300:	6979      	ldr	r1, [r7, #20]
 800d302:	6849      	ldr	r1, [r1, #4]
 800d304:	0849      	lsrs	r1, r1, #1
 800d306:	2000      	movs	r0, #0
 800d308:	460c      	mov	r4, r1
 800d30a:	4605      	mov	r5, r0
 800d30c:	eb12 0804 	adds.w	r8, r2, r4
 800d310:	eb43 0905 	adc.w	r9, r3, r5
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	685b      	ldr	r3, [r3, #4]
 800d318:	2200      	movs	r2, #0
 800d31a:	469a      	mov	sl, r3
 800d31c:	4693      	mov	fp, r2
 800d31e:	4652      	mov	r2, sl
 800d320:	465b      	mov	r3, fp
 800d322:	4640      	mov	r0, r8
 800d324:	4649      	mov	r1, r9
 800d326:	f7f3 fc67 	bl	8000bf8 <__aeabi_uldivmod>
 800d32a:	4602      	mov	r2, r0
 800d32c:	460b      	mov	r3, r1
 800d32e:	4613      	mov	r3, r2
 800d330:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d332:	6a3b      	ldr	r3, [r7, #32]
 800d334:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d338:	d308      	bcc.n	800d34c <UART_SetConfig+0x288>
 800d33a:	6a3b      	ldr	r3, [r7, #32]
 800d33c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d340:	d204      	bcs.n	800d34c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800d342:	697b      	ldr	r3, [r7, #20]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	6a3a      	ldr	r2, [r7, #32]
 800d348:	60da      	str	r2, [r3, #12]
 800d34a:	e0c9      	b.n	800d4e0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800d34c:	2301      	movs	r3, #1
 800d34e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d352:	e0c5      	b.n	800d4e0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d354:	697b      	ldr	r3, [r7, #20]
 800d356:	69db      	ldr	r3, [r3, #28]
 800d358:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d35c:	d16d      	bne.n	800d43a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800d35e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d362:	3b01      	subs	r3, #1
 800d364:	2b07      	cmp	r3, #7
 800d366:	d82d      	bhi.n	800d3c4 <UART_SetConfig+0x300>
 800d368:	a201      	add	r2, pc, #4	@ (adr r2, 800d370 <UART_SetConfig+0x2ac>)
 800d36a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d36e:	bf00      	nop
 800d370:	0800d391 	.word	0x0800d391
 800d374:	0800d399 	.word	0x0800d399
 800d378:	0800d3c5 	.word	0x0800d3c5
 800d37c:	0800d39f 	.word	0x0800d39f
 800d380:	0800d3c5 	.word	0x0800d3c5
 800d384:	0800d3c5 	.word	0x0800d3c5
 800d388:	0800d3c5 	.word	0x0800d3c5
 800d38c:	0800d3a7 	.word	0x0800d3a7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d390:	f7fe fc7a 	bl	800bc88 <HAL_RCC_GetPCLK2Freq>
 800d394:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d396:	e01b      	b.n	800d3d0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d398:	4b08      	ldr	r3, [pc, #32]	@ (800d3bc <UART_SetConfig+0x2f8>)
 800d39a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d39c:	e018      	b.n	800d3d0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d39e:	f7fe fbdd 	bl	800bb5c <HAL_RCC_GetSysClockFreq>
 800d3a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d3a4:	e014      	b.n	800d3d0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d3a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d3aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d3ac:	e010      	b.n	800d3d0 <UART_SetConfig+0x30c>
 800d3ae:	bf00      	nop
 800d3b0:	cfff69f3 	.word	0xcfff69f3
 800d3b4:	40008000 	.word	0x40008000
 800d3b8:	40013800 	.word	0x40013800
 800d3bc:	00f42400 	.word	0x00f42400
 800d3c0:	08015508 	.word	0x08015508
      default:
        pclk = 0U;
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d3ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d3d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	f000 8084 	beq.w	800d4e0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3dc:	4a4b      	ldr	r2, [pc, #300]	@ (800d50c <UART_SetConfig+0x448>)
 800d3de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d3e2:	461a      	mov	r2, r3
 800d3e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3e6:	fbb3 f3f2 	udiv	r3, r3, r2
 800d3ea:	005a      	lsls	r2, r3, #1
 800d3ec:	697b      	ldr	r3, [r7, #20]
 800d3ee:	685b      	ldr	r3, [r3, #4]
 800d3f0:	085b      	lsrs	r3, r3, #1
 800d3f2:	441a      	add	r2, r3
 800d3f4:	697b      	ldr	r3, [r7, #20]
 800d3f6:	685b      	ldr	r3, [r3, #4]
 800d3f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3fc:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d3fe:	6a3b      	ldr	r3, [r7, #32]
 800d400:	2b0f      	cmp	r3, #15
 800d402:	d916      	bls.n	800d432 <UART_SetConfig+0x36e>
 800d404:	6a3b      	ldr	r3, [r7, #32]
 800d406:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d40a:	d212      	bcs.n	800d432 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d40c:	6a3b      	ldr	r3, [r7, #32]
 800d40e:	b29b      	uxth	r3, r3
 800d410:	f023 030f 	bic.w	r3, r3, #15
 800d414:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d416:	6a3b      	ldr	r3, [r7, #32]
 800d418:	085b      	lsrs	r3, r3, #1
 800d41a:	b29b      	uxth	r3, r3
 800d41c:	f003 0307 	and.w	r3, r3, #7
 800d420:	b29a      	uxth	r2, r3
 800d422:	8bfb      	ldrh	r3, [r7, #30]
 800d424:	4313      	orrs	r3, r2
 800d426:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800d428:	697b      	ldr	r3, [r7, #20]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	8bfa      	ldrh	r2, [r7, #30]
 800d42e:	60da      	str	r2, [r3, #12]
 800d430:	e056      	b.n	800d4e0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800d432:	2301      	movs	r3, #1
 800d434:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d438:	e052      	b.n	800d4e0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d43a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d43e:	3b01      	subs	r3, #1
 800d440:	2b07      	cmp	r3, #7
 800d442:	d822      	bhi.n	800d48a <UART_SetConfig+0x3c6>
 800d444:	a201      	add	r2, pc, #4	@ (adr r2, 800d44c <UART_SetConfig+0x388>)
 800d446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d44a:	bf00      	nop
 800d44c:	0800d46d 	.word	0x0800d46d
 800d450:	0800d475 	.word	0x0800d475
 800d454:	0800d48b 	.word	0x0800d48b
 800d458:	0800d47b 	.word	0x0800d47b
 800d45c:	0800d48b 	.word	0x0800d48b
 800d460:	0800d48b 	.word	0x0800d48b
 800d464:	0800d48b 	.word	0x0800d48b
 800d468:	0800d483 	.word	0x0800d483
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d46c:	f7fe fc0c 	bl	800bc88 <HAL_RCC_GetPCLK2Freq>
 800d470:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d472:	e010      	b.n	800d496 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d474:	4b26      	ldr	r3, [pc, #152]	@ (800d510 <UART_SetConfig+0x44c>)
 800d476:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d478:	e00d      	b.n	800d496 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d47a:	f7fe fb6f 	bl	800bb5c <HAL_RCC_GetSysClockFreq>
 800d47e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d480:	e009      	b.n	800d496 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d482:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d486:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d488:	e005      	b.n	800d496 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800d48a:	2300      	movs	r3, #0
 800d48c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d48e:	2301      	movs	r3, #1
 800d490:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d494:	bf00      	nop
    }

    if (pclk != 0U)
 800d496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d021      	beq.n	800d4e0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4a0:	4a1a      	ldr	r2, [pc, #104]	@ (800d50c <UART_SetConfig+0x448>)
 800d4a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d4a6:	461a      	mov	r2, r3
 800d4a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4aa:	fbb3 f2f2 	udiv	r2, r3, r2
 800d4ae:	697b      	ldr	r3, [r7, #20]
 800d4b0:	685b      	ldr	r3, [r3, #4]
 800d4b2:	085b      	lsrs	r3, r3, #1
 800d4b4:	441a      	add	r2, r3
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	685b      	ldr	r3, [r3, #4]
 800d4ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d4c0:	6a3b      	ldr	r3, [r7, #32]
 800d4c2:	2b0f      	cmp	r3, #15
 800d4c4:	d909      	bls.n	800d4da <UART_SetConfig+0x416>
 800d4c6:	6a3b      	ldr	r3, [r7, #32]
 800d4c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d4cc:	d205      	bcs.n	800d4da <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d4ce:	6a3b      	ldr	r3, [r7, #32]
 800d4d0:	b29a      	uxth	r2, r3
 800d4d2:	697b      	ldr	r3, [r7, #20]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	60da      	str	r2, [r3, #12]
 800d4d8:	e002      	b.n	800d4e0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800d4da:	2301      	movs	r3, #1
 800d4dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	2201      	movs	r2, #1
 800d4e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d4e8:	697b      	ldr	r3, [r7, #20]
 800d4ea:	2201      	movs	r2, #1
 800d4ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d4f0:	697b      	ldr	r3, [r7, #20]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d4f6:	697b      	ldr	r3, [r7, #20]
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d4fc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800d500:	4618      	mov	r0, r3
 800d502:	3730      	adds	r7, #48	@ 0x30
 800d504:	46bd      	mov	sp, r7
 800d506:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d50a:	bf00      	nop
 800d50c:	08015508 	.word	0x08015508
 800d510:	00f42400 	.word	0x00f42400

0800d514 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d514:	b480      	push	{r7}
 800d516:	b083      	sub	sp, #12
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d520:	f003 0308 	and.w	r3, r3, #8
 800d524:	2b00      	cmp	r3, #0
 800d526:	d00a      	beq.n	800d53e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	685b      	ldr	r3, [r3, #4]
 800d52e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	430a      	orrs	r2, r1
 800d53c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d542:	f003 0301 	and.w	r3, r3, #1
 800d546:	2b00      	cmp	r3, #0
 800d548:	d00a      	beq.n	800d560 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	685b      	ldr	r3, [r3, #4]
 800d550:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	430a      	orrs	r2, r1
 800d55e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d564:	f003 0302 	and.w	r3, r3, #2
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d00a      	beq.n	800d582 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	685b      	ldr	r3, [r3, #4]
 800d572:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	430a      	orrs	r2, r1
 800d580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d586:	f003 0304 	and.w	r3, r3, #4
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d00a      	beq.n	800d5a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	685b      	ldr	r3, [r3, #4]
 800d594:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	430a      	orrs	r2, r1
 800d5a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5a8:	f003 0310 	and.w	r3, r3, #16
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d00a      	beq.n	800d5c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	689b      	ldr	r3, [r3, #8]
 800d5b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	430a      	orrs	r2, r1
 800d5c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5ca:	f003 0320 	and.w	r3, r3, #32
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d00a      	beq.n	800d5e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	689b      	ldr	r3, [r3, #8]
 800d5d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	430a      	orrs	r2, r1
 800d5e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d01a      	beq.n	800d62a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	685b      	ldr	r3, [r3, #4]
 800d5fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	430a      	orrs	r2, r1
 800d608:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d60e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d612:	d10a      	bne.n	800d62a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	685b      	ldr	r3, [r3, #4]
 800d61a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	430a      	orrs	r2, r1
 800d628:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d62e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d632:	2b00      	cmp	r3, #0
 800d634:	d00a      	beq.n	800d64c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	685b      	ldr	r3, [r3, #4]
 800d63c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	430a      	orrs	r2, r1
 800d64a:	605a      	str	r2, [r3, #4]
  }
}
 800d64c:	bf00      	nop
 800d64e:	370c      	adds	r7, #12
 800d650:	46bd      	mov	sp, r7
 800d652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d656:	4770      	bx	lr

0800d658 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b098      	sub	sp, #96	@ 0x60
 800d65c:	af02      	add	r7, sp, #8
 800d65e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2200      	movs	r2, #0
 800d664:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d668:	f7f8 f884 	bl	8005774 <HAL_GetTick>
 800d66c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	f003 0308 	and.w	r3, r3, #8
 800d678:	2b08      	cmp	r3, #8
 800d67a:	d12f      	bne.n	800d6dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d67c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d680:	9300      	str	r3, [sp, #0]
 800d682:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d684:	2200      	movs	r2, #0
 800d686:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f000 f88e 	bl	800d7ac <UART_WaitOnFlagUntilTimeout>
 800d690:	4603      	mov	r3, r0
 800d692:	2b00      	cmp	r3, #0
 800d694:	d022      	beq.n	800d6dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d69c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d69e:	e853 3f00 	ldrex	r3, [r3]
 800d6a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d6a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d6aa:	653b      	str	r3, [r7, #80]	@ 0x50
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	461a      	mov	r2, r3
 800d6b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6b4:	647b      	str	r3, [r7, #68]	@ 0x44
 800d6b6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d6ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d6bc:	e841 2300 	strex	r3, r2, [r1]
 800d6c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d6c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d1e6      	bne.n	800d696 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2220      	movs	r2, #32
 800d6cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d6d8:	2303      	movs	r3, #3
 800d6da:	e063      	b.n	800d7a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	f003 0304 	and.w	r3, r3, #4
 800d6e6:	2b04      	cmp	r3, #4
 800d6e8:	d149      	bne.n	800d77e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d6ea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d6ee:	9300      	str	r3, [sp, #0]
 800d6f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f000 f857 	bl	800d7ac <UART_WaitOnFlagUntilTimeout>
 800d6fe:	4603      	mov	r3, r0
 800d700:	2b00      	cmp	r3, #0
 800d702:	d03c      	beq.n	800d77e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d70a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d70c:	e853 3f00 	ldrex	r3, [r3]
 800d710:	623b      	str	r3, [r7, #32]
   return(result);
 800d712:	6a3b      	ldr	r3, [r7, #32]
 800d714:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d718:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	461a      	mov	r2, r3
 800d720:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d722:	633b      	str	r3, [r7, #48]	@ 0x30
 800d724:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d726:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d728:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d72a:	e841 2300 	strex	r3, r2, [r1]
 800d72e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d732:	2b00      	cmp	r3, #0
 800d734:	d1e6      	bne.n	800d704 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	3308      	adds	r3, #8
 800d73c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	e853 3f00 	ldrex	r3, [r3]
 800d744:	60fb      	str	r3, [r7, #12]
   return(result);
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	f023 0301 	bic.w	r3, r3, #1
 800d74c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	3308      	adds	r3, #8
 800d754:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d756:	61fa      	str	r2, [r7, #28]
 800d758:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d75a:	69b9      	ldr	r1, [r7, #24]
 800d75c:	69fa      	ldr	r2, [r7, #28]
 800d75e:	e841 2300 	strex	r3, r2, [r1]
 800d762:	617b      	str	r3, [r7, #20]
   return(result);
 800d764:	697b      	ldr	r3, [r7, #20]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d1e5      	bne.n	800d736 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2220      	movs	r2, #32
 800d76e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2200      	movs	r2, #0
 800d776:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d77a:	2303      	movs	r3, #3
 800d77c:	e012      	b.n	800d7a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	2220      	movs	r2, #32
 800d782:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2220      	movs	r2, #32
 800d78a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2200      	movs	r2, #0
 800d792:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2200      	movs	r2, #0
 800d798:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2200      	movs	r2, #0
 800d79e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d7a2:	2300      	movs	r3, #0
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	3758      	adds	r7, #88	@ 0x58
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}

0800d7ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b084      	sub	sp, #16
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	60f8      	str	r0, [r7, #12]
 800d7b4:	60b9      	str	r1, [r7, #8]
 800d7b6:	603b      	str	r3, [r7, #0]
 800d7b8:	4613      	mov	r3, r2
 800d7ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d7bc:	e04f      	b.n	800d85e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d7be:	69bb      	ldr	r3, [r7, #24]
 800d7c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7c4:	d04b      	beq.n	800d85e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d7c6:	f7f7 ffd5 	bl	8005774 <HAL_GetTick>
 800d7ca:	4602      	mov	r2, r0
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	1ad3      	subs	r3, r2, r3
 800d7d0:	69ba      	ldr	r2, [r7, #24]
 800d7d2:	429a      	cmp	r2, r3
 800d7d4:	d302      	bcc.n	800d7dc <UART_WaitOnFlagUntilTimeout+0x30>
 800d7d6:	69bb      	ldr	r3, [r7, #24]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d101      	bne.n	800d7e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d7dc:	2303      	movs	r3, #3
 800d7de:	e04e      	b.n	800d87e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	f003 0304 	and.w	r3, r3, #4
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d037      	beq.n	800d85e <UART_WaitOnFlagUntilTimeout+0xb2>
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	2b80      	cmp	r3, #128	@ 0x80
 800d7f2:	d034      	beq.n	800d85e <UART_WaitOnFlagUntilTimeout+0xb2>
 800d7f4:	68bb      	ldr	r3, [r7, #8]
 800d7f6:	2b40      	cmp	r3, #64	@ 0x40
 800d7f8:	d031      	beq.n	800d85e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	69db      	ldr	r3, [r3, #28]
 800d800:	f003 0308 	and.w	r3, r3, #8
 800d804:	2b08      	cmp	r3, #8
 800d806:	d110      	bne.n	800d82a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	2208      	movs	r2, #8
 800d80e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d810:	68f8      	ldr	r0, [r7, #12]
 800d812:	f000 f838 	bl	800d886 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	2208      	movs	r2, #8
 800d81a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	2200      	movs	r2, #0
 800d822:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d826:	2301      	movs	r3, #1
 800d828:	e029      	b.n	800d87e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	69db      	ldr	r3, [r3, #28]
 800d830:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d834:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d838:	d111      	bne.n	800d85e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d842:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d844:	68f8      	ldr	r0, [r7, #12]
 800d846:	f000 f81e 	bl	800d886 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	2220      	movs	r2, #32
 800d84e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	2200      	movs	r2, #0
 800d856:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d85a:	2303      	movs	r3, #3
 800d85c:	e00f      	b.n	800d87e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	69da      	ldr	r2, [r3, #28]
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	4013      	ands	r3, r2
 800d868:	68ba      	ldr	r2, [r7, #8]
 800d86a:	429a      	cmp	r2, r3
 800d86c:	bf0c      	ite	eq
 800d86e:	2301      	moveq	r3, #1
 800d870:	2300      	movne	r3, #0
 800d872:	b2db      	uxtb	r3, r3
 800d874:	461a      	mov	r2, r3
 800d876:	79fb      	ldrb	r3, [r7, #7]
 800d878:	429a      	cmp	r2, r3
 800d87a:	d0a0      	beq.n	800d7be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d87c:	2300      	movs	r3, #0
}
 800d87e:	4618      	mov	r0, r3
 800d880:	3710      	adds	r7, #16
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}

0800d886 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d886:	b480      	push	{r7}
 800d888:	b095      	sub	sp, #84	@ 0x54
 800d88a:	af00      	add	r7, sp, #0
 800d88c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d896:	e853 3f00 	ldrex	r3, [r3]
 800d89a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d89c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d89e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d8a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	461a      	mov	r2, r3
 800d8aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8ac:	643b      	str	r3, [r7, #64]	@ 0x40
 800d8ae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d8b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d8b4:	e841 2300 	strex	r3, r2, [r1]
 800d8b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d8ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d1e6      	bne.n	800d88e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	3308      	adds	r3, #8
 800d8c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8c8:	6a3b      	ldr	r3, [r7, #32]
 800d8ca:	e853 3f00 	ldrex	r3, [r3]
 800d8ce:	61fb      	str	r3, [r7, #28]
   return(result);
 800d8d0:	69fb      	ldr	r3, [r7, #28]
 800d8d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d8d6:	f023 0301 	bic.w	r3, r3, #1
 800d8da:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	3308      	adds	r3, #8
 800d8e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d8e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d8e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d8ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d8ec:	e841 2300 	strex	r3, r2, [r1]
 800d8f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d8f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d1e3      	bne.n	800d8c0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d8fc:	2b01      	cmp	r3, #1
 800d8fe:	d118      	bne.n	800d932 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	e853 3f00 	ldrex	r3, [r3]
 800d90c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	f023 0310 	bic.w	r3, r3, #16
 800d914:	647b      	str	r3, [r7, #68]	@ 0x44
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	461a      	mov	r2, r3
 800d91c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d91e:	61bb      	str	r3, [r7, #24]
 800d920:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d922:	6979      	ldr	r1, [r7, #20]
 800d924:	69ba      	ldr	r2, [r7, #24]
 800d926:	e841 2300 	strex	r3, r2, [r1]
 800d92a:	613b      	str	r3, [r7, #16]
   return(result);
 800d92c:	693b      	ldr	r3, [r7, #16]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d1e6      	bne.n	800d900 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	2220      	movs	r2, #32
 800d936:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	2200      	movs	r2, #0
 800d93e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2200      	movs	r2, #0
 800d944:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d946:	bf00      	nop
 800d948:	3754      	adds	r7, #84	@ 0x54
 800d94a:	46bd      	mov	sp, r7
 800d94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d950:	4770      	bx	lr

0800d952 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800d952:	b480      	push	{r7}
 800d954:	b085      	sub	sp, #20
 800d956:	af00      	add	r7, sp, #0
 800d958:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	2200      	movs	r2, #0
 800d95e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d962:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800d966:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	b29a      	uxth	r2, r3
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800d972:	2300      	movs	r3, #0
}
 800d974:	4618      	mov	r0, r3
 800d976:	3714      	adds	r7, #20
 800d978:	46bd      	mov	sp, r7
 800d97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97e:	4770      	bx	lr

0800d980 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800d980:	b480      	push	{r7}
 800d982:	b085      	sub	sp, #20
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d988:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800d98c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800d994:	b29a      	uxth	r2, r3
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	b29b      	uxth	r3, r3
 800d99a:	43db      	mvns	r3, r3
 800d99c:	b29b      	uxth	r3, r3
 800d99e:	4013      	ands	r3, r2
 800d9a0:	b29a      	uxth	r2, r3
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800d9a8:	2300      	movs	r3, #0
}
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	3714      	adds	r7, #20
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b4:	4770      	bx	lr

0800d9b6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800d9b6:	b480      	push	{r7}
 800d9b8:	b085      	sub	sp, #20
 800d9ba:	af00      	add	r7, sp, #0
 800d9bc:	60f8      	str	r0, [r7, #12]
 800d9be:	1d3b      	adds	r3, r7, #4
 800d9c0:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	2201      	movs	r2, #1
 800d9c8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	2200      	movs	r2, #0
 800d9e0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800d9e4:	2300      	movs	r3, #0
}
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	3714      	adds	r7, #20
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f0:	4770      	bx	lr
	...

0800d9f4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d9f4:	b480      	push	{r7}
 800d9f6:	b09d      	sub	sp, #116	@ 0x74
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
 800d9fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800d9fe:	2300      	movs	r3, #0
 800da00:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800da04:	687a      	ldr	r2, [r7, #4]
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	781b      	ldrb	r3, [r3, #0]
 800da0a:	009b      	lsls	r3, r3, #2
 800da0c:	4413      	add	r3, r2
 800da0e:	881b      	ldrh	r3, [r3, #0]
 800da10:	b29b      	uxth	r3, r3
 800da12:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800da16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800da1a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	78db      	ldrb	r3, [r3, #3]
 800da22:	2b03      	cmp	r3, #3
 800da24:	d81f      	bhi.n	800da66 <USB_ActivateEndpoint+0x72>
 800da26:	a201      	add	r2, pc, #4	@ (adr r2, 800da2c <USB_ActivateEndpoint+0x38>)
 800da28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da2c:	0800da3d 	.word	0x0800da3d
 800da30:	0800da59 	.word	0x0800da59
 800da34:	0800da6f 	.word	0x0800da6f
 800da38:	0800da4b 	.word	0x0800da4b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800da3c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800da40:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800da44:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800da48:	e012      	b.n	800da70 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800da4a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800da4e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800da52:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800da56:	e00b      	b.n	800da70 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800da58:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800da5c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800da60:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800da64:	e004      	b.n	800da70 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800da66:	2301      	movs	r3, #1
 800da68:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800da6c:	e000      	b.n	800da70 <USB_ActivateEndpoint+0x7c>
      break;
 800da6e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800da70:	687a      	ldr	r2, [r7, #4]
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	781b      	ldrb	r3, [r3, #0]
 800da76:	009b      	lsls	r3, r3, #2
 800da78:	441a      	add	r2, r3
 800da7a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800da7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800da82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800da86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800da8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da8e:	b29b      	uxth	r3, r3
 800da90:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800da92:	687a      	ldr	r2, [r7, #4]
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	781b      	ldrb	r3, [r3, #0]
 800da98:	009b      	lsls	r3, r3, #2
 800da9a:	4413      	add	r3, r2
 800da9c:	881b      	ldrh	r3, [r3, #0]
 800da9e:	b29b      	uxth	r3, r3
 800daa0:	b21b      	sxth	r3, r3
 800daa2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800daa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800daaa:	b21a      	sxth	r2, r3
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	781b      	ldrb	r3, [r3, #0]
 800dab0:	b21b      	sxth	r3, r3
 800dab2:	4313      	orrs	r3, r2
 800dab4:	b21b      	sxth	r3, r3
 800dab6:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800daba:	687a      	ldr	r2, [r7, #4]
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	781b      	ldrb	r3, [r3, #0]
 800dac0:	009b      	lsls	r3, r3, #2
 800dac2:	441a      	add	r2, r3
 800dac4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800dac8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dacc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dad0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dad4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dad8:	b29b      	uxth	r3, r3
 800dada:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	7b1b      	ldrb	r3, [r3, #12]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	f040 8178 	bne.w	800ddd6 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	785b      	ldrb	r3, [r3, #1]
 800daea:	2b00      	cmp	r3, #0
 800daec:	f000 8084 	beq.w	800dbf8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	61bb      	str	r3, [r7, #24]
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dafa:	b29b      	uxth	r3, r3
 800dafc:	461a      	mov	r2, r3
 800dafe:	69bb      	ldr	r3, [r7, #24]
 800db00:	4413      	add	r3, r2
 800db02:	61bb      	str	r3, [r7, #24]
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	781b      	ldrb	r3, [r3, #0]
 800db08:	00da      	lsls	r2, r3, #3
 800db0a:	69bb      	ldr	r3, [r7, #24]
 800db0c:	4413      	add	r3, r2
 800db0e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800db12:	617b      	str	r3, [r7, #20]
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	88db      	ldrh	r3, [r3, #6]
 800db18:	085b      	lsrs	r3, r3, #1
 800db1a:	b29b      	uxth	r3, r3
 800db1c:	005b      	lsls	r3, r3, #1
 800db1e:	b29a      	uxth	r2, r3
 800db20:	697b      	ldr	r3, [r7, #20]
 800db22:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800db24:	687a      	ldr	r2, [r7, #4]
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	781b      	ldrb	r3, [r3, #0]
 800db2a:	009b      	lsls	r3, r3, #2
 800db2c:	4413      	add	r3, r2
 800db2e:	881b      	ldrh	r3, [r3, #0]
 800db30:	827b      	strh	r3, [r7, #18]
 800db32:	8a7b      	ldrh	r3, [r7, #18]
 800db34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d01b      	beq.n	800db74 <USB_ActivateEndpoint+0x180>
 800db3c:	687a      	ldr	r2, [r7, #4]
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	781b      	ldrb	r3, [r3, #0]
 800db42:	009b      	lsls	r3, r3, #2
 800db44:	4413      	add	r3, r2
 800db46:	881b      	ldrh	r3, [r3, #0]
 800db48:	b29b      	uxth	r3, r3
 800db4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800db4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800db52:	823b      	strh	r3, [r7, #16]
 800db54:	687a      	ldr	r2, [r7, #4]
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	781b      	ldrb	r3, [r3, #0]
 800db5a:	009b      	lsls	r3, r3, #2
 800db5c:	441a      	add	r2, r3
 800db5e:	8a3b      	ldrh	r3, [r7, #16]
 800db60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800db64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800db68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800db6c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800db70:	b29b      	uxth	r3, r3
 800db72:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	78db      	ldrb	r3, [r3, #3]
 800db78:	2b01      	cmp	r3, #1
 800db7a:	d020      	beq.n	800dbbe <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800db7c:	687a      	ldr	r2, [r7, #4]
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	781b      	ldrb	r3, [r3, #0]
 800db82:	009b      	lsls	r3, r3, #2
 800db84:	4413      	add	r3, r2
 800db86:	881b      	ldrh	r3, [r3, #0]
 800db88:	b29b      	uxth	r3, r3
 800db8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800db8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800db92:	81bb      	strh	r3, [r7, #12]
 800db94:	89bb      	ldrh	r3, [r7, #12]
 800db96:	f083 0320 	eor.w	r3, r3, #32
 800db9a:	81bb      	strh	r3, [r7, #12]
 800db9c:	687a      	ldr	r2, [r7, #4]
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	781b      	ldrb	r3, [r3, #0]
 800dba2:	009b      	lsls	r3, r3, #2
 800dba4:	441a      	add	r2, r3
 800dba6:	89bb      	ldrh	r3, [r7, #12]
 800dba8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dbac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dbb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dbb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dbb8:	b29b      	uxth	r3, r3
 800dbba:	8013      	strh	r3, [r2, #0]
 800dbbc:	e2d5      	b.n	800e16a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800dbbe:	687a      	ldr	r2, [r7, #4]
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	781b      	ldrb	r3, [r3, #0]
 800dbc4:	009b      	lsls	r3, r3, #2
 800dbc6:	4413      	add	r3, r2
 800dbc8:	881b      	ldrh	r3, [r3, #0]
 800dbca:	b29b      	uxth	r3, r3
 800dbcc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dbd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dbd4:	81fb      	strh	r3, [r7, #14]
 800dbd6:	687a      	ldr	r2, [r7, #4]
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	781b      	ldrb	r3, [r3, #0]
 800dbdc:	009b      	lsls	r3, r3, #2
 800dbde:	441a      	add	r2, r3
 800dbe0:	89fb      	ldrh	r3, [r7, #14]
 800dbe2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dbe6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dbea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dbee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dbf2:	b29b      	uxth	r3, r3
 800dbf4:	8013      	strh	r3, [r2, #0]
 800dbf6:	e2b8      	b.n	800e16a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	633b      	str	r3, [r7, #48]	@ 0x30
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dc02:	b29b      	uxth	r3, r3
 800dc04:	461a      	mov	r2, r3
 800dc06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc08:	4413      	add	r3, r2
 800dc0a:	633b      	str	r3, [r7, #48]	@ 0x30
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	781b      	ldrb	r3, [r3, #0]
 800dc10:	00da      	lsls	r2, r3, #3
 800dc12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc14:	4413      	add	r3, r2
 800dc16:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800dc1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	88db      	ldrh	r3, [r3, #6]
 800dc20:	085b      	lsrs	r3, r3, #1
 800dc22:	b29b      	uxth	r3, r3
 800dc24:	005b      	lsls	r3, r3, #1
 800dc26:	b29a      	uxth	r2, r3
 800dc28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc2a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dc36:	b29b      	uxth	r3, r3
 800dc38:	461a      	mov	r2, r3
 800dc3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc3c:	4413      	add	r3, r2
 800dc3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	781b      	ldrb	r3, [r3, #0]
 800dc44:	00da      	lsls	r2, r3, #3
 800dc46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc48:	4413      	add	r3, r2
 800dc4a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dc4e:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc52:	881b      	ldrh	r3, [r3, #0]
 800dc54:	b29b      	uxth	r3, r3
 800dc56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dc5a:	b29a      	uxth	r2, r3
 800dc5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc5e:	801a      	strh	r2, [r3, #0]
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	691b      	ldr	r3, [r3, #16]
 800dc64:	2b3e      	cmp	r3, #62	@ 0x3e
 800dc66:	d91d      	bls.n	800dca4 <USB_ActivateEndpoint+0x2b0>
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	691b      	ldr	r3, [r3, #16]
 800dc6c:	095b      	lsrs	r3, r3, #5
 800dc6e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	691b      	ldr	r3, [r3, #16]
 800dc74:	f003 031f 	and.w	r3, r3, #31
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d102      	bne.n	800dc82 <USB_ActivateEndpoint+0x28e>
 800dc7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dc7e:	3b01      	subs	r3, #1
 800dc80:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dc82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc84:	881b      	ldrh	r3, [r3, #0]
 800dc86:	b29a      	uxth	r2, r3
 800dc88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dc8a:	b29b      	uxth	r3, r3
 800dc8c:	029b      	lsls	r3, r3, #10
 800dc8e:	b29b      	uxth	r3, r3
 800dc90:	4313      	orrs	r3, r2
 800dc92:	b29b      	uxth	r3, r3
 800dc94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc9c:	b29a      	uxth	r2, r3
 800dc9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dca0:	801a      	strh	r2, [r3, #0]
 800dca2:	e026      	b.n	800dcf2 <USB_ActivateEndpoint+0x2fe>
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	691b      	ldr	r3, [r3, #16]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d10a      	bne.n	800dcc2 <USB_ActivateEndpoint+0x2ce>
 800dcac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcae:	881b      	ldrh	r3, [r3, #0]
 800dcb0:	b29b      	uxth	r3, r3
 800dcb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dcb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dcba:	b29a      	uxth	r2, r3
 800dcbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcbe:	801a      	strh	r2, [r3, #0]
 800dcc0:	e017      	b.n	800dcf2 <USB_ActivateEndpoint+0x2fe>
 800dcc2:	683b      	ldr	r3, [r7, #0]
 800dcc4:	691b      	ldr	r3, [r3, #16]
 800dcc6:	085b      	lsrs	r3, r3, #1
 800dcc8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	691b      	ldr	r3, [r3, #16]
 800dcce:	f003 0301 	and.w	r3, r3, #1
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d002      	beq.n	800dcdc <USB_ActivateEndpoint+0x2e8>
 800dcd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dcd8:	3301      	adds	r3, #1
 800dcda:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dcdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcde:	881b      	ldrh	r3, [r3, #0]
 800dce0:	b29a      	uxth	r2, r3
 800dce2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dce4:	b29b      	uxth	r3, r3
 800dce6:	029b      	lsls	r3, r3, #10
 800dce8:	b29b      	uxth	r3, r3
 800dcea:	4313      	orrs	r3, r2
 800dcec:	b29a      	uxth	r2, r3
 800dcee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcf0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dcf2:	687a      	ldr	r2, [r7, #4]
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	781b      	ldrb	r3, [r3, #0]
 800dcf8:	009b      	lsls	r3, r3, #2
 800dcfa:	4413      	add	r3, r2
 800dcfc:	881b      	ldrh	r3, [r3, #0]
 800dcfe:	847b      	strh	r3, [r7, #34]	@ 0x22
 800dd00:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dd02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d01b      	beq.n	800dd42 <USB_ActivateEndpoint+0x34e>
 800dd0a:	687a      	ldr	r2, [r7, #4]
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	781b      	ldrb	r3, [r3, #0]
 800dd10:	009b      	lsls	r3, r3, #2
 800dd12:	4413      	add	r3, r2
 800dd14:	881b      	ldrh	r3, [r3, #0]
 800dd16:	b29b      	uxth	r3, r3
 800dd18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dd1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dd20:	843b      	strh	r3, [r7, #32]
 800dd22:	687a      	ldr	r2, [r7, #4]
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	781b      	ldrb	r3, [r3, #0]
 800dd28:	009b      	lsls	r3, r3, #2
 800dd2a:	441a      	add	r2, r3
 800dd2c:	8c3b      	ldrh	r3, [r7, #32]
 800dd2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dd32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dd36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800dd3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd3e:	b29b      	uxth	r3, r3
 800dd40:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800dd42:	683b      	ldr	r3, [r7, #0]
 800dd44:	781b      	ldrb	r3, [r3, #0]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d124      	bne.n	800dd94 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800dd4a:	687a      	ldr	r2, [r7, #4]
 800dd4c:	683b      	ldr	r3, [r7, #0]
 800dd4e:	781b      	ldrb	r3, [r3, #0]
 800dd50:	009b      	lsls	r3, r3, #2
 800dd52:	4413      	add	r3, r2
 800dd54:	881b      	ldrh	r3, [r3, #0]
 800dd56:	b29b      	uxth	r3, r3
 800dd58:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800dd5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dd60:	83bb      	strh	r3, [r7, #28]
 800dd62:	8bbb      	ldrh	r3, [r7, #28]
 800dd64:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800dd68:	83bb      	strh	r3, [r7, #28]
 800dd6a:	8bbb      	ldrh	r3, [r7, #28]
 800dd6c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800dd70:	83bb      	strh	r3, [r7, #28]
 800dd72:	687a      	ldr	r2, [r7, #4]
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	781b      	ldrb	r3, [r3, #0]
 800dd78:	009b      	lsls	r3, r3, #2
 800dd7a:	441a      	add	r2, r3
 800dd7c:	8bbb      	ldrh	r3, [r7, #28]
 800dd7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dd82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dd86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dd8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd8e:	b29b      	uxth	r3, r3
 800dd90:	8013      	strh	r3, [r2, #0]
 800dd92:	e1ea      	b.n	800e16a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800dd94:	687a      	ldr	r2, [r7, #4]
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	781b      	ldrb	r3, [r3, #0]
 800dd9a:	009b      	lsls	r3, r3, #2
 800dd9c:	4413      	add	r3, r2
 800dd9e:	881b      	ldrh	r3, [r3, #0]
 800dda0:	b29b      	uxth	r3, r3
 800dda2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800dda6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ddaa:	83fb      	strh	r3, [r7, #30]
 800ddac:	8bfb      	ldrh	r3, [r7, #30]
 800ddae:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ddb2:	83fb      	strh	r3, [r7, #30]
 800ddb4:	687a      	ldr	r2, [r7, #4]
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	781b      	ldrb	r3, [r3, #0]
 800ddba:	009b      	lsls	r3, r3, #2
 800ddbc:	441a      	add	r2, r3
 800ddbe:	8bfb      	ldrh	r3, [r7, #30]
 800ddc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ddc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ddc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ddcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ddd0:	b29b      	uxth	r3, r3
 800ddd2:	8013      	strh	r3, [r2, #0]
 800ddd4:	e1c9      	b.n	800e16a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	78db      	ldrb	r3, [r3, #3]
 800ddda:	2b02      	cmp	r3, #2
 800dddc:	d11e      	bne.n	800de1c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ddde:	687a      	ldr	r2, [r7, #4]
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	781b      	ldrb	r3, [r3, #0]
 800dde4:	009b      	lsls	r3, r3, #2
 800dde6:	4413      	add	r3, r2
 800dde8:	881b      	ldrh	r3, [r3, #0]
 800ddea:	b29b      	uxth	r3, r3
 800ddec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ddf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ddf4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800ddf8:	687a      	ldr	r2, [r7, #4]
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	781b      	ldrb	r3, [r3, #0]
 800ddfe:	009b      	lsls	r3, r3, #2
 800de00:	441a      	add	r2, r3
 800de02:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800de06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800de0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800de0e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800de12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de16:	b29b      	uxth	r3, r3
 800de18:	8013      	strh	r3, [r2, #0]
 800de1a:	e01d      	b.n	800de58 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800de1c:	687a      	ldr	r2, [r7, #4]
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	781b      	ldrb	r3, [r3, #0]
 800de22:	009b      	lsls	r3, r3, #2
 800de24:	4413      	add	r3, r2
 800de26:	881b      	ldrh	r3, [r3, #0]
 800de28:	b29b      	uxth	r3, r3
 800de2a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800de2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800de32:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800de36:	687a      	ldr	r2, [r7, #4]
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	781b      	ldrb	r3, [r3, #0]
 800de3c:	009b      	lsls	r3, r3, #2
 800de3e:	441a      	add	r2, r3
 800de40:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800de44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800de48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800de4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800de50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de54:	b29b      	uxth	r3, r3
 800de56:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800de62:	b29b      	uxth	r3, r3
 800de64:	461a      	mov	r2, r3
 800de66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800de68:	4413      	add	r3, r2
 800de6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	781b      	ldrb	r3, [r3, #0]
 800de70:	00da      	lsls	r2, r3, #3
 800de72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800de74:	4413      	add	r3, r2
 800de76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800de7a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	891b      	ldrh	r3, [r3, #8]
 800de80:	085b      	lsrs	r3, r3, #1
 800de82:	b29b      	uxth	r3, r3
 800de84:	005b      	lsls	r3, r3, #1
 800de86:	b29a      	uxth	r2, r3
 800de88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800de8a:	801a      	strh	r2, [r3, #0]
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	657b      	str	r3, [r7, #84]	@ 0x54
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800de96:	b29b      	uxth	r3, r3
 800de98:	461a      	mov	r2, r3
 800de9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800de9c:	4413      	add	r3, r2
 800de9e:	657b      	str	r3, [r7, #84]	@ 0x54
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	781b      	ldrb	r3, [r3, #0]
 800dea4:	00da      	lsls	r2, r3, #3
 800dea6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dea8:	4413      	add	r3, r2
 800deaa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800deae:	653b      	str	r3, [r7, #80]	@ 0x50
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	895b      	ldrh	r3, [r3, #10]
 800deb4:	085b      	lsrs	r3, r3, #1
 800deb6:	b29b      	uxth	r3, r3
 800deb8:	005b      	lsls	r3, r3, #1
 800deba:	b29a      	uxth	r2, r3
 800debc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800debe:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	785b      	ldrb	r3, [r3, #1]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	f040 8093 	bne.w	800dff0 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800deca:	687a      	ldr	r2, [r7, #4]
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	781b      	ldrb	r3, [r3, #0]
 800ded0:	009b      	lsls	r3, r3, #2
 800ded2:	4413      	add	r3, r2
 800ded4:	881b      	ldrh	r3, [r3, #0]
 800ded6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800deda:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800dede:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d01b      	beq.n	800df1e <USB_ActivateEndpoint+0x52a>
 800dee6:	687a      	ldr	r2, [r7, #4]
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	781b      	ldrb	r3, [r3, #0]
 800deec:	009b      	lsls	r3, r3, #2
 800deee:	4413      	add	r3, r2
 800def0:	881b      	ldrh	r3, [r3, #0]
 800def2:	b29b      	uxth	r3, r3
 800def4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800def8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800defc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800defe:	687a      	ldr	r2, [r7, #4]
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	781b      	ldrb	r3, [r3, #0]
 800df04:	009b      	lsls	r3, r3, #2
 800df06:	441a      	add	r2, r3
 800df08:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800df0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800df0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800df12:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800df16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df1a:	b29b      	uxth	r3, r3
 800df1c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800df1e:	687a      	ldr	r2, [r7, #4]
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	781b      	ldrb	r3, [r3, #0]
 800df24:	009b      	lsls	r3, r3, #2
 800df26:	4413      	add	r3, r2
 800df28:	881b      	ldrh	r3, [r3, #0]
 800df2a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800df2c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800df2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df32:	2b00      	cmp	r3, #0
 800df34:	d01b      	beq.n	800df6e <USB_ActivateEndpoint+0x57a>
 800df36:	687a      	ldr	r2, [r7, #4]
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	781b      	ldrb	r3, [r3, #0]
 800df3c:	009b      	lsls	r3, r3, #2
 800df3e:	4413      	add	r3, r2
 800df40:	881b      	ldrh	r3, [r3, #0]
 800df42:	b29b      	uxth	r3, r3
 800df44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800df48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800df4c:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800df4e:	687a      	ldr	r2, [r7, #4]
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	781b      	ldrb	r3, [r3, #0]
 800df54:	009b      	lsls	r3, r3, #2
 800df56:	441a      	add	r2, r3
 800df58:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800df5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800df5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800df62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800df66:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800df6a:	b29b      	uxth	r3, r3
 800df6c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800df6e:	687a      	ldr	r2, [r7, #4]
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	781b      	ldrb	r3, [r3, #0]
 800df74:	009b      	lsls	r3, r3, #2
 800df76:	4413      	add	r3, r2
 800df78:	881b      	ldrh	r3, [r3, #0]
 800df7a:	b29b      	uxth	r3, r3
 800df7c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800df80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800df84:	873b      	strh	r3, [r7, #56]	@ 0x38
 800df86:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800df88:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800df8c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800df8e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800df90:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800df94:	873b      	strh	r3, [r7, #56]	@ 0x38
 800df96:	687a      	ldr	r2, [r7, #4]
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	781b      	ldrb	r3, [r3, #0]
 800df9c:	009b      	lsls	r3, r3, #2
 800df9e:	441a      	add	r2, r3
 800dfa0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800dfa2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dfa6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dfaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dfae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dfb2:	b29b      	uxth	r3, r3
 800dfb4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800dfb6:	687a      	ldr	r2, [r7, #4]
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	781b      	ldrb	r3, [r3, #0]
 800dfbc:	009b      	lsls	r3, r3, #2
 800dfbe:	4413      	add	r3, r2
 800dfc0:	881b      	ldrh	r3, [r3, #0]
 800dfc2:	b29b      	uxth	r3, r3
 800dfc4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dfc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dfcc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800dfce:	687a      	ldr	r2, [r7, #4]
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	781b      	ldrb	r3, [r3, #0]
 800dfd4:	009b      	lsls	r3, r3, #2
 800dfd6:	441a      	add	r2, r3
 800dfd8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800dfda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dfde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dfe2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dfe6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dfea:	b29b      	uxth	r3, r3
 800dfec:	8013      	strh	r3, [r2, #0]
 800dfee:	e0bc      	b.n	800e16a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dff0:	687a      	ldr	r2, [r7, #4]
 800dff2:	683b      	ldr	r3, [r7, #0]
 800dff4:	781b      	ldrb	r3, [r3, #0]
 800dff6:	009b      	lsls	r3, r3, #2
 800dff8:	4413      	add	r3, r2
 800dffa:	881b      	ldrh	r3, [r3, #0]
 800dffc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800e000:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800e004:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d01d      	beq.n	800e048 <USB_ActivateEndpoint+0x654>
 800e00c:	687a      	ldr	r2, [r7, #4]
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	781b      	ldrb	r3, [r3, #0]
 800e012:	009b      	lsls	r3, r3, #2
 800e014:	4413      	add	r3, r2
 800e016:	881b      	ldrh	r3, [r3, #0]
 800e018:	b29b      	uxth	r3, r3
 800e01a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e01e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e022:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800e026:	687a      	ldr	r2, [r7, #4]
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	781b      	ldrb	r3, [r3, #0]
 800e02c:	009b      	lsls	r3, r3, #2
 800e02e:	441a      	add	r2, r3
 800e030:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800e034:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e038:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e03c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e040:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e044:	b29b      	uxth	r3, r3
 800e046:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e048:	687a      	ldr	r2, [r7, #4]
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	781b      	ldrb	r3, [r3, #0]
 800e04e:	009b      	lsls	r3, r3, #2
 800e050:	4413      	add	r3, r2
 800e052:	881b      	ldrh	r3, [r3, #0]
 800e054:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800e058:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800e05c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e060:	2b00      	cmp	r3, #0
 800e062:	d01d      	beq.n	800e0a0 <USB_ActivateEndpoint+0x6ac>
 800e064:	687a      	ldr	r2, [r7, #4]
 800e066:	683b      	ldr	r3, [r7, #0]
 800e068:	781b      	ldrb	r3, [r3, #0]
 800e06a:	009b      	lsls	r3, r3, #2
 800e06c:	4413      	add	r3, r2
 800e06e:	881b      	ldrh	r3, [r3, #0]
 800e070:	b29b      	uxth	r3, r3
 800e072:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e076:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e07a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800e07e:	687a      	ldr	r2, [r7, #4]
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	781b      	ldrb	r3, [r3, #0]
 800e084:	009b      	lsls	r3, r3, #2
 800e086:	441a      	add	r2, r3
 800e088:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800e08c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e090:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e094:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e098:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e09c:	b29b      	uxth	r3, r3
 800e09e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	78db      	ldrb	r3, [r3, #3]
 800e0a4:	2b01      	cmp	r3, #1
 800e0a6:	d024      	beq.n	800e0f2 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e0a8:	687a      	ldr	r2, [r7, #4]
 800e0aa:	683b      	ldr	r3, [r7, #0]
 800e0ac:	781b      	ldrb	r3, [r3, #0]
 800e0ae:	009b      	lsls	r3, r3, #2
 800e0b0:	4413      	add	r3, r2
 800e0b2:	881b      	ldrh	r3, [r3, #0]
 800e0b4:	b29b      	uxth	r3, r3
 800e0b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e0ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e0be:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800e0c2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800e0c6:	f083 0320 	eor.w	r3, r3, #32
 800e0ca:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800e0ce:	687a      	ldr	r2, [r7, #4]
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	781b      	ldrb	r3, [r3, #0]
 800e0d4:	009b      	lsls	r3, r3, #2
 800e0d6:	441a      	add	r2, r3
 800e0d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800e0dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e0e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e0e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e0e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0ec:	b29b      	uxth	r3, r3
 800e0ee:	8013      	strh	r3, [r2, #0]
 800e0f0:	e01d      	b.n	800e12e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e0f2:	687a      	ldr	r2, [r7, #4]
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	781b      	ldrb	r3, [r3, #0]
 800e0f8:	009b      	lsls	r3, r3, #2
 800e0fa:	4413      	add	r3, r2
 800e0fc:	881b      	ldrh	r3, [r3, #0]
 800e0fe:	b29b      	uxth	r3, r3
 800e100:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e104:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e108:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800e10c:	687a      	ldr	r2, [r7, #4]
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	781b      	ldrb	r3, [r3, #0]
 800e112:	009b      	lsls	r3, r3, #2
 800e114:	441a      	add	r2, r3
 800e116:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800e11a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e11e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e122:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e126:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e12a:	b29b      	uxth	r3, r3
 800e12c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e12e:	687a      	ldr	r2, [r7, #4]
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	781b      	ldrb	r3, [r3, #0]
 800e134:	009b      	lsls	r3, r3, #2
 800e136:	4413      	add	r3, r2
 800e138:	881b      	ldrh	r3, [r3, #0]
 800e13a:	b29b      	uxth	r3, r3
 800e13c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e140:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e144:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800e148:	687a      	ldr	r2, [r7, #4]
 800e14a:	683b      	ldr	r3, [r7, #0]
 800e14c:	781b      	ldrb	r3, [r3, #0]
 800e14e:	009b      	lsls	r3, r3, #2
 800e150:	441a      	add	r2, r3
 800e152:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800e156:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e15a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e15e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e162:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e166:	b29b      	uxth	r3, r3
 800e168:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800e16a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800e16e:	4618      	mov	r0, r3
 800e170:	3774      	adds	r7, #116	@ 0x74
 800e172:	46bd      	mov	sp, r7
 800e174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e178:	4770      	bx	lr
 800e17a:	bf00      	nop

0800e17c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e17c:	b480      	push	{r7}
 800e17e:	b08d      	sub	sp, #52	@ 0x34
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
 800e184:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	7b1b      	ldrb	r3, [r3, #12]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	f040 808e 	bne.w	800e2ac <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	785b      	ldrb	r3, [r3, #1]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d044      	beq.n	800e222 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e198:	687a      	ldr	r2, [r7, #4]
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	781b      	ldrb	r3, [r3, #0]
 800e19e:	009b      	lsls	r3, r3, #2
 800e1a0:	4413      	add	r3, r2
 800e1a2:	881b      	ldrh	r3, [r3, #0]
 800e1a4:	81bb      	strh	r3, [r7, #12]
 800e1a6:	89bb      	ldrh	r3, [r7, #12]
 800e1a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d01b      	beq.n	800e1e8 <USB_DeactivateEndpoint+0x6c>
 800e1b0:	687a      	ldr	r2, [r7, #4]
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	781b      	ldrb	r3, [r3, #0]
 800e1b6:	009b      	lsls	r3, r3, #2
 800e1b8:	4413      	add	r3, r2
 800e1ba:	881b      	ldrh	r3, [r3, #0]
 800e1bc:	b29b      	uxth	r3, r3
 800e1be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e1c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e1c6:	817b      	strh	r3, [r7, #10]
 800e1c8:	687a      	ldr	r2, [r7, #4]
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	781b      	ldrb	r3, [r3, #0]
 800e1ce:	009b      	lsls	r3, r3, #2
 800e1d0:	441a      	add	r2, r3
 800e1d2:	897b      	ldrh	r3, [r7, #10]
 800e1d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e1d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e1dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e1e0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e1e4:	b29b      	uxth	r3, r3
 800e1e6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e1e8:	687a      	ldr	r2, [r7, #4]
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	781b      	ldrb	r3, [r3, #0]
 800e1ee:	009b      	lsls	r3, r3, #2
 800e1f0:	4413      	add	r3, r2
 800e1f2:	881b      	ldrh	r3, [r3, #0]
 800e1f4:	b29b      	uxth	r3, r3
 800e1f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e1fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e1fe:	813b      	strh	r3, [r7, #8]
 800e200:	687a      	ldr	r2, [r7, #4]
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	781b      	ldrb	r3, [r3, #0]
 800e206:	009b      	lsls	r3, r3, #2
 800e208:	441a      	add	r2, r3
 800e20a:	893b      	ldrh	r3, [r7, #8]
 800e20c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e210:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e214:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e218:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e21c:	b29b      	uxth	r3, r3
 800e21e:	8013      	strh	r3, [r2, #0]
 800e220:	e192      	b.n	800e548 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e222:	687a      	ldr	r2, [r7, #4]
 800e224:	683b      	ldr	r3, [r7, #0]
 800e226:	781b      	ldrb	r3, [r3, #0]
 800e228:	009b      	lsls	r3, r3, #2
 800e22a:	4413      	add	r3, r2
 800e22c:	881b      	ldrh	r3, [r3, #0]
 800e22e:	827b      	strh	r3, [r7, #18]
 800e230:	8a7b      	ldrh	r3, [r7, #18]
 800e232:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e236:	2b00      	cmp	r3, #0
 800e238:	d01b      	beq.n	800e272 <USB_DeactivateEndpoint+0xf6>
 800e23a:	687a      	ldr	r2, [r7, #4]
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	781b      	ldrb	r3, [r3, #0]
 800e240:	009b      	lsls	r3, r3, #2
 800e242:	4413      	add	r3, r2
 800e244:	881b      	ldrh	r3, [r3, #0]
 800e246:	b29b      	uxth	r3, r3
 800e248:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e24c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e250:	823b      	strh	r3, [r7, #16]
 800e252:	687a      	ldr	r2, [r7, #4]
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	781b      	ldrb	r3, [r3, #0]
 800e258:	009b      	lsls	r3, r3, #2
 800e25a:	441a      	add	r2, r3
 800e25c:	8a3b      	ldrh	r3, [r7, #16]
 800e25e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e262:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e266:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e26a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e26e:	b29b      	uxth	r3, r3
 800e270:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e272:	687a      	ldr	r2, [r7, #4]
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	781b      	ldrb	r3, [r3, #0]
 800e278:	009b      	lsls	r3, r3, #2
 800e27a:	4413      	add	r3, r2
 800e27c:	881b      	ldrh	r3, [r3, #0]
 800e27e:	b29b      	uxth	r3, r3
 800e280:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e284:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e288:	81fb      	strh	r3, [r7, #14]
 800e28a:	687a      	ldr	r2, [r7, #4]
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	781b      	ldrb	r3, [r3, #0]
 800e290:	009b      	lsls	r3, r3, #2
 800e292:	441a      	add	r2, r3
 800e294:	89fb      	ldrh	r3, [r7, #14]
 800e296:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e29a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e29e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e2a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e2a6:	b29b      	uxth	r3, r3
 800e2a8:	8013      	strh	r3, [r2, #0]
 800e2aa:	e14d      	b.n	800e548 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	785b      	ldrb	r3, [r3, #1]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	f040 80a5 	bne.w	800e400 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e2b6:	687a      	ldr	r2, [r7, #4]
 800e2b8:	683b      	ldr	r3, [r7, #0]
 800e2ba:	781b      	ldrb	r3, [r3, #0]
 800e2bc:	009b      	lsls	r3, r3, #2
 800e2be:	4413      	add	r3, r2
 800e2c0:	881b      	ldrh	r3, [r3, #0]
 800e2c2:	843b      	strh	r3, [r7, #32]
 800e2c4:	8c3b      	ldrh	r3, [r7, #32]
 800e2c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d01b      	beq.n	800e306 <USB_DeactivateEndpoint+0x18a>
 800e2ce:	687a      	ldr	r2, [r7, #4]
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	781b      	ldrb	r3, [r3, #0]
 800e2d4:	009b      	lsls	r3, r3, #2
 800e2d6:	4413      	add	r3, r2
 800e2d8:	881b      	ldrh	r3, [r3, #0]
 800e2da:	b29b      	uxth	r3, r3
 800e2dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e2e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e2e4:	83fb      	strh	r3, [r7, #30]
 800e2e6:	687a      	ldr	r2, [r7, #4]
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	781b      	ldrb	r3, [r3, #0]
 800e2ec:	009b      	lsls	r3, r3, #2
 800e2ee:	441a      	add	r2, r3
 800e2f0:	8bfb      	ldrh	r3, [r7, #30]
 800e2f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e2f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e2fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e2fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e302:	b29b      	uxth	r3, r3
 800e304:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e306:	687a      	ldr	r2, [r7, #4]
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	781b      	ldrb	r3, [r3, #0]
 800e30c:	009b      	lsls	r3, r3, #2
 800e30e:	4413      	add	r3, r2
 800e310:	881b      	ldrh	r3, [r3, #0]
 800e312:	83bb      	strh	r3, [r7, #28]
 800e314:	8bbb      	ldrh	r3, [r7, #28]
 800e316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d01b      	beq.n	800e356 <USB_DeactivateEndpoint+0x1da>
 800e31e:	687a      	ldr	r2, [r7, #4]
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	781b      	ldrb	r3, [r3, #0]
 800e324:	009b      	lsls	r3, r3, #2
 800e326:	4413      	add	r3, r2
 800e328:	881b      	ldrh	r3, [r3, #0]
 800e32a:	b29b      	uxth	r3, r3
 800e32c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e330:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e334:	837b      	strh	r3, [r7, #26]
 800e336:	687a      	ldr	r2, [r7, #4]
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	781b      	ldrb	r3, [r3, #0]
 800e33c:	009b      	lsls	r3, r3, #2
 800e33e:	441a      	add	r2, r3
 800e340:	8b7b      	ldrh	r3, [r7, #26]
 800e342:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e346:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e34a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e34e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e352:	b29b      	uxth	r3, r3
 800e354:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800e356:	687a      	ldr	r2, [r7, #4]
 800e358:	683b      	ldr	r3, [r7, #0]
 800e35a:	781b      	ldrb	r3, [r3, #0]
 800e35c:	009b      	lsls	r3, r3, #2
 800e35e:	4413      	add	r3, r2
 800e360:	881b      	ldrh	r3, [r3, #0]
 800e362:	b29b      	uxth	r3, r3
 800e364:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e368:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e36c:	833b      	strh	r3, [r7, #24]
 800e36e:	687a      	ldr	r2, [r7, #4]
 800e370:	683b      	ldr	r3, [r7, #0]
 800e372:	781b      	ldrb	r3, [r3, #0]
 800e374:	009b      	lsls	r3, r3, #2
 800e376:	441a      	add	r2, r3
 800e378:	8b3b      	ldrh	r3, [r7, #24]
 800e37a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e37e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e382:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e386:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e38a:	b29b      	uxth	r3, r3
 800e38c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e38e:	687a      	ldr	r2, [r7, #4]
 800e390:	683b      	ldr	r3, [r7, #0]
 800e392:	781b      	ldrb	r3, [r3, #0]
 800e394:	009b      	lsls	r3, r3, #2
 800e396:	4413      	add	r3, r2
 800e398:	881b      	ldrh	r3, [r3, #0]
 800e39a:	b29b      	uxth	r3, r3
 800e39c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e3a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e3a4:	82fb      	strh	r3, [r7, #22]
 800e3a6:	687a      	ldr	r2, [r7, #4]
 800e3a8:	683b      	ldr	r3, [r7, #0]
 800e3aa:	781b      	ldrb	r3, [r3, #0]
 800e3ac:	009b      	lsls	r3, r3, #2
 800e3ae:	441a      	add	r2, r3
 800e3b0:	8afb      	ldrh	r3, [r7, #22]
 800e3b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e3b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e3ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e3be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3c2:	b29b      	uxth	r3, r3
 800e3c4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e3c6:	687a      	ldr	r2, [r7, #4]
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	781b      	ldrb	r3, [r3, #0]
 800e3cc:	009b      	lsls	r3, r3, #2
 800e3ce:	4413      	add	r3, r2
 800e3d0:	881b      	ldrh	r3, [r3, #0]
 800e3d2:	b29b      	uxth	r3, r3
 800e3d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e3d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e3dc:	82bb      	strh	r3, [r7, #20]
 800e3de:	687a      	ldr	r2, [r7, #4]
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	781b      	ldrb	r3, [r3, #0]
 800e3e4:	009b      	lsls	r3, r3, #2
 800e3e6:	441a      	add	r2, r3
 800e3e8:	8abb      	ldrh	r3, [r7, #20]
 800e3ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e3ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e3f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e3f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3fa:	b29b      	uxth	r3, r3
 800e3fc:	8013      	strh	r3, [r2, #0]
 800e3fe:	e0a3      	b.n	800e548 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e400:	687a      	ldr	r2, [r7, #4]
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	781b      	ldrb	r3, [r3, #0]
 800e406:	009b      	lsls	r3, r3, #2
 800e408:	4413      	add	r3, r2
 800e40a:	881b      	ldrh	r3, [r3, #0]
 800e40c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800e40e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e410:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e414:	2b00      	cmp	r3, #0
 800e416:	d01b      	beq.n	800e450 <USB_DeactivateEndpoint+0x2d4>
 800e418:	687a      	ldr	r2, [r7, #4]
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	781b      	ldrb	r3, [r3, #0]
 800e41e:	009b      	lsls	r3, r3, #2
 800e420:	4413      	add	r3, r2
 800e422:	881b      	ldrh	r3, [r3, #0]
 800e424:	b29b      	uxth	r3, r3
 800e426:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e42a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e42e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800e430:	687a      	ldr	r2, [r7, #4]
 800e432:	683b      	ldr	r3, [r7, #0]
 800e434:	781b      	ldrb	r3, [r3, #0]
 800e436:	009b      	lsls	r3, r3, #2
 800e438:	441a      	add	r2, r3
 800e43a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800e43c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e440:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e444:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e448:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e44c:	b29b      	uxth	r3, r3
 800e44e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e450:	687a      	ldr	r2, [r7, #4]
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	781b      	ldrb	r3, [r3, #0]
 800e456:	009b      	lsls	r3, r3, #2
 800e458:	4413      	add	r3, r2
 800e45a:	881b      	ldrh	r3, [r3, #0]
 800e45c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800e45e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e464:	2b00      	cmp	r3, #0
 800e466:	d01b      	beq.n	800e4a0 <USB_DeactivateEndpoint+0x324>
 800e468:	687a      	ldr	r2, [r7, #4]
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	781b      	ldrb	r3, [r3, #0]
 800e46e:	009b      	lsls	r3, r3, #2
 800e470:	4413      	add	r3, r2
 800e472:	881b      	ldrh	r3, [r3, #0]
 800e474:	b29b      	uxth	r3, r3
 800e476:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e47a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e47e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e480:	687a      	ldr	r2, [r7, #4]
 800e482:	683b      	ldr	r3, [r7, #0]
 800e484:	781b      	ldrb	r3, [r3, #0]
 800e486:	009b      	lsls	r3, r3, #2
 800e488:	441a      	add	r2, r3
 800e48a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e48c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e490:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e494:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e498:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e49c:	b29b      	uxth	r3, r3
 800e49e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800e4a0:	687a      	ldr	r2, [r7, #4]
 800e4a2:	683b      	ldr	r3, [r7, #0]
 800e4a4:	781b      	ldrb	r3, [r3, #0]
 800e4a6:	009b      	lsls	r3, r3, #2
 800e4a8:	4413      	add	r3, r2
 800e4aa:	881b      	ldrh	r3, [r3, #0]
 800e4ac:	b29b      	uxth	r3, r3
 800e4ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e4b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e4b6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e4b8:	687a      	ldr	r2, [r7, #4]
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	781b      	ldrb	r3, [r3, #0]
 800e4be:	009b      	lsls	r3, r3, #2
 800e4c0:	441a      	add	r2, r3
 800e4c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e4c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e4c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e4cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e4d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e4d4:	b29b      	uxth	r3, r3
 800e4d6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e4d8:	687a      	ldr	r2, [r7, #4]
 800e4da:	683b      	ldr	r3, [r7, #0]
 800e4dc:	781b      	ldrb	r3, [r3, #0]
 800e4de:	009b      	lsls	r3, r3, #2
 800e4e0:	4413      	add	r3, r2
 800e4e2:	881b      	ldrh	r3, [r3, #0]
 800e4e4:	b29b      	uxth	r3, r3
 800e4e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e4ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e4ee:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800e4f0:	687a      	ldr	r2, [r7, #4]
 800e4f2:	683b      	ldr	r3, [r7, #0]
 800e4f4:	781b      	ldrb	r3, [r3, #0]
 800e4f6:	009b      	lsls	r3, r3, #2
 800e4f8:	441a      	add	r2, r3
 800e4fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e4fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e500:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e504:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e508:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e50c:	b29b      	uxth	r3, r3
 800e50e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e510:	687a      	ldr	r2, [r7, #4]
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	781b      	ldrb	r3, [r3, #0]
 800e516:	009b      	lsls	r3, r3, #2
 800e518:	4413      	add	r3, r2
 800e51a:	881b      	ldrh	r3, [r3, #0]
 800e51c:	b29b      	uxth	r3, r3
 800e51e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e522:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e526:	847b      	strh	r3, [r7, #34]	@ 0x22
 800e528:	687a      	ldr	r2, [r7, #4]
 800e52a:	683b      	ldr	r3, [r7, #0]
 800e52c:	781b      	ldrb	r3, [r3, #0]
 800e52e:	009b      	lsls	r3, r3, #2
 800e530:	441a      	add	r2, r3
 800e532:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e534:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e538:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e53c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e540:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e544:	b29b      	uxth	r3, r3
 800e546:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800e548:	2300      	movs	r3, #0
}
 800e54a:	4618      	mov	r0, r3
 800e54c:	3734      	adds	r7, #52	@ 0x34
 800e54e:	46bd      	mov	sp, r7
 800e550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e554:	4770      	bx	lr

0800e556 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e556:	b580      	push	{r7, lr}
 800e558:	b0c2      	sub	sp, #264	@ 0x108
 800e55a:	af00      	add	r7, sp, #0
 800e55c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e560:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e564:	6018      	str	r0, [r3, #0]
 800e566:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e56a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e56e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e574:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	785b      	ldrb	r3, [r3, #1]
 800e57c:	2b01      	cmp	r3, #1
 800e57e:	f040 86b7 	bne.w	800f2f0 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800e582:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e586:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	699a      	ldr	r2, [r3, #24]
 800e58e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e592:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	691b      	ldr	r3, [r3, #16]
 800e59a:	429a      	cmp	r2, r3
 800e59c:	d908      	bls.n	800e5b0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800e59e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	691b      	ldr	r3, [r3, #16]
 800e5aa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800e5ae:	e007      	b.n	800e5c0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800e5b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	699b      	ldr	r3, [r3, #24]
 800e5bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800e5c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	7b1b      	ldrb	r3, [r3, #12]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d13a      	bne.n	800e646 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800e5d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	6959      	ldr	r1, [r3, #20]
 800e5dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	88da      	ldrh	r2, [r3, #6]
 800e5e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5ec:	b29b      	uxth	r3, r3
 800e5ee:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800e5f2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800e5f6:	6800      	ldr	r0, [r0, #0]
 800e5f8:	f001 fc98 	bl	800ff2c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e5fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e600:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	613b      	str	r3, [r7, #16]
 800e608:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e60c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e616:	b29b      	uxth	r3, r3
 800e618:	461a      	mov	r2, r3
 800e61a:	693b      	ldr	r3, [r7, #16]
 800e61c:	4413      	add	r3, r2
 800e61e:	613b      	str	r3, [r7, #16]
 800e620:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e624:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	781b      	ldrb	r3, [r3, #0]
 800e62c:	00da      	lsls	r2, r3, #3
 800e62e:	693b      	ldr	r3, [r7, #16]
 800e630:	4413      	add	r3, r2
 800e632:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e636:	60fb      	str	r3, [r7, #12]
 800e638:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e63c:	b29a      	uxth	r2, r3
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	801a      	strh	r2, [r3, #0]
 800e642:	f000 be1f 	b.w	800f284 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800e646:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e64a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	78db      	ldrb	r3, [r3, #3]
 800e652:	2b02      	cmp	r3, #2
 800e654:	f040 8462 	bne.w	800ef1c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800e658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e65c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	6a1a      	ldr	r2, [r3, #32]
 800e664:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e668:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	691b      	ldr	r3, [r3, #16]
 800e670:	429a      	cmp	r2, r3
 800e672:	f240 83df 	bls.w	800ee34 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800e676:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e67a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e67e:	681a      	ldr	r2, [r3, #0]
 800e680:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e684:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	781b      	ldrb	r3, [r3, #0]
 800e68c:	009b      	lsls	r3, r3, #2
 800e68e:	4413      	add	r3, r2
 800e690:	881b      	ldrh	r3, [r3, #0]
 800e692:	b29b      	uxth	r3, r3
 800e694:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e698:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e69c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800e6a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e6a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e6a8:	681a      	ldr	r2, [r3, #0]
 800e6aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e6ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	781b      	ldrb	r3, [r3, #0]
 800e6b6:	009b      	lsls	r3, r3, #2
 800e6b8:	441a      	add	r2, r3
 800e6ba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800e6be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e6c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e6c6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800e6ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e6ce:	b29b      	uxth	r3, r3
 800e6d0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800e6d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e6d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	6a1a      	ldr	r2, [r3, #32]
 800e6de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6e2:	1ad2      	subs	r2, r2, r3
 800e6e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e6e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e6f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e6f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e6f8:	681a      	ldr	r2, [r3, #0]
 800e6fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e6fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	781b      	ldrb	r3, [r3, #0]
 800e706:	009b      	lsls	r3, r3, #2
 800e708:	4413      	add	r3, r2
 800e70a:	881b      	ldrh	r3, [r3, #0]
 800e70c:	b29b      	uxth	r3, r3
 800e70e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e712:	2b00      	cmp	r3, #0
 800e714:	f000 81c7 	beq.w	800eaa6 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e718:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e71c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	633b      	str	r3, [r7, #48]	@ 0x30
 800e724:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e728:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	785b      	ldrb	r3, [r3, #1]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d177      	bne.n	800e824 <USB_EPStartXfer+0x2ce>
 800e734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e738:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e740:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e744:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e74e:	b29b      	uxth	r3, r3
 800e750:	461a      	mov	r2, r3
 800e752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e754:	4413      	add	r3, r2
 800e756:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e758:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e75c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	781b      	ldrb	r3, [r3, #0]
 800e764:	00da      	lsls	r2, r3, #3
 800e766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e768:	4413      	add	r3, r2
 800e76a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e76e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e772:	881b      	ldrh	r3, [r3, #0]
 800e774:	b29b      	uxth	r3, r3
 800e776:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e77a:	b29a      	uxth	r2, r3
 800e77c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e77e:	801a      	strh	r2, [r3, #0]
 800e780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e784:	2b3e      	cmp	r3, #62	@ 0x3e
 800e786:	d921      	bls.n	800e7cc <USB_EPStartXfer+0x276>
 800e788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e78c:	095b      	lsrs	r3, r3, #5
 800e78e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800e792:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e796:	f003 031f 	and.w	r3, r3, #31
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d104      	bne.n	800e7a8 <USB_EPStartXfer+0x252>
 800e79e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800e7a2:	3b01      	subs	r3, #1
 800e7a4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800e7a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7aa:	881b      	ldrh	r3, [r3, #0]
 800e7ac:	b29a      	uxth	r2, r3
 800e7ae:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800e7b2:	b29b      	uxth	r3, r3
 800e7b4:	029b      	lsls	r3, r3, #10
 800e7b6:	b29b      	uxth	r3, r3
 800e7b8:	4313      	orrs	r3, r2
 800e7ba:	b29b      	uxth	r3, r3
 800e7bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e7c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e7c4:	b29a      	uxth	r2, r3
 800e7c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7c8:	801a      	strh	r2, [r3, #0]
 800e7ca:	e050      	b.n	800e86e <USB_EPStartXfer+0x318>
 800e7cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d10a      	bne.n	800e7ea <USB_EPStartXfer+0x294>
 800e7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7d6:	881b      	ldrh	r3, [r3, #0]
 800e7d8:	b29b      	uxth	r3, r3
 800e7da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e7de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e7e2:	b29a      	uxth	r2, r3
 800e7e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7e6:	801a      	strh	r2, [r3, #0]
 800e7e8:	e041      	b.n	800e86e <USB_EPStartXfer+0x318>
 800e7ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7ee:	085b      	lsrs	r3, r3, #1
 800e7f0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800e7f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7f8:	f003 0301 	and.w	r3, r3, #1
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d004      	beq.n	800e80a <USB_EPStartXfer+0x2b4>
 800e800:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800e804:	3301      	adds	r3, #1
 800e806:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800e80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e80c:	881b      	ldrh	r3, [r3, #0]
 800e80e:	b29a      	uxth	r2, r3
 800e810:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800e814:	b29b      	uxth	r3, r3
 800e816:	029b      	lsls	r3, r3, #10
 800e818:	b29b      	uxth	r3, r3
 800e81a:	4313      	orrs	r3, r2
 800e81c:	b29a      	uxth	r2, r3
 800e81e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e820:	801a      	strh	r2, [r3, #0]
 800e822:	e024      	b.n	800e86e <USB_EPStartXfer+0x318>
 800e824:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e828:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	785b      	ldrb	r3, [r3, #1]
 800e830:	2b01      	cmp	r3, #1
 800e832:	d11c      	bne.n	800e86e <USB_EPStartXfer+0x318>
 800e834:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e838:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e842:	b29b      	uxth	r3, r3
 800e844:	461a      	mov	r2, r3
 800e846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e848:	4413      	add	r3, r2
 800e84a:	633b      	str	r3, [r7, #48]	@ 0x30
 800e84c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e850:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	781b      	ldrb	r3, [r3, #0]
 800e858:	00da      	lsls	r2, r3, #3
 800e85a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e85c:	4413      	add	r3, r2
 800e85e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e862:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e864:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e868:	b29a      	uxth	r2, r3
 800e86a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e86c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800e86e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e872:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	895b      	ldrh	r3, [r3, #10]
 800e87a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e87e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e882:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	6959      	ldr	r1, [r3, #20]
 800e88a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e88e:	b29b      	uxth	r3, r3
 800e890:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e894:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800e898:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800e89c:	6800      	ldr	r0, [r0, #0]
 800e89e:	f001 fb45 	bl	800ff2c <USB_WritePMA>
            ep->xfer_buff += len;
 800e8a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e8a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	695a      	ldr	r2, [r3, #20]
 800e8ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8b2:	441a      	add	r2, r3
 800e8b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e8b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e8c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e8c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	6a1a      	ldr	r2, [r3, #32]
 800e8cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e8d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	691b      	ldr	r3, [r3, #16]
 800e8d8:	429a      	cmp	r2, r3
 800e8da:	d90f      	bls.n	800e8fc <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800e8dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e8e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	6a1a      	ldr	r2, [r3, #32]
 800e8e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8ec:	1ad2      	subs	r2, r2, r3
 800e8ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e8f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	621a      	str	r2, [r3, #32]
 800e8fa:	e00e      	b.n	800e91a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800e8fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e900:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	6a1b      	ldr	r3, [r3, #32]
 800e908:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800e90c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e910:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	2200      	movs	r2, #0
 800e918:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e91a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e91e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	785b      	ldrb	r3, [r3, #1]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d177      	bne.n	800ea1a <USB_EPStartXfer+0x4c4>
 800e92a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e92e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	61bb      	str	r3, [r7, #24]
 800e936:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e93a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e944:	b29b      	uxth	r3, r3
 800e946:	461a      	mov	r2, r3
 800e948:	69bb      	ldr	r3, [r7, #24]
 800e94a:	4413      	add	r3, r2
 800e94c:	61bb      	str	r3, [r7, #24]
 800e94e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e952:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	781b      	ldrb	r3, [r3, #0]
 800e95a:	00da      	lsls	r2, r3, #3
 800e95c:	69bb      	ldr	r3, [r7, #24]
 800e95e:	4413      	add	r3, r2
 800e960:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e964:	617b      	str	r3, [r7, #20]
 800e966:	697b      	ldr	r3, [r7, #20]
 800e968:	881b      	ldrh	r3, [r3, #0]
 800e96a:	b29b      	uxth	r3, r3
 800e96c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e970:	b29a      	uxth	r2, r3
 800e972:	697b      	ldr	r3, [r7, #20]
 800e974:	801a      	strh	r2, [r3, #0]
 800e976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e97a:	2b3e      	cmp	r3, #62	@ 0x3e
 800e97c:	d921      	bls.n	800e9c2 <USB_EPStartXfer+0x46c>
 800e97e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e982:	095b      	lsrs	r3, r3, #5
 800e984:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800e988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e98c:	f003 031f 	and.w	r3, r3, #31
 800e990:	2b00      	cmp	r3, #0
 800e992:	d104      	bne.n	800e99e <USB_EPStartXfer+0x448>
 800e994:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e998:	3b01      	subs	r3, #1
 800e99a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800e99e:	697b      	ldr	r3, [r7, #20]
 800e9a0:	881b      	ldrh	r3, [r3, #0]
 800e9a2:	b29a      	uxth	r2, r3
 800e9a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e9a8:	b29b      	uxth	r3, r3
 800e9aa:	029b      	lsls	r3, r3, #10
 800e9ac:	b29b      	uxth	r3, r3
 800e9ae:	4313      	orrs	r3, r2
 800e9b0:	b29b      	uxth	r3, r3
 800e9b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e9b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e9ba:	b29a      	uxth	r2, r3
 800e9bc:	697b      	ldr	r3, [r7, #20]
 800e9be:	801a      	strh	r2, [r3, #0]
 800e9c0:	e056      	b.n	800ea70 <USB_EPStartXfer+0x51a>
 800e9c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d10a      	bne.n	800e9e0 <USB_EPStartXfer+0x48a>
 800e9ca:	697b      	ldr	r3, [r7, #20]
 800e9cc:	881b      	ldrh	r3, [r3, #0]
 800e9ce:	b29b      	uxth	r3, r3
 800e9d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e9d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e9d8:	b29a      	uxth	r2, r3
 800e9da:	697b      	ldr	r3, [r7, #20]
 800e9dc:	801a      	strh	r2, [r3, #0]
 800e9de:	e047      	b.n	800ea70 <USB_EPStartXfer+0x51a>
 800e9e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9e4:	085b      	lsrs	r3, r3, #1
 800e9e6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800e9ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9ee:	f003 0301 	and.w	r3, r3, #1
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d004      	beq.n	800ea00 <USB_EPStartXfer+0x4aa>
 800e9f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e9fa:	3301      	adds	r3, #1
 800e9fc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ea00:	697b      	ldr	r3, [r7, #20]
 800ea02:	881b      	ldrh	r3, [r3, #0]
 800ea04:	b29a      	uxth	r2, r3
 800ea06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ea0a:	b29b      	uxth	r3, r3
 800ea0c:	029b      	lsls	r3, r3, #10
 800ea0e:	b29b      	uxth	r3, r3
 800ea10:	4313      	orrs	r3, r2
 800ea12:	b29a      	uxth	r2, r3
 800ea14:	697b      	ldr	r3, [r7, #20]
 800ea16:	801a      	strh	r2, [r3, #0]
 800ea18:	e02a      	b.n	800ea70 <USB_EPStartXfer+0x51a>
 800ea1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ea1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	785b      	ldrb	r3, [r3, #1]
 800ea26:	2b01      	cmp	r3, #1
 800ea28:	d122      	bne.n	800ea70 <USB_EPStartXfer+0x51a>
 800ea2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ea2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	623b      	str	r3, [r7, #32]
 800ea36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ea3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ea44:	b29b      	uxth	r3, r3
 800ea46:	461a      	mov	r2, r3
 800ea48:	6a3b      	ldr	r3, [r7, #32]
 800ea4a:	4413      	add	r3, r2
 800ea4c:	623b      	str	r3, [r7, #32]
 800ea4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ea52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	781b      	ldrb	r3, [r3, #0]
 800ea5a:	00da      	lsls	r2, r3, #3
 800ea5c:	6a3b      	ldr	r3, [r7, #32]
 800ea5e:	4413      	add	r3, r2
 800ea60:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ea64:	61fb      	str	r3, [r7, #28]
 800ea66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea6a:	b29a      	uxth	r2, r3
 800ea6c:	69fb      	ldr	r3, [r7, #28]
 800ea6e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ea70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ea74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	891b      	ldrh	r3, [r3, #8]
 800ea7c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ea80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ea84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	6959      	ldr	r1, [r3, #20]
 800ea8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea90:	b29b      	uxth	r3, r3
 800ea92:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ea96:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ea9a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ea9e:	6800      	ldr	r0, [r0, #0]
 800eaa0:	f001 fa44 	bl	800ff2c <USB_WritePMA>
 800eaa4:	e3ee      	b.n	800f284 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800eaa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eaaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	785b      	ldrb	r3, [r3, #1]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d177      	bne.n	800eba6 <USB_EPStartXfer+0x650>
 800eab6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eaba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eac2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eac6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ead0:	b29b      	uxth	r3, r3
 800ead2:	461a      	mov	r2, r3
 800ead4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ead6:	4413      	add	r3, r2
 800ead8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eada:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eade:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	781b      	ldrb	r3, [r3, #0]
 800eae6:	00da      	lsls	r2, r3, #3
 800eae8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eaea:	4413      	add	r3, r2
 800eaec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800eaf0:	647b      	str	r3, [r7, #68]	@ 0x44
 800eaf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eaf4:	881b      	ldrh	r3, [r3, #0]
 800eaf6:	b29b      	uxth	r3, r3
 800eaf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800eafc:	b29a      	uxth	r2, r3
 800eafe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb00:	801a      	strh	r2, [r3, #0]
 800eb02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb06:	2b3e      	cmp	r3, #62	@ 0x3e
 800eb08:	d921      	bls.n	800eb4e <USB_EPStartXfer+0x5f8>
 800eb0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb0e:	095b      	lsrs	r3, r3, #5
 800eb10:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800eb14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb18:	f003 031f 	and.w	r3, r3, #31
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d104      	bne.n	800eb2a <USB_EPStartXfer+0x5d4>
 800eb20:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800eb24:	3b01      	subs	r3, #1
 800eb26:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800eb2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb2c:	881b      	ldrh	r3, [r3, #0]
 800eb2e:	b29a      	uxth	r2, r3
 800eb30:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800eb34:	b29b      	uxth	r3, r3
 800eb36:	029b      	lsls	r3, r3, #10
 800eb38:	b29b      	uxth	r3, r3
 800eb3a:	4313      	orrs	r3, r2
 800eb3c:	b29b      	uxth	r3, r3
 800eb3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eb42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eb46:	b29a      	uxth	r2, r3
 800eb48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb4a:	801a      	strh	r2, [r3, #0]
 800eb4c:	e056      	b.n	800ebfc <USB_EPStartXfer+0x6a6>
 800eb4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d10a      	bne.n	800eb6c <USB_EPStartXfer+0x616>
 800eb56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb58:	881b      	ldrh	r3, [r3, #0]
 800eb5a:	b29b      	uxth	r3, r3
 800eb5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eb60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eb64:	b29a      	uxth	r2, r3
 800eb66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb68:	801a      	strh	r2, [r3, #0]
 800eb6a:	e047      	b.n	800ebfc <USB_EPStartXfer+0x6a6>
 800eb6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb70:	085b      	lsrs	r3, r3, #1
 800eb72:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800eb76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb7a:	f003 0301 	and.w	r3, r3, #1
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d004      	beq.n	800eb8c <USB_EPStartXfer+0x636>
 800eb82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800eb86:	3301      	adds	r3, #1
 800eb88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800eb8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb8e:	881b      	ldrh	r3, [r3, #0]
 800eb90:	b29a      	uxth	r2, r3
 800eb92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800eb96:	b29b      	uxth	r3, r3
 800eb98:	029b      	lsls	r3, r3, #10
 800eb9a:	b29b      	uxth	r3, r3
 800eb9c:	4313      	orrs	r3, r2
 800eb9e:	b29a      	uxth	r2, r3
 800eba0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eba2:	801a      	strh	r2, [r3, #0]
 800eba4:	e02a      	b.n	800ebfc <USB_EPStartXfer+0x6a6>
 800eba6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ebaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	785b      	ldrb	r3, [r3, #1]
 800ebb2:	2b01      	cmp	r3, #1
 800ebb4:	d122      	bne.n	800ebfc <USB_EPStartXfer+0x6a6>
 800ebb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ebba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	653b      	str	r3, [r7, #80]	@ 0x50
 800ebc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ebc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ebd0:	b29b      	uxth	r3, r3
 800ebd2:	461a      	mov	r2, r3
 800ebd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ebd6:	4413      	add	r3, r2
 800ebd8:	653b      	str	r3, [r7, #80]	@ 0x50
 800ebda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ebde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	781b      	ldrb	r3, [r3, #0]
 800ebe6:	00da      	lsls	r2, r3, #3
 800ebe8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ebea:	4413      	add	r3, r2
 800ebec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ebf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ebf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebf6:	b29a      	uxth	r2, r3
 800ebf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ebfa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ebfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	891b      	ldrh	r3, [r3, #8]
 800ec08:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ec0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	6959      	ldr	r1, [r3, #20]
 800ec18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec1c:	b29b      	uxth	r3, r3
 800ec1e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ec22:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ec26:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ec2a:	6800      	ldr	r0, [r0, #0]
 800ec2c:	f001 f97e 	bl	800ff2c <USB_WritePMA>
            ep->xfer_buff += len;
 800ec30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	695a      	ldr	r2, [r3, #20]
 800ec3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec40:	441a      	add	r2, r3
 800ec42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ec4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	6a1a      	ldr	r2, [r3, #32]
 800ec5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	691b      	ldr	r3, [r3, #16]
 800ec66:	429a      	cmp	r2, r3
 800ec68:	d90f      	bls.n	800ec8a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800ec6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	6a1a      	ldr	r2, [r3, #32]
 800ec76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec7a:	1ad2      	subs	r2, r2, r3
 800ec7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	621a      	str	r2, [r3, #32]
 800ec88:	e00e      	b.n	800eca8 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800ec8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	6a1b      	ldr	r3, [r3, #32]
 800ec96:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800ec9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	2200      	movs	r2, #0
 800eca6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800eca8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ecac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	643b      	str	r3, [r7, #64]	@ 0x40
 800ecb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ecb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	785b      	ldrb	r3, [r3, #1]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d177      	bne.n	800edb4 <USB_EPStartXfer+0x85e>
 800ecc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ecc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ecd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ecd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ecde:	b29b      	uxth	r3, r3
 800ece0:	461a      	mov	r2, r3
 800ece2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ece4:	4413      	add	r3, r2
 800ece6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ece8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ecec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	781b      	ldrb	r3, [r3, #0]
 800ecf4:	00da      	lsls	r2, r3, #3
 800ecf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecf8:	4413      	add	r3, r2
 800ecfa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ecfe:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed02:	881b      	ldrh	r3, [r3, #0]
 800ed04:	b29b      	uxth	r3, r3
 800ed06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ed0a:	b29a      	uxth	r2, r3
 800ed0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed0e:	801a      	strh	r2, [r3, #0]
 800ed10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed14:	2b3e      	cmp	r3, #62	@ 0x3e
 800ed16:	d921      	bls.n	800ed5c <USB_EPStartXfer+0x806>
 800ed18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed1c:	095b      	lsrs	r3, r3, #5
 800ed1e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ed22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed26:	f003 031f 	and.w	r3, r3, #31
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d104      	bne.n	800ed38 <USB_EPStartXfer+0x7e2>
 800ed2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ed32:	3b01      	subs	r3, #1
 800ed34:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ed38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed3a:	881b      	ldrh	r3, [r3, #0]
 800ed3c:	b29a      	uxth	r2, r3
 800ed3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ed42:	b29b      	uxth	r3, r3
 800ed44:	029b      	lsls	r3, r3, #10
 800ed46:	b29b      	uxth	r3, r3
 800ed48:	4313      	orrs	r3, r2
 800ed4a:	b29b      	uxth	r3, r3
 800ed4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ed50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ed54:	b29a      	uxth	r2, r3
 800ed56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed58:	801a      	strh	r2, [r3, #0]
 800ed5a:	e050      	b.n	800edfe <USB_EPStartXfer+0x8a8>
 800ed5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d10a      	bne.n	800ed7a <USB_EPStartXfer+0x824>
 800ed64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed66:	881b      	ldrh	r3, [r3, #0]
 800ed68:	b29b      	uxth	r3, r3
 800ed6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ed6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ed72:	b29a      	uxth	r2, r3
 800ed74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed76:	801a      	strh	r2, [r3, #0]
 800ed78:	e041      	b.n	800edfe <USB_EPStartXfer+0x8a8>
 800ed7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed7e:	085b      	lsrs	r3, r3, #1
 800ed80:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ed84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed88:	f003 0301 	and.w	r3, r3, #1
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d004      	beq.n	800ed9a <USB_EPStartXfer+0x844>
 800ed90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ed94:	3301      	adds	r3, #1
 800ed96:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ed9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed9c:	881b      	ldrh	r3, [r3, #0]
 800ed9e:	b29a      	uxth	r2, r3
 800eda0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800eda4:	b29b      	uxth	r3, r3
 800eda6:	029b      	lsls	r3, r3, #10
 800eda8:	b29b      	uxth	r3, r3
 800edaa:	4313      	orrs	r3, r2
 800edac:	b29a      	uxth	r2, r3
 800edae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800edb0:	801a      	strh	r2, [r3, #0]
 800edb2:	e024      	b.n	800edfe <USB_EPStartXfer+0x8a8>
 800edb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800edb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	785b      	ldrb	r3, [r3, #1]
 800edc0:	2b01      	cmp	r3, #1
 800edc2:	d11c      	bne.n	800edfe <USB_EPStartXfer+0x8a8>
 800edc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800edc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800edd2:	b29b      	uxth	r3, r3
 800edd4:	461a      	mov	r2, r3
 800edd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800edd8:	4413      	add	r3, r2
 800edda:	643b      	str	r3, [r7, #64]	@ 0x40
 800eddc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ede0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	781b      	ldrb	r3, [r3, #0]
 800ede8:	00da      	lsls	r2, r3, #3
 800edea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800edec:	4413      	add	r3, r2
 800edee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800edf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800edf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800edf8:	b29a      	uxth	r2, r3
 800edfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800edfc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800edfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	895b      	ldrh	r3, [r3, #10]
 800ee0a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ee0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	6959      	ldr	r1, [r3, #20]
 800ee1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee1e:	b29b      	uxth	r3, r3
 800ee20:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ee24:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ee28:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ee2c:	6800      	ldr	r0, [r0, #0]
 800ee2e:	f001 f87d 	bl	800ff2c <USB_WritePMA>
 800ee32:	e227      	b.n	800f284 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800ee34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	6a1b      	ldr	r3, [r3, #32]
 800ee40:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800ee44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ee4c:	681a      	ldr	r2, [r3, #0]
 800ee4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	781b      	ldrb	r3, [r3, #0]
 800ee5a:	009b      	lsls	r3, r3, #2
 800ee5c:	4413      	add	r3, r2
 800ee5e:	881b      	ldrh	r3, [r3, #0]
 800ee60:	b29b      	uxth	r3, r3
 800ee62:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800ee66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ee6a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800ee6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ee76:	681a      	ldr	r2, [r3, #0]
 800ee78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	781b      	ldrb	r3, [r3, #0]
 800ee84:	009b      	lsls	r3, r3, #2
 800ee86:	441a      	add	r2, r3
 800ee88:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800ee8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ee90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ee94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ee98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ee9c:	b29b      	uxth	r3, r3
 800ee9e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800eea0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eea4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800eeac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eeb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800eeba:	b29b      	uxth	r3, r3
 800eebc:	461a      	mov	r2, r3
 800eebe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eec0:	4413      	add	r3, r2
 800eec2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800eec4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eec8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	781b      	ldrb	r3, [r3, #0]
 800eed0:	00da      	lsls	r2, r3, #3
 800eed2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eed4:	4413      	add	r3, r2
 800eed6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800eeda:	65bb      	str	r3, [r7, #88]	@ 0x58
 800eedc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eee0:	b29a      	uxth	r2, r3
 800eee2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eee4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800eee6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eeea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	891b      	ldrh	r3, [r3, #8]
 800eef2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800eef6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eefa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	6959      	ldr	r1, [r3, #20]
 800ef02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef06:	b29b      	uxth	r3, r3
 800ef08:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ef0c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ef10:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ef14:	6800      	ldr	r0, [r0, #0]
 800ef16:	f001 f809 	bl	800ff2c <USB_WritePMA>
 800ef1a:	e1b3      	b.n	800f284 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ef1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	6a1a      	ldr	r2, [r3, #32]
 800ef28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef2c:	1ad2      	subs	r2, r2, r3
 800ef2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ef3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ef42:	681a      	ldr	r2, [r3, #0]
 800ef44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	781b      	ldrb	r3, [r3, #0]
 800ef50:	009b      	lsls	r3, r3, #2
 800ef52:	4413      	add	r3, r2
 800ef54:	881b      	ldrh	r3, [r3, #0]
 800ef56:	b29b      	uxth	r3, r3
 800ef58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	f000 80c6 	beq.w	800f0ee <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ef62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	673b      	str	r3, [r7, #112]	@ 0x70
 800ef6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	785b      	ldrb	r3, [r3, #1]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d177      	bne.n	800f06e <USB_EPStartXfer+0xb18>
 800ef7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ef8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ef98:	b29b      	uxth	r3, r3
 800ef9a:	461a      	mov	r2, r3
 800ef9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ef9e:	4413      	add	r3, r2
 800efa0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800efa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800efa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	781b      	ldrb	r3, [r3, #0]
 800efae:	00da      	lsls	r2, r3, #3
 800efb0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800efb2:	4413      	add	r3, r2
 800efb4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800efb8:	667b      	str	r3, [r7, #100]	@ 0x64
 800efba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800efbc:	881b      	ldrh	r3, [r3, #0]
 800efbe:	b29b      	uxth	r3, r3
 800efc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800efc4:	b29a      	uxth	r2, r3
 800efc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800efc8:	801a      	strh	r2, [r3, #0]
 800efca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800efce:	2b3e      	cmp	r3, #62	@ 0x3e
 800efd0:	d921      	bls.n	800f016 <USB_EPStartXfer+0xac0>
 800efd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800efd6:	095b      	lsrs	r3, r3, #5
 800efd8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800efdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800efe0:	f003 031f 	and.w	r3, r3, #31
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d104      	bne.n	800eff2 <USB_EPStartXfer+0xa9c>
 800efe8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800efec:	3b01      	subs	r3, #1
 800efee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800eff2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eff4:	881b      	ldrh	r3, [r3, #0]
 800eff6:	b29a      	uxth	r2, r3
 800eff8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800effc:	b29b      	uxth	r3, r3
 800effe:	029b      	lsls	r3, r3, #10
 800f000:	b29b      	uxth	r3, r3
 800f002:	4313      	orrs	r3, r2
 800f004:	b29b      	uxth	r3, r3
 800f006:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f00a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f00e:	b29a      	uxth	r2, r3
 800f010:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f012:	801a      	strh	r2, [r3, #0]
 800f014:	e050      	b.n	800f0b8 <USB_EPStartXfer+0xb62>
 800f016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d10a      	bne.n	800f034 <USB_EPStartXfer+0xade>
 800f01e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f020:	881b      	ldrh	r3, [r3, #0]
 800f022:	b29b      	uxth	r3, r3
 800f024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f02c:	b29a      	uxth	r2, r3
 800f02e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f030:	801a      	strh	r2, [r3, #0]
 800f032:	e041      	b.n	800f0b8 <USB_EPStartXfer+0xb62>
 800f034:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f038:	085b      	lsrs	r3, r3, #1
 800f03a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800f03e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f042:	f003 0301 	and.w	r3, r3, #1
 800f046:	2b00      	cmp	r3, #0
 800f048:	d004      	beq.n	800f054 <USB_EPStartXfer+0xafe>
 800f04a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800f04e:	3301      	adds	r3, #1
 800f050:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800f054:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f056:	881b      	ldrh	r3, [r3, #0]
 800f058:	b29a      	uxth	r2, r3
 800f05a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800f05e:	b29b      	uxth	r3, r3
 800f060:	029b      	lsls	r3, r3, #10
 800f062:	b29b      	uxth	r3, r3
 800f064:	4313      	orrs	r3, r2
 800f066:	b29a      	uxth	r2, r3
 800f068:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f06a:	801a      	strh	r2, [r3, #0]
 800f06c:	e024      	b.n	800f0b8 <USB_EPStartXfer+0xb62>
 800f06e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f072:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	785b      	ldrb	r3, [r3, #1]
 800f07a:	2b01      	cmp	r3, #1
 800f07c:	d11c      	bne.n	800f0b8 <USB_EPStartXfer+0xb62>
 800f07e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f082:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f08c:	b29b      	uxth	r3, r3
 800f08e:	461a      	mov	r2, r3
 800f090:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f092:	4413      	add	r3, r2
 800f094:	673b      	str	r3, [r7, #112]	@ 0x70
 800f096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f09a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	781b      	ldrb	r3, [r3, #0]
 800f0a2:	00da      	lsls	r2, r3, #3
 800f0a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f0a6:	4413      	add	r3, r2
 800f0a8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f0ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f0ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f0b2:	b29a      	uxth	r2, r3
 800f0b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f0b6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800f0b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f0bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	895b      	ldrh	r3, [r3, #10]
 800f0c4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f0c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f0cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	6959      	ldr	r1, [r3, #20]
 800f0d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f0d8:	b29b      	uxth	r3, r3
 800f0da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800f0de:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800f0e2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800f0e6:	6800      	ldr	r0, [r0, #0]
 800f0e8:	f000 ff20 	bl	800ff2c <USB_WritePMA>
 800f0ec:	e0ca      	b.n	800f284 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f0ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f0f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	785b      	ldrb	r3, [r3, #1]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d177      	bne.n	800f1ee <USB_EPStartXfer+0xc98>
 800f0fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f102:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f10a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f10e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f118:	b29b      	uxth	r3, r3
 800f11a:	461a      	mov	r2, r3
 800f11c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f11e:	4413      	add	r3, r2
 800f120:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f122:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f126:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	781b      	ldrb	r3, [r3, #0]
 800f12e:	00da      	lsls	r2, r3, #3
 800f130:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f132:	4413      	add	r3, r2
 800f134:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f138:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f13a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f13c:	881b      	ldrh	r3, [r3, #0]
 800f13e:	b29b      	uxth	r3, r3
 800f140:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f144:	b29a      	uxth	r2, r3
 800f146:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f148:	801a      	strh	r2, [r3, #0]
 800f14a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f14e:	2b3e      	cmp	r3, #62	@ 0x3e
 800f150:	d921      	bls.n	800f196 <USB_EPStartXfer+0xc40>
 800f152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f156:	095b      	lsrs	r3, r3, #5
 800f158:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800f15c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f160:	f003 031f 	and.w	r3, r3, #31
 800f164:	2b00      	cmp	r3, #0
 800f166:	d104      	bne.n	800f172 <USB_EPStartXfer+0xc1c>
 800f168:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f16c:	3b01      	subs	r3, #1
 800f16e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800f172:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f174:	881b      	ldrh	r3, [r3, #0]
 800f176:	b29a      	uxth	r2, r3
 800f178:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f17c:	b29b      	uxth	r3, r3
 800f17e:	029b      	lsls	r3, r3, #10
 800f180:	b29b      	uxth	r3, r3
 800f182:	4313      	orrs	r3, r2
 800f184:	b29b      	uxth	r3, r3
 800f186:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f18a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f18e:	b29a      	uxth	r2, r3
 800f190:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f192:	801a      	strh	r2, [r3, #0]
 800f194:	e05c      	b.n	800f250 <USB_EPStartXfer+0xcfa>
 800f196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d10a      	bne.n	800f1b4 <USB_EPStartXfer+0xc5e>
 800f19e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f1a0:	881b      	ldrh	r3, [r3, #0]
 800f1a2:	b29b      	uxth	r3, r3
 800f1a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f1a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f1ac:	b29a      	uxth	r2, r3
 800f1ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f1b0:	801a      	strh	r2, [r3, #0]
 800f1b2:	e04d      	b.n	800f250 <USB_EPStartXfer+0xcfa>
 800f1b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f1b8:	085b      	lsrs	r3, r3, #1
 800f1ba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800f1be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f1c2:	f003 0301 	and.w	r3, r3, #1
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d004      	beq.n	800f1d4 <USB_EPStartXfer+0xc7e>
 800f1ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f1ce:	3301      	adds	r3, #1
 800f1d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800f1d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f1d6:	881b      	ldrh	r3, [r3, #0]
 800f1d8:	b29a      	uxth	r2, r3
 800f1da:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f1de:	b29b      	uxth	r3, r3
 800f1e0:	029b      	lsls	r3, r3, #10
 800f1e2:	b29b      	uxth	r3, r3
 800f1e4:	4313      	orrs	r3, r2
 800f1e6:	b29a      	uxth	r2, r3
 800f1e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f1ea:	801a      	strh	r2, [r3, #0]
 800f1ec:	e030      	b.n	800f250 <USB_EPStartXfer+0xcfa>
 800f1ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f1f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	785b      	ldrb	r3, [r3, #1]
 800f1fa:	2b01      	cmp	r3, #1
 800f1fc:	d128      	bne.n	800f250 <USB_EPStartXfer+0xcfa>
 800f1fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f202:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f20c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f210:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f21a:	b29b      	uxth	r3, r3
 800f21c:	461a      	mov	r2, r3
 800f21e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f222:	4413      	add	r3, r2
 800f224:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f228:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f22c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	781b      	ldrb	r3, [r3, #0]
 800f234:	00da      	lsls	r2, r3, #3
 800f236:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f23a:	4413      	add	r3, r2
 800f23c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f240:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f244:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f248:	b29a      	uxth	r2, r3
 800f24a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f24e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800f250:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f254:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	891b      	ldrh	r3, [r3, #8]
 800f25c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f260:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f264:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	6959      	ldr	r1, [r3, #20]
 800f26c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f270:	b29b      	uxth	r3, r3
 800f272:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800f276:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800f27a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800f27e:	6800      	ldr	r0, [r0, #0]
 800f280:	f000 fe54 	bl	800ff2c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800f284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f288:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f28c:	681a      	ldr	r2, [r3, #0]
 800f28e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f292:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	781b      	ldrb	r3, [r3, #0]
 800f29a:	009b      	lsls	r3, r3, #2
 800f29c:	4413      	add	r3, r2
 800f29e:	881b      	ldrh	r3, [r3, #0]
 800f2a0:	b29b      	uxth	r3, r3
 800f2a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f2a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f2aa:	817b      	strh	r3, [r7, #10]
 800f2ac:	897b      	ldrh	r3, [r7, #10]
 800f2ae:	f083 0310 	eor.w	r3, r3, #16
 800f2b2:	817b      	strh	r3, [r7, #10]
 800f2b4:	897b      	ldrh	r3, [r7, #10]
 800f2b6:	f083 0320 	eor.w	r3, r3, #32
 800f2ba:	817b      	strh	r3, [r7, #10]
 800f2bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f2c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f2c4:	681a      	ldr	r2, [r3, #0]
 800f2c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f2ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	781b      	ldrb	r3, [r3, #0]
 800f2d2:	009b      	lsls	r3, r3, #2
 800f2d4:	441a      	add	r2, r3
 800f2d6:	897b      	ldrh	r3, [r7, #10]
 800f2d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f2dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f2e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f2e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f2e8:	b29b      	uxth	r3, r3
 800f2ea:	8013      	strh	r3, [r2, #0]
 800f2ec:	f000 bcde 	b.w	800fcac <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800f2f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f2f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	7b1b      	ldrb	r3, [r3, #12]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	f040 80bb 	bne.w	800f478 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800f302:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f306:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	699a      	ldr	r2, [r3, #24]
 800f30e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f312:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	691b      	ldr	r3, [r3, #16]
 800f31a:	429a      	cmp	r2, r3
 800f31c:	d917      	bls.n	800f34e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800f31e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f322:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	691b      	ldr	r3, [r3, #16]
 800f32a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800f32e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f332:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	699a      	ldr	r2, [r3, #24]
 800f33a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f33e:	1ad2      	subs	r2, r2, r3
 800f340:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f344:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	619a      	str	r2, [r3, #24]
 800f34c:	e00e      	b.n	800f36c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800f34e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f352:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	699b      	ldr	r3, [r3, #24]
 800f35a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800f35e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f362:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	2200      	movs	r2, #0
 800f36a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800f36c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f370:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f37a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f37e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f388:	b29b      	uxth	r3, r3
 800f38a:	461a      	mov	r2, r3
 800f38c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f390:	4413      	add	r3, r2
 800f392:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f396:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f39a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	781b      	ldrb	r3, [r3, #0]
 800f3a2:	00da      	lsls	r2, r3, #3
 800f3a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f3a8:	4413      	add	r3, r2
 800f3aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f3ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f3b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f3b6:	881b      	ldrh	r3, [r3, #0]
 800f3b8:	b29b      	uxth	r3, r3
 800f3ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f3be:	b29a      	uxth	r2, r3
 800f3c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f3c4:	801a      	strh	r2, [r3, #0]
 800f3c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f3ca:	2b3e      	cmp	r3, #62	@ 0x3e
 800f3cc:	d924      	bls.n	800f418 <USB_EPStartXfer+0xec2>
 800f3ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f3d2:	095b      	lsrs	r3, r3, #5
 800f3d4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800f3d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f3dc:	f003 031f 	and.w	r3, r3, #31
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d104      	bne.n	800f3ee <USB_EPStartXfer+0xe98>
 800f3e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800f3e8:	3b01      	subs	r3, #1
 800f3ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800f3ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f3f2:	881b      	ldrh	r3, [r3, #0]
 800f3f4:	b29a      	uxth	r2, r3
 800f3f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800f3fa:	b29b      	uxth	r3, r3
 800f3fc:	029b      	lsls	r3, r3, #10
 800f3fe:	b29b      	uxth	r3, r3
 800f400:	4313      	orrs	r3, r2
 800f402:	b29b      	uxth	r3, r3
 800f404:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f408:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f40c:	b29a      	uxth	r2, r3
 800f40e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f412:	801a      	strh	r2, [r3, #0]
 800f414:	f000 bc10 	b.w	800fc38 <USB_EPStartXfer+0x16e2>
 800f418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d10c      	bne.n	800f43a <USB_EPStartXfer+0xee4>
 800f420:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f424:	881b      	ldrh	r3, [r3, #0]
 800f426:	b29b      	uxth	r3, r3
 800f428:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f42c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f430:	b29a      	uxth	r2, r3
 800f432:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f436:	801a      	strh	r2, [r3, #0]
 800f438:	e3fe      	b.n	800fc38 <USB_EPStartXfer+0x16e2>
 800f43a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f43e:	085b      	lsrs	r3, r3, #1
 800f440:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800f444:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f448:	f003 0301 	and.w	r3, r3, #1
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d004      	beq.n	800f45a <USB_EPStartXfer+0xf04>
 800f450:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800f454:	3301      	adds	r3, #1
 800f456:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800f45a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f45e:	881b      	ldrh	r3, [r3, #0]
 800f460:	b29a      	uxth	r2, r3
 800f462:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800f466:	b29b      	uxth	r3, r3
 800f468:	029b      	lsls	r3, r3, #10
 800f46a:	b29b      	uxth	r3, r3
 800f46c:	4313      	orrs	r3, r2
 800f46e:	b29a      	uxth	r2, r3
 800f470:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f474:	801a      	strh	r2, [r3, #0]
 800f476:	e3df      	b.n	800fc38 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800f478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f47c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	78db      	ldrb	r3, [r3, #3]
 800f484:	2b02      	cmp	r3, #2
 800f486:	f040 8218 	bne.w	800f8ba <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800f48a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f48e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	785b      	ldrb	r3, [r3, #1]
 800f496:	2b00      	cmp	r3, #0
 800f498:	f040 809d 	bne.w	800f5d6 <USB_EPStartXfer+0x1080>
 800f49c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f4a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f4aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f4ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f4b8:	b29b      	uxth	r3, r3
 800f4ba:	461a      	mov	r2, r3
 800f4bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f4c0:	4413      	add	r3, r2
 800f4c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f4c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f4ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	781b      	ldrb	r3, [r3, #0]
 800f4d2:	00da      	lsls	r2, r3, #3
 800f4d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f4d8:	4413      	add	r3, r2
 800f4da:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f4de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800f4e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f4e6:	881b      	ldrh	r3, [r3, #0]
 800f4e8:	b29b      	uxth	r3, r3
 800f4ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f4ee:	b29a      	uxth	r2, r3
 800f4f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f4f4:	801a      	strh	r2, [r3, #0]
 800f4f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f4fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	691b      	ldr	r3, [r3, #16]
 800f502:	2b3e      	cmp	r3, #62	@ 0x3e
 800f504:	d92b      	bls.n	800f55e <USB_EPStartXfer+0x1008>
 800f506:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f50a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	691b      	ldr	r3, [r3, #16]
 800f512:	095b      	lsrs	r3, r3, #5
 800f514:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800f518:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f51c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	691b      	ldr	r3, [r3, #16]
 800f524:	f003 031f 	and.w	r3, r3, #31
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d104      	bne.n	800f536 <USB_EPStartXfer+0xfe0>
 800f52c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f530:	3b01      	subs	r3, #1
 800f532:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800f536:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f53a:	881b      	ldrh	r3, [r3, #0]
 800f53c:	b29a      	uxth	r2, r3
 800f53e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f542:	b29b      	uxth	r3, r3
 800f544:	029b      	lsls	r3, r3, #10
 800f546:	b29b      	uxth	r3, r3
 800f548:	4313      	orrs	r3, r2
 800f54a:	b29b      	uxth	r3, r3
 800f54c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f550:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f554:	b29a      	uxth	r2, r3
 800f556:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f55a:	801a      	strh	r2, [r3, #0]
 800f55c:	e070      	b.n	800f640 <USB_EPStartXfer+0x10ea>
 800f55e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f562:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	691b      	ldr	r3, [r3, #16]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d10c      	bne.n	800f588 <USB_EPStartXfer+0x1032>
 800f56e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f572:	881b      	ldrh	r3, [r3, #0]
 800f574:	b29b      	uxth	r3, r3
 800f576:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f57a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f57e:	b29a      	uxth	r2, r3
 800f580:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f584:	801a      	strh	r2, [r3, #0]
 800f586:	e05b      	b.n	800f640 <USB_EPStartXfer+0x10ea>
 800f588:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f58c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	691b      	ldr	r3, [r3, #16]
 800f594:	085b      	lsrs	r3, r3, #1
 800f596:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800f59a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f59e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	691b      	ldr	r3, [r3, #16]
 800f5a6:	f003 0301 	and.w	r3, r3, #1
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d004      	beq.n	800f5b8 <USB_EPStartXfer+0x1062>
 800f5ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f5b2:	3301      	adds	r3, #1
 800f5b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800f5b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f5bc:	881b      	ldrh	r3, [r3, #0]
 800f5be:	b29a      	uxth	r2, r3
 800f5c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f5c4:	b29b      	uxth	r3, r3
 800f5c6:	029b      	lsls	r3, r3, #10
 800f5c8:	b29b      	uxth	r3, r3
 800f5ca:	4313      	orrs	r3, r2
 800f5cc:	b29a      	uxth	r2, r3
 800f5ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f5d2:	801a      	strh	r2, [r3, #0]
 800f5d4:	e034      	b.n	800f640 <USB_EPStartXfer+0x10ea>
 800f5d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f5da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	785b      	ldrb	r3, [r3, #1]
 800f5e2:	2b01      	cmp	r3, #1
 800f5e4:	d12c      	bne.n	800f640 <USB_EPStartXfer+0x10ea>
 800f5e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f5ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f5f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f5f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f602:	b29b      	uxth	r3, r3
 800f604:	461a      	mov	r2, r3
 800f606:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f60a:	4413      	add	r3, r2
 800f60c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f610:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f614:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	781b      	ldrb	r3, [r3, #0]
 800f61c:	00da      	lsls	r2, r3, #3
 800f61e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f622:	4413      	add	r3, r2
 800f624:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f628:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f62c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f630:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	691b      	ldr	r3, [r3, #16]
 800f638:	b29a      	uxth	r2, r3
 800f63a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800f63e:	801a      	strh	r2, [r3, #0]
 800f640:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f644:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800f64e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f652:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	785b      	ldrb	r3, [r3, #1]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	f040 809d 	bne.w	800f79a <USB_EPStartXfer+0x1244>
 800f660:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f664:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f66e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f672:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f67c:	b29b      	uxth	r3, r3
 800f67e:	461a      	mov	r2, r3
 800f680:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f684:	4413      	add	r3, r2
 800f686:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f68a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f68e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	781b      	ldrb	r3, [r3, #0]
 800f696:	00da      	lsls	r2, r3, #3
 800f698:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f69c:	4413      	add	r3, r2
 800f69e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f6a2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f6a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f6aa:	881b      	ldrh	r3, [r3, #0]
 800f6ac:	b29b      	uxth	r3, r3
 800f6ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f6b2:	b29a      	uxth	r2, r3
 800f6b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f6b8:	801a      	strh	r2, [r3, #0]
 800f6ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f6be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	691b      	ldr	r3, [r3, #16]
 800f6c6:	2b3e      	cmp	r3, #62	@ 0x3e
 800f6c8:	d92b      	bls.n	800f722 <USB_EPStartXfer+0x11cc>
 800f6ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f6ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	691b      	ldr	r3, [r3, #16]
 800f6d6:	095b      	lsrs	r3, r3, #5
 800f6d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800f6dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f6e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	691b      	ldr	r3, [r3, #16]
 800f6e8:	f003 031f 	and.w	r3, r3, #31
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d104      	bne.n	800f6fa <USB_EPStartXfer+0x11a4>
 800f6f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f6f4:	3b01      	subs	r3, #1
 800f6f6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800f6fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f6fe:	881b      	ldrh	r3, [r3, #0]
 800f700:	b29a      	uxth	r2, r3
 800f702:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f706:	b29b      	uxth	r3, r3
 800f708:	029b      	lsls	r3, r3, #10
 800f70a:	b29b      	uxth	r3, r3
 800f70c:	4313      	orrs	r3, r2
 800f70e:	b29b      	uxth	r3, r3
 800f710:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f714:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f718:	b29a      	uxth	r2, r3
 800f71a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f71e:	801a      	strh	r2, [r3, #0]
 800f720:	e069      	b.n	800f7f6 <USB_EPStartXfer+0x12a0>
 800f722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f726:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	691b      	ldr	r3, [r3, #16]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d10c      	bne.n	800f74c <USB_EPStartXfer+0x11f6>
 800f732:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f736:	881b      	ldrh	r3, [r3, #0]
 800f738:	b29b      	uxth	r3, r3
 800f73a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f73e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f742:	b29a      	uxth	r2, r3
 800f744:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f748:	801a      	strh	r2, [r3, #0]
 800f74a:	e054      	b.n	800f7f6 <USB_EPStartXfer+0x12a0>
 800f74c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f750:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	691b      	ldr	r3, [r3, #16]
 800f758:	085b      	lsrs	r3, r3, #1
 800f75a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800f75e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f762:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	691b      	ldr	r3, [r3, #16]
 800f76a:	f003 0301 	and.w	r3, r3, #1
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d004      	beq.n	800f77c <USB_EPStartXfer+0x1226>
 800f772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f776:	3301      	adds	r3, #1
 800f778:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800f77c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f780:	881b      	ldrh	r3, [r3, #0]
 800f782:	b29a      	uxth	r2, r3
 800f784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f788:	b29b      	uxth	r3, r3
 800f78a:	029b      	lsls	r3, r3, #10
 800f78c:	b29b      	uxth	r3, r3
 800f78e:	4313      	orrs	r3, r2
 800f790:	b29a      	uxth	r2, r3
 800f792:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f796:	801a      	strh	r2, [r3, #0]
 800f798:	e02d      	b.n	800f7f6 <USB_EPStartXfer+0x12a0>
 800f79a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f79e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	785b      	ldrb	r3, [r3, #1]
 800f7a6:	2b01      	cmp	r3, #1
 800f7a8:	d125      	bne.n	800f7f6 <USB_EPStartXfer+0x12a0>
 800f7aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f7ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f7b8:	b29b      	uxth	r3, r3
 800f7ba:	461a      	mov	r2, r3
 800f7bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f7c0:	4413      	add	r3, r2
 800f7c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800f7c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f7ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	781b      	ldrb	r3, [r3, #0]
 800f7d2:	00da      	lsls	r2, r3, #3
 800f7d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f7d8:	4413      	add	r3, r2
 800f7da:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f7de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800f7e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f7e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	691b      	ldr	r3, [r3, #16]
 800f7ee:	b29a      	uxth	r2, r3
 800f7f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f7f4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800f7f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f7fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	69db      	ldr	r3, [r3, #28]
 800f802:	2b00      	cmp	r3, #0
 800f804:	f000 8218 	beq.w	800fc38 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800f808:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f80c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f810:	681a      	ldr	r2, [r3, #0]
 800f812:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f816:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	781b      	ldrb	r3, [r3, #0]
 800f81e:	009b      	lsls	r3, r3, #2
 800f820:	4413      	add	r3, r2
 800f822:	881b      	ldrh	r3, [r3, #0]
 800f824:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f828:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800f82c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f830:	2b00      	cmp	r3, #0
 800f832:	d005      	beq.n	800f840 <USB_EPStartXfer+0x12ea>
 800f834:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800f838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d10d      	bne.n	800f85c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f840:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800f844:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f848:	2b00      	cmp	r3, #0
 800f84a:	f040 81f5 	bne.w	800fc38 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f84e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800f852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f856:	2b00      	cmp	r3, #0
 800f858:	f040 81ee 	bne.w	800fc38 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800f85c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f860:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f864:	681a      	ldr	r2, [r3, #0]
 800f866:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f86a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	781b      	ldrb	r3, [r3, #0]
 800f872:	009b      	lsls	r3, r3, #2
 800f874:	4413      	add	r3, r2
 800f876:	881b      	ldrh	r3, [r3, #0]
 800f878:	b29b      	uxth	r3, r3
 800f87a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f87e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f882:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800f886:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f88a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f88e:	681a      	ldr	r2, [r3, #0]
 800f890:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f894:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	781b      	ldrb	r3, [r3, #0]
 800f89c:	009b      	lsls	r3, r3, #2
 800f89e:	441a      	add	r2, r3
 800f8a0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800f8a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f8a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f8ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f8b0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f8b4:	b29b      	uxth	r3, r3
 800f8b6:	8013      	strh	r3, [r2, #0]
 800f8b8:	e1be      	b.n	800fc38 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800f8ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f8be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	78db      	ldrb	r3, [r3, #3]
 800f8c6:	2b01      	cmp	r3, #1
 800f8c8:	f040 81b4 	bne.w	800fc34 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800f8cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f8d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	699a      	ldr	r2, [r3, #24]
 800f8d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f8dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	691b      	ldr	r3, [r3, #16]
 800f8e4:	429a      	cmp	r2, r3
 800f8e6:	d917      	bls.n	800f918 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800f8e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f8ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	691b      	ldr	r3, [r3, #16]
 800f8f4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800f8f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f8fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	699a      	ldr	r2, [r3, #24]
 800f904:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f908:	1ad2      	subs	r2, r2, r3
 800f90a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f90e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	619a      	str	r2, [r3, #24]
 800f916:	e00e      	b.n	800f936 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800f918:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f91c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	699b      	ldr	r3, [r3, #24]
 800f924:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800f928:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f92c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	2200      	movs	r2, #0
 800f934:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800f936:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f93a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	785b      	ldrb	r3, [r3, #1]
 800f942:	2b00      	cmp	r3, #0
 800f944:	f040 8085 	bne.w	800fa52 <USB_EPStartXfer+0x14fc>
 800f948:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f94c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800f956:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f95a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f964:	b29b      	uxth	r3, r3
 800f966:	461a      	mov	r2, r3
 800f968:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f96c:	4413      	add	r3, r2
 800f96e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800f972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f976:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	781b      	ldrb	r3, [r3, #0]
 800f97e:	00da      	lsls	r2, r3, #3
 800f980:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f984:	4413      	add	r3, r2
 800f986:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f98a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f98e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f992:	881b      	ldrh	r3, [r3, #0]
 800f994:	b29b      	uxth	r3, r3
 800f996:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f99a:	b29a      	uxth	r2, r3
 800f99c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f9a0:	801a      	strh	r2, [r3, #0]
 800f9a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f9a6:	2b3e      	cmp	r3, #62	@ 0x3e
 800f9a8:	d923      	bls.n	800f9f2 <USB_EPStartXfer+0x149c>
 800f9aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f9ae:	095b      	lsrs	r3, r3, #5
 800f9b0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800f9b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f9b8:	f003 031f 	and.w	r3, r3, #31
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d104      	bne.n	800f9ca <USB_EPStartXfer+0x1474>
 800f9c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f9c4:	3b01      	subs	r3, #1
 800f9c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800f9ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f9ce:	881b      	ldrh	r3, [r3, #0]
 800f9d0:	b29a      	uxth	r2, r3
 800f9d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f9d6:	b29b      	uxth	r3, r3
 800f9d8:	029b      	lsls	r3, r3, #10
 800f9da:	b29b      	uxth	r3, r3
 800f9dc:	4313      	orrs	r3, r2
 800f9de:	b29b      	uxth	r3, r3
 800f9e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f9e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f9e8:	b29a      	uxth	r2, r3
 800f9ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f9ee:	801a      	strh	r2, [r3, #0]
 800f9f0:	e060      	b.n	800fab4 <USB_EPStartXfer+0x155e>
 800f9f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d10c      	bne.n	800fa14 <USB_EPStartXfer+0x14be>
 800f9fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f9fe:	881b      	ldrh	r3, [r3, #0]
 800fa00:	b29b      	uxth	r3, r3
 800fa02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fa06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fa0a:	b29a      	uxth	r2, r3
 800fa0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800fa10:	801a      	strh	r2, [r3, #0]
 800fa12:	e04f      	b.n	800fab4 <USB_EPStartXfer+0x155e>
 800fa14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fa18:	085b      	lsrs	r3, r3, #1
 800fa1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800fa1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fa22:	f003 0301 	and.w	r3, r3, #1
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d004      	beq.n	800fa34 <USB_EPStartXfer+0x14de>
 800fa2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fa2e:	3301      	adds	r3, #1
 800fa30:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800fa34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800fa38:	881b      	ldrh	r3, [r3, #0]
 800fa3a:	b29a      	uxth	r2, r3
 800fa3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fa40:	b29b      	uxth	r3, r3
 800fa42:	029b      	lsls	r3, r3, #10
 800fa44:	b29b      	uxth	r3, r3
 800fa46:	4313      	orrs	r3, r2
 800fa48:	b29a      	uxth	r2, r3
 800fa4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800fa4e:	801a      	strh	r2, [r3, #0]
 800fa50:	e030      	b.n	800fab4 <USB_EPStartXfer+0x155e>
 800fa52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fa56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	785b      	ldrb	r3, [r3, #1]
 800fa5e:	2b01      	cmp	r3, #1
 800fa60:	d128      	bne.n	800fab4 <USB_EPStartXfer+0x155e>
 800fa62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fa66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800fa70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fa74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800fa7e:	b29b      	uxth	r3, r3
 800fa80:	461a      	mov	r2, r3
 800fa82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800fa86:	4413      	add	r3, r2
 800fa88:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800fa8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fa90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	781b      	ldrb	r3, [r3, #0]
 800fa98:	00da      	lsls	r2, r3, #3
 800fa9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800fa9e:	4413      	add	r3, r2
 800faa0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800faa4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800faa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800faac:	b29a      	uxth	r2, r3
 800faae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800fab2:	801a      	strh	r2, [r3, #0]
 800fab4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fab8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800fac2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fac6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	785b      	ldrb	r3, [r3, #1]
 800face:	2b00      	cmp	r3, #0
 800fad0:	f040 8085 	bne.w	800fbde <USB_EPStartXfer+0x1688>
 800fad4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fad8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800fae2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fae6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800faf0:	b29b      	uxth	r3, r3
 800faf2:	461a      	mov	r2, r3
 800faf4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800faf8:	4413      	add	r3, r2
 800fafa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800fafe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fb02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	781b      	ldrb	r3, [r3, #0]
 800fb0a:	00da      	lsls	r2, r3, #3
 800fb0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800fb10:	4413      	add	r3, r2
 800fb12:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800fb16:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800fb1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800fb1e:	881b      	ldrh	r3, [r3, #0]
 800fb20:	b29b      	uxth	r3, r3
 800fb22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fb26:	b29a      	uxth	r2, r3
 800fb28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800fb2c:	801a      	strh	r2, [r3, #0]
 800fb2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fb32:	2b3e      	cmp	r3, #62	@ 0x3e
 800fb34:	d923      	bls.n	800fb7e <USB_EPStartXfer+0x1628>
 800fb36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fb3a:	095b      	lsrs	r3, r3, #5
 800fb3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800fb40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fb44:	f003 031f 	and.w	r3, r3, #31
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d104      	bne.n	800fb56 <USB_EPStartXfer+0x1600>
 800fb4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fb50:	3b01      	subs	r3, #1
 800fb52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800fb56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800fb5a:	881b      	ldrh	r3, [r3, #0]
 800fb5c:	b29a      	uxth	r2, r3
 800fb5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fb62:	b29b      	uxth	r3, r3
 800fb64:	029b      	lsls	r3, r3, #10
 800fb66:	b29b      	uxth	r3, r3
 800fb68:	4313      	orrs	r3, r2
 800fb6a:	b29b      	uxth	r3, r3
 800fb6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fb70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fb74:	b29a      	uxth	r2, r3
 800fb76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800fb7a:	801a      	strh	r2, [r3, #0]
 800fb7c:	e05c      	b.n	800fc38 <USB_EPStartXfer+0x16e2>
 800fb7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d10c      	bne.n	800fba0 <USB_EPStartXfer+0x164a>
 800fb86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800fb8a:	881b      	ldrh	r3, [r3, #0]
 800fb8c:	b29b      	uxth	r3, r3
 800fb8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fb92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fb96:	b29a      	uxth	r2, r3
 800fb98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800fb9c:	801a      	strh	r2, [r3, #0]
 800fb9e:	e04b      	b.n	800fc38 <USB_EPStartXfer+0x16e2>
 800fba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fba4:	085b      	lsrs	r3, r3, #1
 800fba6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800fbaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fbae:	f003 0301 	and.w	r3, r3, #1
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d004      	beq.n	800fbc0 <USB_EPStartXfer+0x166a>
 800fbb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fbba:	3301      	adds	r3, #1
 800fbbc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800fbc0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800fbc4:	881b      	ldrh	r3, [r3, #0]
 800fbc6:	b29a      	uxth	r2, r3
 800fbc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fbcc:	b29b      	uxth	r3, r3
 800fbce:	029b      	lsls	r3, r3, #10
 800fbd0:	b29b      	uxth	r3, r3
 800fbd2:	4313      	orrs	r3, r2
 800fbd4:	b29a      	uxth	r2, r3
 800fbd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800fbda:	801a      	strh	r2, [r3, #0]
 800fbdc:	e02c      	b.n	800fc38 <USB_EPStartXfer+0x16e2>
 800fbde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fbe2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	785b      	ldrb	r3, [r3, #1]
 800fbea:	2b01      	cmp	r3, #1
 800fbec:	d124      	bne.n	800fc38 <USB_EPStartXfer+0x16e2>
 800fbee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fbf2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800fbfc:	b29b      	uxth	r3, r3
 800fbfe:	461a      	mov	r2, r3
 800fc00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800fc04:	4413      	add	r3, r2
 800fc06:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800fc0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fc0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	781b      	ldrb	r3, [r3, #0]
 800fc16:	00da      	lsls	r2, r3, #3
 800fc18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800fc1c:	4413      	add	r3, r2
 800fc1e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800fc22:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800fc26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fc2a:	b29a      	uxth	r2, r3
 800fc2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800fc30:	801a      	strh	r2, [r3, #0]
 800fc32:	e001      	b.n	800fc38 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800fc34:	2301      	movs	r3, #1
 800fc36:	e03a      	b.n	800fcae <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800fc38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fc3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800fc40:	681a      	ldr	r2, [r3, #0]
 800fc42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fc46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	781b      	ldrb	r3, [r3, #0]
 800fc4e:	009b      	lsls	r3, r3, #2
 800fc50:	4413      	add	r3, r2
 800fc52:	881b      	ldrh	r3, [r3, #0]
 800fc54:	b29b      	uxth	r3, r3
 800fc56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800fc5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fc5e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800fc62:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800fc66:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800fc6a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800fc6e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800fc72:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800fc76:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800fc7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fc7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800fc82:	681a      	ldr	r2, [r3, #0]
 800fc84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fc88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	781b      	ldrb	r3, [r3, #0]
 800fc90:	009b      	lsls	r3, r3, #2
 800fc92:	441a      	add	r2, r3
 800fc94:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800fc98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fc9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fca0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fca4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fca8:	b29b      	uxth	r3, r3
 800fcaa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800fcac:	2300      	movs	r3, #0
}
 800fcae:	4618      	mov	r0, r3
 800fcb0:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}

0800fcb8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800fcb8:	b480      	push	{r7}
 800fcba:	b085      	sub	sp, #20
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
 800fcc0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800fcc2:	683b      	ldr	r3, [r7, #0]
 800fcc4:	785b      	ldrb	r3, [r3, #1]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d020      	beq.n	800fd0c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800fcca:	687a      	ldr	r2, [r7, #4]
 800fccc:	683b      	ldr	r3, [r7, #0]
 800fcce:	781b      	ldrb	r3, [r3, #0]
 800fcd0:	009b      	lsls	r3, r3, #2
 800fcd2:	4413      	add	r3, r2
 800fcd4:	881b      	ldrh	r3, [r3, #0]
 800fcd6:	b29b      	uxth	r3, r3
 800fcd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fcdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fce0:	81bb      	strh	r3, [r7, #12]
 800fce2:	89bb      	ldrh	r3, [r7, #12]
 800fce4:	f083 0310 	eor.w	r3, r3, #16
 800fce8:	81bb      	strh	r3, [r7, #12]
 800fcea:	687a      	ldr	r2, [r7, #4]
 800fcec:	683b      	ldr	r3, [r7, #0]
 800fcee:	781b      	ldrb	r3, [r3, #0]
 800fcf0:	009b      	lsls	r3, r3, #2
 800fcf2:	441a      	add	r2, r3
 800fcf4:	89bb      	ldrh	r3, [r7, #12]
 800fcf6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fcfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fcfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fd02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fd06:	b29b      	uxth	r3, r3
 800fd08:	8013      	strh	r3, [r2, #0]
 800fd0a:	e01f      	b.n	800fd4c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800fd0c:	687a      	ldr	r2, [r7, #4]
 800fd0e:	683b      	ldr	r3, [r7, #0]
 800fd10:	781b      	ldrb	r3, [r3, #0]
 800fd12:	009b      	lsls	r3, r3, #2
 800fd14:	4413      	add	r3, r2
 800fd16:	881b      	ldrh	r3, [r3, #0]
 800fd18:	b29b      	uxth	r3, r3
 800fd1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800fd1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fd22:	81fb      	strh	r3, [r7, #14]
 800fd24:	89fb      	ldrh	r3, [r7, #14]
 800fd26:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800fd2a:	81fb      	strh	r3, [r7, #14]
 800fd2c:	687a      	ldr	r2, [r7, #4]
 800fd2e:	683b      	ldr	r3, [r7, #0]
 800fd30:	781b      	ldrb	r3, [r3, #0]
 800fd32:	009b      	lsls	r3, r3, #2
 800fd34:	441a      	add	r2, r3
 800fd36:	89fb      	ldrh	r3, [r7, #14]
 800fd38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fd3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fd40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fd44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fd48:	b29b      	uxth	r3, r3
 800fd4a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800fd4c:	2300      	movs	r3, #0
}
 800fd4e:	4618      	mov	r0, r3
 800fd50:	3714      	adds	r7, #20
 800fd52:	46bd      	mov	sp, r7
 800fd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd58:	4770      	bx	lr

0800fd5a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800fd5a:	b480      	push	{r7}
 800fd5c:	b087      	sub	sp, #28
 800fd5e:	af00      	add	r7, sp, #0
 800fd60:	6078      	str	r0, [r7, #4]
 800fd62:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800fd64:	683b      	ldr	r3, [r7, #0]
 800fd66:	7b1b      	ldrb	r3, [r3, #12]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	f040 809d 	bne.w	800fea8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800fd6e:	683b      	ldr	r3, [r7, #0]
 800fd70:	785b      	ldrb	r3, [r3, #1]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d04c      	beq.n	800fe10 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800fd76:	687a      	ldr	r2, [r7, #4]
 800fd78:	683b      	ldr	r3, [r7, #0]
 800fd7a:	781b      	ldrb	r3, [r3, #0]
 800fd7c:	009b      	lsls	r3, r3, #2
 800fd7e:	4413      	add	r3, r2
 800fd80:	881b      	ldrh	r3, [r3, #0]
 800fd82:	823b      	strh	r3, [r7, #16]
 800fd84:	8a3b      	ldrh	r3, [r7, #16]
 800fd86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d01b      	beq.n	800fdc6 <USB_EPClearStall+0x6c>
 800fd8e:	687a      	ldr	r2, [r7, #4]
 800fd90:	683b      	ldr	r3, [r7, #0]
 800fd92:	781b      	ldrb	r3, [r3, #0]
 800fd94:	009b      	lsls	r3, r3, #2
 800fd96:	4413      	add	r3, r2
 800fd98:	881b      	ldrh	r3, [r3, #0]
 800fd9a:	b29b      	uxth	r3, r3
 800fd9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fda0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fda4:	81fb      	strh	r3, [r7, #14]
 800fda6:	687a      	ldr	r2, [r7, #4]
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	781b      	ldrb	r3, [r3, #0]
 800fdac:	009b      	lsls	r3, r3, #2
 800fdae:	441a      	add	r2, r3
 800fdb0:	89fb      	ldrh	r3, [r7, #14]
 800fdb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fdb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fdba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fdbe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800fdc2:	b29b      	uxth	r3, r3
 800fdc4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800fdc6:	683b      	ldr	r3, [r7, #0]
 800fdc8:	78db      	ldrb	r3, [r3, #3]
 800fdca:	2b01      	cmp	r3, #1
 800fdcc:	d06c      	beq.n	800fea8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800fdce:	687a      	ldr	r2, [r7, #4]
 800fdd0:	683b      	ldr	r3, [r7, #0]
 800fdd2:	781b      	ldrb	r3, [r3, #0]
 800fdd4:	009b      	lsls	r3, r3, #2
 800fdd6:	4413      	add	r3, r2
 800fdd8:	881b      	ldrh	r3, [r3, #0]
 800fdda:	b29b      	uxth	r3, r3
 800fddc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fde0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fde4:	81bb      	strh	r3, [r7, #12]
 800fde6:	89bb      	ldrh	r3, [r7, #12]
 800fde8:	f083 0320 	eor.w	r3, r3, #32
 800fdec:	81bb      	strh	r3, [r7, #12]
 800fdee:	687a      	ldr	r2, [r7, #4]
 800fdf0:	683b      	ldr	r3, [r7, #0]
 800fdf2:	781b      	ldrb	r3, [r3, #0]
 800fdf4:	009b      	lsls	r3, r3, #2
 800fdf6:	441a      	add	r2, r3
 800fdf8:	89bb      	ldrh	r3, [r7, #12]
 800fdfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fdfe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fe02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fe06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fe0a:	b29b      	uxth	r3, r3
 800fe0c:	8013      	strh	r3, [r2, #0]
 800fe0e:	e04b      	b.n	800fea8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800fe10:	687a      	ldr	r2, [r7, #4]
 800fe12:	683b      	ldr	r3, [r7, #0]
 800fe14:	781b      	ldrb	r3, [r3, #0]
 800fe16:	009b      	lsls	r3, r3, #2
 800fe18:	4413      	add	r3, r2
 800fe1a:	881b      	ldrh	r3, [r3, #0]
 800fe1c:	82fb      	strh	r3, [r7, #22]
 800fe1e:	8afb      	ldrh	r3, [r7, #22]
 800fe20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d01b      	beq.n	800fe60 <USB_EPClearStall+0x106>
 800fe28:	687a      	ldr	r2, [r7, #4]
 800fe2a:	683b      	ldr	r3, [r7, #0]
 800fe2c:	781b      	ldrb	r3, [r3, #0]
 800fe2e:	009b      	lsls	r3, r3, #2
 800fe30:	4413      	add	r3, r2
 800fe32:	881b      	ldrh	r3, [r3, #0]
 800fe34:	b29b      	uxth	r3, r3
 800fe36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fe3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fe3e:	82bb      	strh	r3, [r7, #20]
 800fe40:	687a      	ldr	r2, [r7, #4]
 800fe42:	683b      	ldr	r3, [r7, #0]
 800fe44:	781b      	ldrb	r3, [r3, #0]
 800fe46:	009b      	lsls	r3, r3, #2
 800fe48:	441a      	add	r2, r3
 800fe4a:	8abb      	ldrh	r3, [r7, #20]
 800fe4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fe50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fe54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800fe58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fe5c:	b29b      	uxth	r3, r3
 800fe5e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800fe60:	687a      	ldr	r2, [r7, #4]
 800fe62:	683b      	ldr	r3, [r7, #0]
 800fe64:	781b      	ldrb	r3, [r3, #0]
 800fe66:	009b      	lsls	r3, r3, #2
 800fe68:	4413      	add	r3, r2
 800fe6a:	881b      	ldrh	r3, [r3, #0]
 800fe6c:	b29b      	uxth	r3, r3
 800fe6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800fe72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fe76:	827b      	strh	r3, [r7, #18]
 800fe78:	8a7b      	ldrh	r3, [r7, #18]
 800fe7a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800fe7e:	827b      	strh	r3, [r7, #18]
 800fe80:	8a7b      	ldrh	r3, [r7, #18]
 800fe82:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800fe86:	827b      	strh	r3, [r7, #18]
 800fe88:	687a      	ldr	r2, [r7, #4]
 800fe8a:	683b      	ldr	r3, [r7, #0]
 800fe8c:	781b      	ldrb	r3, [r3, #0]
 800fe8e:	009b      	lsls	r3, r3, #2
 800fe90:	441a      	add	r2, r3
 800fe92:	8a7b      	ldrh	r3, [r7, #18]
 800fe94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fe98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fe9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fea0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fea4:	b29b      	uxth	r3, r3
 800fea6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800fea8:	2300      	movs	r3, #0
}
 800feaa:	4618      	mov	r0, r3
 800feac:	371c      	adds	r7, #28
 800feae:	46bd      	mov	sp, r7
 800feb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb4:	4770      	bx	lr

0800feb6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800feb6:	b480      	push	{r7}
 800feb8:	b083      	sub	sp, #12
 800feba:	af00      	add	r7, sp, #0
 800febc:	6078      	str	r0, [r7, #4]
 800febe:	460b      	mov	r3, r1
 800fec0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800fec2:	78fb      	ldrb	r3, [r7, #3]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d103      	bne.n	800fed0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	2280      	movs	r2, #128	@ 0x80
 800fecc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800fed0:	2300      	movs	r3, #0
}
 800fed2:	4618      	mov	r0, r3
 800fed4:	370c      	adds	r7, #12
 800fed6:	46bd      	mov	sp, r7
 800fed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fedc:	4770      	bx	lr

0800fede <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800fede:	b480      	push	{r7}
 800fee0:	b083      	sub	sp, #12
 800fee2:	af00      	add	r7, sp, #0
 800fee4:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800feec:	b29b      	uxth	r3, r3
 800feee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fef2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fef6:	b29a      	uxth	r2, r3
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800fefe:	2300      	movs	r3, #0
}
 800ff00:	4618      	mov	r0, r3
 800ff02:	370c      	adds	r7, #12
 800ff04:	46bd      	mov	sp, r7
 800ff06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0a:	4770      	bx	lr

0800ff0c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800ff0c:	b480      	push	{r7}
 800ff0e:	b085      	sub	sp, #20
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800ff1a:	b29b      	uxth	r3, r3
 800ff1c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ff1e:	68fb      	ldr	r3, [r7, #12]
}
 800ff20:	4618      	mov	r0, r3
 800ff22:	3714      	adds	r7, #20
 800ff24:	46bd      	mov	sp, r7
 800ff26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2a:	4770      	bx	lr

0800ff2c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ff2c:	b480      	push	{r7}
 800ff2e:	b08b      	sub	sp, #44	@ 0x2c
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	60f8      	str	r0, [r7, #12]
 800ff34:	60b9      	str	r1, [r7, #8]
 800ff36:	4611      	mov	r1, r2
 800ff38:	461a      	mov	r2, r3
 800ff3a:	460b      	mov	r3, r1
 800ff3c:	80fb      	strh	r3, [r7, #6]
 800ff3e:	4613      	mov	r3, r2
 800ff40:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ff42:	88bb      	ldrh	r3, [r7, #4]
 800ff44:	3301      	adds	r3, #1
 800ff46:	085b      	lsrs	r3, r3, #1
 800ff48:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ff4e:	68bb      	ldr	r3, [r7, #8]
 800ff50:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ff52:	88fa      	ldrh	r2, [r7, #6]
 800ff54:	697b      	ldr	r3, [r7, #20]
 800ff56:	4413      	add	r3, r2
 800ff58:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ff5c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ff5e:	69bb      	ldr	r3, [r7, #24]
 800ff60:	627b      	str	r3, [r7, #36]	@ 0x24
 800ff62:	e01c      	b.n	800ff9e <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 800ff64:	69fb      	ldr	r3, [r7, #28]
 800ff66:	781b      	ldrb	r3, [r3, #0]
 800ff68:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800ff6a:	69fb      	ldr	r3, [r7, #28]
 800ff6c:	3301      	adds	r3, #1
 800ff6e:	781b      	ldrb	r3, [r3, #0]
 800ff70:	b21b      	sxth	r3, r3
 800ff72:	021b      	lsls	r3, r3, #8
 800ff74:	b21a      	sxth	r2, r3
 800ff76:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ff7a:	4313      	orrs	r3, r2
 800ff7c:	b21b      	sxth	r3, r3
 800ff7e:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800ff80:	6a3b      	ldr	r3, [r7, #32]
 800ff82:	8a7a      	ldrh	r2, [r7, #18]
 800ff84:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ff86:	6a3b      	ldr	r3, [r7, #32]
 800ff88:	3302      	adds	r3, #2
 800ff8a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800ff8c:	69fb      	ldr	r3, [r7, #28]
 800ff8e:	3301      	adds	r3, #1
 800ff90:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800ff92:	69fb      	ldr	r3, [r7, #28]
 800ff94:	3301      	adds	r3, #1
 800ff96:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ff98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff9a:	3b01      	subs	r3, #1
 800ff9c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ff9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d1df      	bne.n	800ff64 <USB_WritePMA+0x38>
  }
}
 800ffa4:	bf00      	nop
 800ffa6:	bf00      	nop
 800ffa8:	372c      	adds	r7, #44	@ 0x2c
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb0:	4770      	bx	lr

0800ffb2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ffb2:	b480      	push	{r7}
 800ffb4:	b08b      	sub	sp, #44	@ 0x2c
 800ffb6:	af00      	add	r7, sp, #0
 800ffb8:	60f8      	str	r0, [r7, #12]
 800ffba:	60b9      	str	r1, [r7, #8]
 800ffbc:	4611      	mov	r1, r2
 800ffbe:	461a      	mov	r2, r3
 800ffc0:	460b      	mov	r3, r1
 800ffc2:	80fb      	strh	r3, [r7, #6]
 800ffc4:	4613      	mov	r3, r2
 800ffc6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ffc8:	88bb      	ldrh	r3, [r7, #4]
 800ffca:	085b      	lsrs	r3, r3, #1
 800ffcc:	b29b      	uxth	r3, r3
 800ffce:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ffd4:	68bb      	ldr	r3, [r7, #8]
 800ffd6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ffd8:	88fa      	ldrh	r2, [r7, #6]
 800ffda:	697b      	ldr	r3, [r7, #20]
 800ffdc:	4413      	add	r3, r2
 800ffde:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ffe2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ffe4:	69bb      	ldr	r3, [r7, #24]
 800ffe6:	627b      	str	r3, [r7, #36]	@ 0x24
 800ffe8:	e018      	b.n	801001c <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800ffea:	6a3b      	ldr	r3, [r7, #32]
 800ffec:	881b      	ldrh	r3, [r3, #0]
 800ffee:	b29b      	uxth	r3, r3
 800fff0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800fff2:	6a3b      	ldr	r3, [r7, #32]
 800fff4:	3302      	adds	r3, #2
 800fff6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800fff8:	693b      	ldr	r3, [r7, #16]
 800fffa:	b2da      	uxtb	r2, r3
 800fffc:	69fb      	ldr	r3, [r7, #28]
 800fffe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8010000:	69fb      	ldr	r3, [r7, #28]
 8010002:	3301      	adds	r3, #1
 8010004:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8010006:	693b      	ldr	r3, [r7, #16]
 8010008:	0a1b      	lsrs	r3, r3, #8
 801000a:	b2da      	uxtb	r2, r3
 801000c:	69fb      	ldr	r3, [r7, #28]
 801000e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8010010:	69fb      	ldr	r3, [r7, #28]
 8010012:	3301      	adds	r3, #1
 8010014:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8010016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010018:	3b01      	subs	r3, #1
 801001a:	627b      	str	r3, [r7, #36]	@ 0x24
 801001c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801001e:	2b00      	cmp	r3, #0
 8010020:	d1e3      	bne.n	800ffea <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8010022:	88bb      	ldrh	r3, [r7, #4]
 8010024:	f003 0301 	and.w	r3, r3, #1
 8010028:	b29b      	uxth	r3, r3
 801002a:	2b00      	cmp	r3, #0
 801002c:	d007      	beq.n	801003e <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 801002e:	6a3b      	ldr	r3, [r7, #32]
 8010030:	881b      	ldrh	r3, [r3, #0]
 8010032:	b29b      	uxth	r3, r3
 8010034:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8010036:	693b      	ldr	r3, [r7, #16]
 8010038:	b2da      	uxtb	r2, r3
 801003a:	69fb      	ldr	r3, [r7, #28]
 801003c:	701a      	strb	r2, [r3, #0]
  }
}
 801003e:	bf00      	nop
 8010040:	372c      	adds	r7, #44	@ 0x2c
 8010042:	46bd      	mov	sp, r7
 8010044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010048:	4770      	bx	lr
	...

0801004c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801004c:	b580      	push	{r7, lr}
 801004e:	b084      	sub	sp, #16
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
 8010054:	460b      	mov	r3, r1
 8010056:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010058:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 801005c:	f002 fc74 	bl	8012948 <USBD_static_malloc>
 8010060:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d109      	bne.n	801007c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	32b0      	adds	r2, #176	@ 0xb0
 8010072:	2100      	movs	r1, #0
 8010074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8010078:	2302      	movs	r3, #2
 801007a:	e0d4      	b.n	8010226 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 801007c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8010080:	2100      	movs	r1, #0
 8010082:	68f8      	ldr	r0, [r7, #12]
 8010084:	f003 fa1f 	bl	80134c6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	32b0      	adds	r2, #176	@ 0xb0
 8010092:	68f9      	ldr	r1, [r7, #12]
 8010094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	32b0      	adds	r2, #176	@ 0xb0
 80100a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	7c1b      	ldrb	r3, [r3, #16]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d138      	bne.n	8010126 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80100b4:	4b5e      	ldr	r3, [pc, #376]	@ (8010230 <USBD_CDC_Init+0x1e4>)
 80100b6:	7819      	ldrb	r1, [r3, #0]
 80100b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80100bc:	2202      	movs	r2, #2
 80100be:	6878      	ldr	r0, [r7, #4]
 80100c0:	f002 fae9 	bl	8012696 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80100c4:	4b5a      	ldr	r3, [pc, #360]	@ (8010230 <USBD_CDC_Init+0x1e4>)
 80100c6:	781b      	ldrb	r3, [r3, #0]
 80100c8:	f003 020f 	and.w	r2, r3, #15
 80100cc:	6879      	ldr	r1, [r7, #4]
 80100ce:	4613      	mov	r3, r2
 80100d0:	009b      	lsls	r3, r3, #2
 80100d2:	4413      	add	r3, r2
 80100d4:	009b      	lsls	r3, r3, #2
 80100d6:	440b      	add	r3, r1
 80100d8:	3324      	adds	r3, #36	@ 0x24
 80100da:	2201      	movs	r2, #1
 80100dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80100de:	4b55      	ldr	r3, [pc, #340]	@ (8010234 <USBD_CDC_Init+0x1e8>)
 80100e0:	7819      	ldrb	r1, [r3, #0]
 80100e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80100e6:	2202      	movs	r2, #2
 80100e8:	6878      	ldr	r0, [r7, #4]
 80100ea:	f002 fad4 	bl	8012696 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80100ee:	4b51      	ldr	r3, [pc, #324]	@ (8010234 <USBD_CDC_Init+0x1e8>)
 80100f0:	781b      	ldrb	r3, [r3, #0]
 80100f2:	f003 020f 	and.w	r2, r3, #15
 80100f6:	6879      	ldr	r1, [r7, #4]
 80100f8:	4613      	mov	r3, r2
 80100fa:	009b      	lsls	r3, r3, #2
 80100fc:	4413      	add	r3, r2
 80100fe:	009b      	lsls	r3, r3, #2
 8010100:	440b      	add	r3, r1
 8010102:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010106:	2201      	movs	r2, #1
 8010108:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801010a:	4b4b      	ldr	r3, [pc, #300]	@ (8010238 <USBD_CDC_Init+0x1ec>)
 801010c:	781b      	ldrb	r3, [r3, #0]
 801010e:	f003 020f 	and.w	r2, r3, #15
 8010112:	6879      	ldr	r1, [r7, #4]
 8010114:	4613      	mov	r3, r2
 8010116:	009b      	lsls	r3, r3, #2
 8010118:	4413      	add	r3, r2
 801011a:	009b      	lsls	r3, r3, #2
 801011c:	440b      	add	r3, r1
 801011e:	3326      	adds	r3, #38	@ 0x26
 8010120:	2210      	movs	r2, #16
 8010122:	801a      	strh	r2, [r3, #0]
 8010124:	e035      	b.n	8010192 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8010126:	4b42      	ldr	r3, [pc, #264]	@ (8010230 <USBD_CDC_Init+0x1e4>)
 8010128:	7819      	ldrb	r1, [r3, #0]
 801012a:	2340      	movs	r3, #64	@ 0x40
 801012c:	2202      	movs	r2, #2
 801012e:	6878      	ldr	r0, [r7, #4]
 8010130:	f002 fab1 	bl	8012696 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010134:	4b3e      	ldr	r3, [pc, #248]	@ (8010230 <USBD_CDC_Init+0x1e4>)
 8010136:	781b      	ldrb	r3, [r3, #0]
 8010138:	f003 020f 	and.w	r2, r3, #15
 801013c:	6879      	ldr	r1, [r7, #4]
 801013e:	4613      	mov	r3, r2
 8010140:	009b      	lsls	r3, r3, #2
 8010142:	4413      	add	r3, r2
 8010144:	009b      	lsls	r3, r3, #2
 8010146:	440b      	add	r3, r1
 8010148:	3324      	adds	r3, #36	@ 0x24
 801014a:	2201      	movs	r2, #1
 801014c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801014e:	4b39      	ldr	r3, [pc, #228]	@ (8010234 <USBD_CDC_Init+0x1e8>)
 8010150:	7819      	ldrb	r1, [r3, #0]
 8010152:	2340      	movs	r3, #64	@ 0x40
 8010154:	2202      	movs	r2, #2
 8010156:	6878      	ldr	r0, [r7, #4]
 8010158:	f002 fa9d 	bl	8012696 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801015c:	4b35      	ldr	r3, [pc, #212]	@ (8010234 <USBD_CDC_Init+0x1e8>)
 801015e:	781b      	ldrb	r3, [r3, #0]
 8010160:	f003 020f 	and.w	r2, r3, #15
 8010164:	6879      	ldr	r1, [r7, #4]
 8010166:	4613      	mov	r3, r2
 8010168:	009b      	lsls	r3, r3, #2
 801016a:	4413      	add	r3, r2
 801016c:	009b      	lsls	r3, r3, #2
 801016e:	440b      	add	r3, r1
 8010170:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010174:	2201      	movs	r2, #1
 8010176:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010178:	4b2f      	ldr	r3, [pc, #188]	@ (8010238 <USBD_CDC_Init+0x1ec>)
 801017a:	781b      	ldrb	r3, [r3, #0]
 801017c:	f003 020f 	and.w	r2, r3, #15
 8010180:	6879      	ldr	r1, [r7, #4]
 8010182:	4613      	mov	r3, r2
 8010184:	009b      	lsls	r3, r3, #2
 8010186:	4413      	add	r3, r2
 8010188:	009b      	lsls	r3, r3, #2
 801018a:	440b      	add	r3, r1
 801018c:	3326      	adds	r3, #38	@ 0x26
 801018e:	2210      	movs	r2, #16
 8010190:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010192:	4b29      	ldr	r3, [pc, #164]	@ (8010238 <USBD_CDC_Init+0x1ec>)
 8010194:	7819      	ldrb	r1, [r3, #0]
 8010196:	2308      	movs	r3, #8
 8010198:	2203      	movs	r2, #3
 801019a:	6878      	ldr	r0, [r7, #4]
 801019c:	f002 fa7b 	bl	8012696 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80101a0:	4b25      	ldr	r3, [pc, #148]	@ (8010238 <USBD_CDC_Init+0x1ec>)
 80101a2:	781b      	ldrb	r3, [r3, #0]
 80101a4:	f003 020f 	and.w	r2, r3, #15
 80101a8:	6879      	ldr	r1, [r7, #4]
 80101aa:	4613      	mov	r3, r2
 80101ac:	009b      	lsls	r3, r3, #2
 80101ae:	4413      	add	r3, r2
 80101b0:	009b      	lsls	r3, r3, #2
 80101b2:	440b      	add	r3, r1
 80101b4:	3324      	adds	r3, #36	@ 0x24
 80101b6:	2201      	movs	r2, #1
 80101b8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	2200      	movs	r2, #0
 80101be:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80101c8:	687a      	ldr	r2, [r7, #4]
 80101ca:	33b0      	adds	r3, #176	@ 0xb0
 80101cc:	009b      	lsls	r3, r3, #2
 80101ce:	4413      	add	r3, r2
 80101d0:	685b      	ldr	r3, [r3, #4]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	2200      	movs	r2, #0
 80101da:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	2200      	movs	r2, #0
 80101e2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d101      	bne.n	80101f4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80101f0:	2302      	movs	r3, #2
 80101f2:	e018      	b.n	8010226 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	7c1b      	ldrb	r3, [r3, #16]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d10a      	bne.n	8010212 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80101fc:	4b0d      	ldr	r3, [pc, #52]	@ (8010234 <USBD_CDC_Init+0x1e8>)
 80101fe:	7819      	ldrb	r1, [r3, #0]
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010206:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801020a:	6878      	ldr	r0, [r7, #4]
 801020c:	f002 fb32 	bl	8012874 <USBD_LL_PrepareReceive>
 8010210:	e008      	b.n	8010224 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010212:	4b08      	ldr	r3, [pc, #32]	@ (8010234 <USBD_CDC_Init+0x1e8>)
 8010214:	7819      	ldrb	r1, [r3, #0]
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801021c:	2340      	movs	r3, #64	@ 0x40
 801021e:	6878      	ldr	r0, [r7, #4]
 8010220:	f002 fb28 	bl	8012874 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010224:	2300      	movs	r3, #0
}
 8010226:	4618      	mov	r0, r3
 8010228:	3710      	adds	r7, #16
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}
 801022e:	bf00      	nop
 8010230:	200000bf 	.word	0x200000bf
 8010234:	200000c0 	.word	0x200000c0
 8010238:	200000c1 	.word	0x200000c1

0801023c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b082      	sub	sp, #8
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
 8010244:	460b      	mov	r3, r1
 8010246:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8010248:	4b3a      	ldr	r3, [pc, #232]	@ (8010334 <USBD_CDC_DeInit+0xf8>)
 801024a:	781b      	ldrb	r3, [r3, #0]
 801024c:	4619      	mov	r1, r3
 801024e:	6878      	ldr	r0, [r7, #4]
 8010250:	f002 fa47 	bl	80126e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8010254:	4b37      	ldr	r3, [pc, #220]	@ (8010334 <USBD_CDC_DeInit+0xf8>)
 8010256:	781b      	ldrb	r3, [r3, #0]
 8010258:	f003 020f 	and.w	r2, r3, #15
 801025c:	6879      	ldr	r1, [r7, #4]
 801025e:	4613      	mov	r3, r2
 8010260:	009b      	lsls	r3, r3, #2
 8010262:	4413      	add	r3, r2
 8010264:	009b      	lsls	r3, r3, #2
 8010266:	440b      	add	r3, r1
 8010268:	3324      	adds	r3, #36	@ 0x24
 801026a:	2200      	movs	r2, #0
 801026c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801026e:	4b32      	ldr	r3, [pc, #200]	@ (8010338 <USBD_CDC_DeInit+0xfc>)
 8010270:	781b      	ldrb	r3, [r3, #0]
 8010272:	4619      	mov	r1, r3
 8010274:	6878      	ldr	r0, [r7, #4]
 8010276:	f002 fa34 	bl	80126e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801027a:	4b2f      	ldr	r3, [pc, #188]	@ (8010338 <USBD_CDC_DeInit+0xfc>)
 801027c:	781b      	ldrb	r3, [r3, #0]
 801027e:	f003 020f 	and.w	r2, r3, #15
 8010282:	6879      	ldr	r1, [r7, #4]
 8010284:	4613      	mov	r3, r2
 8010286:	009b      	lsls	r3, r3, #2
 8010288:	4413      	add	r3, r2
 801028a:	009b      	lsls	r3, r3, #2
 801028c:	440b      	add	r3, r1
 801028e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010292:	2200      	movs	r2, #0
 8010294:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8010296:	4b29      	ldr	r3, [pc, #164]	@ (801033c <USBD_CDC_DeInit+0x100>)
 8010298:	781b      	ldrb	r3, [r3, #0]
 801029a:	4619      	mov	r1, r3
 801029c:	6878      	ldr	r0, [r7, #4]
 801029e:	f002 fa20 	bl	80126e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80102a2:	4b26      	ldr	r3, [pc, #152]	@ (801033c <USBD_CDC_DeInit+0x100>)
 80102a4:	781b      	ldrb	r3, [r3, #0]
 80102a6:	f003 020f 	and.w	r2, r3, #15
 80102aa:	6879      	ldr	r1, [r7, #4]
 80102ac:	4613      	mov	r3, r2
 80102ae:	009b      	lsls	r3, r3, #2
 80102b0:	4413      	add	r3, r2
 80102b2:	009b      	lsls	r3, r3, #2
 80102b4:	440b      	add	r3, r1
 80102b6:	3324      	adds	r3, #36	@ 0x24
 80102b8:	2200      	movs	r2, #0
 80102ba:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80102bc:	4b1f      	ldr	r3, [pc, #124]	@ (801033c <USBD_CDC_DeInit+0x100>)
 80102be:	781b      	ldrb	r3, [r3, #0]
 80102c0:	f003 020f 	and.w	r2, r3, #15
 80102c4:	6879      	ldr	r1, [r7, #4]
 80102c6:	4613      	mov	r3, r2
 80102c8:	009b      	lsls	r3, r3, #2
 80102ca:	4413      	add	r3, r2
 80102cc:	009b      	lsls	r3, r3, #2
 80102ce:	440b      	add	r3, r1
 80102d0:	3326      	adds	r3, #38	@ 0x26
 80102d2:	2200      	movs	r2, #0
 80102d4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	32b0      	adds	r2, #176	@ 0xb0
 80102e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d01f      	beq.n	8010328 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80102ee:	687a      	ldr	r2, [r7, #4]
 80102f0:	33b0      	adds	r3, #176	@ 0xb0
 80102f2:	009b      	lsls	r3, r3, #2
 80102f4:	4413      	add	r3, r2
 80102f6:	685b      	ldr	r3, [r3, #4]
 80102f8:	685b      	ldr	r3, [r3, #4]
 80102fa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	32b0      	adds	r2, #176	@ 0xb0
 8010306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801030a:	4618      	mov	r0, r3
 801030c:	f002 fb2a 	bl	8012964 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	32b0      	adds	r2, #176	@ 0xb0
 801031a:	2100      	movs	r1, #0
 801031c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	2200      	movs	r2, #0
 8010324:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8010328:	2300      	movs	r3, #0
}
 801032a:	4618      	mov	r0, r3
 801032c:	3708      	adds	r7, #8
 801032e:	46bd      	mov	sp, r7
 8010330:	bd80      	pop	{r7, pc}
 8010332:	bf00      	nop
 8010334:	200000bf 	.word	0x200000bf
 8010338:	200000c0 	.word	0x200000c0
 801033c:	200000c1 	.word	0x200000c1

08010340 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010340:	b580      	push	{r7, lr}
 8010342:	b086      	sub	sp, #24
 8010344:	af00      	add	r7, sp, #0
 8010346:	6078      	str	r0, [r7, #4]
 8010348:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	32b0      	adds	r2, #176	@ 0xb0
 8010354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010358:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801035a:	2300      	movs	r3, #0
 801035c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801035e:	2300      	movs	r3, #0
 8010360:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8010362:	2300      	movs	r3, #0
 8010364:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8010366:	693b      	ldr	r3, [r7, #16]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d101      	bne.n	8010370 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 801036c:	2303      	movs	r3, #3
 801036e:	e0bf      	b.n	80104f0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010370:	683b      	ldr	r3, [r7, #0]
 8010372:	781b      	ldrb	r3, [r3, #0]
 8010374:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010378:	2b00      	cmp	r3, #0
 801037a:	d050      	beq.n	801041e <USBD_CDC_Setup+0xde>
 801037c:	2b20      	cmp	r3, #32
 801037e:	f040 80af 	bne.w	80104e0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8010382:	683b      	ldr	r3, [r7, #0]
 8010384:	88db      	ldrh	r3, [r3, #6]
 8010386:	2b00      	cmp	r3, #0
 8010388:	d03a      	beq.n	8010400 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801038a:	683b      	ldr	r3, [r7, #0]
 801038c:	781b      	ldrb	r3, [r3, #0]
 801038e:	b25b      	sxtb	r3, r3
 8010390:	2b00      	cmp	r3, #0
 8010392:	da1b      	bge.n	80103cc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801039a:	687a      	ldr	r2, [r7, #4]
 801039c:	33b0      	adds	r3, #176	@ 0xb0
 801039e:	009b      	lsls	r3, r3, #2
 80103a0:	4413      	add	r3, r2
 80103a2:	685b      	ldr	r3, [r3, #4]
 80103a4:	689b      	ldr	r3, [r3, #8]
 80103a6:	683a      	ldr	r2, [r7, #0]
 80103a8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80103aa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80103ac:	683a      	ldr	r2, [r7, #0]
 80103ae:	88d2      	ldrh	r2, [r2, #6]
 80103b0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80103b2:	683b      	ldr	r3, [r7, #0]
 80103b4:	88db      	ldrh	r3, [r3, #6]
 80103b6:	2b07      	cmp	r3, #7
 80103b8:	bf28      	it	cs
 80103ba:	2307      	movcs	r3, #7
 80103bc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80103be:	693b      	ldr	r3, [r7, #16]
 80103c0:	89fa      	ldrh	r2, [r7, #14]
 80103c2:	4619      	mov	r1, r3
 80103c4:	6878      	ldr	r0, [r7, #4]
 80103c6:	f001 fd47 	bl	8011e58 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80103ca:	e090      	b.n	80104ee <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80103cc:	683b      	ldr	r3, [r7, #0]
 80103ce:	785a      	ldrb	r2, [r3, #1]
 80103d0:	693b      	ldr	r3, [r7, #16]
 80103d2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80103d6:	683b      	ldr	r3, [r7, #0]
 80103d8:	88db      	ldrh	r3, [r3, #6]
 80103da:	2b3f      	cmp	r3, #63	@ 0x3f
 80103dc:	d803      	bhi.n	80103e6 <USBD_CDC_Setup+0xa6>
 80103de:	683b      	ldr	r3, [r7, #0]
 80103e0:	88db      	ldrh	r3, [r3, #6]
 80103e2:	b2da      	uxtb	r2, r3
 80103e4:	e000      	b.n	80103e8 <USBD_CDC_Setup+0xa8>
 80103e6:	2240      	movs	r2, #64	@ 0x40
 80103e8:	693b      	ldr	r3, [r7, #16]
 80103ea:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80103ee:	6939      	ldr	r1, [r7, #16]
 80103f0:	693b      	ldr	r3, [r7, #16]
 80103f2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80103f6:	461a      	mov	r2, r3
 80103f8:	6878      	ldr	r0, [r7, #4]
 80103fa:	f001 fd59 	bl	8011eb0 <USBD_CtlPrepareRx>
      break;
 80103fe:	e076      	b.n	80104ee <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010406:	687a      	ldr	r2, [r7, #4]
 8010408:	33b0      	adds	r3, #176	@ 0xb0
 801040a:	009b      	lsls	r3, r3, #2
 801040c:	4413      	add	r3, r2
 801040e:	685b      	ldr	r3, [r3, #4]
 8010410:	689b      	ldr	r3, [r3, #8]
 8010412:	683a      	ldr	r2, [r7, #0]
 8010414:	7850      	ldrb	r0, [r2, #1]
 8010416:	2200      	movs	r2, #0
 8010418:	6839      	ldr	r1, [r7, #0]
 801041a:	4798      	blx	r3
      break;
 801041c:	e067      	b.n	80104ee <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801041e:	683b      	ldr	r3, [r7, #0]
 8010420:	785b      	ldrb	r3, [r3, #1]
 8010422:	2b0b      	cmp	r3, #11
 8010424:	d851      	bhi.n	80104ca <USBD_CDC_Setup+0x18a>
 8010426:	a201      	add	r2, pc, #4	@ (adr r2, 801042c <USBD_CDC_Setup+0xec>)
 8010428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801042c:	0801045d 	.word	0x0801045d
 8010430:	080104d9 	.word	0x080104d9
 8010434:	080104cb 	.word	0x080104cb
 8010438:	080104cb 	.word	0x080104cb
 801043c:	080104cb 	.word	0x080104cb
 8010440:	080104cb 	.word	0x080104cb
 8010444:	080104cb 	.word	0x080104cb
 8010448:	080104cb 	.word	0x080104cb
 801044c:	080104cb 	.word	0x080104cb
 8010450:	080104cb 	.word	0x080104cb
 8010454:	08010487 	.word	0x08010487
 8010458:	080104b1 	.word	0x080104b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010462:	b2db      	uxtb	r3, r3
 8010464:	2b03      	cmp	r3, #3
 8010466:	d107      	bne.n	8010478 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010468:	f107 030a 	add.w	r3, r7, #10
 801046c:	2202      	movs	r2, #2
 801046e:	4619      	mov	r1, r3
 8010470:	6878      	ldr	r0, [r7, #4]
 8010472:	f001 fcf1 	bl	8011e58 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010476:	e032      	b.n	80104de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010478:	6839      	ldr	r1, [r7, #0]
 801047a:	6878      	ldr	r0, [r7, #4]
 801047c:	f001 fc6f 	bl	8011d5e <USBD_CtlError>
            ret = USBD_FAIL;
 8010480:	2303      	movs	r3, #3
 8010482:	75fb      	strb	r3, [r7, #23]
          break;
 8010484:	e02b      	b.n	80104de <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801048c:	b2db      	uxtb	r3, r3
 801048e:	2b03      	cmp	r3, #3
 8010490:	d107      	bne.n	80104a2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010492:	f107 030d 	add.w	r3, r7, #13
 8010496:	2201      	movs	r2, #1
 8010498:	4619      	mov	r1, r3
 801049a:	6878      	ldr	r0, [r7, #4]
 801049c:	f001 fcdc 	bl	8011e58 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80104a0:	e01d      	b.n	80104de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80104a2:	6839      	ldr	r1, [r7, #0]
 80104a4:	6878      	ldr	r0, [r7, #4]
 80104a6:	f001 fc5a 	bl	8011d5e <USBD_CtlError>
            ret = USBD_FAIL;
 80104aa:	2303      	movs	r3, #3
 80104ac:	75fb      	strb	r3, [r7, #23]
          break;
 80104ae:	e016      	b.n	80104de <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80104b6:	b2db      	uxtb	r3, r3
 80104b8:	2b03      	cmp	r3, #3
 80104ba:	d00f      	beq.n	80104dc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80104bc:	6839      	ldr	r1, [r7, #0]
 80104be:	6878      	ldr	r0, [r7, #4]
 80104c0:	f001 fc4d 	bl	8011d5e <USBD_CtlError>
            ret = USBD_FAIL;
 80104c4:	2303      	movs	r3, #3
 80104c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80104c8:	e008      	b.n	80104dc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80104ca:	6839      	ldr	r1, [r7, #0]
 80104cc:	6878      	ldr	r0, [r7, #4]
 80104ce:	f001 fc46 	bl	8011d5e <USBD_CtlError>
          ret = USBD_FAIL;
 80104d2:	2303      	movs	r3, #3
 80104d4:	75fb      	strb	r3, [r7, #23]
          break;
 80104d6:	e002      	b.n	80104de <USBD_CDC_Setup+0x19e>
          break;
 80104d8:	bf00      	nop
 80104da:	e008      	b.n	80104ee <USBD_CDC_Setup+0x1ae>
          break;
 80104dc:	bf00      	nop
      }
      break;
 80104de:	e006      	b.n	80104ee <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80104e0:	6839      	ldr	r1, [r7, #0]
 80104e2:	6878      	ldr	r0, [r7, #4]
 80104e4:	f001 fc3b 	bl	8011d5e <USBD_CtlError>
      ret = USBD_FAIL;
 80104e8:	2303      	movs	r3, #3
 80104ea:	75fb      	strb	r3, [r7, #23]
      break;
 80104ec:	bf00      	nop
  }

  return (uint8_t)ret;
 80104ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80104f0:	4618      	mov	r0, r3
 80104f2:	3718      	adds	r7, #24
 80104f4:	46bd      	mov	sp, r7
 80104f6:	bd80      	pop	{r7, pc}

080104f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b084      	sub	sp, #16
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
 8010500:	460b      	mov	r3, r1
 8010502:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801050a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	32b0      	adds	r2, #176	@ 0xb0
 8010516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d101      	bne.n	8010522 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801051e:	2303      	movs	r3, #3
 8010520:	e065      	b.n	80105ee <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	32b0      	adds	r2, #176	@ 0xb0
 801052c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010530:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8010532:	78fb      	ldrb	r3, [r7, #3]
 8010534:	f003 020f 	and.w	r2, r3, #15
 8010538:	6879      	ldr	r1, [r7, #4]
 801053a:	4613      	mov	r3, r2
 801053c:	009b      	lsls	r3, r3, #2
 801053e:	4413      	add	r3, r2
 8010540:	009b      	lsls	r3, r3, #2
 8010542:	440b      	add	r3, r1
 8010544:	3318      	adds	r3, #24
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d02f      	beq.n	80105ac <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 801054c:	78fb      	ldrb	r3, [r7, #3]
 801054e:	f003 020f 	and.w	r2, r3, #15
 8010552:	6879      	ldr	r1, [r7, #4]
 8010554:	4613      	mov	r3, r2
 8010556:	009b      	lsls	r3, r3, #2
 8010558:	4413      	add	r3, r2
 801055a:	009b      	lsls	r3, r3, #2
 801055c:	440b      	add	r3, r1
 801055e:	3318      	adds	r3, #24
 8010560:	681a      	ldr	r2, [r3, #0]
 8010562:	78fb      	ldrb	r3, [r7, #3]
 8010564:	f003 010f 	and.w	r1, r3, #15
 8010568:	68f8      	ldr	r0, [r7, #12]
 801056a:	460b      	mov	r3, r1
 801056c:	009b      	lsls	r3, r3, #2
 801056e:	440b      	add	r3, r1
 8010570:	00db      	lsls	r3, r3, #3
 8010572:	4403      	add	r3, r0
 8010574:	3320      	adds	r3, #32
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	fbb2 f1f3 	udiv	r1, r2, r3
 801057c:	fb01 f303 	mul.w	r3, r1, r3
 8010580:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8010582:	2b00      	cmp	r3, #0
 8010584:	d112      	bne.n	80105ac <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8010586:	78fb      	ldrb	r3, [r7, #3]
 8010588:	f003 020f 	and.w	r2, r3, #15
 801058c:	6879      	ldr	r1, [r7, #4]
 801058e:	4613      	mov	r3, r2
 8010590:	009b      	lsls	r3, r3, #2
 8010592:	4413      	add	r3, r2
 8010594:	009b      	lsls	r3, r3, #2
 8010596:	440b      	add	r3, r1
 8010598:	3318      	adds	r3, #24
 801059a:	2200      	movs	r2, #0
 801059c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801059e:	78f9      	ldrb	r1, [r7, #3]
 80105a0:	2300      	movs	r3, #0
 80105a2:	2200      	movs	r2, #0
 80105a4:	6878      	ldr	r0, [r7, #4]
 80105a6:	f002 f944 	bl	8012832 <USBD_LL_Transmit>
 80105aa:	e01f      	b.n	80105ec <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80105ac:	68bb      	ldr	r3, [r7, #8]
 80105ae:	2200      	movs	r2, #0
 80105b0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80105ba:	687a      	ldr	r2, [r7, #4]
 80105bc:	33b0      	adds	r3, #176	@ 0xb0
 80105be:	009b      	lsls	r3, r3, #2
 80105c0:	4413      	add	r3, r2
 80105c2:	685b      	ldr	r3, [r3, #4]
 80105c4:	691b      	ldr	r3, [r3, #16]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d010      	beq.n	80105ec <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80105d0:	687a      	ldr	r2, [r7, #4]
 80105d2:	33b0      	adds	r3, #176	@ 0xb0
 80105d4:	009b      	lsls	r3, r3, #2
 80105d6:	4413      	add	r3, r2
 80105d8:	685b      	ldr	r3, [r3, #4]
 80105da:	691b      	ldr	r3, [r3, #16]
 80105dc:	68ba      	ldr	r2, [r7, #8]
 80105de:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80105e2:	68ba      	ldr	r2, [r7, #8]
 80105e4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80105e8:	78fa      	ldrb	r2, [r7, #3]
 80105ea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80105ec:	2300      	movs	r3, #0
}
 80105ee:	4618      	mov	r0, r3
 80105f0:	3710      	adds	r7, #16
 80105f2:	46bd      	mov	sp, r7
 80105f4:	bd80      	pop	{r7, pc}

080105f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80105f6:	b580      	push	{r7, lr}
 80105f8:	b084      	sub	sp, #16
 80105fa:	af00      	add	r7, sp, #0
 80105fc:	6078      	str	r0, [r7, #4]
 80105fe:	460b      	mov	r3, r1
 8010600:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	32b0      	adds	r2, #176	@ 0xb0
 801060c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010610:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	32b0      	adds	r2, #176	@ 0xb0
 801061c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d101      	bne.n	8010628 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8010624:	2303      	movs	r3, #3
 8010626:	e01a      	b.n	801065e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010628:	78fb      	ldrb	r3, [r7, #3]
 801062a:	4619      	mov	r1, r3
 801062c:	6878      	ldr	r0, [r7, #4]
 801062e:	f002 f942 	bl	80128b6 <USBD_LL_GetRxDataSize>
 8010632:	4602      	mov	r2, r0
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010640:	687a      	ldr	r2, [r7, #4]
 8010642:	33b0      	adds	r3, #176	@ 0xb0
 8010644:	009b      	lsls	r3, r3, #2
 8010646:	4413      	add	r3, r2
 8010648:	685b      	ldr	r3, [r3, #4]
 801064a:	68db      	ldr	r3, [r3, #12]
 801064c:	68fa      	ldr	r2, [r7, #12]
 801064e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8010652:	68fa      	ldr	r2, [r7, #12]
 8010654:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8010658:	4611      	mov	r1, r2
 801065a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801065c:	2300      	movs	r3, #0
}
 801065e:	4618      	mov	r0, r3
 8010660:	3710      	adds	r7, #16
 8010662:	46bd      	mov	sp, r7
 8010664:	bd80      	pop	{r7, pc}

08010666 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010666:	b580      	push	{r7, lr}
 8010668:	b084      	sub	sp, #16
 801066a:	af00      	add	r7, sp, #0
 801066c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	32b0      	adds	r2, #176	@ 0xb0
 8010678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801067c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d101      	bne.n	8010688 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010684:	2303      	movs	r3, #3
 8010686:	e024      	b.n	80106d2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801068e:	687a      	ldr	r2, [r7, #4]
 8010690:	33b0      	adds	r3, #176	@ 0xb0
 8010692:	009b      	lsls	r3, r3, #2
 8010694:	4413      	add	r3, r2
 8010696:	685b      	ldr	r3, [r3, #4]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d019      	beq.n	80106d0 <USBD_CDC_EP0_RxReady+0x6a>
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80106a2:	2bff      	cmp	r3, #255	@ 0xff
 80106a4:	d014      	beq.n	80106d0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80106ac:	687a      	ldr	r2, [r7, #4]
 80106ae:	33b0      	adds	r3, #176	@ 0xb0
 80106b0:	009b      	lsls	r3, r3, #2
 80106b2:	4413      	add	r3, r2
 80106b4:	685b      	ldr	r3, [r3, #4]
 80106b6:	689b      	ldr	r3, [r3, #8]
 80106b8:	68fa      	ldr	r2, [r7, #12]
 80106ba:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80106be:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80106c0:	68fa      	ldr	r2, [r7, #12]
 80106c2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80106c6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	22ff      	movs	r2, #255	@ 0xff
 80106cc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80106d0:	2300      	movs	r3, #0
}
 80106d2:	4618      	mov	r0, r3
 80106d4:	3710      	adds	r7, #16
 80106d6:	46bd      	mov	sp, r7
 80106d8:	bd80      	pop	{r7, pc}
	...

080106dc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80106dc:	b580      	push	{r7, lr}
 80106de:	b086      	sub	sp, #24
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80106e4:	2182      	movs	r1, #130	@ 0x82
 80106e6:	4818      	ldr	r0, [pc, #96]	@ (8010748 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80106e8:	f000 fcd9 	bl	801109e <USBD_GetEpDesc>
 80106ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80106ee:	2101      	movs	r1, #1
 80106f0:	4815      	ldr	r0, [pc, #84]	@ (8010748 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80106f2:	f000 fcd4 	bl	801109e <USBD_GetEpDesc>
 80106f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80106f8:	2181      	movs	r1, #129	@ 0x81
 80106fa:	4813      	ldr	r0, [pc, #76]	@ (8010748 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80106fc:	f000 fccf 	bl	801109e <USBD_GetEpDesc>
 8010700:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010702:	697b      	ldr	r3, [r7, #20]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d002      	beq.n	801070e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010708:	697b      	ldr	r3, [r7, #20]
 801070a:	2210      	movs	r2, #16
 801070c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801070e:	693b      	ldr	r3, [r7, #16]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d006      	beq.n	8010722 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010714:	693b      	ldr	r3, [r7, #16]
 8010716:	2200      	movs	r2, #0
 8010718:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801071c:	711a      	strb	r2, [r3, #4]
 801071e:	2200      	movs	r2, #0
 8010720:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d006      	beq.n	8010736 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	2200      	movs	r2, #0
 801072c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010730:	711a      	strb	r2, [r3, #4]
 8010732:	2200      	movs	r2, #0
 8010734:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	2243      	movs	r2, #67	@ 0x43
 801073a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801073c:	4b02      	ldr	r3, [pc, #8]	@ (8010748 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801073e:	4618      	mov	r0, r3
 8010740:	3718      	adds	r7, #24
 8010742:	46bd      	mov	sp, r7
 8010744:	bd80      	pop	{r7, pc}
 8010746:	bf00      	nop
 8010748:	2000007c 	.word	0x2000007c

0801074c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801074c:	b580      	push	{r7, lr}
 801074e:	b086      	sub	sp, #24
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010754:	2182      	movs	r1, #130	@ 0x82
 8010756:	4818      	ldr	r0, [pc, #96]	@ (80107b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010758:	f000 fca1 	bl	801109e <USBD_GetEpDesc>
 801075c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801075e:	2101      	movs	r1, #1
 8010760:	4815      	ldr	r0, [pc, #84]	@ (80107b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010762:	f000 fc9c 	bl	801109e <USBD_GetEpDesc>
 8010766:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010768:	2181      	movs	r1, #129	@ 0x81
 801076a:	4813      	ldr	r0, [pc, #76]	@ (80107b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801076c:	f000 fc97 	bl	801109e <USBD_GetEpDesc>
 8010770:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010772:	697b      	ldr	r3, [r7, #20]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d002      	beq.n	801077e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8010778:	697b      	ldr	r3, [r7, #20]
 801077a:	2210      	movs	r2, #16
 801077c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801077e:	693b      	ldr	r3, [r7, #16]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d006      	beq.n	8010792 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010784:	693b      	ldr	r3, [r7, #16]
 8010786:	2200      	movs	r2, #0
 8010788:	711a      	strb	r2, [r3, #4]
 801078a:	2200      	movs	r2, #0
 801078c:	f042 0202 	orr.w	r2, r2, #2
 8010790:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d006      	beq.n	80107a6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	2200      	movs	r2, #0
 801079c:	711a      	strb	r2, [r3, #4]
 801079e:	2200      	movs	r2, #0
 80107a0:	f042 0202 	orr.w	r2, r2, #2
 80107a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	2243      	movs	r2, #67	@ 0x43
 80107aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80107ac:	4b02      	ldr	r3, [pc, #8]	@ (80107b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80107ae:	4618      	mov	r0, r3
 80107b0:	3718      	adds	r7, #24
 80107b2:	46bd      	mov	sp, r7
 80107b4:	bd80      	pop	{r7, pc}
 80107b6:	bf00      	nop
 80107b8:	2000007c 	.word	0x2000007c

080107bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80107bc:	b580      	push	{r7, lr}
 80107be:	b086      	sub	sp, #24
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80107c4:	2182      	movs	r1, #130	@ 0x82
 80107c6:	4818      	ldr	r0, [pc, #96]	@ (8010828 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80107c8:	f000 fc69 	bl	801109e <USBD_GetEpDesc>
 80107cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80107ce:	2101      	movs	r1, #1
 80107d0:	4815      	ldr	r0, [pc, #84]	@ (8010828 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80107d2:	f000 fc64 	bl	801109e <USBD_GetEpDesc>
 80107d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80107d8:	2181      	movs	r1, #129	@ 0x81
 80107da:	4813      	ldr	r0, [pc, #76]	@ (8010828 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80107dc:	f000 fc5f 	bl	801109e <USBD_GetEpDesc>
 80107e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80107e2:	697b      	ldr	r3, [r7, #20]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d002      	beq.n	80107ee <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80107e8:	697b      	ldr	r3, [r7, #20]
 80107ea:	2210      	movs	r2, #16
 80107ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80107ee:	693b      	ldr	r3, [r7, #16]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d006      	beq.n	8010802 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80107f4:	693b      	ldr	r3, [r7, #16]
 80107f6:	2200      	movs	r2, #0
 80107f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80107fc:	711a      	strb	r2, [r3, #4]
 80107fe:	2200      	movs	r2, #0
 8010800:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d006      	beq.n	8010816 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	2200      	movs	r2, #0
 801080c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010810:	711a      	strb	r2, [r3, #4]
 8010812:	2200      	movs	r2, #0
 8010814:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	2243      	movs	r2, #67	@ 0x43
 801081a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801081c:	4b02      	ldr	r3, [pc, #8]	@ (8010828 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801081e:	4618      	mov	r0, r3
 8010820:	3718      	adds	r7, #24
 8010822:	46bd      	mov	sp, r7
 8010824:	bd80      	pop	{r7, pc}
 8010826:	bf00      	nop
 8010828:	2000007c 	.word	0x2000007c

0801082c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801082c:	b480      	push	{r7}
 801082e:	b083      	sub	sp, #12
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	220a      	movs	r2, #10
 8010838:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801083a:	4b03      	ldr	r3, [pc, #12]	@ (8010848 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801083c:	4618      	mov	r0, r3
 801083e:	370c      	adds	r7, #12
 8010840:	46bd      	mov	sp, r7
 8010842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010846:	4770      	bx	lr
 8010848:	20000038 	.word	0x20000038

0801084c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801084c:	b480      	push	{r7}
 801084e:	b083      	sub	sp, #12
 8010850:	af00      	add	r7, sp, #0
 8010852:	6078      	str	r0, [r7, #4]
 8010854:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010856:	683b      	ldr	r3, [r7, #0]
 8010858:	2b00      	cmp	r3, #0
 801085a:	d101      	bne.n	8010860 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801085c:	2303      	movs	r3, #3
 801085e:	e009      	b.n	8010874 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010866:	687a      	ldr	r2, [r7, #4]
 8010868:	33b0      	adds	r3, #176	@ 0xb0
 801086a:	009b      	lsls	r3, r3, #2
 801086c:	4413      	add	r3, r2
 801086e:	683a      	ldr	r2, [r7, #0]
 8010870:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8010872:	2300      	movs	r3, #0
}
 8010874:	4618      	mov	r0, r3
 8010876:	370c      	adds	r7, #12
 8010878:	46bd      	mov	sp, r7
 801087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087e:	4770      	bx	lr

08010880 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8010880:	b480      	push	{r7}
 8010882:	b087      	sub	sp, #28
 8010884:	af00      	add	r7, sp, #0
 8010886:	60f8      	str	r0, [r7, #12]
 8010888:	60b9      	str	r1, [r7, #8]
 801088a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	32b0      	adds	r2, #176	@ 0xb0
 8010896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801089a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 801089c:	697b      	ldr	r3, [r7, #20]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d101      	bne.n	80108a6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80108a2:	2303      	movs	r3, #3
 80108a4:	e008      	b.n	80108b8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80108a6:	697b      	ldr	r3, [r7, #20]
 80108a8:	68ba      	ldr	r2, [r7, #8]
 80108aa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80108ae:	697b      	ldr	r3, [r7, #20]
 80108b0:	687a      	ldr	r2, [r7, #4]
 80108b2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80108b6:	2300      	movs	r3, #0
}
 80108b8:	4618      	mov	r0, r3
 80108ba:	371c      	adds	r7, #28
 80108bc:	46bd      	mov	sp, r7
 80108be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c2:	4770      	bx	lr

080108c4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80108c4:	b480      	push	{r7}
 80108c6:	b085      	sub	sp, #20
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
 80108cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	32b0      	adds	r2, #176	@ 0xb0
 80108d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d101      	bne.n	80108e8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80108e4:	2303      	movs	r3, #3
 80108e6:	e004      	b.n	80108f2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	683a      	ldr	r2, [r7, #0]
 80108ec:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80108f0:	2300      	movs	r3, #0
}
 80108f2:	4618      	mov	r0, r3
 80108f4:	3714      	adds	r7, #20
 80108f6:	46bd      	mov	sp, r7
 80108f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fc:	4770      	bx	lr
	...

08010900 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8010900:	b580      	push	{r7, lr}
 8010902:	b084      	sub	sp, #16
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	32b0      	adds	r2, #176	@ 0xb0
 8010912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010916:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8010918:	2301      	movs	r3, #1
 801091a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 801091c:	68bb      	ldr	r3, [r7, #8]
 801091e:	2b00      	cmp	r3, #0
 8010920:	d101      	bne.n	8010926 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8010922:	2303      	movs	r3, #3
 8010924:	e025      	b.n	8010972 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8010926:	68bb      	ldr	r3, [r7, #8]
 8010928:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801092c:	2b00      	cmp	r3, #0
 801092e:	d11f      	bne.n	8010970 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8010930:	68bb      	ldr	r3, [r7, #8]
 8010932:	2201      	movs	r2, #1
 8010934:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8010938:	4b10      	ldr	r3, [pc, #64]	@ (801097c <USBD_CDC_TransmitPacket+0x7c>)
 801093a:	781b      	ldrb	r3, [r3, #0]
 801093c:	f003 020f 	and.w	r2, r3, #15
 8010940:	68bb      	ldr	r3, [r7, #8]
 8010942:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8010946:	6878      	ldr	r0, [r7, #4]
 8010948:	4613      	mov	r3, r2
 801094a:	009b      	lsls	r3, r3, #2
 801094c:	4413      	add	r3, r2
 801094e:	009b      	lsls	r3, r3, #2
 8010950:	4403      	add	r3, r0
 8010952:	3318      	adds	r3, #24
 8010954:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8010956:	4b09      	ldr	r3, [pc, #36]	@ (801097c <USBD_CDC_TransmitPacket+0x7c>)
 8010958:	7819      	ldrb	r1, [r3, #0]
 801095a:	68bb      	ldr	r3, [r7, #8]
 801095c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8010960:	68bb      	ldr	r3, [r7, #8]
 8010962:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8010966:	6878      	ldr	r0, [r7, #4]
 8010968:	f001 ff63 	bl	8012832 <USBD_LL_Transmit>

    ret = USBD_OK;
 801096c:	2300      	movs	r3, #0
 801096e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8010970:	7bfb      	ldrb	r3, [r7, #15]
}
 8010972:	4618      	mov	r0, r3
 8010974:	3710      	adds	r7, #16
 8010976:	46bd      	mov	sp, r7
 8010978:	bd80      	pop	{r7, pc}
 801097a:	bf00      	nop
 801097c:	200000bf 	.word	0x200000bf

08010980 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b084      	sub	sp, #16
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	32b0      	adds	r2, #176	@ 0xb0
 8010992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010996:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	32b0      	adds	r2, #176	@ 0xb0
 80109a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d101      	bne.n	80109ae <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80109aa:	2303      	movs	r3, #3
 80109ac:	e018      	b.n	80109e0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	7c1b      	ldrb	r3, [r3, #16]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d10a      	bne.n	80109cc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80109b6:	4b0c      	ldr	r3, [pc, #48]	@ (80109e8 <USBD_CDC_ReceivePacket+0x68>)
 80109b8:	7819      	ldrb	r1, [r3, #0]
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80109c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80109c4:	6878      	ldr	r0, [r7, #4]
 80109c6:	f001 ff55 	bl	8012874 <USBD_LL_PrepareReceive>
 80109ca:	e008      	b.n	80109de <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80109cc:	4b06      	ldr	r3, [pc, #24]	@ (80109e8 <USBD_CDC_ReceivePacket+0x68>)
 80109ce:	7819      	ldrb	r1, [r3, #0]
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80109d6:	2340      	movs	r3, #64	@ 0x40
 80109d8:	6878      	ldr	r0, [r7, #4]
 80109da:	f001 ff4b 	bl	8012874 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80109de:	2300      	movs	r3, #0
}
 80109e0:	4618      	mov	r0, r3
 80109e2:	3710      	adds	r7, #16
 80109e4:	46bd      	mov	sp, r7
 80109e6:	bd80      	pop	{r7, pc}
 80109e8:	200000c0 	.word	0x200000c0

080109ec <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b086      	sub	sp, #24
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	60f8      	str	r0, [r7, #12]
 80109f4:	60b9      	str	r1, [r7, #8]
 80109f6:	4613      	mov	r3, r2
 80109f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d10a      	bne.n	8010a16 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8010a00:	4817      	ldr	r0, [pc, #92]	@ (8010a60 <USBD_Init+0x74>)
 8010a02:	f002 fd03 	bl	801340c <iprintf>
 8010a06:	4817      	ldr	r0, [pc, #92]	@ (8010a64 <USBD_Init+0x78>)
 8010a08:	f002 fd00 	bl	801340c <iprintf>
 8010a0c:	200a      	movs	r0, #10
 8010a0e:	f002 fd0f 	bl	8013430 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010a12:	2303      	movs	r3, #3
 8010a14:	e01f      	b.n	8010a56 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	2200      	movs	r2, #0
 8010a1a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	2200      	movs	r2, #0
 8010a22:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	2200      	movs	r2, #0
 8010a2a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010a2e:	68bb      	ldr	r3, [r7, #8]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d003      	beq.n	8010a3c <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	68ba      	ldr	r2, [r7, #8]
 8010a38:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	2201      	movs	r2, #1
 8010a40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	79fa      	ldrb	r2, [r7, #7]
 8010a48:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010a4a:	68f8      	ldr	r0, [r7, #12]
 8010a4c:	f001 fda6 	bl	801259c <USBD_LL_Init>
 8010a50:	4603      	mov	r3, r0
 8010a52:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010a54:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a56:	4618      	mov	r0, r3
 8010a58:	3718      	adds	r7, #24
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	bd80      	pop	{r7, pc}
 8010a5e:	bf00      	nop
 8010a60:	080153c4 	.word	0x080153c4
 8010a64:	080153cc 	.word	0x080153cc

08010a68 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b084      	sub	sp, #16
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
 8010a70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010a72:	2300      	movs	r3, #0
 8010a74:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8010a76:	683b      	ldr	r3, [r7, #0]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d10a      	bne.n	8010a92 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8010a7c:	481a      	ldr	r0, [pc, #104]	@ (8010ae8 <USBD_RegisterClass+0x80>)
 8010a7e:	f002 fcc5 	bl	801340c <iprintf>
 8010a82:	481a      	ldr	r0, [pc, #104]	@ (8010aec <USBD_RegisterClass+0x84>)
 8010a84:	f002 fcc2 	bl	801340c <iprintf>
 8010a88:	200a      	movs	r0, #10
 8010a8a:	f002 fcd1 	bl	8013430 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010a8e:	2303      	movs	r3, #3
 8010a90:	e025      	b.n	8010ade <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	683a      	ldr	r2, [r7, #0]
 8010a96:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	32ae      	adds	r2, #174	@ 0xae
 8010aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d00f      	beq.n	8010ace <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	32ae      	adds	r2, #174	@ 0xae
 8010ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010abe:	f107 020e 	add.w	r2, r7, #14
 8010ac2:	4610      	mov	r0, r2
 8010ac4:	4798      	blx	r3
 8010ac6:	4602      	mov	r2, r0
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010ad4:	1c5a      	adds	r2, r3, #1
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8010adc:	2300      	movs	r3, #0
}
 8010ade:	4618      	mov	r0, r3
 8010ae0:	3710      	adds	r7, #16
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	bd80      	pop	{r7, pc}
 8010ae6:	bf00      	nop
 8010ae8:	080153c4 	.word	0x080153c4
 8010aec:	080153e4 	.word	0x080153e4

08010af0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b082      	sub	sp, #8
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010af8:	6878      	ldr	r0, [r7, #4]
 8010afa:	f001 fdb1 	bl	8012660 <USBD_LL_Start>
 8010afe:	4603      	mov	r3, r0
}
 8010b00:	4618      	mov	r0, r3
 8010b02:	3708      	adds	r7, #8
 8010b04:	46bd      	mov	sp, r7
 8010b06:	bd80      	pop	{r7, pc}

08010b08 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8010b08:	b480      	push	{r7}
 8010b0a:	b083      	sub	sp, #12
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010b10:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8010b12:	4618      	mov	r0, r3
 8010b14:	370c      	adds	r7, #12
 8010b16:	46bd      	mov	sp, r7
 8010b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b1c:	4770      	bx	lr

08010b1e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010b1e:	b580      	push	{r7, lr}
 8010b20:	b084      	sub	sp, #16
 8010b22:	af00      	add	r7, sp, #0
 8010b24:	6078      	str	r0, [r7, #4]
 8010b26:	460b      	mov	r3, r1
 8010b28:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d009      	beq.n	8010b4c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	78fa      	ldrb	r2, [r7, #3]
 8010b42:	4611      	mov	r1, r2
 8010b44:	6878      	ldr	r0, [r7, #4]
 8010b46:	4798      	blx	r3
 8010b48:	4603      	mov	r3, r0
 8010b4a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b4e:	4618      	mov	r0, r3
 8010b50:	3710      	adds	r7, #16
 8010b52:	46bd      	mov	sp, r7
 8010b54:	bd80      	pop	{r7, pc}

08010b56 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010b56:	b580      	push	{r7, lr}
 8010b58:	b084      	sub	sp, #16
 8010b5a:	af00      	add	r7, sp, #0
 8010b5c:	6078      	str	r0, [r7, #4]
 8010b5e:	460b      	mov	r3, r1
 8010b60:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010b62:	2300      	movs	r3, #0
 8010b64:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010b6c:	685b      	ldr	r3, [r3, #4]
 8010b6e:	78fa      	ldrb	r2, [r7, #3]
 8010b70:	4611      	mov	r1, r2
 8010b72:	6878      	ldr	r0, [r7, #4]
 8010b74:	4798      	blx	r3
 8010b76:	4603      	mov	r3, r0
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d001      	beq.n	8010b80 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8010b7c:	2303      	movs	r3, #3
 8010b7e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b82:	4618      	mov	r0, r3
 8010b84:	3710      	adds	r7, #16
 8010b86:	46bd      	mov	sp, r7
 8010b88:	bd80      	pop	{r7, pc}

08010b8a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010b8a:	b580      	push	{r7, lr}
 8010b8c:	b084      	sub	sp, #16
 8010b8e:	af00      	add	r7, sp, #0
 8010b90:	6078      	str	r0, [r7, #4]
 8010b92:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010b9a:	6839      	ldr	r1, [r7, #0]
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	f001 f8a4 	bl	8011cea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	2201      	movs	r2, #1
 8010ba6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8010bb0:	461a      	mov	r2, r3
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010bbe:	f003 031f 	and.w	r3, r3, #31
 8010bc2:	2b02      	cmp	r3, #2
 8010bc4:	d01a      	beq.n	8010bfc <USBD_LL_SetupStage+0x72>
 8010bc6:	2b02      	cmp	r3, #2
 8010bc8:	d822      	bhi.n	8010c10 <USBD_LL_SetupStage+0x86>
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d002      	beq.n	8010bd4 <USBD_LL_SetupStage+0x4a>
 8010bce:	2b01      	cmp	r3, #1
 8010bd0:	d00a      	beq.n	8010be8 <USBD_LL_SetupStage+0x5e>
 8010bd2:	e01d      	b.n	8010c10 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010bda:	4619      	mov	r1, r3
 8010bdc:	6878      	ldr	r0, [r7, #4]
 8010bde:	f000 fad1 	bl	8011184 <USBD_StdDevReq>
 8010be2:	4603      	mov	r3, r0
 8010be4:	73fb      	strb	r3, [r7, #15]
      break;
 8010be6:	e020      	b.n	8010c2a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010bee:	4619      	mov	r1, r3
 8010bf0:	6878      	ldr	r0, [r7, #4]
 8010bf2:	f000 fb39 	bl	8011268 <USBD_StdItfReq>
 8010bf6:	4603      	mov	r3, r0
 8010bf8:	73fb      	strb	r3, [r7, #15]
      break;
 8010bfa:	e016      	b.n	8010c2a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010c02:	4619      	mov	r1, r3
 8010c04:	6878      	ldr	r0, [r7, #4]
 8010c06:	f000 fb9b 	bl	8011340 <USBD_StdEPReq>
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	73fb      	strb	r3, [r7, #15]
      break;
 8010c0e:	e00c      	b.n	8010c2a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010c16:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8010c1a:	b2db      	uxtb	r3, r3
 8010c1c:	4619      	mov	r1, r3
 8010c1e:	6878      	ldr	r0, [r7, #4]
 8010c20:	f001 fd7e 	bl	8012720 <USBD_LL_StallEP>
 8010c24:	4603      	mov	r3, r0
 8010c26:	73fb      	strb	r3, [r7, #15]
      break;
 8010c28:	bf00      	nop
  }

  return ret;
 8010c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	3710      	adds	r7, #16
 8010c30:	46bd      	mov	sp, r7
 8010c32:	bd80      	pop	{r7, pc}

08010c34 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b086      	sub	sp, #24
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	60f8      	str	r0, [r7, #12]
 8010c3c:	460b      	mov	r3, r1
 8010c3e:	607a      	str	r2, [r7, #4]
 8010c40:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8010c42:	2300      	movs	r3, #0
 8010c44:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8010c46:	7afb      	ldrb	r3, [r7, #11]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d16e      	bne.n	8010d2a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8010c52:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8010c5a:	2b03      	cmp	r3, #3
 8010c5c:	f040 8098 	bne.w	8010d90 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8010c60:	693b      	ldr	r3, [r7, #16]
 8010c62:	689a      	ldr	r2, [r3, #8]
 8010c64:	693b      	ldr	r3, [r7, #16]
 8010c66:	68db      	ldr	r3, [r3, #12]
 8010c68:	429a      	cmp	r2, r3
 8010c6a:	d913      	bls.n	8010c94 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8010c6c:	693b      	ldr	r3, [r7, #16]
 8010c6e:	689a      	ldr	r2, [r3, #8]
 8010c70:	693b      	ldr	r3, [r7, #16]
 8010c72:	68db      	ldr	r3, [r3, #12]
 8010c74:	1ad2      	subs	r2, r2, r3
 8010c76:	693b      	ldr	r3, [r7, #16]
 8010c78:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010c7a:	693b      	ldr	r3, [r7, #16]
 8010c7c:	68da      	ldr	r2, [r3, #12]
 8010c7e:	693b      	ldr	r3, [r7, #16]
 8010c80:	689b      	ldr	r3, [r3, #8]
 8010c82:	4293      	cmp	r3, r2
 8010c84:	bf28      	it	cs
 8010c86:	4613      	movcs	r3, r2
 8010c88:	461a      	mov	r2, r3
 8010c8a:	6879      	ldr	r1, [r7, #4]
 8010c8c:	68f8      	ldr	r0, [r7, #12]
 8010c8e:	f001 f92c 	bl	8011eea <USBD_CtlContinueRx>
 8010c92:	e07d      	b.n	8010d90 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010c9a:	f003 031f 	and.w	r3, r3, #31
 8010c9e:	2b02      	cmp	r3, #2
 8010ca0:	d014      	beq.n	8010ccc <USBD_LL_DataOutStage+0x98>
 8010ca2:	2b02      	cmp	r3, #2
 8010ca4:	d81d      	bhi.n	8010ce2 <USBD_LL_DataOutStage+0xae>
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d002      	beq.n	8010cb0 <USBD_LL_DataOutStage+0x7c>
 8010caa:	2b01      	cmp	r3, #1
 8010cac:	d003      	beq.n	8010cb6 <USBD_LL_DataOutStage+0x82>
 8010cae:	e018      	b.n	8010ce2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	75bb      	strb	r3, [r7, #22]
            break;
 8010cb4:	e018      	b.n	8010ce8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8010cbc:	b2db      	uxtb	r3, r3
 8010cbe:	4619      	mov	r1, r3
 8010cc0:	68f8      	ldr	r0, [r7, #12]
 8010cc2:	f000 f9d2 	bl	801106a <USBD_CoreFindIF>
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	75bb      	strb	r3, [r7, #22]
            break;
 8010cca:	e00d      	b.n	8010ce8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8010cd2:	b2db      	uxtb	r3, r3
 8010cd4:	4619      	mov	r1, r3
 8010cd6:	68f8      	ldr	r0, [r7, #12]
 8010cd8:	f000 f9d4 	bl	8011084 <USBD_CoreFindEP>
 8010cdc:	4603      	mov	r3, r0
 8010cde:	75bb      	strb	r3, [r7, #22]
            break;
 8010ce0:	e002      	b.n	8010ce8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	75bb      	strb	r3, [r7, #22]
            break;
 8010ce6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8010ce8:	7dbb      	ldrb	r3, [r7, #22]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d119      	bne.n	8010d22 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010cf4:	b2db      	uxtb	r3, r3
 8010cf6:	2b03      	cmp	r3, #3
 8010cf8:	d113      	bne.n	8010d22 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8010cfa:	7dba      	ldrb	r2, [r7, #22]
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	32ae      	adds	r2, #174	@ 0xae
 8010d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d04:	691b      	ldr	r3, [r3, #16]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d00b      	beq.n	8010d22 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8010d0a:	7dba      	ldrb	r2, [r7, #22]
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8010d12:	7dba      	ldrb	r2, [r7, #22]
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	32ae      	adds	r2, #174	@ 0xae
 8010d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d1c:	691b      	ldr	r3, [r3, #16]
 8010d1e:	68f8      	ldr	r0, [r7, #12]
 8010d20:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8010d22:	68f8      	ldr	r0, [r7, #12]
 8010d24:	f001 f8f2 	bl	8011f0c <USBD_CtlSendStatus>
 8010d28:	e032      	b.n	8010d90 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8010d2a:	7afb      	ldrb	r3, [r7, #11]
 8010d2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010d30:	b2db      	uxtb	r3, r3
 8010d32:	4619      	mov	r1, r3
 8010d34:	68f8      	ldr	r0, [r7, #12]
 8010d36:	f000 f9a5 	bl	8011084 <USBD_CoreFindEP>
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010d3e:	7dbb      	ldrb	r3, [r7, #22]
 8010d40:	2bff      	cmp	r3, #255	@ 0xff
 8010d42:	d025      	beq.n	8010d90 <USBD_LL_DataOutStage+0x15c>
 8010d44:	7dbb      	ldrb	r3, [r7, #22]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d122      	bne.n	8010d90 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010d50:	b2db      	uxtb	r3, r3
 8010d52:	2b03      	cmp	r3, #3
 8010d54:	d117      	bne.n	8010d86 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8010d56:	7dba      	ldrb	r2, [r7, #22]
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	32ae      	adds	r2, #174	@ 0xae
 8010d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d60:	699b      	ldr	r3, [r3, #24]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d00f      	beq.n	8010d86 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8010d66:	7dba      	ldrb	r2, [r7, #22]
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8010d6e:	7dba      	ldrb	r2, [r7, #22]
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	32ae      	adds	r2, #174	@ 0xae
 8010d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d78:	699b      	ldr	r3, [r3, #24]
 8010d7a:	7afa      	ldrb	r2, [r7, #11]
 8010d7c:	4611      	mov	r1, r2
 8010d7e:	68f8      	ldr	r0, [r7, #12]
 8010d80:	4798      	blx	r3
 8010d82:	4603      	mov	r3, r0
 8010d84:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8010d86:	7dfb      	ldrb	r3, [r7, #23]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d001      	beq.n	8010d90 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8010d8c:	7dfb      	ldrb	r3, [r7, #23]
 8010d8e:	e000      	b.n	8010d92 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8010d90:	2300      	movs	r3, #0
}
 8010d92:	4618      	mov	r0, r3
 8010d94:	3718      	adds	r7, #24
 8010d96:	46bd      	mov	sp, r7
 8010d98:	bd80      	pop	{r7, pc}

08010d9a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010d9a:	b580      	push	{r7, lr}
 8010d9c:	b086      	sub	sp, #24
 8010d9e:	af00      	add	r7, sp, #0
 8010da0:	60f8      	str	r0, [r7, #12]
 8010da2:	460b      	mov	r3, r1
 8010da4:	607a      	str	r2, [r7, #4]
 8010da6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8010da8:	7afb      	ldrb	r3, [r7, #11]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d16f      	bne.n	8010e8e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	3314      	adds	r3, #20
 8010db2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8010dba:	2b02      	cmp	r3, #2
 8010dbc:	d15a      	bne.n	8010e74 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8010dbe:	693b      	ldr	r3, [r7, #16]
 8010dc0:	689a      	ldr	r2, [r3, #8]
 8010dc2:	693b      	ldr	r3, [r7, #16]
 8010dc4:	68db      	ldr	r3, [r3, #12]
 8010dc6:	429a      	cmp	r2, r3
 8010dc8:	d914      	bls.n	8010df4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010dca:	693b      	ldr	r3, [r7, #16]
 8010dcc:	689a      	ldr	r2, [r3, #8]
 8010dce:	693b      	ldr	r3, [r7, #16]
 8010dd0:	68db      	ldr	r3, [r3, #12]
 8010dd2:	1ad2      	subs	r2, r2, r3
 8010dd4:	693b      	ldr	r3, [r7, #16]
 8010dd6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010dd8:	693b      	ldr	r3, [r7, #16]
 8010dda:	689b      	ldr	r3, [r3, #8]
 8010ddc:	461a      	mov	r2, r3
 8010dde:	6879      	ldr	r1, [r7, #4]
 8010de0:	68f8      	ldr	r0, [r7, #12]
 8010de2:	f001 f854 	bl	8011e8e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010de6:	2300      	movs	r3, #0
 8010de8:	2200      	movs	r2, #0
 8010dea:	2100      	movs	r1, #0
 8010dec:	68f8      	ldr	r0, [r7, #12]
 8010dee:	f001 fd41 	bl	8012874 <USBD_LL_PrepareReceive>
 8010df2:	e03f      	b.n	8010e74 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010df4:	693b      	ldr	r3, [r7, #16]
 8010df6:	68da      	ldr	r2, [r3, #12]
 8010df8:	693b      	ldr	r3, [r7, #16]
 8010dfa:	689b      	ldr	r3, [r3, #8]
 8010dfc:	429a      	cmp	r2, r3
 8010dfe:	d11c      	bne.n	8010e3a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010e00:	693b      	ldr	r3, [r7, #16]
 8010e02:	685a      	ldr	r2, [r3, #4]
 8010e04:	693b      	ldr	r3, [r7, #16]
 8010e06:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010e08:	429a      	cmp	r2, r3
 8010e0a:	d316      	bcc.n	8010e3a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010e0c:	693b      	ldr	r3, [r7, #16]
 8010e0e:	685a      	ldr	r2, [r3, #4]
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010e16:	429a      	cmp	r2, r3
 8010e18:	d20f      	bcs.n	8010e3a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	2100      	movs	r1, #0
 8010e1e:	68f8      	ldr	r0, [r7, #12]
 8010e20:	f001 f835 	bl	8011e8e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	2200      	movs	r2, #0
 8010e28:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	2200      	movs	r2, #0
 8010e30:	2100      	movs	r1, #0
 8010e32:	68f8      	ldr	r0, [r7, #12]
 8010e34:	f001 fd1e 	bl	8012874 <USBD_LL_PrepareReceive>
 8010e38:	e01c      	b.n	8010e74 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010e40:	b2db      	uxtb	r3, r3
 8010e42:	2b03      	cmp	r3, #3
 8010e44:	d10f      	bne.n	8010e66 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010e4c:	68db      	ldr	r3, [r3, #12]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d009      	beq.n	8010e66 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	2200      	movs	r2, #0
 8010e56:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010e60:	68db      	ldr	r3, [r3, #12]
 8010e62:	68f8      	ldr	r0, [r7, #12]
 8010e64:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010e66:	2180      	movs	r1, #128	@ 0x80
 8010e68:	68f8      	ldr	r0, [r7, #12]
 8010e6a:	f001 fc59 	bl	8012720 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010e6e:	68f8      	ldr	r0, [r7, #12]
 8010e70:	f001 f85f 	bl	8011f32 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d03a      	beq.n	8010ef4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8010e7e:	68f8      	ldr	r0, [r7, #12]
 8010e80:	f7ff fe42 	bl	8010b08 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	2200      	movs	r2, #0
 8010e88:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8010e8c:	e032      	b.n	8010ef4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8010e8e:	7afb      	ldrb	r3, [r7, #11]
 8010e90:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010e94:	b2db      	uxtb	r3, r3
 8010e96:	4619      	mov	r1, r3
 8010e98:	68f8      	ldr	r0, [r7, #12]
 8010e9a:	f000 f8f3 	bl	8011084 <USBD_CoreFindEP>
 8010e9e:	4603      	mov	r3, r0
 8010ea0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010ea2:	7dfb      	ldrb	r3, [r7, #23]
 8010ea4:	2bff      	cmp	r3, #255	@ 0xff
 8010ea6:	d025      	beq.n	8010ef4 <USBD_LL_DataInStage+0x15a>
 8010ea8:	7dfb      	ldrb	r3, [r7, #23]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d122      	bne.n	8010ef4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010eb4:	b2db      	uxtb	r3, r3
 8010eb6:	2b03      	cmp	r3, #3
 8010eb8:	d11c      	bne.n	8010ef4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8010eba:	7dfa      	ldrb	r2, [r7, #23]
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	32ae      	adds	r2, #174	@ 0xae
 8010ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ec4:	695b      	ldr	r3, [r3, #20]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d014      	beq.n	8010ef4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8010eca:	7dfa      	ldrb	r2, [r7, #23]
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8010ed2:	7dfa      	ldrb	r2, [r7, #23]
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	32ae      	adds	r2, #174	@ 0xae
 8010ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010edc:	695b      	ldr	r3, [r3, #20]
 8010ede:	7afa      	ldrb	r2, [r7, #11]
 8010ee0:	4611      	mov	r1, r2
 8010ee2:	68f8      	ldr	r0, [r7, #12]
 8010ee4:	4798      	blx	r3
 8010ee6:	4603      	mov	r3, r0
 8010ee8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8010eea:	7dbb      	ldrb	r3, [r7, #22]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d001      	beq.n	8010ef4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8010ef0:	7dbb      	ldrb	r3, [r7, #22]
 8010ef2:	e000      	b.n	8010ef6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8010ef4:	2300      	movs	r3, #0
}
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	3718      	adds	r7, #24
 8010efa:	46bd      	mov	sp, r7
 8010efc:	bd80      	pop	{r7, pc}

08010efe <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010efe:	b580      	push	{r7, lr}
 8010f00:	b084      	sub	sp, #16
 8010f02:	af00      	add	r7, sp, #0
 8010f04:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8010f06:	2300      	movs	r3, #0
 8010f08:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	2201      	movs	r2, #1
 8010f0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	2200      	movs	r2, #0
 8010f16:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	2200      	movs	r2, #0
 8010f1e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	2200      	movs	r2, #0
 8010f24:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	2200      	movs	r2, #0
 8010f2c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d014      	beq.n	8010f64 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010f40:	685b      	ldr	r3, [r3, #4]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d00e      	beq.n	8010f64 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010f4c:	685b      	ldr	r3, [r3, #4]
 8010f4e:	687a      	ldr	r2, [r7, #4]
 8010f50:	6852      	ldr	r2, [r2, #4]
 8010f52:	b2d2      	uxtb	r2, r2
 8010f54:	4611      	mov	r1, r2
 8010f56:	6878      	ldr	r0, [r7, #4]
 8010f58:	4798      	blx	r3
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d001      	beq.n	8010f64 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8010f60:	2303      	movs	r3, #3
 8010f62:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010f64:	2340      	movs	r3, #64	@ 0x40
 8010f66:	2200      	movs	r2, #0
 8010f68:	2100      	movs	r1, #0
 8010f6a:	6878      	ldr	r0, [r7, #4]
 8010f6c:	f001 fb93 	bl	8012696 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	2201      	movs	r2, #1
 8010f74:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	2240      	movs	r2, #64	@ 0x40
 8010f7c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010f80:	2340      	movs	r3, #64	@ 0x40
 8010f82:	2200      	movs	r2, #0
 8010f84:	2180      	movs	r1, #128	@ 0x80
 8010f86:	6878      	ldr	r0, [r7, #4]
 8010f88:	f001 fb85 	bl	8012696 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	2201      	movs	r2, #1
 8010f90:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	2240      	movs	r2, #64	@ 0x40
 8010f96:	621a      	str	r2, [r3, #32]

  return ret;
 8010f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	3710      	adds	r7, #16
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	bd80      	pop	{r7, pc}

08010fa2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010fa2:	b480      	push	{r7}
 8010fa4:	b083      	sub	sp, #12
 8010fa6:	af00      	add	r7, sp, #0
 8010fa8:	6078      	str	r0, [r7, #4]
 8010faa:	460b      	mov	r3, r1
 8010fac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	78fa      	ldrb	r2, [r7, #3]
 8010fb2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010fb4:	2300      	movs	r3, #0
}
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	370c      	adds	r7, #12
 8010fba:	46bd      	mov	sp, r7
 8010fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc0:	4770      	bx	lr

08010fc2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010fc2:	b480      	push	{r7}
 8010fc4:	b083      	sub	sp, #12
 8010fc6:	af00      	add	r7, sp, #0
 8010fc8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010fd0:	b2db      	uxtb	r3, r3
 8010fd2:	2b04      	cmp	r3, #4
 8010fd4:	d006      	beq.n	8010fe4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010fdc:	b2da      	uxtb	r2, r3
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	2204      	movs	r2, #4
 8010fe8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8010fec:	2300      	movs	r3, #0
}
 8010fee:	4618      	mov	r0, r3
 8010ff0:	370c      	adds	r7, #12
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff8:	4770      	bx	lr

08010ffa <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010ffa:	b480      	push	{r7}
 8010ffc:	b083      	sub	sp, #12
 8010ffe:	af00      	add	r7, sp, #0
 8011000:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011008:	b2db      	uxtb	r3, r3
 801100a:	2b04      	cmp	r3, #4
 801100c:	d106      	bne.n	801101c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8011014:	b2da      	uxtb	r2, r3
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 801101c:	2300      	movs	r3, #0
}
 801101e:	4618      	mov	r0, r3
 8011020:	370c      	adds	r7, #12
 8011022:	46bd      	mov	sp, r7
 8011024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011028:	4770      	bx	lr

0801102a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801102a:	b580      	push	{r7, lr}
 801102c:	b082      	sub	sp, #8
 801102e:	af00      	add	r7, sp, #0
 8011030:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011038:	b2db      	uxtb	r3, r3
 801103a:	2b03      	cmp	r3, #3
 801103c:	d110      	bne.n	8011060 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011044:	2b00      	cmp	r3, #0
 8011046:	d00b      	beq.n	8011060 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801104e:	69db      	ldr	r3, [r3, #28]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d005      	beq.n	8011060 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801105a:	69db      	ldr	r3, [r3, #28]
 801105c:	6878      	ldr	r0, [r7, #4]
 801105e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8011060:	2300      	movs	r3, #0
}
 8011062:	4618      	mov	r0, r3
 8011064:	3708      	adds	r7, #8
 8011066:	46bd      	mov	sp, r7
 8011068:	bd80      	pop	{r7, pc}

0801106a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801106a:	b480      	push	{r7}
 801106c:	b083      	sub	sp, #12
 801106e:	af00      	add	r7, sp, #0
 8011070:	6078      	str	r0, [r7, #4]
 8011072:	460b      	mov	r3, r1
 8011074:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011076:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011078:	4618      	mov	r0, r3
 801107a:	370c      	adds	r7, #12
 801107c:	46bd      	mov	sp, r7
 801107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011082:	4770      	bx	lr

08011084 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011084:	b480      	push	{r7}
 8011086:	b083      	sub	sp, #12
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]
 801108c:	460b      	mov	r3, r1
 801108e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011090:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011092:	4618      	mov	r0, r3
 8011094:	370c      	adds	r7, #12
 8011096:	46bd      	mov	sp, r7
 8011098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109c:	4770      	bx	lr

0801109e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801109e:	b580      	push	{r7, lr}
 80110a0:	b086      	sub	sp, #24
 80110a2:	af00      	add	r7, sp, #0
 80110a4:	6078      	str	r0, [r7, #4]
 80110a6:	460b      	mov	r3, r1
 80110a8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80110b2:	2300      	movs	r3, #0
 80110b4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	885b      	ldrh	r3, [r3, #2]
 80110ba:	b29b      	uxth	r3, r3
 80110bc:	68fa      	ldr	r2, [r7, #12]
 80110be:	7812      	ldrb	r2, [r2, #0]
 80110c0:	4293      	cmp	r3, r2
 80110c2:	d91f      	bls.n	8011104 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	781b      	ldrb	r3, [r3, #0]
 80110c8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80110ca:	e013      	b.n	80110f4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80110cc:	f107 030a 	add.w	r3, r7, #10
 80110d0:	4619      	mov	r1, r3
 80110d2:	6978      	ldr	r0, [r7, #20]
 80110d4:	f000 f81b 	bl	801110e <USBD_GetNextDesc>
 80110d8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80110da:	697b      	ldr	r3, [r7, #20]
 80110dc:	785b      	ldrb	r3, [r3, #1]
 80110de:	2b05      	cmp	r3, #5
 80110e0:	d108      	bne.n	80110f4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80110e2:	697b      	ldr	r3, [r7, #20]
 80110e4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80110e6:	693b      	ldr	r3, [r7, #16]
 80110e8:	789b      	ldrb	r3, [r3, #2]
 80110ea:	78fa      	ldrb	r2, [r7, #3]
 80110ec:	429a      	cmp	r2, r3
 80110ee:	d008      	beq.n	8011102 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80110f0:	2300      	movs	r3, #0
 80110f2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	885b      	ldrh	r3, [r3, #2]
 80110f8:	b29a      	uxth	r2, r3
 80110fa:	897b      	ldrh	r3, [r7, #10]
 80110fc:	429a      	cmp	r2, r3
 80110fe:	d8e5      	bhi.n	80110cc <USBD_GetEpDesc+0x2e>
 8011100:	e000      	b.n	8011104 <USBD_GetEpDesc+0x66>
          break;
 8011102:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8011104:	693b      	ldr	r3, [r7, #16]
}
 8011106:	4618      	mov	r0, r3
 8011108:	3718      	adds	r7, #24
 801110a:	46bd      	mov	sp, r7
 801110c:	bd80      	pop	{r7, pc}

0801110e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801110e:	b480      	push	{r7}
 8011110:	b085      	sub	sp, #20
 8011112:	af00      	add	r7, sp, #0
 8011114:	6078      	str	r0, [r7, #4]
 8011116:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801111c:	683b      	ldr	r3, [r7, #0]
 801111e:	881b      	ldrh	r3, [r3, #0]
 8011120:	68fa      	ldr	r2, [r7, #12]
 8011122:	7812      	ldrb	r2, [r2, #0]
 8011124:	4413      	add	r3, r2
 8011126:	b29a      	uxth	r2, r3
 8011128:	683b      	ldr	r3, [r7, #0]
 801112a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	781b      	ldrb	r3, [r3, #0]
 8011130:	461a      	mov	r2, r3
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	4413      	add	r3, r2
 8011136:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8011138:	68fb      	ldr	r3, [r7, #12]
}
 801113a:	4618      	mov	r0, r3
 801113c:	3714      	adds	r7, #20
 801113e:	46bd      	mov	sp, r7
 8011140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011144:	4770      	bx	lr

08011146 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011146:	b480      	push	{r7}
 8011148:	b087      	sub	sp, #28
 801114a:	af00      	add	r7, sp, #0
 801114c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011152:	697b      	ldr	r3, [r7, #20]
 8011154:	781b      	ldrb	r3, [r3, #0]
 8011156:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011158:	697b      	ldr	r3, [r7, #20]
 801115a:	3301      	adds	r3, #1
 801115c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801115e:	697b      	ldr	r3, [r7, #20]
 8011160:	781b      	ldrb	r3, [r3, #0]
 8011162:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011164:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8011168:	021b      	lsls	r3, r3, #8
 801116a:	b21a      	sxth	r2, r3
 801116c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011170:	4313      	orrs	r3, r2
 8011172:	b21b      	sxth	r3, r3
 8011174:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011176:	89fb      	ldrh	r3, [r7, #14]
}
 8011178:	4618      	mov	r0, r3
 801117a:	371c      	adds	r7, #28
 801117c:	46bd      	mov	sp, r7
 801117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011182:	4770      	bx	lr

08011184 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011184:	b580      	push	{r7, lr}
 8011186:	b084      	sub	sp, #16
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
 801118c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801118e:	2300      	movs	r3, #0
 8011190:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011192:	683b      	ldr	r3, [r7, #0]
 8011194:	781b      	ldrb	r3, [r3, #0]
 8011196:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801119a:	2b40      	cmp	r3, #64	@ 0x40
 801119c:	d005      	beq.n	80111aa <USBD_StdDevReq+0x26>
 801119e:	2b40      	cmp	r3, #64	@ 0x40
 80111a0:	d857      	bhi.n	8011252 <USBD_StdDevReq+0xce>
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d00f      	beq.n	80111c6 <USBD_StdDevReq+0x42>
 80111a6:	2b20      	cmp	r3, #32
 80111a8:	d153      	bne.n	8011252 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	32ae      	adds	r2, #174	@ 0xae
 80111b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111b8:	689b      	ldr	r3, [r3, #8]
 80111ba:	6839      	ldr	r1, [r7, #0]
 80111bc:	6878      	ldr	r0, [r7, #4]
 80111be:	4798      	blx	r3
 80111c0:	4603      	mov	r3, r0
 80111c2:	73fb      	strb	r3, [r7, #15]
      break;
 80111c4:	e04a      	b.n	801125c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80111c6:	683b      	ldr	r3, [r7, #0]
 80111c8:	785b      	ldrb	r3, [r3, #1]
 80111ca:	2b09      	cmp	r3, #9
 80111cc:	d83b      	bhi.n	8011246 <USBD_StdDevReq+0xc2>
 80111ce:	a201      	add	r2, pc, #4	@ (adr r2, 80111d4 <USBD_StdDevReq+0x50>)
 80111d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111d4:	08011229 	.word	0x08011229
 80111d8:	0801123d 	.word	0x0801123d
 80111dc:	08011247 	.word	0x08011247
 80111e0:	08011233 	.word	0x08011233
 80111e4:	08011247 	.word	0x08011247
 80111e8:	08011207 	.word	0x08011207
 80111ec:	080111fd 	.word	0x080111fd
 80111f0:	08011247 	.word	0x08011247
 80111f4:	0801121f 	.word	0x0801121f
 80111f8:	08011211 	.word	0x08011211
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80111fc:	6839      	ldr	r1, [r7, #0]
 80111fe:	6878      	ldr	r0, [r7, #4]
 8011200:	f000 fa3c 	bl	801167c <USBD_GetDescriptor>
          break;
 8011204:	e024      	b.n	8011250 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011206:	6839      	ldr	r1, [r7, #0]
 8011208:	6878      	ldr	r0, [r7, #4]
 801120a:	f000 fbcb 	bl	80119a4 <USBD_SetAddress>
          break;
 801120e:	e01f      	b.n	8011250 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011210:	6839      	ldr	r1, [r7, #0]
 8011212:	6878      	ldr	r0, [r7, #4]
 8011214:	f000 fc0a 	bl	8011a2c <USBD_SetConfig>
 8011218:	4603      	mov	r3, r0
 801121a:	73fb      	strb	r3, [r7, #15]
          break;
 801121c:	e018      	b.n	8011250 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801121e:	6839      	ldr	r1, [r7, #0]
 8011220:	6878      	ldr	r0, [r7, #4]
 8011222:	f000 fcad 	bl	8011b80 <USBD_GetConfig>
          break;
 8011226:	e013      	b.n	8011250 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011228:	6839      	ldr	r1, [r7, #0]
 801122a:	6878      	ldr	r0, [r7, #4]
 801122c:	f000 fcde 	bl	8011bec <USBD_GetStatus>
          break;
 8011230:	e00e      	b.n	8011250 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011232:	6839      	ldr	r1, [r7, #0]
 8011234:	6878      	ldr	r0, [r7, #4]
 8011236:	f000 fd0d 	bl	8011c54 <USBD_SetFeature>
          break;
 801123a:	e009      	b.n	8011250 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801123c:	6839      	ldr	r1, [r7, #0]
 801123e:	6878      	ldr	r0, [r7, #4]
 8011240:	f000 fd31 	bl	8011ca6 <USBD_ClrFeature>
          break;
 8011244:	e004      	b.n	8011250 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8011246:	6839      	ldr	r1, [r7, #0]
 8011248:	6878      	ldr	r0, [r7, #4]
 801124a:	f000 fd88 	bl	8011d5e <USBD_CtlError>
          break;
 801124e:	bf00      	nop
      }
      break;
 8011250:	e004      	b.n	801125c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8011252:	6839      	ldr	r1, [r7, #0]
 8011254:	6878      	ldr	r0, [r7, #4]
 8011256:	f000 fd82 	bl	8011d5e <USBD_CtlError>
      break;
 801125a:	bf00      	nop
  }

  return ret;
 801125c:	7bfb      	ldrb	r3, [r7, #15]
}
 801125e:	4618      	mov	r0, r3
 8011260:	3710      	adds	r7, #16
 8011262:	46bd      	mov	sp, r7
 8011264:	bd80      	pop	{r7, pc}
 8011266:	bf00      	nop

08011268 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011268:	b580      	push	{r7, lr}
 801126a:	b084      	sub	sp, #16
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]
 8011270:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011272:	2300      	movs	r3, #0
 8011274:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011276:	683b      	ldr	r3, [r7, #0]
 8011278:	781b      	ldrb	r3, [r3, #0]
 801127a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801127e:	2b40      	cmp	r3, #64	@ 0x40
 8011280:	d005      	beq.n	801128e <USBD_StdItfReq+0x26>
 8011282:	2b40      	cmp	r3, #64	@ 0x40
 8011284:	d852      	bhi.n	801132c <USBD_StdItfReq+0xc4>
 8011286:	2b00      	cmp	r3, #0
 8011288:	d001      	beq.n	801128e <USBD_StdItfReq+0x26>
 801128a:	2b20      	cmp	r3, #32
 801128c:	d14e      	bne.n	801132c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011294:	b2db      	uxtb	r3, r3
 8011296:	3b01      	subs	r3, #1
 8011298:	2b02      	cmp	r3, #2
 801129a:	d840      	bhi.n	801131e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801129c:	683b      	ldr	r3, [r7, #0]
 801129e:	889b      	ldrh	r3, [r3, #4]
 80112a0:	b2db      	uxtb	r3, r3
 80112a2:	2b01      	cmp	r3, #1
 80112a4:	d836      	bhi.n	8011314 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80112a6:	683b      	ldr	r3, [r7, #0]
 80112a8:	889b      	ldrh	r3, [r3, #4]
 80112aa:	b2db      	uxtb	r3, r3
 80112ac:	4619      	mov	r1, r3
 80112ae:	6878      	ldr	r0, [r7, #4]
 80112b0:	f7ff fedb 	bl	801106a <USBD_CoreFindIF>
 80112b4:	4603      	mov	r3, r0
 80112b6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80112b8:	7bbb      	ldrb	r3, [r7, #14]
 80112ba:	2bff      	cmp	r3, #255	@ 0xff
 80112bc:	d01d      	beq.n	80112fa <USBD_StdItfReq+0x92>
 80112be:	7bbb      	ldrb	r3, [r7, #14]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d11a      	bne.n	80112fa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80112c4:	7bba      	ldrb	r2, [r7, #14]
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	32ae      	adds	r2, #174	@ 0xae
 80112ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80112ce:	689b      	ldr	r3, [r3, #8]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d00f      	beq.n	80112f4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80112d4:	7bba      	ldrb	r2, [r7, #14]
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80112dc:	7bba      	ldrb	r2, [r7, #14]
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	32ae      	adds	r2, #174	@ 0xae
 80112e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80112e6:	689b      	ldr	r3, [r3, #8]
 80112e8:	6839      	ldr	r1, [r7, #0]
 80112ea:	6878      	ldr	r0, [r7, #4]
 80112ec:	4798      	blx	r3
 80112ee:	4603      	mov	r3, r0
 80112f0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80112f2:	e004      	b.n	80112fe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80112f4:	2303      	movs	r3, #3
 80112f6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80112f8:	e001      	b.n	80112fe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80112fa:	2303      	movs	r3, #3
 80112fc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80112fe:	683b      	ldr	r3, [r7, #0]
 8011300:	88db      	ldrh	r3, [r3, #6]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d110      	bne.n	8011328 <USBD_StdItfReq+0xc0>
 8011306:	7bfb      	ldrb	r3, [r7, #15]
 8011308:	2b00      	cmp	r3, #0
 801130a:	d10d      	bne.n	8011328 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801130c:	6878      	ldr	r0, [r7, #4]
 801130e:	f000 fdfd 	bl	8011f0c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011312:	e009      	b.n	8011328 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8011314:	6839      	ldr	r1, [r7, #0]
 8011316:	6878      	ldr	r0, [r7, #4]
 8011318:	f000 fd21 	bl	8011d5e <USBD_CtlError>
          break;
 801131c:	e004      	b.n	8011328 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801131e:	6839      	ldr	r1, [r7, #0]
 8011320:	6878      	ldr	r0, [r7, #4]
 8011322:	f000 fd1c 	bl	8011d5e <USBD_CtlError>
          break;
 8011326:	e000      	b.n	801132a <USBD_StdItfReq+0xc2>
          break;
 8011328:	bf00      	nop
      }
      break;
 801132a:	e004      	b.n	8011336 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801132c:	6839      	ldr	r1, [r7, #0]
 801132e:	6878      	ldr	r0, [r7, #4]
 8011330:	f000 fd15 	bl	8011d5e <USBD_CtlError>
      break;
 8011334:	bf00      	nop
  }

  return ret;
 8011336:	7bfb      	ldrb	r3, [r7, #15]
}
 8011338:	4618      	mov	r0, r3
 801133a:	3710      	adds	r7, #16
 801133c:	46bd      	mov	sp, r7
 801133e:	bd80      	pop	{r7, pc}

08011340 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011340:	b580      	push	{r7, lr}
 8011342:	b084      	sub	sp, #16
 8011344:	af00      	add	r7, sp, #0
 8011346:	6078      	str	r0, [r7, #4]
 8011348:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801134a:	2300      	movs	r3, #0
 801134c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801134e:	683b      	ldr	r3, [r7, #0]
 8011350:	889b      	ldrh	r3, [r3, #4]
 8011352:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011354:	683b      	ldr	r3, [r7, #0]
 8011356:	781b      	ldrb	r3, [r3, #0]
 8011358:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801135c:	2b40      	cmp	r3, #64	@ 0x40
 801135e:	d007      	beq.n	8011370 <USBD_StdEPReq+0x30>
 8011360:	2b40      	cmp	r3, #64	@ 0x40
 8011362:	f200 817f 	bhi.w	8011664 <USBD_StdEPReq+0x324>
 8011366:	2b00      	cmp	r3, #0
 8011368:	d02a      	beq.n	80113c0 <USBD_StdEPReq+0x80>
 801136a:	2b20      	cmp	r3, #32
 801136c:	f040 817a 	bne.w	8011664 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8011370:	7bbb      	ldrb	r3, [r7, #14]
 8011372:	4619      	mov	r1, r3
 8011374:	6878      	ldr	r0, [r7, #4]
 8011376:	f7ff fe85 	bl	8011084 <USBD_CoreFindEP>
 801137a:	4603      	mov	r3, r0
 801137c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801137e:	7b7b      	ldrb	r3, [r7, #13]
 8011380:	2bff      	cmp	r3, #255	@ 0xff
 8011382:	f000 8174 	beq.w	801166e <USBD_StdEPReq+0x32e>
 8011386:	7b7b      	ldrb	r3, [r7, #13]
 8011388:	2b00      	cmp	r3, #0
 801138a:	f040 8170 	bne.w	801166e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801138e:	7b7a      	ldrb	r2, [r7, #13]
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8011396:	7b7a      	ldrb	r2, [r7, #13]
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	32ae      	adds	r2, #174	@ 0xae
 801139c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113a0:	689b      	ldr	r3, [r3, #8]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	f000 8163 	beq.w	801166e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80113a8:	7b7a      	ldrb	r2, [r7, #13]
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	32ae      	adds	r2, #174	@ 0xae
 80113ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113b2:	689b      	ldr	r3, [r3, #8]
 80113b4:	6839      	ldr	r1, [r7, #0]
 80113b6:	6878      	ldr	r0, [r7, #4]
 80113b8:	4798      	blx	r3
 80113ba:	4603      	mov	r3, r0
 80113bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80113be:	e156      	b.n	801166e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	785b      	ldrb	r3, [r3, #1]
 80113c4:	2b03      	cmp	r3, #3
 80113c6:	d008      	beq.n	80113da <USBD_StdEPReq+0x9a>
 80113c8:	2b03      	cmp	r3, #3
 80113ca:	f300 8145 	bgt.w	8011658 <USBD_StdEPReq+0x318>
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	f000 809b 	beq.w	801150a <USBD_StdEPReq+0x1ca>
 80113d4:	2b01      	cmp	r3, #1
 80113d6:	d03c      	beq.n	8011452 <USBD_StdEPReq+0x112>
 80113d8:	e13e      	b.n	8011658 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80113e0:	b2db      	uxtb	r3, r3
 80113e2:	2b02      	cmp	r3, #2
 80113e4:	d002      	beq.n	80113ec <USBD_StdEPReq+0xac>
 80113e6:	2b03      	cmp	r3, #3
 80113e8:	d016      	beq.n	8011418 <USBD_StdEPReq+0xd8>
 80113ea:	e02c      	b.n	8011446 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80113ec:	7bbb      	ldrb	r3, [r7, #14]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d00d      	beq.n	801140e <USBD_StdEPReq+0xce>
 80113f2:	7bbb      	ldrb	r3, [r7, #14]
 80113f4:	2b80      	cmp	r3, #128	@ 0x80
 80113f6:	d00a      	beq.n	801140e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80113f8:	7bbb      	ldrb	r3, [r7, #14]
 80113fa:	4619      	mov	r1, r3
 80113fc:	6878      	ldr	r0, [r7, #4]
 80113fe:	f001 f98f 	bl	8012720 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011402:	2180      	movs	r1, #128	@ 0x80
 8011404:	6878      	ldr	r0, [r7, #4]
 8011406:	f001 f98b 	bl	8012720 <USBD_LL_StallEP>
 801140a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801140c:	e020      	b.n	8011450 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801140e:	6839      	ldr	r1, [r7, #0]
 8011410:	6878      	ldr	r0, [r7, #4]
 8011412:	f000 fca4 	bl	8011d5e <USBD_CtlError>
              break;
 8011416:	e01b      	b.n	8011450 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011418:	683b      	ldr	r3, [r7, #0]
 801141a:	885b      	ldrh	r3, [r3, #2]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d10e      	bne.n	801143e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011420:	7bbb      	ldrb	r3, [r7, #14]
 8011422:	2b00      	cmp	r3, #0
 8011424:	d00b      	beq.n	801143e <USBD_StdEPReq+0xfe>
 8011426:	7bbb      	ldrb	r3, [r7, #14]
 8011428:	2b80      	cmp	r3, #128	@ 0x80
 801142a:	d008      	beq.n	801143e <USBD_StdEPReq+0xfe>
 801142c:	683b      	ldr	r3, [r7, #0]
 801142e:	88db      	ldrh	r3, [r3, #6]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d104      	bne.n	801143e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011434:	7bbb      	ldrb	r3, [r7, #14]
 8011436:	4619      	mov	r1, r3
 8011438:	6878      	ldr	r0, [r7, #4]
 801143a:	f001 f971 	bl	8012720 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801143e:	6878      	ldr	r0, [r7, #4]
 8011440:	f000 fd64 	bl	8011f0c <USBD_CtlSendStatus>

              break;
 8011444:	e004      	b.n	8011450 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8011446:	6839      	ldr	r1, [r7, #0]
 8011448:	6878      	ldr	r0, [r7, #4]
 801144a:	f000 fc88 	bl	8011d5e <USBD_CtlError>
              break;
 801144e:	bf00      	nop
          }
          break;
 8011450:	e107      	b.n	8011662 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011458:	b2db      	uxtb	r3, r3
 801145a:	2b02      	cmp	r3, #2
 801145c:	d002      	beq.n	8011464 <USBD_StdEPReq+0x124>
 801145e:	2b03      	cmp	r3, #3
 8011460:	d016      	beq.n	8011490 <USBD_StdEPReq+0x150>
 8011462:	e04b      	b.n	80114fc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011464:	7bbb      	ldrb	r3, [r7, #14]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d00d      	beq.n	8011486 <USBD_StdEPReq+0x146>
 801146a:	7bbb      	ldrb	r3, [r7, #14]
 801146c:	2b80      	cmp	r3, #128	@ 0x80
 801146e:	d00a      	beq.n	8011486 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011470:	7bbb      	ldrb	r3, [r7, #14]
 8011472:	4619      	mov	r1, r3
 8011474:	6878      	ldr	r0, [r7, #4]
 8011476:	f001 f953 	bl	8012720 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801147a:	2180      	movs	r1, #128	@ 0x80
 801147c:	6878      	ldr	r0, [r7, #4]
 801147e:	f001 f94f 	bl	8012720 <USBD_LL_StallEP>
 8011482:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011484:	e040      	b.n	8011508 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8011486:	6839      	ldr	r1, [r7, #0]
 8011488:	6878      	ldr	r0, [r7, #4]
 801148a:	f000 fc68 	bl	8011d5e <USBD_CtlError>
              break;
 801148e:	e03b      	b.n	8011508 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011490:	683b      	ldr	r3, [r7, #0]
 8011492:	885b      	ldrh	r3, [r3, #2]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d136      	bne.n	8011506 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011498:	7bbb      	ldrb	r3, [r7, #14]
 801149a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d004      	beq.n	80114ac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80114a2:	7bbb      	ldrb	r3, [r7, #14]
 80114a4:	4619      	mov	r1, r3
 80114a6:	6878      	ldr	r0, [r7, #4]
 80114a8:	f001 f959 	bl	801275e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80114ac:	6878      	ldr	r0, [r7, #4]
 80114ae:	f000 fd2d 	bl	8011f0c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80114b2:	7bbb      	ldrb	r3, [r7, #14]
 80114b4:	4619      	mov	r1, r3
 80114b6:	6878      	ldr	r0, [r7, #4]
 80114b8:	f7ff fde4 	bl	8011084 <USBD_CoreFindEP>
 80114bc:	4603      	mov	r3, r0
 80114be:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80114c0:	7b7b      	ldrb	r3, [r7, #13]
 80114c2:	2bff      	cmp	r3, #255	@ 0xff
 80114c4:	d01f      	beq.n	8011506 <USBD_StdEPReq+0x1c6>
 80114c6:	7b7b      	ldrb	r3, [r7, #13]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d11c      	bne.n	8011506 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80114cc:	7b7a      	ldrb	r2, [r7, #13]
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80114d4:	7b7a      	ldrb	r2, [r7, #13]
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	32ae      	adds	r2, #174	@ 0xae
 80114da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114de:	689b      	ldr	r3, [r3, #8]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d010      	beq.n	8011506 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80114e4:	7b7a      	ldrb	r2, [r7, #13]
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	32ae      	adds	r2, #174	@ 0xae
 80114ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114ee:	689b      	ldr	r3, [r3, #8]
 80114f0:	6839      	ldr	r1, [r7, #0]
 80114f2:	6878      	ldr	r0, [r7, #4]
 80114f4:	4798      	blx	r3
 80114f6:	4603      	mov	r3, r0
 80114f8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80114fa:	e004      	b.n	8011506 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80114fc:	6839      	ldr	r1, [r7, #0]
 80114fe:	6878      	ldr	r0, [r7, #4]
 8011500:	f000 fc2d 	bl	8011d5e <USBD_CtlError>
              break;
 8011504:	e000      	b.n	8011508 <USBD_StdEPReq+0x1c8>
              break;
 8011506:	bf00      	nop
          }
          break;
 8011508:	e0ab      	b.n	8011662 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011510:	b2db      	uxtb	r3, r3
 8011512:	2b02      	cmp	r3, #2
 8011514:	d002      	beq.n	801151c <USBD_StdEPReq+0x1dc>
 8011516:	2b03      	cmp	r3, #3
 8011518:	d032      	beq.n	8011580 <USBD_StdEPReq+0x240>
 801151a:	e097      	b.n	801164c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801151c:	7bbb      	ldrb	r3, [r7, #14]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d007      	beq.n	8011532 <USBD_StdEPReq+0x1f2>
 8011522:	7bbb      	ldrb	r3, [r7, #14]
 8011524:	2b80      	cmp	r3, #128	@ 0x80
 8011526:	d004      	beq.n	8011532 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8011528:	6839      	ldr	r1, [r7, #0]
 801152a:	6878      	ldr	r0, [r7, #4]
 801152c:	f000 fc17 	bl	8011d5e <USBD_CtlError>
                break;
 8011530:	e091      	b.n	8011656 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011532:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011536:	2b00      	cmp	r3, #0
 8011538:	da0b      	bge.n	8011552 <USBD_StdEPReq+0x212>
 801153a:	7bbb      	ldrb	r3, [r7, #14]
 801153c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011540:	4613      	mov	r3, r2
 8011542:	009b      	lsls	r3, r3, #2
 8011544:	4413      	add	r3, r2
 8011546:	009b      	lsls	r3, r3, #2
 8011548:	3310      	adds	r3, #16
 801154a:	687a      	ldr	r2, [r7, #4]
 801154c:	4413      	add	r3, r2
 801154e:	3304      	adds	r3, #4
 8011550:	e00b      	b.n	801156a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011552:	7bbb      	ldrb	r3, [r7, #14]
 8011554:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011558:	4613      	mov	r3, r2
 801155a:	009b      	lsls	r3, r3, #2
 801155c:	4413      	add	r3, r2
 801155e:	009b      	lsls	r3, r3, #2
 8011560:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8011564:	687a      	ldr	r2, [r7, #4]
 8011566:	4413      	add	r3, r2
 8011568:	3304      	adds	r3, #4
 801156a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801156c:	68bb      	ldr	r3, [r7, #8]
 801156e:	2200      	movs	r2, #0
 8011570:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011572:	68bb      	ldr	r3, [r7, #8]
 8011574:	2202      	movs	r2, #2
 8011576:	4619      	mov	r1, r3
 8011578:	6878      	ldr	r0, [r7, #4]
 801157a:	f000 fc6d 	bl	8011e58 <USBD_CtlSendData>
              break;
 801157e:	e06a      	b.n	8011656 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011580:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011584:	2b00      	cmp	r3, #0
 8011586:	da11      	bge.n	80115ac <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011588:	7bbb      	ldrb	r3, [r7, #14]
 801158a:	f003 020f 	and.w	r2, r3, #15
 801158e:	6879      	ldr	r1, [r7, #4]
 8011590:	4613      	mov	r3, r2
 8011592:	009b      	lsls	r3, r3, #2
 8011594:	4413      	add	r3, r2
 8011596:	009b      	lsls	r3, r3, #2
 8011598:	440b      	add	r3, r1
 801159a:	3324      	adds	r3, #36	@ 0x24
 801159c:	881b      	ldrh	r3, [r3, #0]
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d117      	bne.n	80115d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80115a2:	6839      	ldr	r1, [r7, #0]
 80115a4:	6878      	ldr	r0, [r7, #4]
 80115a6:	f000 fbda 	bl	8011d5e <USBD_CtlError>
                  break;
 80115aa:	e054      	b.n	8011656 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80115ac:	7bbb      	ldrb	r3, [r7, #14]
 80115ae:	f003 020f 	and.w	r2, r3, #15
 80115b2:	6879      	ldr	r1, [r7, #4]
 80115b4:	4613      	mov	r3, r2
 80115b6:	009b      	lsls	r3, r3, #2
 80115b8:	4413      	add	r3, r2
 80115ba:	009b      	lsls	r3, r3, #2
 80115bc:	440b      	add	r3, r1
 80115be:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80115c2:	881b      	ldrh	r3, [r3, #0]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d104      	bne.n	80115d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80115c8:	6839      	ldr	r1, [r7, #0]
 80115ca:	6878      	ldr	r0, [r7, #4]
 80115cc:	f000 fbc7 	bl	8011d5e <USBD_CtlError>
                  break;
 80115d0:	e041      	b.n	8011656 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80115d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	da0b      	bge.n	80115f2 <USBD_StdEPReq+0x2b2>
 80115da:	7bbb      	ldrb	r3, [r7, #14]
 80115dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80115e0:	4613      	mov	r3, r2
 80115e2:	009b      	lsls	r3, r3, #2
 80115e4:	4413      	add	r3, r2
 80115e6:	009b      	lsls	r3, r3, #2
 80115e8:	3310      	adds	r3, #16
 80115ea:	687a      	ldr	r2, [r7, #4]
 80115ec:	4413      	add	r3, r2
 80115ee:	3304      	adds	r3, #4
 80115f0:	e00b      	b.n	801160a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80115f2:	7bbb      	ldrb	r3, [r7, #14]
 80115f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80115f8:	4613      	mov	r3, r2
 80115fa:	009b      	lsls	r3, r3, #2
 80115fc:	4413      	add	r3, r2
 80115fe:	009b      	lsls	r3, r3, #2
 8011600:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8011604:	687a      	ldr	r2, [r7, #4]
 8011606:	4413      	add	r3, r2
 8011608:	3304      	adds	r3, #4
 801160a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801160c:	7bbb      	ldrb	r3, [r7, #14]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d002      	beq.n	8011618 <USBD_StdEPReq+0x2d8>
 8011612:	7bbb      	ldrb	r3, [r7, #14]
 8011614:	2b80      	cmp	r3, #128	@ 0x80
 8011616:	d103      	bne.n	8011620 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8011618:	68bb      	ldr	r3, [r7, #8]
 801161a:	2200      	movs	r2, #0
 801161c:	601a      	str	r2, [r3, #0]
 801161e:	e00e      	b.n	801163e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011620:	7bbb      	ldrb	r3, [r7, #14]
 8011622:	4619      	mov	r1, r3
 8011624:	6878      	ldr	r0, [r7, #4]
 8011626:	f001 f8b9 	bl	801279c <USBD_LL_IsStallEP>
 801162a:	4603      	mov	r3, r0
 801162c:	2b00      	cmp	r3, #0
 801162e:	d003      	beq.n	8011638 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8011630:	68bb      	ldr	r3, [r7, #8]
 8011632:	2201      	movs	r2, #1
 8011634:	601a      	str	r2, [r3, #0]
 8011636:	e002      	b.n	801163e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8011638:	68bb      	ldr	r3, [r7, #8]
 801163a:	2200      	movs	r2, #0
 801163c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801163e:	68bb      	ldr	r3, [r7, #8]
 8011640:	2202      	movs	r2, #2
 8011642:	4619      	mov	r1, r3
 8011644:	6878      	ldr	r0, [r7, #4]
 8011646:	f000 fc07 	bl	8011e58 <USBD_CtlSendData>
              break;
 801164a:	e004      	b.n	8011656 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801164c:	6839      	ldr	r1, [r7, #0]
 801164e:	6878      	ldr	r0, [r7, #4]
 8011650:	f000 fb85 	bl	8011d5e <USBD_CtlError>
              break;
 8011654:	bf00      	nop
          }
          break;
 8011656:	e004      	b.n	8011662 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8011658:	6839      	ldr	r1, [r7, #0]
 801165a:	6878      	ldr	r0, [r7, #4]
 801165c:	f000 fb7f 	bl	8011d5e <USBD_CtlError>
          break;
 8011660:	bf00      	nop
      }
      break;
 8011662:	e005      	b.n	8011670 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8011664:	6839      	ldr	r1, [r7, #0]
 8011666:	6878      	ldr	r0, [r7, #4]
 8011668:	f000 fb79 	bl	8011d5e <USBD_CtlError>
      break;
 801166c:	e000      	b.n	8011670 <USBD_StdEPReq+0x330>
      break;
 801166e:	bf00      	nop
  }

  return ret;
 8011670:	7bfb      	ldrb	r3, [r7, #15]
}
 8011672:	4618      	mov	r0, r3
 8011674:	3710      	adds	r7, #16
 8011676:	46bd      	mov	sp, r7
 8011678:	bd80      	pop	{r7, pc}
	...

0801167c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801167c:	b580      	push	{r7, lr}
 801167e:	b084      	sub	sp, #16
 8011680:	af00      	add	r7, sp, #0
 8011682:	6078      	str	r0, [r7, #4]
 8011684:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011686:	2300      	movs	r3, #0
 8011688:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801168a:	2300      	movs	r3, #0
 801168c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801168e:	2300      	movs	r3, #0
 8011690:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011692:	683b      	ldr	r3, [r7, #0]
 8011694:	885b      	ldrh	r3, [r3, #2]
 8011696:	0a1b      	lsrs	r3, r3, #8
 8011698:	b29b      	uxth	r3, r3
 801169a:	3b01      	subs	r3, #1
 801169c:	2b0e      	cmp	r3, #14
 801169e:	f200 8152 	bhi.w	8011946 <USBD_GetDescriptor+0x2ca>
 80116a2:	a201      	add	r2, pc, #4	@ (adr r2, 80116a8 <USBD_GetDescriptor+0x2c>)
 80116a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116a8:	08011719 	.word	0x08011719
 80116ac:	08011731 	.word	0x08011731
 80116b0:	08011771 	.word	0x08011771
 80116b4:	08011947 	.word	0x08011947
 80116b8:	08011947 	.word	0x08011947
 80116bc:	080118e7 	.word	0x080118e7
 80116c0:	08011913 	.word	0x08011913
 80116c4:	08011947 	.word	0x08011947
 80116c8:	08011947 	.word	0x08011947
 80116cc:	08011947 	.word	0x08011947
 80116d0:	08011947 	.word	0x08011947
 80116d4:	08011947 	.word	0x08011947
 80116d8:	08011947 	.word	0x08011947
 80116dc:	08011947 	.word	0x08011947
 80116e0:	080116e5 	.word	0x080116e5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80116ea:	69db      	ldr	r3, [r3, #28]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d00b      	beq.n	8011708 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80116f6:	69db      	ldr	r3, [r3, #28]
 80116f8:	687a      	ldr	r2, [r7, #4]
 80116fa:	7c12      	ldrb	r2, [r2, #16]
 80116fc:	f107 0108 	add.w	r1, r7, #8
 8011700:	4610      	mov	r0, r2
 8011702:	4798      	blx	r3
 8011704:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011706:	e126      	b.n	8011956 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011708:	6839      	ldr	r1, [r7, #0]
 801170a:	6878      	ldr	r0, [r7, #4]
 801170c:	f000 fb27 	bl	8011d5e <USBD_CtlError>
        err++;
 8011710:	7afb      	ldrb	r3, [r7, #11]
 8011712:	3301      	adds	r3, #1
 8011714:	72fb      	strb	r3, [r7, #11]
      break;
 8011716:	e11e      	b.n	8011956 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	687a      	ldr	r2, [r7, #4]
 8011722:	7c12      	ldrb	r2, [r2, #16]
 8011724:	f107 0108 	add.w	r1, r7, #8
 8011728:	4610      	mov	r0, r2
 801172a:	4798      	blx	r3
 801172c:	60f8      	str	r0, [r7, #12]
      break;
 801172e:	e112      	b.n	8011956 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	7c1b      	ldrb	r3, [r3, #16]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d10d      	bne.n	8011754 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801173e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011740:	f107 0208 	add.w	r2, r7, #8
 8011744:	4610      	mov	r0, r2
 8011746:	4798      	blx	r3
 8011748:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	3301      	adds	r3, #1
 801174e:	2202      	movs	r2, #2
 8011750:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8011752:	e100      	b.n	8011956 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801175a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801175c:	f107 0208 	add.w	r2, r7, #8
 8011760:	4610      	mov	r0, r2
 8011762:	4798      	blx	r3
 8011764:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	3301      	adds	r3, #1
 801176a:	2202      	movs	r2, #2
 801176c:	701a      	strb	r2, [r3, #0]
      break;
 801176e:	e0f2      	b.n	8011956 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011770:	683b      	ldr	r3, [r7, #0]
 8011772:	885b      	ldrh	r3, [r3, #2]
 8011774:	b2db      	uxtb	r3, r3
 8011776:	2b05      	cmp	r3, #5
 8011778:	f200 80ac 	bhi.w	80118d4 <USBD_GetDescriptor+0x258>
 801177c:	a201      	add	r2, pc, #4	@ (adr r2, 8011784 <USBD_GetDescriptor+0x108>)
 801177e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011782:	bf00      	nop
 8011784:	0801179d 	.word	0x0801179d
 8011788:	080117d1 	.word	0x080117d1
 801178c:	08011805 	.word	0x08011805
 8011790:	08011839 	.word	0x08011839
 8011794:	0801186d 	.word	0x0801186d
 8011798:	080118a1 	.word	0x080118a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80117a2:	685b      	ldr	r3, [r3, #4]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d00b      	beq.n	80117c0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80117ae:	685b      	ldr	r3, [r3, #4]
 80117b0:	687a      	ldr	r2, [r7, #4]
 80117b2:	7c12      	ldrb	r2, [r2, #16]
 80117b4:	f107 0108 	add.w	r1, r7, #8
 80117b8:	4610      	mov	r0, r2
 80117ba:	4798      	blx	r3
 80117bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80117be:	e091      	b.n	80118e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80117c0:	6839      	ldr	r1, [r7, #0]
 80117c2:	6878      	ldr	r0, [r7, #4]
 80117c4:	f000 facb 	bl	8011d5e <USBD_CtlError>
            err++;
 80117c8:	7afb      	ldrb	r3, [r7, #11]
 80117ca:	3301      	adds	r3, #1
 80117cc:	72fb      	strb	r3, [r7, #11]
          break;
 80117ce:	e089      	b.n	80118e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80117d6:	689b      	ldr	r3, [r3, #8]
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d00b      	beq.n	80117f4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80117e2:	689b      	ldr	r3, [r3, #8]
 80117e4:	687a      	ldr	r2, [r7, #4]
 80117e6:	7c12      	ldrb	r2, [r2, #16]
 80117e8:	f107 0108 	add.w	r1, r7, #8
 80117ec:	4610      	mov	r0, r2
 80117ee:	4798      	blx	r3
 80117f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80117f2:	e077      	b.n	80118e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80117f4:	6839      	ldr	r1, [r7, #0]
 80117f6:	6878      	ldr	r0, [r7, #4]
 80117f8:	f000 fab1 	bl	8011d5e <USBD_CtlError>
            err++;
 80117fc:	7afb      	ldrb	r3, [r7, #11]
 80117fe:	3301      	adds	r3, #1
 8011800:	72fb      	strb	r3, [r7, #11]
          break;
 8011802:	e06f      	b.n	80118e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801180a:	68db      	ldr	r3, [r3, #12]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d00b      	beq.n	8011828 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011816:	68db      	ldr	r3, [r3, #12]
 8011818:	687a      	ldr	r2, [r7, #4]
 801181a:	7c12      	ldrb	r2, [r2, #16]
 801181c:	f107 0108 	add.w	r1, r7, #8
 8011820:	4610      	mov	r0, r2
 8011822:	4798      	blx	r3
 8011824:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011826:	e05d      	b.n	80118e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011828:	6839      	ldr	r1, [r7, #0]
 801182a:	6878      	ldr	r0, [r7, #4]
 801182c:	f000 fa97 	bl	8011d5e <USBD_CtlError>
            err++;
 8011830:	7afb      	ldrb	r3, [r7, #11]
 8011832:	3301      	adds	r3, #1
 8011834:	72fb      	strb	r3, [r7, #11]
          break;
 8011836:	e055      	b.n	80118e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801183e:	691b      	ldr	r3, [r3, #16]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d00b      	beq.n	801185c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801184a:	691b      	ldr	r3, [r3, #16]
 801184c:	687a      	ldr	r2, [r7, #4]
 801184e:	7c12      	ldrb	r2, [r2, #16]
 8011850:	f107 0108 	add.w	r1, r7, #8
 8011854:	4610      	mov	r0, r2
 8011856:	4798      	blx	r3
 8011858:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801185a:	e043      	b.n	80118e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801185c:	6839      	ldr	r1, [r7, #0]
 801185e:	6878      	ldr	r0, [r7, #4]
 8011860:	f000 fa7d 	bl	8011d5e <USBD_CtlError>
            err++;
 8011864:	7afb      	ldrb	r3, [r7, #11]
 8011866:	3301      	adds	r3, #1
 8011868:	72fb      	strb	r3, [r7, #11]
          break;
 801186a:	e03b      	b.n	80118e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011872:	695b      	ldr	r3, [r3, #20]
 8011874:	2b00      	cmp	r3, #0
 8011876:	d00b      	beq.n	8011890 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801187e:	695b      	ldr	r3, [r3, #20]
 8011880:	687a      	ldr	r2, [r7, #4]
 8011882:	7c12      	ldrb	r2, [r2, #16]
 8011884:	f107 0108 	add.w	r1, r7, #8
 8011888:	4610      	mov	r0, r2
 801188a:	4798      	blx	r3
 801188c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801188e:	e029      	b.n	80118e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011890:	6839      	ldr	r1, [r7, #0]
 8011892:	6878      	ldr	r0, [r7, #4]
 8011894:	f000 fa63 	bl	8011d5e <USBD_CtlError>
            err++;
 8011898:	7afb      	ldrb	r3, [r7, #11]
 801189a:	3301      	adds	r3, #1
 801189c:	72fb      	strb	r3, [r7, #11]
          break;
 801189e:	e021      	b.n	80118e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80118a6:	699b      	ldr	r3, [r3, #24]
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d00b      	beq.n	80118c4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80118b2:	699b      	ldr	r3, [r3, #24]
 80118b4:	687a      	ldr	r2, [r7, #4]
 80118b6:	7c12      	ldrb	r2, [r2, #16]
 80118b8:	f107 0108 	add.w	r1, r7, #8
 80118bc:	4610      	mov	r0, r2
 80118be:	4798      	blx	r3
 80118c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80118c2:	e00f      	b.n	80118e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80118c4:	6839      	ldr	r1, [r7, #0]
 80118c6:	6878      	ldr	r0, [r7, #4]
 80118c8:	f000 fa49 	bl	8011d5e <USBD_CtlError>
            err++;
 80118cc:	7afb      	ldrb	r3, [r7, #11]
 80118ce:	3301      	adds	r3, #1
 80118d0:	72fb      	strb	r3, [r7, #11]
          break;
 80118d2:	e007      	b.n	80118e4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80118d4:	6839      	ldr	r1, [r7, #0]
 80118d6:	6878      	ldr	r0, [r7, #4]
 80118d8:	f000 fa41 	bl	8011d5e <USBD_CtlError>
          err++;
 80118dc:	7afb      	ldrb	r3, [r7, #11]
 80118de:	3301      	adds	r3, #1
 80118e0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80118e2:	bf00      	nop
      }
      break;
 80118e4:	e037      	b.n	8011956 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	7c1b      	ldrb	r3, [r3, #16]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d109      	bne.n	8011902 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80118f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80118f6:	f107 0208 	add.w	r2, r7, #8
 80118fa:	4610      	mov	r0, r2
 80118fc:	4798      	blx	r3
 80118fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011900:	e029      	b.n	8011956 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011902:	6839      	ldr	r1, [r7, #0]
 8011904:	6878      	ldr	r0, [r7, #4]
 8011906:	f000 fa2a 	bl	8011d5e <USBD_CtlError>
        err++;
 801190a:	7afb      	ldrb	r3, [r7, #11]
 801190c:	3301      	adds	r3, #1
 801190e:	72fb      	strb	r3, [r7, #11]
      break;
 8011910:	e021      	b.n	8011956 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	7c1b      	ldrb	r3, [r3, #16]
 8011916:	2b00      	cmp	r3, #0
 8011918:	d10d      	bne.n	8011936 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011922:	f107 0208 	add.w	r2, r7, #8
 8011926:	4610      	mov	r0, r2
 8011928:	4798      	blx	r3
 801192a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	3301      	adds	r3, #1
 8011930:	2207      	movs	r2, #7
 8011932:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011934:	e00f      	b.n	8011956 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011936:	6839      	ldr	r1, [r7, #0]
 8011938:	6878      	ldr	r0, [r7, #4]
 801193a:	f000 fa10 	bl	8011d5e <USBD_CtlError>
        err++;
 801193e:	7afb      	ldrb	r3, [r7, #11]
 8011940:	3301      	adds	r3, #1
 8011942:	72fb      	strb	r3, [r7, #11]
      break;
 8011944:	e007      	b.n	8011956 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8011946:	6839      	ldr	r1, [r7, #0]
 8011948:	6878      	ldr	r0, [r7, #4]
 801194a:	f000 fa08 	bl	8011d5e <USBD_CtlError>
      err++;
 801194e:	7afb      	ldrb	r3, [r7, #11]
 8011950:	3301      	adds	r3, #1
 8011952:	72fb      	strb	r3, [r7, #11]
      break;
 8011954:	bf00      	nop
  }

  if (err != 0U)
 8011956:	7afb      	ldrb	r3, [r7, #11]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d11e      	bne.n	801199a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 801195c:	683b      	ldr	r3, [r7, #0]
 801195e:	88db      	ldrh	r3, [r3, #6]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d016      	beq.n	8011992 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8011964:	893b      	ldrh	r3, [r7, #8]
 8011966:	2b00      	cmp	r3, #0
 8011968:	d00e      	beq.n	8011988 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801196a:	683b      	ldr	r3, [r7, #0]
 801196c:	88da      	ldrh	r2, [r3, #6]
 801196e:	893b      	ldrh	r3, [r7, #8]
 8011970:	4293      	cmp	r3, r2
 8011972:	bf28      	it	cs
 8011974:	4613      	movcs	r3, r2
 8011976:	b29b      	uxth	r3, r3
 8011978:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801197a:	893b      	ldrh	r3, [r7, #8]
 801197c:	461a      	mov	r2, r3
 801197e:	68f9      	ldr	r1, [r7, #12]
 8011980:	6878      	ldr	r0, [r7, #4]
 8011982:	f000 fa69 	bl	8011e58 <USBD_CtlSendData>
 8011986:	e009      	b.n	801199c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8011988:	6839      	ldr	r1, [r7, #0]
 801198a:	6878      	ldr	r0, [r7, #4]
 801198c:	f000 f9e7 	bl	8011d5e <USBD_CtlError>
 8011990:	e004      	b.n	801199c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8011992:	6878      	ldr	r0, [r7, #4]
 8011994:	f000 faba 	bl	8011f0c <USBD_CtlSendStatus>
 8011998:	e000      	b.n	801199c <USBD_GetDescriptor+0x320>
    return;
 801199a:	bf00      	nop
  }
}
 801199c:	3710      	adds	r7, #16
 801199e:	46bd      	mov	sp, r7
 80119a0:	bd80      	pop	{r7, pc}
 80119a2:	bf00      	nop

080119a4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b084      	sub	sp, #16
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	6078      	str	r0, [r7, #4]
 80119ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80119ae:	683b      	ldr	r3, [r7, #0]
 80119b0:	889b      	ldrh	r3, [r3, #4]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d131      	bne.n	8011a1a <USBD_SetAddress+0x76>
 80119b6:	683b      	ldr	r3, [r7, #0]
 80119b8:	88db      	ldrh	r3, [r3, #6]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d12d      	bne.n	8011a1a <USBD_SetAddress+0x76>
 80119be:	683b      	ldr	r3, [r7, #0]
 80119c0:	885b      	ldrh	r3, [r3, #2]
 80119c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80119c4:	d829      	bhi.n	8011a1a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80119c6:	683b      	ldr	r3, [r7, #0]
 80119c8:	885b      	ldrh	r3, [r3, #2]
 80119ca:	b2db      	uxtb	r3, r3
 80119cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80119d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80119d8:	b2db      	uxtb	r3, r3
 80119da:	2b03      	cmp	r3, #3
 80119dc:	d104      	bne.n	80119e8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80119de:	6839      	ldr	r1, [r7, #0]
 80119e0:	6878      	ldr	r0, [r7, #4]
 80119e2:	f000 f9bc 	bl	8011d5e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80119e6:	e01d      	b.n	8011a24 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	7bfa      	ldrb	r2, [r7, #15]
 80119ec:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80119f0:	7bfb      	ldrb	r3, [r7, #15]
 80119f2:	4619      	mov	r1, r3
 80119f4:	6878      	ldr	r0, [r7, #4]
 80119f6:	f000 fefd 	bl	80127f4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80119fa:	6878      	ldr	r0, [r7, #4]
 80119fc:	f000 fa86 	bl	8011f0c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011a00:	7bfb      	ldrb	r3, [r7, #15]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d004      	beq.n	8011a10 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	2202      	movs	r2, #2
 8011a0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011a0e:	e009      	b.n	8011a24 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	2201      	movs	r2, #1
 8011a14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011a18:	e004      	b.n	8011a24 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011a1a:	6839      	ldr	r1, [r7, #0]
 8011a1c:	6878      	ldr	r0, [r7, #4]
 8011a1e:	f000 f99e 	bl	8011d5e <USBD_CtlError>
  }
}
 8011a22:	bf00      	nop
 8011a24:	bf00      	nop
 8011a26:	3710      	adds	r7, #16
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	bd80      	pop	{r7, pc}

08011a2c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011a2c:	b580      	push	{r7, lr}
 8011a2e:	b084      	sub	sp, #16
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	6078      	str	r0, [r7, #4]
 8011a34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011a36:	2300      	movs	r3, #0
 8011a38:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011a3a:	683b      	ldr	r3, [r7, #0]
 8011a3c:	885b      	ldrh	r3, [r3, #2]
 8011a3e:	b2da      	uxtb	r2, r3
 8011a40:	4b4e      	ldr	r3, [pc, #312]	@ (8011b7c <USBD_SetConfig+0x150>)
 8011a42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011a44:	4b4d      	ldr	r3, [pc, #308]	@ (8011b7c <USBD_SetConfig+0x150>)
 8011a46:	781b      	ldrb	r3, [r3, #0]
 8011a48:	2b01      	cmp	r3, #1
 8011a4a:	d905      	bls.n	8011a58 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011a4c:	6839      	ldr	r1, [r7, #0]
 8011a4e:	6878      	ldr	r0, [r7, #4]
 8011a50:	f000 f985 	bl	8011d5e <USBD_CtlError>
    return USBD_FAIL;
 8011a54:	2303      	movs	r3, #3
 8011a56:	e08c      	b.n	8011b72 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011a5e:	b2db      	uxtb	r3, r3
 8011a60:	2b02      	cmp	r3, #2
 8011a62:	d002      	beq.n	8011a6a <USBD_SetConfig+0x3e>
 8011a64:	2b03      	cmp	r3, #3
 8011a66:	d029      	beq.n	8011abc <USBD_SetConfig+0x90>
 8011a68:	e075      	b.n	8011b56 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8011a6a:	4b44      	ldr	r3, [pc, #272]	@ (8011b7c <USBD_SetConfig+0x150>)
 8011a6c:	781b      	ldrb	r3, [r3, #0]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d020      	beq.n	8011ab4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8011a72:	4b42      	ldr	r3, [pc, #264]	@ (8011b7c <USBD_SetConfig+0x150>)
 8011a74:	781b      	ldrb	r3, [r3, #0]
 8011a76:	461a      	mov	r2, r3
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011a7c:	4b3f      	ldr	r3, [pc, #252]	@ (8011b7c <USBD_SetConfig+0x150>)
 8011a7e:	781b      	ldrb	r3, [r3, #0]
 8011a80:	4619      	mov	r1, r3
 8011a82:	6878      	ldr	r0, [r7, #4]
 8011a84:	f7ff f84b 	bl	8010b1e <USBD_SetClassConfig>
 8011a88:	4603      	mov	r3, r0
 8011a8a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8011a8c:	7bfb      	ldrb	r3, [r7, #15]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d008      	beq.n	8011aa4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8011a92:	6839      	ldr	r1, [r7, #0]
 8011a94:	6878      	ldr	r0, [r7, #4]
 8011a96:	f000 f962 	bl	8011d5e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	2202      	movs	r2, #2
 8011a9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011aa2:	e065      	b.n	8011b70 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011aa4:	6878      	ldr	r0, [r7, #4]
 8011aa6:	f000 fa31 	bl	8011f0c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	2203      	movs	r2, #3
 8011aae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011ab2:	e05d      	b.n	8011b70 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011ab4:	6878      	ldr	r0, [r7, #4]
 8011ab6:	f000 fa29 	bl	8011f0c <USBD_CtlSendStatus>
      break;
 8011aba:	e059      	b.n	8011b70 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011abc:	4b2f      	ldr	r3, [pc, #188]	@ (8011b7c <USBD_SetConfig+0x150>)
 8011abe:	781b      	ldrb	r3, [r3, #0]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d112      	bne.n	8011aea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	2202      	movs	r2, #2
 8011ac8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8011acc:	4b2b      	ldr	r3, [pc, #172]	@ (8011b7c <USBD_SetConfig+0x150>)
 8011ace:	781b      	ldrb	r3, [r3, #0]
 8011ad0:	461a      	mov	r2, r3
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011ad6:	4b29      	ldr	r3, [pc, #164]	@ (8011b7c <USBD_SetConfig+0x150>)
 8011ad8:	781b      	ldrb	r3, [r3, #0]
 8011ada:	4619      	mov	r1, r3
 8011adc:	6878      	ldr	r0, [r7, #4]
 8011ade:	f7ff f83a 	bl	8010b56 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8011ae2:	6878      	ldr	r0, [r7, #4]
 8011ae4:	f000 fa12 	bl	8011f0c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011ae8:	e042      	b.n	8011b70 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8011aea:	4b24      	ldr	r3, [pc, #144]	@ (8011b7c <USBD_SetConfig+0x150>)
 8011aec:	781b      	ldrb	r3, [r3, #0]
 8011aee:	461a      	mov	r2, r3
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	685b      	ldr	r3, [r3, #4]
 8011af4:	429a      	cmp	r2, r3
 8011af6:	d02a      	beq.n	8011b4e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	685b      	ldr	r3, [r3, #4]
 8011afc:	b2db      	uxtb	r3, r3
 8011afe:	4619      	mov	r1, r3
 8011b00:	6878      	ldr	r0, [r7, #4]
 8011b02:	f7ff f828 	bl	8010b56 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011b06:	4b1d      	ldr	r3, [pc, #116]	@ (8011b7c <USBD_SetConfig+0x150>)
 8011b08:	781b      	ldrb	r3, [r3, #0]
 8011b0a:	461a      	mov	r2, r3
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011b10:	4b1a      	ldr	r3, [pc, #104]	@ (8011b7c <USBD_SetConfig+0x150>)
 8011b12:	781b      	ldrb	r3, [r3, #0]
 8011b14:	4619      	mov	r1, r3
 8011b16:	6878      	ldr	r0, [r7, #4]
 8011b18:	f7ff f801 	bl	8010b1e <USBD_SetClassConfig>
 8011b1c:	4603      	mov	r3, r0
 8011b1e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8011b20:	7bfb      	ldrb	r3, [r7, #15]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d00f      	beq.n	8011b46 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8011b26:	6839      	ldr	r1, [r7, #0]
 8011b28:	6878      	ldr	r0, [r7, #4]
 8011b2a:	f000 f918 	bl	8011d5e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	685b      	ldr	r3, [r3, #4]
 8011b32:	b2db      	uxtb	r3, r3
 8011b34:	4619      	mov	r1, r3
 8011b36:	6878      	ldr	r0, [r7, #4]
 8011b38:	f7ff f80d 	bl	8010b56 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	2202      	movs	r2, #2
 8011b40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011b44:	e014      	b.n	8011b70 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011b46:	6878      	ldr	r0, [r7, #4]
 8011b48:	f000 f9e0 	bl	8011f0c <USBD_CtlSendStatus>
      break;
 8011b4c:	e010      	b.n	8011b70 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011b4e:	6878      	ldr	r0, [r7, #4]
 8011b50:	f000 f9dc 	bl	8011f0c <USBD_CtlSendStatus>
      break;
 8011b54:	e00c      	b.n	8011b70 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8011b56:	6839      	ldr	r1, [r7, #0]
 8011b58:	6878      	ldr	r0, [r7, #4]
 8011b5a:	f000 f900 	bl	8011d5e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011b5e:	4b07      	ldr	r3, [pc, #28]	@ (8011b7c <USBD_SetConfig+0x150>)
 8011b60:	781b      	ldrb	r3, [r3, #0]
 8011b62:	4619      	mov	r1, r3
 8011b64:	6878      	ldr	r0, [r7, #4]
 8011b66:	f7fe fff6 	bl	8010b56 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8011b6a:	2303      	movs	r3, #3
 8011b6c:	73fb      	strb	r3, [r7, #15]
      break;
 8011b6e:	bf00      	nop
  }

  return ret;
 8011b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b72:	4618      	mov	r0, r3
 8011b74:	3710      	adds	r7, #16
 8011b76:	46bd      	mov	sp, r7
 8011b78:	bd80      	pop	{r7, pc}
 8011b7a:	bf00      	nop
 8011b7c:	200007f4 	.word	0x200007f4

08011b80 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b082      	sub	sp, #8
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
 8011b88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011b8a:	683b      	ldr	r3, [r7, #0]
 8011b8c:	88db      	ldrh	r3, [r3, #6]
 8011b8e:	2b01      	cmp	r3, #1
 8011b90:	d004      	beq.n	8011b9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011b92:	6839      	ldr	r1, [r7, #0]
 8011b94:	6878      	ldr	r0, [r7, #4]
 8011b96:	f000 f8e2 	bl	8011d5e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8011b9a:	e023      	b.n	8011be4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011ba2:	b2db      	uxtb	r3, r3
 8011ba4:	2b02      	cmp	r3, #2
 8011ba6:	dc02      	bgt.n	8011bae <USBD_GetConfig+0x2e>
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	dc03      	bgt.n	8011bb4 <USBD_GetConfig+0x34>
 8011bac:	e015      	b.n	8011bda <USBD_GetConfig+0x5a>
 8011bae:	2b03      	cmp	r3, #3
 8011bb0:	d00b      	beq.n	8011bca <USBD_GetConfig+0x4a>
 8011bb2:	e012      	b.n	8011bda <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	2200      	movs	r2, #0
 8011bb8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	3308      	adds	r3, #8
 8011bbe:	2201      	movs	r2, #1
 8011bc0:	4619      	mov	r1, r3
 8011bc2:	6878      	ldr	r0, [r7, #4]
 8011bc4:	f000 f948 	bl	8011e58 <USBD_CtlSendData>
        break;
 8011bc8:	e00c      	b.n	8011be4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	3304      	adds	r3, #4
 8011bce:	2201      	movs	r2, #1
 8011bd0:	4619      	mov	r1, r3
 8011bd2:	6878      	ldr	r0, [r7, #4]
 8011bd4:	f000 f940 	bl	8011e58 <USBD_CtlSendData>
        break;
 8011bd8:	e004      	b.n	8011be4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8011bda:	6839      	ldr	r1, [r7, #0]
 8011bdc:	6878      	ldr	r0, [r7, #4]
 8011bde:	f000 f8be 	bl	8011d5e <USBD_CtlError>
        break;
 8011be2:	bf00      	nop
}
 8011be4:	bf00      	nop
 8011be6:	3708      	adds	r7, #8
 8011be8:	46bd      	mov	sp, r7
 8011bea:	bd80      	pop	{r7, pc}

08011bec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b082      	sub	sp, #8
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	6078      	str	r0, [r7, #4]
 8011bf4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011bfc:	b2db      	uxtb	r3, r3
 8011bfe:	3b01      	subs	r3, #1
 8011c00:	2b02      	cmp	r3, #2
 8011c02:	d81e      	bhi.n	8011c42 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011c04:	683b      	ldr	r3, [r7, #0]
 8011c06:	88db      	ldrh	r3, [r3, #6]
 8011c08:	2b02      	cmp	r3, #2
 8011c0a:	d004      	beq.n	8011c16 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011c0c:	6839      	ldr	r1, [r7, #0]
 8011c0e:	6878      	ldr	r0, [r7, #4]
 8011c10:	f000 f8a5 	bl	8011d5e <USBD_CtlError>
        break;
 8011c14:	e01a      	b.n	8011c4c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	2201      	movs	r2, #1
 8011c1a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d005      	beq.n	8011c32 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	68db      	ldr	r3, [r3, #12]
 8011c2a:	f043 0202 	orr.w	r2, r3, #2
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	330c      	adds	r3, #12
 8011c36:	2202      	movs	r2, #2
 8011c38:	4619      	mov	r1, r3
 8011c3a:	6878      	ldr	r0, [r7, #4]
 8011c3c:	f000 f90c 	bl	8011e58 <USBD_CtlSendData>
      break;
 8011c40:	e004      	b.n	8011c4c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8011c42:	6839      	ldr	r1, [r7, #0]
 8011c44:	6878      	ldr	r0, [r7, #4]
 8011c46:	f000 f88a 	bl	8011d5e <USBD_CtlError>
      break;
 8011c4a:	bf00      	nop
  }
}
 8011c4c:	bf00      	nop
 8011c4e:	3708      	adds	r7, #8
 8011c50:	46bd      	mov	sp, r7
 8011c52:	bd80      	pop	{r7, pc}

08011c54 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b082      	sub	sp, #8
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
 8011c5c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011c5e:	683b      	ldr	r3, [r7, #0]
 8011c60:	885b      	ldrh	r3, [r3, #2]
 8011c62:	2b01      	cmp	r3, #1
 8011c64:	d107      	bne.n	8011c76 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	2201      	movs	r2, #1
 8011c6a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8011c6e:	6878      	ldr	r0, [r7, #4]
 8011c70:	f000 f94c 	bl	8011f0c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8011c74:	e013      	b.n	8011c9e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8011c76:	683b      	ldr	r3, [r7, #0]
 8011c78:	885b      	ldrh	r3, [r3, #2]
 8011c7a:	2b02      	cmp	r3, #2
 8011c7c:	d10b      	bne.n	8011c96 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8011c7e:	683b      	ldr	r3, [r7, #0]
 8011c80:	889b      	ldrh	r3, [r3, #4]
 8011c82:	0a1b      	lsrs	r3, r3, #8
 8011c84:	b29b      	uxth	r3, r3
 8011c86:	b2da      	uxtb	r2, r3
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8011c8e:	6878      	ldr	r0, [r7, #4]
 8011c90:	f000 f93c 	bl	8011f0c <USBD_CtlSendStatus>
}
 8011c94:	e003      	b.n	8011c9e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8011c96:	6839      	ldr	r1, [r7, #0]
 8011c98:	6878      	ldr	r0, [r7, #4]
 8011c9a:	f000 f860 	bl	8011d5e <USBD_CtlError>
}
 8011c9e:	bf00      	nop
 8011ca0:	3708      	adds	r7, #8
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	bd80      	pop	{r7, pc}

08011ca6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ca6:	b580      	push	{r7, lr}
 8011ca8:	b082      	sub	sp, #8
 8011caa:	af00      	add	r7, sp, #0
 8011cac:	6078      	str	r0, [r7, #4]
 8011cae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011cb6:	b2db      	uxtb	r3, r3
 8011cb8:	3b01      	subs	r3, #1
 8011cba:	2b02      	cmp	r3, #2
 8011cbc:	d80b      	bhi.n	8011cd6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011cbe:	683b      	ldr	r3, [r7, #0]
 8011cc0:	885b      	ldrh	r3, [r3, #2]
 8011cc2:	2b01      	cmp	r3, #1
 8011cc4:	d10c      	bne.n	8011ce0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	2200      	movs	r2, #0
 8011cca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8011cce:	6878      	ldr	r0, [r7, #4]
 8011cd0:	f000 f91c 	bl	8011f0c <USBD_CtlSendStatus>
      }
      break;
 8011cd4:	e004      	b.n	8011ce0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8011cd6:	6839      	ldr	r1, [r7, #0]
 8011cd8:	6878      	ldr	r0, [r7, #4]
 8011cda:	f000 f840 	bl	8011d5e <USBD_CtlError>
      break;
 8011cde:	e000      	b.n	8011ce2 <USBD_ClrFeature+0x3c>
      break;
 8011ce0:	bf00      	nop
  }
}
 8011ce2:	bf00      	nop
 8011ce4:	3708      	adds	r7, #8
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	bd80      	pop	{r7, pc}

08011cea <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011cea:	b580      	push	{r7, lr}
 8011cec:	b084      	sub	sp, #16
 8011cee:	af00      	add	r7, sp, #0
 8011cf0:	6078      	str	r0, [r7, #4]
 8011cf2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011cf4:	683b      	ldr	r3, [r7, #0]
 8011cf6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	781a      	ldrb	r2, [r3, #0]
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	3301      	adds	r3, #1
 8011d04:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	781a      	ldrb	r2, [r3, #0]
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	3301      	adds	r3, #1
 8011d12:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011d14:	68f8      	ldr	r0, [r7, #12]
 8011d16:	f7ff fa16 	bl	8011146 <SWAPBYTE>
 8011d1a:	4603      	mov	r3, r0
 8011d1c:	461a      	mov	r2, r3
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	3301      	adds	r3, #1
 8011d26:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	3301      	adds	r3, #1
 8011d2c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011d2e:	68f8      	ldr	r0, [r7, #12]
 8011d30:	f7ff fa09 	bl	8011146 <SWAPBYTE>
 8011d34:	4603      	mov	r3, r0
 8011d36:	461a      	mov	r2, r3
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	3301      	adds	r3, #1
 8011d40:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	3301      	adds	r3, #1
 8011d46:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011d48:	68f8      	ldr	r0, [r7, #12]
 8011d4a:	f7ff f9fc 	bl	8011146 <SWAPBYTE>
 8011d4e:	4603      	mov	r3, r0
 8011d50:	461a      	mov	r2, r3
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	80da      	strh	r2, [r3, #6]
}
 8011d56:	bf00      	nop
 8011d58:	3710      	adds	r7, #16
 8011d5a:	46bd      	mov	sp, r7
 8011d5c:	bd80      	pop	{r7, pc}

08011d5e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011d5e:	b580      	push	{r7, lr}
 8011d60:	b082      	sub	sp, #8
 8011d62:	af00      	add	r7, sp, #0
 8011d64:	6078      	str	r0, [r7, #4]
 8011d66:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011d68:	2180      	movs	r1, #128	@ 0x80
 8011d6a:	6878      	ldr	r0, [r7, #4]
 8011d6c:	f000 fcd8 	bl	8012720 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011d70:	2100      	movs	r1, #0
 8011d72:	6878      	ldr	r0, [r7, #4]
 8011d74:	f000 fcd4 	bl	8012720 <USBD_LL_StallEP>
}
 8011d78:	bf00      	nop
 8011d7a:	3708      	adds	r7, #8
 8011d7c:	46bd      	mov	sp, r7
 8011d7e:	bd80      	pop	{r7, pc}

08011d80 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011d80:	b580      	push	{r7, lr}
 8011d82:	b086      	sub	sp, #24
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	60f8      	str	r0, [r7, #12]
 8011d88:	60b9      	str	r1, [r7, #8]
 8011d8a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011d8c:	2300      	movs	r3, #0
 8011d8e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d042      	beq.n	8011e1c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8011d9a:	6938      	ldr	r0, [r7, #16]
 8011d9c:	f000 f842 	bl	8011e24 <USBD_GetLen>
 8011da0:	4603      	mov	r3, r0
 8011da2:	3301      	adds	r3, #1
 8011da4:	005b      	lsls	r3, r3, #1
 8011da6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011daa:	d808      	bhi.n	8011dbe <USBD_GetString+0x3e>
 8011dac:	6938      	ldr	r0, [r7, #16]
 8011dae:	f000 f839 	bl	8011e24 <USBD_GetLen>
 8011db2:	4603      	mov	r3, r0
 8011db4:	3301      	adds	r3, #1
 8011db6:	b29b      	uxth	r3, r3
 8011db8:	005b      	lsls	r3, r3, #1
 8011dba:	b29a      	uxth	r2, r3
 8011dbc:	e001      	b.n	8011dc2 <USBD_GetString+0x42>
 8011dbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011dc6:	7dfb      	ldrb	r3, [r7, #23]
 8011dc8:	68ba      	ldr	r2, [r7, #8]
 8011dca:	4413      	add	r3, r2
 8011dcc:	687a      	ldr	r2, [r7, #4]
 8011dce:	7812      	ldrb	r2, [r2, #0]
 8011dd0:	701a      	strb	r2, [r3, #0]
  idx++;
 8011dd2:	7dfb      	ldrb	r3, [r7, #23]
 8011dd4:	3301      	adds	r3, #1
 8011dd6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011dd8:	7dfb      	ldrb	r3, [r7, #23]
 8011dda:	68ba      	ldr	r2, [r7, #8]
 8011ddc:	4413      	add	r3, r2
 8011dde:	2203      	movs	r2, #3
 8011de0:	701a      	strb	r2, [r3, #0]
  idx++;
 8011de2:	7dfb      	ldrb	r3, [r7, #23]
 8011de4:	3301      	adds	r3, #1
 8011de6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011de8:	e013      	b.n	8011e12 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8011dea:	7dfb      	ldrb	r3, [r7, #23]
 8011dec:	68ba      	ldr	r2, [r7, #8]
 8011dee:	4413      	add	r3, r2
 8011df0:	693a      	ldr	r2, [r7, #16]
 8011df2:	7812      	ldrb	r2, [r2, #0]
 8011df4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011df6:	693b      	ldr	r3, [r7, #16]
 8011df8:	3301      	adds	r3, #1
 8011dfa:	613b      	str	r3, [r7, #16]
    idx++;
 8011dfc:	7dfb      	ldrb	r3, [r7, #23]
 8011dfe:	3301      	adds	r3, #1
 8011e00:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011e02:	7dfb      	ldrb	r3, [r7, #23]
 8011e04:	68ba      	ldr	r2, [r7, #8]
 8011e06:	4413      	add	r3, r2
 8011e08:	2200      	movs	r2, #0
 8011e0a:	701a      	strb	r2, [r3, #0]
    idx++;
 8011e0c:	7dfb      	ldrb	r3, [r7, #23]
 8011e0e:	3301      	adds	r3, #1
 8011e10:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011e12:	693b      	ldr	r3, [r7, #16]
 8011e14:	781b      	ldrb	r3, [r3, #0]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d1e7      	bne.n	8011dea <USBD_GetString+0x6a>
 8011e1a:	e000      	b.n	8011e1e <USBD_GetString+0x9e>
    return;
 8011e1c:	bf00      	nop
  }
}
 8011e1e:	3718      	adds	r7, #24
 8011e20:	46bd      	mov	sp, r7
 8011e22:	bd80      	pop	{r7, pc}

08011e24 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011e24:	b480      	push	{r7}
 8011e26:	b085      	sub	sp, #20
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011e2c:	2300      	movs	r3, #0
 8011e2e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011e34:	e005      	b.n	8011e42 <USBD_GetLen+0x1e>
  {
    len++;
 8011e36:	7bfb      	ldrb	r3, [r7, #15]
 8011e38:	3301      	adds	r3, #1
 8011e3a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011e3c:	68bb      	ldr	r3, [r7, #8]
 8011e3e:	3301      	adds	r3, #1
 8011e40:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011e42:	68bb      	ldr	r3, [r7, #8]
 8011e44:	781b      	ldrb	r3, [r3, #0]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d1f5      	bne.n	8011e36 <USBD_GetLen+0x12>
  }

  return len;
 8011e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	3714      	adds	r7, #20
 8011e50:	46bd      	mov	sp, r7
 8011e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e56:	4770      	bx	lr

08011e58 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011e58:	b580      	push	{r7, lr}
 8011e5a:	b084      	sub	sp, #16
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	60f8      	str	r0, [r7, #12]
 8011e60:	60b9      	str	r1, [r7, #8]
 8011e62:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	2202      	movs	r2, #2
 8011e68:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	687a      	ldr	r2, [r7, #4]
 8011e70:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	687a      	ldr	r2, [r7, #4]
 8011e76:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	68ba      	ldr	r2, [r7, #8]
 8011e7c:	2100      	movs	r1, #0
 8011e7e:	68f8      	ldr	r0, [r7, #12]
 8011e80:	f000 fcd7 	bl	8012832 <USBD_LL_Transmit>

  return USBD_OK;
 8011e84:	2300      	movs	r3, #0
}
 8011e86:	4618      	mov	r0, r3
 8011e88:	3710      	adds	r7, #16
 8011e8a:	46bd      	mov	sp, r7
 8011e8c:	bd80      	pop	{r7, pc}

08011e8e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011e8e:	b580      	push	{r7, lr}
 8011e90:	b084      	sub	sp, #16
 8011e92:	af00      	add	r7, sp, #0
 8011e94:	60f8      	str	r0, [r7, #12]
 8011e96:	60b9      	str	r1, [r7, #8]
 8011e98:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	68ba      	ldr	r2, [r7, #8]
 8011e9e:	2100      	movs	r1, #0
 8011ea0:	68f8      	ldr	r0, [r7, #12]
 8011ea2:	f000 fcc6 	bl	8012832 <USBD_LL_Transmit>

  return USBD_OK;
 8011ea6:	2300      	movs	r3, #0
}
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	3710      	adds	r7, #16
 8011eac:	46bd      	mov	sp, r7
 8011eae:	bd80      	pop	{r7, pc}

08011eb0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	b084      	sub	sp, #16
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	60f8      	str	r0, [r7, #12]
 8011eb8:	60b9      	str	r1, [r7, #8]
 8011eba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	2203      	movs	r2, #3
 8011ec0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	687a      	ldr	r2, [r7, #4]
 8011ec8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	687a      	ldr	r2, [r7, #4]
 8011ed0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	68ba      	ldr	r2, [r7, #8]
 8011ed8:	2100      	movs	r1, #0
 8011eda:	68f8      	ldr	r0, [r7, #12]
 8011edc:	f000 fcca 	bl	8012874 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011ee0:	2300      	movs	r3, #0
}
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	3710      	adds	r7, #16
 8011ee6:	46bd      	mov	sp, r7
 8011ee8:	bd80      	pop	{r7, pc}

08011eea <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011eea:	b580      	push	{r7, lr}
 8011eec:	b084      	sub	sp, #16
 8011eee:	af00      	add	r7, sp, #0
 8011ef0:	60f8      	str	r0, [r7, #12]
 8011ef2:	60b9      	str	r1, [r7, #8]
 8011ef4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	68ba      	ldr	r2, [r7, #8]
 8011efa:	2100      	movs	r1, #0
 8011efc:	68f8      	ldr	r0, [r7, #12]
 8011efe:	f000 fcb9 	bl	8012874 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011f02:	2300      	movs	r3, #0
}
 8011f04:	4618      	mov	r0, r3
 8011f06:	3710      	adds	r7, #16
 8011f08:	46bd      	mov	sp, r7
 8011f0a:	bd80      	pop	{r7, pc}

08011f0c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011f0c:	b580      	push	{r7, lr}
 8011f0e:	b082      	sub	sp, #8
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	2204      	movs	r2, #4
 8011f18:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	2200      	movs	r2, #0
 8011f20:	2100      	movs	r1, #0
 8011f22:	6878      	ldr	r0, [r7, #4]
 8011f24:	f000 fc85 	bl	8012832 <USBD_LL_Transmit>

  return USBD_OK;
 8011f28:	2300      	movs	r3, #0
}
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	3708      	adds	r7, #8
 8011f2e:	46bd      	mov	sp, r7
 8011f30:	bd80      	pop	{r7, pc}

08011f32 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011f32:	b580      	push	{r7, lr}
 8011f34:	b082      	sub	sp, #8
 8011f36:	af00      	add	r7, sp, #0
 8011f38:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	2205      	movs	r2, #5
 8011f3e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011f42:	2300      	movs	r3, #0
 8011f44:	2200      	movs	r2, #0
 8011f46:	2100      	movs	r1, #0
 8011f48:	6878      	ldr	r0, [r7, #4]
 8011f4a:	f000 fc93 	bl	8012874 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011f4e:	2300      	movs	r3, #0
}
 8011f50:	4618      	mov	r0, r3
 8011f52:	3708      	adds	r7, #8
 8011f54:	46bd      	mov	sp, r7
 8011f56:	bd80      	pop	{r7, pc}

08011f58 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8011f5c:	2200      	movs	r2, #0
 8011f5e:	4912      	ldr	r1, [pc, #72]	@ (8011fa8 <MX_USB_Device_Init+0x50>)
 8011f60:	4812      	ldr	r0, [pc, #72]	@ (8011fac <MX_USB_Device_Init+0x54>)
 8011f62:	f7fe fd43 	bl	80109ec <USBD_Init>
 8011f66:	4603      	mov	r3, r0
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d001      	beq.n	8011f70 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8011f6c:	f7f2 ff00 	bl	8004d70 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8011f70:	490f      	ldr	r1, [pc, #60]	@ (8011fb0 <MX_USB_Device_Init+0x58>)
 8011f72:	480e      	ldr	r0, [pc, #56]	@ (8011fac <MX_USB_Device_Init+0x54>)
 8011f74:	f7fe fd78 	bl	8010a68 <USBD_RegisterClass>
 8011f78:	4603      	mov	r3, r0
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d001      	beq.n	8011f82 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8011f7e:	f7f2 fef7 	bl	8004d70 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8011f82:	490c      	ldr	r1, [pc, #48]	@ (8011fb4 <MX_USB_Device_Init+0x5c>)
 8011f84:	4809      	ldr	r0, [pc, #36]	@ (8011fac <MX_USB_Device_Init+0x54>)
 8011f86:	f7fe fc61 	bl	801084c <USBD_CDC_RegisterInterface>
 8011f8a:	4603      	mov	r3, r0
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d001      	beq.n	8011f94 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8011f90:	f7f2 feee 	bl	8004d70 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8011f94:	4805      	ldr	r0, [pc, #20]	@ (8011fac <MX_USB_Device_Init+0x54>)
 8011f96:	f7fe fdab 	bl	8010af0 <USBD_Start>
 8011f9a:	4603      	mov	r3, r0
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d001      	beq.n	8011fa4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8011fa0:	f7f2 fee6 	bl	8004d70 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8011fa4:	bf00      	nop
 8011fa6:	bd80      	pop	{r7, pc}
 8011fa8:	200000d8 	.word	0x200000d8
 8011fac:	200007f8 	.word	0x200007f8
 8011fb0:	20000044 	.word	0x20000044
 8011fb4:	200000c4 	.word	0x200000c4

08011fb8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011fb8:	b580      	push	{r7, lr}
 8011fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011fbc:	2200      	movs	r2, #0
 8011fbe:	4905      	ldr	r1, [pc, #20]	@ (8011fd4 <CDC_Init_FS+0x1c>)
 8011fc0:	4805      	ldr	r0, [pc, #20]	@ (8011fd8 <CDC_Init_FS+0x20>)
 8011fc2:	f7fe fc5d 	bl	8010880 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011fc6:	4905      	ldr	r1, [pc, #20]	@ (8011fdc <CDC_Init_FS+0x24>)
 8011fc8:	4803      	ldr	r0, [pc, #12]	@ (8011fd8 <CDC_Init_FS+0x20>)
 8011fca:	f7fe fc7b 	bl	80108c4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011fce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	bd80      	pop	{r7, pc}
 8011fd4:	200012d4 	.word	0x200012d4
 8011fd8:	200007f8 	.word	0x200007f8
 8011fdc:	20000ad4 	.word	0x20000ad4

08011fe0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011fe0:	b480      	push	{r7}
 8011fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011fe4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	46bd      	mov	sp, r7
 8011fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fee:	4770      	bx	lr

08011ff0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011ff0:	b480      	push	{r7}
 8011ff2:	b083      	sub	sp, #12
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	4603      	mov	r3, r0
 8011ff8:	6039      	str	r1, [r7, #0]
 8011ffa:	71fb      	strb	r3, [r7, #7]
 8011ffc:	4613      	mov	r3, r2
 8011ffe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012000:	79fb      	ldrb	r3, [r7, #7]
 8012002:	2b23      	cmp	r3, #35	@ 0x23
 8012004:	d84a      	bhi.n	801209c <CDC_Control_FS+0xac>
 8012006:	a201      	add	r2, pc, #4	@ (adr r2, 801200c <CDC_Control_FS+0x1c>)
 8012008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801200c:	0801209d 	.word	0x0801209d
 8012010:	0801209d 	.word	0x0801209d
 8012014:	0801209d 	.word	0x0801209d
 8012018:	0801209d 	.word	0x0801209d
 801201c:	0801209d 	.word	0x0801209d
 8012020:	0801209d 	.word	0x0801209d
 8012024:	0801209d 	.word	0x0801209d
 8012028:	0801209d 	.word	0x0801209d
 801202c:	0801209d 	.word	0x0801209d
 8012030:	0801209d 	.word	0x0801209d
 8012034:	0801209d 	.word	0x0801209d
 8012038:	0801209d 	.word	0x0801209d
 801203c:	0801209d 	.word	0x0801209d
 8012040:	0801209d 	.word	0x0801209d
 8012044:	0801209d 	.word	0x0801209d
 8012048:	0801209d 	.word	0x0801209d
 801204c:	0801209d 	.word	0x0801209d
 8012050:	0801209d 	.word	0x0801209d
 8012054:	0801209d 	.word	0x0801209d
 8012058:	0801209d 	.word	0x0801209d
 801205c:	0801209d 	.word	0x0801209d
 8012060:	0801209d 	.word	0x0801209d
 8012064:	0801209d 	.word	0x0801209d
 8012068:	0801209d 	.word	0x0801209d
 801206c:	0801209d 	.word	0x0801209d
 8012070:	0801209d 	.word	0x0801209d
 8012074:	0801209d 	.word	0x0801209d
 8012078:	0801209d 	.word	0x0801209d
 801207c:	0801209d 	.word	0x0801209d
 8012080:	0801209d 	.word	0x0801209d
 8012084:	0801209d 	.word	0x0801209d
 8012088:	0801209d 	.word	0x0801209d
 801208c:	0801209d 	.word	0x0801209d
 8012090:	0801209d 	.word	0x0801209d
 8012094:	0801209d 	.word	0x0801209d
 8012098:	0801209d 	.word	0x0801209d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801209c:	bf00      	nop
  }

  return (USBD_OK);
 801209e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80120a0:	4618      	mov	r0, r3
 80120a2:	370c      	adds	r7, #12
 80120a4:	46bd      	mov	sp, r7
 80120a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120aa:	4770      	bx	lr

080120ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80120ac:	b580      	push	{r7, lr}
 80120ae:	b082      	sub	sp, #8
 80120b0:	af00      	add	r7, sp, #0
 80120b2:	6078      	str	r0, [r7, #4]
 80120b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80120b6:	6879      	ldr	r1, [r7, #4]
 80120b8:	4805      	ldr	r0, [pc, #20]	@ (80120d0 <CDC_Receive_FS+0x24>)
 80120ba:	f7fe fc03 	bl	80108c4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80120be:	4804      	ldr	r0, [pc, #16]	@ (80120d0 <CDC_Receive_FS+0x24>)
 80120c0:	f7fe fc5e 	bl	8010980 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80120c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80120c6:	4618      	mov	r0, r3
 80120c8:	3708      	adds	r7, #8
 80120ca:	46bd      	mov	sp, r7
 80120cc:	bd80      	pop	{r7, pc}
 80120ce:	bf00      	nop
 80120d0:	200007f8 	.word	0x200007f8

080120d4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80120d4:	b580      	push	{r7, lr}
 80120d6:	b084      	sub	sp, #16
 80120d8:	af00      	add	r7, sp, #0
 80120da:	6078      	str	r0, [r7, #4]
 80120dc:	460b      	mov	r3, r1
 80120de:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80120e0:	2300      	movs	r3, #0
 80120e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80120e4:	4b0d      	ldr	r3, [pc, #52]	@ (801211c <CDC_Transmit_FS+0x48>)
 80120e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80120ea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80120ec:	68bb      	ldr	r3, [r7, #8]
 80120ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d001      	beq.n	80120fa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80120f6:	2301      	movs	r3, #1
 80120f8:	e00b      	b.n	8012112 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80120fa:	887b      	ldrh	r3, [r7, #2]
 80120fc:	461a      	mov	r2, r3
 80120fe:	6879      	ldr	r1, [r7, #4]
 8012100:	4806      	ldr	r0, [pc, #24]	@ (801211c <CDC_Transmit_FS+0x48>)
 8012102:	f7fe fbbd 	bl	8010880 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8012106:	4805      	ldr	r0, [pc, #20]	@ (801211c <CDC_Transmit_FS+0x48>)
 8012108:	f7fe fbfa 	bl	8010900 <USBD_CDC_TransmitPacket>
 801210c:	4603      	mov	r3, r0
 801210e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8012110:	7bfb      	ldrb	r3, [r7, #15]
}
 8012112:	4618      	mov	r0, r3
 8012114:	3710      	adds	r7, #16
 8012116:	46bd      	mov	sp, r7
 8012118:	bd80      	pop	{r7, pc}
 801211a:	bf00      	nop
 801211c:	200007f8 	.word	0x200007f8

08012120 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012120:	b480      	push	{r7}
 8012122:	b087      	sub	sp, #28
 8012124:	af00      	add	r7, sp, #0
 8012126:	60f8      	str	r0, [r7, #12]
 8012128:	60b9      	str	r1, [r7, #8]
 801212a:	4613      	mov	r3, r2
 801212c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801212e:	2300      	movs	r3, #0
 8012130:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8012132:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012136:	4618      	mov	r0, r3
 8012138:	371c      	adds	r7, #28
 801213a:	46bd      	mov	sp, r7
 801213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012140:	4770      	bx	lr
	...

08012144 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012144:	b480      	push	{r7}
 8012146:	b083      	sub	sp, #12
 8012148:	af00      	add	r7, sp, #0
 801214a:	4603      	mov	r3, r0
 801214c:	6039      	str	r1, [r7, #0]
 801214e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8012150:	683b      	ldr	r3, [r7, #0]
 8012152:	2212      	movs	r2, #18
 8012154:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8012156:	4b03      	ldr	r3, [pc, #12]	@ (8012164 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8012158:	4618      	mov	r0, r3
 801215a:	370c      	adds	r7, #12
 801215c:	46bd      	mov	sp, r7
 801215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012162:	4770      	bx	lr
 8012164:	200000f8 	.word	0x200000f8

08012168 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012168:	b480      	push	{r7}
 801216a:	b083      	sub	sp, #12
 801216c:	af00      	add	r7, sp, #0
 801216e:	4603      	mov	r3, r0
 8012170:	6039      	str	r1, [r7, #0]
 8012172:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012174:	683b      	ldr	r3, [r7, #0]
 8012176:	2204      	movs	r2, #4
 8012178:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801217a:	4b03      	ldr	r3, [pc, #12]	@ (8012188 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 801217c:	4618      	mov	r0, r3
 801217e:	370c      	adds	r7, #12
 8012180:	46bd      	mov	sp, r7
 8012182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012186:	4770      	bx	lr
 8012188:	2000010c 	.word	0x2000010c

0801218c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801218c:	b580      	push	{r7, lr}
 801218e:	b082      	sub	sp, #8
 8012190:	af00      	add	r7, sp, #0
 8012192:	4603      	mov	r3, r0
 8012194:	6039      	str	r1, [r7, #0]
 8012196:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012198:	79fb      	ldrb	r3, [r7, #7]
 801219a:	2b00      	cmp	r3, #0
 801219c:	d105      	bne.n	80121aa <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801219e:	683a      	ldr	r2, [r7, #0]
 80121a0:	4907      	ldr	r1, [pc, #28]	@ (80121c0 <USBD_CDC_ProductStrDescriptor+0x34>)
 80121a2:	4808      	ldr	r0, [pc, #32]	@ (80121c4 <USBD_CDC_ProductStrDescriptor+0x38>)
 80121a4:	f7ff fdec 	bl	8011d80 <USBD_GetString>
 80121a8:	e004      	b.n	80121b4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80121aa:	683a      	ldr	r2, [r7, #0]
 80121ac:	4904      	ldr	r1, [pc, #16]	@ (80121c0 <USBD_CDC_ProductStrDescriptor+0x34>)
 80121ae:	4805      	ldr	r0, [pc, #20]	@ (80121c4 <USBD_CDC_ProductStrDescriptor+0x38>)
 80121b0:	f7ff fde6 	bl	8011d80 <USBD_GetString>
  }
  return USBD_StrDesc;
 80121b4:	4b02      	ldr	r3, [pc, #8]	@ (80121c0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80121b6:	4618      	mov	r0, r3
 80121b8:	3708      	adds	r7, #8
 80121ba:	46bd      	mov	sp, r7
 80121bc:	bd80      	pop	{r7, pc}
 80121be:	bf00      	nop
 80121c0:	20001ad4 	.word	0x20001ad4
 80121c4:	080153fc 	.word	0x080153fc

080121c8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b082      	sub	sp, #8
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	4603      	mov	r3, r0
 80121d0:	6039      	str	r1, [r7, #0]
 80121d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80121d4:	683a      	ldr	r2, [r7, #0]
 80121d6:	4904      	ldr	r1, [pc, #16]	@ (80121e8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80121d8:	4804      	ldr	r0, [pc, #16]	@ (80121ec <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80121da:	f7ff fdd1 	bl	8011d80 <USBD_GetString>
  return USBD_StrDesc;
 80121de:	4b02      	ldr	r3, [pc, #8]	@ (80121e8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80121e0:	4618      	mov	r0, r3
 80121e2:	3708      	adds	r7, #8
 80121e4:	46bd      	mov	sp, r7
 80121e6:	bd80      	pop	{r7, pc}
 80121e8:	20001ad4 	.word	0x20001ad4
 80121ec:	08015414 	.word	0x08015414

080121f0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80121f0:	b580      	push	{r7, lr}
 80121f2:	b082      	sub	sp, #8
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	4603      	mov	r3, r0
 80121f8:	6039      	str	r1, [r7, #0]
 80121fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80121fc:	683b      	ldr	r3, [r7, #0]
 80121fe:	221a      	movs	r2, #26
 8012200:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012202:	f000 f843 	bl	801228c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8012206:	4b02      	ldr	r3, [pc, #8]	@ (8012210 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8012208:	4618      	mov	r0, r3
 801220a:	3708      	adds	r7, #8
 801220c:	46bd      	mov	sp, r7
 801220e:	bd80      	pop	{r7, pc}
 8012210:	20000110 	.word	0x20000110

08012214 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012214:	b580      	push	{r7, lr}
 8012216:	b082      	sub	sp, #8
 8012218:	af00      	add	r7, sp, #0
 801221a:	4603      	mov	r3, r0
 801221c:	6039      	str	r1, [r7, #0]
 801221e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012220:	79fb      	ldrb	r3, [r7, #7]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d105      	bne.n	8012232 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8012226:	683a      	ldr	r2, [r7, #0]
 8012228:	4907      	ldr	r1, [pc, #28]	@ (8012248 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801222a:	4808      	ldr	r0, [pc, #32]	@ (801224c <USBD_CDC_ConfigStrDescriptor+0x38>)
 801222c:	f7ff fda8 	bl	8011d80 <USBD_GetString>
 8012230:	e004      	b.n	801223c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8012232:	683a      	ldr	r2, [r7, #0]
 8012234:	4904      	ldr	r1, [pc, #16]	@ (8012248 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8012236:	4805      	ldr	r0, [pc, #20]	@ (801224c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8012238:	f7ff fda2 	bl	8011d80 <USBD_GetString>
  }
  return USBD_StrDesc;
 801223c:	4b02      	ldr	r3, [pc, #8]	@ (8012248 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 801223e:	4618      	mov	r0, r3
 8012240:	3708      	adds	r7, #8
 8012242:	46bd      	mov	sp, r7
 8012244:	bd80      	pop	{r7, pc}
 8012246:	bf00      	nop
 8012248:	20001ad4 	.word	0x20001ad4
 801224c:	08015428 	.word	0x08015428

08012250 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012250:	b580      	push	{r7, lr}
 8012252:	b082      	sub	sp, #8
 8012254:	af00      	add	r7, sp, #0
 8012256:	4603      	mov	r3, r0
 8012258:	6039      	str	r1, [r7, #0]
 801225a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801225c:	79fb      	ldrb	r3, [r7, #7]
 801225e:	2b00      	cmp	r3, #0
 8012260:	d105      	bne.n	801226e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8012262:	683a      	ldr	r2, [r7, #0]
 8012264:	4907      	ldr	r1, [pc, #28]	@ (8012284 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8012266:	4808      	ldr	r0, [pc, #32]	@ (8012288 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8012268:	f7ff fd8a 	bl	8011d80 <USBD_GetString>
 801226c:	e004      	b.n	8012278 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801226e:	683a      	ldr	r2, [r7, #0]
 8012270:	4904      	ldr	r1, [pc, #16]	@ (8012284 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8012272:	4805      	ldr	r0, [pc, #20]	@ (8012288 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8012274:	f7ff fd84 	bl	8011d80 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012278:	4b02      	ldr	r3, [pc, #8]	@ (8012284 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 801227a:	4618      	mov	r0, r3
 801227c:	3708      	adds	r7, #8
 801227e:	46bd      	mov	sp, r7
 8012280:	bd80      	pop	{r7, pc}
 8012282:	bf00      	nop
 8012284:	20001ad4 	.word	0x20001ad4
 8012288:	08015434 	.word	0x08015434

0801228c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b084      	sub	sp, #16
 8012290:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012292:	4b0f      	ldr	r3, [pc, #60]	@ (80122d0 <Get_SerialNum+0x44>)
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012298:	4b0e      	ldr	r3, [pc, #56]	@ (80122d4 <Get_SerialNum+0x48>)
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801229e:	4b0e      	ldr	r3, [pc, #56]	@ (80122d8 <Get_SerialNum+0x4c>)
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80122a4:	68fa      	ldr	r2, [r7, #12]
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	4413      	add	r3, r2
 80122aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d009      	beq.n	80122c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80122b2:	2208      	movs	r2, #8
 80122b4:	4909      	ldr	r1, [pc, #36]	@ (80122dc <Get_SerialNum+0x50>)
 80122b6:	68f8      	ldr	r0, [r7, #12]
 80122b8:	f000 f814 	bl	80122e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80122bc:	2204      	movs	r2, #4
 80122be:	4908      	ldr	r1, [pc, #32]	@ (80122e0 <Get_SerialNum+0x54>)
 80122c0:	68b8      	ldr	r0, [r7, #8]
 80122c2:	f000 f80f 	bl	80122e4 <IntToUnicode>
  }
}
 80122c6:	bf00      	nop
 80122c8:	3710      	adds	r7, #16
 80122ca:	46bd      	mov	sp, r7
 80122cc:	bd80      	pop	{r7, pc}
 80122ce:	bf00      	nop
 80122d0:	1fff7590 	.word	0x1fff7590
 80122d4:	1fff7594 	.word	0x1fff7594
 80122d8:	1fff7598 	.word	0x1fff7598
 80122dc:	20000112 	.word	0x20000112
 80122e0:	20000122 	.word	0x20000122

080122e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80122e4:	b480      	push	{r7}
 80122e6:	b087      	sub	sp, #28
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	60f8      	str	r0, [r7, #12]
 80122ec:	60b9      	str	r1, [r7, #8]
 80122ee:	4613      	mov	r3, r2
 80122f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80122f2:	2300      	movs	r3, #0
 80122f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80122f6:	2300      	movs	r3, #0
 80122f8:	75fb      	strb	r3, [r7, #23]
 80122fa:	e027      	b.n	801234c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	0f1b      	lsrs	r3, r3, #28
 8012300:	2b09      	cmp	r3, #9
 8012302:	d80b      	bhi.n	801231c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	0f1b      	lsrs	r3, r3, #28
 8012308:	b2da      	uxtb	r2, r3
 801230a:	7dfb      	ldrb	r3, [r7, #23]
 801230c:	005b      	lsls	r3, r3, #1
 801230e:	4619      	mov	r1, r3
 8012310:	68bb      	ldr	r3, [r7, #8]
 8012312:	440b      	add	r3, r1
 8012314:	3230      	adds	r2, #48	@ 0x30
 8012316:	b2d2      	uxtb	r2, r2
 8012318:	701a      	strb	r2, [r3, #0]
 801231a:	e00a      	b.n	8012332 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	0f1b      	lsrs	r3, r3, #28
 8012320:	b2da      	uxtb	r2, r3
 8012322:	7dfb      	ldrb	r3, [r7, #23]
 8012324:	005b      	lsls	r3, r3, #1
 8012326:	4619      	mov	r1, r3
 8012328:	68bb      	ldr	r3, [r7, #8]
 801232a:	440b      	add	r3, r1
 801232c:	3237      	adds	r2, #55	@ 0x37
 801232e:	b2d2      	uxtb	r2, r2
 8012330:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	011b      	lsls	r3, r3, #4
 8012336:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012338:	7dfb      	ldrb	r3, [r7, #23]
 801233a:	005b      	lsls	r3, r3, #1
 801233c:	3301      	adds	r3, #1
 801233e:	68ba      	ldr	r2, [r7, #8]
 8012340:	4413      	add	r3, r2
 8012342:	2200      	movs	r2, #0
 8012344:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012346:	7dfb      	ldrb	r3, [r7, #23]
 8012348:	3301      	adds	r3, #1
 801234a:	75fb      	strb	r3, [r7, #23]
 801234c:	7dfa      	ldrb	r2, [r7, #23]
 801234e:	79fb      	ldrb	r3, [r7, #7]
 8012350:	429a      	cmp	r2, r3
 8012352:	d3d3      	bcc.n	80122fc <IntToUnicode+0x18>
  }
}
 8012354:	bf00      	nop
 8012356:	bf00      	nop
 8012358:	371c      	adds	r7, #28
 801235a:	46bd      	mov	sp, r7
 801235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012360:	4770      	bx	lr

08012362 <LL_AHB2_GRP1_EnableClock>:
{
 8012362:	b480      	push	{r7}
 8012364:	b085      	sub	sp, #20
 8012366:	af00      	add	r7, sp, #0
 8012368:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 801236a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801236e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012370:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	4313      	orrs	r3, r2
 8012378:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 801237a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801237e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	4013      	ands	r3, r2
 8012384:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8012386:	68fb      	ldr	r3, [r7, #12]
}
 8012388:	bf00      	nop
 801238a:	3714      	adds	r7, #20
 801238c:	46bd      	mov	sp, r7
 801238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012392:	4770      	bx	lr

08012394 <LL_APB1_GRP1_EnableClock>:
{
 8012394:	b480      	push	{r7}
 8012396:	b085      	sub	sp, #20
 8012398:	af00      	add	r7, sp, #0
 801239a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 801239c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80123a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80123a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	4313      	orrs	r3, r2
 80123aa:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80123ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80123b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	4013      	ands	r3, r2
 80123b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80123b8:	68fb      	ldr	r3, [r7, #12]
}
 80123ba:	bf00      	nop
 80123bc:	3714      	adds	r7, #20
 80123be:	46bd      	mov	sp, r7
 80123c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c4:	4770      	bx	lr
	...

080123c8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80123c8:	b580      	push	{r7, lr}
 80123ca:	b088      	sub	sp, #32
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80123d0:	f107 030c 	add.w	r3, r7, #12
 80123d4:	2200      	movs	r2, #0
 80123d6:	601a      	str	r2, [r3, #0]
 80123d8:	605a      	str	r2, [r3, #4]
 80123da:	609a      	str	r2, [r3, #8]
 80123dc:	60da      	str	r2, [r3, #12]
 80123de:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	4a17      	ldr	r2, [pc, #92]	@ (8012444 <HAL_PCD_MspInit+0x7c>)
 80123e6:	4293      	cmp	r3, r2
 80123e8:	d128      	bne.n	801243c <HAL_PCD_MspInit+0x74>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80123ea:	2001      	movs	r0, #1
 80123ec:	f7ff ffb9 	bl	8012362 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 80123f0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80123f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80123f6:	2302      	movs	r3, #2
 80123f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80123fa:	2300      	movs	r3, #0
 80123fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80123fe:	2300      	movs	r3, #0
 8012400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8012402:	230a      	movs	r3, #10
 8012404:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012406:	f107 030c 	add.w	r3, r7, #12
 801240a:	4619      	mov	r1, r3
 801240c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8012410:	f7f5 f87a 	bl	8007508 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8012414:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8012418:	f7ff ffbc 	bl	8012394 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 801241c:	2200      	movs	r2, #0
 801241e:	2100      	movs	r1, #0
 8012420:	2013      	movs	r0, #19
 8012422:	f7f4 fd5a 	bl	8006eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 8012426:	2013      	movs	r0, #19
 8012428:	f7f4 fd71 	bl	8006f0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 801242c:	2200      	movs	r2, #0
 801242e:	2100      	movs	r1, #0
 8012430:	2014      	movs	r0, #20
 8012432:	f7f4 fd52 	bl	8006eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8012436:	2014      	movs	r0, #20
 8012438:	f7f4 fd69 	bl	8006f0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801243c:	bf00      	nop
 801243e:	3720      	adds	r7, #32
 8012440:	46bd      	mov	sp, r7
 8012442:	bd80      	pop	{r7, pc}
 8012444:	40006800 	.word	0x40006800

08012448 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012448:	b580      	push	{r7, lr}
 801244a:	b082      	sub	sp, #8
 801244c:	af00      	add	r7, sp, #0
 801244e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 801245c:	4619      	mov	r1, r3
 801245e:	4610      	mov	r0, r2
 8012460:	f7fe fb93 	bl	8010b8a <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8012464:	bf00      	nop
 8012466:	3708      	adds	r7, #8
 8012468:	46bd      	mov	sp, r7
 801246a:	bd80      	pop	{r7, pc}

0801246c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801246c:	b580      	push	{r7, lr}
 801246e:	b082      	sub	sp, #8
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
 8012474:	460b      	mov	r3, r1
 8012476:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 801247e:	78fa      	ldrb	r2, [r7, #3]
 8012480:	6879      	ldr	r1, [r7, #4]
 8012482:	4613      	mov	r3, r2
 8012484:	009b      	lsls	r3, r3, #2
 8012486:	4413      	add	r3, r2
 8012488:	00db      	lsls	r3, r3, #3
 801248a:	440b      	add	r3, r1
 801248c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012490:	681a      	ldr	r2, [r3, #0]
 8012492:	78fb      	ldrb	r3, [r7, #3]
 8012494:	4619      	mov	r1, r3
 8012496:	f7fe fbcd 	bl	8010c34 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801249a:	bf00      	nop
 801249c:	3708      	adds	r7, #8
 801249e:	46bd      	mov	sp, r7
 80124a0:	bd80      	pop	{r7, pc}

080124a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80124a2:	b580      	push	{r7, lr}
 80124a4:	b082      	sub	sp, #8
 80124a6:	af00      	add	r7, sp, #0
 80124a8:	6078      	str	r0, [r7, #4]
 80124aa:	460b      	mov	r3, r1
 80124ac:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80124b4:	78fa      	ldrb	r2, [r7, #3]
 80124b6:	6879      	ldr	r1, [r7, #4]
 80124b8:	4613      	mov	r3, r2
 80124ba:	009b      	lsls	r3, r3, #2
 80124bc:	4413      	add	r3, r2
 80124be:	00db      	lsls	r3, r3, #3
 80124c0:	440b      	add	r3, r1
 80124c2:	3324      	adds	r3, #36	@ 0x24
 80124c4:	681a      	ldr	r2, [r3, #0]
 80124c6:	78fb      	ldrb	r3, [r7, #3]
 80124c8:	4619      	mov	r1, r3
 80124ca:	f7fe fc66 	bl	8010d9a <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80124ce:	bf00      	nop
 80124d0:	3708      	adds	r7, #8
 80124d2:	46bd      	mov	sp, r7
 80124d4:	bd80      	pop	{r7, pc}

080124d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80124d6:	b580      	push	{r7, lr}
 80124d8:	b082      	sub	sp, #8
 80124da:	af00      	add	r7, sp, #0
 80124dc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80124e4:	4618      	mov	r0, r3
 80124e6:	f7fe fda0 	bl	801102a <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80124ea:	bf00      	nop
 80124ec:	3708      	adds	r7, #8
 80124ee:	46bd      	mov	sp, r7
 80124f0:	bd80      	pop	{r7, pc}

080124f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80124f2:	b580      	push	{r7, lr}
 80124f4:	b084      	sub	sp, #16
 80124f6:	af00      	add	r7, sp, #0
 80124f8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80124fa:	2301      	movs	r3, #1
 80124fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	795b      	ldrb	r3, [r3, #5]
 8012502:	2b02      	cmp	r3, #2
 8012504:	d001      	beq.n	801250a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8012506:	f7f2 fc33 	bl	8004d70 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012510:	7bfa      	ldrb	r2, [r7, #15]
 8012512:	4611      	mov	r1, r2
 8012514:	4618      	mov	r0, r3
 8012516:	f7fe fd44 	bl	8010fa2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012520:	4618      	mov	r0, r3
 8012522:	f7fe fcec 	bl	8010efe <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8012526:	bf00      	nop
 8012528:	3710      	adds	r7, #16
 801252a:	46bd      	mov	sp, r7
 801252c:	bd80      	pop	{r7, pc}
	...

08012530 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012530:	b580      	push	{r7, lr}
 8012532:	b082      	sub	sp, #8
 8012534:	af00      	add	r7, sp, #0
 8012536:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801253e:	4618      	mov	r0, r3
 8012540:	f7fe fd3f 	bl	8010fc2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	7a5b      	ldrb	r3, [r3, #9]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d005      	beq.n	8012558 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801254c:	4b04      	ldr	r3, [pc, #16]	@ (8012560 <HAL_PCD_SuspendCallback+0x30>)
 801254e:	691b      	ldr	r3, [r3, #16]
 8012550:	4a03      	ldr	r2, [pc, #12]	@ (8012560 <HAL_PCD_SuspendCallback+0x30>)
 8012552:	f043 0306 	orr.w	r3, r3, #6
 8012556:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8012558:	bf00      	nop
 801255a:	3708      	adds	r7, #8
 801255c:	46bd      	mov	sp, r7
 801255e:	bd80      	pop	{r7, pc}
 8012560:	e000ed00 	.word	0xe000ed00

08012564 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012564:	b580      	push	{r7, lr}
 8012566:	b082      	sub	sp, #8
 8012568:	af00      	add	r7, sp, #0
 801256a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	7a5b      	ldrb	r3, [r3, #9]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d007      	beq.n	8012584 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012574:	4b08      	ldr	r3, [pc, #32]	@ (8012598 <HAL_PCD_ResumeCallback+0x34>)
 8012576:	691b      	ldr	r3, [r3, #16]
 8012578:	4a07      	ldr	r2, [pc, #28]	@ (8012598 <HAL_PCD_ResumeCallback+0x34>)
 801257a:	f023 0306 	bic.w	r3, r3, #6
 801257e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8012580:	f000 f9fa 	bl	8012978 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801258a:	4618      	mov	r0, r3
 801258c:	f7fe fd35 	bl	8010ffa <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8012590:	bf00      	nop
 8012592:	3708      	adds	r7, #8
 8012594:	46bd      	mov	sp, r7
 8012596:	bd80      	pop	{r7, pc}
 8012598:	e000ed00 	.word	0xe000ed00

0801259c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801259c:	b580      	push	{r7, lr}
 801259e:	b082      	sub	sp, #8
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80125a4:	4a2c      	ldr	r2, [pc, #176]	@ (8012658 <USBD_LL_Init+0xbc>)
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	4a2a      	ldr	r2, [pc, #168]	@ (8012658 <USBD_LL_Init+0xbc>)
 80125b0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 80125b4:	f7f8 fa98 	bl	800aae8 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 80125b8:	4b27      	ldr	r3, [pc, #156]	@ (8012658 <USBD_LL_Init+0xbc>)
 80125ba:	4a28      	ldr	r2, [pc, #160]	@ (801265c <USBD_LL_Init+0xc0>)
 80125bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80125be:	4b26      	ldr	r3, [pc, #152]	@ (8012658 <USBD_LL_Init+0xbc>)
 80125c0:	2208      	movs	r2, #8
 80125c2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80125c4:	4b24      	ldr	r3, [pc, #144]	@ (8012658 <USBD_LL_Init+0xbc>)
 80125c6:	2202      	movs	r2, #2
 80125c8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80125ca:	4b23      	ldr	r3, [pc, #140]	@ (8012658 <USBD_LL_Init+0xbc>)
 80125cc:	2202      	movs	r2, #2
 80125ce:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80125d0:	4b21      	ldr	r3, [pc, #132]	@ (8012658 <USBD_LL_Init+0xbc>)
 80125d2:	2200      	movs	r2, #0
 80125d4:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80125d6:	4b20      	ldr	r3, [pc, #128]	@ (8012658 <USBD_LL_Init+0xbc>)
 80125d8:	2200      	movs	r2, #0
 80125da:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80125dc:	4b1e      	ldr	r3, [pc, #120]	@ (8012658 <USBD_LL_Init+0xbc>)
 80125de:	2200      	movs	r2, #0
 80125e0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80125e2:	4b1d      	ldr	r3, [pc, #116]	@ (8012658 <USBD_LL_Init+0xbc>)
 80125e4:	2200      	movs	r2, #0
 80125e6:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80125e8:	481b      	ldr	r0, [pc, #108]	@ (8012658 <USBD_LL_Init+0xbc>)
 80125ea:	f7f6 fd2c 	bl	8009046 <HAL_PCD_Init>
 80125ee:	4603      	mov	r3, r0
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d001      	beq.n	80125f8 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80125f4:	f7f2 fbbc 	bl	8004d70 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80125fe:	2318      	movs	r3, #24
 8012600:	2200      	movs	r2, #0
 8012602:	2100      	movs	r1, #0
 8012604:	f7f8 f9e5 	bl	800a9d2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801260e:	2358      	movs	r3, #88	@ 0x58
 8012610:	2200      	movs	r2, #0
 8012612:	2180      	movs	r1, #128	@ 0x80
 8012614:	f7f8 f9dd 	bl	800a9d2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801261e:	23c0      	movs	r3, #192	@ 0xc0
 8012620:	2200      	movs	r2, #0
 8012622:	2181      	movs	r1, #129	@ 0x81
 8012624:	f7f8 f9d5 	bl	800a9d2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801262e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8012632:	2200      	movs	r2, #0
 8012634:	2101      	movs	r1, #1
 8012636:	f7f8 f9cc 	bl	800a9d2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012640:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012644:	2200      	movs	r2, #0
 8012646:	2182      	movs	r1, #130	@ 0x82
 8012648:	f7f8 f9c3 	bl	800a9d2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801264c:	2300      	movs	r3, #0
}
 801264e:	4618      	mov	r0, r3
 8012650:	3708      	adds	r7, #8
 8012652:	46bd      	mov	sp, r7
 8012654:	bd80      	pop	{r7, pc}
 8012656:	bf00      	nop
 8012658:	20001cd4 	.word	0x20001cd4
 801265c:	40006800 	.word	0x40006800

08012660 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012660:	b580      	push	{r7, lr}
 8012662:	b084      	sub	sp, #16
 8012664:	af00      	add	r7, sp, #0
 8012666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012668:	2300      	movs	r3, #0
 801266a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801266c:	2300      	movs	r3, #0
 801266e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012676:	4618      	mov	r0, r3
 8012678:	f7f6 fdb3 	bl	80091e2 <HAL_PCD_Start>
 801267c:	4603      	mov	r3, r0
 801267e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012680:	7bfb      	ldrb	r3, [r7, #15]
 8012682:	4618      	mov	r0, r3
 8012684:	f000 f97e 	bl	8012984 <USBD_Get_USB_Status>
 8012688:	4603      	mov	r3, r0
 801268a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801268c:	7bbb      	ldrb	r3, [r7, #14]
}
 801268e:	4618      	mov	r0, r3
 8012690:	3710      	adds	r7, #16
 8012692:	46bd      	mov	sp, r7
 8012694:	bd80      	pop	{r7, pc}

08012696 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012696:	b580      	push	{r7, lr}
 8012698:	b084      	sub	sp, #16
 801269a:	af00      	add	r7, sp, #0
 801269c:	6078      	str	r0, [r7, #4]
 801269e:	4608      	mov	r0, r1
 80126a0:	4611      	mov	r1, r2
 80126a2:	461a      	mov	r2, r3
 80126a4:	4603      	mov	r3, r0
 80126a6:	70fb      	strb	r3, [r7, #3]
 80126a8:	460b      	mov	r3, r1
 80126aa:	70bb      	strb	r3, [r7, #2]
 80126ac:	4613      	mov	r3, r2
 80126ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80126b0:	2300      	movs	r3, #0
 80126b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80126b4:	2300      	movs	r3, #0
 80126b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80126be:	78bb      	ldrb	r3, [r7, #2]
 80126c0:	883a      	ldrh	r2, [r7, #0]
 80126c2:	78f9      	ldrb	r1, [r7, #3]
 80126c4:	f7f6 fefa 	bl	80094bc <HAL_PCD_EP_Open>
 80126c8:	4603      	mov	r3, r0
 80126ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80126cc:	7bfb      	ldrb	r3, [r7, #15]
 80126ce:	4618      	mov	r0, r3
 80126d0:	f000 f958 	bl	8012984 <USBD_Get_USB_Status>
 80126d4:	4603      	mov	r3, r0
 80126d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80126d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80126da:	4618      	mov	r0, r3
 80126dc:	3710      	adds	r7, #16
 80126de:	46bd      	mov	sp, r7
 80126e0:	bd80      	pop	{r7, pc}

080126e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80126e2:	b580      	push	{r7, lr}
 80126e4:	b084      	sub	sp, #16
 80126e6:	af00      	add	r7, sp, #0
 80126e8:	6078      	str	r0, [r7, #4]
 80126ea:	460b      	mov	r3, r1
 80126ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80126ee:	2300      	movs	r3, #0
 80126f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80126f2:	2300      	movs	r3, #0
 80126f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80126fc:	78fa      	ldrb	r2, [r7, #3]
 80126fe:	4611      	mov	r1, r2
 8012700:	4618      	mov	r0, r3
 8012702:	f7f6 ff38 	bl	8009576 <HAL_PCD_EP_Close>
 8012706:	4603      	mov	r3, r0
 8012708:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801270a:	7bfb      	ldrb	r3, [r7, #15]
 801270c:	4618      	mov	r0, r3
 801270e:	f000 f939 	bl	8012984 <USBD_Get_USB_Status>
 8012712:	4603      	mov	r3, r0
 8012714:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012716:	7bbb      	ldrb	r3, [r7, #14]
}
 8012718:	4618      	mov	r0, r3
 801271a:	3710      	adds	r7, #16
 801271c:	46bd      	mov	sp, r7
 801271e:	bd80      	pop	{r7, pc}

08012720 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012720:	b580      	push	{r7, lr}
 8012722:	b084      	sub	sp, #16
 8012724:	af00      	add	r7, sp, #0
 8012726:	6078      	str	r0, [r7, #4]
 8012728:	460b      	mov	r3, r1
 801272a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801272c:	2300      	movs	r3, #0
 801272e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012730:	2300      	movs	r3, #0
 8012732:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801273a:	78fa      	ldrb	r2, [r7, #3]
 801273c:	4611      	mov	r1, r2
 801273e:	4618      	mov	r0, r3
 8012740:	f7f6 ffe1 	bl	8009706 <HAL_PCD_EP_SetStall>
 8012744:	4603      	mov	r3, r0
 8012746:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012748:	7bfb      	ldrb	r3, [r7, #15]
 801274a:	4618      	mov	r0, r3
 801274c:	f000 f91a 	bl	8012984 <USBD_Get_USB_Status>
 8012750:	4603      	mov	r3, r0
 8012752:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012754:	7bbb      	ldrb	r3, [r7, #14]
}
 8012756:	4618      	mov	r0, r3
 8012758:	3710      	adds	r7, #16
 801275a:	46bd      	mov	sp, r7
 801275c:	bd80      	pop	{r7, pc}

0801275e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801275e:	b580      	push	{r7, lr}
 8012760:	b084      	sub	sp, #16
 8012762:	af00      	add	r7, sp, #0
 8012764:	6078      	str	r0, [r7, #4]
 8012766:	460b      	mov	r3, r1
 8012768:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801276a:	2300      	movs	r3, #0
 801276c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801276e:	2300      	movs	r3, #0
 8012770:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012778:	78fa      	ldrb	r2, [r7, #3]
 801277a:	4611      	mov	r1, r2
 801277c:	4618      	mov	r0, r3
 801277e:	f7f7 f814 	bl	80097aa <HAL_PCD_EP_ClrStall>
 8012782:	4603      	mov	r3, r0
 8012784:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012786:	7bfb      	ldrb	r3, [r7, #15]
 8012788:	4618      	mov	r0, r3
 801278a:	f000 f8fb 	bl	8012984 <USBD_Get_USB_Status>
 801278e:	4603      	mov	r3, r0
 8012790:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012792:	7bbb      	ldrb	r3, [r7, #14]
}
 8012794:	4618      	mov	r0, r3
 8012796:	3710      	adds	r7, #16
 8012798:	46bd      	mov	sp, r7
 801279a:	bd80      	pop	{r7, pc}

0801279c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801279c:	b480      	push	{r7}
 801279e:	b085      	sub	sp, #20
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	6078      	str	r0, [r7, #4]
 80127a4:	460b      	mov	r3, r1
 80127a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80127ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80127b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	da0b      	bge.n	80127d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80127b8:	78fb      	ldrb	r3, [r7, #3]
 80127ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80127be:	68f9      	ldr	r1, [r7, #12]
 80127c0:	4613      	mov	r3, r2
 80127c2:	009b      	lsls	r3, r3, #2
 80127c4:	4413      	add	r3, r2
 80127c6:	00db      	lsls	r3, r3, #3
 80127c8:	440b      	add	r3, r1
 80127ca:	3312      	adds	r3, #18
 80127cc:	781b      	ldrb	r3, [r3, #0]
 80127ce:	e00b      	b.n	80127e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80127d0:	78fb      	ldrb	r3, [r7, #3]
 80127d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80127d6:	68f9      	ldr	r1, [r7, #12]
 80127d8:	4613      	mov	r3, r2
 80127da:	009b      	lsls	r3, r3, #2
 80127dc:	4413      	add	r3, r2
 80127de:	00db      	lsls	r3, r3, #3
 80127e0:	440b      	add	r3, r1
 80127e2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80127e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80127e8:	4618      	mov	r0, r3
 80127ea:	3714      	adds	r7, #20
 80127ec:	46bd      	mov	sp, r7
 80127ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f2:	4770      	bx	lr

080127f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b084      	sub	sp, #16
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
 80127fc:	460b      	mov	r3, r1
 80127fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012800:	2300      	movs	r3, #0
 8012802:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012804:	2300      	movs	r3, #0
 8012806:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801280e:	78fa      	ldrb	r2, [r7, #3]
 8012810:	4611      	mov	r1, r2
 8012812:	4618      	mov	r0, r3
 8012814:	f7f6 fe2e 	bl	8009474 <HAL_PCD_SetAddress>
 8012818:	4603      	mov	r3, r0
 801281a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801281c:	7bfb      	ldrb	r3, [r7, #15]
 801281e:	4618      	mov	r0, r3
 8012820:	f000 f8b0 	bl	8012984 <USBD_Get_USB_Status>
 8012824:	4603      	mov	r3, r0
 8012826:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012828:	7bbb      	ldrb	r3, [r7, #14]
}
 801282a:	4618      	mov	r0, r3
 801282c:	3710      	adds	r7, #16
 801282e:	46bd      	mov	sp, r7
 8012830:	bd80      	pop	{r7, pc}

08012832 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012832:	b580      	push	{r7, lr}
 8012834:	b086      	sub	sp, #24
 8012836:	af00      	add	r7, sp, #0
 8012838:	60f8      	str	r0, [r7, #12]
 801283a:	607a      	str	r2, [r7, #4]
 801283c:	603b      	str	r3, [r7, #0]
 801283e:	460b      	mov	r3, r1
 8012840:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012842:	2300      	movs	r3, #0
 8012844:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012846:	2300      	movs	r3, #0
 8012848:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012850:	7af9      	ldrb	r1, [r7, #11]
 8012852:	683b      	ldr	r3, [r7, #0]
 8012854:	687a      	ldr	r2, [r7, #4]
 8012856:	f7f6 ff1f 	bl	8009698 <HAL_PCD_EP_Transmit>
 801285a:	4603      	mov	r3, r0
 801285c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801285e:	7dfb      	ldrb	r3, [r7, #23]
 8012860:	4618      	mov	r0, r3
 8012862:	f000 f88f 	bl	8012984 <USBD_Get_USB_Status>
 8012866:	4603      	mov	r3, r0
 8012868:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801286a:	7dbb      	ldrb	r3, [r7, #22]
}
 801286c:	4618      	mov	r0, r3
 801286e:	3718      	adds	r7, #24
 8012870:	46bd      	mov	sp, r7
 8012872:	bd80      	pop	{r7, pc}

08012874 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012874:	b580      	push	{r7, lr}
 8012876:	b086      	sub	sp, #24
 8012878:	af00      	add	r7, sp, #0
 801287a:	60f8      	str	r0, [r7, #12]
 801287c:	607a      	str	r2, [r7, #4]
 801287e:	603b      	str	r3, [r7, #0]
 8012880:	460b      	mov	r3, r1
 8012882:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012884:	2300      	movs	r3, #0
 8012886:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012888:	2300      	movs	r3, #0
 801288a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012892:	7af9      	ldrb	r1, [r7, #11]
 8012894:	683b      	ldr	r3, [r7, #0]
 8012896:	687a      	ldr	r2, [r7, #4]
 8012898:	f7f6 feb5 	bl	8009606 <HAL_PCD_EP_Receive>
 801289c:	4603      	mov	r3, r0
 801289e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80128a0:	7dfb      	ldrb	r3, [r7, #23]
 80128a2:	4618      	mov	r0, r3
 80128a4:	f000 f86e 	bl	8012984 <USBD_Get_USB_Status>
 80128a8:	4603      	mov	r3, r0
 80128aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80128ac:	7dbb      	ldrb	r3, [r7, #22]
}
 80128ae:	4618      	mov	r0, r3
 80128b0:	3718      	adds	r7, #24
 80128b2:	46bd      	mov	sp, r7
 80128b4:	bd80      	pop	{r7, pc}

080128b6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80128b6:	b580      	push	{r7, lr}
 80128b8:	b082      	sub	sp, #8
 80128ba:	af00      	add	r7, sp, #0
 80128bc:	6078      	str	r0, [r7, #4]
 80128be:	460b      	mov	r3, r1
 80128c0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80128c8:	78fa      	ldrb	r2, [r7, #3]
 80128ca:	4611      	mov	r1, r2
 80128cc:	4618      	mov	r0, r3
 80128ce:	f7f6 fecb 	bl	8009668 <HAL_PCD_EP_GetRxCount>
 80128d2:	4603      	mov	r3, r0
}
 80128d4:	4618      	mov	r0, r3
 80128d6:	3708      	adds	r7, #8
 80128d8:	46bd      	mov	sp, r7
 80128da:	bd80      	pop	{r7, pc}

080128dc <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80128dc:	b580      	push	{r7, lr}
 80128de:	b082      	sub	sp, #8
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	6078      	str	r0, [r7, #4]
 80128e4:	460b      	mov	r3, r1
 80128e6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80128e8:	78fb      	ldrb	r3, [r7, #3]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d002      	beq.n	80128f4 <HAL_PCDEx_LPM_Callback+0x18>
 80128ee:	2b01      	cmp	r3, #1
 80128f0:	d013      	beq.n	801291a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80128f2:	e023      	b.n	801293c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	7a5b      	ldrb	r3, [r3, #9]
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d007      	beq.n	801290c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80128fc:	f000 f83c 	bl	8012978 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012900:	4b10      	ldr	r3, [pc, #64]	@ (8012944 <HAL_PCDEx_LPM_Callback+0x68>)
 8012902:	691b      	ldr	r3, [r3, #16]
 8012904:	4a0f      	ldr	r2, [pc, #60]	@ (8012944 <HAL_PCDEx_LPM_Callback+0x68>)
 8012906:	f023 0306 	bic.w	r3, r3, #6
 801290a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012912:	4618      	mov	r0, r3
 8012914:	f7fe fb71 	bl	8010ffa <USBD_LL_Resume>
    break;
 8012918:	e010      	b.n	801293c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012920:	4618      	mov	r0, r3
 8012922:	f7fe fb4e 	bl	8010fc2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	7a5b      	ldrb	r3, [r3, #9]
 801292a:	2b00      	cmp	r3, #0
 801292c:	d005      	beq.n	801293a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801292e:	4b05      	ldr	r3, [pc, #20]	@ (8012944 <HAL_PCDEx_LPM_Callback+0x68>)
 8012930:	691b      	ldr	r3, [r3, #16]
 8012932:	4a04      	ldr	r2, [pc, #16]	@ (8012944 <HAL_PCDEx_LPM_Callback+0x68>)
 8012934:	f043 0306 	orr.w	r3, r3, #6
 8012938:	6113      	str	r3, [r2, #16]
    break;
 801293a:	bf00      	nop
}
 801293c:	bf00      	nop
 801293e:	3708      	adds	r7, #8
 8012940:	46bd      	mov	sp, r7
 8012942:	bd80      	pop	{r7, pc}
 8012944:	e000ed00 	.word	0xe000ed00

08012948 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012948:	b480      	push	{r7}
 801294a:	b083      	sub	sp, #12
 801294c:	af00      	add	r7, sp, #0
 801294e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012950:	4b03      	ldr	r3, [pc, #12]	@ (8012960 <USBD_static_malloc+0x18>)
}
 8012952:	4618      	mov	r0, r3
 8012954:	370c      	adds	r7, #12
 8012956:	46bd      	mov	sp, r7
 8012958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801295c:	4770      	bx	lr
 801295e:	bf00      	nop
 8012960:	20001fb0 	.word	0x20001fb0

08012964 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012964:	b480      	push	{r7}
 8012966:	b083      	sub	sp, #12
 8012968:	af00      	add	r7, sp, #0
 801296a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801296c:	bf00      	nop
 801296e:	370c      	adds	r7, #12
 8012970:	46bd      	mov	sp, r7
 8012972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012976:	4770      	bx	lr

08012978 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8012978:	b580      	push	{r7, lr}
 801297a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801297c:	f7f2 f822 	bl	80049c4 <SystemClock_Config>
}
 8012980:	bf00      	nop
 8012982:	bd80      	pop	{r7, pc}

08012984 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012984:	b480      	push	{r7}
 8012986:	b085      	sub	sp, #20
 8012988:	af00      	add	r7, sp, #0
 801298a:	4603      	mov	r3, r0
 801298c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801298e:	2300      	movs	r3, #0
 8012990:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012992:	79fb      	ldrb	r3, [r7, #7]
 8012994:	2b03      	cmp	r3, #3
 8012996:	d817      	bhi.n	80129c8 <USBD_Get_USB_Status+0x44>
 8012998:	a201      	add	r2, pc, #4	@ (adr r2, 80129a0 <USBD_Get_USB_Status+0x1c>)
 801299a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801299e:	bf00      	nop
 80129a0:	080129b1 	.word	0x080129b1
 80129a4:	080129b7 	.word	0x080129b7
 80129a8:	080129bd 	.word	0x080129bd
 80129ac:	080129c3 	.word	0x080129c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80129b0:	2300      	movs	r3, #0
 80129b2:	73fb      	strb	r3, [r7, #15]
    break;
 80129b4:	e00b      	b.n	80129ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80129b6:	2303      	movs	r3, #3
 80129b8:	73fb      	strb	r3, [r7, #15]
    break;
 80129ba:	e008      	b.n	80129ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80129bc:	2301      	movs	r3, #1
 80129be:	73fb      	strb	r3, [r7, #15]
    break;
 80129c0:	e005      	b.n	80129ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80129c2:	2303      	movs	r3, #3
 80129c4:	73fb      	strb	r3, [r7, #15]
    break;
 80129c6:	e002      	b.n	80129ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80129c8:	2303      	movs	r3, #3
 80129ca:	73fb      	strb	r3, [r7, #15]
    break;
 80129cc:	bf00      	nop
  }
  return usb_status;
 80129ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80129d0:	4618      	mov	r0, r3
 80129d2:	3714      	adds	r7, #20
 80129d4:	46bd      	mov	sp, r7
 80129d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129da:	4770      	bx	lr

080129dc <__cvt>:
 80129dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80129e0:	ec57 6b10 	vmov	r6, r7, d0
 80129e4:	2f00      	cmp	r7, #0
 80129e6:	460c      	mov	r4, r1
 80129e8:	4619      	mov	r1, r3
 80129ea:	463b      	mov	r3, r7
 80129ec:	bfbb      	ittet	lt
 80129ee:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80129f2:	461f      	movlt	r7, r3
 80129f4:	2300      	movge	r3, #0
 80129f6:	232d      	movlt	r3, #45	@ 0x2d
 80129f8:	700b      	strb	r3, [r1, #0]
 80129fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80129fc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8012a00:	4691      	mov	r9, r2
 8012a02:	f023 0820 	bic.w	r8, r3, #32
 8012a06:	bfbc      	itt	lt
 8012a08:	4632      	movlt	r2, r6
 8012a0a:	4616      	movlt	r6, r2
 8012a0c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012a10:	d005      	beq.n	8012a1e <__cvt+0x42>
 8012a12:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8012a16:	d100      	bne.n	8012a1a <__cvt+0x3e>
 8012a18:	3401      	adds	r4, #1
 8012a1a:	2102      	movs	r1, #2
 8012a1c:	e000      	b.n	8012a20 <__cvt+0x44>
 8012a1e:	2103      	movs	r1, #3
 8012a20:	ab03      	add	r3, sp, #12
 8012a22:	9301      	str	r3, [sp, #4]
 8012a24:	ab02      	add	r3, sp, #8
 8012a26:	9300      	str	r3, [sp, #0]
 8012a28:	ec47 6b10 	vmov	d0, r6, r7
 8012a2c:	4653      	mov	r3, sl
 8012a2e:	4622      	mov	r2, r4
 8012a30:	f000 fe62 	bl	80136f8 <_dtoa_r>
 8012a34:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8012a38:	4605      	mov	r5, r0
 8012a3a:	d119      	bne.n	8012a70 <__cvt+0x94>
 8012a3c:	f019 0f01 	tst.w	r9, #1
 8012a40:	d00e      	beq.n	8012a60 <__cvt+0x84>
 8012a42:	eb00 0904 	add.w	r9, r0, r4
 8012a46:	2200      	movs	r2, #0
 8012a48:	2300      	movs	r3, #0
 8012a4a:	4630      	mov	r0, r6
 8012a4c:	4639      	mov	r1, r7
 8012a4e:	f7ee f813 	bl	8000a78 <__aeabi_dcmpeq>
 8012a52:	b108      	cbz	r0, 8012a58 <__cvt+0x7c>
 8012a54:	f8cd 900c 	str.w	r9, [sp, #12]
 8012a58:	2230      	movs	r2, #48	@ 0x30
 8012a5a:	9b03      	ldr	r3, [sp, #12]
 8012a5c:	454b      	cmp	r3, r9
 8012a5e:	d31e      	bcc.n	8012a9e <__cvt+0xc2>
 8012a60:	9b03      	ldr	r3, [sp, #12]
 8012a62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012a64:	1b5b      	subs	r3, r3, r5
 8012a66:	4628      	mov	r0, r5
 8012a68:	6013      	str	r3, [r2, #0]
 8012a6a:	b004      	add	sp, #16
 8012a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a70:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012a74:	eb00 0904 	add.w	r9, r0, r4
 8012a78:	d1e5      	bne.n	8012a46 <__cvt+0x6a>
 8012a7a:	7803      	ldrb	r3, [r0, #0]
 8012a7c:	2b30      	cmp	r3, #48	@ 0x30
 8012a7e:	d10a      	bne.n	8012a96 <__cvt+0xba>
 8012a80:	2200      	movs	r2, #0
 8012a82:	2300      	movs	r3, #0
 8012a84:	4630      	mov	r0, r6
 8012a86:	4639      	mov	r1, r7
 8012a88:	f7ed fff6 	bl	8000a78 <__aeabi_dcmpeq>
 8012a8c:	b918      	cbnz	r0, 8012a96 <__cvt+0xba>
 8012a8e:	f1c4 0401 	rsb	r4, r4, #1
 8012a92:	f8ca 4000 	str.w	r4, [sl]
 8012a96:	f8da 3000 	ldr.w	r3, [sl]
 8012a9a:	4499      	add	r9, r3
 8012a9c:	e7d3      	b.n	8012a46 <__cvt+0x6a>
 8012a9e:	1c59      	adds	r1, r3, #1
 8012aa0:	9103      	str	r1, [sp, #12]
 8012aa2:	701a      	strb	r2, [r3, #0]
 8012aa4:	e7d9      	b.n	8012a5a <__cvt+0x7e>

08012aa6 <__exponent>:
 8012aa6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012aa8:	2900      	cmp	r1, #0
 8012aaa:	bfba      	itte	lt
 8012aac:	4249      	neglt	r1, r1
 8012aae:	232d      	movlt	r3, #45	@ 0x2d
 8012ab0:	232b      	movge	r3, #43	@ 0x2b
 8012ab2:	2909      	cmp	r1, #9
 8012ab4:	7002      	strb	r2, [r0, #0]
 8012ab6:	7043      	strb	r3, [r0, #1]
 8012ab8:	dd29      	ble.n	8012b0e <__exponent+0x68>
 8012aba:	f10d 0307 	add.w	r3, sp, #7
 8012abe:	461d      	mov	r5, r3
 8012ac0:	270a      	movs	r7, #10
 8012ac2:	461a      	mov	r2, r3
 8012ac4:	fbb1 f6f7 	udiv	r6, r1, r7
 8012ac8:	fb07 1416 	mls	r4, r7, r6, r1
 8012acc:	3430      	adds	r4, #48	@ 0x30
 8012ace:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012ad2:	460c      	mov	r4, r1
 8012ad4:	2c63      	cmp	r4, #99	@ 0x63
 8012ad6:	f103 33ff 	add.w	r3, r3, #4294967295
 8012ada:	4631      	mov	r1, r6
 8012adc:	dcf1      	bgt.n	8012ac2 <__exponent+0x1c>
 8012ade:	3130      	adds	r1, #48	@ 0x30
 8012ae0:	1e94      	subs	r4, r2, #2
 8012ae2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012ae6:	1c41      	adds	r1, r0, #1
 8012ae8:	4623      	mov	r3, r4
 8012aea:	42ab      	cmp	r3, r5
 8012aec:	d30a      	bcc.n	8012b04 <__exponent+0x5e>
 8012aee:	f10d 0309 	add.w	r3, sp, #9
 8012af2:	1a9b      	subs	r3, r3, r2
 8012af4:	42ac      	cmp	r4, r5
 8012af6:	bf88      	it	hi
 8012af8:	2300      	movhi	r3, #0
 8012afa:	3302      	adds	r3, #2
 8012afc:	4403      	add	r3, r0
 8012afe:	1a18      	subs	r0, r3, r0
 8012b00:	b003      	add	sp, #12
 8012b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b04:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012b08:	f801 6f01 	strb.w	r6, [r1, #1]!
 8012b0c:	e7ed      	b.n	8012aea <__exponent+0x44>
 8012b0e:	2330      	movs	r3, #48	@ 0x30
 8012b10:	3130      	adds	r1, #48	@ 0x30
 8012b12:	7083      	strb	r3, [r0, #2]
 8012b14:	70c1      	strb	r1, [r0, #3]
 8012b16:	1d03      	adds	r3, r0, #4
 8012b18:	e7f1      	b.n	8012afe <__exponent+0x58>
	...

08012b1c <_printf_float>:
 8012b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b20:	b08d      	sub	sp, #52	@ 0x34
 8012b22:	460c      	mov	r4, r1
 8012b24:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8012b28:	4616      	mov	r6, r2
 8012b2a:	461f      	mov	r7, r3
 8012b2c:	4605      	mov	r5, r0
 8012b2e:	f000 fcd3 	bl	80134d8 <_localeconv_r>
 8012b32:	6803      	ldr	r3, [r0, #0]
 8012b34:	9304      	str	r3, [sp, #16]
 8012b36:	4618      	mov	r0, r3
 8012b38:	f7ed fb72 	bl	8000220 <strlen>
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012b40:	f8d8 3000 	ldr.w	r3, [r8]
 8012b44:	9005      	str	r0, [sp, #20]
 8012b46:	3307      	adds	r3, #7
 8012b48:	f023 0307 	bic.w	r3, r3, #7
 8012b4c:	f103 0208 	add.w	r2, r3, #8
 8012b50:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012b54:	f8d4 b000 	ldr.w	fp, [r4]
 8012b58:	f8c8 2000 	str.w	r2, [r8]
 8012b5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012b60:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8012b64:	9307      	str	r3, [sp, #28]
 8012b66:	f8cd 8018 	str.w	r8, [sp, #24]
 8012b6a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8012b6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012b72:	4b9c      	ldr	r3, [pc, #624]	@ (8012de4 <_printf_float+0x2c8>)
 8012b74:	f04f 32ff 	mov.w	r2, #4294967295
 8012b78:	f7ed ffb0 	bl	8000adc <__aeabi_dcmpun>
 8012b7c:	bb70      	cbnz	r0, 8012bdc <_printf_float+0xc0>
 8012b7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012b82:	4b98      	ldr	r3, [pc, #608]	@ (8012de4 <_printf_float+0x2c8>)
 8012b84:	f04f 32ff 	mov.w	r2, #4294967295
 8012b88:	f7ed ff8a 	bl	8000aa0 <__aeabi_dcmple>
 8012b8c:	bb30      	cbnz	r0, 8012bdc <_printf_float+0xc0>
 8012b8e:	2200      	movs	r2, #0
 8012b90:	2300      	movs	r3, #0
 8012b92:	4640      	mov	r0, r8
 8012b94:	4649      	mov	r1, r9
 8012b96:	f7ed ff79 	bl	8000a8c <__aeabi_dcmplt>
 8012b9a:	b110      	cbz	r0, 8012ba2 <_printf_float+0x86>
 8012b9c:	232d      	movs	r3, #45	@ 0x2d
 8012b9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012ba2:	4a91      	ldr	r2, [pc, #580]	@ (8012de8 <_printf_float+0x2cc>)
 8012ba4:	4b91      	ldr	r3, [pc, #580]	@ (8012dec <_printf_float+0x2d0>)
 8012ba6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012baa:	bf8c      	ite	hi
 8012bac:	4690      	movhi	r8, r2
 8012bae:	4698      	movls	r8, r3
 8012bb0:	2303      	movs	r3, #3
 8012bb2:	6123      	str	r3, [r4, #16]
 8012bb4:	f02b 0304 	bic.w	r3, fp, #4
 8012bb8:	6023      	str	r3, [r4, #0]
 8012bba:	f04f 0900 	mov.w	r9, #0
 8012bbe:	9700      	str	r7, [sp, #0]
 8012bc0:	4633      	mov	r3, r6
 8012bc2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012bc4:	4621      	mov	r1, r4
 8012bc6:	4628      	mov	r0, r5
 8012bc8:	f000 f9d2 	bl	8012f70 <_printf_common>
 8012bcc:	3001      	adds	r0, #1
 8012bce:	f040 808d 	bne.w	8012cec <_printf_float+0x1d0>
 8012bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8012bd6:	b00d      	add	sp, #52	@ 0x34
 8012bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bdc:	4642      	mov	r2, r8
 8012bde:	464b      	mov	r3, r9
 8012be0:	4640      	mov	r0, r8
 8012be2:	4649      	mov	r1, r9
 8012be4:	f7ed ff7a 	bl	8000adc <__aeabi_dcmpun>
 8012be8:	b140      	cbz	r0, 8012bfc <_printf_float+0xe0>
 8012bea:	464b      	mov	r3, r9
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	bfbc      	itt	lt
 8012bf0:	232d      	movlt	r3, #45	@ 0x2d
 8012bf2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8012bf6:	4a7e      	ldr	r2, [pc, #504]	@ (8012df0 <_printf_float+0x2d4>)
 8012bf8:	4b7e      	ldr	r3, [pc, #504]	@ (8012df4 <_printf_float+0x2d8>)
 8012bfa:	e7d4      	b.n	8012ba6 <_printf_float+0x8a>
 8012bfc:	6863      	ldr	r3, [r4, #4]
 8012bfe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8012c02:	9206      	str	r2, [sp, #24]
 8012c04:	1c5a      	adds	r2, r3, #1
 8012c06:	d13b      	bne.n	8012c80 <_printf_float+0x164>
 8012c08:	2306      	movs	r3, #6
 8012c0a:	6063      	str	r3, [r4, #4]
 8012c0c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8012c10:	2300      	movs	r3, #0
 8012c12:	6022      	str	r2, [r4, #0]
 8012c14:	9303      	str	r3, [sp, #12]
 8012c16:	ab0a      	add	r3, sp, #40	@ 0x28
 8012c18:	e9cd a301 	strd	sl, r3, [sp, #4]
 8012c1c:	ab09      	add	r3, sp, #36	@ 0x24
 8012c1e:	9300      	str	r3, [sp, #0]
 8012c20:	6861      	ldr	r1, [r4, #4]
 8012c22:	ec49 8b10 	vmov	d0, r8, r9
 8012c26:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8012c2a:	4628      	mov	r0, r5
 8012c2c:	f7ff fed6 	bl	80129dc <__cvt>
 8012c30:	9b06      	ldr	r3, [sp, #24]
 8012c32:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012c34:	2b47      	cmp	r3, #71	@ 0x47
 8012c36:	4680      	mov	r8, r0
 8012c38:	d129      	bne.n	8012c8e <_printf_float+0x172>
 8012c3a:	1cc8      	adds	r0, r1, #3
 8012c3c:	db02      	blt.n	8012c44 <_printf_float+0x128>
 8012c3e:	6863      	ldr	r3, [r4, #4]
 8012c40:	4299      	cmp	r1, r3
 8012c42:	dd41      	ble.n	8012cc8 <_printf_float+0x1ac>
 8012c44:	f1aa 0a02 	sub.w	sl, sl, #2
 8012c48:	fa5f fa8a 	uxtb.w	sl, sl
 8012c4c:	3901      	subs	r1, #1
 8012c4e:	4652      	mov	r2, sl
 8012c50:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012c54:	9109      	str	r1, [sp, #36]	@ 0x24
 8012c56:	f7ff ff26 	bl	8012aa6 <__exponent>
 8012c5a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012c5c:	1813      	adds	r3, r2, r0
 8012c5e:	2a01      	cmp	r2, #1
 8012c60:	4681      	mov	r9, r0
 8012c62:	6123      	str	r3, [r4, #16]
 8012c64:	dc02      	bgt.n	8012c6c <_printf_float+0x150>
 8012c66:	6822      	ldr	r2, [r4, #0]
 8012c68:	07d2      	lsls	r2, r2, #31
 8012c6a:	d501      	bpl.n	8012c70 <_printf_float+0x154>
 8012c6c:	3301      	adds	r3, #1
 8012c6e:	6123      	str	r3, [r4, #16]
 8012c70:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d0a2      	beq.n	8012bbe <_printf_float+0xa2>
 8012c78:	232d      	movs	r3, #45	@ 0x2d
 8012c7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012c7e:	e79e      	b.n	8012bbe <_printf_float+0xa2>
 8012c80:	9a06      	ldr	r2, [sp, #24]
 8012c82:	2a47      	cmp	r2, #71	@ 0x47
 8012c84:	d1c2      	bne.n	8012c0c <_printf_float+0xf0>
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d1c0      	bne.n	8012c0c <_printf_float+0xf0>
 8012c8a:	2301      	movs	r3, #1
 8012c8c:	e7bd      	b.n	8012c0a <_printf_float+0xee>
 8012c8e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012c92:	d9db      	bls.n	8012c4c <_printf_float+0x130>
 8012c94:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8012c98:	d118      	bne.n	8012ccc <_printf_float+0x1b0>
 8012c9a:	2900      	cmp	r1, #0
 8012c9c:	6863      	ldr	r3, [r4, #4]
 8012c9e:	dd0b      	ble.n	8012cb8 <_printf_float+0x19c>
 8012ca0:	6121      	str	r1, [r4, #16]
 8012ca2:	b913      	cbnz	r3, 8012caa <_printf_float+0x18e>
 8012ca4:	6822      	ldr	r2, [r4, #0]
 8012ca6:	07d0      	lsls	r0, r2, #31
 8012ca8:	d502      	bpl.n	8012cb0 <_printf_float+0x194>
 8012caa:	3301      	adds	r3, #1
 8012cac:	440b      	add	r3, r1
 8012cae:	6123      	str	r3, [r4, #16]
 8012cb0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012cb2:	f04f 0900 	mov.w	r9, #0
 8012cb6:	e7db      	b.n	8012c70 <_printf_float+0x154>
 8012cb8:	b913      	cbnz	r3, 8012cc0 <_printf_float+0x1a4>
 8012cba:	6822      	ldr	r2, [r4, #0]
 8012cbc:	07d2      	lsls	r2, r2, #31
 8012cbe:	d501      	bpl.n	8012cc4 <_printf_float+0x1a8>
 8012cc0:	3302      	adds	r3, #2
 8012cc2:	e7f4      	b.n	8012cae <_printf_float+0x192>
 8012cc4:	2301      	movs	r3, #1
 8012cc6:	e7f2      	b.n	8012cae <_printf_float+0x192>
 8012cc8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8012ccc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012cce:	4299      	cmp	r1, r3
 8012cd0:	db05      	blt.n	8012cde <_printf_float+0x1c2>
 8012cd2:	6823      	ldr	r3, [r4, #0]
 8012cd4:	6121      	str	r1, [r4, #16]
 8012cd6:	07d8      	lsls	r0, r3, #31
 8012cd8:	d5ea      	bpl.n	8012cb0 <_printf_float+0x194>
 8012cda:	1c4b      	adds	r3, r1, #1
 8012cdc:	e7e7      	b.n	8012cae <_printf_float+0x192>
 8012cde:	2900      	cmp	r1, #0
 8012ce0:	bfd4      	ite	le
 8012ce2:	f1c1 0202 	rsble	r2, r1, #2
 8012ce6:	2201      	movgt	r2, #1
 8012ce8:	4413      	add	r3, r2
 8012cea:	e7e0      	b.n	8012cae <_printf_float+0x192>
 8012cec:	6823      	ldr	r3, [r4, #0]
 8012cee:	055a      	lsls	r2, r3, #21
 8012cf0:	d407      	bmi.n	8012d02 <_printf_float+0x1e6>
 8012cf2:	6923      	ldr	r3, [r4, #16]
 8012cf4:	4642      	mov	r2, r8
 8012cf6:	4631      	mov	r1, r6
 8012cf8:	4628      	mov	r0, r5
 8012cfa:	47b8      	blx	r7
 8012cfc:	3001      	adds	r0, #1
 8012cfe:	d12b      	bne.n	8012d58 <_printf_float+0x23c>
 8012d00:	e767      	b.n	8012bd2 <_printf_float+0xb6>
 8012d02:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012d06:	f240 80dd 	bls.w	8012ec4 <_printf_float+0x3a8>
 8012d0a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012d0e:	2200      	movs	r2, #0
 8012d10:	2300      	movs	r3, #0
 8012d12:	f7ed feb1 	bl	8000a78 <__aeabi_dcmpeq>
 8012d16:	2800      	cmp	r0, #0
 8012d18:	d033      	beq.n	8012d82 <_printf_float+0x266>
 8012d1a:	4a37      	ldr	r2, [pc, #220]	@ (8012df8 <_printf_float+0x2dc>)
 8012d1c:	2301      	movs	r3, #1
 8012d1e:	4631      	mov	r1, r6
 8012d20:	4628      	mov	r0, r5
 8012d22:	47b8      	blx	r7
 8012d24:	3001      	adds	r0, #1
 8012d26:	f43f af54 	beq.w	8012bd2 <_printf_float+0xb6>
 8012d2a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8012d2e:	4543      	cmp	r3, r8
 8012d30:	db02      	blt.n	8012d38 <_printf_float+0x21c>
 8012d32:	6823      	ldr	r3, [r4, #0]
 8012d34:	07d8      	lsls	r0, r3, #31
 8012d36:	d50f      	bpl.n	8012d58 <_printf_float+0x23c>
 8012d38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012d3c:	4631      	mov	r1, r6
 8012d3e:	4628      	mov	r0, r5
 8012d40:	47b8      	blx	r7
 8012d42:	3001      	adds	r0, #1
 8012d44:	f43f af45 	beq.w	8012bd2 <_printf_float+0xb6>
 8012d48:	f04f 0900 	mov.w	r9, #0
 8012d4c:	f108 38ff 	add.w	r8, r8, #4294967295
 8012d50:	f104 0a1a 	add.w	sl, r4, #26
 8012d54:	45c8      	cmp	r8, r9
 8012d56:	dc09      	bgt.n	8012d6c <_printf_float+0x250>
 8012d58:	6823      	ldr	r3, [r4, #0]
 8012d5a:	079b      	lsls	r3, r3, #30
 8012d5c:	f100 8103 	bmi.w	8012f66 <_printf_float+0x44a>
 8012d60:	68e0      	ldr	r0, [r4, #12]
 8012d62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012d64:	4298      	cmp	r0, r3
 8012d66:	bfb8      	it	lt
 8012d68:	4618      	movlt	r0, r3
 8012d6a:	e734      	b.n	8012bd6 <_printf_float+0xba>
 8012d6c:	2301      	movs	r3, #1
 8012d6e:	4652      	mov	r2, sl
 8012d70:	4631      	mov	r1, r6
 8012d72:	4628      	mov	r0, r5
 8012d74:	47b8      	blx	r7
 8012d76:	3001      	adds	r0, #1
 8012d78:	f43f af2b 	beq.w	8012bd2 <_printf_float+0xb6>
 8012d7c:	f109 0901 	add.w	r9, r9, #1
 8012d80:	e7e8      	b.n	8012d54 <_printf_float+0x238>
 8012d82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	dc39      	bgt.n	8012dfc <_printf_float+0x2e0>
 8012d88:	4a1b      	ldr	r2, [pc, #108]	@ (8012df8 <_printf_float+0x2dc>)
 8012d8a:	2301      	movs	r3, #1
 8012d8c:	4631      	mov	r1, r6
 8012d8e:	4628      	mov	r0, r5
 8012d90:	47b8      	blx	r7
 8012d92:	3001      	adds	r0, #1
 8012d94:	f43f af1d 	beq.w	8012bd2 <_printf_float+0xb6>
 8012d98:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012d9c:	ea59 0303 	orrs.w	r3, r9, r3
 8012da0:	d102      	bne.n	8012da8 <_printf_float+0x28c>
 8012da2:	6823      	ldr	r3, [r4, #0]
 8012da4:	07d9      	lsls	r1, r3, #31
 8012da6:	d5d7      	bpl.n	8012d58 <_printf_float+0x23c>
 8012da8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012dac:	4631      	mov	r1, r6
 8012dae:	4628      	mov	r0, r5
 8012db0:	47b8      	blx	r7
 8012db2:	3001      	adds	r0, #1
 8012db4:	f43f af0d 	beq.w	8012bd2 <_printf_float+0xb6>
 8012db8:	f04f 0a00 	mov.w	sl, #0
 8012dbc:	f104 0b1a 	add.w	fp, r4, #26
 8012dc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012dc2:	425b      	negs	r3, r3
 8012dc4:	4553      	cmp	r3, sl
 8012dc6:	dc01      	bgt.n	8012dcc <_printf_float+0x2b0>
 8012dc8:	464b      	mov	r3, r9
 8012dca:	e793      	b.n	8012cf4 <_printf_float+0x1d8>
 8012dcc:	2301      	movs	r3, #1
 8012dce:	465a      	mov	r2, fp
 8012dd0:	4631      	mov	r1, r6
 8012dd2:	4628      	mov	r0, r5
 8012dd4:	47b8      	blx	r7
 8012dd6:	3001      	adds	r0, #1
 8012dd8:	f43f aefb 	beq.w	8012bd2 <_printf_float+0xb6>
 8012ddc:	f10a 0a01 	add.w	sl, sl, #1
 8012de0:	e7ee      	b.n	8012dc0 <_printf_float+0x2a4>
 8012de2:	bf00      	nop
 8012de4:	7fefffff 	.word	0x7fefffff
 8012de8:	08015524 	.word	0x08015524
 8012dec:	08015520 	.word	0x08015520
 8012df0:	0801552c 	.word	0x0801552c
 8012df4:	08015528 	.word	0x08015528
 8012df8:	08015530 	.word	0x08015530
 8012dfc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012dfe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012e02:	4553      	cmp	r3, sl
 8012e04:	bfa8      	it	ge
 8012e06:	4653      	movge	r3, sl
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	4699      	mov	r9, r3
 8012e0c:	dc36      	bgt.n	8012e7c <_printf_float+0x360>
 8012e0e:	f04f 0b00 	mov.w	fp, #0
 8012e12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012e16:	f104 021a 	add.w	r2, r4, #26
 8012e1a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012e1c:	9306      	str	r3, [sp, #24]
 8012e1e:	eba3 0309 	sub.w	r3, r3, r9
 8012e22:	455b      	cmp	r3, fp
 8012e24:	dc31      	bgt.n	8012e8a <_printf_float+0x36e>
 8012e26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e28:	459a      	cmp	sl, r3
 8012e2a:	dc3a      	bgt.n	8012ea2 <_printf_float+0x386>
 8012e2c:	6823      	ldr	r3, [r4, #0]
 8012e2e:	07da      	lsls	r2, r3, #31
 8012e30:	d437      	bmi.n	8012ea2 <_printf_float+0x386>
 8012e32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e34:	ebaa 0903 	sub.w	r9, sl, r3
 8012e38:	9b06      	ldr	r3, [sp, #24]
 8012e3a:	ebaa 0303 	sub.w	r3, sl, r3
 8012e3e:	4599      	cmp	r9, r3
 8012e40:	bfa8      	it	ge
 8012e42:	4699      	movge	r9, r3
 8012e44:	f1b9 0f00 	cmp.w	r9, #0
 8012e48:	dc33      	bgt.n	8012eb2 <_printf_float+0x396>
 8012e4a:	f04f 0800 	mov.w	r8, #0
 8012e4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012e52:	f104 0b1a 	add.w	fp, r4, #26
 8012e56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e58:	ebaa 0303 	sub.w	r3, sl, r3
 8012e5c:	eba3 0309 	sub.w	r3, r3, r9
 8012e60:	4543      	cmp	r3, r8
 8012e62:	f77f af79 	ble.w	8012d58 <_printf_float+0x23c>
 8012e66:	2301      	movs	r3, #1
 8012e68:	465a      	mov	r2, fp
 8012e6a:	4631      	mov	r1, r6
 8012e6c:	4628      	mov	r0, r5
 8012e6e:	47b8      	blx	r7
 8012e70:	3001      	adds	r0, #1
 8012e72:	f43f aeae 	beq.w	8012bd2 <_printf_float+0xb6>
 8012e76:	f108 0801 	add.w	r8, r8, #1
 8012e7a:	e7ec      	b.n	8012e56 <_printf_float+0x33a>
 8012e7c:	4642      	mov	r2, r8
 8012e7e:	4631      	mov	r1, r6
 8012e80:	4628      	mov	r0, r5
 8012e82:	47b8      	blx	r7
 8012e84:	3001      	adds	r0, #1
 8012e86:	d1c2      	bne.n	8012e0e <_printf_float+0x2f2>
 8012e88:	e6a3      	b.n	8012bd2 <_printf_float+0xb6>
 8012e8a:	2301      	movs	r3, #1
 8012e8c:	4631      	mov	r1, r6
 8012e8e:	4628      	mov	r0, r5
 8012e90:	9206      	str	r2, [sp, #24]
 8012e92:	47b8      	blx	r7
 8012e94:	3001      	adds	r0, #1
 8012e96:	f43f ae9c 	beq.w	8012bd2 <_printf_float+0xb6>
 8012e9a:	9a06      	ldr	r2, [sp, #24]
 8012e9c:	f10b 0b01 	add.w	fp, fp, #1
 8012ea0:	e7bb      	b.n	8012e1a <_printf_float+0x2fe>
 8012ea2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012ea6:	4631      	mov	r1, r6
 8012ea8:	4628      	mov	r0, r5
 8012eaa:	47b8      	blx	r7
 8012eac:	3001      	adds	r0, #1
 8012eae:	d1c0      	bne.n	8012e32 <_printf_float+0x316>
 8012eb0:	e68f      	b.n	8012bd2 <_printf_float+0xb6>
 8012eb2:	9a06      	ldr	r2, [sp, #24]
 8012eb4:	464b      	mov	r3, r9
 8012eb6:	4442      	add	r2, r8
 8012eb8:	4631      	mov	r1, r6
 8012eba:	4628      	mov	r0, r5
 8012ebc:	47b8      	blx	r7
 8012ebe:	3001      	adds	r0, #1
 8012ec0:	d1c3      	bne.n	8012e4a <_printf_float+0x32e>
 8012ec2:	e686      	b.n	8012bd2 <_printf_float+0xb6>
 8012ec4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012ec8:	f1ba 0f01 	cmp.w	sl, #1
 8012ecc:	dc01      	bgt.n	8012ed2 <_printf_float+0x3b6>
 8012ece:	07db      	lsls	r3, r3, #31
 8012ed0:	d536      	bpl.n	8012f40 <_printf_float+0x424>
 8012ed2:	2301      	movs	r3, #1
 8012ed4:	4642      	mov	r2, r8
 8012ed6:	4631      	mov	r1, r6
 8012ed8:	4628      	mov	r0, r5
 8012eda:	47b8      	blx	r7
 8012edc:	3001      	adds	r0, #1
 8012ede:	f43f ae78 	beq.w	8012bd2 <_printf_float+0xb6>
 8012ee2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012ee6:	4631      	mov	r1, r6
 8012ee8:	4628      	mov	r0, r5
 8012eea:	47b8      	blx	r7
 8012eec:	3001      	adds	r0, #1
 8012eee:	f43f ae70 	beq.w	8012bd2 <_printf_float+0xb6>
 8012ef2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	2300      	movs	r3, #0
 8012efa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012efe:	f7ed fdbb 	bl	8000a78 <__aeabi_dcmpeq>
 8012f02:	b9c0      	cbnz	r0, 8012f36 <_printf_float+0x41a>
 8012f04:	4653      	mov	r3, sl
 8012f06:	f108 0201 	add.w	r2, r8, #1
 8012f0a:	4631      	mov	r1, r6
 8012f0c:	4628      	mov	r0, r5
 8012f0e:	47b8      	blx	r7
 8012f10:	3001      	adds	r0, #1
 8012f12:	d10c      	bne.n	8012f2e <_printf_float+0x412>
 8012f14:	e65d      	b.n	8012bd2 <_printf_float+0xb6>
 8012f16:	2301      	movs	r3, #1
 8012f18:	465a      	mov	r2, fp
 8012f1a:	4631      	mov	r1, r6
 8012f1c:	4628      	mov	r0, r5
 8012f1e:	47b8      	blx	r7
 8012f20:	3001      	adds	r0, #1
 8012f22:	f43f ae56 	beq.w	8012bd2 <_printf_float+0xb6>
 8012f26:	f108 0801 	add.w	r8, r8, #1
 8012f2a:	45d0      	cmp	r8, sl
 8012f2c:	dbf3      	blt.n	8012f16 <_printf_float+0x3fa>
 8012f2e:	464b      	mov	r3, r9
 8012f30:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012f34:	e6df      	b.n	8012cf6 <_printf_float+0x1da>
 8012f36:	f04f 0800 	mov.w	r8, #0
 8012f3a:	f104 0b1a 	add.w	fp, r4, #26
 8012f3e:	e7f4      	b.n	8012f2a <_printf_float+0x40e>
 8012f40:	2301      	movs	r3, #1
 8012f42:	4642      	mov	r2, r8
 8012f44:	e7e1      	b.n	8012f0a <_printf_float+0x3ee>
 8012f46:	2301      	movs	r3, #1
 8012f48:	464a      	mov	r2, r9
 8012f4a:	4631      	mov	r1, r6
 8012f4c:	4628      	mov	r0, r5
 8012f4e:	47b8      	blx	r7
 8012f50:	3001      	adds	r0, #1
 8012f52:	f43f ae3e 	beq.w	8012bd2 <_printf_float+0xb6>
 8012f56:	f108 0801 	add.w	r8, r8, #1
 8012f5a:	68e3      	ldr	r3, [r4, #12]
 8012f5c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012f5e:	1a5b      	subs	r3, r3, r1
 8012f60:	4543      	cmp	r3, r8
 8012f62:	dcf0      	bgt.n	8012f46 <_printf_float+0x42a>
 8012f64:	e6fc      	b.n	8012d60 <_printf_float+0x244>
 8012f66:	f04f 0800 	mov.w	r8, #0
 8012f6a:	f104 0919 	add.w	r9, r4, #25
 8012f6e:	e7f4      	b.n	8012f5a <_printf_float+0x43e>

08012f70 <_printf_common>:
 8012f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f74:	4616      	mov	r6, r2
 8012f76:	4698      	mov	r8, r3
 8012f78:	688a      	ldr	r2, [r1, #8]
 8012f7a:	690b      	ldr	r3, [r1, #16]
 8012f7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012f80:	4293      	cmp	r3, r2
 8012f82:	bfb8      	it	lt
 8012f84:	4613      	movlt	r3, r2
 8012f86:	6033      	str	r3, [r6, #0]
 8012f88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012f8c:	4607      	mov	r7, r0
 8012f8e:	460c      	mov	r4, r1
 8012f90:	b10a      	cbz	r2, 8012f96 <_printf_common+0x26>
 8012f92:	3301      	adds	r3, #1
 8012f94:	6033      	str	r3, [r6, #0]
 8012f96:	6823      	ldr	r3, [r4, #0]
 8012f98:	0699      	lsls	r1, r3, #26
 8012f9a:	bf42      	ittt	mi
 8012f9c:	6833      	ldrmi	r3, [r6, #0]
 8012f9e:	3302      	addmi	r3, #2
 8012fa0:	6033      	strmi	r3, [r6, #0]
 8012fa2:	6825      	ldr	r5, [r4, #0]
 8012fa4:	f015 0506 	ands.w	r5, r5, #6
 8012fa8:	d106      	bne.n	8012fb8 <_printf_common+0x48>
 8012faa:	f104 0a19 	add.w	sl, r4, #25
 8012fae:	68e3      	ldr	r3, [r4, #12]
 8012fb0:	6832      	ldr	r2, [r6, #0]
 8012fb2:	1a9b      	subs	r3, r3, r2
 8012fb4:	42ab      	cmp	r3, r5
 8012fb6:	dc26      	bgt.n	8013006 <_printf_common+0x96>
 8012fb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012fbc:	6822      	ldr	r2, [r4, #0]
 8012fbe:	3b00      	subs	r3, #0
 8012fc0:	bf18      	it	ne
 8012fc2:	2301      	movne	r3, #1
 8012fc4:	0692      	lsls	r2, r2, #26
 8012fc6:	d42b      	bmi.n	8013020 <_printf_common+0xb0>
 8012fc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012fcc:	4641      	mov	r1, r8
 8012fce:	4638      	mov	r0, r7
 8012fd0:	47c8      	blx	r9
 8012fd2:	3001      	adds	r0, #1
 8012fd4:	d01e      	beq.n	8013014 <_printf_common+0xa4>
 8012fd6:	6823      	ldr	r3, [r4, #0]
 8012fd8:	6922      	ldr	r2, [r4, #16]
 8012fda:	f003 0306 	and.w	r3, r3, #6
 8012fde:	2b04      	cmp	r3, #4
 8012fe0:	bf02      	ittt	eq
 8012fe2:	68e5      	ldreq	r5, [r4, #12]
 8012fe4:	6833      	ldreq	r3, [r6, #0]
 8012fe6:	1aed      	subeq	r5, r5, r3
 8012fe8:	68a3      	ldr	r3, [r4, #8]
 8012fea:	bf0c      	ite	eq
 8012fec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012ff0:	2500      	movne	r5, #0
 8012ff2:	4293      	cmp	r3, r2
 8012ff4:	bfc4      	itt	gt
 8012ff6:	1a9b      	subgt	r3, r3, r2
 8012ff8:	18ed      	addgt	r5, r5, r3
 8012ffa:	2600      	movs	r6, #0
 8012ffc:	341a      	adds	r4, #26
 8012ffe:	42b5      	cmp	r5, r6
 8013000:	d11a      	bne.n	8013038 <_printf_common+0xc8>
 8013002:	2000      	movs	r0, #0
 8013004:	e008      	b.n	8013018 <_printf_common+0xa8>
 8013006:	2301      	movs	r3, #1
 8013008:	4652      	mov	r2, sl
 801300a:	4641      	mov	r1, r8
 801300c:	4638      	mov	r0, r7
 801300e:	47c8      	blx	r9
 8013010:	3001      	adds	r0, #1
 8013012:	d103      	bne.n	801301c <_printf_common+0xac>
 8013014:	f04f 30ff 	mov.w	r0, #4294967295
 8013018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801301c:	3501      	adds	r5, #1
 801301e:	e7c6      	b.n	8012fae <_printf_common+0x3e>
 8013020:	18e1      	adds	r1, r4, r3
 8013022:	1c5a      	adds	r2, r3, #1
 8013024:	2030      	movs	r0, #48	@ 0x30
 8013026:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801302a:	4422      	add	r2, r4
 801302c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013030:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013034:	3302      	adds	r3, #2
 8013036:	e7c7      	b.n	8012fc8 <_printf_common+0x58>
 8013038:	2301      	movs	r3, #1
 801303a:	4622      	mov	r2, r4
 801303c:	4641      	mov	r1, r8
 801303e:	4638      	mov	r0, r7
 8013040:	47c8      	blx	r9
 8013042:	3001      	adds	r0, #1
 8013044:	d0e6      	beq.n	8013014 <_printf_common+0xa4>
 8013046:	3601      	adds	r6, #1
 8013048:	e7d9      	b.n	8012ffe <_printf_common+0x8e>
	...

0801304c <_printf_i>:
 801304c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013050:	7e0f      	ldrb	r7, [r1, #24]
 8013052:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013054:	2f78      	cmp	r7, #120	@ 0x78
 8013056:	4691      	mov	r9, r2
 8013058:	4680      	mov	r8, r0
 801305a:	460c      	mov	r4, r1
 801305c:	469a      	mov	sl, r3
 801305e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013062:	d807      	bhi.n	8013074 <_printf_i+0x28>
 8013064:	2f62      	cmp	r7, #98	@ 0x62
 8013066:	d80a      	bhi.n	801307e <_printf_i+0x32>
 8013068:	2f00      	cmp	r7, #0
 801306a:	f000 80d1 	beq.w	8013210 <_printf_i+0x1c4>
 801306e:	2f58      	cmp	r7, #88	@ 0x58
 8013070:	f000 80b8 	beq.w	80131e4 <_printf_i+0x198>
 8013074:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013078:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801307c:	e03a      	b.n	80130f4 <_printf_i+0xa8>
 801307e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013082:	2b15      	cmp	r3, #21
 8013084:	d8f6      	bhi.n	8013074 <_printf_i+0x28>
 8013086:	a101      	add	r1, pc, #4	@ (adr r1, 801308c <_printf_i+0x40>)
 8013088:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801308c:	080130e5 	.word	0x080130e5
 8013090:	080130f9 	.word	0x080130f9
 8013094:	08013075 	.word	0x08013075
 8013098:	08013075 	.word	0x08013075
 801309c:	08013075 	.word	0x08013075
 80130a0:	08013075 	.word	0x08013075
 80130a4:	080130f9 	.word	0x080130f9
 80130a8:	08013075 	.word	0x08013075
 80130ac:	08013075 	.word	0x08013075
 80130b0:	08013075 	.word	0x08013075
 80130b4:	08013075 	.word	0x08013075
 80130b8:	080131f7 	.word	0x080131f7
 80130bc:	08013123 	.word	0x08013123
 80130c0:	080131b1 	.word	0x080131b1
 80130c4:	08013075 	.word	0x08013075
 80130c8:	08013075 	.word	0x08013075
 80130cc:	08013219 	.word	0x08013219
 80130d0:	08013075 	.word	0x08013075
 80130d4:	08013123 	.word	0x08013123
 80130d8:	08013075 	.word	0x08013075
 80130dc:	08013075 	.word	0x08013075
 80130e0:	080131b9 	.word	0x080131b9
 80130e4:	6833      	ldr	r3, [r6, #0]
 80130e6:	1d1a      	adds	r2, r3, #4
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	6032      	str	r2, [r6, #0]
 80130ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80130f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80130f4:	2301      	movs	r3, #1
 80130f6:	e09c      	b.n	8013232 <_printf_i+0x1e6>
 80130f8:	6833      	ldr	r3, [r6, #0]
 80130fa:	6820      	ldr	r0, [r4, #0]
 80130fc:	1d19      	adds	r1, r3, #4
 80130fe:	6031      	str	r1, [r6, #0]
 8013100:	0606      	lsls	r6, r0, #24
 8013102:	d501      	bpl.n	8013108 <_printf_i+0xbc>
 8013104:	681d      	ldr	r5, [r3, #0]
 8013106:	e003      	b.n	8013110 <_printf_i+0xc4>
 8013108:	0645      	lsls	r5, r0, #25
 801310a:	d5fb      	bpl.n	8013104 <_printf_i+0xb8>
 801310c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013110:	2d00      	cmp	r5, #0
 8013112:	da03      	bge.n	801311c <_printf_i+0xd0>
 8013114:	232d      	movs	r3, #45	@ 0x2d
 8013116:	426d      	negs	r5, r5
 8013118:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801311c:	4858      	ldr	r0, [pc, #352]	@ (8013280 <_printf_i+0x234>)
 801311e:	230a      	movs	r3, #10
 8013120:	e011      	b.n	8013146 <_printf_i+0xfa>
 8013122:	6821      	ldr	r1, [r4, #0]
 8013124:	6833      	ldr	r3, [r6, #0]
 8013126:	0608      	lsls	r0, r1, #24
 8013128:	f853 5b04 	ldr.w	r5, [r3], #4
 801312c:	d402      	bmi.n	8013134 <_printf_i+0xe8>
 801312e:	0649      	lsls	r1, r1, #25
 8013130:	bf48      	it	mi
 8013132:	b2ad      	uxthmi	r5, r5
 8013134:	2f6f      	cmp	r7, #111	@ 0x6f
 8013136:	4852      	ldr	r0, [pc, #328]	@ (8013280 <_printf_i+0x234>)
 8013138:	6033      	str	r3, [r6, #0]
 801313a:	bf14      	ite	ne
 801313c:	230a      	movne	r3, #10
 801313e:	2308      	moveq	r3, #8
 8013140:	2100      	movs	r1, #0
 8013142:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013146:	6866      	ldr	r6, [r4, #4]
 8013148:	60a6      	str	r6, [r4, #8]
 801314a:	2e00      	cmp	r6, #0
 801314c:	db05      	blt.n	801315a <_printf_i+0x10e>
 801314e:	6821      	ldr	r1, [r4, #0]
 8013150:	432e      	orrs	r6, r5
 8013152:	f021 0104 	bic.w	r1, r1, #4
 8013156:	6021      	str	r1, [r4, #0]
 8013158:	d04b      	beq.n	80131f2 <_printf_i+0x1a6>
 801315a:	4616      	mov	r6, r2
 801315c:	fbb5 f1f3 	udiv	r1, r5, r3
 8013160:	fb03 5711 	mls	r7, r3, r1, r5
 8013164:	5dc7      	ldrb	r7, [r0, r7]
 8013166:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801316a:	462f      	mov	r7, r5
 801316c:	42bb      	cmp	r3, r7
 801316e:	460d      	mov	r5, r1
 8013170:	d9f4      	bls.n	801315c <_printf_i+0x110>
 8013172:	2b08      	cmp	r3, #8
 8013174:	d10b      	bne.n	801318e <_printf_i+0x142>
 8013176:	6823      	ldr	r3, [r4, #0]
 8013178:	07df      	lsls	r7, r3, #31
 801317a:	d508      	bpl.n	801318e <_printf_i+0x142>
 801317c:	6923      	ldr	r3, [r4, #16]
 801317e:	6861      	ldr	r1, [r4, #4]
 8013180:	4299      	cmp	r1, r3
 8013182:	bfde      	ittt	le
 8013184:	2330      	movle	r3, #48	@ 0x30
 8013186:	f806 3c01 	strble.w	r3, [r6, #-1]
 801318a:	f106 36ff 	addle.w	r6, r6, #4294967295
 801318e:	1b92      	subs	r2, r2, r6
 8013190:	6122      	str	r2, [r4, #16]
 8013192:	f8cd a000 	str.w	sl, [sp]
 8013196:	464b      	mov	r3, r9
 8013198:	aa03      	add	r2, sp, #12
 801319a:	4621      	mov	r1, r4
 801319c:	4640      	mov	r0, r8
 801319e:	f7ff fee7 	bl	8012f70 <_printf_common>
 80131a2:	3001      	adds	r0, #1
 80131a4:	d14a      	bne.n	801323c <_printf_i+0x1f0>
 80131a6:	f04f 30ff 	mov.w	r0, #4294967295
 80131aa:	b004      	add	sp, #16
 80131ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131b0:	6823      	ldr	r3, [r4, #0]
 80131b2:	f043 0320 	orr.w	r3, r3, #32
 80131b6:	6023      	str	r3, [r4, #0]
 80131b8:	4832      	ldr	r0, [pc, #200]	@ (8013284 <_printf_i+0x238>)
 80131ba:	2778      	movs	r7, #120	@ 0x78
 80131bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80131c0:	6823      	ldr	r3, [r4, #0]
 80131c2:	6831      	ldr	r1, [r6, #0]
 80131c4:	061f      	lsls	r7, r3, #24
 80131c6:	f851 5b04 	ldr.w	r5, [r1], #4
 80131ca:	d402      	bmi.n	80131d2 <_printf_i+0x186>
 80131cc:	065f      	lsls	r7, r3, #25
 80131ce:	bf48      	it	mi
 80131d0:	b2ad      	uxthmi	r5, r5
 80131d2:	6031      	str	r1, [r6, #0]
 80131d4:	07d9      	lsls	r1, r3, #31
 80131d6:	bf44      	itt	mi
 80131d8:	f043 0320 	orrmi.w	r3, r3, #32
 80131dc:	6023      	strmi	r3, [r4, #0]
 80131de:	b11d      	cbz	r5, 80131e8 <_printf_i+0x19c>
 80131e0:	2310      	movs	r3, #16
 80131e2:	e7ad      	b.n	8013140 <_printf_i+0xf4>
 80131e4:	4826      	ldr	r0, [pc, #152]	@ (8013280 <_printf_i+0x234>)
 80131e6:	e7e9      	b.n	80131bc <_printf_i+0x170>
 80131e8:	6823      	ldr	r3, [r4, #0]
 80131ea:	f023 0320 	bic.w	r3, r3, #32
 80131ee:	6023      	str	r3, [r4, #0]
 80131f0:	e7f6      	b.n	80131e0 <_printf_i+0x194>
 80131f2:	4616      	mov	r6, r2
 80131f4:	e7bd      	b.n	8013172 <_printf_i+0x126>
 80131f6:	6833      	ldr	r3, [r6, #0]
 80131f8:	6825      	ldr	r5, [r4, #0]
 80131fa:	6961      	ldr	r1, [r4, #20]
 80131fc:	1d18      	adds	r0, r3, #4
 80131fe:	6030      	str	r0, [r6, #0]
 8013200:	062e      	lsls	r6, r5, #24
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	d501      	bpl.n	801320a <_printf_i+0x1be>
 8013206:	6019      	str	r1, [r3, #0]
 8013208:	e002      	b.n	8013210 <_printf_i+0x1c4>
 801320a:	0668      	lsls	r0, r5, #25
 801320c:	d5fb      	bpl.n	8013206 <_printf_i+0x1ba>
 801320e:	8019      	strh	r1, [r3, #0]
 8013210:	2300      	movs	r3, #0
 8013212:	6123      	str	r3, [r4, #16]
 8013214:	4616      	mov	r6, r2
 8013216:	e7bc      	b.n	8013192 <_printf_i+0x146>
 8013218:	6833      	ldr	r3, [r6, #0]
 801321a:	1d1a      	adds	r2, r3, #4
 801321c:	6032      	str	r2, [r6, #0]
 801321e:	681e      	ldr	r6, [r3, #0]
 8013220:	6862      	ldr	r2, [r4, #4]
 8013222:	2100      	movs	r1, #0
 8013224:	4630      	mov	r0, r6
 8013226:	f7ec ffab 	bl	8000180 <memchr>
 801322a:	b108      	cbz	r0, 8013230 <_printf_i+0x1e4>
 801322c:	1b80      	subs	r0, r0, r6
 801322e:	6060      	str	r0, [r4, #4]
 8013230:	6863      	ldr	r3, [r4, #4]
 8013232:	6123      	str	r3, [r4, #16]
 8013234:	2300      	movs	r3, #0
 8013236:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801323a:	e7aa      	b.n	8013192 <_printf_i+0x146>
 801323c:	6923      	ldr	r3, [r4, #16]
 801323e:	4632      	mov	r2, r6
 8013240:	4649      	mov	r1, r9
 8013242:	4640      	mov	r0, r8
 8013244:	47d0      	blx	sl
 8013246:	3001      	adds	r0, #1
 8013248:	d0ad      	beq.n	80131a6 <_printf_i+0x15a>
 801324a:	6823      	ldr	r3, [r4, #0]
 801324c:	079b      	lsls	r3, r3, #30
 801324e:	d413      	bmi.n	8013278 <_printf_i+0x22c>
 8013250:	68e0      	ldr	r0, [r4, #12]
 8013252:	9b03      	ldr	r3, [sp, #12]
 8013254:	4298      	cmp	r0, r3
 8013256:	bfb8      	it	lt
 8013258:	4618      	movlt	r0, r3
 801325a:	e7a6      	b.n	80131aa <_printf_i+0x15e>
 801325c:	2301      	movs	r3, #1
 801325e:	4632      	mov	r2, r6
 8013260:	4649      	mov	r1, r9
 8013262:	4640      	mov	r0, r8
 8013264:	47d0      	blx	sl
 8013266:	3001      	adds	r0, #1
 8013268:	d09d      	beq.n	80131a6 <_printf_i+0x15a>
 801326a:	3501      	adds	r5, #1
 801326c:	68e3      	ldr	r3, [r4, #12]
 801326e:	9903      	ldr	r1, [sp, #12]
 8013270:	1a5b      	subs	r3, r3, r1
 8013272:	42ab      	cmp	r3, r5
 8013274:	dcf2      	bgt.n	801325c <_printf_i+0x210>
 8013276:	e7eb      	b.n	8013250 <_printf_i+0x204>
 8013278:	2500      	movs	r5, #0
 801327a:	f104 0619 	add.w	r6, r4, #25
 801327e:	e7f5      	b.n	801326c <_printf_i+0x220>
 8013280:	08015532 	.word	0x08015532
 8013284:	08015543 	.word	0x08015543

08013288 <std>:
 8013288:	2300      	movs	r3, #0
 801328a:	b510      	push	{r4, lr}
 801328c:	4604      	mov	r4, r0
 801328e:	e9c0 3300 	strd	r3, r3, [r0]
 8013292:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013296:	6083      	str	r3, [r0, #8]
 8013298:	8181      	strh	r1, [r0, #12]
 801329a:	6643      	str	r3, [r0, #100]	@ 0x64
 801329c:	81c2      	strh	r2, [r0, #14]
 801329e:	6183      	str	r3, [r0, #24]
 80132a0:	4619      	mov	r1, r3
 80132a2:	2208      	movs	r2, #8
 80132a4:	305c      	adds	r0, #92	@ 0x5c
 80132a6:	f000 f90e 	bl	80134c6 <memset>
 80132aa:	4b0d      	ldr	r3, [pc, #52]	@ (80132e0 <std+0x58>)
 80132ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80132ae:	4b0d      	ldr	r3, [pc, #52]	@ (80132e4 <std+0x5c>)
 80132b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80132b2:	4b0d      	ldr	r3, [pc, #52]	@ (80132e8 <std+0x60>)
 80132b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80132b6:	4b0d      	ldr	r3, [pc, #52]	@ (80132ec <std+0x64>)
 80132b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80132ba:	4b0d      	ldr	r3, [pc, #52]	@ (80132f0 <std+0x68>)
 80132bc:	6224      	str	r4, [r4, #32]
 80132be:	429c      	cmp	r4, r3
 80132c0:	d006      	beq.n	80132d0 <std+0x48>
 80132c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80132c6:	4294      	cmp	r4, r2
 80132c8:	d002      	beq.n	80132d0 <std+0x48>
 80132ca:	33d0      	adds	r3, #208	@ 0xd0
 80132cc:	429c      	cmp	r4, r3
 80132ce:	d105      	bne.n	80132dc <std+0x54>
 80132d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80132d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80132d8:	f000 b972 	b.w	80135c0 <__retarget_lock_init_recursive>
 80132dc:	bd10      	pop	{r4, pc}
 80132de:	bf00      	nop
 80132e0:	08013441 	.word	0x08013441
 80132e4:	08013463 	.word	0x08013463
 80132e8:	0801349b 	.word	0x0801349b
 80132ec:	080134bf 	.word	0x080134bf
 80132f0:	200021d0 	.word	0x200021d0

080132f4 <stdio_exit_handler>:
 80132f4:	4a02      	ldr	r2, [pc, #8]	@ (8013300 <stdio_exit_handler+0xc>)
 80132f6:	4903      	ldr	r1, [pc, #12]	@ (8013304 <stdio_exit_handler+0x10>)
 80132f8:	4803      	ldr	r0, [pc, #12]	@ (8013308 <stdio_exit_handler+0x14>)
 80132fa:	f000 b869 	b.w	80133d0 <_fwalk_sglue>
 80132fe:	bf00      	nop
 8013300:	2000012c 	.word	0x2000012c
 8013304:	08014f19 	.word	0x08014f19
 8013308:	2000013c 	.word	0x2000013c

0801330c <cleanup_stdio>:
 801330c:	6841      	ldr	r1, [r0, #4]
 801330e:	4b0c      	ldr	r3, [pc, #48]	@ (8013340 <cleanup_stdio+0x34>)
 8013310:	4299      	cmp	r1, r3
 8013312:	b510      	push	{r4, lr}
 8013314:	4604      	mov	r4, r0
 8013316:	d001      	beq.n	801331c <cleanup_stdio+0x10>
 8013318:	f001 fdfe 	bl	8014f18 <_fflush_r>
 801331c:	68a1      	ldr	r1, [r4, #8]
 801331e:	4b09      	ldr	r3, [pc, #36]	@ (8013344 <cleanup_stdio+0x38>)
 8013320:	4299      	cmp	r1, r3
 8013322:	d002      	beq.n	801332a <cleanup_stdio+0x1e>
 8013324:	4620      	mov	r0, r4
 8013326:	f001 fdf7 	bl	8014f18 <_fflush_r>
 801332a:	68e1      	ldr	r1, [r4, #12]
 801332c:	4b06      	ldr	r3, [pc, #24]	@ (8013348 <cleanup_stdio+0x3c>)
 801332e:	4299      	cmp	r1, r3
 8013330:	d004      	beq.n	801333c <cleanup_stdio+0x30>
 8013332:	4620      	mov	r0, r4
 8013334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013338:	f001 bdee 	b.w	8014f18 <_fflush_r>
 801333c:	bd10      	pop	{r4, pc}
 801333e:	bf00      	nop
 8013340:	200021d0 	.word	0x200021d0
 8013344:	20002238 	.word	0x20002238
 8013348:	200022a0 	.word	0x200022a0

0801334c <global_stdio_init.part.0>:
 801334c:	b510      	push	{r4, lr}
 801334e:	4b0b      	ldr	r3, [pc, #44]	@ (801337c <global_stdio_init.part.0+0x30>)
 8013350:	4c0b      	ldr	r4, [pc, #44]	@ (8013380 <global_stdio_init.part.0+0x34>)
 8013352:	4a0c      	ldr	r2, [pc, #48]	@ (8013384 <global_stdio_init.part.0+0x38>)
 8013354:	601a      	str	r2, [r3, #0]
 8013356:	4620      	mov	r0, r4
 8013358:	2200      	movs	r2, #0
 801335a:	2104      	movs	r1, #4
 801335c:	f7ff ff94 	bl	8013288 <std>
 8013360:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013364:	2201      	movs	r2, #1
 8013366:	2109      	movs	r1, #9
 8013368:	f7ff ff8e 	bl	8013288 <std>
 801336c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013370:	2202      	movs	r2, #2
 8013372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013376:	2112      	movs	r1, #18
 8013378:	f7ff bf86 	b.w	8013288 <std>
 801337c:	20002308 	.word	0x20002308
 8013380:	200021d0 	.word	0x200021d0
 8013384:	080132f5 	.word	0x080132f5

08013388 <__sfp_lock_acquire>:
 8013388:	4801      	ldr	r0, [pc, #4]	@ (8013390 <__sfp_lock_acquire+0x8>)
 801338a:	f000 b91a 	b.w	80135c2 <__retarget_lock_acquire_recursive>
 801338e:	bf00      	nop
 8013390:	20002311 	.word	0x20002311

08013394 <__sfp_lock_release>:
 8013394:	4801      	ldr	r0, [pc, #4]	@ (801339c <__sfp_lock_release+0x8>)
 8013396:	f000 b915 	b.w	80135c4 <__retarget_lock_release_recursive>
 801339a:	bf00      	nop
 801339c:	20002311 	.word	0x20002311

080133a0 <__sinit>:
 80133a0:	b510      	push	{r4, lr}
 80133a2:	4604      	mov	r4, r0
 80133a4:	f7ff fff0 	bl	8013388 <__sfp_lock_acquire>
 80133a8:	6a23      	ldr	r3, [r4, #32]
 80133aa:	b11b      	cbz	r3, 80133b4 <__sinit+0x14>
 80133ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80133b0:	f7ff bff0 	b.w	8013394 <__sfp_lock_release>
 80133b4:	4b04      	ldr	r3, [pc, #16]	@ (80133c8 <__sinit+0x28>)
 80133b6:	6223      	str	r3, [r4, #32]
 80133b8:	4b04      	ldr	r3, [pc, #16]	@ (80133cc <__sinit+0x2c>)
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d1f5      	bne.n	80133ac <__sinit+0xc>
 80133c0:	f7ff ffc4 	bl	801334c <global_stdio_init.part.0>
 80133c4:	e7f2      	b.n	80133ac <__sinit+0xc>
 80133c6:	bf00      	nop
 80133c8:	0801330d 	.word	0x0801330d
 80133cc:	20002308 	.word	0x20002308

080133d0 <_fwalk_sglue>:
 80133d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80133d4:	4607      	mov	r7, r0
 80133d6:	4688      	mov	r8, r1
 80133d8:	4614      	mov	r4, r2
 80133da:	2600      	movs	r6, #0
 80133dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80133e0:	f1b9 0901 	subs.w	r9, r9, #1
 80133e4:	d505      	bpl.n	80133f2 <_fwalk_sglue+0x22>
 80133e6:	6824      	ldr	r4, [r4, #0]
 80133e8:	2c00      	cmp	r4, #0
 80133ea:	d1f7      	bne.n	80133dc <_fwalk_sglue+0xc>
 80133ec:	4630      	mov	r0, r6
 80133ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133f2:	89ab      	ldrh	r3, [r5, #12]
 80133f4:	2b01      	cmp	r3, #1
 80133f6:	d907      	bls.n	8013408 <_fwalk_sglue+0x38>
 80133f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80133fc:	3301      	adds	r3, #1
 80133fe:	d003      	beq.n	8013408 <_fwalk_sglue+0x38>
 8013400:	4629      	mov	r1, r5
 8013402:	4638      	mov	r0, r7
 8013404:	47c0      	blx	r8
 8013406:	4306      	orrs	r6, r0
 8013408:	3568      	adds	r5, #104	@ 0x68
 801340a:	e7e9      	b.n	80133e0 <_fwalk_sglue+0x10>

0801340c <iprintf>:
 801340c:	b40f      	push	{r0, r1, r2, r3}
 801340e:	b507      	push	{r0, r1, r2, lr}
 8013410:	4906      	ldr	r1, [pc, #24]	@ (801342c <iprintf+0x20>)
 8013412:	ab04      	add	r3, sp, #16
 8013414:	6808      	ldr	r0, [r1, #0]
 8013416:	f853 2b04 	ldr.w	r2, [r3], #4
 801341a:	6881      	ldr	r1, [r0, #8]
 801341c:	9301      	str	r3, [sp, #4]
 801341e:	f001 fbdf 	bl	8014be0 <_vfiprintf_r>
 8013422:	b003      	add	sp, #12
 8013424:	f85d eb04 	ldr.w	lr, [sp], #4
 8013428:	b004      	add	sp, #16
 801342a:	4770      	bx	lr
 801342c:	20000138 	.word	0x20000138

08013430 <putchar>:
 8013430:	4b02      	ldr	r3, [pc, #8]	@ (801343c <putchar+0xc>)
 8013432:	4601      	mov	r1, r0
 8013434:	6818      	ldr	r0, [r3, #0]
 8013436:	6882      	ldr	r2, [r0, #8]
 8013438:	f001 bd96 	b.w	8014f68 <_putc_r>
 801343c:	20000138 	.word	0x20000138

08013440 <__sread>:
 8013440:	b510      	push	{r4, lr}
 8013442:	460c      	mov	r4, r1
 8013444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013448:	f000 f86c 	bl	8013524 <_read_r>
 801344c:	2800      	cmp	r0, #0
 801344e:	bfab      	itete	ge
 8013450:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013452:	89a3      	ldrhlt	r3, [r4, #12]
 8013454:	181b      	addge	r3, r3, r0
 8013456:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801345a:	bfac      	ite	ge
 801345c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801345e:	81a3      	strhlt	r3, [r4, #12]
 8013460:	bd10      	pop	{r4, pc}

08013462 <__swrite>:
 8013462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013466:	461f      	mov	r7, r3
 8013468:	898b      	ldrh	r3, [r1, #12]
 801346a:	05db      	lsls	r3, r3, #23
 801346c:	4605      	mov	r5, r0
 801346e:	460c      	mov	r4, r1
 8013470:	4616      	mov	r6, r2
 8013472:	d505      	bpl.n	8013480 <__swrite+0x1e>
 8013474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013478:	2302      	movs	r3, #2
 801347a:	2200      	movs	r2, #0
 801347c:	f000 f840 	bl	8013500 <_lseek_r>
 8013480:	89a3      	ldrh	r3, [r4, #12]
 8013482:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013486:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801348a:	81a3      	strh	r3, [r4, #12]
 801348c:	4632      	mov	r2, r6
 801348e:	463b      	mov	r3, r7
 8013490:	4628      	mov	r0, r5
 8013492:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013496:	f000 b857 	b.w	8013548 <_write_r>

0801349a <__sseek>:
 801349a:	b510      	push	{r4, lr}
 801349c:	460c      	mov	r4, r1
 801349e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134a2:	f000 f82d 	bl	8013500 <_lseek_r>
 80134a6:	1c43      	adds	r3, r0, #1
 80134a8:	89a3      	ldrh	r3, [r4, #12]
 80134aa:	bf15      	itete	ne
 80134ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 80134ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80134b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80134b6:	81a3      	strheq	r3, [r4, #12]
 80134b8:	bf18      	it	ne
 80134ba:	81a3      	strhne	r3, [r4, #12]
 80134bc:	bd10      	pop	{r4, pc}

080134be <__sclose>:
 80134be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134c2:	f000 b80d 	b.w	80134e0 <_close_r>

080134c6 <memset>:
 80134c6:	4402      	add	r2, r0
 80134c8:	4603      	mov	r3, r0
 80134ca:	4293      	cmp	r3, r2
 80134cc:	d100      	bne.n	80134d0 <memset+0xa>
 80134ce:	4770      	bx	lr
 80134d0:	f803 1b01 	strb.w	r1, [r3], #1
 80134d4:	e7f9      	b.n	80134ca <memset+0x4>
	...

080134d8 <_localeconv_r>:
 80134d8:	4800      	ldr	r0, [pc, #0]	@ (80134dc <_localeconv_r+0x4>)
 80134da:	4770      	bx	lr
 80134dc:	20000278 	.word	0x20000278

080134e0 <_close_r>:
 80134e0:	b538      	push	{r3, r4, r5, lr}
 80134e2:	4d06      	ldr	r5, [pc, #24]	@ (80134fc <_close_r+0x1c>)
 80134e4:	2300      	movs	r3, #0
 80134e6:	4604      	mov	r4, r0
 80134e8:	4608      	mov	r0, r1
 80134ea:	602b      	str	r3, [r5, #0]
 80134ec:	f7f1 fe3a 	bl	8005164 <_close>
 80134f0:	1c43      	adds	r3, r0, #1
 80134f2:	d102      	bne.n	80134fa <_close_r+0x1a>
 80134f4:	682b      	ldr	r3, [r5, #0]
 80134f6:	b103      	cbz	r3, 80134fa <_close_r+0x1a>
 80134f8:	6023      	str	r3, [r4, #0]
 80134fa:	bd38      	pop	{r3, r4, r5, pc}
 80134fc:	2000230c 	.word	0x2000230c

08013500 <_lseek_r>:
 8013500:	b538      	push	{r3, r4, r5, lr}
 8013502:	4d07      	ldr	r5, [pc, #28]	@ (8013520 <_lseek_r+0x20>)
 8013504:	4604      	mov	r4, r0
 8013506:	4608      	mov	r0, r1
 8013508:	4611      	mov	r1, r2
 801350a:	2200      	movs	r2, #0
 801350c:	602a      	str	r2, [r5, #0]
 801350e:	461a      	mov	r2, r3
 8013510:	f7f1 fe4f 	bl	80051b2 <_lseek>
 8013514:	1c43      	adds	r3, r0, #1
 8013516:	d102      	bne.n	801351e <_lseek_r+0x1e>
 8013518:	682b      	ldr	r3, [r5, #0]
 801351a:	b103      	cbz	r3, 801351e <_lseek_r+0x1e>
 801351c:	6023      	str	r3, [r4, #0]
 801351e:	bd38      	pop	{r3, r4, r5, pc}
 8013520:	2000230c 	.word	0x2000230c

08013524 <_read_r>:
 8013524:	b538      	push	{r3, r4, r5, lr}
 8013526:	4d07      	ldr	r5, [pc, #28]	@ (8013544 <_read_r+0x20>)
 8013528:	4604      	mov	r4, r0
 801352a:	4608      	mov	r0, r1
 801352c:	4611      	mov	r1, r2
 801352e:	2200      	movs	r2, #0
 8013530:	602a      	str	r2, [r5, #0]
 8013532:	461a      	mov	r2, r3
 8013534:	f7f1 fddd 	bl	80050f2 <_read>
 8013538:	1c43      	adds	r3, r0, #1
 801353a:	d102      	bne.n	8013542 <_read_r+0x1e>
 801353c:	682b      	ldr	r3, [r5, #0]
 801353e:	b103      	cbz	r3, 8013542 <_read_r+0x1e>
 8013540:	6023      	str	r3, [r4, #0]
 8013542:	bd38      	pop	{r3, r4, r5, pc}
 8013544:	2000230c 	.word	0x2000230c

08013548 <_write_r>:
 8013548:	b538      	push	{r3, r4, r5, lr}
 801354a:	4d07      	ldr	r5, [pc, #28]	@ (8013568 <_write_r+0x20>)
 801354c:	4604      	mov	r4, r0
 801354e:	4608      	mov	r0, r1
 8013550:	4611      	mov	r1, r2
 8013552:	2200      	movs	r2, #0
 8013554:	602a      	str	r2, [r5, #0]
 8013556:	461a      	mov	r2, r3
 8013558:	f7f1 fde8 	bl	800512c <_write>
 801355c:	1c43      	adds	r3, r0, #1
 801355e:	d102      	bne.n	8013566 <_write_r+0x1e>
 8013560:	682b      	ldr	r3, [r5, #0]
 8013562:	b103      	cbz	r3, 8013566 <_write_r+0x1e>
 8013564:	6023      	str	r3, [r4, #0]
 8013566:	bd38      	pop	{r3, r4, r5, pc}
 8013568:	2000230c 	.word	0x2000230c

0801356c <__errno>:
 801356c:	4b01      	ldr	r3, [pc, #4]	@ (8013574 <__errno+0x8>)
 801356e:	6818      	ldr	r0, [r3, #0]
 8013570:	4770      	bx	lr
 8013572:	bf00      	nop
 8013574:	20000138 	.word	0x20000138

08013578 <__libc_init_array>:
 8013578:	b570      	push	{r4, r5, r6, lr}
 801357a:	4d0d      	ldr	r5, [pc, #52]	@ (80135b0 <__libc_init_array+0x38>)
 801357c:	4c0d      	ldr	r4, [pc, #52]	@ (80135b4 <__libc_init_array+0x3c>)
 801357e:	1b64      	subs	r4, r4, r5
 8013580:	10a4      	asrs	r4, r4, #2
 8013582:	2600      	movs	r6, #0
 8013584:	42a6      	cmp	r6, r4
 8013586:	d109      	bne.n	801359c <__libc_init_array+0x24>
 8013588:	4d0b      	ldr	r5, [pc, #44]	@ (80135b8 <__libc_init_array+0x40>)
 801358a:	4c0c      	ldr	r4, [pc, #48]	@ (80135bc <__libc_init_array+0x44>)
 801358c:	f001 fef8 	bl	8015380 <_init>
 8013590:	1b64      	subs	r4, r4, r5
 8013592:	10a4      	asrs	r4, r4, #2
 8013594:	2600      	movs	r6, #0
 8013596:	42a6      	cmp	r6, r4
 8013598:	d105      	bne.n	80135a6 <__libc_init_array+0x2e>
 801359a:	bd70      	pop	{r4, r5, r6, pc}
 801359c:	f855 3b04 	ldr.w	r3, [r5], #4
 80135a0:	4798      	blx	r3
 80135a2:	3601      	adds	r6, #1
 80135a4:	e7ee      	b.n	8013584 <__libc_init_array+0xc>
 80135a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80135aa:	4798      	blx	r3
 80135ac:	3601      	adds	r6, #1
 80135ae:	e7f2      	b.n	8013596 <__libc_init_array+0x1e>
 80135b0:	0801589c 	.word	0x0801589c
 80135b4:	0801589c 	.word	0x0801589c
 80135b8:	0801589c 	.word	0x0801589c
 80135bc:	080158a0 	.word	0x080158a0

080135c0 <__retarget_lock_init_recursive>:
 80135c0:	4770      	bx	lr

080135c2 <__retarget_lock_acquire_recursive>:
 80135c2:	4770      	bx	lr

080135c4 <__retarget_lock_release_recursive>:
 80135c4:	4770      	bx	lr

080135c6 <memcpy>:
 80135c6:	440a      	add	r2, r1
 80135c8:	4291      	cmp	r1, r2
 80135ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80135ce:	d100      	bne.n	80135d2 <memcpy+0xc>
 80135d0:	4770      	bx	lr
 80135d2:	b510      	push	{r4, lr}
 80135d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80135d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80135dc:	4291      	cmp	r1, r2
 80135de:	d1f9      	bne.n	80135d4 <memcpy+0xe>
 80135e0:	bd10      	pop	{r4, pc}

080135e2 <quorem>:
 80135e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135e6:	6903      	ldr	r3, [r0, #16]
 80135e8:	690c      	ldr	r4, [r1, #16]
 80135ea:	42a3      	cmp	r3, r4
 80135ec:	4607      	mov	r7, r0
 80135ee:	db7e      	blt.n	80136ee <quorem+0x10c>
 80135f0:	3c01      	subs	r4, #1
 80135f2:	f101 0814 	add.w	r8, r1, #20
 80135f6:	00a3      	lsls	r3, r4, #2
 80135f8:	f100 0514 	add.w	r5, r0, #20
 80135fc:	9300      	str	r3, [sp, #0]
 80135fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013602:	9301      	str	r3, [sp, #4]
 8013604:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013608:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801360c:	3301      	adds	r3, #1
 801360e:	429a      	cmp	r2, r3
 8013610:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013614:	fbb2 f6f3 	udiv	r6, r2, r3
 8013618:	d32e      	bcc.n	8013678 <quorem+0x96>
 801361a:	f04f 0a00 	mov.w	sl, #0
 801361e:	46c4      	mov	ip, r8
 8013620:	46ae      	mov	lr, r5
 8013622:	46d3      	mov	fp, sl
 8013624:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013628:	b298      	uxth	r0, r3
 801362a:	fb06 a000 	mla	r0, r6, r0, sl
 801362e:	0c02      	lsrs	r2, r0, #16
 8013630:	0c1b      	lsrs	r3, r3, #16
 8013632:	fb06 2303 	mla	r3, r6, r3, r2
 8013636:	f8de 2000 	ldr.w	r2, [lr]
 801363a:	b280      	uxth	r0, r0
 801363c:	b292      	uxth	r2, r2
 801363e:	1a12      	subs	r2, r2, r0
 8013640:	445a      	add	r2, fp
 8013642:	f8de 0000 	ldr.w	r0, [lr]
 8013646:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801364a:	b29b      	uxth	r3, r3
 801364c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8013650:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8013654:	b292      	uxth	r2, r2
 8013656:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801365a:	45e1      	cmp	r9, ip
 801365c:	f84e 2b04 	str.w	r2, [lr], #4
 8013660:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8013664:	d2de      	bcs.n	8013624 <quorem+0x42>
 8013666:	9b00      	ldr	r3, [sp, #0]
 8013668:	58eb      	ldr	r3, [r5, r3]
 801366a:	b92b      	cbnz	r3, 8013678 <quorem+0x96>
 801366c:	9b01      	ldr	r3, [sp, #4]
 801366e:	3b04      	subs	r3, #4
 8013670:	429d      	cmp	r5, r3
 8013672:	461a      	mov	r2, r3
 8013674:	d32f      	bcc.n	80136d6 <quorem+0xf4>
 8013676:	613c      	str	r4, [r7, #16]
 8013678:	4638      	mov	r0, r7
 801367a:	f001 f97f 	bl	801497c <__mcmp>
 801367e:	2800      	cmp	r0, #0
 8013680:	db25      	blt.n	80136ce <quorem+0xec>
 8013682:	4629      	mov	r1, r5
 8013684:	2000      	movs	r0, #0
 8013686:	f858 2b04 	ldr.w	r2, [r8], #4
 801368a:	f8d1 c000 	ldr.w	ip, [r1]
 801368e:	fa1f fe82 	uxth.w	lr, r2
 8013692:	fa1f f38c 	uxth.w	r3, ip
 8013696:	eba3 030e 	sub.w	r3, r3, lr
 801369a:	4403      	add	r3, r0
 801369c:	0c12      	lsrs	r2, r2, #16
 801369e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80136a2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80136a6:	b29b      	uxth	r3, r3
 80136a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80136ac:	45c1      	cmp	r9, r8
 80136ae:	f841 3b04 	str.w	r3, [r1], #4
 80136b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80136b6:	d2e6      	bcs.n	8013686 <quorem+0xa4>
 80136b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80136bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80136c0:	b922      	cbnz	r2, 80136cc <quorem+0xea>
 80136c2:	3b04      	subs	r3, #4
 80136c4:	429d      	cmp	r5, r3
 80136c6:	461a      	mov	r2, r3
 80136c8:	d30b      	bcc.n	80136e2 <quorem+0x100>
 80136ca:	613c      	str	r4, [r7, #16]
 80136cc:	3601      	adds	r6, #1
 80136ce:	4630      	mov	r0, r6
 80136d0:	b003      	add	sp, #12
 80136d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136d6:	6812      	ldr	r2, [r2, #0]
 80136d8:	3b04      	subs	r3, #4
 80136da:	2a00      	cmp	r2, #0
 80136dc:	d1cb      	bne.n	8013676 <quorem+0x94>
 80136de:	3c01      	subs	r4, #1
 80136e0:	e7c6      	b.n	8013670 <quorem+0x8e>
 80136e2:	6812      	ldr	r2, [r2, #0]
 80136e4:	3b04      	subs	r3, #4
 80136e6:	2a00      	cmp	r2, #0
 80136e8:	d1ef      	bne.n	80136ca <quorem+0xe8>
 80136ea:	3c01      	subs	r4, #1
 80136ec:	e7ea      	b.n	80136c4 <quorem+0xe2>
 80136ee:	2000      	movs	r0, #0
 80136f0:	e7ee      	b.n	80136d0 <quorem+0xee>
 80136f2:	0000      	movs	r0, r0
 80136f4:	0000      	movs	r0, r0
	...

080136f8 <_dtoa_r>:
 80136f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136fc:	69c7      	ldr	r7, [r0, #28]
 80136fe:	b097      	sub	sp, #92	@ 0x5c
 8013700:	ed8d 0b04 	vstr	d0, [sp, #16]
 8013704:	ec55 4b10 	vmov	r4, r5, d0
 8013708:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801370a:	9107      	str	r1, [sp, #28]
 801370c:	4681      	mov	r9, r0
 801370e:	920c      	str	r2, [sp, #48]	@ 0x30
 8013710:	9311      	str	r3, [sp, #68]	@ 0x44
 8013712:	b97f      	cbnz	r7, 8013734 <_dtoa_r+0x3c>
 8013714:	2010      	movs	r0, #16
 8013716:	f000 fe09 	bl	801432c <malloc>
 801371a:	4602      	mov	r2, r0
 801371c:	f8c9 001c 	str.w	r0, [r9, #28]
 8013720:	b920      	cbnz	r0, 801372c <_dtoa_r+0x34>
 8013722:	4ba9      	ldr	r3, [pc, #676]	@ (80139c8 <_dtoa_r+0x2d0>)
 8013724:	21ef      	movs	r1, #239	@ 0xef
 8013726:	48a9      	ldr	r0, [pc, #676]	@ (80139cc <_dtoa_r+0x2d4>)
 8013728:	f001 fcf6 	bl	8015118 <__assert_func>
 801372c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8013730:	6007      	str	r7, [r0, #0]
 8013732:	60c7      	str	r7, [r0, #12]
 8013734:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013738:	6819      	ldr	r1, [r3, #0]
 801373a:	b159      	cbz	r1, 8013754 <_dtoa_r+0x5c>
 801373c:	685a      	ldr	r2, [r3, #4]
 801373e:	604a      	str	r2, [r1, #4]
 8013740:	2301      	movs	r3, #1
 8013742:	4093      	lsls	r3, r2
 8013744:	608b      	str	r3, [r1, #8]
 8013746:	4648      	mov	r0, r9
 8013748:	f000 fee6 	bl	8014518 <_Bfree>
 801374c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013750:	2200      	movs	r2, #0
 8013752:	601a      	str	r2, [r3, #0]
 8013754:	1e2b      	subs	r3, r5, #0
 8013756:	bfb9      	ittee	lt
 8013758:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801375c:	9305      	strlt	r3, [sp, #20]
 801375e:	2300      	movge	r3, #0
 8013760:	6033      	strge	r3, [r6, #0]
 8013762:	9f05      	ldr	r7, [sp, #20]
 8013764:	4b9a      	ldr	r3, [pc, #616]	@ (80139d0 <_dtoa_r+0x2d8>)
 8013766:	bfbc      	itt	lt
 8013768:	2201      	movlt	r2, #1
 801376a:	6032      	strlt	r2, [r6, #0]
 801376c:	43bb      	bics	r3, r7
 801376e:	d112      	bne.n	8013796 <_dtoa_r+0x9e>
 8013770:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013772:	f242 730f 	movw	r3, #9999	@ 0x270f
 8013776:	6013      	str	r3, [r2, #0]
 8013778:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801377c:	4323      	orrs	r3, r4
 801377e:	f000 855a 	beq.w	8014236 <_dtoa_r+0xb3e>
 8013782:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013784:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80139e4 <_dtoa_r+0x2ec>
 8013788:	2b00      	cmp	r3, #0
 801378a:	f000 855c 	beq.w	8014246 <_dtoa_r+0xb4e>
 801378e:	f10a 0303 	add.w	r3, sl, #3
 8013792:	f000 bd56 	b.w	8014242 <_dtoa_r+0xb4a>
 8013796:	ed9d 7b04 	vldr	d7, [sp, #16]
 801379a:	2200      	movs	r2, #0
 801379c:	ec51 0b17 	vmov	r0, r1, d7
 80137a0:	2300      	movs	r3, #0
 80137a2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80137a6:	f7ed f967 	bl	8000a78 <__aeabi_dcmpeq>
 80137aa:	4680      	mov	r8, r0
 80137ac:	b158      	cbz	r0, 80137c6 <_dtoa_r+0xce>
 80137ae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80137b0:	2301      	movs	r3, #1
 80137b2:	6013      	str	r3, [r2, #0]
 80137b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80137b6:	b113      	cbz	r3, 80137be <_dtoa_r+0xc6>
 80137b8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80137ba:	4b86      	ldr	r3, [pc, #536]	@ (80139d4 <_dtoa_r+0x2dc>)
 80137bc:	6013      	str	r3, [r2, #0]
 80137be:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80139e8 <_dtoa_r+0x2f0>
 80137c2:	f000 bd40 	b.w	8014246 <_dtoa_r+0xb4e>
 80137c6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80137ca:	aa14      	add	r2, sp, #80	@ 0x50
 80137cc:	a915      	add	r1, sp, #84	@ 0x54
 80137ce:	4648      	mov	r0, r9
 80137d0:	f001 f984 	bl	8014adc <__d2b>
 80137d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80137d8:	9002      	str	r0, [sp, #8]
 80137da:	2e00      	cmp	r6, #0
 80137dc:	d078      	beq.n	80138d0 <_dtoa_r+0x1d8>
 80137de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80137e0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80137e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80137e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80137ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80137f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80137f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80137f8:	4619      	mov	r1, r3
 80137fa:	2200      	movs	r2, #0
 80137fc:	4b76      	ldr	r3, [pc, #472]	@ (80139d8 <_dtoa_r+0x2e0>)
 80137fe:	f7ec fd1b 	bl	8000238 <__aeabi_dsub>
 8013802:	a36b      	add	r3, pc, #428	@ (adr r3, 80139b0 <_dtoa_r+0x2b8>)
 8013804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013808:	f7ec fece 	bl	80005a8 <__aeabi_dmul>
 801380c:	a36a      	add	r3, pc, #424	@ (adr r3, 80139b8 <_dtoa_r+0x2c0>)
 801380e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013812:	f7ec fd13 	bl	800023c <__adddf3>
 8013816:	4604      	mov	r4, r0
 8013818:	4630      	mov	r0, r6
 801381a:	460d      	mov	r5, r1
 801381c:	f7ec fe5a 	bl	80004d4 <__aeabi_i2d>
 8013820:	a367      	add	r3, pc, #412	@ (adr r3, 80139c0 <_dtoa_r+0x2c8>)
 8013822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013826:	f7ec febf 	bl	80005a8 <__aeabi_dmul>
 801382a:	4602      	mov	r2, r0
 801382c:	460b      	mov	r3, r1
 801382e:	4620      	mov	r0, r4
 8013830:	4629      	mov	r1, r5
 8013832:	f7ec fd03 	bl	800023c <__adddf3>
 8013836:	4604      	mov	r4, r0
 8013838:	460d      	mov	r5, r1
 801383a:	f7ed f965 	bl	8000b08 <__aeabi_d2iz>
 801383e:	2200      	movs	r2, #0
 8013840:	4607      	mov	r7, r0
 8013842:	2300      	movs	r3, #0
 8013844:	4620      	mov	r0, r4
 8013846:	4629      	mov	r1, r5
 8013848:	f7ed f920 	bl	8000a8c <__aeabi_dcmplt>
 801384c:	b140      	cbz	r0, 8013860 <_dtoa_r+0x168>
 801384e:	4638      	mov	r0, r7
 8013850:	f7ec fe40 	bl	80004d4 <__aeabi_i2d>
 8013854:	4622      	mov	r2, r4
 8013856:	462b      	mov	r3, r5
 8013858:	f7ed f90e 	bl	8000a78 <__aeabi_dcmpeq>
 801385c:	b900      	cbnz	r0, 8013860 <_dtoa_r+0x168>
 801385e:	3f01      	subs	r7, #1
 8013860:	2f16      	cmp	r7, #22
 8013862:	d852      	bhi.n	801390a <_dtoa_r+0x212>
 8013864:	4b5d      	ldr	r3, [pc, #372]	@ (80139dc <_dtoa_r+0x2e4>)
 8013866:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801386a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801386e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8013872:	f7ed f90b 	bl	8000a8c <__aeabi_dcmplt>
 8013876:	2800      	cmp	r0, #0
 8013878:	d049      	beq.n	801390e <_dtoa_r+0x216>
 801387a:	3f01      	subs	r7, #1
 801387c:	2300      	movs	r3, #0
 801387e:	9310      	str	r3, [sp, #64]	@ 0x40
 8013880:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013882:	1b9b      	subs	r3, r3, r6
 8013884:	1e5a      	subs	r2, r3, #1
 8013886:	bf45      	ittet	mi
 8013888:	f1c3 0301 	rsbmi	r3, r3, #1
 801388c:	9300      	strmi	r3, [sp, #0]
 801388e:	2300      	movpl	r3, #0
 8013890:	2300      	movmi	r3, #0
 8013892:	9206      	str	r2, [sp, #24]
 8013894:	bf54      	ite	pl
 8013896:	9300      	strpl	r3, [sp, #0]
 8013898:	9306      	strmi	r3, [sp, #24]
 801389a:	2f00      	cmp	r7, #0
 801389c:	db39      	blt.n	8013912 <_dtoa_r+0x21a>
 801389e:	9b06      	ldr	r3, [sp, #24]
 80138a0:	970d      	str	r7, [sp, #52]	@ 0x34
 80138a2:	443b      	add	r3, r7
 80138a4:	9306      	str	r3, [sp, #24]
 80138a6:	2300      	movs	r3, #0
 80138a8:	9308      	str	r3, [sp, #32]
 80138aa:	9b07      	ldr	r3, [sp, #28]
 80138ac:	2b09      	cmp	r3, #9
 80138ae:	d863      	bhi.n	8013978 <_dtoa_r+0x280>
 80138b0:	2b05      	cmp	r3, #5
 80138b2:	bfc4      	itt	gt
 80138b4:	3b04      	subgt	r3, #4
 80138b6:	9307      	strgt	r3, [sp, #28]
 80138b8:	9b07      	ldr	r3, [sp, #28]
 80138ba:	f1a3 0302 	sub.w	r3, r3, #2
 80138be:	bfcc      	ite	gt
 80138c0:	2400      	movgt	r4, #0
 80138c2:	2401      	movle	r4, #1
 80138c4:	2b03      	cmp	r3, #3
 80138c6:	d863      	bhi.n	8013990 <_dtoa_r+0x298>
 80138c8:	e8df f003 	tbb	[pc, r3]
 80138cc:	2b375452 	.word	0x2b375452
 80138d0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80138d4:	441e      	add	r6, r3
 80138d6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80138da:	2b20      	cmp	r3, #32
 80138dc:	bfc1      	itttt	gt
 80138de:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80138e2:	409f      	lslgt	r7, r3
 80138e4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80138e8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80138ec:	bfd6      	itet	le
 80138ee:	f1c3 0320 	rsble	r3, r3, #32
 80138f2:	ea47 0003 	orrgt.w	r0, r7, r3
 80138f6:	fa04 f003 	lslle.w	r0, r4, r3
 80138fa:	f7ec fddb 	bl	80004b4 <__aeabi_ui2d>
 80138fe:	2201      	movs	r2, #1
 8013900:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8013904:	3e01      	subs	r6, #1
 8013906:	9212      	str	r2, [sp, #72]	@ 0x48
 8013908:	e776      	b.n	80137f8 <_dtoa_r+0x100>
 801390a:	2301      	movs	r3, #1
 801390c:	e7b7      	b.n	801387e <_dtoa_r+0x186>
 801390e:	9010      	str	r0, [sp, #64]	@ 0x40
 8013910:	e7b6      	b.n	8013880 <_dtoa_r+0x188>
 8013912:	9b00      	ldr	r3, [sp, #0]
 8013914:	1bdb      	subs	r3, r3, r7
 8013916:	9300      	str	r3, [sp, #0]
 8013918:	427b      	negs	r3, r7
 801391a:	9308      	str	r3, [sp, #32]
 801391c:	2300      	movs	r3, #0
 801391e:	930d      	str	r3, [sp, #52]	@ 0x34
 8013920:	e7c3      	b.n	80138aa <_dtoa_r+0x1b2>
 8013922:	2301      	movs	r3, #1
 8013924:	9309      	str	r3, [sp, #36]	@ 0x24
 8013926:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013928:	eb07 0b03 	add.w	fp, r7, r3
 801392c:	f10b 0301 	add.w	r3, fp, #1
 8013930:	2b01      	cmp	r3, #1
 8013932:	9303      	str	r3, [sp, #12]
 8013934:	bfb8      	it	lt
 8013936:	2301      	movlt	r3, #1
 8013938:	e006      	b.n	8013948 <_dtoa_r+0x250>
 801393a:	2301      	movs	r3, #1
 801393c:	9309      	str	r3, [sp, #36]	@ 0x24
 801393e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013940:	2b00      	cmp	r3, #0
 8013942:	dd28      	ble.n	8013996 <_dtoa_r+0x29e>
 8013944:	469b      	mov	fp, r3
 8013946:	9303      	str	r3, [sp, #12]
 8013948:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801394c:	2100      	movs	r1, #0
 801394e:	2204      	movs	r2, #4
 8013950:	f102 0514 	add.w	r5, r2, #20
 8013954:	429d      	cmp	r5, r3
 8013956:	d926      	bls.n	80139a6 <_dtoa_r+0x2ae>
 8013958:	6041      	str	r1, [r0, #4]
 801395a:	4648      	mov	r0, r9
 801395c:	f000 fd9c 	bl	8014498 <_Balloc>
 8013960:	4682      	mov	sl, r0
 8013962:	2800      	cmp	r0, #0
 8013964:	d142      	bne.n	80139ec <_dtoa_r+0x2f4>
 8013966:	4b1e      	ldr	r3, [pc, #120]	@ (80139e0 <_dtoa_r+0x2e8>)
 8013968:	4602      	mov	r2, r0
 801396a:	f240 11af 	movw	r1, #431	@ 0x1af
 801396e:	e6da      	b.n	8013726 <_dtoa_r+0x2e>
 8013970:	2300      	movs	r3, #0
 8013972:	e7e3      	b.n	801393c <_dtoa_r+0x244>
 8013974:	2300      	movs	r3, #0
 8013976:	e7d5      	b.n	8013924 <_dtoa_r+0x22c>
 8013978:	2401      	movs	r4, #1
 801397a:	2300      	movs	r3, #0
 801397c:	9307      	str	r3, [sp, #28]
 801397e:	9409      	str	r4, [sp, #36]	@ 0x24
 8013980:	f04f 3bff 	mov.w	fp, #4294967295
 8013984:	2200      	movs	r2, #0
 8013986:	f8cd b00c 	str.w	fp, [sp, #12]
 801398a:	2312      	movs	r3, #18
 801398c:	920c      	str	r2, [sp, #48]	@ 0x30
 801398e:	e7db      	b.n	8013948 <_dtoa_r+0x250>
 8013990:	2301      	movs	r3, #1
 8013992:	9309      	str	r3, [sp, #36]	@ 0x24
 8013994:	e7f4      	b.n	8013980 <_dtoa_r+0x288>
 8013996:	f04f 0b01 	mov.w	fp, #1
 801399a:	f8cd b00c 	str.w	fp, [sp, #12]
 801399e:	465b      	mov	r3, fp
 80139a0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80139a4:	e7d0      	b.n	8013948 <_dtoa_r+0x250>
 80139a6:	3101      	adds	r1, #1
 80139a8:	0052      	lsls	r2, r2, #1
 80139aa:	e7d1      	b.n	8013950 <_dtoa_r+0x258>
 80139ac:	f3af 8000 	nop.w
 80139b0:	636f4361 	.word	0x636f4361
 80139b4:	3fd287a7 	.word	0x3fd287a7
 80139b8:	8b60c8b3 	.word	0x8b60c8b3
 80139bc:	3fc68a28 	.word	0x3fc68a28
 80139c0:	509f79fb 	.word	0x509f79fb
 80139c4:	3fd34413 	.word	0x3fd34413
 80139c8:	08015561 	.word	0x08015561
 80139cc:	08015578 	.word	0x08015578
 80139d0:	7ff00000 	.word	0x7ff00000
 80139d4:	08015531 	.word	0x08015531
 80139d8:	3ff80000 	.word	0x3ff80000
 80139dc:	080156c8 	.word	0x080156c8
 80139e0:	080155d0 	.word	0x080155d0
 80139e4:	0801555d 	.word	0x0801555d
 80139e8:	08015530 	.word	0x08015530
 80139ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80139f0:	6018      	str	r0, [r3, #0]
 80139f2:	9b03      	ldr	r3, [sp, #12]
 80139f4:	2b0e      	cmp	r3, #14
 80139f6:	f200 80a1 	bhi.w	8013b3c <_dtoa_r+0x444>
 80139fa:	2c00      	cmp	r4, #0
 80139fc:	f000 809e 	beq.w	8013b3c <_dtoa_r+0x444>
 8013a00:	2f00      	cmp	r7, #0
 8013a02:	dd33      	ble.n	8013a6c <_dtoa_r+0x374>
 8013a04:	4b9c      	ldr	r3, [pc, #624]	@ (8013c78 <_dtoa_r+0x580>)
 8013a06:	f007 020f 	and.w	r2, r7, #15
 8013a0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013a0e:	ed93 7b00 	vldr	d7, [r3]
 8013a12:	05f8      	lsls	r0, r7, #23
 8013a14:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8013a18:	ea4f 1427 	mov.w	r4, r7, asr #4
 8013a1c:	d516      	bpl.n	8013a4c <_dtoa_r+0x354>
 8013a1e:	4b97      	ldr	r3, [pc, #604]	@ (8013c7c <_dtoa_r+0x584>)
 8013a20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8013a24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013a28:	f7ec fee8 	bl	80007fc <__aeabi_ddiv>
 8013a2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013a30:	f004 040f 	and.w	r4, r4, #15
 8013a34:	2603      	movs	r6, #3
 8013a36:	4d91      	ldr	r5, [pc, #580]	@ (8013c7c <_dtoa_r+0x584>)
 8013a38:	b954      	cbnz	r4, 8013a50 <_dtoa_r+0x358>
 8013a3a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8013a3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013a42:	f7ec fedb 	bl	80007fc <__aeabi_ddiv>
 8013a46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013a4a:	e028      	b.n	8013a9e <_dtoa_r+0x3a6>
 8013a4c:	2602      	movs	r6, #2
 8013a4e:	e7f2      	b.n	8013a36 <_dtoa_r+0x33e>
 8013a50:	07e1      	lsls	r1, r4, #31
 8013a52:	d508      	bpl.n	8013a66 <_dtoa_r+0x36e>
 8013a54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8013a58:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013a5c:	f7ec fda4 	bl	80005a8 <__aeabi_dmul>
 8013a60:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8013a64:	3601      	adds	r6, #1
 8013a66:	1064      	asrs	r4, r4, #1
 8013a68:	3508      	adds	r5, #8
 8013a6a:	e7e5      	b.n	8013a38 <_dtoa_r+0x340>
 8013a6c:	f000 80af 	beq.w	8013bce <_dtoa_r+0x4d6>
 8013a70:	427c      	negs	r4, r7
 8013a72:	4b81      	ldr	r3, [pc, #516]	@ (8013c78 <_dtoa_r+0x580>)
 8013a74:	4d81      	ldr	r5, [pc, #516]	@ (8013c7c <_dtoa_r+0x584>)
 8013a76:	f004 020f 	and.w	r2, r4, #15
 8013a7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8013a86:	f7ec fd8f 	bl	80005a8 <__aeabi_dmul>
 8013a8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013a8e:	1124      	asrs	r4, r4, #4
 8013a90:	2300      	movs	r3, #0
 8013a92:	2602      	movs	r6, #2
 8013a94:	2c00      	cmp	r4, #0
 8013a96:	f040 808f 	bne.w	8013bb8 <_dtoa_r+0x4c0>
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d1d3      	bne.n	8013a46 <_dtoa_r+0x34e>
 8013a9e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013aa0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	f000 8094 	beq.w	8013bd2 <_dtoa_r+0x4da>
 8013aaa:	4b75      	ldr	r3, [pc, #468]	@ (8013c80 <_dtoa_r+0x588>)
 8013aac:	2200      	movs	r2, #0
 8013aae:	4620      	mov	r0, r4
 8013ab0:	4629      	mov	r1, r5
 8013ab2:	f7ec ffeb 	bl	8000a8c <__aeabi_dcmplt>
 8013ab6:	2800      	cmp	r0, #0
 8013ab8:	f000 808b 	beq.w	8013bd2 <_dtoa_r+0x4da>
 8013abc:	9b03      	ldr	r3, [sp, #12]
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	f000 8087 	beq.w	8013bd2 <_dtoa_r+0x4da>
 8013ac4:	f1bb 0f00 	cmp.w	fp, #0
 8013ac8:	dd34      	ble.n	8013b34 <_dtoa_r+0x43c>
 8013aca:	4620      	mov	r0, r4
 8013acc:	4b6d      	ldr	r3, [pc, #436]	@ (8013c84 <_dtoa_r+0x58c>)
 8013ace:	2200      	movs	r2, #0
 8013ad0:	4629      	mov	r1, r5
 8013ad2:	f7ec fd69 	bl	80005a8 <__aeabi_dmul>
 8013ad6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013ada:	f107 38ff 	add.w	r8, r7, #4294967295
 8013ade:	3601      	adds	r6, #1
 8013ae0:	465c      	mov	r4, fp
 8013ae2:	4630      	mov	r0, r6
 8013ae4:	f7ec fcf6 	bl	80004d4 <__aeabi_i2d>
 8013ae8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013aec:	f7ec fd5c 	bl	80005a8 <__aeabi_dmul>
 8013af0:	4b65      	ldr	r3, [pc, #404]	@ (8013c88 <_dtoa_r+0x590>)
 8013af2:	2200      	movs	r2, #0
 8013af4:	f7ec fba2 	bl	800023c <__adddf3>
 8013af8:	4605      	mov	r5, r0
 8013afa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8013afe:	2c00      	cmp	r4, #0
 8013b00:	d16a      	bne.n	8013bd8 <_dtoa_r+0x4e0>
 8013b02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013b06:	4b61      	ldr	r3, [pc, #388]	@ (8013c8c <_dtoa_r+0x594>)
 8013b08:	2200      	movs	r2, #0
 8013b0a:	f7ec fb95 	bl	8000238 <__aeabi_dsub>
 8013b0e:	4602      	mov	r2, r0
 8013b10:	460b      	mov	r3, r1
 8013b12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013b16:	462a      	mov	r2, r5
 8013b18:	4633      	mov	r3, r6
 8013b1a:	f7ec ffd5 	bl	8000ac8 <__aeabi_dcmpgt>
 8013b1e:	2800      	cmp	r0, #0
 8013b20:	f040 8298 	bne.w	8014054 <_dtoa_r+0x95c>
 8013b24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013b28:	462a      	mov	r2, r5
 8013b2a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8013b2e:	f7ec ffad 	bl	8000a8c <__aeabi_dcmplt>
 8013b32:	bb38      	cbnz	r0, 8013b84 <_dtoa_r+0x48c>
 8013b34:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8013b38:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8013b3c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	f2c0 8157 	blt.w	8013df2 <_dtoa_r+0x6fa>
 8013b44:	2f0e      	cmp	r7, #14
 8013b46:	f300 8154 	bgt.w	8013df2 <_dtoa_r+0x6fa>
 8013b4a:	4b4b      	ldr	r3, [pc, #300]	@ (8013c78 <_dtoa_r+0x580>)
 8013b4c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013b50:	ed93 7b00 	vldr	d7, [r3]
 8013b54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	ed8d 7b00 	vstr	d7, [sp]
 8013b5c:	f280 80e5 	bge.w	8013d2a <_dtoa_r+0x632>
 8013b60:	9b03      	ldr	r3, [sp, #12]
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	f300 80e1 	bgt.w	8013d2a <_dtoa_r+0x632>
 8013b68:	d10c      	bne.n	8013b84 <_dtoa_r+0x48c>
 8013b6a:	4b48      	ldr	r3, [pc, #288]	@ (8013c8c <_dtoa_r+0x594>)
 8013b6c:	2200      	movs	r2, #0
 8013b6e:	ec51 0b17 	vmov	r0, r1, d7
 8013b72:	f7ec fd19 	bl	80005a8 <__aeabi_dmul>
 8013b76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013b7a:	f7ec ff9b 	bl	8000ab4 <__aeabi_dcmpge>
 8013b7e:	2800      	cmp	r0, #0
 8013b80:	f000 8266 	beq.w	8014050 <_dtoa_r+0x958>
 8013b84:	2400      	movs	r4, #0
 8013b86:	4625      	mov	r5, r4
 8013b88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013b8a:	4656      	mov	r6, sl
 8013b8c:	ea6f 0803 	mvn.w	r8, r3
 8013b90:	2700      	movs	r7, #0
 8013b92:	4621      	mov	r1, r4
 8013b94:	4648      	mov	r0, r9
 8013b96:	f000 fcbf 	bl	8014518 <_Bfree>
 8013b9a:	2d00      	cmp	r5, #0
 8013b9c:	f000 80bd 	beq.w	8013d1a <_dtoa_r+0x622>
 8013ba0:	b12f      	cbz	r7, 8013bae <_dtoa_r+0x4b6>
 8013ba2:	42af      	cmp	r7, r5
 8013ba4:	d003      	beq.n	8013bae <_dtoa_r+0x4b6>
 8013ba6:	4639      	mov	r1, r7
 8013ba8:	4648      	mov	r0, r9
 8013baa:	f000 fcb5 	bl	8014518 <_Bfree>
 8013bae:	4629      	mov	r1, r5
 8013bb0:	4648      	mov	r0, r9
 8013bb2:	f000 fcb1 	bl	8014518 <_Bfree>
 8013bb6:	e0b0      	b.n	8013d1a <_dtoa_r+0x622>
 8013bb8:	07e2      	lsls	r2, r4, #31
 8013bba:	d505      	bpl.n	8013bc8 <_dtoa_r+0x4d0>
 8013bbc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013bc0:	f7ec fcf2 	bl	80005a8 <__aeabi_dmul>
 8013bc4:	3601      	adds	r6, #1
 8013bc6:	2301      	movs	r3, #1
 8013bc8:	1064      	asrs	r4, r4, #1
 8013bca:	3508      	adds	r5, #8
 8013bcc:	e762      	b.n	8013a94 <_dtoa_r+0x39c>
 8013bce:	2602      	movs	r6, #2
 8013bd0:	e765      	b.n	8013a9e <_dtoa_r+0x3a6>
 8013bd2:	9c03      	ldr	r4, [sp, #12]
 8013bd4:	46b8      	mov	r8, r7
 8013bd6:	e784      	b.n	8013ae2 <_dtoa_r+0x3ea>
 8013bd8:	4b27      	ldr	r3, [pc, #156]	@ (8013c78 <_dtoa_r+0x580>)
 8013bda:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013bdc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013be0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013be4:	4454      	add	r4, sl
 8013be6:	2900      	cmp	r1, #0
 8013be8:	d054      	beq.n	8013c94 <_dtoa_r+0x59c>
 8013bea:	4929      	ldr	r1, [pc, #164]	@ (8013c90 <_dtoa_r+0x598>)
 8013bec:	2000      	movs	r0, #0
 8013bee:	f7ec fe05 	bl	80007fc <__aeabi_ddiv>
 8013bf2:	4633      	mov	r3, r6
 8013bf4:	462a      	mov	r2, r5
 8013bf6:	f7ec fb1f 	bl	8000238 <__aeabi_dsub>
 8013bfa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8013bfe:	4656      	mov	r6, sl
 8013c00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013c04:	f7ec ff80 	bl	8000b08 <__aeabi_d2iz>
 8013c08:	4605      	mov	r5, r0
 8013c0a:	f7ec fc63 	bl	80004d4 <__aeabi_i2d>
 8013c0e:	4602      	mov	r2, r0
 8013c10:	460b      	mov	r3, r1
 8013c12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013c16:	f7ec fb0f 	bl	8000238 <__aeabi_dsub>
 8013c1a:	3530      	adds	r5, #48	@ 0x30
 8013c1c:	4602      	mov	r2, r0
 8013c1e:	460b      	mov	r3, r1
 8013c20:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013c24:	f806 5b01 	strb.w	r5, [r6], #1
 8013c28:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8013c2c:	f7ec ff2e 	bl	8000a8c <__aeabi_dcmplt>
 8013c30:	2800      	cmp	r0, #0
 8013c32:	d172      	bne.n	8013d1a <_dtoa_r+0x622>
 8013c34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013c38:	4911      	ldr	r1, [pc, #68]	@ (8013c80 <_dtoa_r+0x588>)
 8013c3a:	2000      	movs	r0, #0
 8013c3c:	f7ec fafc 	bl	8000238 <__aeabi_dsub>
 8013c40:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8013c44:	f7ec ff22 	bl	8000a8c <__aeabi_dcmplt>
 8013c48:	2800      	cmp	r0, #0
 8013c4a:	f040 80b4 	bne.w	8013db6 <_dtoa_r+0x6be>
 8013c4e:	42a6      	cmp	r6, r4
 8013c50:	f43f af70 	beq.w	8013b34 <_dtoa_r+0x43c>
 8013c54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8013c58:	4b0a      	ldr	r3, [pc, #40]	@ (8013c84 <_dtoa_r+0x58c>)
 8013c5a:	2200      	movs	r2, #0
 8013c5c:	f7ec fca4 	bl	80005a8 <__aeabi_dmul>
 8013c60:	4b08      	ldr	r3, [pc, #32]	@ (8013c84 <_dtoa_r+0x58c>)
 8013c62:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8013c66:	2200      	movs	r2, #0
 8013c68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013c6c:	f7ec fc9c 	bl	80005a8 <__aeabi_dmul>
 8013c70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013c74:	e7c4      	b.n	8013c00 <_dtoa_r+0x508>
 8013c76:	bf00      	nop
 8013c78:	080156c8 	.word	0x080156c8
 8013c7c:	080156a0 	.word	0x080156a0
 8013c80:	3ff00000 	.word	0x3ff00000
 8013c84:	40240000 	.word	0x40240000
 8013c88:	401c0000 	.word	0x401c0000
 8013c8c:	40140000 	.word	0x40140000
 8013c90:	3fe00000 	.word	0x3fe00000
 8013c94:	4631      	mov	r1, r6
 8013c96:	4628      	mov	r0, r5
 8013c98:	f7ec fc86 	bl	80005a8 <__aeabi_dmul>
 8013c9c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8013ca0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8013ca2:	4656      	mov	r6, sl
 8013ca4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013ca8:	f7ec ff2e 	bl	8000b08 <__aeabi_d2iz>
 8013cac:	4605      	mov	r5, r0
 8013cae:	f7ec fc11 	bl	80004d4 <__aeabi_i2d>
 8013cb2:	4602      	mov	r2, r0
 8013cb4:	460b      	mov	r3, r1
 8013cb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013cba:	f7ec fabd 	bl	8000238 <__aeabi_dsub>
 8013cbe:	3530      	adds	r5, #48	@ 0x30
 8013cc0:	f806 5b01 	strb.w	r5, [r6], #1
 8013cc4:	4602      	mov	r2, r0
 8013cc6:	460b      	mov	r3, r1
 8013cc8:	42a6      	cmp	r6, r4
 8013cca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013cce:	f04f 0200 	mov.w	r2, #0
 8013cd2:	d124      	bne.n	8013d1e <_dtoa_r+0x626>
 8013cd4:	4baf      	ldr	r3, [pc, #700]	@ (8013f94 <_dtoa_r+0x89c>)
 8013cd6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8013cda:	f7ec faaf 	bl	800023c <__adddf3>
 8013cde:	4602      	mov	r2, r0
 8013ce0:	460b      	mov	r3, r1
 8013ce2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013ce6:	f7ec feef 	bl	8000ac8 <__aeabi_dcmpgt>
 8013cea:	2800      	cmp	r0, #0
 8013cec:	d163      	bne.n	8013db6 <_dtoa_r+0x6be>
 8013cee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8013cf2:	49a8      	ldr	r1, [pc, #672]	@ (8013f94 <_dtoa_r+0x89c>)
 8013cf4:	2000      	movs	r0, #0
 8013cf6:	f7ec fa9f 	bl	8000238 <__aeabi_dsub>
 8013cfa:	4602      	mov	r2, r0
 8013cfc:	460b      	mov	r3, r1
 8013cfe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013d02:	f7ec fec3 	bl	8000a8c <__aeabi_dcmplt>
 8013d06:	2800      	cmp	r0, #0
 8013d08:	f43f af14 	beq.w	8013b34 <_dtoa_r+0x43c>
 8013d0c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8013d0e:	1e73      	subs	r3, r6, #1
 8013d10:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013d12:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013d16:	2b30      	cmp	r3, #48	@ 0x30
 8013d18:	d0f8      	beq.n	8013d0c <_dtoa_r+0x614>
 8013d1a:	4647      	mov	r7, r8
 8013d1c:	e03b      	b.n	8013d96 <_dtoa_r+0x69e>
 8013d1e:	4b9e      	ldr	r3, [pc, #632]	@ (8013f98 <_dtoa_r+0x8a0>)
 8013d20:	f7ec fc42 	bl	80005a8 <__aeabi_dmul>
 8013d24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013d28:	e7bc      	b.n	8013ca4 <_dtoa_r+0x5ac>
 8013d2a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8013d2e:	4656      	mov	r6, sl
 8013d30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013d34:	4620      	mov	r0, r4
 8013d36:	4629      	mov	r1, r5
 8013d38:	f7ec fd60 	bl	80007fc <__aeabi_ddiv>
 8013d3c:	f7ec fee4 	bl	8000b08 <__aeabi_d2iz>
 8013d40:	4680      	mov	r8, r0
 8013d42:	f7ec fbc7 	bl	80004d4 <__aeabi_i2d>
 8013d46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013d4a:	f7ec fc2d 	bl	80005a8 <__aeabi_dmul>
 8013d4e:	4602      	mov	r2, r0
 8013d50:	460b      	mov	r3, r1
 8013d52:	4620      	mov	r0, r4
 8013d54:	4629      	mov	r1, r5
 8013d56:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8013d5a:	f7ec fa6d 	bl	8000238 <__aeabi_dsub>
 8013d5e:	f806 4b01 	strb.w	r4, [r6], #1
 8013d62:	9d03      	ldr	r5, [sp, #12]
 8013d64:	eba6 040a 	sub.w	r4, r6, sl
 8013d68:	42a5      	cmp	r5, r4
 8013d6a:	4602      	mov	r2, r0
 8013d6c:	460b      	mov	r3, r1
 8013d6e:	d133      	bne.n	8013dd8 <_dtoa_r+0x6e0>
 8013d70:	f7ec fa64 	bl	800023c <__adddf3>
 8013d74:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013d78:	4604      	mov	r4, r0
 8013d7a:	460d      	mov	r5, r1
 8013d7c:	f7ec fea4 	bl	8000ac8 <__aeabi_dcmpgt>
 8013d80:	b9c0      	cbnz	r0, 8013db4 <_dtoa_r+0x6bc>
 8013d82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013d86:	4620      	mov	r0, r4
 8013d88:	4629      	mov	r1, r5
 8013d8a:	f7ec fe75 	bl	8000a78 <__aeabi_dcmpeq>
 8013d8e:	b110      	cbz	r0, 8013d96 <_dtoa_r+0x69e>
 8013d90:	f018 0f01 	tst.w	r8, #1
 8013d94:	d10e      	bne.n	8013db4 <_dtoa_r+0x6bc>
 8013d96:	9902      	ldr	r1, [sp, #8]
 8013d98:	4648      	mov	r0, r9
 8013d9a:	f000 fbbd 	bl	8014518 <_Bfree>
 8013d9e:	2300      	movs	r3, #0
 8013da0:	7033      	strb	r3, [r6, #0]
 8013da2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013da4:	3701      	adds	r7, #1
 8013da6:	601f      	str	r7, [r3, #0]
 8013da8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	f000 824b 	beq.w	8014246 <_dtoa_r+0xb4e>
 8013db0:	601e      	str	r6, [r3, #0]
 8013db2:	e248      	b.n	8014246 <_dtoa_r+0xb4e>
 8013db4:	46b8      	mov	r8, r7
 8013db6:	4633      	mov	r3, r6
 8013db8:	461e      	mov	r6, r3
 8013dba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013dbe:	2a39      	cmp	r2, #57	@ 0x39
 8013dc0:	d106      	bne.n	8013dd0 <_dtoa_r+0x6d8>
 8013dc2:	459a      	cmp	sl, r3
 8013dc4:	d1f8      	bne.n	8013db8 <_dtoa_r+0x6c0>
 8013dc6:	2230      	movs	r2, #48	@ 0x30
 8013dc8:	f108 0801 	add.w	r8, r8, #1
 8013dcc:	f88a 2000 	strb.w	r2, [sl]
 8013dd0:	781a      	ldrb	r2, [r3, #0]
 8013dd2:	3201      	adds	r2, #1
 8013dd4:	701a      	strb	r2, [r3, #0]
 8013dd6:	e7a0      	b.n	8013d1a <_dtoa_r+0x622>
 8013dd8:	4b6f      	ldr	r3, [pc, #444]	@ (8013f98 <_dtoa_r+0x8a0>)
 8013dda:	2200      	movs	r2, #0
 8013ddc:	f7ec fbe4 	bl	80005a8 <__aeabi_dmul>
 8013de0:	2200      	movs	r2, #0
 8013de2:	2300      	movs	r3, #0
 8013de4:	4604      	mov	r4, r0
 8013de6:	460d      	mov	r5, r1
 8013de8:	f7ec fe46 	bl	8000a78 <__aeabi_dcmpeq>
 8013dec:	2800      	cmp	r0, #0
 8013dee:	d09f      	beq.n	8013d30 <_dtoa_r+0x638>
 8013df0:	e7d1      	b.n	8013d96 <_dtoa_r+0x69e>
 8013df2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013df4:	2a00      	cmp	r2, #0
 8013df6:	f000 80ea 	beq.w	8013fce <_dtoa_r+0x8d6>
 8013dfa:	9a07      	ldr	r2, [sp, #28]
 8013dfc:	2a01      	cmp	r2, #1
 8013dfe:	f300 80cd 	bgt.w	8013f9c <_dtoa_r+0x8a4>
 8013e02:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8013e04:	2a00      	cmp	r2, #0
 8013e06:	f000 80c1 	beq.w	8013f8c <_dtoa_r+0x894>
 8013e0a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8013e0e:	9c08      	ldr	r4, [sp, #32]
 8013e10:	9e00      	ldr	r6, [sp, #0]
 8013e12:	9a00      	ldr	r2, [sp, #0]
 8013e14:	441a      	add	r2, r3
 8013e16:	9200      	str	r2, [sp, #0]
 8013e18:	9a06      	ldr	r2, [sp, #24]
 8013e1a:	2101      	movs	r1, #1
 8013e1c:	441a      	add	r2, r3
 8013e1e:	4648      	mov	r0, r9
 8013e20:	9206      	str	r2, [sp, #24]
 8013e22:	f000 fc2d 	bl	8014680 <__i2b>
 8013e26:	4605      	mov	r5, r0
 8013e28:	b166      	cbz	r6, 8013e44 <_dtoa_r+0x74c>
 8013e2a:	9b06      	ldr	r3, [sp, #24]
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	dd09      	ble.n	8013e44 <_dtoa_r+0x74c>
 8013e30:	42b3      	cmp	r3, r6
 8013e32:	9a00      	ldr	r2, [sp, #0]
 8013e34:	bfa8      	it	ge
 8013e36:	4633      	movge	r3, r6
 8013e38:	1ad2      	subs	r2, r2, r3
 8013e3a:	9200      	str	r2, [sp, #0]
 8013e3c:	9a06      	ldr	r2, [sp, #24]
 8013e3e:	1af6      	subs	r6, r6, r3
 8013e40:	1ad3      	subs	r3, r2, r3
 8013e42:	9306      	str	r3, [sp, #24]
 8013e44:	9b08      	ldr	r3, [sp, #32]
 8013e46:	b30b      	cbz	r3, 8013e8c <_dtoa_r+0x794>
 8013e48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	f000 80c6 	beq.w	8013fdc <_dtoa_r+0x8e4>
 8013e50:	2c00      	cmp	r4, #0
 8013e52:	f000 80c0 	beq.w	8013fd6 <_dtoa_r+0x8de>
 8013e56:	4629      	mov	r1, r5
 8013e58:	4622      	mov	r2, r4
 8013e5a:	4648      	mov	r0, r9
 8013e5c:	f000 fcc8 	bl	80147f0 <__pow5mult>
 8013e60:	9a02      	ldr	r2, [sp, #8]
 8013e62:	4601      	mov	r1, r0
 8013e64:	4605      	mov	r5, r0
 8013e66:	4648      	mov	r0, r9
 8013e68:	f000 fc20 	bl	80146ac <__multiply>
 8013e6c:	9902      	ldr	r1, [sp, #8]
 8013e6e:	4680      	mov	r8, r0
 8013e70:	4648      	mov	r0, r9
 8013e72:	f000 fb51 	bl	8014518 <_Bfree>
 8013e76:	9b08      	ldr	r3, [sp, #32]
 8013e78:	1b1b      	subs	r3, r3, r4
 8013e7a:	9308      	str	r3, [sp, #32]
 8013e7c:	f000 80b1 	beq.w	8013fe2 <_dtoa_r+0x8ea>
 8013e80:	9a08      	ldr	r2, [sp, #32]
 8013e82:	4641      	mov	r1, r8
 8013e84:	4648      	mov	r0, r9
 8013e86:	f000 fcb3 	bl	80147f0 <__pow5mult>
 8013e8a:	9002      	str	r0, [sp, #8]
 8013e8c:	2101      	movs	r1, #1
 8013e8e:	4648      	mov	r0, r9
 8013e90:	f000 fbf6 	bl	8014680 <__i2b>
 8013e94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013e96:	4604      	mov	r4, r0
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	f000 81d8 	beq.w	801424e <_dtoa_r+0xb56>
 8013e9e:	461a      	mov	r2, r3
 8013ea0:	4601      	mov	r1, r0
 8013ea2:	4648      	mov	r0, r9
 8013ea4:	f000 fca4 	bl	80147f0 <__pow5mult>
 8013ea8:	9b07      	ldr	r3, [sp, #28]
 8013eaa:	2b01      	cmp	r3, #1
 8013eac:	4604      	mov	r4, r0
 8013eae:	f300 809f 	bgt.w	8013ff0 <_dtoa_r+0x8f8>
 8013eb2:	9b04      	ldr	r3, [sp, #16]
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	f040 8097 	bne.w	8013fe8 <_dtoa_r+0x8f0>
 8013eba:	9b05      	ldr	r3, [sp, #20]
 8013ebc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	f040 8093 	bne.w	8013fec <_dtoa_r+0x8f4>
 8013ec6:	9b05      	ldr	r3, [sp, #20]
 8013ec8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013ecc:	0d1b      	lsrs	r3, r3, #20
 8013ece:	051b      	lsls	r3, r3, #20
 8013ed0:	b133      	cbz	r3, 8013ee0 <_dtoa_r+0x7e8>
 8013ed2:	9b00      	ldr	r3, [sp, #0]
 8013ed4:	3301      	adds	r3, #1
 8013ed6:	9300      	str	r3, [sp, #0]
 8013ed8:	9b06      	ldr	r3, [sp, #24]
 8013eda:	3301      	adds	r3, #1
 8013edc:	9306      	str	r3, [sp, #24]
 8013ede:	2301      	movs	r3, #1
 8013ee0:	9308      	str	r3, [sp, #32]
 8013ee2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	f000 81b8 	beq.w	801425a <_dtoa_r+0xb62>
 8013eea:	6923      	ldr	r3, [r4, #16]
 8013eec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013ef0:	6918      	ldr	r0, [r3, #16]
 8013ef2:	f000 fb79 	bl	80145e8 <__hi0bits>
 8013ef6:	f1c0 0020 	rsb	r0, r0, #32
 8013efa:	9b06      	ldr	r3, [sp, #24]
 8013efc:	4418      	add	r0, r3
 8013efe:	f010 001f 	ands.w	r0, r0, #31
 8013f02:	f000 8082 	beq.w	801400a <_dtoa_r+0x912>
 8013f06:	f1c0 0320 	rsb	r3, r0, #32
 8013f0a:	2b04      	cmp	r3, #4
 8013f0c:	dd73      	ble.n	8013ff6 <_dtoa_r+0x8fe>
 8013f0e:	9b00      	ldr	r3, [sp, #0]
 8013f10:	f1c0 001c 	rsb	r0, r0, #28
 8013f14:	4403      	add	r3, r0
 8013f16:	9300      	str	r3, [sp, #0]
 8013f18:	9b06      	ldr	r3, [sp, #24]
 8013f1a:	4403      	add	r3, r0
 8013f1c:	4406      	add	r6, r0
 8013f1e:	9306      	str	r3, [sp, #24]
 8013f20:	9b00      	ldr	r3, [sp, #0]
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	dd05      	ble.n	8013f32 <_dtoa_r+0x83a>
 8013f26:	9902      	ldr	r1, [sp, #8]
 8013f28:	461a      	mov	r2, r3
 8013f2a:	4648      	mov	r0, r9
 8013f2c:	f000 fcba 	bl	80148a4 <__lshift>
 8013f30:	9002      	str	r0, [sp, #8]
 8013f32:	9b06      	ldr	r3, [sp, #24]
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	dd05      	ble.n	8013f44 <_dtoa_r+0x84c>
 8013f38:	4621      	mov	r1, r4
 8013f3a:	461a      	mov	r2, r3
 8013f3c:	4648      	mov	r0, r9
 8013f3e:	f000 fcb1 	bl	80148a4 <__lshift>
 8013f42:	4604      	mov	r4, r0
 8013f44:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d061      	beq.n	801400e <_dtoa_r+0x916>
 8013f4a:	9802      	ldr	r0, [sp, #8]
 8013f4c:	4621      	mov	r1, r4
 8013f4e:	f000 fd15 	bl	801497c <__mcmp>
 8013f52:	2800      	cmp	r0, #0
 8013f54:	da5b      	bge.n	801400e <_dtoa_r+0x916>
 8013f56:	2300      	movs	r3, #0
 8013f58:	9902      	ldr	r1, [sp, #8]
 8013f5a:	220a      	movs	r2, #10
 8013f5c:	4648      	mov	r0, r9
 8013f5e:	f000 fafd 	bl	801455c <__multadd>
 8013f62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f64:	9002      	str	r0, [sp, #8]
 8013f66:	f107 38ff 	add.w	r8, r7, #4294967295
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	f000 8177 	beq.w	801425e <_dtoa_r+0xb66>
 8013f70:	4629      	mov	r1, r5
 8013f72:	2300      	movs	r3, #0
 8013f74:	220a      	movs	r2, #10
 8013f76:	4648      	mov	r0, r9
 8013f78:	f000 faf0 	bl	801455c <__multadd>
 8013f7c:	f1bb 0f00 	cmp.w	fp, #0
 8013f80:	4605      	mov	r5, r0
 8013f82:	dc6f      	bgt.n	8014064 <_dtoa_r+0x96c>
 8013f84:	9b07      	ldr	r3, [sp, #28]
 8013f86:	2b02      	cmp	r3, #2
 8013f88:	dc49      	bgt.n	801401e <_dtoa_r+0x926>
 8013f8a:	e06b      	b.n	8014064 <_dtoa_r+0x96c>
 8013f8c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013f8e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8013f92:	e73c      	b.n	8013e0e <_dtoa_r+0x716>
 8013f94:	3fe00000 	.word	0x3fe00000
 8013f98:	40240000 	.word	0x40240000
 8013f9c:	9b03      	ldr	r3, [sp, #12]
 8013f9e:	1e5c      	subs	r4, r3, #1
 8013fa0:	9b08      	ldr	r3, [sp, #32]
 8013fa2:	42a3      	cmp	r3, r4
 8013fa4:	db09      	blt.n	8013fba <_dtoa_r+0x8c2>
 8013fa6:	1b1c      	subs	r4, r3, r4
 8013fa8:	9b03      	ldr	r3, [sp, #12]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	f6bf af30 	bge.w	8013e10 <_dtoa_r+0x718>
 8013fb0:	9b00      	ldr	r3, [sp, #0]
 8013fb2:	9a03      	ldr	r2, [sp, #12]
 8013fb4:	1a9e      	subs	r6, r3, r2
 8013fb6:	2300      	movs	r3, #0
 8013fb8:	e72b      	b.n	8013e12 <_dtoa_r+0x71a>
 8013fba:	9b08      	ldr	r3, [sp, #32]
 8013fbc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013fbe:	9408      	str	r4, [sp, #32]
 8013fc0:	1ae3      	subs	r3, r4, r3
 8013fc2:	441a      	add	r2, r3
 8013fc4:	9e00      	ldr	r6, [sp, #0]
 8013fc6:	9b03      	ldr	r3, [sp, #12]
 8013fc8:	920d      	str	r2, [sp, #52]	@ 0x34
 8013fca:	2400      	movs	r4, #0
 8013fcc:	e721      	b.n	8013e12 <_dtoa_r+0x71a>
 8013fce:	9c08      	ldr	r4, [sp, #32]
 8013fd0:	9e00      	ldr	r6, [sp, #0]
 8013fd2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8013fd4:	e728      	b.n	8013e28 <_dtoa_r+0x730>
 8013fd6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8013fda:	e751      	b.n	8013e80 <_dtoa_r+0x788>
 8013fdc:	9a08      	ldr	r2, [sp, #32]
 8013fde:	9902      	ldr	r1, [sp, #8]
 8013fe0:	e750      	b.n	8013e84 <_dtoa_r+0x78c>
 8013fe2:	f8cd 8008 	str.w	r8, [sp, #8]
 8013fe6:	e751      	b.n	8013e8c <_dtoa_r+0x794>
 8013fe8:	2300      	movs	r3, #0
 8013fea:	e779      	b.n	8013ee0 <_dtoa_r+0x7e8>
 8013fec:	9b04      	ldr	r3, [sp, #16]
 8013fee:	e777      	b.n	8013ee0 <_dtoa_r+0x7e8>
 8013ff0:	2300      	movs	r3, #0
 8013ff2:	9308      	str	r3, [sp, #32]
 8013ff4:	e779      	b.n	8013eea <_dtoa_r+0x7f2>
 8013ff6:	d093      	beq.n	8013f20 <_dtoa_r+0x828>
 8013ff8:	9a00      	ldr	r2, [sp, #0]
 8013ffa:	331c      	adds	r3, #28
 8013ffc:	441a      	add	r2, r3
 8013ffe:	9200      	str	r2, [sp, #0]
 8014000:	9a06      	ldr	r2, [sp, #24]
 8014002:	441a      	add	r2, r3
 8014004:	441e      	add	r6, r3
 8014006:	9206      	str	r2, [sp, #24]
 8014008:	e78a      	b.n	8013f20 <_dtoa_r+0x828>
 801400a:	4603      	mov	r3, r0
 801400c:	e7f4      	b.n	8013ff8 <_dtoa_r+0x900>
 801400e:	9b03      	ldr	r3, [sp, #12]
 8014010:	2b00      	cmp	r3, #0
 8014012:	46b8      	mov	r8, r7
 8014014:	dc20      	bgt.n	8014058 <_dtoa_r+0x960>
 8014016:	469b      	mov	fp, r3
 8014018:	9b07      	ldr	r3, [sp, #28]
 801401a:	2b02      	cmp	r3, #2
 801401c:	dd1e      	ble.n	801405c <_dtoa_r+0x964>
 801401e:	f1bb 0f00 	cmp.w	fp, #0
 8014022:	f47f adb1 	bne.w	8013b88 <_dtoa_r+0x490>
 8014026:	4621      	mov	r1, r4
 8014028:	465b      	mov	r3, fp
 801402a:	2205      	movs	r2, #5
 801402c:	4648      	mov	r0, r9
 801402e:	f000 fa95 	bl	801455c <__multadd>
 8014032:	4601      	mov	r1, r0
 8014034:	4604      	mov	r4, r0
 8014036:	9802      	ldr	r0, [sp, #8]
 8014038:	f000 fca0 	bl	801497c <__mcmp>
 801403c:	2800      	cmp	r0, #0
 801403e:	f77f ada3 	ble.w	8013b88 <_dtoa_r+0x490>
 8014042:	4656      	mov	r6, sl
 8014044:	2331      	movs	r3, #49	@ 0x31
 8014046:	f806 3b01 	strb.w	r3, [r6], #1
 801404a:	f108 0801 	add.w	r8, r8, #1
 801404e:	e59f      	b.n	8013b90 <_dtoa_r+0x498>
 8014050:	9c03      	ldr	r4, [sp, #12]
 8014052:	46b8      	mov	r8, r7
 8014054:	4625      	mov	r5, r4
 8014056:	e7f4      	b.n	8014042 <_dtoa_r+0x94a>
 8014058:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801405c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801405e:	2b00      	cmp	r3, #0
 8014060:	f000 8101 	beq.w	8014266 <_dtoa_r+0xb6e>
 8014064:	2e00      	cmp	r6, #0
 8014066:	dd05      	ble.n	8014074 <_dtoa_r+0x97c>
 8014068:	4629      	mov	r1, r5
 801406a:	4632      	mov	r2, r6
 801406c:	4648      	mov	r0, r9
 801406e:	f000 fc19 	bl	80148a4 <__lshift>
 8014072:	4605      	mov	r5, r0
 8014074:	9b08      	ldr	r3, [sp, #32]
 8014076:	2b00      	cmp	r3, #0
 8014078:	d05c      	beq.n	8014134 <_dtoa_r+0xa3c>
 801407a:	6869      	ldr	r1, [r5, #4]
 801407c:	4648      	mov	r0, r9
 801407e:	f000 fa0b 	bl	8014498 <_Balloc>
 8014082:	4606      	mov	r6, r0
 8014084:	b928      	cbnz	r0, 8014092 <_dtoa_r+0x99a>
 8014086:	4b82      	ldr	r3, [pc, #520]	@ (8014290 <_dtoa_r+0xb98>)
 8014088:	4602      	mov	r2, r0
 801408a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801408e:	f7ff bb4a 	b.w	8013726 <_dtoa_r+0x2e>
 8014092:	692a      	ldr	r2, [r5, #16]
 8014094:	3202      	adds	r2, #2
 8014096:	0092      	lsls	r2, r2, #2
 8014098:	f105 010c 	add.w	r1, r5, #12
 801409c:	300c      	adds	r0, #12
 801409e:	f7ff fa92 	bl	80135c6 <memcpy>
 80140a2:	2201      	movs	r2, #1
 80140a4:	4631      	mov	r1, r6
 80140a6:	4648      	mov	r0, r9
 80140a8:	f000 fbfc 	bl	80148a4 <__lshift>
 80140ac:	f10a 0301 	add.w	r3, sl, #1
 80140b0:	9300      	str	r3, [sp, #0]
 80140b2:	eb0a 030b 	add.w	r3, sl, fp
 80140b6:	9308      	str	r3, [sp, #32]
 80140b8:	9b04      	ldr	r3, [sp, #16]
 80140ba:	f003 0301 	and.w	r3, r3, #1
 80140be:	462f      	mov	r7, r5
 80140c0:	9306      	str	r3, [sp, #24]
 80140c2:	4605      	mov	r5, r0
 80140c4:	9b00      	ldr	r3, [sp, #0]
 80140c6:	9802      	ldr	r0, [sp, #8]
 80140c8:	4621      	mov	r1, r4
 80140ca:	f103 3bff 	add.w	fp, r3, #4294967295
 80140ce:	f7ff fa88 	bl	80135e2 <quorem>
 80140d2:	4603      	mov	r3, r0
 80140d4:	3330      	adds	r3, #48	@ 0x30
 80140d6:	9003      	str	r0, [sp, #12]
 80140d8:	4639      	mov	r1, r7
 80140da:	9802      	ldr	r0, [sp, #8]
 80140dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80140de:	f000 fc4d 	bl	801497c <__mcmp>
 80140e2:	462a      	mov	r2, r5
 80140e4:	9004      	str	r0, [sp, #16]
 80140e6:	4621      	mov	r1, r4
 80140e8:	4648      	mov	r0, r9
 80140ea:	f000 fc63 	bl	80149b4 <__mdiff>
 80140ee:	68c2      	ldr	r2, [r0, #12]
 80140f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80140f2:	4606      	mov	r6, r0
 80140f4:	bb02      	cbnz	r2, 8014138 <_dtoa_r+0xa40>
 80140f6:	4601      	mov	r1, r0
 80140f8:	9802      	ldr	r0, [sp, #8]
 80140fa:	f000 fc3f 	bl	801497c <__mcmp>
 80140fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014100:	4602      	mov	r2, r0
 8014102:	4631      	mov	r1, r6
 8014104:	4648      	mov	r0, r9
 8014106:	920c      	str	r2, [sp, #48]	@ 0x30
 8014108:	9309      	str	r3, [sp, #36]	@ 0x24
 801410a:	f000 fa05 	bl	8014518 <_Bfree>
 801410e:	9b07      	ldr	r3, [sp, #28]
 8014110:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8014112:	9e00      	ldr	r6, [sp, #0]
 8014114:	ea42 0103 	orr.w	r1, r2, r3
 8014118:	9b06      	ldr	r3, [sp, #24]
 801411a:	4319      	orrs	r1, r3
 801411c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801411e:	d10d      	bne.n	801413c <_dtoa_r+0xa44>
 8014120:	2b39      	cmp	r3, #57	@ 0x39
 8014122:	d027      	beq.n	8014174 <_dtoa_r+0xa7c>
 8014124:	9a04      	ldr	r2, [sp, #16]
 8014126:	2a00      	cmp	r2, #0
 8014128:	dd01      	ble.n	801412e <_dtoa_r+0xa36>
 801412a:	9b03      	ldr	r3, [sp, #12]
 801412c:	3331      	adds	r3, #49	@ 0x31
 801412e:	f88b 3000 	strb.w	r3, [fp]
 8014132:	e52e      	b.n	8013b92 <_dtoa_r+0x49a>
 8014134:	4628      	mov	r0, r5
 8014136:	e7b9      	b.n	80140ac <_dtoa_r+0x9b4>
 8014138:	2201      	movs	r2, #1
 801413a:	e7e2      	b.n	8014102 <_dtoa_r+0xa0a>
 801413c:	9904      	ldr	r1, [sp, #16]
 801413e:	2900      	cmp	r1, #0
 8014140:	db04      	blt.n	801414c <_dtoa_r+0xa54>
 8014142:	9807      	ldr	r0, [sp, #28]
 8014144:	4301      	orrs	r1, r0
 8014146:	9806      	ldr	r0, [sp, #24]
 8014148:	4301      	orrs	r1, r0
 801414a:	d120      	bne.n	801418e <_dtoa_r+0xa96>
 801414c:	2a00      	cmp	r2, #0
 801414e:	ddee      	ble.n	801412e <_dtoa_r+0xa36>
 8014150:	9902      	ldr	r1, [sp, #8]
 8014152:	9300      	str	r3, [sp, #0]
 8014154:	2201      	movs	r2, #1
 8014156:	4648      	mov	r0, r9
 8014158:	f000 fba4 	bl	80148a4 <__lshift>
 801415c:	4621      	mov	r1, r4
 801415e:	9002      	str	r0, [sp, #8]
 8014160:	f000 fc0c 	bl	801497c <__mcmp>
 8014164:	2800      	cmp	r0, #0
 8014166:	9b00      	ldr	r3, [sp, #0]
 8014168:	dc02      	bgt.n	8014170 <_dtoa_r+0xa78>
 801416a:	d1e0      	bne.n	801412e <_dtoa_r+0xa36>
 801416c:	07da      	lsls	r2, r3, #31
 801416e:	d5de      	bpl.n	801412e <_dtoa_r+0xa36>
 8014170:	2b39      	cmp	r3, #57	@ 0x39
 8014172:	d1da      	bne.n	801412a <_dtoa_r+0xa32>
 8014174:	2339      	movs	r3, #57	@ 0x39
 8014176:	f88b 3000 	strb.w	r3, [fp]
 801417a:	4633      	mov	r3, r6
 801417c:	461e      	mov	r6, r3
 801417e:	3b01      	subs	r3, #1
 8014180:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8014184:	2a39      	cmp	r2, #57	@ 0x39
 8014186:	d04e      	beq.n	8014226 <_dtoa_r+0xb2e>
 8014188:	3201      	adds	r2, #1
 801418a:	701a      	strb	r2, [r3, #0]
 801418c:	e501      	b.n	8013b92 <_dtoa_r+0x49a>
 801418e:	2a00      	cmp	r2, #0
 8014190:	dd03      	ble.n	801419a <_dtoa_r+0xaa2>
 8014192:	2b39      	cmp	r3, #57	@ 0x39
 8014194:	d0ee      	beq.n	8014174 <_dtoa_r+0xa7c>
 8014196:	3301      	adds	r3, #1
 8014198:	e7c9      	b.n	801412e <_dtoa_r+0xa36>
 801419a:	9a00      	ldr	r2, [sp, #0]
 801419c:	9908      	ldr	r1, [sp, #32]
 801419e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80141a2:	428a      	cmp	r2, r1
 80141a4:	d028      	beq.n	80141f8 <_dtoa_r+0xb00>
 80141a6:	9902      	ldr	r1, [sp, #8]
 80141a8:	2300      	movs	r3, #0
 80141aa:	220a      	movs	r2, #10
 80141ac:	4648      	mov	r0, r9
 80141ae:	f000 f9d5 	bl	801455c <__multadd>
 80141b2:	42af      	cmp	r7, r5
 80141b4:	9002      	str	r0, [sp, #8]
 80141b6:	f04f 0300 	mov.w	r3, #0
 80141ba:	f04f 020a 	mov.w	r2, #10
 80141be:	4639      	mov	r1, r7
 80141c0:	4648      	mov	r0, r9
 80141c2:	d107      	bne.n	80141d4 <_dtoa_r+0xadc>
 80141c4:	f000 f9ca 	bl	801455c <__multadd>
 80141c8:	4607      	mov	r7, r0
 80141ca:	4605      	mov	r5, r0
 80141cc:	9b00      	ldr	r3, [sp, #0]
 80141ce:	3301      	adds	r3, #1
 80141d0:	9300      	str	r3, [sp, #0]
 80141d2:	e777      	b.n	80140c4 <_dtoa_r+0x9cc>
 80141d4:	f000 f9c2 	bl	801455c <__multadd>
 80141d8:	4629      	mov	r1, r5
 80141da:	4607      	mov	r7, r0
 80141dc:	2300      	movs	r3, #0
 80141de:	220a      	movs	r2, #10
 80141e0:	4648      	mov	r0, r9
 80141e2:	f000 f9bb 	bl	801455c <__multadd>
 80141e6:	4605      	mov	r5, r0
 80141e8:	e7f0      	b.n	80141cc <_dtoa_r+0xad4>
 80141ea:	f1bb 0f00 	cmp.w	fp, #0
 80141ee:	bfcc      	ite	gt
 80141f0:	465e      	movgt	r6, fp
 80141f2:	2601      	movle	r6, #1
 80141f4:	4456      	add	r6, sl
 80141f6:	2700      	movs	r7, #0
 80141f8:	9902      	ldr	r1, [sp, #8]
 80141fa:	9300      	str	r3, [sp, #0]
 80141fc:	2201      	movs	r2, #1
 80141fe:	4648      	mov	r0, r9
 8014200:	f000 fb50 	bl	80148a4 <__lshift>
 8014204:	4621      	mov	r1, r4
 8014206:	9002      	str	r0, [sp, #8]
 8014208:	f000 fbb8 	bl	801497c <__mcmp>
 801420c:	2800      	cmp	r0, #0
 801420e:	dcb4      	bgt.n	801417a <_dtoa_r+0xa82>
 8014210:	d102      	bne.n	8014218 <_dtoa_r+0xb20>
 8014212:	9b00      	ldr	r3, [sp, #0]
 8014214:	07db      	lsls	r3, r3, #31
 8014216:	d4b0      	bmi.n	801417a <_dtoa_r+0xa82>
 8014218:	4633      	mov	r3, r6
 801421a:	461e      	mov	r6, r3
 801421c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014220:	2a30      	cmp	r2, #48	@ 0x30
 8014222:	d0fa      	beq.n	801421a <_dtoa_r+0xb22>
 8014224:	e4b5      	b.n	8013b92 <_dtoa_r+0x49a>
 8014226:	459a      	cmp	sl, r3
 8014228:	d1a8      	bne.n	801417c <_dtoa_r+0xa84>
 801422a:	2331      	movs	r3, #49	@ 0x31
 801422c:	f108 0801 	add.w	r8, r8, #1
 8014230:	f88a 3000 	strb.w	r3, [sl]
 8014234:	e4ad      	b.n	8013b92 <_dtoa_r+0x49a>
 8014236:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014238:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8014294 <_dtoa_r+0xb9c>
 801423c:	b11b      	cbz	r3, 8014246 <_dtoa_r+0xb4e>
 801423e:	f10a 0308 	add.w	r3, sl, #8
 8014242:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8014244:	6013      	str	r3, [r2, #0]
 8014246:	4650      	mov	r0, sl
 8014248:	b017      	add	sp, #92	@ 0x5c
 801424a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801424e:	9b07      	ldr	r3, [sp, #28]
 8014250:	2b01      	cmp	r3, #1
 8014252:	f77f ae2e 	ble.w	8013eb2 <_dtoa_r+0x7ba>
 8014256:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014258:	9308      	str	r3, [sp, #32]
 801425a:	2001      	movs	r0, #1
 801425c:	e64d      	b.n	8013efa <_dtoa_r+0x802>
 801425e:	f1bb 0f00 	cmp.w	fp, #0
 8014262:	f77f aed9 	ble.w	8014018 <_dtoa_r+0x920>
 8014266:	4656      	mov	r6, sl
 8014268:	9802      	ldr	r0, [sp, #8]
 801426a:	4621      	mov	r1, r4
 801426c:	f7ff f9b9 	bl	80135e2 <quorem>
 8014270:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8014274:	f806 3b01 	strb.w	r3, [r6], #1
 8014278:	eba6 020a 	sub.w	r2, r6, sl
 801427c:	4593      	cmp	fp, r2
 801427e:	ddb4      	ble.n	80141ea <_dtoa_r+0xaf2>
 8014280:	9902      	ldr	r1, [sp, #8]
 8014282:	2300      	movs	r3, #0
 8014284:	220a      	movs	r2, #10
 8014286:	4648      	mov	r0, r9
 8014288:	f000 f968 	bl	801455c <__multadd>
 801428c:	9002      	str	r0, [sp, #8]
 801428e:	e7eb      	b.n	8014268 <_dtoa_r+0xb70>
 8014290:	080155d0 	.word	0x080155d0
 8014294:	08015554 	.word	0x08015554

08014298 <_free_r>:
 8014298:	b538      	push	{r3, r4, r5, lr}
 801429a:	4605      	mov	r5, r0
 801429c:	2900      	cmp	r1, #0
 801429e:	d041      	beq.n	8014324 <_free_r+0x8c>
 80142a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80142a4:	1f0c      	subs	r4, r1, #4
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	bfb8      	it	lt
 80142aa:	18e4      	addlt	r4, r4, r3
 80142ac:	f000 f8e8 	bl	8014480 <__malloc_lock>
 80142b0:	4a1d      	ldr	r2, [pc, #116]	@ (8014328 <_free_r+0x90>)
 80142b2:	6813      	ldr	r3, [r2, #0]
 80142b4:	b933      	cbnz	r3, 80142c4 <_free_r+0x2c>
 80142b6:	6063      	str	r3, [r4, #4]
 80142b8:	6014      	str	r4, [r2, #0]
 80142ba:	4628      	mov	r0, r5
 80142bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80142c0:	f000 b8e4 	b.w	801448c <__malloc_unlock>
 80142c4:	42a3      	cmp	r3, r4
 80142c6:	d908      	bls.n	80142da <_free_r+0x42>
 80142c8:	6820      	ldr	r0, [r4, #0]
 80142ca:	1821      	adds	r1, r4, r0
 80142cc:	428b      	cmp	r3, r1
 80142ce:	bf01      	itttt	eq
 80142d0:	6819      	ldreq	r1, [r3, #0]
 80142d2:	685b      	ldreq	r3, [r3, #4]
 80142d4:	1809      	addeq	r1, r1, r0
 80142d6:	6021      	streq	r1, [r4, #0]
 80142d8:	e7ed      	b.n	80142b6 <_free_r+0x1e>
 80142da:	461a      	mov	r2, r3
 80142dc:	685b      	ldr	r3, [r3, #4]
 80142de:	b10b      	cbz	r3, 80142e4 <_free_r+0x4c>
 80142e0:	42a3      	cmp	r3, r4
 80142e2:	d9fa      	bls.n	80142da <_free_r+0x42>
 80142e4:	6811      	ldr	r1, [r2, #0]
 80142e6:	1850      	adds	r0, r2, r1
 80142e8:	42a0      	cmp	r0, r4
 80142ea:	d10b      	bne.n	8014304 <_free_r+0x6c>
 80142ec:	6820      	ldr	r0, [r4, #0]
 80142ee:	4401      	add	r1, r0
 80142f0:	1850      	adds	r0, r2, r1
 80142f2:	4283      	cmp	r3, r0
 80142f4:	6011      	str	r1, [r2, #0]
 80142f6:	d1e0      	bne.n	80142ba <_free_r+0x22>
 80142f8:	6818      	ldr	r0, [r3, #0]
 80142fa:	685b      	ldr	r3, [r3, #4]
 80142fc:	6053      	str	r3, [r2, #4]
 80142fe:	4408      	add	r0, r1
 8014300:	6010      	str	r0, [r2, #0]
 8014302:	e7da      	b.n	80142ba <_free_r+0x22>
 8014304:	d902      	bls.n	801430c <_free_r+0x74>
 8014306:	230c      	movs	r3, #12
 8014308:	602b      	str	r3, [r5, #0]
 801430a:	e7d6      	b.n	80142ba <_free_r+0x22>
 801430c:	6820      	ldr	r0, [r4, #0]
 801430e:	1821      	adds	r1, r4, r0
 8014310:	428b      	cmp	r3, r1
 8014312:	bf04      	itt	eq
 8014314:	6819      	ldreq	r1, [r3, #0]
 8014316:	685b      	ldreq	r3, [r3, #4]
 8014318:	6063      	str	r3, [r4, #4]
 801431a:	bf04      	itt	eq
 801431c:	1809      	addeq	r1, r1, r0
 801431e:	6021      	streq	r1, [r4, #0]
 8014320:	6054      	str	r4, [r2, #4]
 8014322:	e7ca      	b.n	80142ba <_free_r+0x22>
 8014324:	bd38      	pop	{r3, r4, r5, pc}
 8014326:	bf00      	nop
 8014328:	20002318 	.word	0x20002318

0801432c <malloc>:
 801432c:	4b02      	ldr	r3, [pc, #8]	@ (8014338 <malloc+0xc>)
 801432e:	4601      	mov	r1, r0
 8014330:	6818      	ldr	r0, [r3, #0]
 8014332:	f000 b825 	b.w	8014380 <_malloc_r>
 8014336:	bf00      	nop
 8014338:	20000138 	.word	0x20000138

0801433c <sbrk_aligned>:
 801433c:	b570      	push	{r4, r5, r6, lr}
 801433e:	4e0f      	ldr	r6, [pc, #60]	@ (801437c <sbrk_aligned+0x40>)
 8014340:	460c      	mov	r4, r1
 8014342:	6831      	ldr	r1, [r6, #0]
 8014344:	4605      	mov	r5, r0
 8014346:	b911      	cbnz	r1, 801434e <sbrk_aligned+0x12>
 8014348:	f000 fed6 	bl	80150f8 <_sbrk_r>
 801434c:	6030      	str	r0, [r6, #0]
 801434e:	4621      	mov	r1, r4
 8014350:	4628      	mov	r0, r5
 8014352:	f000 fed1 	bl	80150f8 <_sbrk_r>
 8014356:	1c43      	adds	r3, r0, #1
 8014358:	d103      	bne.n	8014362 <sbrk_aligned+0x26>
 801435a:	f04f 34ff 	mov.w	r4, #4294967295
 801435e:	4620      	mov	r0, r4
 8014360:	bd70      	pop	{r4, r5, r6, pc}
 8014362:	1cc4      	adds	r4, r0, #3
 8014364:	f024 0403 	bic.w	r4, r4, #3
 8014368:	42a0      	cmp	r0, r4
 801436a:	d0f8      	beq.n	801435e <sbrk_aligned+0x22>
 801436c:	1a21      	subs	r1, r4, r0
 801436e:	4628      	mov	r0, r5
 8014370:	f000 fec2 	bl	80150f8 <_sbrk_r>
 8014374:	3001      	adds	r0, #1
 8014376:	d1f2      	bne.n	801435e <sbrk_aligned+0x22>
 8014378:	e7ef      	b.n	801435a <sbrk_aligned+0x1e>
 801437a:	bf00      	nop
 801437c:	20002314 	.word	0x20002314

08014380 <_malloc_r>:
 8014380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014384:	1ccd      	adds	r5, r1, #3
 8014386:	f025 0503 	bic.w	r5, r5, #3
 801438a:	3508      	adds	r5, #8
 801438c:	2d0c      	cmp	r5, #12
 801438e:	bf38      	it	cc
 8014390:	250c      	movcc	r5, #12
 8014392:	2d00      	cmp	r5, #0
 8014394:	4606      	mov	r6, r0
 8014396:	db01      	blt.n	801439c <_malloc_r+0x1c>
 8014398:	42a9      	cmp	r1, r5
 801439a:	d904      	bls.n	80143a6 <_malloc_r+0x26>
 801439c:	230c      	movs	r3, #12
 801439e:	6033      	str	r3, [r6, #0]
 80143a0:	2000      	movs	r0, #0
 80143a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80143a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801447c <_malloc_r+0xfc>
 80143aa:	f000 f869 	bl	8014480 <__malloc_lock>
 80143ae:	f8d8 3000 	ldr.w	r3, [r8]
 80143b2:	461c      	mov	r4, r3
 80143b4:	bb44      	cbnz	r4, 8014408 <_malloc_r+0x88>
 80143b6:	4629      	mov	r1, r5
 80143b8:	4630      	mov	r0, r6
 80143ba:	f7ff ffbf 	bl	801433c <sbrk_aligned>
 80143be:	1c43      	adds	r3, r0, #1
 80143c0:	4604      	mov	r4, r0
 80143c2:	d158      	bne.n	8014476 <_malloc_r+0xf6>
 80143c4:	f8d8 4000 	ldr.w	r4, [r8]
 80143c8:	4627      	mov	r7, r4
 80143ca:	2f00      	cmp	r7, #0
 80143cc:	d143      	bne.n	8014456 <_malloc_r+0xd6>
 80143ce:	2c00      	cmp	r4, #0
 80143d0:	d04b      	beq.n	801446a <_malloc_r+0xea>
 80143d2:	6823      	ldr	r3, [r4, #0]
 80143d4:	4639      	mov	r1, r7
 80143d6:	4630      	mov	r0, r6
 80143d8:	eb04 0903 	add.w	r9, r4, r3
 80143dc:	f000 fe8c 	bl	80150f8 <_sbrk_r>
 80143e0:	4581      	cmp	r9, r0
 80143e2:	d142      	bne.n	801446a <_malloc_r+0xea>
 80143e4:	6821      	ldr	r1, [r4, #0]
 80143e6:	1a6d      	subs	r5, r5, r1
 80143e8:	4629      	mov	r1, r5
 80143ea:	4630      	mov	r0, r6
 80143ec:	f7ff ffa6 	bl	801433c <sbrk_aligned>
 80143f0:	3001      	adds	r0, #1
 80143f2:	d03a      	beq.n	801446a <_malloc_r+0xea>
 80143f4:	6823      	ldr	r3, [r4, #0]
 80143f6:	442b      	add	r3, r5
 80143f8:	6023      	str	r3, [r4, #0]
 80143fa:	f8d8 3000 	ldr.w	r3, [r8]
 80143fe:	685a      	ldr	r2, [r3, #4]
 8014400:	bb62      	cbnz	r2, 801445c <_malloc_r+0xdc>
 8014402:	f8c8 7000 	str.w	r7, [r8]
 8014406:	e00f      	b.n	8014428 <_malloc_r+0xa8>
 8014408:	6822      	ldr	r2, [r4, #0]
 801440a:	1b52      	subs	r2, r2, r5
 801440c:	d420      	bmi.n	8014450 <_malloc_r+0xd0>
 801440e:	2a0b      	cmp	r2, #11
 8014410:	d917      	bls.n	8014442 <_malloc_r+0xc2>
 8014412:	1961      	adds	r1, r4, r5
 8014414:	42a3      	cmp	r3, r4
 8014416:	6025      	str	r5, [r4, #0]
 8014418:	bf18      	it	ne
 801441a:	6059      	strne	r1, [r3, #4]
 801441c:	6863      	ldr	r3, [r4, #4]
 801441e:	bf08      	it	eq
 8014420:	f8c8 1000 	streq.w	r1, [r8]
 8014424:	5162      	str	r2, [r4, r5]
 8014426:	604b      	str	r3, [r1, #4]
 8014428:	4630      	mov	r0, r6
 801442a:	f000 f82f 	bl	801448c <__malloc_unlock>
 801442e:	f104 000b 	add.w	r0, r4, #11
 8014432:	1d23      	adds	r3, r4, #4
 8014434:	f020 0007 	bic.w	r0, r0, #7
 8014438:	1ac2      	subs	r2, r0, r3
 801443a:	bf1c      	itt	ne
 801443c:	1a1b      	subne	r3, r3, r0
 801443e:	50a3      	strne	r3, [r4, r2]
 8014440:	e7af      	b.n	80143a2 <_malloc_r+0x22>
 8014442:	6862      	ldr	r2, [r4, #4]
 8014444:	42a3      	cmp	r3, r4
 8014446:	bf0c      	ite	eq
 8014448:	f8c8 2000 	streq.w	r2, [r8]
 801444c:	605a      	strne	r2, [r3, #4]
 801444e:	e7eb      	b.n	8014428 <_malloc_r+0xa8>
 8014450:	4623      	mov	r3, r4
 8014452:	6864      	ldr	r4, [r4, #4]
 8014454:	e7ae      	b.n	80143b4 <_malloc_r+0x34>
 8014456:	463c      	mov	r4, r7
 8014458:	687f      	ldr	r7, [r7, #4]
 801445a:	e7b6      	b.n	80143ca <_malloc_r+0x4a>
 801445c:	461a      	mov	r2, r3
 801445e:	685b      	ldr	r3, [r3, #4]
 8014460:	42a3      	cmp	r3, r4
 8014462:	d1fb      	bne.n	801445c <_malloc_r+0xdc>
 8014464:	2300      	movs	r3, #0
 8014466:	6053      	str	r3, [r2, #4]
 8014468:	e7de      	b.n	8014428 <_malloc_r+0xa8>
 801446a:	230c      	movs	r3, #12
 801446c:	6033      	str	r3, [r6, #0]
 801446e:	4630      	mov	r0, r6
 8014470:	f000 f80c 	bl	801448c <__malloc_unlock>
 8014474:	e794      	b.n	80143a0 <_malloc_r+0x20>
 8014476:	6005      	str	r5, [r0, #0]
 8014478:	e7d6      	b.n	8014428 <_malloc_r+0xa8>
 801447a:	bf00      	nop
 801447c:	20002318 	.word	0x20002318

08014480 <__malloc_lock>:
 8014480:	4801      	ldr	r0, [pc, #4]	@ (8014488 <__malloc_lock+0x8>)
 8014482:	f7ff b89e 	b.w	80135c2 <__retarget_lock_acquire_recursive>
 8014486:	bf00      	nop
 8014488:	20002310 	.word	0x20002310

0801448c <__malloc_unlock>:
 801448c:	4801      	ldr	r0, [pc, #4]	@ (8014494 <__malloc_unlock+0x8>)
 801448e:	f7ff b899 	b.w	80135c4 <__retarget_lock_release_recursive>
 8014492:	bf00      	nop
 8014494:	20002310 	.word	0x20002310

08014498 <_Balloc>:
 8014498:	b570      	push	{r4, r5, r6, lr}
 801449a:	69c6      	ldr	r6, [r0, #28]
 801449c:	4604      	mov	r4, r0
 801449e:	460d      	mov	r5, r1
 80144a0:	b976      	cbnz	r6, 80144c0 <_Balloc+0x28>
 80144a2:	2010      	movs	r0, #16
 80144a4:	f7ff ff42 	bl	801432c <malloc>
 80144a8:	4602      	mov	r2, r0
 80144aa:	61e0      	str	r0, [r4, #28]
 80144ac:	b920      	cbnz	r0, 80144b8 <_Balloc+0x20>
 80144ae:	4b18      	ldr	r3, [pc, #96]	@ (8014510 <_Balloc+0x78>)
 80144b0:	4818      	ldr	r0, [pc, #96]	@ (8014514 <_Balloc+0x7c>)
 80144b2:	216b      	movs	r1, #107	@ 0x6b
 80144b4:	f000 fe30 	bl	8015118 <__assert_func>
 80144b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80144bc:	6006      	str	r6, [r0, #0]
 80144be:	60c6      	str	r6, [r0, #12]
 80144c0:	69e6      	ldr	r6, [r4, #28]
 80144c2:	68f3      	ldr	r3, [r6, #12]
 80144c4:	b183      	cbz	r3, 80144e8 <_Balloc+0x50>
 80144c6:	69e3      	ldr	r3, [r4, #28]
 80144c8:	68db      	ldr	r3, [r3, #12]
 80144ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80144ce:	b9b8      	cbnz	r0, 8014500 <_Balloc+0x68>
 80144d0:	2101      	movs	r1, #1
 80144d2:	fa01 f605 	lsl.w	r6, r1, r5
 80144d6:	1d72      	adds	r2, r6, #5
 80144d8:	0092      	lsls	r2, r2, #2
 80144da:	4620      	mov	r0, r4
 80144dc:	f000 fe3a 	bl	8015154 <_calloc_r>
 80144e0:	b160      	cbz	r0, 80144fc <_Balloc+0x64>
 80144e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80144e6:	e00e      	b.n	8014506 <_Balloc+0x6e>
 80144e8:	2221      	movs	r2, #33	@ 0x21
 80144ea:	2104      	movs	r1, #4
 80144ec:	4620      	mov	r0, r4
 80144ee:	f000 fe31 	bl	8015154 <_calloc_r>
 80144f2:	69e3      	ldr	r3, [r4, #28]
 80144f4:	60f0      	str	r0, [r6, #12]
 80144f6:	68db      	ldr	r3, [r3, #12]
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d1e4      	bne.n	80144c6 <_Balloc+0x2e>
 80144fc:	2000      	movs	r0, #0
 80144fe:	bd70      	pop	{r4, r5, r6, pc}
 8014500:	6802      	ldr	r2, [r0, #0]
 8014502:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014506:	2300      	movs	r3, #0
 8014508:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801450c:	e7f7      	b.n	80144fe <_Balloc+0x66>
 801450e:	bf00      	nop
 8014510:	08015561 	.word	0x08015561
 8014514:	080155e1 	.word	0x080155e1

08014518 <_Bfree>:
 8014518:	b570      	push	{r4, r5, r6, lr}
 801451a:	69c6      	ldr	r6, [r0, #28]
 801451c:	4605      	mov	r5, r0
 801451e:	460c      	mov	r4, r1
 8014520:	b976      	cbnz	r6, 8014540 <_Bfree+0x28>
 8014522:	2010      	movs	r0, #16
 8014524:	f7ff ff02 	bl	801432c <malloc>
 8014528:	4602      	mov	r2, r0
 801452a:	61e8      	str	r0, [r5, #28]
 801452c:	b920      	cbnz	r0, 8014538 <_Bfree+0x20>
 801452e:	4b09      	ldr	r3, [pc, #36]	@ (8014554 <_Bfree+0x3c>)
 8014530:	4809      	ldr	r0, [pc, #36]	@ (8014558 <_Bfree+0x40>)
 8014532:	218f      	movs	r1, #143	@ 0x8f
 8014534:	f000 fdf0 	bl	8015118 <__assert_func>
 8014538:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801453c:	6006      	str	r6, [r0, #0]
 801453e:	60c6      	str	r6, [r0, #12]
 8014540:	b13c      	cbz	r4, 8014552 <_Bfree+0x3a>
 8014542:	69eb      	ldr	r3, [r5, #28]
 8014544:	6862      	ldr	r2, [r4, #4]
 8014546:	68db      	ldr	r3, [r3, #12]
 8014548:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801454c:	6021      	str	r1, [r4, #0]
 801454e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014552:	bd70      	pop	{r4, r5, r6, pc}
 8014554:	08015561 	.word	0x08015561
 8014558:	080155e1 	.word	0x080155e1

0801455c <__multadd>:
 801455c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014560:	690d      	ldr	r5, [r1, #16]
 8014562:	4607      	mov	r7, r0
 8014564:	460c      	mov	r4, r1
 8014566:	461e      	mov	r6, r3
 8014568:	f101 0c14 	add.w	ip, r1, #20
 801456c:	2000      	movs	r0, #0
 801456e:	f8dc 3000 	ldr.w	r3, [ip]
 8014572:	b299      	uxth	r1, r3
 8014574:	fb02 6101 	mla	r1, r2, r1, r6
 8014578:	0c1e      	lsrs	r6, r3, #16
 801457a:	0c0b      	lsrs	r3, r1, #16
 801457c:	fb02 3306 	mla	r3, r2, r6, r3
 8014580:	b289      	uxth	r1, r1
 8014582:	3001      	adds	r0, #1
 8014584:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014588:	4285      	cmp	r5, r0
 801458a:	f84c 1b04 	str.w	r1, [ip], #4
 801458e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014592:	dcec      	bgt.n	801456e <__multadd+0x12>
 8014594:	b30e      	cbz	r6, 80145da <__multadd+0x7e>
 8014596:	68a3      	ldr	r3, [r4, #8]
 8014598:	42ab      	cmp	r3, r5
 801459a:	dc19      	bgt.n	80145d0 <__multadd+0x74>
 801459c:	6861      	ldr	r1, [r4, #4]
 801459e:	4638      	mov	r0, r7
 80145a0:	3101      	adds	r1, #1
 80145a2:	f7ff ff79 	bl	8014498 <_Balloc>
 80145a6:	4680      	mov	r8, r0
 80145a8:	b928      	cbnz	r0, 80145b6 <__multadd+0x5a>
 80145aa:	4602      	mov	r2, r0
 80145ac:	4b0c      	ldr	r3, [pc, #48]	@ (80145e0 <__multadd+0x84>)
 80145ae:	480d      	ldr	r0, [pc, #52]	@ (80145e4 <__multadd+0x88>)
 80145b0:	21ba      	movs	r1, #186	@ 0xba
 80145b2:	f000 fdb1 	bl	8015118 <__assert_func>
 80145b6:	6922      	ldr	r2, [r4, #16]
 80145b8:	3202      	adds	r2, #2
 80145ba:	f104 010c 	add.w	r1, r4, #12
 80145be:	0092      	lsls	r2, r2, #2
 80145c0:	300c      	adds	r0, #12
 80145c2:	f7ff f800 	bl	80135c6 <memcpy>
 80145c6:	4621      	mov	r1, r4
 80145c8:	4638      	mov	r0, r7
 80145ca:	f7ff ffa5 	bl	8014518 <_Bfree>
 80145ce:	4644      	mov	r4, r8
 80145d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80145d4:	3501      	adds	r5, #1
 80145d6:	615e      	str	r6, [r3, #20]
 80145d8:	6125      	str	r5, [r4, #16]
 80145da:	4620      	mov	r0, r4
 80145dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145e0:	080155d0 	.word	0x080155d0
 80145e4:	080155e1 	.word	0x080155e1

080145e8 <__hi0bits>:
 80145e8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80145ec:	4603      	mov	r3, r0
 80145ee:	bf36      	itet	cc
 80145f0:	0403      	lslcc	r3, r0, #16
 80145f2:	2000      	movcs	r0, #0
 80145f4:	2010      	movcc	r0, #16
 80145f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80145fa:	bf3c      	itt	cc
 80145fc:	021b      	lslcc	r3, r3, #8
 80145fe:	3008      	addcc	r0, #8
 8014600:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014604:	bf3c      	itt	cc
 8014606:	011b      	lslcc	r3, r3, #4
 8014608:	3004      	addcc	r0, #4
 801460a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801460e:	bf3c      	itt	cc
 8014610:	009b      	lslcc	r3, r3, #2
 8014612:	3002      	addcc	r0, #2
 8014614:	2b00      	cmp	r3, #0
 8014616:	db05      	blt.n	8014624 <__hi0bits+0x3c>
 8014618:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801461c:	f100 0001 	add.w	r0, r0, #1
 8014620:	bf08      	it	eq
 8014622:	2020      	moveq	r0, #32
 8014624:	4770      	bx	lr

08014626 <__lo0bits>:
 8014626:	6803      	ldr	r3, [r0, #0]
 8014628:	4602      	mov	r2, r0
 801462a:	f013 0007 	ands.w	r0, r3, #7
 801462e:	d00b      	beq.n	8014648 <__lo0bits+0x22>
 8014630:	07d9      	lsls	r1, r3, #31
 8014632:	d421      	bmi.n	8014678 <__lo0bits+0x52>
 8014634:	0798      	lsls	r0, r3, #30
 8014636:	bf49      	itett	mi
 8014638:	085b      	lsrmi	r3, r3, #1
 801463a:	089b      	lsrpl	r3, r3, #2
 801463c:	2001      	movmi	r0, #1
 801463e:	6013      	strmi	r3, [r2, #0]
 8014640:	bf5c      	itt	pl
 8014642:	6013      	strpl	r3, [r2, #0]
 8014644:	2002      	movpl	r0, #2
 8014646:	4770      	bx	lr
 8014648:	b299      	uxth	r1, r3
 801464a:	b909      	cbnz	r1, 8014650 <__lo0bits+0x2a>
 801464c:	0c1b      	lsrs	r3, r3, #16
 801464e:	2010      	movs	r0, #16
 8014650:	b2d9      	uxtb	r1, r3
 8014652:	b909      	cbnz	r1, 8014658 <__lo0bits+0x32>
 8014654:	3008      	adds	r0, #8
 8014656:	0a1b      	lsrs	r3, r3, #8
 8014658:	0719      	lsls	r1, r3, #28
 801465a:	bf04      	itt	eq
 801465c:	091b      	lsreq	r3, r3, #4
 801465e:	3004      	addeq	r0, #4
 8014660:	0799      	lsls	r1, r3, #30
 8014662:	bf04      	itt	eq
 8014664:	089b      	lsreq	r3, r3, #2
 8014666:	3002      	addeq	r0, #2
 8014668:	07d9      	lsls	r1, r3, #31
 801466a:	d403      	bmi.n	8014674 <__lo0bits+0x4e>
 801466c:	085b      	lsrs	r3, r3, #1
 801466e:	f100 0001 	add.w	r0, r0, #1
 8014672:	d003      	beq.n	801467c <__lo0bits+0x56>
 8014674:	6013      	str	r3, [r2, #0]
 8014676:	4770      	bx	lr
 8014678:	2000      	movs	r0, #0
 801467a:	4770      	bx	lr
 801467c:	2020      	movs	r0, #32
 801467e:	4770      	bx	lr

08014680 <__i2b>:
 8014680:	b510      	push	{r4, lr}
 8014682:	460c      	mov	r4, r1
 8014684:	2101      	movs	r1, #1
 8014686:	f7ff ff07 	bl	8014498 <_Balloc>
 801468a:	4602      	mov	r2, r0
 801468c:	b928      	cbnz	r0, 801469a <__i2b+0x1a>
 801468e:	4b05      	ldr	r3, [pc, #20]	@ (80146a4 <__i2b+0x24>)
 8014690:	4805      	ldr	r0, [pc, #20]	@ (80146a8 <__i2b+0x28>)
 8014692:	f240 1145 	movw	r1, #325	@ 0x145
 8014696:	f000 fd3f 	bl	8015118 <__assert_func>
 801469a:	2301      	movs	r3, #1
 801469c:	6144      	str	r4, [r0, #20]
 801469e:	6103      	str	r3, [r0, #16]
 80146a0:	bd10      	pop	{r4, pc}
 80146a2:	bf00      	nop
 80146a4:	080155d0 	.word	0x080155d0
 80146a8:	080155e1 	.word	0x080155e1

080146ac <__multiply>:
 80146ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146b0:	4617      	mov	r7, r2
 80146b2:	690a      	ldr	r2, [r1, #16]
 80146b4:	693b      	ldr	r3, [r7, #16]
 80146b6:	429a      	cmp	r2, r3
 80146b8:	bfa8      	it	ge
 80146ba:	463b      	movge	r3, r7
 80146bc:	4689      	mov	r9, r1
 80146be:	bfa4      	itt	ge
 80146c0:	460f      	movge	r7, r1
 80146c2:	4699      	movge	r9, r3
 80146c4:	693d      	ldr	r5, [r7, #16]
 80146c6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80146ca:	68bb      	ldr	r3, [r7, #8]
 80146cc:	6879      	ldr	r1, [r7, #4]
 80146ce:	eb05 060a 	add.w	r6, r5, sl
 80146d2:	42b3      	cmp	r3, r6
 80146d4:	b085      	sub	sp, #20
 80146d6:	bfb8      	it	lt
 80146d8:	3101      	addlt	r1, #1
 80146da:	f7ff fedd 	bl	8014498 <_Balloc>
 80146de:	b930      	cbnz	r0, 80146ee <__multiply+0x42>
 80146e0:	4602      	mov	r2, r0
 80146e2:	4b41      	ldr	r3, [pc, #260]	@ (80147e8 <__multiply+0x13c>)
 80146e4:	4841      	ldr	r0, [pc, #260]	@ (80147ec <__multiply+0x140>)
 80146e6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80146ea:	f000 fd15 	bl	8015118 <__assert_func>
 80146ee:	f100 0414 	add.w	r4, r0, #20
 80146f2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80146f6:	4623      	mov	r3, r4
 80146f8:	2200      	movs	r2, #0
 80146fa:	4573      	cmp	r3, lr
 80146fc:	d320      	bcc.n	8014740 <__multiply+0x94>
 80146fe:	f107 0814 	add.w	r8, r7, #20
 8014702:	f109 0114 	add.w	r1, r9, #20
 8014706:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801470a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801470e:	9302      	str	r3, [sp, #8]
 8014710:	1beb      	subs	r3, r5, r7
 8014712:	3b15      	subs	r3, #21
 8014714:	f023 0303 	bic.w	r3, r3, #3
 8014718:	3304      	adds	r3, #4
 801471a:	3715      	adds	r7, #21
 801471c:	42bd      	cmp	r5, r7
 801471e:	bf38      	it	cc
 8014720:	2304      	movcc	r3, #4
 8014722:	9301      	str	r3, [sp, #4]
 8014724:	9b02      	ldr	r3, [sp, #8]
 8014726:	9103      	str	r1, [sp, #12]
 8014728:	428b      	cmp	r3, r1
 801472a:	d80c      	bhi.n	8014746 <__multiply+0x9a>
 801472c:	2e00      	cmp	r6, #0
 801472e:	dd03      	ble.n	8014738 <__multiply+0x8c>
 8014730:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8014734:	2b00      	cmp	r3, #0
 8014736:	d055      	beq.n	80147e4 <__multiply+0x138>
 8014738:	6106      	str	r6, [r0, #16]
 801473a:	b005      	add	sp, #20
 801473c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014740:	f843 2b04 	str.w	r2, [r3], #4
 8014744:	e7d9      	b.n	80146fa <__multiply+0x4e>
 8014746:	f8b1 a000 	ldrh.w	sl, [r1]
 801474a:	f1ba 0f00 	cmp.w	sl, #0
 801474e:	d01f      	beq.n	8014790 <__multiply+0xe4>
 8014750:	46c4      	mov	ip, r8
 8014752:	46a1      	mov	r9, r4
 8014754:	2700      	movs	r7, #0
 8014756:	f85c 2b04 	ldr.w	r2, [ip], #4
 801475a:	f8d9 3000 	ldr.w	r3, [r9]
 801475e:	fa1f fb82 	uxth.w	fp, r2
 8014762:	b29b      	uxth	r3, r3
 8014764:	fb0a 330b 	mla	r3, sl, fp, r3
 8014768:	443b      	add	r3, r7
 801476a:	f8d9 7000 	ldr.w	r7, [r9]
 801476e:	0c12      	lsrs	r2, r2, #16
 8014770:	0c3f      	lsrs	r7, r7, #16
 8014772:	fb0a 7202 	mla	r2, sl, r2, r7
 8014776:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801477a:	b29b      	uxth	r3, r3
 801477c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014780:	4565      	cmp	r5, ip
 8014782:	f849 3b04 	str.w	r3, [r9], #4
 8014786:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801478a:	d8e4      	bhi.n	8014756 <__multiply+0xaa>
 801478c:	9b01      	ldr	r3, [sp, #4]
 801478e:	50e7      	str	r7, [r4, r3]
 8014790:	9b03      	ldr	r3, [sp, #12]
 8014792:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8014796:	3104      	adds	r1, #4
 8014798:	f1b9 0f00 	cmp.w	r9, #0
 801479c:	d020      	beq.n	80147e0 <__multiply+0x134>
 801479e:	6823      	ldr	r3, [r4, #0]
 80147a0:	4647      	mov	r7, r8
 80147a2:	46a4      	mov	ip, r4
 80147a4:	f04f 0a00 	mov.w	sl, #0
 80147a8:	f8b7 b000 	ldrh.w	fp, [r7]
 80147ac:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80147b0:	fb09 220b 	mla	r2, r9, fp, r2
 80147b4:	4452      	add	r2, sl
 80147b6:	b29b      	uxth	r3, r3
 80147b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80147bc:	f84c 3b04 	str.w	r3, [ip], #4
 80147c0:	f857 3b04 	ldr.w	r3, [r7], #4
 80147c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80147c8:	f8bc 3000 	ldrh.w	r3, [ip]
 80147cc:	fb09 330a 	mla	r3, r9, sl, r3
 80147d0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80147d4:	42bd      	cmp	r5, r7
 80147d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80147da:	d8e5      	bhi.n	80147a8 <__multiply+0xfc>
 80147dc:	9a01      	ldr	r2, [sp, #4]
 80147de:	50a3      	str	r3, [r4, r2]
 80147e0:	3404      	adds	r4, #4
 80147e2:	e79f      	b.n	8014724 <__multiply+0x78>
 80147e4:	3e01      	subs	r6, #1
 80147e6:	e7a1      	b.n	801472c <__multiply+0x80>
 80147e8:	080155d0 	.word	0x080155d0
 80147ec:	080155e1 	.word	0x080155e1

080147f0 <__pow5mult>:
 80147f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80147f4:	4615      	mov	r5, r2
 80147f6:	f012 0203 	ands.w	r2, r2, #3
 80147fa:	4607      	mov	r7, r0
 80147fc:	460e      	mov	r6, r1
 80147fe:	d007      	beq.n	8014810 <__pow5mult+0x20>
 8014800:	4c25      	ldr	r4, [pc, #148]	@ (8014898 <__pow5mult+0xa8>)
 8014802:	3a01      	subs	r2, #1
 8014804:	2300      	movs	r3, #0
 8014806:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801480a:	f7ff fea7 	bl	801455c <__multadd>
 801480e:	4606      	mov	r6, r0
 8014810:	10ad      	asrs	r5, r5, #2
 8014812:	d03d      	beq.n	8014890 <__pow5mult+0xa0>
 8014814:	69fc      	ldr	r4, [r7, #28]
 8014816:	b97c      	cbnz	r4, 8014838 <__pow5mult+0x48>
 8014818:	2010      	movs	r0, #16
 801481a:	f7ff fd87 	bl	801432c <malloc>
 801481e:	4602      	mov	r2, r0
 8014820:	61f8      	str	r0, [r7, #28]
 8014822:	b928      	cbnz	r0, 8014830 <__pow5mult+0x40>
 8014824:	4b1d      	ldr	r3, [pc, #116]	@ (801489c <__pow5mult+0xac>)
 8014826:	481e      	ldr	r0, [pc, #120]	@ (80148a0 <__pow5mult+0xb0>)
 8014828:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801482c:	f000 fc74 	bl	8015118 <__assert_func>
 8014830:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014834:	6004      	str	r4, [r0, #0]
 8014836:	60c4      	str	r4, [r0, #12]
 8014838:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801483c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014840:	b94c      	cbnz	r4, 8014856 <__pow5mult+0x66>
 8014842:	f240 2171 	movw	r1, #625	@ 0x271
 8014846:	4638      	mov	r0, r7
 8014848:	f7ff ff1a 	bl	8014680 <__i2b>
 801484c:	2300      	movs	r3, #0
 801484e:	f8c8 0008 	str.w	r0, [r8, #8]
 8014852:	4604      	mov	r4, r0
 8014854:	6003      	str	r3, [r0, #0]
 8014856:	f04f 0900 	mov.w	r9, #0
 801485a:	07eb      	lsls	r3, r5, #31
 801485c:	d50a      	bpl.n	8014874 <__pow5mult+0x84>
 801485e:	4631      	mov	r1, r6
 8014860:	4622      	mov	r2, r4
 8014862:	4638      	mov	r0, r7
 8014864:	f7ff ff22 	bl	80146ac <__multiply>
 8014868:	4631      	mov	r1, r6
 801486a:	4680      	mov	r8, r0
 801486c:	4638      	mov	r0, r7
 801486e:	f7ff fe53 	bl	8014518 <_Bfree>
 8014872:	4646      	mov	r6, r8
 8014874:	106d      	asrs	r5, r5, #1
 8014876:	d00b      	beq.n	8014890 <__pow5mult+0xa0>
 8014878:	6820      	ldr	r0, [r4, #0]
 801487a:	b938      	cbnz	r0, 801488c <__pow5mult+0x9c>
 801487c:	4622      	mov	r2, r4
 801487e:	4621      	mov	r1, r4
 8014880:	4638      	mov	r0, r7
 8014882:	f7ff ff13 	bl	80146ac <__multiply>
 8014886:	6020      	str	r0, [r4, #0]
 8014888:	f8c0 9000 	str.w	r9, [r0]
 801488c:	4604      	mov	r4, r0
 801488e:	e7e4      	b.n	801485a <__pow5mult+0x6a>
 8014890:	4630      	mov	r0, r6
 8014892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014896:	bf00      	nop
 8014898:	08015694 	.word	0x08015694
 801489c:	08015561 	.word	0x08015561
 80148a0:	080155e1 	.word	0x080155e1

080148a4 <__lshift>:
 80148a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80148a8:	460c      	mov	r4, r1
 80148aa:	6849      	ldr	r1, [r1, #4]
 80148ac:	6923      	ldr	r3, [r4, #16]
 80148ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80148b2:	68a3      	ldr	r3, [r4, #8]
 80148b4:	4607      	mov	r7, r0
 80148b6:	4691      	mov	r9, r2
 80148b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80148bc:	f108 0601 	add.w	r6, r8, #1
 80148c0:	42b3      	cmp	r3, r6
 80148c2:	db0b      	blt.n	80148dc <__lshift+0x38>
 80148c4:	4638      	mov	r0, r7
 80148c6:	f7ff fde7 	bl	8014498 <_Balloc>
 80148ca:	4605      	mov	r5, r0
 80148cc:	b948      	cbnz	r0, 80148e2 <__lshift+0x3e>
 80148ce:	4602      	mov	r2, r0
 80148d0:	4b28      	ldr	r3, [pc, #160]	@ (8014974 <__lshift+0xd0>)
 80148d2:	4829      	ldr	r0, [pc, #164]	@ (8014978 <__lshift+0xd4>)
 80148d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80148d8:	f000 fc1e 	bl	8015118 <__assert_func>
 80148dc:	3101      	adds	r1, #1
 80148de:	005b      	lsls	r3, r3, #1
 80148e0:	e7ee      	b.n	80148c0 <__lshift+0x1c>
 80148e2:	2300      	movs	r3, #0
 80148e4:	f100 0114 	add.w	r1, r0, #20
 80148e8:	f100 0210 	add.w	r2, r0, #16
 80148ec:	4618      	mov	r0, r3
 80148ee:	4553      	cmp	r3, sl
 80148f0:	db33      	blt.n	801495a <__lshift+0xb6>
 80148f2:	6920      	ldr	r0, [r4, #16]
 80148f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80148f8:	f104 0314 	add.w	r3, r4, #20
 80148fc:	f019 091f 	ands.w	r9, r9, #31
 8014900:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014904:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014908:	d02b      	beq.n	8014962 <__lshift+0xbe>
 801490a:	f1c9 0e20 	rsb	lr, r9, #32
 801490e:	468a      	mov	sl, r1
 8014910:	2200      	movs	r2, #0
 8014912:	6818      	ldr	r0, [r3, #0]
 8014914:	fa00 f009 	lsl.w	r0, r0, r9
 8014918:	4310      	orrs	r0, r2
 801491a:	f84a 0b04 	str.w	r0, [sl], #4
 801491e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014922:	459c      	cmp	ip, r3
 8014924:	fa22 f20e 	lsr.w	r2, r2, lr
 8014928:	d8f3      	bhi.n	8014912 <__lshift+0x6e>
 801492a:	ebac 0304 	sub.w	r3, ip, r4
 801492e:	3b15      	subs	r3, #21
 8014930:	f023 0303 	bic.w	r3, r3, #3
 8014934:	3304      	adds	r3, #4
 8014936:	f104 0015 	add.w	r0, r4, #21
 801493a:	4560      	cmp	r0, ip
 801493c:	bf88      	it	hi
 801493e:	2304      	movhi	r3, #4
 8014940:	50ca      	str	r2, [r1, r3]
 8014942:	b10a      	cbz	r2, 8014948 <__lshift+0xa4>
 8014944:	f108 0602 	add.w	r6, r8, #2
 8014948:	3e01      	subs	r6, #1
 801494a:	4638      	mov	r0, r7
 801494c:	612e      	str	r6, [r5, #16]
 801494e:	4621      	mov	r1, r4
 8014950:	f7ff fde2 	bl	8014518 <_Bfree>
 8014954:	4628      	mov	r0, r5
 8014956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801495a:	f842 0f04 	str.w	r0, [r2, #4]!
 801495e:	3301      	adds	r3, #1
 8014960:	e7c5      	b.n	80148ee <__lshift+0x4a>
 8014962:	3904      	subs	r1, #4
 8014964:	f853 2b04 	ldr.w	r2, [r3], #4
 8014968:	f841 2f04 	str.w	r2, [r1, #4]!
 801496c:	459c      	cmp	ip, r3
 801496e:	d8f9      	bhi.n	8014964 <__lshift+0xc0>
 8014970:	e7ea      	b.n	8014948 <__lshift+0xa4>
 8014972:	bf00      	nop
 8014974:	080155d0 	.word	0x080155d0
 8014978:	080155e1 	.word	0x080155e1

0801497c <__mcmp>:
 801497c:	690a      	ldr	r2, [r1, #16]
 801497e:	4603      	mov	r3, r0
 8014980:	6900      	ldr	r0, [r0, #16]
 8014982:	1a80      	subs	r0, r0, r2
 8014984:	b530      	push	{r4, r5, lr}
 8014986:	d10e      	bne.n	80149a6 <__mcmp+0x2a>
 8014988:	3314      	adds	r3, #20
 801498a:	3114      	adds	r1, #20
 801498c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014990:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014994:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014998:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801499c:	4295      	cmp	r5, r2
 801499e:	d003      	beq.n	80149a8 <__mcmp+0x2c>
 80149a0:	d205      	bcs.n	80149ae <__mcmp+0x32>
 80149a2:	f04f 30ff 	mov.w	r0, #4294967295
 80149a6:	bd30      	pop	{r4, r5, pc}
 80149a8:	42a3      	cmp	r3, r4
 80149aa:	d3f3      	bcc.n	8014994 <__mcmp+0x18>
 80149ac:	e7fb      	b.n	80149a6 <__mcmp+0x2a>
 80149ae:	2001      	movs	r0, #1
 80149b0:	e7f9      	b.n	80149a6 <__mcmp+0x2a>
	...

080149b4 <__mdiff>:
 80149b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149b8:	4689      	mov	r9, r1
 80149ba:	4606      	mov	r6, r0
 80149bc:	4611      	mov	r1, r2
 80149be:	4648      	mov	r0, r9
 80149c0:	4614      	mov	r4, r2
 80149c2:	f7ff ffdb 	bl	801497c <__mcmp>
 80149c6:	1e05      	subs	r5, r0, #0
 80149c8:	d112      	bne.n	80149f0 <__mdiff+0x3c>
 80149ca:	4629      	mov	r1, r5
 80149cc:	4630      	mov	r0, r6
 80149ce:	f7ff fd63 	bl	8014498 <_Balloc>
 80149d2:	4602      	mov	r2, r0
 80149d4:	b928      	cbnz	r0, 80149e2 <__mdiff+0x2e>
 80149d6:	4b3f      	ldr	r3, [pc, #252]	@ (8014ad4 <__mdiff+0x120>)
 80149d8:	f240 2137 	movw	r1, #567	@ 0x237
 80149dc:	483e      	ldr	r0, [pc, #248]	@ (8014ad8 <__mdiff+0x124>)
 80149de:	f000 fb9b 	bl	8015118 <__assert_func>
 80149e2:	2301      	movs	r3, #1
 80149e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80149e8:	4610      	mov	r0, r2
 80149ea:	b003      	add	sp, #12
 80149ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149f0:	bfbc      	itt	lt
 80149f2:	464b      	movlt	r3, r9
 80149f4:	46a1      	movlt	r9, r4
 80149f6:	4630      	mov	r0, r6
 80149f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80149fc:	bfba      	itte	lt
 80149fe:	461c      	movlt	r4, r3
 8014a00:	2501      	movlt	r5, #1
 8014a02:	2500      	movge	r5, #0
 8014a04:	f7ff fd48 	bl	8014498 <_Balloc>
 8014a08:	4602      	mov	r2, r0
 8014a0a:	b918      	cbnz	r0, 8014a14 <__mdiff+0x60>
 8014a0c:	4b31      	ldr	r3, [pc, #196]	@ (8014ad4 <__mdiff+0x120>)
 8014a0e:	f240 2145 	movw	r1, #581	@ 0x245
 8014a12:	e7e3      	b.n	80149dc <__mdiff+0x28>
 8014a14:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014a18:	6926      	ldr	r6, [r4, #16]
 8014a1a:	60c5      	str	r5, [r0, #12]
 8014a1c:	f109 0310 	add.w	r3, r9, #16
 8014a20:	f109 0514 	add.w	r5, r9, #20
 8014a24:	f104 0e14 	add.w	lr, r4, #20
 8014a28:	f100 0b14 	add.w	fp, r0, #20
 8014a2c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014a30:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014a34:	9301      	str	r3, [sp, #4]
 8014a36:	46d9      	mov	r9, fp
 8014a38:	f04f 0c00 	mov.w	ip, #0
 8014a3c:	9b01      	ldr	r3, [sp, #4]
 8014a3e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8014a42:	f853 af04 	ldr.w	sl, [r3, #4]!
 8014a46:	9301      	str	r3, [sp, #4]
 8014a48:	fa1f f38a 	uxth.w	r3, sl
 8014a4c:	4619      	mov	r1, r3
 8014a4e:	b283      	uxth	r3, r0
 8014a50:	1acb      	subs	r3, r1, r3
 8014a52:	0c00      	lsrs	r0, r0, #16
 8014a54:	4463      	add	r3, ip
 8014a56:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8014a5a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8014a5e:	b29b      	uxth	r3, r3
 8014a60:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014a64:	4576      	cmp	r6, lr
 8014a66:	f849 3b04 	str.w	r3, [r9], #4
 8014a6a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014a6e:	d8e5      	bhi.n	8014a3c <__mdiff+0x88>
 8014a70:	1b33      	subs	r3, r6, r4
 8014a72:	3b15      	subs	r3, #21
 8014a74:	f023 0303 	bic.w	r3, r3, #3
 8014a78:	3415      	adds	r4, #21
 8014a7a:	3304      	adds	r3, #4
 8014a7c:	42a6      	cmp	r6, r4
 8014a7e:	bf38      	it	cc
 8014a80:	2304      	movcc	r3, #4
 8014a82:	441d      	add	r5, r3
 8014a84:	445b      	add	r3, fp
 8014a86:	461e      	mov	r6, r3
 8014a88:	462c      	mov	r4, r5
 8014a8a:	4544      	cmp	r4, r8
 8014a8c:	d30e      	bcc.n	8014aac <__mdiff+0xf8>
 8014a8e:	f108 0103 	add.w	r1, r8, #3
 8014a92:	1b49      	subs	r1, r1, r5
 8014a94:	f021 0103 	bic.w	r1, r1, #3
 8014a98:	3d03      	subs	r5, #3
 8014a9a:	45a8      	cmp	r8, r5
 8014a9c:	bf38      	it	cc
 8014a9e:	2100      	movcc	r1, #0
 8014aa0:	440b      	add	r3, r1
 8014aa2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014aa6:	b191      	cbz	r1, 8014ace <__mdiff+0x11a>
 8014aa8:	6117      	str	r7, [r2, #16]
 8014aaa:	e79d      	b.n	80149e8 <__mdiff+0x34>
 8014aac:	f854 1b04 	ldr.w	r1, [r4], #4
 8014ab0:	46e6      	mov	lr, ip
 8014ab2:	0c08      	lsrs	r0, r1, #16
 8014ab4:	fa1c fc81 	uxtah	ip, ip, r1
 8014ab8:	4471      	add	r1, lr
 8014aba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8014abe:	b289      	uxth	r1, r1
 8014ac0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014ac4:	f846 1b04 	str.w	r1, [r6], #4
 8014ac8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014acc:	e7dd      	b.n	8014a8a <__mdiff+0xd6>
 8014ace:	3f01      	subs	r7, #1
 8014ad0:	e7e7      	b.n	8014aa2 <__mdiff+0xee>
 8014ad2:	bf00      	nop
 8014ad4:	080155d0 	.word	0x080155d0
 8014ad8:	080155e1 	.word	0x080155e1

08014adc <__d2b>:
 8014adc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014ae0:	460f      	mov	r7, r1
 8014ae2:	2101      	movs	r1, #1
 8014ae4:	ec59 8b10 	vmov	r8, r9, d0
 8014ae8:	4616      	mov	r6, r2
 8014aea:	f7ff fcd5 	bl	8014498 <_Balloc>
 8014aee:	4604      	mov	r4, r0
 8014af0:	b930      	cbnz	r0, 8014b00 <__d2b+0x24>
 8014af2:	4602      	mov	r2, r0
 8014af4:	4b23      	ldr	r3, [pc, #140]	@ (8014b84 <__d2b+0xa8>)
 8014af6:	4824      	ldr	r0, [pc, #144]	@ (8014b88 <__d2b+0xac>)
 8014af8:	f240 310f 	movw	r1, #783	@ 0x30f
 8014afc:	f000 fb0c 	bl	8015118 <__assert_func>
 8014b00:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014b04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014b08:	b10d      	cbz	r5, 8014b0e <__d2b+0x32>
 8014b0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014b0e:	9301      	str	r3, [sp, #4]
 8014b10:	f1b8 0300 	subs.w	r3, r8, #0
 8014b14:	d023      	beq.n	8014b5e <__d2b+0x82>
 8014b16:	4668      	mov	r0, sp
 8014b18:	9300      	str	r3, [sp, #0]
 8014b1a:	f7ff fd84 	bl	8014626 <__lo0bits>
 8014b1e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014b22:	b1d0      	cbz	r0, 8014b5a <__d2b+0x7e>
 8014b24:	f1c0 0320 	rsb	r3, r0, #32
 8014b28:	fa02 f303 	lsl.w	r3, r2, r3
 8014b2c:	430b      	orrs	r3, r1
 8014b2e:	40c2      	lsrs	r2, r0
 8014b30:	6163      	str	r3, [r4, #20]
 8014b32:	9201      	str	r2, [sp, #4]
 8014b34:	9b01      	ldr	r3, [sp, #4]
 8014b36:	61a3      	str	r3, [r4, #24]
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	bf0c      	ite	eq
 8014b3c:	2201      	moveq	r2, #1
 8014b3e:	2202      	movne	r2, #2
 8014b40:	6122      	str	r2, [r4, #16]
 8014b42:	b1a5      	cbz	r5, 8014b6e <__d2b+0x92>
 8014b44:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8014b48:	4405      	add	r5, r0
 8014b4a:	603d      	str	r5, [r7, #0]
 8014b4c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014b50:	6030      	str	r0, [r6, #0]
 8014b52:	4620      	mov	r0, r4
 8014b54:	b003      	add	sp, #12
 8014b56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014b5a:	6161      	str	r1, [r4, #20]
 8014b5c:	e7ea      	b.n	8014b34 <__d2b+0x58>
 8014b5e:	a801      	add	r0, sp, #4
 8014b60:	f7ff fd61 	bl	8014626 <__lo0bits>
 8014b64:	9b01      	ldr	r3, [sp, #4]
 8014b66:	6163      	str	r3, [r4, #20]
 8014b68:	3020      	adds	r0, #32
 8014b6a:	2201      	movs	r2, #1
 8014b6c:	e7e8      	b.n	8014b40 <__d2b+0x64>
 8014b6e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014b72:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8014b76:	6038      	str	r0, [r7, #0]
 8014b78:	6918      	ldr	r0, [r3, #16]
 8014b7a:	f7ff fd35 	bl	80145e8 <__hi0bits>
 8014b7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014b82:	e7e5      	b.n	8014b50 <__d2b+0x74>
 8014b84:	080155d0 	.word	0x080155d0
 8014b88:	080155e1 	.word	0x080155e1

08014b8c <__sfputc_r>:
 8014b8c:	6893      	ldr	r3, [r2, #8]
 8014b8e:	3b01      	subs	r3, #1
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	b410      	push	{r4}
 8014b94:	6093      	str	r3, [r2, #8]
 8014b96:	da08      	bge.n	8014baa <__sfputc_r+0x1e>
 8014b98:	6994      	ldr	r4, [r2, #24]
 8014b9a:	42a3      	cmp	r3, r4
 8014b9c:	db01      	blt.n	8014ba2 <__sfputc_r+0x16>
 8014b9e:	290a      	cmp	r1, #10
 8014ba0:	d103      	bne.n	8014baa <__sfputc_r+0x1e>
 8014ba2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014ba6:	f000 ba13 	b.w	8014fd0 <__swbuf_r>
 8014baa:	6813      	ldr	r3, [r2, #0]
 8014bac:	1c58      	adds	r0, r3, #1
 8014bae:	6010      	str	r0, [r2, #0]
 8014bb0:	7019      	strb	r1, [r3, #0]
 8014bb2:	4608      	mov	r0, r1
 8014bb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014bb8:	4770      	bx	lr

08014bba <__sfputs_r>:
 8014bba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bbc:	4606      	mov	r6, r0
 8014bbe:	460f      	mov	r7, r1
 8014bc0:	4614      	mov	r4, r2
 8014bc2:	18d5      	adds	r5, r2, r3
 8014bc4:	42ac      	cmp	r4, r5
 8014bc6:	d101      	bne.n	8014bcc <__sfputs_r+0x12>
 8014bc8:	2000      	movs	r0, #0
 8014bca:	e007      	b.n	8014bdc <__sfputs_r+0x22>
 8014bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014bd0:	463a      	mov	r2, r7
 8014bd2:	4630      	mov	r0, r6
 8014bd4:	f7ff ffda 	bl	8014b8c <__sfputc_r>
 8014bd8:	1c43      	adds	r3, r0, #1
 8014bda:	d1f3      	bne.n	8014bc4 <__sfputs_r+0xa>
 8014bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014be0 <_vfiprintf_r>:
 8014be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014be4:	460d      	mov	r5, r1
 8014be6:	b09d      	sub	sp, #116	@ 0x74
 8014be8:	4614      	mov	r4, r2
 8014bea:	4698      	mov	r8, r3
 8014bec:	4606      	mov	r6, r0
 8014bee:	b118      	cbz	r0, 8014bf8 <_vfiprintf_r+0x18>
 8014bf0:	6a03      	ldr	r3, [r0, #32]
 8014bf2:	b90b      	cbnz	r3, 8014bf8 <_vfiprintf_r+0x18>
 8014bf4:	f7fe fbd4 	bl	80133a0 <__sinit>
 8014bf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014bfa:	07d9      	lsls	r1, r3, #31
 8014bfc:	d405      	bmi.n	8014c0a <_vfiprintf_r+0x2a>
 8014bfe:	89ab      	ldrh	r3, [r5, #12]
 8014c00:	059a      	lsls	r2, r3, #22
 8014c02:	d402      	bmi.n	8014c0a <_vfiprintf_r+0x2a>
 8014c04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014c06:	f7fe fcdc 	bl	80135c2 <__retarget_lock_acquire_recursive>
 8014c0a:	89ab      	ldrh	r3, [r5, #12]
 8014c0c:	071b      	lsls	r3, r3, #28
 8014c0e:	d501      	bpl.n	8014c14 <_vfiprintf_r+0x34>
 8014c10:	692b      	ldr	r3, [r5, #16]
 8014c12:	b99b      	cbnz	r3, 8014c3c <_vfiprintf_r+0x5c>
 8014c14:	4629      	mov	r1, r5
 8014c16:	4630      	mov	r0, r6
 8014c18:	f000 fa18 	bl	801504c <__swsetup_r>
 8014c1c:	b170      	cbz	r0, 8014c3c <_vfiprintf_r+0x5c>
 8014c1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014c20:	07dc      	lsls	r4, r3, #31
 8014c22:	d504      	bpl.n	8014c2e <_vfiprintf_r+0x4e>
 8014c24:	f04f 30ff 	mov.w	r0, #4294967295
 8014c28:	b01d      	add	sp, #116	@ 0x74
 8014c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c2e:	89ab      	ldrh	r3, [r5, #12]
 8014c30:	0598      	lsls	r0, r3, #22
 8014c32:	d4f7      	bmi.n	8014c24 <_vfiprintf_r+0x44>
 8014c34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014c36:	f7fe fcc5 	bl	80135c4 <__retarget_lock_release_recursive>
 8014c3a:	e7f3      	b.n	8014c24 <_vfiprintf_r+0x44>
 8014c3c:	2300      	movs	r3, #0
 8014c3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8014c40:	2320      	movs	r3, #32
 8014c42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014c46:	f8cd 800c 	str.w	r8, [sp, #12]
 8014c4a:	2330      	movs	r3, #48	@ 0x30
 8014c4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014dfc <_vfiprintf_r+0x21c>
 8014c50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014c54:	f04f 0901 	mov.w	r9, #1
 8014c58:	4623      	mov	r3, r4
 8014c5a:	469a      	mov	sl, r3
 8014c5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014c60:	b10a      	cbz	r2, 8014c66 <_vfiprintf_r+0x86>
 8014c62:	2a25      	cmp	r2, #37	@ 0x25
 8014c64:	d1f9      	bne.n	8014c5a <_vfiprintf_r+0x7a>
 8014c66:	ebba 0b04 	subs.w	fp, sl, r4
 8014c6a:	d00b      	beq.n	8014c84 <_vfiprintf_r+0xa4>
 8014c6c:	465b      	mov	r3, fp
 8014c6e:	4622      	mov	r2, r4
 8014c70:	4629      	mov	r1, r5
 8014c72:	4630      	mov	r0, r6
 8014c74:	f7ff ffa1 	bl	8014bba <__sfputs_r>
 8014c78:	3001      	adds	r0, #1
 8014c7a:	f000 80a7 	beq.w	8014dcc <_vfiprintf_r+0x1ec>
 8014c7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014c80:	445a      	add	r2, fp
 8014c82:	9209      	str	r2, [sp, #36]	@ 0x24
 8014c84:	f89a 3000 	ldrb.w	r3, [sl]
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	f000 809f 	beq.w	8014dcc <_vfiprintf_r+0x1ec>
 8014c8e:	2300      	movs	r3, #0
 8014c90:	f04f 32ff 	mov.w	r2, #4294967295
 8014c94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014c98:	f10a 0a01 	add.w	sl, sl, #1
 8014c9c:	9304      	str	r3, [sp, #16]
 8014c9e:	9307      	str	r3, [sp, #28]
 8014ca0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014ca4:	931a      	str	r3, [sp, #104]	@ 0x68
 8014ca6:	4654      	mov	r4, sl
 8014ca8:	2205      	movs	r2, #5
 8014caa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014cae:	4853      	ldr	r0, [pc, #332]	@ (8014dfc <_vfiprintf_r+0x21c>)
 8014cb0:	f7eb fa66 	bl	8000180 <memchr>
 8014cb4:	9a04      	ldr	r2, [sp, #16]
 8014cb6:	b9d8      	cbnz	r0, 8014cf0 <_vfiprintf_r+0x110>
 8014cb8:	06d1      	lsls	r1, r2, #27
 8014cba:	bf44      	itt	mi
 8014cbc:	2320      	movmi	r3, #32
 8014cbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014cc2:	0713      	lsls	r3, r2, #28
 8014cc4:	bf44      	itt	mi
 8014cc6:	232b      	movmi	r3, #43	@ 0x2b
 8014cc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014ccc:	f89a 3000 	ldrb.w	r3, [sl]
 8014cd0:	2b2a      	cmp	r3, #42	@ 0x2a
 8014cd2:	d015      	beq.n	8014d00 <_vfiprintf_r+0x120>
 8014cd4:	9a07      	ldr	r2, [sp, #28]
 8014cd6:	4654      	mov	r4, sl
 8014cd8:	2000      	movs	r0, #0
 8014cda:	f04f 0c0a 	mov.w	ip, #10
 8014cde:	4621      	mov	r1, r4
 8014ce0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014ce4:	3b30      	subs	r3, #48	@ 0x30
 8014ce6:	2b09      	cmp	r3, #9
 8014ce8:	d94b      	bls.n	8014d82 <_vfiprintf_r+0x1a2>
 8014cea:	b1b0      	cbz	r0, 8014d1a <_vfiprintf_r+0x13a>
 8014cec:	9207      	str	r2, [sp, #28]
 8014cee:	e014      	b.n	8014d1a <_vfiprintf_r+0x13a>
 8014cf0:	eba0 0308 	sub.w	r3, r0, r8
 8014cf4:	fa09 f303 	lsl.w	r3, r9, r3
 8014cf8:	4313      	orrs	r3, r2
 8014cfa:	9304      	str	r3, [sp, #16]
 8014cfc:	46a2      	mov	sl, r4
 8014cfe:	e7d2      	b.n	8014ca6 <_vfiprintf_r+0xc6>
 8014d00:	9b03      	ldr	r3, [sp, #12]
 8014d02:	1d19      	adds	r1, r3, #4
 8014d04:	681b      	ldr	r3, [r3, #0]
 8014d06:	9103      	str	r1, [sp, #12]
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	bfbb      	ittet	lt
 8014d0c:	425b      	neglt	r3, r3
 8014d0e:	f042 0202 	orrlt.w	r2, r2, #2
 8014d12:	9307      	strge	r3, [sp, #28]
 8014d14:	9307      	strlt	r3, [sp, #28]
 8014d16:	bfb8      	it	lt
 8014d18:	9204      	strlt	r2, [sp, #16]
 8014d1a:	7823      	ldrb	r3, [r4, #0]
 8014d1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8014d1e:	d10a      	bne.n	8014d36 <_vfiprintf_r+0x156>
 8014d20:	7863      	ldrb	r3, [r4, #1]
 8014d22:	2b2a      	cmp	r3, #42	@ 0x2a
 8014d24:	d132      	bne.n	8014d8c <_vfiprintf_r+0x1ac>
 8014d26:	9b03      	ldr	r3, [sp, #12]
 8014d28:	1d1a      	adds	r2, r3, #4
 8014d2a:	681b      	ldr	r3, [r3, #0]
 8014d2c:	9203      	str	r2, [sp, #12]
 8014d2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014d32:	3402      	adds	r4, #2
 8014d34:	9305      	str	r3, [sp, #20]
 8014d36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014e0c <_vfiprintf_r+0x22c>
 8014d3a:	7821      	ldrb	r1, [r4, #0]
 8014d3c:	2203      	movs	r2, #3
 8014d3e:	4650      	mov	r0, sl
 8014d40:	f7eb fa1e 	bl	8000180 <memchr>
 8014d44:	b138      	cbz	r0, 8014d56 <_vfiprintf_r+0x176>
 8014d46:	9b04      	ldr	r3, [sp, #16]
 8014d48:	eba0 000a 	sub.w	r0, r0, sl
 8014d4c:	2240      	movs	r2, #64	@ 0x40
 8014d4e:	4082      	lsls	r2, r0
 8014d50:	4313      	orrs	r3, r2
 8014d52:	3401      	adds	r4, #1
 8014d54:	9304      	str	r3, [sp, #16]
 8014d56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d5a:	4829      	ldr	r0, [pc, #164]	@ (8014e00 <_vfiprintf_r+0x220>)
 8014d5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014d60:	2206      	movs	r2, #6
 8014d62:	f7eb fa0d 	bl	8000180 <memchr>
 8014d66:	2800      	cmp	r0, #0
 8014d68:	d03f      	beq.n	8014dea <_vfiprintf_r+0x20a>
 8014d6a:	4b26      	ldr	r3, [pc, #152]	@ (8014e04 <_vfiprintf_r+0x224>)
 8014d6c:	bb1b      	cbnz	r3, 8014db6 <_vfiprintf_r+0x1d6>
 8014d6e:	9b03      	ldr	r3, [sp, #12]
 8014d70:	3307      	adds	r3, #7
 8014d72:	f023 0307 	bic.w	r3, r3, #7
 8014d76:	3308      	adds	r3, #8
 8014d78:	9303      	str	r3, [sp, #12]
 8014d7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014d7c:	443b      	add	r3, r7
 8014d7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8014d80:	e76a      	b.n	8014c58 <_vfiprintf_r+0x78>
 8014d82:	fb0c 3202 	mla	r2, ip, r2, r3
 8014d86:	460c      	mov	r4, r1
 8014d88:	2001      	movs	r0, #1
 8014d8a:	e7a8      	b.n	8014cde <_vfiprintf_r+0xfe>
 8014d8c:	2300      	movs	r3, #0
 8014d8e:	3401      	adds	r4, #1
 8014d90:	9305      	str	r3, [sp, #20]
 8014d92:	4619      	mov	r1, r3
 8014d94:	f04f 0c0a 	mov.w	ip, #10
 8014d98:	4620      	mov	r0, r4
 8014d9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014d9e:	3a30      	subs	r2, #48	@ 0x30
 8014da0:	2a09      	cmp	r2, #9
 8014da2:	d903      	bls.n	8014dac <_vfiprintf_r+0x1cc>
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d0c6      	beq.n	8014d36 <_vfiprintf_r+0x156>
 8014da8:	9105      	str	r1, [sp, #20]
 8014daa:	e7c4      	b.n	8014d36 <_vfiprintf_r+0x156>
 8014dac:	fb0c 2101 	mla	r1, ip, r1, r2
 8014db0:	4604      	mov	r4, r0
 8014db2:	2301      	movs	r3, #1
 8014db4:	e7f0      	b.n	8014d98 <_vfiprintf_r+0x1b8>
 8014db6:	ab03      	add	r3, sp, #12
 8014db8:	9300      	str	r3, [sp, #0]
 8014dba:	462a      	mov	r2, r5
 8014dbc:	4b12      	ldr	r3, [pc, #72]	@ (8014e08 <_vfiprintf_r+0x228>)
 8014dbe:	a904      	add	r1, sp, #16
 8014dc0:	4630      	mov	r0, r6
 8014dc2:	f7fd feab 	bl	8012b1c <_printf_float>
 8014dc6:	4607      	mov	r7, r0
 8014dc8:	1c78      	adds	r0, r7, #1
 8014dca:	d1d6      	bne.n	8014d7a <_vfiprintf_r+0x19a>
 8014dcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014dce:	07d9      	lsls	r1, r3, #31
 8014dd0:	d405      	bmi.n	8014dde <_vfiprintf_r+0x1fe>
 8014dd2:	89ab      	ldrh	r3, [r5, #12]
 8014dd4:	059a      	lsls	r2, r3, #22
 8014dd6:	d402      	bmi.n	8014dde <_vfiprintf_r+0x1fe>
 8014dd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014dda:	f7fe fbf3 	bl	80135c4 <__retarget_lock_release_recursive>
 8014dde:	89ab      	ldrh	r3, [r5, #12]
 8014de0:	065b      	lsls	r3, r3, #25
 8014de2:	f53f af1f 	bmi.w	8014c24 <_vfiprintf_r+0x44>
 8014de6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014de8:	e71e      	b.n	8014c28 <_vfiprintf_r+0x48>
 8014dea:	ab03      	add	r3, sp, #12
 8014dec:	9300      	str	r3, [sp, #0]
 8014dee:	462a      	mov	r2, r5
 8014df0:	4b05      	ldr	r3, [pc, #20]	@ (8014e08 <_vfiprintf_r+0x228>)
 8014df2:	a904      	add	r1, sp, #16
 8014df4:	4630      	mov	r0, r6
 8014df6:	f7fe f929 	bl	801304c <_printf_i>
 8014dfa:	e7e4      	b.n	8014dc6 <_vfiprintf_r+0x1e6>
 8014dfc:	0801563a 	.word	0x0801563a
 8014e00:	08015644 	.word	0x08015644
 8014e04:	08012b1d 	.word	0x08012b1d
 8014e08:	08014bbb 	.word	0x08014bbb
 8014e0c:	08015640 	.word	0x08015640

08014e10 <__sflush_r>:
 8014e10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e18:	0716      	lsls	r6, r2, #28
 8014e1a:	4605      	mov	r5, r0
 8014e1c:	460c      	mov	r4, r1
 8014e1e:	d454      	bmi.n	8014eca <__sflush_r+0xba>
 8014e20:	684b      	ldr	r3, [r1, #4]
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	dc02      	bgt.n	8014e2c <__sflush_r+0x1c>
 8014e26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	dd48      	ble.n	8014ebe <__sflush_r+0xae>
 8014e2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014e2e:	2e00      	cmp	r6, #0
 8014e30:	d045      	beq.n	8014ebe <__sflush_r+0xae>
 8014e32:	2300      	movs	r3, #0
 8014e34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014e38:	682f      	ldr	r7, [r5, #0]
 8014e3a:	6a21      	ldr	r1, [r4, #32]
 8014e3c:	602b      	str	r3, [r5, #0]
 8014e3e:	d030      	beq.n	8014ea2 <__sflush_r+0x92>
 8014e40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014e42:	89a3      	ldrh	r3, [r4, #12]
 8014e44:	0759      	lsls	r1, r3, #29
 8014e46:	d505      	bpl.n	8014e54 <__sflush_r+0x44>
 8014e48:	6863      	ldr	r3, [r4, #4]
 8014e4a:	1ad2      	subs	r2, r2, r3
 8014e4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014e4e:	b10b      	cbz	r3, 8014e54 <__sflush_r+0x44>
 8014e50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014e52:	1ad2      	subs	r2, r2, r3
 8014e54:	2300      	movs	r3, #0
 8014e56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014e58:	6a21      	ldr	r1, [r4, #32]
 8014e5a:	4628      	mov	r0, r5
 8014e5c:	47b0      	blx	r6
 8014e5e:	1c43      	adds	r3, r0, #1
 8014e60:	89a3      	ldrh	r3, [r4, #12]
 8014e62:	d106      	bne.n	8014e72 <__sflush_r+0x62>
 8014e64:	6829      	ldr	r1, [r5, #0]
 8014e66:	291d      	cmp	r1, #29
 8014e68:	d82b      	bhi.n	8014ec2 <__sflush_r+0xb2>
 8014e6a:	4a2a      	ldr	r2, [pc, #168]	@ (8014f14 <__sflush_r+0x104>)
 8014e6c:	40ca      	lsrs	r2, r1
 8014e6e:	07d6      	lsls	r6, r2, #31
 8014e70:	d527      	bpl.n	8014ec2 <__sflush_r+0xb2>
 8014e72:	2200      	movs	r2, #0
 8014e74:	6062      	str	r2, [r4, #4]
 8014e76:	04d9      	lsls	r1, r3, #19
 8014e78:	6922      	ldr	r2, [r4, #16]
 8014e7a:	6022      	str	r2, [r4, #0]
 8014e7c:	d504      	bpl.n	8014e88 <__sflush_r+0x78>
 8014e7e:	1c42      	adds	r2, r0, #1
 8014e80:	d101      	bne.n	8014e86 <__sflush_r+0x76>
 8014e82:	682b      	ldr	r3, [r5, #0]
 8014e84:	b903      	cbnz	r3, 8014e88 <__sflush_r+0x78>
 8014e86:	6560      	str	r0, [r4, #84]	@ 0x54
 8014e88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014e8a:	602f      	str	r7, [r5, #0]
 8014e8c:	b1b9      	cbz	r1, 8014ebe <__sflush_r+0xae>
 8014e8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014e92:	4299      	cmp	r1, r3
 8014e94:	d002      	beq.n	8014e9c <__sflush_r+0x8c>
 8014e96:	4628      	mov	r0, r5
 8014e98:	f7ff f9fe 	bl	8014298 <_free_r>
 8014e9c:	2300      	movs	r3, #0
 8014e9e:	6363      	str	r3, [r4, #52]	@ 0x34
 8014ea0:	e00d      	b.n	8014ebe <__sflush_r+0xae>
 8014ea2:	2301      	movs	r3, #1
 8014ea4:	4628      	mov	r0, r5
 8014ea6:	47b0      	blx	r6
 8014ea8:	4602      	mov	r2, r0
 8014eaa:	1c50      	adds	r0, r2, #1
 8014eac:	d1c9      	bne.n	8014e42 <__sflush_r+0x32>
 8014eae:	682b      	ldr	r3, [r5, #0]
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d0c6      	beq.n	8014e42 <__sflush_r+0x32>
 8014eb4:	2b1d      	cmp	r3, #29
 8014eb6:	d001      	beq.n	8014ebc <__sflush_r+0xac>
 8014eb8:	2b16      	cmp	r3, #22
 8014eba:	d11e      	bne.n	8014efa <__sflush_r+0xea>
 8014ebc:	602f      	str	r7, [r5, #0]
 8014ebe:	2000      	movs	r0, #0
 8014ec0:	e022      	b.n	8014f08 <__sflush_r+0xf8>
 8014ec2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014ec6:	b21b      	sxth	r3, r3
 8014ec8:	e01b      	b.n	8014f02 <__sflush_r+0xf2>
 8014eca:	690f      	ldr	r7, [r1, #16]
 8014ecc:	2f00      	cmp	r7, #0
 8014ece:	d0f6      	beq.n	8014ebe <__sflush_r+0xae>
 8014ed0:	0793      	lsls	r3, r2, #30
 8014ed2:	680e      	ldr	r6, [r1, #0]
 8014ed4:	bf08      	it	eq
 8014ed6:	694b      	ldreq	r3, [r1, #20]
 8014ed8:	600f      	str	r7, [r1, #0]
 8014eda:	bf18      	it	ne
 8014edc:	2300      	movne	r3, #0
 8014ede:	eba6 0807 	sub.w	r8, r6, r7
 8014ee2:	608b      	str	r3, [r1, #8]
 8014ee4:	f1b8 0f00 	cmp.w	r8, #0
 8014ee8:	dde9      	ble.n	8014ebe <__sflush_r+0xae>
 8014eea:	6a21      	ldr	r1, [r4, #32]
 8014eec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014eee:	4643      	mov	r3, r8
 8014ef0:	463a      	mov	r2, r7
 8014ef2:	4628      	mov	r0, r5
 8014ef4:	47b0      	blx	r6
 8014ef6:	2800      	cmp	r0, #0
 8014ef8:	dc08      	bgt.n	8014f0c <__sflush_r+0xfc>
 8014efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014efe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014f02:	81a3      	strh	r3, [r4, #12]
 8014f04:	f04f 30ff 	mov.w	r0, #4294967295
 8014f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f0c:	4407      	add	r7, r0
 8014f0e:	eba8 0800 	sub.w	r8, r8, r0
 8014f12:	e7e7      	b.n	8014ee4 <__sflush_r+0xd4>
 8014f14:	20400001 	.word	0x20400001

08014f18 <_fflush_r>:
 8014f18:	b538      	push	{r3, r4, r5, lr}
 8014f1a:	690b      	ldr	r3, [r1, #16]
 8014f1c:	4605      	mov	r5, r0
 8014f1e:	460c      	mov	r4, r1
 8014f20:	b913      	cbnz	r3, 8014f28 <_fflush_r+0x10>
 8014f22:	2500      	movs	r5, #0
 8014f24:	4628      	mov	r0, r5
 8014f26:	bd38      	pop	{r3, r4, r5, pc}
 8014f28:	b118      	cbz	r0, 8014f32 <_fflush_r+0x1a>
 8014f2a:	6a03      	ldr	r3, [r0, #32]
 8014f2c:	b90b      	cbnz	r3, 8014f32 <_fflush_r+0x1a>
 8014f2e:	f7fe fa37 	bl	80133a0 <__sinit>
 8014f32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d0f3      	beq.n	8014f22 <_fflush_r+0xa>
 8014f3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014f3c:	07d0      	lsls	r0, r2, #31
 8014f3e:	d404      	bmi.n	8014f4a <_fflush_r+0x32>
 8014f40:	0599      	lsls	r1, r3, #22
 8014f42:	d402      	bmi.n	8014f4a <_fflush_r+0x32>
 8014f44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014f46:	f7fe fb3c 	bl	80135c2 <__retarget_lock_acquire_recursive>
 8014f4a:	4628      	mov	r0, r5
 8014f4c:	4621      	mov	r1, r4
 8014f4e:	f7ff ff5f 	bl	8014e10 <__sflush_r>
 8014f52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014f54:	07da      	lsls	r2, r3, #31
 8014f56:	4605      	mov	r5, r0
 8014f58:	d4e4      	bmi.n	8014f24 <_fflush_r+0xc>
 8014f5a:	89a3      	ldrh	r3, [r4, #12]
 8014f5c:	059b      	lsls	r3, r3, #22
 8014f5e:	d4e1      	bmi.n	8014f24 <_fflush_r+0xc>
 8014f60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014f62:	f7fe fb2f 	bl	80135c4 <__retarget_lock_release_recursive>
 8014f66:	e7dd      	b.n	8014f24 <_fflush_r+0xc>

08014f68 <_putc_r>:
 8014f68:	b570      	push	{r4, r5, r6, lr}
 8014f6a:	460d      	mov	r5, r1
 8014f6c:	4614      	mov	r4, r2
 8014f6e:	4606      	mov	r6, r0
 8014f70:	b118      	cbz	r0, 8014f7a <_putc_r+0x12>
 8014f72:	6a03      	ldr	r3, [r0, #32]
 8014f74:	b90b      	cbnz	r3, 8014f7a <_putc_r+0x12>
 8014f76:	f7fe fa13 	bl	80133a0 <__sinit>
 8014f7a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014f7c:	07d8      	lsls	r0, r3, #31
 8014f7e:	d405      	bmi.n	8014f8c <_putc_r+0x24>
 8014f80:	89a3      	ldrh	r3, [r4, #12]
 8014f82:	0599      	lsls	r1, r3, #22
 8014f84:	d402      	bmi.n	8014f8c <_putc_r+0x24>
 8014f86:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014f88:	f7fe fb1b 	bl	80135c2 <__retarget_lock_acquire_recursive>
 8014f8c:	68a3      	ldr	r3, [r4, #8]
 8014f8e:	3b01      	subs	r3, #1
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	60a3      	str	r3, [r4, #8]
 8014f94:	da05      	bge.n	8014fa2 <_putc_r+0x3a>
 8014f96:	69a2      	ldr	r2, [r4, #24]
 8014f98:	4293      	cmp	r3, r2
 8014f9a:	db12      	blt.n	8014fc2 <_putc_r+0x5a>
 8014f9c:	b2eb      	uxtb	r3, r5
 8014f9e:	2b0a      	cmp	r3, #10
 8014fa0:	d00f      	beq.n	8014fc2 <_putc_r+0x5a>
 8014fa2:	6823      	ldr	r3, [r4, #0]
 8014fa4:	1c5a      	adds	r2, r3, #1
 8014fa6:	6022      	str	r2, [r4, #0]
 8014fa8:	701d      	strb	r5, [r3, #0]
 8014faa:	b2ed      	uxtb	r5, r5
 8014fac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014fae:	07da      	lsls	r2, r3, #31
 8014fb0:	d405      	bmi.n	8014fbe <_putc_r+0x56>
 8014fb2:	89a3      	ldrh	r3, [r4, #12]
 8014fb4:	059b      	lsls	r3, r3, #22
 8014fb6:	d402      	bmi.n	8014fbe <_putc_r+0x56>
 8014fb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014fba:	f7fe fb03 	bl	80135c4 <__retarget_lock_release_recursive>
 8014fbe:	4628      	mov	r0, r5
 8014fc0:	bd70      	pop	{r4, r5, r6, pc}
 8014fc2:	4629      	mov	r1, r5
 8014fc4:	4622      	mov	r2, r4
 8014fc6:	4630      	mov	r0, r6
 8014fc8:	f000 f802 	bl	8014fd0 <__swbuf_r>
 8014fcc:	4605      	mov	r5, r0
 8014fce:	e7ed      	b.n	8014fac <_putc_r+0x44>

08014fd0 <__swbuf_r>:
 8014fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fd2:	460e      	mov	r6, r1
 8014fd4:	4614      	mov	r4, r2
 8014fd6:	4605      	mov	r5, r0
 8014fd8:	b118      	cbz	r0, 8014fe2 <__swbuf_r+0x12>
 8014fda:	6a03      	ldr	r3, [r0, #32]
 8014fdc:	b90b      	cbnz	r3, 8014fe2 <__swbuf_r+0x12>
 8014fde:	f7fe f9df 	bl	80133a0 <__sinit>
 8014fe2:	69a3      	ldr	r3, [r4, #24]
 8014fe4:	60a3      	str	r3, [r4, #8]
 8014fe6:	89a3      	ldrh	r3, [r4, #12]
 8014fe8:	071a      	lsls	r2, r3, #28
 8014fea:	d501      	bpl.n	8014ff0 <__swbuf_r+0x20>
 8014fec:	6923      	ldr	r3, [r4, #16]
 8014fee:	b943      	cbnz	r3, 8015002 <__swbuf_r+0x32>
 8014ff0:	4621      	mov	r1, r4
 8014ff2:	4628      	mov	r0, r5
 8014ff4:	f000 f82a 	bl	801504c <__swsetup_r>
 8014ff8:	b118      	cbz	r0, 8015002 <__swbuf_r+0x32>
 8014ffa:	f04f 37ff 	mov.w	r7, #4294967295
 8014ffe:	4638      	mov	r0, r7
 8015000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015002:	6823      	ldr	r3, [r4, #0]
 8015004:	6922      	ldr	r2, [r4, #16]
 8015006:	1a98      	subs	r0, r3, r2
 8015008:	6963      	ldr	r3, [r4, #20]
 801500a:	b2f6      	uxtb	r6, r6
 801500c:	4283      	cmp	r3, r0
 801500e:	4637      	mov	r7, r6
 8015010:	dc05      	bgt.n	801501e <__swbuf_r+0x4e>
 8015012:	4621      	mov	r1, r4
 8015014:	4628      	mov	r0, r5
 8015016:	f7ff ff7f 	bl	8014f18 <_fflush_r>
 801501a:	2800      	cmp	r0, #0
 801501c:	d1ed      	bne.n	8014ffa <__swbuf_r+0x2a>
 801501e:	68a3      	ldr	r3, [r4, #8]
 8015020:	3b01      	subs	r3, #1
 8015022:	60a3      	str	r3, [r4, #8]
 8015024:	6823      	ldr	r3, [r4, #0]
 8015026:	1c5a      	adds	r2, r3, #1
 8015028:	6022      	str	r2, [r4, #0]
 801502a:	701e      	strb	r6, [r3, #0]
 801502c:	6962      	ldr	r2, [r4, #20]
 801502e:	1c43      	adds	r3, r0, #1
 8015030:	429a      	cmp	r2, r3
 8015032:	d004      	beq.n	801503e <__swbuf_r+0x6e>
 8015034:	89a3      	ldrh	r3, [r4, #12]
 8015036:	07db      	lsls	r3, r3, #31
 8015038:	d5e1      	bpl.n	8014ffe <__swbuf_r+0x2e>
 801503a:	2e0a      	cmp	r6, #10
 801503c:	d1df      	bne.n	8014ffe <__swbuf_r+0x2e>
 801503e:	4621      	mov	r1, r4
 8015040:	4628      	mov	r0, r5
 8015042:	f7ff ff69 	bl	8014f18 <_fflush_r>
 8015046:	2800      	cmp	r0, #0
 8015048:	d0d9      	beq.n	8014ffe <__swbuf_r+0x2e>
 801504a:	e7d6      	b.n	8014ffa <__swbuf_r+0x2a>

0801504c <__swsetup_r>:
 801504c:	b538      	push	{r3, r4, r5, lr}
 801504e:	4b29      	ldr	r3, [pc, #164]	@ (80150f4 <__swsetup_r+0xa8>)
 8015050:	4605      	mov	r5, r0
 8015052:	6818      	ldr	r0, [r3, #0]
 8015054:	460c      	mov	r4, r1
 8015056:	b118      	cbz	r0, 8015060 <__swsetup_r+0x14>
 8015058:	6a03      	ldr	r3, [r0, #32]
 801505a:	b90b      	cbnz	r3, 8015060 <__swsetup_r+0x14>
 801505c:	f7fe f9a0 	bl	80133a0 <__sinit>
 8015060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015064:	0719      	lsls	r1, r3, #28
 8015066:	d422      	bmi.n	80150ae <__swsetup_r+0x62>
 8015068:	06da      	lsls	r2, r3, #27
 801506a:	d407      	bmi.n	801507c <__swsetup_r+0x30>
 801506c:	2209      	movs	r2, #9
 801506e:	602a      	str	r2, [r5, #0]
 8015070:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015074:	81a3      	strh	r3, [r4, #12]
 8015076:	f04f 30ff 	mov.w	r0, #4294967295
 801507a:	e033      	b.n	80150e4 <__swsetup_r+0x98>
 801507c:	0758      	lsls	r0, r3, #29
 801507e:	d512      	bpl.n	80150a6 <__swsetup_r+0x5a>
 8015080:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015082:	b141      	cbz	r1, 8015096 <__swsetup_r+0x4a>
 8015084:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015088:	4299      	cmp	r1, r3
 801508a:	d002      	beq.n	8015092 <__swsetup_r+0x46>
 801508c:	4628      	mov	r0, r5
 801508e:	f7ff f903 	bl	8014298 <_free_r>
 8015092:	2300      	movs	r3, #0
 8015094:	6363      	str	r3, [r4, #52]	@ 0x34
 8015096:	89a3      	ldrh	r3, [r4, #12]
 8015098:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801509c:	81a3      	strh	r3, [r4, #12]
 801509e:	2300      	movs	r3, #0
 80150a0:	6063      	str	r3, [r4, #4]
 80150a2:	6923      	ldr	r3, [r4, #16]
 80150a4:	6023      	str	r3, [r4, #0]
 80150a6:	89a3      	ldrh	r3, [r4, #12]
 80150a8:	f043 0308 	orr.w	r3, r3, #8
 80150ac:	81a3      	strh	r3, [r4, #12]
 80150ae:	6923      	ldr	r3, [r4, #16]
 80150b0:	b94b      	cbnz	r3, 80150c6 <__swsetup_r+0x7a>
 80150b2:	89a3      	ldrh	r3, [r4, #12]
 80150b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80150b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80150bc:	d003      	beq.n	80150c6 <__swsetup_r+0x7a>
 80150be:	4621      	mov	r1, r4
 80150c0:	4628      	mov	r0, r5
 80150c2:	f000 f8b3 	bl	801522c <__smakebuf_r>
 80150c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80150ca:	f013 0201 	ands.w	r2, r3, #1
 80150ce:	d00a      	beq.n	80150e6 <__swsetup_r+0x9a>
 80150d0:	2200      	movs	r2, #0
 80150d2:	60a2      	str	r2, [r4, #8]
 80150d4:	6962      	ldr	r2, [r4, #20]
 80150d6:	4252      	negs	r2, r2
 80150d8:	61a2      	str	r2, [r4, #24]
 80150da:	6922      	ldr	r2, [r4, #16]
 80150dc:	b942      	cbnz	r2, 80150f0 <__swsetup_r+0xa4>
 80150de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80150e2:	d1c5      	bne.n	8015070 <__swsetup_r+0x24>
 80150e4:	bd38      	pop	{r3, r4, r5, pc}
 80150e6:	0799      	lsls	r1, r3, #30
 80150e8:	bf58      	it	pl
 80150ea:	6962      	ldrpl	r2, [r4, #20]
 80150ec:	60a2      	str	r2, [r4, #8]
 80150ee:	e7f4      	b.n	80150da <__swsetup_r+0x8e>
 80150f0:	2000      	movs	r0, #0
 80150f2:	e7f7      	b.n	80150e4 <__swsetup_r+0x98>
 80150f4:	20000138 	.word	0x20000138

080150f8 <_sbrk_r>:
 80150f8:	b538      	push	{r3, r4, r5, lr}
 80150fa:	4d06      	ldr	r5, [pc, #24]	@ (8015114 <_sbrk_r+0x1c>)
 80150fc:	2300      	movs	r3, #0
 80150fe:	4604      	mov	r4, r0
 8015100:	4608      	mov	r0, r1
 8015102:	602b      	str	r3, [r5, #0]
 8015104:	f7f0 f862 	bl	80051cc <_sbrk>
 8015108:	1c43      	adds	r3, r0, #1
 801510a:	d102      	bne.n	8015112 <_sbrk_r+0x1a>
 801510c:	682b      	ldr	r3, [r5, #0]
 801510e:	b103      	cbz	r3, 8015112 <_sbrk_r+0x1a>
 8015110:	6023      	str	r3, [r4, #0]
 8015112:	bd38      	pop	{r3, r4, r5, pc}
 8015114:	2000230c 	.word	0x2000230c

08015118 <__assert_func>:
 8015118:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801511a:	4614      	mov	r4, r2
 801511c:	461a      	mov	r2, r3
 801511e:	4b09      	ldr	r3, [pc, #36]	@ (8015144 <__assert_func+0x2c>)
 8015120:	681b      	ldr	r3, [r3, #0]
 8015122:	4605      	mov	r5, r0
 8015124:	68d8      	ldr	r0, [r3, #12]
 8015126:	b14c      	cbz	r4, 801513c <__assert_func+0x24>
 8015128:	4b07      	ldr	r3, [pc, #28]	@ (8015148 <__assert_func+0x30>)
 801512a:	9100      	str	r1, [sp, #0]
 801512c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015130:	4906      	ldr	r1, [pc, #24]	@ (801514c <__assert_func+0x34>)
 8015132:	462b      	mov	r3, r5
 8015134:	f000 f842 	bl	80151bc <fiprintf>
 8015138:	f000 f8d6 	bl	80152e8 <abort>
 801513c:	4b04      	ldr	r3, [pc, #16]	@ (8015150 <__assert_func+0x38>)
 801513e:	461c      	mov	r4, r3
 8015140:	e7f3      	b.n	801512a <__assert_func+0x12>
 8015142:	bf00      	nop
 8015144:	20000138 	.word	0x20000138
 8015148:	08015655 	.word	0x08015655
 801514c:	08015662 	.word	0x08015662
 8015150:	08015690 	.word	0x08015690

08015154 <_calloc_r>:
 8015154:	b570      	push	{r4, r5, r6, lr}
 8015156:	fba1 5402 	umull	r5, r4, r1, r2
 801515a:	b934      	cbnz	r4, 801516a <_calloc_r+0x16>
 801515c:	4629      	mov	r1, r5
 801515e:	f7ff f90f 	bl	8014380 <_malloc_r>
 8015162:	4606      	mov	r6, r0
 8015164:	b928      	cbnz	r0, 8015172 <_calloc_r+0x1e>
 8015166:	4630      	mov	r0, r6
 8015168:	bd70      	pop	{r4, r5, r6, pc}
 801516a:	220c      	movs	r2, #12
 801516c:	6002      	str	r2, [r0, #0]
 801516e:	2600      	movs	r6, #0
 8015170:	e7f9      	b.n	8015166 <_calloc_r+0x12>
 8015172:	462a      	mov	r2, r5
 8015174:	4621      	mov	r1, r4
 8015176:	f7fe f9a6 	bl	80134c6 <memset>
 801517a:	e7f4      	b.n	8015166 <_calloc_r+0x12>

0801517c <__ascii_mbtowc>:
 801517c:	b082      	sub	sp, #8
 801517e:	b901      	cbnz	r1, 8015182 <__ascii_mbtowc+0x6>
 8015180:	a901      	add	r1, sp, #4
 8015182:	b142      	cbz	r2, 8015196 <__ascii_mbtowc+0x1a>
 8015184:	b14b      	cbz	r3, 801519a <__ascii_mbtowc+0x1e>
 8015186:	7813      	ldrb	r3, [r2, #0]
 8015188:	600b      	str	r3, [r1, #0]
 801518a:	7812      	ldrb	r2, [r2, #0]
 801518c:	1e10      	subs	r0, r2, #0
 801518e:	bf18      	it	ne
 8015190:	2001      	movne	r0, #1
 8015192:	b002      	add	sp, #8
 8015194:	4770      	bx	lr
 8015196:	4610      	mov	r0, r2
 8015198:	e7fb      	b.n	8015192 <__ascii_mbtowc+0x16>
 801519a:	f06f 0001 	mvn.w	r0, #1
 801519e:	e7f8      	b.n	8015192 <__ascii_mbtowc+0x16>

080151a0 <__ascii_wctomb>:
 80151a0:	4603      	mov	r3, r0
 80151a2:	4608      	mov	r0, r1
 80151a4:	b141      	cbz	r1, 80151b8 <__ascii_wctomb+0x18>
 80151a6:	2aff      	cmp	r2, #255	@ 0xff
 80151a8:	d904      	bls.n	80151b4 <__ascii_wctomb+0x14>
 80151aa:	228a      	movs	r2, #138	@ 0x8a
 80151ac:	601a      	str	r2, [r3, #0]
 80151ae:	f04f 30ff 	mov.w	r0, #4294967295
 80151b2:	4770      	bx	lr
 80151b4:	700a      	strb	r2, [r1, #0]
 80151b6:	2001      	movs	r0, #1
 80151b8:	4770      	bx	lr
	...

080151bc <fiprintf>:
 80151bc:	b40e      	push	{r1, r2, r3}
 80151be:	b503      	push	{r0, r1, lr}
 80151c0:	4601      	mov	r1, r0
 80151c2:	ab03      	add	r3, sp, #12
 80151c4:	4805      	ldr	r0, [pc, #20]	@ (80151dc <fiprintf+0x20>)
 80151c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80151ca:	6800      	ldr	r0, [r0, #0]
 80151cc:	9301      	str	r3, [sp, #4]
 80151ce:	f7ff fd07 	bl	8014be0 <_vfiprintf_r>
 80151d2:	b002      	add	sp, #8
 80151d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80151d8:	b003      	add	sp, #12
 80151da:	4770      	bx	lr
 80151dc:	20000138 	.word	0x20000138

080151e0 <__swhatbuf_r>:
 80151e0:	b570      	push	{r4, r5, r6, lr}
 80151e2:	460c      	mov	r4, r1
 80151e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151e8:	2900      	cmp	r1, #0
 80151ea:	b096      	sub	sp, #88	@ 0x58
 80151ec:	4615      	mov	r5, r2
 80151ee:	461e      	mov	r6, r3
 80151f0:	da0d      	bge.n	801520e <__swhatbuf_r+0x2e>
 80151f2:	89a3      	ldrh	r3, [r4, #12]
 80151f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80151f8:	f04f 0100 	mov.w	r1, #0
 80151fc:	bf14      	ite	ne
 80151fe:	2340      	movne	r3, #64	@ 0x40
 8015200:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015204:	2000      	movs	r0, #0
 8015206:	6031      	str	r1, [r6, #0]
 8015208:	602b      	str	r3, [r5, #0]
 801520a:	b016      	add	sp, #88	@ 0x58
 801520c:	bd70      	pop	{r4, r5, r6, pc}
 801520e:	466a      	mov	r2, sp
 8015210:	f000 f848 	bl	80152a4 <_fstat_r>
 8015214:	2800      	cmp	r0, #0
 8015216:	dbec      	blt.n	80151f2 <__swhatbuf_r+0x12>
 8015218:	9901      	ldr	r1, [sp, #4]
 801521a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801521e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015222:	4259      	negs	r1, r3
 8015224:	4159      	adcs	r1, r3
 8015226:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801522a:	e7eb      	b.n	8015204 <__swhatbuf_r+0x24>

0801522c <__smakebuf_r>:
 801522c:	898b      	ldrh	r3, [r1, #12]
 801522e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015230:	079d      	lsls	r5, r3, #30
 8015232:	4606      	mov	r6, r0
 8015234:	460c      	mov	r4, r1
 8015236:	d507      	bpl.n	8015248 <__smakebuf_r+0x1c>
 8015238:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801523c:	6023      	str	r3, [r4, #0]
 801523e:	6123      	str	r3, [r4, #16]
 8015240:	2301      	movs	r3, #1
 8015242:	6163      	str	r3, [r4, #20]
 8015244:	b003      	add	sp, #12
 8015246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015248:	ab01      	add	r3, sp, #4
 801524a:	466a      	mov	r2, sp
 801524c:	f7ff ffc8 	bl	80151e0 <__swhatbuf_r>
 8015250:	9f00      	ldr	r7, [sp, #0]
 8015252:	4605      	mov	r5, r0
 8015254:	4639      	mov	r1, r7
 8015256:	4630      	mov	r0, r6
 8015258:	f7ff f892 	bl	8014380 <_malloc_r>
 801525c:	b948      	cbnz	r0, 8015272 <__smakebuf_r+0x46>
 801525e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015262:	059a      	lsls	r2, r3, #22
 8015264:	d4ee      	bmi.n	8015244 <__smakebuf_r+0x18>
 8015266:	f023 0303 	bic.w	r3, r3, #3
 801526a:	f043 0302 	orr.w	r3, r3, #2
 801526e:	81a3      	strh	r3, [r4, #12]
 8015270:	e7e2      	b.n	8015238 <__smakebuf_r+0xc>
 8015272:	89a3      	ldrh	r3, [r4, #12]
 8015274:	6020      	str	r0, [r4, #0]
 8015276:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801527a:	81a3      	strh	r3, [r4, #12]
 801527c:	9b01      	ldr	r3, [sp, #4]
 801527e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015282:	b15b      	cbz	r3, 801529c <__smakebuf_r+0x70>
 8015284:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015288:	4630      	mov	r0, r6
 801528a:	f000 f81d 	bl	80152c8 <_isatty_r>
 801528e:	b128      	cbz	r0, 801529c <__smakebuf_r+0x70>
 8015290:	89a3      	ldrh	r3, [r4, #12]
 8015292:	f023 0303 	bic.w	r3, r3, #3
 8015296:	f043 0301 	orr.w	r3, r3, #1
 801529a:	81a3      	strh	r3, [r4, #12]
 801529c:	89a3      	ldrh	r3, [r4, #12]
 801529e:	431d      	orrs	r5, r3
 80152a0:	81a5      	strh	r5, [r4, #12]
 80152a2:	e7cf      	b.n	8015244 <__smakebuf_r+0x18>

080152a4 <_fstat_r>:
 80152a4:	b538      	push	{r3, r4, r5, lr}
 80152a6:	4d07      	ldr	r5, [pc, #28]	@ (80152c4 <_fstat_r+0x20>)
 80152a8:	2300      	movs	r3, #0
 80152aa:	4604      	mov	r4, r0
 80152ac:	4608      	mov	r0, r1
 80152ae:	4611      	mov	r1, r2
 80152b0:	602b      	str	r3, [r5, #0]
 80152b2:	f7ef ff63 	bl	800517c <_fstat>
 80152b6:	1c43      	adds	r3, r0, #1
 80152b8:	d102      	bne.n	80152c0 <_fstat_r+0x1c>
 80152ba:	682b      	ldr	r3, [r5, #0]
 80152bc:	b103      	cbz	r3, 80152c0 <_fstat_r+0x1c>
 80152be:	6023      	str	r3, [r4, #0]
 80152c0:	bd38      	pop	{r3, r4, r5, pc}
 80152c2:	bf00      	nop
 80152c4:	2000230c 	.word	0x2000230c

080152c8 <_isatty_r>:
 80152c8:	b538      	push	{r3, r4, r5, lr}
 80152ca:	4d06      	ldr	r5, [pc, #24]	@ (80152e4 <_isatty_r+0x1c>)
 80152cc:	2300      	movs	r3, #0
 80152ce:	4604      	mov	r4, r0
 80152d0:	4608      	mov	r0, r1
 80152d2:	602b      	str	r3, [r5, #0]
 80152d4:	f7ef ff62 	bl	800519c <_isatty>
 80152d8:	1c43      	adds	r3, r0, #1
 80152da:	d102      	bne.n	80152e2 <_isatty_r+0x1a>
 80152dc:	682b      	ldr	r3, [r5, #0]
 80152de:	b103      	cbz	r3, 80152e2 <_isatty_r+0x1a>
 80152e0:	6023      	str	r3, [r4, #0]
 80152e2:	bd38      	pop	{r3, r4, r5, pc}
 80152e4:	2000230c 	.word	0x2000230c

080152e8 <abort>:
 80152e8:	b508      	push	{r3, lr}
 80152ea:	2006      	movs	r0, #6
 80152ec:	f000 f82c 	bl	8015348 <raise>
 80152f0:	2001      	movs	r0, #1
 80152f2:	f7ef fef3 	bl	80050dc <_exit>

080152f6 <_raise_r>:
 80152f6:	291f      	cmp	r1, #31
 80152f8:	b538      	push	{r3, r4, r5, lr}
 80152fa:	4605      	mov	r5, r0
 80152fc:	460c      	mov	r4, r1
 80152fe:	d904      	bls.n	801530a <_raise_r+0x14>
 8015300:	2316      	movs	r3, #22
 8015302:	6003      	str	r3, [r0, #0]
 8015304:	f04f 30ff 	mov.w	r0, #4294967295
 8015308:	bd38      	pop	{r3, r4, r5, pc}
 801530a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801530c:	b112      	cbz	r2, 8015314 <_raise_r+0x1e>
 801530e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015312:	b94b      	cbnz	r3, 8015328 <_raise_r+0x32>
 8015314:	4628      	mov	r0, r5
 8015316:	f000 f831 	bl	801537c <_getpid_r>
 801531a:	4622      	mov	r2, r4
 801531c:	4601      	mov	r1, r0
 801531e:	4628      	mov	r0, r5
 8015320:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015324:	f000 b818 	b.w	8015358 <_kill_r>
 8015328:	2b01      	cmp	r3, #1
 801532a:	d00a      	beq.n	8015342 <_raise_r+0x4c>
 801532c:	1c59      	adds	r1, r3, #1
 801532e:	d103      	bne.n	8015338 <_raise_r+0x42>
 8015330:	2316      	movs	r3, #22
 8015332:	6003      	str	r3, [r0, #0]
 8015334:	2001      	movs	r0, #1
 8015336:	e7e7      	b.n	8015308 <_raise_r+0x12>
 8015338:	2100      	movs	r1, #0
 801533a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801533e:	4620      	mov	r0, r4
 8015340:	4798      	blx	r3
 8015342:	2000      	movs	r0, #0
 8015344:	e7e0      	b.n	8015308 <_raise_r+0x12>
	...

08015348 <raise>:
 8015348:	4b02      	ldr	r3, [pc, #8]	@ (8015354 <raise+0xc>)
 801534a:	4601      	mov	r1, r0
 801534c:	6818      	ldr	r0, [r3, #0]
 801534e:	f7ff bfd2 	b.w	80152f6 <_raise_r>
 8015352:	bf00      	nop
 8015354:	20000138 	.word	0x20000138

08015358 <_kill_r>:
 8015358:	b538      	push	{r3, r4, r5, lr}
 801535a:	4d07      	ldr	r5, [pc, #28]	@ (8015378 <_kill_r+0x20>)
 801535c:	2300      	movs	r3, #0
 801535e:	4604      	mov	r4, r0
 8015360:	4608      	mov	r0, r1
 8015362:	4611      	mov	r1, r2
 8015364:	602b      	str	r3, [r5, #0]
 8015366:	f7ef fea9 	bl	80050bc <_kill>
 801536a:	1c43      	adds	r3, r0, #1
 801536c:	d102      	bne.n	8015374 <_kill_r+0x1c>
 801536e:	682b      	ldr	r3, [r5, #0]
 8015370:	b103      	cbz	r3, 8015374 <_kill_r+0x1c>
 8015372:	6023      	str	r3, [r4, #0]
 8015374:	bd38      	pop	{r3, r4, r5, pc}
 8015376:	bf00      	nop
 8015378:	2000230c 	.word	0x2000230c

0801537c <_getpid_r>:
 801537c:	f7ef be96 	b.w	80050ac <_getpid>

08015380 <_init>:
 8015380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015382:	bf00      	nop
 8015384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015386:	bc08      	pop	{r3}
 8015388:	469e      	mov	lr, r3
 801538a:	4770      	bx	lr

0801538c <_fini>:
 801538c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801538e:	bf00      	nop
 8015390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015392:	bc08      	pop	{r3}
 8015394:	469e      	mov	lr, r3
 8015396:	4770      	bx	lr
