
ratatouille_transfer_IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015190  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000500  080152d0  080152d0  000162d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080157d0  080157d0  000167d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080157d8  080157d8  000167d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080157dc  080157dc  000167dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002ec  20000008  080157e0  00017008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002028  200002f4  08015acc  000172f4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000231c  08015acc  0001731c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000172f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002da90  00000000  00000000  00017324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000057c5  00000000  00000000  00044db4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002b40  00000000  00000000  0004a580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000215b  00000000  00000000  0004d0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002ab65  00000000  00000000  0004f21b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002f2f2  00000000  00000000  00079d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0010099a  00000000  00000000  000a9072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a9a0c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ca00  00000000  00000000  001a9a50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000089  00000000  00000000  001b6450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002f4 	.word	0x200002f4
 800015c:	00000000 	.word	0x00000000
 8000160:	080152b8 	.word	0x080152b8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002f8 	.word	0x200002f8
 800017c:	080152b8 	.word	0x080152b8

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <bmi160_get_regs>:
/*!
 * @brief This API reads the data from the given register address
 * of sensor.
 */
int8_t bmi160_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 8000ee8:	b590      	push	{r4, r7, lr}
 8000eea:	b087      	sub	sp, #28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60b9      	str	r1, [r7, #8]
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	73fb      	strb	r3, [r7, #15]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 8000efa:	2300      	movs	r3, #0
 8000efc:	75fb      	strb	r3, [r7, #23]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->read == NULL))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d003      	beq.n	8000f0c <bmi160_get_regs+0x24>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	69db      	ldr	r3, [r3, #28]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d102      	bne.n	8000f12 <bmi160_get_regs+0x2a>
    {
        rslt = BMI160_E_NULL_PTR;
 8000f0c:	23ff      	movs	r3, #255	@ 0xff
 8000f0e:	75fb      	strb	r3, [r7, #23]
 8000f10:	e017      	b.n	8000f42 <bmi160_get_regs+0x5a>
    }
    else if (len == 0)
 8000f12:	89bb      	ldrh	r3, [r7, #12]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d102      	bne.n	8000f1e <bmi160_get_regs+0x36>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 8000f18:	23f4      	movs	r3, #244	@ 0xf4
 8000f1a:	75fb      	strb	r3, [r7, #23]
 8000f1c:	e011      	b.n	8000f42 <bmi160_get_regs+0x5a>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	789b      	ldrb	r3, [r3, #2]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d103      	bne.n	8000f2e <bmi160_get_regs+0x46>
        {
            reg_addr = (reg_addr | BMI160_SPI_RD_MASK);
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f2c:	73fb      	strb	r3, [r7, #15]
        }

        rslt = dev->read(dev->id, reg_addr, data, len);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	69dc      	ldr	r4, [r3, #28]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	7858      	ldrb	r0, [r3, #1]
 8000f36:	89bb      	ldrh	r3, [r7, #12]
 8000f38:	7bf9      	ldrb	r1, [r7, #15]
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	47a0      	blx	r4
 8000f3e:	4603      	mov	r3, r0
 8000f40:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000f42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	371c      	adds	r7, #28
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd90      	pop	{r4, r7, pc}

08000f4e <bmi160_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of sensor.
 */
int8_t bmi160_set_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 8000f4e:	b590      	push	{r4, r7, lr}
 8000f50:	b087      	sub	sp, #28
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	4603      	mov	r3, r0
 8000f5a:	73fb      	strb	r3, [r7, #15]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 8000f60:	2300      	movs	r3, #0
 8000f62:	75fb      	strb	r3, [r7, #23]
    uint8_t count = 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	75bb      	strb	r3, [r7, #22]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->write == NULL))
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <bmi160_set_regs+0x28>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6a1b      	ldr	r3, [r3, #32]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d102      	bne.n	8000f7c <bmi160_set_regs+0x2e>
    {
        rslt = BMI160_E_NULL_PTR;
 8000f76:	23ff      	movs	r3, #255	@ 0xff
 8000f78:	75fb      	strb	r3, [r7, #23]
 8000f7a:	e045      	b.n	8001008 <bmi160_set_regs+0xba>
    }
    else if (len == 0)
 8000f7c:	89bb      	ldrh	r3, [r7, #12]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d102      	bne.n	8000f88 <bmi160_set_regs+0x3a>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 8000f82:	23f4      	movs	r3, #244	@ 0xf4
 8000f84:	75fb      	strb	r3, [r7, #23]
 8000f86:	e03f      	b.n	8001008 <bmi160_set_regs+0xba>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	789b      	ldrb	r3, [r3, #2]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d103      	bne.n	8000f98 <bmi160_set_regs+0x4a>
        {
            reg_addr = (reg_addr & BMI160_SPI_WR_MASK);
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f96:	73fb      	strb	r3, [r7, #15]
        }

        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	7a1b      	ldrb	r3, [r3, #8]
 8000f9c:	2b11      	cmp	r3, #17
 8000f9e:	d003      	beq.n	8000fa8 <bmi160_set_regs+0x5a>
            (dev->prev_gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	7c1b      	ldrb	r3, [r3, #16]
        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 8000fa4:	2b15      	cmp	r3, #21
 8000fa6:	d124      	bne.n	8000ff2 <bmi160_set_regs+0xa4>
        {
            rslt = dev->write(dev->id, reg_addr, data, len);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a1c      	ldr	r4, [r3, #32]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	7858      	ldrb	r0, [r3, #1]
 8000fb0:	89bb      	ldrh	r3, [r7, #12]
 8000fb2:	7bf9      	ldrb	r1, [r7, #15]
 8000fb4:	68ba      	ldr	r2, [r7, #8]
 8000fb6:	47a0      	blx	r4
 8000fb8:	4603      	mov	r3, r0
 8000fba:	75fb      	strb	r3, [r7, #23]

            /* Kindly refer bmi160 data sheet section 3.2.4 */
            dev->delay_ms(1);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	4798      	blx	r3
 8000fc4:	e01a      	b.n	8000ffc <bmi160_set_regs+0xae>
        {
            /*Burst write is not allowed in
             * suspend & low power mode */
            for (; count < len; count++)
            {
                rslt = dev->write(dev->id, reg_addr, &data[count], 1);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6a1c      	ldr	r4, [r3, #32]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	7858      	ldrb	r0, [r3, #1]
 8000fce:	7dbb      	ldrb	r3, [r7, #22]
 8000fd0:	68ba      	ldr	r2, [r7, #8]
 8000fd2:	441a      	add	r2, r3
 8000fd4:	7bf9      	ldrb	r1, [r7, #15]
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	47a0      	blx	r4
 8000fda:	4603      	mov	r3, r0
 8000fdc:	75fb      	strb	r3, [r7, #23]
                reg_addr++;
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	73fb      	strb	r3, [r7, #15]

                /* Kindly refer bmi160 data sheet section 3.2.4 */
                dev->delay_ms(1);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fe8:	2001      	movs	r0, #1
 8000fea:	4798      	blx	r3
            for (; count < len; count++)
 8000fec:	7dbb      	ldrb	r3, [r7, #22]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	75bb      	strb	r3, [r7, #22]
 8000ff2:	7dbb      	ldrb	r3, [r7, #22]
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	89ba      	ldrh	r2, [r7, #12]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d8e4      	bhi.n	8000fc6 <bmi160_set_regs+0x78>

            }
        }

        if (rslt != BMI160_OK)
 8000ffc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <bmi160_set_regs+0xba>
        {
            rslt = BMI160_E_COM_FAIL;
 8001004:	23fe      	movs	r3, #254	@ 0xfe
 8001006:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8001008:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800100c:	4618      	mov	r0, r3
 800100e:	371c      	adds	r7, #28
 8001010:	46bd      	mov	sp, r7
 8001012:	bd90      	pop	{r4, r7, pc}

08001014 <bmi160_init>:
 *  @brief This API is the entry point for sensor.It performs
 *  the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of bmi160 sensor.
 */
int8_t bmi160_init(struct bmi160_dev *dev)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;
    uint8_t try = 3;
 800101c:	2303      	movs	r3, #3
 800101e:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f000 fd33 	bl	8001a8c <null_ptr_check>
 8001026:	4603      	mov	r3, r0
 8001028:	73fb      	strb	r3, [r7, #15]

    /* Dummy read of 0x7F register to enable SPI Interface
     * if SPI is used */
    if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 800102a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d10c      	bne.n	800104c <bmi160_init+0x38>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	789b      	ldrb	r3, [r3, #2]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d108      	bne.n	800104c <bmi160_init+0x38>
    {
        rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 800103a:	f107 010d 	add.w	r1, r7, #13
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2201      	movs	r2, #1
 8001042:	207f      	movs	r0, #127	@ 0x7f
 8001044:	f7ff ff50 	bl	8000ee8 <bmi160_get_regs>
 8001048:	4603      	mov	r3, r0
 800104a:	73fb      	strb	r3, [r7, #15]
    }

    if (rslt == BMI160_OK)
 800104c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d127      	bne.n	80010a4 <bmi160_init+0x90>
    {
        /* Assign chip id as zero */
        dev->chip_id = 0;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]

        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 800105a:	e007      	b.n	800106c <bmi160_init+0x58>
        {
            /* Read chip_id */
            rslt = bmi160_get_regs(BMI160_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 800105c:	6879      	ldr	r1, [r7, #4]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2201      	movs	r2, #1
 8001062:	2000      	movs	r0, #0
 8001064:	f7ff ff40 	bl	8000ee8 <bmi160_get_regs>
 8001068:	4603      	mov	r3, r0
 800106a:	73fb      	strb	r3, [r7, #15]
        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 800106c:	7bbb      	ldrb	r3, [r7, #14]
 800106e:	1e5a      	subs	r2, r3, #1
 8001070:	73ba      	strb	r2, [r7, #14]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <bmi160_init+0x6a>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2bd1      	cmp	r3, #209	@ 0xd1
 800107c:	d1ee      	bne.n	800105c <bmi160_init+0x48>
        }

        if ((rslt == BMI160_OK) && (dev->chip_id == BMI160_CHIP_ID))
 800107e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d10c      	bne.n	80010a0 <bmi160_init+0x8c>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2bd1      	cmp	r3, #209	@ 0xd1
 800108c:	d108      	bne.n	80010a0 <bmi160_init+0x8c>
        {
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	22ff      	movs	r2, #255	@ 0xff
 8001092:	70da      	strb	r2, [r3, #3]

            /* Soft reset */
            rslt = bmi160_soft_reset(dev);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f000 f80b 	bl	80010b0 <bmi160_soft_reset>
 800109a:	4603      	mov	r3, r0
 800109c:	73fb      	strb	r3, [r7, #15]
 800109e:	e001      	b.n	80010a4 <bmi160_init+0x90>
        }
        else
        {
            rslt = BMI160_E_DEV_NOT_FOUND;
 80010a0:	23fd      	movs	r3, #253	@ 0xfd
 80010a2:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80010a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <bmi160_soft_reset>:
/*!
 * @brief This API resets and restarts the device.
 * All register values are overwritten with default parameters.
 */
int8_t bmi160_soft_reset(struct bmi160_dev *dev)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = BMI160_SOFT_RESET_CMD;
 80010b8:	23b6      	movs	r3, #182	@ 0xb6
 80010ba:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <bmi160_soft_reset+0x1a>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d102      	bne.n	80010d0 <bmi160_soft_reset+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 80010ca:	23ff      	movs	r3, #255	@ 0xff
 80010cc:	73fb      	strb	r3, [r7, #15]
 80010ce:	e024      	b.n	800111a <bmi160_soft_reset+0x6a>
    }
    else
    {
        /* Reset the device */
        rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &data, 1, dev);
 80010d0:	f107 010e 	add.w	r1, r7, #14
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2201      	movs	r2, #1
 80010d8:	207e      	movs	r0, #126	@ 0x7e
 80010da:	f7ff ff38 	bl	8000f4e <bmi160_set_regs>
 80010de:	4603      	mov	r3, r0
 80010e0:	73fb      	strb	r3, [r7, #15]
        dev->delay_ms(BMI160_SOFT_RESET_DELAY_MS);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e6:	2001      	movs	r0, #1
 80010e8:	4798      	blx	r3
        if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 80010ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d10c      	bne.n	800110c <bmi160_soft_reset+0x5c>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	789b      	ldrb	r3, [r3, #2]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d108      	bne.n	800110c <bmi160_soft_reset+0x5c>
        {
            /* Dummy read of 0x7F register to enable SPI Interface
             * if SPI is used */
            rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 80010fa:	f107 010e 	add.w	r1, r7, #14
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2201      	movs	r2, #1
 8001102:	207f      	movs	r0, #127	@ 0x7f
 8001104:	f7ff fef0 	bl	8000ee8 <bmi160_get_regs>
 8001108:	4603      	mov	r3, r0
 800110a:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI160_OK)
 800110c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d102      	bne.n	800111a <bmi160_soft_reset+0x6a>
        {
            /* Update the default parameters */
            default_param_settg(dev);
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f000 fcd9 	bl	8001acc <default_param_settg>
        }
    }

    return rslt;
 800111a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <bmi160_set_sens_conf>:
/*!
 * @brief This API configures the power mode, range and bandwidth
 * of sensor.
 */
int8_t bmi160_set_sens_conf(struct bmi160_dev *dev)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b084      	sub	sp, #16
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMI160_OK;
 800112e:	2300      	movs	r3, #0
 8001130:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <bmi160_set_sens_conf+0x1a>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800113c:	2b00      	cmp	r3, #0
 800113e:	d102      	bne.n	8001146 <bmi160_set_sens_conf+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 8001140:	23ff      	movs	r3, #255	@ 0xff
 8001142:	73fb      	strb	r3, [r7, #15]
 8001144:	e01f      	b.n	8001186 <bmi160_set_sens_conf+0x60>
    }
    else
    {
        rslt = set_accel_conf(dev);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f000 fcea 	bl	8001b20 <set_accel_conf>
 800114c:	4603      	mov	r3, r0
 800114e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001150:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d116      	bne.n	8001186 <bmi160_set_sens_conf+0x60>
        {
            rslt = set_gyro_conf(dev);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f000 fe25 	bl	8001da8 <set_gyro_conf>
 800115e:	4603      	mov	r3, r0
 8001160:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d10d      	bne.n	8001186 <bmi160_set_sens_conf+0x60>
            {
                /* write power mode for accel and gyro */
                rslt = bmi160_set_power_mode(dev);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f000 f811 	bl	8001192 <bmi160_set_power_mode>
 8001170:	4603      	mov	r3, r0
 8001172:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8001174:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d104      	bne.n	8001186 <bmi160_set_sens_conf+0x60>
                {
                    rslt = check_invalid_settg(dev);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f000 fdde 	bl	8001d3e <check_invalid_settg>
 8001182:	4603      	mov	r3, r0
 8001184:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001186:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800118a:	4618      	mov	r0, r3
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <bmi160_set_power_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmi160_set_power_mode(struct bmi160_dev *dev)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b084      	sub	sp, #16
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d003      	beq.n	80011ac <bmi160_set_power_mode+0x1a>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d102      	bne.n	80011b2 <bmi160_set_power_mode+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 80011ac:	23ff      	movs	r3, #255	@ 0xff
 80011ae:	73fb      	strb	r3, [r7, #15]
 80011b0:	e00d      	b.n	80011ce <bmi160_set_power_mode+0x3c>
    }
    else
    {
        rslt = set_accel_pwr(dev);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f000 ff01 	bl	8001fba <set_accel_pwr>
 80011b8:	4603      	mov	r3, r0
 80011ba:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80011bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d104      	bne.n	80011ce <bmi160_set_power_mode+0x3c>
        {
            rslt = set_gyro_pwr(dev);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f000 ff8f 	bl	80020e8 <set_gyro_pwr>
 80011ca:	4603      	mov	r3, r0
 80011cc:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80011ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <bmi160_get_sensor_data>:
 */
int8_t bmi160_get_sensor_data(uint8_t select_sensor,
                              struct bmi160_sensor_data *accel,
                              struct bmi160_sensor_data *gyro,
                              const struct bmi160_dev *dev)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b086      	sub	sp, #24
 80011de:	af00      	add	r7, sp, #0
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
 80011e4:	603b      	str	r3, [r7, #0]
 80011e6:	4603      	mov	r3, r0
 80011e8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI160_OK;
 80011ea:	2300      	movs	r3, #0
 80011ec:	75fb      	strb	r3, [r7, #23]
    uint8_t time_sel;
    uint8_t sen_sel;
    uint8_t len = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	75bb      	strb	r3, [r7, #22]

    /*Extract the sensor  and time select information*/
    sen_sel = select_sensor & BMI160_SEN_SEL_MASK;
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	f003 0307 	and.w	r3, r3, #7
 80011f8:	757b      	strb	r3, [r7, #21]
    time_sel = ((sen_sel & BMI160_TIME_SEL) >> 2);
 80011fa:	7d7b      	ldrb	r3, [r7, #21]
 80011fc:	109b      	asrs	r3, r3, #2
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	753b      	strb	r3, [r7, #20]
    sen_sel = sen_sel & (BMI160_ACCEL_SEL | BMI160_GYRO_SEL);
 8001206:	7d7b      	ldrb	r3, [r7, #21]
 8001208:	f003 0303 	and.w	r3, r3, #3
 800120c:	757b      	strb	r3, [r7, #21]
    if (time_sel == 1)
 800120e:	7d3b      	ldrb	r3, [r7, #20]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d101      	bne.n	8001218 <bmi160_get_sensor_data+0x3e>
    {
        len = 3;
 8001214:	2303      	movs	r3, #3
 8001216:	75bb      	strb	r3, [r7, #22]
    }

    /* Null-pointer check */
    if (dev != NULL)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d03c      	beq.n	8001298 <bmi160_get_sensor_data+0xbe>
    {
        switch (sen_sel)
 800121e:	7d7b      	ldrb	r3, [r7, #21]
 8001220:	2b03      	cmp	r3, #3
 8001222:	d024      	beq.n	800126e <bmi160_get_sensor_data+0x94>
 8001224:	2b03      	cmp	r3, #3
 8001226:	dc34      	bgt.n	8001292 <bmi160_get_sensor_data+0xb8>
 8001228:	2b01      	cmp	r3, #1
 800122a:	d002      	beq.n	8001232 <bmi160_get_sensor_data+0x58>
 800122c:	2b02      	cmp	r3, #2
 800122e:	d00f      	beq.n	8001250 <bmi160_get_sensor_data+0x76>
 8001230:	e02f      	b.n	8001292 <bmi160_get_sensor_data+0xb8>
        {
            case BMI160_ACCEL_ONLY:

                /* Null-pointer check */
                if (accel == NULL)
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d102      	bne.n	800123e <bmi160_get_sensor_data+0x64>
                {
                    rslt = BMI160_E_NULL_PTR;
 8001238:	23ff      	movs	r3, #255	@ 0xff
 800123a:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_accel_data(len, accel, dev);
                }

                break;
 800123c:	e02e      	b.n	800129c <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_data(len, accel, dev);
 800123e:	7dbb      	ldrb	r3, [r7, #22]
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	68b9      	ldr	r1, [r7, #8]
 8001244:	4618      	mov	r0, r3
 8001246:	f000 ff93 	bl	8002170 <get_accel_data>
 800124a:	4603      	mov	r3, r0
 800124c:	75fb      	strb	r3, [r7, #23]
                break;
 800124e:	e025      	b.n	800129c <bmi160_get_sensor_data+0xc2>
            case BMI160_GYRO_ONLY:

                /* Null-pointer check */
                if (gyro == NULL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d102      	bne.n	800125c <bmi160_get_sensor_data+0x82>
                {
                    rslt = BMI160_E_NULL_PTR;
 8001256:	23ff      	movs	r3, #255	@ 0xff
 8001258:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_gyro_data(len, gyro, dev);
                }

                break;
 800125a:	e01f      	b.n	800129c <bmi160_get_sensor_data+0xc2>
                    rslt = get_gyro_data(len, gyro, dev);
 800125c:	7dbb      	ldrb	r3, [r7, #22]
 800125e:	683a      	ldr	r2, [r7, #0]
 8001260:	6879      	ldr	r1, [r7, #4]
 8001262:	4618      	mov	r0, r3
 8001264:	f001 f84e 	bl	8002304 <get_gyro_data>
 8001268:	4603      	mov	r3, r0
 800126a:	75fb      	strb	r3, [r7, #23]
                break;
 800126c:	e016      	b.n	800129c <bmi160_get_sensor_data+0xc2>
            case BMI160_BOTH_ACCEL_AND_GYRO:

                /* Null-pointer check */
                if ((gyro == NULL) || (accel == NULL))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d002      	beq.n	800127a <bmi160_get_sensor_data+0xa0>
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d102      	bne.n	8001280 <bmi160_get_sensor_data+0xa6>
                {
                    rslt = BMI160_E_NULL_PTR;
 800127a:	23ff      	movs	r3, #255	@ 0xff
 800127c:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
                }

                break;
 800127e:	e00d      	b.n	800129c <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
 8001280:	7db8      	ldrb	r0, [r7, #22]
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	68b9      	ldr	r1, [r7, #8]
 8001288:	f001 f985 	bl	8002596 <get_accel_gyro_data>
 800128c:	4603      	mov	r3, r0
 800128e:	75fb      	strb	r3, [r7, #23]
                break;
 8001290:	e004      	b.n	800129c <bmi160_get_sensor_data+0xc2>
            default:
                rslt = BMI160_E_INVALID_INPUT;
 8001292:	23fb      	movs	r3, #251	@ 0xfb
 8001294:	75fb      	strb	r3, [r7, #23]
                break;
 8001296:	e001      	b.n	800129c <bmi160_get_sensor_data+0xc2>
        }
    }
    else
    {
        rslt = BMI160_E_NULL_PTR;
 8001298:	23ff      	movs	r3, #255	@ 0xff
 800129a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800129c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <bmi160_set_int_config>:
/*!
 * @brief This API configures the necessary interrupt based on
 *  the user settings in the bmi160_int_settg structure instance.
 */
int8_t bmi160_set_int_config(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	73fb      	strb	r3, [r7, #15]

    switch (int_config->int_type)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	785b      	ldrb	r3, [r3, #1]
 80012ba:	2b0d      	cmp	r3, #13
 80012bc:	d879      	bhi.n	80013b2 <bmi160_set_int_config+0x10a>
 80012be:	a201      	add	r2, pc, #4	@ (adr r2, 80012c4 <bmi160_set_int_config+0x1c>)
 80012c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c4:	080012fd 	.word	0x080012fd
 80012c8:	0800130b 	.word	0x0800130b
 80012cc:	08001335 	.word	0x08001335
 80012d0:	08001327 	.word	0x08001327
 80012d4:	08001327 	.word	0x08001327
 80012d8:	08001343 	.word	0x08001343
 80012dc:	08001351 	.word	0x08001351
 80012e0:	0800136d 	.word	0x0800136d
 80012e4:	0800135f 	.word	0x0800135f
 80012e8:	08001319 	.word	0x08001319
 80012ec:	0800137b 	.word	0x0800137b
 80012f0:	08001389 	.word	0x08001389
 80012f4:	08001397 	.word	0x08001397
 80012f8:	080013a5 	.word	0x080013a5
    {
        case BMI160_ACC_ANY_MOTION_INT:

            /*Any-motion  interrupt*/
            rslt = set_accel_any_motion_int(int_config, dev);
 80012fc:	6839      	ldr	r1, [r7, #0]
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 f95a 	bl	80015b8 <set_accel_any_motion_int>
 8001304:	4603      	mov	r3, r0
 8001306:	73fb      	strb	r3, [r7, #15]
            break;
 8001308:	e054      	b.n	80013b4 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_SIG_MOTION_INT:

            /* Significant motion interrupt */
            rslt = set_accel_sig_motion_int(int_config, dev);
 800130a:	6839      	ldr	r1, [r7, #0]
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f000 f9ed 	bl	80016ec <set_accel_sig_motion_int>
 8001312:	4603      	mov	r3, r0
 8001314:	73fb      	strb	r3, [r7, #15]
            break;
 8001316:	e04d      	b.n	80013b4 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_SLOW_NO_MOTION_INT:

            /* Slow or no motion interrupt */
            rslt = set_accel_no_motion_int(int_config, dev);
 8001318:	6839      	ldr	r1, [r7, #0]
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 fa14 	bl	8001748 <set_accel_no_motion_int>
 8001320:	4603      	mov	r3, r0
 8001322:	73fb      	strb	r3, [r7, #15]
            break;
 8001324:	e046      	b.n	80013b4 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_DOUBLE_TAP_INT:
        case BMI160_ACC_SINGLE_TAP_INT:

            /* Double tap and single tap Interrupt */
            rslt = set_accel_tap_int(int_config, dev);
 8001326:	6839      	ldr	r1, [r7, #0]
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f000 f973 	bl	8001614 <set_accel_tap_int>
 800132e:	4603      	mov	r3, r0
 8001330:	73fb      	strb	r3, [r7, #15]
            break;
 8001332:	e03f      	b.n	80013b4 <bmi160_set_int_config+0x10c>
        case BMI160_STEP_DETECT_INT:

            /* Step detector interrupt */
            rslt = set_accel_step_detect_int(int_config, dev);
 8001334:	6839      	ldr	r1, [r7, #0]
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f000 fa34 	bl	80017a4 <set_accel_step_detect_int>
 800133c:	4603      	mov	r3, r0
 800133e:	73fb      	strb	r3, [r7, #15]
            break;
 8001340:	e038      	b.n	80013b4 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_ORIENT_INT:

            /* Orientation interrupt */
            rslt = set_accel_orientation_int(int_config, dev);
 8001342:	6839      	ldr	r1, [r7, #0]
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f000 fa6e 	bl	8001826 <set_accel_orientation_int>
 800134a:	4603      	mov	r3, r0
 800134c:	73fb      	strb	r3, [r7, #15]
            break;
 800134e:	e031      	b.n	80013b4 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_FLAT_INT:

            /* Flat detection interrupt */
            rslt = set_accel_flat_detect_int(int_config, dev);
 8001350:	6839      	ldr	r1, [r7, #0]
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f000 faa8 	bl	80018a8 <set_accel_flat_detect_int>
 8001358:	4603      	mov	r3, r0
 800135a:	73fb      	strb	r3, [r7, #15]
            break;
 800135c:	e02a      	b.n	80013b4 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_LOW_G_INT:

            /* Low-g interrupt */
            rslt = set_accel_low_g_int(int_config, dev);
 800135e:	6839      	ldr	r1, [r7, #0]
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f000 fae2 	bl	800192a <set_accel_low_g_int>
 8001366:	4603      	mov	r3, r0
 8001368:	73fb      	strb	r3, [r7, #15]
            break;
 800136a:	e023      	b.n	80013b4 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_HIGH_G_INT:

            /* High-g interrupt */
            rslt = set_accel_high_g_int(int_config, dev);
 800136c:	6839      	ldr	r1, [r7, #0]
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 fb26 	bl	80019c0 <set_accel_high_g_int>
 8001374:	4603      	mov	r3, r0
 8001376:	73fb      	strb	r3, [r7, #15]
            break;
 8001378:	e01c      	b.n	80013b4 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_DATA_RDY_INT:

            /* Data ready interrupt */
            rslt = set_accel_gyro_data_ready_int(int_config, dev);
 800137a:	6839      	ldr	r1, [r7, #0]
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f000 f982 	bl	8001686 <set_accel_gyro_data_ready_int>
 8001382:	4603      	mov	r3, r0
 8001384:	73fb      	strb	r3, [r7, #15]
            break;
 8001386:	e015      	b.n	80013b4 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_FIFO_FULL_INT:

            /* Fifo full interrupt */
            rslt = set_fifo_full_int(int_config, dev);
 8001388:	6839      	ldr	r1, [r7, #0]
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f002 fd50 	bl	8003e30 <set_fifo_full_int>
 8001390:	4603      	mov	r3, r0
 8001392:	73fb      	strb	r3, [r7, #15]
            break;
 8001394:	e00e      	b.n	80013b4 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_FIFO_WATERMARK_INT:

            /* Fifo water-mark interrupt */
            rslt = set_fifo_watermark_int(int_config, dev);
 8001396:	6839      	ldr	r1, [r7, #0]
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f002 fdb0 	bl	8003efe <set_fifo_watermark_int>
 800139e:	4603      	mov	r3, r0
 80013a0:	73fb      	strb	r3, [r7, #15]
            break;
 80013a2:	e007      	b.n	80013b4 <bmi160_set_int_config+0x10c>
        case BMI160_FIFO_TAG_INT_PIN:

            /* Fifo tagging feature support */
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 80013a4:	6839      	ldr	r1, [r7, #0]
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f000 fb55 	bl	8001a56 <set_intr_pin_config>
 80013ac:	4603      	mov	r3, r0
 80013ae:	73fb      	strb	r3, [r7, #15]
            break;
 80013b0:	e000      	b.n	80013b4 <bmi160_set_int_config+0x10c>
        default:
            break;
 80013b2:	bf00      	nop
    }

    return rslt;
 80013b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <bmi160_start_foc>:
 *  Gyro FOC always targets value of 0 dps
 */
int8_t bmi160_start_foc(const struct bmi160_foc_conf *foc_conf,
                        struct bmi160_offsets *offset,
                        struct bmi160_dev const *dev)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 fb5d 	bl	8001a8c <null_ptr_check>
 80013d2:	4603      	mov	r3, r0
 80013d4:	75fb      	strb	r3, [r7, #23]
    if (rslt != BMI160_OK)
 80013d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d002      	beq.n	80013e4 <bmi160_start_foc+0x24>
    {
        rslt = BMI160_E_NULL_PTR;
 80013de:	23ff      	movs	r3, #255	@ 0xff
 80013e0:	75fb      	strb	r3, [r7, #23]
 80013e2:	e068      	b.n	80014b6 <bmi160_start_foc+0xf6>
    }
    else
    {
        /* Set the offset enable bits */
        rslt = configure_offset_enable(foc_conf, dev);
 80013e4:	6879      	ldr	r1, [r7, #4]
 80013e6:	68f8      	ldr	r0, [r7, #12]
 80013e8:	f002 fe10 	bl	800400c <configure_offset_enable>
 80013ec:	4603      	mov	r3, r0
 80013ee:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 80013f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d15e      	bne.n	80014b6 <bmi160_start_foc+0xf6>
        {
            /* Read the FOC config from the sensor */
            rslt = bmi160_get_regs(BMI160_FOC_CONF_ADDR, &data, 1, dev);
 80013f8:	f107 0116 	add.w	r1, r7, #22
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	2069      	movs	r0, #105	@ 0x69
 8001402:	f7ff fd71 	bl	8000ee8 <bmi160_get_regs>
 8001406:	4603      	mov	r3, r0
 8001408:	75fb      	strb	r3, [r7, #23]

            /* Set the FOC config for gyro */
            data = BMI160_SET_BITS(data, BMI160_GYRO_FOC_EN, foc_conf->foc_gyr_en);
 800140a:	7dbb      	ldrb	r3, [r7, #22]
 800140c:	b25b      	sxtb	r3, r3
 800140e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001412:	b25a      	sxtb	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	019b      	lsls	r3, r3, #6
 800141a:	b25b      	sxtb	r3, r3
 800141c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001420:	b25b      	sxtb	r3, r3
 8001422:	4313      	orrs	r3, r2
 8001424:	b25b      	sxtb	r3, r3
 8001426:	b2db      	uxtb	r3, r3
 8001428:	75bb      	strb	r3, [r7, #22]

            /* Set the FOC config for accel xyz axes */
            data = BMI160_SET_BITS(data, BMI160_ACCEL_FOC_X_CONF, foc_conf->foc_acc_x);
 800142a:	7dbb      	ldrb	r3, [r7, #22]
 800142c:	b25b      	sxtb	r3, r3
 800142e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001432:	b25a      	sxtb	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	785b      	ldrb	r3, [r3, #1]
 8001438:	011b      	lsls	r3, r3, #4
 800143a:	b25b      	sxtb	r3, r3
 800143c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001440:	b25b      	sxtb	r3, r3
 8001442:	4313      	orrs	r3, r2
 8001444:	b25b      	sxtb	r3, r3
 8001446:	b2db      	uxtb	r3, r3
 8001448:	75bb      	strb	r3, [r7, #22]
            data = BMI160_SET_BITS(data, BMI160_ACCEL_FOC_Y_CONF, foc_conf->foc_acc_y);
 800144a:	7dbb      	ldrb	r3, [r7, #22]
 800144c:	b25b      	sxtb	r3, r3
 800144e:	f023 030c 	bic.w	r3, r3, #12
 8001452:	b25a      	sxtb	r2, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	789b      	ldrb	r3, [r3, #2]
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	b25b      	sxtb	r3, r3
 800145c:	f003 030c 	and.w	r3, r3, #12
 8001460:	b25b      	sxtb	r3, r3
 8001462:	4313      	orrs	r3, r2
 8001464:	b25b      	sxtb	r3, r3
 8001466:	b2db      	uxtb	r3, r3
 8001468:	75bb      	strb	r3, [r7, #22]
            data = BMI160_SET_BITS_POS_0(data, BMI160_ACCEL_FOC_Z_CONF, foc_conf->foc_acc_z);
 800146a:	7dbb      	ldrb	r3, [r7, #22]
 800146c:	b25b      	sxtb	r3, r3
 800146e:	f023 0303 	bic.w	r3, r3, #3
 8001472:	b25a      	sxtb	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	78db      	ldrb	r3, [r3, #3]
 8001478:	b25b      	sxtb	r3, r3
 800147a:	f003 0303 	and.w	r3, r3, #3
 800147e:	b25b      	sxtb	r3, r3
 8001480:	4313      	orrs	r3, r2
 8001482:	b25b      	sxtb	r3, r3
 8001484:	b2db      	uxtb	r3, r3
 8001486:	75bb      	strb	r3, [r7, #22]
            if (rslt == BMI160_OK)
 8001488:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d112      	bne.n	80014b6 <bmi160_start_foc+0xf6>
            {
                /* Set the FOC config in the sensor */
                rslt = bmi160_set_regs(BMI160_FOC_CONF_ADDR, &data, 1, dev);
 8001490:	f107 0116 	add.w	r1, r7, #22
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	2069      	movs	r0, #105	@ 0x69
 800149a:	f7ff fd58 	bl	8000f4e <bmi160_set_regs>
 800149e:	4603      	mov	r3, r0
 80014a0:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMI160_OK)
 80014a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d105      	bne.n	80014b6 <bmi160_start_foc+0xf6>
                {
                    /* Procedure to trigger
                     * FOC and check status */
                    rslt = trigger_foc(offset, dev);
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	68b8      	ldr	r0, [r7, #8]
 80014ae:	f002 fdf7 	bl	80040a0 <trigger_foc>
 80014b2:	4603      	mov	r3, r0
 80014b4:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    }

    return rslt;
 80014b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <bmi160_get_offsets>:

/*!
 *  @brief This API reads and stores the offset values of accel and gyro
 */
int8_t bmi160_get_offsets(struct bmi160_offsets *offset, const struct bmi160_dev *dev)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b088      	sub	sp, #32
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	6039      	str	r1, [r7, #0]
    uint8_t lsb, msb;
    int16_t offset_msb, offset_lsb;
    int16_t offset_data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80014cc:	6838      	ldr	r0, [r7, #0]
 80014ce:	f000 fadd 	bl	8001a8c <null_ptr_check>
 80014d2:	4603      	mov	r3, r0
 80014d4:	77fb      	strb	r3, [r7, #31]
    if (rslt != BMI160_OK)
 80014d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d002      	beq.n	80014e4 <bmi160_get_offsets+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 80014de:	23ff      	movs	r3, #255	@ 0xff
 80014e0:	77fb      	strb	r3, [r7, #31]
 80014e2:	e063      	b.n	80015ac <bmi160_get_offsets+0xea>
    }
    else
    {
        /* Read the FOC config from the sensor */
        rslt = bmi160_get_regs(BMI160_OFFSET_ADDR, data, 7, dev);
 80014e4:	f107 010c 	add.w	r1, r7, #12
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	2207      	movs	r2, #7
 80014ec:	2071      	movs	r0, #113	@ 0x71
 80014ee:	f7ff fcfb 	bl	8000ee8 <bmi160_get_regs>
 80014f2:	4603      	mov	r3, r0
 80014f4:	77fb      	strb	r3, [r7, #31]

        /* Accel offsets */
        offset->off_acc_x = (int8_t)data[0];
 80014f6:	7b3b      	ldrb	r3, [r7, #12]
 80014f8:	b25a      	sxtb	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	701a      	strb	r2, [r3, #0]
        offset->off_acc_y = (int8_t)data[1];
 80014fe:	7b7b      	ldrb	r3, [r7, #13]
 8001500:	b25a      	sxtb	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	705a      	strb	r2, [r3, #1]
        offset->off_acc_z = (int8_t)data[2];
 8001506:	7bbb      	ldrb	r3, [r7, #14]
 8001508:	b25a      	sxtb	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	709a      	strb	r2, [r3, #2]

        /* Gyro x-axis offset */
        lsb = data[3];
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS_POS_0(data[6], BMI160_GYRO_OFFSET_X);
 8001512:	7cbb      	ldrb	r3, [r7, #18]
 8001514:	f003 0303 	and.w	r3, r3, #3
 8001518:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 800151a:	7f7b      	ldrb	r3, [r7, #29]
 800151c:	039b      	lsls	r3, r3, #14
 800151e:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 8001520:	7fbb      	ldrb	r3, [r7, #30]
 8001522:	019b      	lsls	r3, r3, #6
 8001524:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 8001526:	8b7a      	ldrh	r2, [r7, #26]
 8001528:	8b3b      	ldrh	r3, [r7, #24]
 800152a:	4313      	orrs	r3, r2
 800152c:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_x = (int16_t)(offset_data / 64);
 800152e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001532:	2b00      	cmp	r3, #0
 8001534:	da00      	bge.n	8001538 <bmi160_get_offsets+0x76>
 8001536:	333f      	adds	r3, #63	@ 0x3f
 8001538:	119b      	asrs	r3, r3, #6
 800153a:	b21a      	sxth	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	809a      	strh	r2, [r3, #4]

        /* Gyro y-axis offset */
        lsb = data[4];
 8001540:	7c3b      	ldrb	r3, [r7, #16]
 8001542:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Y);
 8001544:	7cbb      	ldrb	r3, [r7, #18]
 8001546:	109b      	asrs	r3, r3, #2
 8001548:	b2db      	uxtb	r3, r3
 800154a:	f003 0303 	and.w	r3, r3, #3
 800154e:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 8001550:	7f7b      	ldrb	r3, [r7, #29]
 8001552:	039b      	lsls	r3, r3, #14
 8001554:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 8001556:	7fbb      	ldrb	r3, [r7, #30]
 8001558:	019b      	lsls	r3, r3, #6
 800155a:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 800155c:	8b7a      	ldrh	r2, [r7, #26]
 800155e:	8b3b      	ldrh	r3, [r7, #24]
 8001560:	4313      	orrs	r3, r2
 8001562:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_y = (int16_t)(offset_data / 64);
 8001564:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001568:	2b00      	cmp	r3, #0
 800156a:	da00      	bge.n	800156e <bmi160_get_offsets+0xac>
 800156c:	333f      	adds	r3, #63	@ 0x3f
 800156e:	119b      	asrs	r3, r3, #6
 8001570:	b21a      	sxth	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	80da      	strh	r2, [r3, #6]

        /* Gyro z-axis offset */
        lsb = data[5];
 8001576:	7c7b      	ldrb	r3, [r7, #17]
 8001578:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Z);
 800157a:	7cbb      	ldrb	r3, [r7, #18]
 800157c:	111b      	asrs	r3, r3, #4
 800157e:	b2db      	uxtb	r3, r3
 8001580:	f003 0303 	and.w	r3, r3, #3
 8001584:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 8001586:	7f7b      	ldrb	r3, [r7, #29]
 8001588:	039b      	lsls	r3, r3, #14
 800158a:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 800158c:	7fbb      	ldrb	r3, [r7, #30]
 800158e:	019b      	lsls	r3, r3, #6
 8001590:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 8001592:	8b7a      	ldrh	r2, [r7, #26]
 8001594:	8b3b      	ldrh	r3, [r7, #24]
 8001596:	4313      	orrs	r3, r2
 8001598:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_z = (int16_t)(offset_data / 64);
 800159a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	da00      	bge.n	80015a4 <bmi160_get_offsets+0xe2>
 80015a2:	333f      	adds	r3, #63	@ 0x3f
 80015a4:	119b      	asrs	r3, r3, #6
 80015a6:	b21a      	sxth	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	811a      	strh	r2, [r3, #8]
    }

    return rslt;
 80015ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3720      	adds	r7, #32
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <set_accel_any_motion_int>:
 * @brief This API sets the any-motion interrupt of the sensor.
 * This interrupt occurs when accel values exceeds preset threshold
 * for a certain period of time.
 */
static int8_t set_accel_any_motion_int(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80015c2:	6838      	ldr	r0, [r7, #0]
 80015c4:	f000 fa62 	bl	8001a8c <null_ptr_check>
 80015c8:	4603      	mov	r3, r0
 80015ca:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80015cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d102      	bne.n	80015da <set_accel_any_motion_int+0x22>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d102      	bne.n	80015e0 <set_accel_any_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80015da:	23ff      	movs	r3, #255	@ 0xff
 80015dc:	73fb      	strb	r3, [r7, #15]
 80015de:	e013      	b.n	8001608 <set_accel_any_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg = &(int_config->int_type_cfg.acc_any_motion_int);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3304      	adds	r3, #4
 80015e4:	60bb      	str	r3, [r7, #8]
        rslt = enable_accel_any_motion_int(any_motion_int_cfg, dev);
 80015e6:	6839      	ldr	r1, [r7, #0]
 80015e8:	68b8      	ldr	r0, [r7, #8]
 80015ea:	f001 f912 	bl	8002812 <enable_accel_any_motion_int>
 80015ee:	4603      	mov	r3, r0
 80015f0:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80015f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d106      	bne.n	8001608 <set_accel_any_motion_int+0x50>
        {
            rslt = config_any_motion_int_settg(int_config, any_motion_int_cfg, dev);
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	68b9      	ldr	r1, [r7, #8]
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f001 fb3f 	bl	8002c82 <config_any_motion_int_settg>
 8001604:	4603      	mov	r3, r0
 8001606:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001608:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <set_accel_tap_int>:
/*!
 * @brief This API sets tap interrupts.Interrupt is fired when
 * tap movements happen.
 */
static int8_t set_accel_tap_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800161e:	6838      	ldr	r0, [r7, #0]
 8001620:	f000 fa34 	bl	8001a8c <null_ptr_check>
 8001624:	4603      	mov	r3, r0
 8001626:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8001628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d102      	bne.n	8001636 <set_accel_tap_int+0x22>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d102      	bne.n	800163c <set_accel_tap_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8001636:	23ff      	movs	r3, #255	@ 0xff
 8001638:	73fb      	strb	r3, [r7, #15]
 800163a:	e01e      	b.n	800167a <set_accel_tap_int+0x66>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_tap_int_cfg *tap_int_cfg = &(int_config->int_type_cfg.acc_tap_int);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3304      	adds	r3, #4
 8001640:	60bb      	str	r3, [r7, #8]
        rslt = enable_tap_int(int_config, tap_int_cfg, dev);
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	68b9      	ldr	r1, [r7, #8]
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f001 fe79 	bl	800333e <enable_tap_int>
 800164c:	4603      	mov	r3, r0
 800164e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001650:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d110      	bne.n	800167a <set_accel_tap_int+0x66>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8001658:	6839      	ldr	r1, [r7, #0]
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 f9fb 	bl	8001a56 <set_intr_pin_config>
 8001660:	4603      	mov	r3, r0
 8001662:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001664:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d106      	bne.n	800167a <set_accel_tap_int+0x66>
            {
                rslt = config_tap_int_settg(int_config, tap_int_cfg, dev);
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	68b9      	ldr	r1, [r7, #8]
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f001 feb7 	bl	80033e4 <config_tap_int_settg>
 8001676:	4603      	mov	r3, r0
 8001678:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800167a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <set_accel_gyro_data_ready_int>:
/*!
 * @brief This API sets the data ready interrupt for both accel and gyro.
 * This interrupt occurs when new accel and gyro data comes.
 */
static int8_t set_accel_gyro_data_ready_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b084      	sub	sp, #16
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
 800168e:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001690:	6838      	ldr	r0, [r7, #0]
 8001692:	f000 f9fb 	bl	8001a8c <null_ptr_check>
 8001696:	4603      	mov	r3, r0
 8001698:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 800169a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d102      	bne.n	80016a8 <set_accel_gyro_data_ready_int+0x22>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d102      	bne.n	80016ae <set_accel_gyro_data_ready_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80016a8:	23ff      	movs	r3, #255	@ 0xff
 80016aa:	73fb      	strb	r3, [r7, #15]
 80016ac:	e018      	b.n	80016e0 <set_accel_gyro_data_ready_int+0x5a>
    }
    else
    {
        rslt = enable_data_ready_int(dev);
 80016ae:	6838      	ldr	r0, [r7, #0]
 80016b0:	f001 fb20 	bl	8002cf4 <enable_data_ready_int>
 80016b4:	4603      	mov	r3, r0
 80016b6:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80016b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d10f      	bne.n	80016e0 <set_accel_gyro_data_ready_int+0x5a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 80016c0:	6839      	ldr	r1, [r7, #0]
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 f9c7 	bl	8001a56 <set_intr_pin_config>
 80016c8:	4603      	mov	r3, r0
 80016ca:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80016cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d105      	bne.n	80016e0 <set_accel_gyro_data_ready_int+0x5a>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 80016d4:	6839      	ldr	r1, [r7, #0]
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f001 f9d4 	bl	8002a84 <map_hardware_interrupt>
 80016dc:	4603      	mov	r3, r0
 80016de:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80016e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <set_accel_sig_motion_int>:
/*!
 * @brief This API sets the significant motion interrupt of the sensor.This
 * interrupt occurs when there is change in user location.
 */
static int8_t set_accel_sig_motion_int(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80016f6:	6838      	ldr	r0, [r7, #0]
 80016f8:	f000 f9c8 	bl	8001a8c <null_ptr_check>
 80016fc:	4603      	mov	r3, r0
 80016fe:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8001700:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d102      	bne.n	800170e <set_accel_sig_motion_int+0x22>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d102      	bne.n	8001714 <set_accel_sig_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 800170e:	23ff      	movs	r3, #255	@ 0xff
 8001710:	73fb      	strb	r3, [r7, #15]
 8001712:	e013      	b.n	800173c <set_accel_sig_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg = &(int_config->int_type_cfg.acc_sig_motion_int);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3304      	adds	r3, #4
 8001718:	60bb      	str	r3, [r7, #8]
        rslt = enable_sig_motion_int(sig_mot_int_cfg, dev);
 800171a:	6839      	ldr	r1, [r7, #0]
 800171c:	68b8      	ldr	r0, [r7, #8]
 800171e:	f001 fc3f 	bl	8002fa0 <enable_sig_motion_int>
 8001722:	4603      	mov	r3, r0
 8001724:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d106      	bne.n	800173c <set_accel_sig_motion_int+0x50>
        {
            rslt = config_sig_motion_int_settg(int_config, sig_mot_int_cfg, dev);
 800172e:	683a      	ldr	r2, [r7, #0]
 8001730:	68b9      	ldr	r1, [r7, #8]
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f001 fc75 	bl	8003022 <config_sig_motion_int_settg>
 8001738:	4603      	mov	r3, r0
 800173a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800173c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <set_accel_no_motion_int>:
 * Slow motion is similar to any motion interrupt.No motion interrupt
 * occurs when slope bet. two accel values falls below preset threshold
 * for preset duration.
 */
static int8_t set_accel_no_motion_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001752:	6838      	ldr	r0, [r7, #0]
 8001754:	f000 f99a 	bl	8001a8c <null_ptr_check>
 8001758:	4603      	mov	r3, r0
 800175a:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 800175c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d102      	bne.n	800176a <set_accel_no_motion_int+0x22>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d102      	bne.n	8001770 <set_accel_no_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 800176a:	23ff      	movs	r3, #255	@ 0xff
 800176c:	73fb      	strb	r3, [r7, #15]
 800176e:	e013      	b.n	8001798 <set_accel_no_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg = &(int_config->int_type_cfg.acc_no_motion_int);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3304      	adds	r3, #4
 8001774:	60bb      	str	r3, [r7, #8]
        rslt = enable_no_motion_int(no_mot_int_cfg, dev);
 8001776:	6839      	ldr	r1, [r7, #0]
 8001778:	68b8      	ldr	r0, [r7, #8]
 800177a:	f001 fae8 	bl	8002d4e <enable_no_motion_int>
 800177e:	4603      	mov	r3, r0
 8001780:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d106      	bne.n	8001798 <set_accel_no_motion_int+0x50>
        {
            /* Configure the INT PIN settings*/
            rslt = config_no_motion_int_settg(int_config, no_mot_int_cfg, dev);
 800178a:	683a      	ldr	r2, [r7, #0]
 800178c:	68b9      	ldr	r1, [r7, #8]
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f001 fb32 	bl	8002df8 <config_no_motion_int_settg>
 8001794:	4603      	mov	r3, r0
 8001796:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001798:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <set_accel_step_detect_int>:
 * @brief This API sets the step detection interrupt.This interrupt
 * occurs when the single step causes accel values to go above
 * preset threshold.
 */
static int8_t set_accel_step_detect_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80017ae:	6838      	ldr	r0, [r7, #0]
 80017b0:	f000 f96c 	bl	8001a8c <null_ptr_check>
 80017b4:	4603      	mov	r3, r0
 80017b6:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80017b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d102      	bne.n	80017c6 <set_accel_step_detect_int+0x22>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d102      	bne.n	80017cc <set_accel_step_detect_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80017c6:	23ff      	movs	r3, #255	@ 0xff
 80017c8:	73fb      	strb	r3, [r7, #15]
 80017ca:	e026      	b.n	800181a <set_accel_step_detect_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg = &(int_config->int_type_cfg.acc_step_detect_int);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3304      	adds	r3, #4
 80017d0:	60bb      	str	r3, [r7, #8]
        rslt = enable_step_detect_int(step_detect_int_cfg, dev);
 80017d2:	6839      	ldr	r1, [r7, #0]
 80017d4:	68b8      	ldr	r0, [r7, #8]
 80017d6:	f001 fcf9 	bl	80031cc <enable_step_detect_int>
 80017da:	4603      	mov	r3, r0
 80017dc:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80017de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d119      	bne.n	800181a <set_accel_step_detect_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 80017e6:	6839      	ldr	r1, [r7, #0]
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f000 f934 	bl	8001a56 <set_intr_pin_config>
 80017ee:	4603      	mov	r3, r0
 80017f0:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80017f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d10f      	bne.n	800181a <set_accel_step_detect_int+0x76>
            {
                rslt = map_feature_interrupt(int_config, dev);
 80017fa:	6839      	ldr	r1, [r7, #0]
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f001 f8a7 	bl	8002950 <map_feature_interrupt>
 8001802:	4603      	mov	r3, r0
 8001804:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8001806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d105      	bne.n	800181a <set_accel_step_detect_int+0x76>
                {
                    rslt = config_step_detect(step_detect_int_cfg, dev);
 800180e:	6839      	ldr	r1, [r7, #0]
 8001810:	68b8      	ldr	r0, [r7, #8]
 8001812:	f001 fd14 	bl	800323e <config_step_detect>
 8001816:	4603      	mov	r3, r0
 8001818:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 800181a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <set_accel_orientation_int>:
 * @brief This API sets the orientation interrupt of the sensor.This
 * interrupt occurs when there is orientation change in the sensor
 * with respect to gravitational field vector g.
 */
static int8_t set_accel_orientation_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b084      	sub	sp, #16
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001830:	6838      	ldr	r0, [r7, #0]
 8001832:	f000 f92b 	bl	8001a8c <null_ptr_check>
 8001836:	4603      	mov	r3, r0
 8001838:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 800183a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d102      	bne.n	8001848 <set_accel_orientation_int+0x22>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d102      	bne.n	800184e <set_accel_orientation_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8001848:	23ff      	movs	r3, #255	@ 0xff
 800184a:	73fb      	strb	r3, [r7, #15]
 800184c:	e026      	b.n	800189c <set_accel_orientation_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_orient_int_cfg *orient_int_cfg = &(int_config->int_type_cfg.acc_orient_int);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3304      	adds	r3, #4
 8001852:	60bb      	str	r3, [r7, #8]
        rslt = enable_orient_int(orient_int_cfg, dev);
 8001854:	6839      	ldr	r1, [r7, #0]
 8001856:	68b8      	ldr	r0, [r7, #8]
 8001858:	f001 fec8 	bl	80035ec <enable_orient_int>
 800185c:	4603      	mov	r3, r0
 800185e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d119      	bne.n	800189c <set_accel_orientation_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8001868:	6839      	ldr	r1, [r7, #0]
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 f8f3 	bl	8001a56 <set_intr_pin_config>
 8001870:	4603      	mov	r3, r0
 8001872:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001874:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10f      	bne.n	800189c <set_accel_orientation_int+0x76>
            {
                /* map INT pin to orient interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 800187c:	6839      	ldr	r1, [r7, #0]
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f001 f866 	bl	8002950 <map_feature_interrupt>
 8001884:	4603      	mov	r3, r0
 8001886:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8001888:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d105      	bne.n	800189c <set_accel_orientation_int+0x76>
                {
                    /* configure the
                     * orientation setting*/
                    rslt = config_orient_int_settg(orient_int_cfg, dev);
 8001890:	6839      	ldr	r1, [r7, #0]
 8001892:	68b8      	ldr	r0, [r7, #8]
 8001894:	f001 fee3 	bl	800365e <config_orient_int_settg>
 8001898:	4603      	mov	r3, r0
 800189a:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 800189c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <set_accel_flat_detect_int>:
/*!
 * @brief This API sets the flat interrupt of the sensor.This interrupt
 * occurs in case of flat orientation
 */
static int8_t set_accel_flat_detect_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80018b2:	6838      	ldr	r0, [r7, #0]
 80018b4:	f000 f8ea 	bl	8001a8c <null_ptr_check>
 80018b8:	4603      	mov	r3, r0
 80018ba:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80018bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d102      	bne.n	80018ca <set_accel_flat_detect_int+0x22>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d102      	bne.n	80018d0 <set_accel_flat_detect_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80018ca:	23ff      	movs	r3, #255	@ 0xff
 80018cc:	73fb      	strb	r3, [r7, #15]
 80018ce:	e026      	b.n	800191e <set_accel_flat_detect_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_flat_detect_int_cfg *flat_detect_int = &(int_config->int_type_cfg.acc_flat_int);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3304      	adds	r3, #4
 80018d4:	60bb      	str	r3, [r7, #8]

        /* enable the flat interrupt */
        rslt = enable_flat_int(flat_detect_int, dev);
 80018d6:	6839      	ldr	r1, [r7, #0]
 80018d8:	68b8      	ldr	r0, [r7, #8]
 80018da:	f001 ff4f 	bl	800377c <enable_flat_int>
 80018de:	4603      	mov	r3, r0
 80018e0:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80018e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d119      	bne.n	800191e <set_accel_flat_detect_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 80018ea:	6839      	ldr	r1, [r7, #0]
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 f8b2 	bl	8001a56 <set_intr_pin_config>
 80018f2:	4603      	mov	r3, r0
 80018f4:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80018f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10f      	bne.n	800191e <set_accel_flat_detect_int+0x76>
            {
                /* map INT pin to flat interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 80018fe:	6839      	ldr	r1, [r7, #0]
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f001 f825 	bl	8002950 <map_feature_interrupt>
 8001906:	4603      	mov	r3, r0
 8001908:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 800190a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d105      	bne.n	800191e <set_accel_flat_detect_int+0x76>
                {
                    /* configure the flat setting*/
                    rslt = config_flat_int_settg(flat_detect_int, dev);
 8001912:	6839      	ldr	r1, [r7, #0]
 8001914:	68b8      	ldr	r0, [r7, #8]
 8001916:	f001 ff67 	bl	80037e8 <config_flat_int_settg>
 800191a:	4603      	mov	r3, r0
 800191c:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 800191e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <set_accel_low_g_int>:
/*!
 * @brief This API sets the low-g interrupt of the sensor.This interrupt
 * occurs during free-fall.
 */
static int8_t set_accel_low_g_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b084      	sub	sp, #16
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
 8001932:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001934:	6838      	ldr	r0, [r7, #0]
 8001936:	f000 f8a9 	bl	8001a8c <null_ptr_check>
 800193a:	4603      	mov	r3, r0
 800193c:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 800193e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d102      	bne.n	800194c <set_accel_low_g_int+0x22>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d102      	bne.n	8001952 <set_accel_low_g_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 800194c:	23ff      	movs	r3, #255	@ 0xff
 800194e:	73fb      	strb	r3, [r7, #15]
 8001950:	e030      	b.n	80019b4 <set_accel_low_g_int+0x8a>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_low_g_int_cfg *low_g_int = &(int_config->int_type_cfg.acc_low_g_int);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	3304      	adds	r3, #4
 8001956:	60bb      	str	r3, [r7, #8]

        /* Enable the low-g interrupt*/
        rslt = enable_low_g_int(low_g_int, dev);
 8001958:	6839      	ldr	r1, [r7, #0]
 800195a:	68b8      	ldr	r0, [r7, #8]
 800195c:	f001 ffa0 	bl	80038a0 <enable_low_g_int>
 8001960:	4603      	mov	r3, r0
 8001962:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001964:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d123      	bne.n	80019b4 <set_accel_low_g_int+0x8a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 800196c:	6839      	ldr	r1, [r7, #0]
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 f871 	bl	8001a56 <set_intr_pin_config>
 8001974:	4603      	mov	r3, r0
 8001976:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001978:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d119      	bne.n	80019b4 <set_accel_low_g_int+0x8a>
            {
                /* Map INT pin to low-g interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 8001980:	6839      	ldr	r1, [r7, #0]
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 ffe4 	bl	8002950 <map_feature_interrupt>
 8001988:	4603      	mov	r3, r0
 800198a:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 800198c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d10f      	bne.n	80019b4 <set_accel_low_g_int+0x8a>
                {
                    /* configure the data source
                     * for low-g interrupt*/
                    rslt = config_low_g_data_src(low_g_int, dev);
 8001994:	6839      	ldr	r1, [r7, #0]
 8001996:	68b8      	ldr	r0, [r7, #8]
 8001998:	f001 ffbb 	bl	8003912 <config_low_g_data_src>
 800199c:	4603      	mov	r3, r0
 800199e:	73fb      	strb	r3, [r7, #15]
                    if (rslt == BMI160_OK)
 80019a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d105      	bne.n	80019b4 <set_accel_low_g_int+0x8a>
                    {
                        rslt = config_low_g_int_settg(low_g_int, dev);
 80019a8:	6839      	ldr	r1, [r7, #0]
 80019aa:	68b8      	ldr	r0, [r7, #8]
 80019ac:	f001 ffe8 	bl	8003980 <config_low_g_int_settg>
 80019b0:	4603      	mov	r3, r0
 80019b2:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80019b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <set_accel_high_g_int>:
 * occurs if the absolute value of acceleration data of any enabled axis
 * exceeds the programmed threshold and the sign of the value does not
 * change for a preset duration.
 */
static int8_t set_accel_high_g_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80019ca:	6838      	ldr	r0, [r7, #0]
 80019cc:	f000 f85e 	bl	8001a8c <null_ptr_check>
 80019d0:	4603      	mov	r3, r0
 80019d2:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80019d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d102      	bne.n	80019e2 <set_accel_high_g_int+0x22>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d102      	bne.n	80019e8 <set_accel_high_g_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80019e2:	23ff      	movs	r3, #255	@ 0xff
 80019e4:	73fb      	strb	r3, [r7, #15]
 80019e6:	e030      	b.n	8001a4a <set_accel_high_g_int+0x8a>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_high_g_int_cfg *high_g_int_cfg = &(int_config->int_type_cfg.acc_high_g_int);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3304      	adds	r3, #4
 80019ec:	60bb      	str	r3, [r7, #8]

        /* Enable the high-g interrupt */
        rslt = enable_high_g_int(high_g_int_cfg, dev);
 80019ee:	6839      	ldr	r1, [r7, #0]
 80019f0:	68b8      	ldr	r0, [r7, #8]
 80019f2:	f002 f81d 	bl	8003a30 <enable_high_g_int>
 80019f6:	4603      	mov	r3, r0
 80019f8:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80019fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d123      	bne.n	8001a4a <set_accel_high_g_int+0x8a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8001a02:	6839      	ldr	r1, [r7, #0]
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 f826 	bl	8001a56 <set_intr_pin_config>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d119      	bne.n	8001a4a <set_accel_high_g_int+0x8a>
            {
                /* Map INT pin to high-g interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 8001a16:	6839      	ldr	r1, [r7, #0]
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 ff99 	bl	8002950 <map_feature_interrupt>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8001a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d10f      	bne.n	8001a4a <set_accel_high_g_int+0x8a>
                {
                    /* configure the data source
                     * for high-g interrupt*/
                    rslt = config_high_g_data_src(high_g_int_cfg, dev);
 8001a2a:	6839      	ldr	r1, [r7, #0]
 8001a2c:	68b8      	ldr	r0, [r7, #8]
 8001a2e:	f002 f85a 	bl	8003ae6 <config_high_g_data_src>
 8001a32:	4603      	mov	r3, r0
 8001a34:	73fb      	strb	r3, [r7, #15]
                    if (rslt == BMI160_OK)
 8001a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d105      	bne.n	8001a4a <set_accel_high_g_int+0x8a>
                    {
                        rslt = config_high_g_int_settg(high_g_int_cfg, dev);
 8001a3e:	6839      	ldr	r1, [r7, #0]
 8001a40:	68b8      	ldr	r0, [r7, #8]
 8001a42:	f002 f887 	bl	8003b54 <config_high_g_int_settg>
 8001a46:	4603      	mov	r3, r0
 8001a48:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <set_intr_pin_config>:
/*!
 * @brief This API configures the pins to fire the
 * interrupt signal when it occurs.
 */
static int8_t set_intr_pin_config(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b084      	sub	sp, #16
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
 8001a5e:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* configure the behavioural settings of interrupt pin */
    rslt = config_int_out_ctrl(int_config, dev);
 8001a60:	6839      	ldr	r1, [r7, #0]
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f002 f8bc 	bl	8003be0 <config_int_out_ctrl>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001a6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d105      	bne.n	8001a80 <set_intr_pin_config+0x2a>
    {
        rslt = config_int_latch(int_config, dev);
 8001a74:	6839      	ldr	r1, [r7, #0]
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f002 f977 	bl	8003d6a <config_int_latch>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001a80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi160_dev *dev)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d00b      	beq.n	8001ab2 <null_ptr_check+0x26>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d007      	beq.n	8001ab2 <null_ptr_check+0x26>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <null_ptr_check+0x26>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d102      	bne.n	8001ab8 <null_ptr_check+0x2c>
    {
        rslt = BMI160_E_NULL_PTR;
 8001ab2:	23ff      	movs	r3, #255	@ 0xff
 8001ab4:	73fb      	strb	r3, [r7, #15]
 8001ab6:	e001      	b.n	8001abc <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI160_OK;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <default_param_settg>:
/*!
 * @brief This API sets the default configuration parameters of accel & gyro.
 * Also maintain the previous state of configurations.
 */
static void default_param_settg(struct bmi160_dev *dev)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
    /* Initializing accel and gyro params with
     * default values */
    dev->accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	71da      	strb	r2, [r3, #7]
    dev->accel_cfg.odr = BMI160_ACCEL_ODR_100HZ;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2208      	movs	r2, #8
 8001ade:	715a      	strb	r2, [r3, #5]
    dev->accel_cfg.power = BMI160_ACCEL_SUSPEND_MODE;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2210      	movs	r2, #16
 8001ae4:	711a      	strb	r2, [r3, #4]
    dev->accel_cfg.range = BMI160_ACCEL_RANGE_2G;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2203      	movs	r2, #3
 8001aea:	719a      	strb	r2, [r3, #6]
    dev->gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2202      	movs	r2, #2
 8001af0:	73da      	strb	r2, [r3, #15]
    dev->gyro_cfg.odr = BMI160_GYRO_ODR_100HZ;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2208      	movs	r2, #8
 8001af6:	735a      	strb	r2, [r3, #13]
    dev->gyro_cfg.power = BMI160_GYRO_SUSPEND_MODE;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2214      	movs	r2, #20
 8001afc:	731a      	strb	r2, [r3, #12]
    dev->gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	739a      	strb	r2, [r3, #14]

    /* To maintain the previous state of accel configuration */
    dev->prev_accel_cfg = dev->accel_cfg;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6852      	ldr	r2, [r2, #4]
 8001b0a:	609a      	str	r2, [r3, #8]

    /* To maintain the previous state of gyro configuration */
    dev->prev_gyro_cfg = dev->gyro_cfg;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	68d2      	ldr	r2, [r2, #12]
 8001b12:	611a      	str	r2, [r3, #16]
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <set_accel_conf>:

/*!
 * @brief This API set the accel configuration.
 */
static int8_t set_accel_conf(struct bmi160_dev *dev)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 8001b28:	2300      	movs	r3, #0
 8001b2a:	81bb      	strh	r3, [r7, #12]

    rslt = check_accel_config(data, dev);
 8001b2c:	f107 030c 	add.w	r3, r7, #12
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f000 f833 	bl	8001b9e <check_accel_config>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001b3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d126      	bne.n	8001b92 <set_accel_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, &data[0], 1, dev);
 8001b44:	f107 010c 	add.w	r1, r7, #12
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	2040      	movs	r0, #64	@ 0x40
 8001b4e:	f7ff f9fe 	bl	8000f4e <bmi160_set_regs>
 8001b52:	4603      	mov	r3, r0
 8001b54:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d119      	bne.n	8001b92 <set_accel_conf+0x72>
        {
            dev->prev_accel_cfg.odr = dev->accel_cfg.odr;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	795a      	ldrb	r2, [r3, #5]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	725a      	strb	r2, [r3, #9]
            dev->prev_accel_cfg.bw = dev->accel_cfg.bw;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	79da      	ldrb	r2, [r3, #7]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	72da      	strb	r2, [r3, #11]

            /* write accel range */
            rslt = bmi160_set_regs(BMI160_ACCEL_RANGE_ADDR, &data[1], 1, dev);
 8001b6e:	f107 030c 	add.w	r3, r7, #12
 8001b72:	1c59      	adds	r1, r3, #1
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	2041      	movs	r0, #65	@ 0x41
 8001b7a:	f7ff f9e8 	bl	8000f4e <bmi160_set_regs>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d103      	bne.n	8001b92 <set_accel_conf+0x72>
            {
                dev->prev_accel_cfg.range = dev->accel_cfg.range;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	799a      	ldrb	r2, [r3, #6]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	729a      	strb	r2, [r3, #10]
            }
        }
    }

    return rslt;
 8001b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <check_accel_config>:

/*!
 * @brief This API check the accel configuration.
 */
static int8_t check_accel_config(uint8_t *data, const struct bmi160_dev *dev)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b084      	sub	sp, #16
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read accel Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 2, dev);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	2202      	movs	r2, #2
 8001bac:	6879      	ldr	r1, [r7, #4]
 8001bae:	2040      	movs	r0, #64	@ 0x40
 8001bb0:	f7ff f99a 	bl	8000ee8 <bmi160_get_regs>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001bb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d11b      	bne.n	8001bf8 <check_accel_config+0x5a>
    {
        rslt = process_accel_odr(&data[0], dev);
 8001bc0:	6839      	ldr	r1, [r7, #0]
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f81e 	bl	8001c04 <process_accel_odr>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001bcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d111      	bne.n	8001bf8 <check_accel_config+0x5a>
        {
            rslt = process_accel_bw(&data[0], dev);
 8001bd4:	6839      	ldr	r1, [r7, #0]
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 f848 	bl	8001c6c <process_accel_bw>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d107      	bne.n	8001bf8 <check_accel_config+0x5a>
            {
                rslt = process_accel_range(&data[1], dev);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3301      	adds	r3, #1
 8001bec:	6839      	ldr	r1, [r7, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f000 f871 	bl	8001cd6 <process_accel_range>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001bf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <process_accel_odr>:

/*!
 * @brief This API process the accel odr.
 */
static int8_t process_accel_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.odr <= BMI160_ACCEL_ODR_1600HZ)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	795b      	ldrb	r3, [r3, #5]
 8001c1e:	2b0c      	cmp	r3, #12
 8001c20:	d81a      	bhi.n	8001c58 <process_accel_odr+0x54>
    {
        if (dev->accel_cfg.odr != dev->prev_accel_cfg.odr)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	795a      	ldrb	r2, [r3, #5]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	7a5b      	ldrb	r3, [r3, #9]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d016      	beq.n	8001c5c <process_accel_odr+0x58>
        {
            odr = (uint8_t)dev->accel_cfg.odr;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	795b      	ldrb	r3, [r3, #5]
 8001c32:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_ODR_MASK;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	f023 030f 	bic.w	r3, r3, #15
 8001c3c:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_ACCEL_ODR_MASK);
 8001c3e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	b25a      	sxtb	r2, r3
 8001c48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	b25b      	sxtb	r3, r3
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	701a      	strb	r2, [r3, #0]
 8001c56:	e001      	b.n	8001c5c <process_accel_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001c58:	23fc      	movs	r3, #252	@ 0xfc
 8001c5a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001c5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <process_accel_bw>:

/*!
 * @brief This API process the accel bandwidth.
 */
static int8_t process_accel_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.bw <= BMI160_ACCEL_BW_RES_AVG128)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	79db      	ldrb	r3, [r3, #7]
 8001c86:	2b07      	cmp	r3, #7
 8001c88:	d81b      	bhi.n	8001cc2 <process_accel_bw+0x56>
    {
        if (dev->accel_cfg.bw != dev->prev_accel_cfg.bw)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	79da      	ldrb	r2, [r3, #7]
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	7adb      	ldrb	r3, [r3, #11]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d017      	beq.n	8001cc6 <process_accel_bw+0x5a>
        {
            bw = (uint8_t)dev->accel_cfg.bw;
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	79db      	ldrb	r3, [r3, #7]
 8001c9a:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_BW_MASK;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ca4:	73bb      	strb	r3, [r7, #14]

            /* Adding bandwidth */
            *data = temp | ((bw << 4) & BMI160_ACCEL_BW_MASK);
 8001ca6:	7b7b      	ldrb	r3, [r7, #13]
 8001ca8:	011b      	lsls	r3, r3, #4
 8001caa:	b25b      	sxtb	r3, r3
 8001cac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cb0:	b25a      	sxtb	r2, r3
 8001cb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	b25b      	sxtb	r3, r3
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	701a      	strb	r2, [r3, #0]
 8001cc0:	e001      	b.n	8001cc6 <process_accel_bw+0x5a>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001cc2:	23fc      	movs	r3, #252	@ 0xfc
 8001cc4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <process_accel_range>:

/*!
 * @brief This API process the accel range.
 */
static int8_t process_accel_range(uint8_t *data, const struct bmi160_dev *dev)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b085      	sub	sp, #20
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
 8001cde:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.range <= BMI160_ACCEL_RANGE_16G)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	799b      	ldrb	r3, [r3, #6]
 8001cf0:	2b0c      	cmp	r3, #12
 8001cf2:	d81a      	bhi.n	8001d2a <process_accel_range+0x54>
    {
        if (dev->accel_cfg.range != dev->prev_accel_cfg.range)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	799a      	ldrb	r2, [r3, #6]
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	7a9b      	ldrb	r3, [r3, #10]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d016      	beq.n	8001d2e <process_accel_range+0x58>
        {
            range = (uint8_t)dev->accel_cfg.range;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	799b      	ldrb	r3, [r3, #6]
 8001d04:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_RANGE_MASK;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	f023 030f 	bic.w	r3, r3, #15
 8001d0e:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_ACCEL_RANGE_MASK);
 8001d10:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001d14:	f003 030f 	and.w	r3, r3, #15
 8001d18:	b25a      	sxtb	r2, r3
 8001d1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	b25b      	sxtb	r3, r3
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	701a      	strb	r2, [r3, #0]
 8001d28:	e001      	b.n	8001d2e <process_accel_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001d2a:	23fc      	movs	r3, #252	@ 0xfc
 8001d2c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <check_invalid_settg>:
/*!
 * @brief This API checks the invalid settings for ODR & Bw for
 * Accel and Gyro.
 */
static int8_t check_invalid_settg(const struct bmi160_dev *dev)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b084      	sub	sp, #16
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	73bb      	strb	r3, [r7, #14]

    /* read the error reg */
    rslt = bmi160_get_regs(BMI160_ERROR_REG_ADDR, &data, 1, dev);
 8001d4a:	f107 010e 	add.w	r1, r7, #14
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	2002      	movs	r0, #2
 8001d54:	f7ff f8c8 	bl	8000ee8 <bmi160_get_regs>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	73fb      	strb	r3, [r7, #15]
    data = data >> 1;
 8001d5c:	7bbb      	ldrb	r3, [r7, #14]
 8001d5e:	085b      	lsrs	r3, r3, #1
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	73bb      	strb	r3, [r7, #14]
    data = data & BMI160_ERR_REG_MASK;
 8001d64:	7bbb      	ldrb	r3, [r7, #14]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	73bb      	strb	r3, [r7, #14]
    if (data == 1)
 8001d6e:	7bbb      	ldrb	r3, [r7, #14]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d102      	bne.n	8001d7a <check_invalid_settg+0x3c>
    {
        rslt = BMI160_E_ACCEL_ODR_BW_INVALID;
 8001d74:	23fa      	movs	r3, #250	@ 0xfa
 8001d76:	73fb      	strb	r3, [r7, #15]
 8001d78:	e010      	b.n	8001d9c <check_invalid_settg+0x5e>
    }
    else if (data == 2)
 8001d7a:	7bbb      	ldrb	r3, [r7, #14]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d102      	bne.n	8001d86 <check_invalid_settg+0x48>
    {
        rslt = BMI160_E_GYRO_ODR_BW_INVALID;
 8001d80:	23f9      	movs	r3, #249	@ 0xf9
 8001d82:	73fb      	strb	r3, [r7, #15]
 8001d84:	e00a      	b.n	8001d9c <check_invalid_settg+0x5e>
    }
    else if (data == 3)
 8001d86:	7bbb      	ldrb	r3, [r7, #14]
 8001d88:	2b03      	cmp	r3, #3
 8001d8a:	d102      	bne.n	8001d92 <check_invalid_settg+0x54>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INT_INVALID;
 8001d8c:	23f8      	movs	r3, #248	@ 0xf8
 8001d8e:	73fb      	strb	r3, [r7, #15]
 8001d90:	e004      	b.n	8001d9c <check_invalid_settg+0x5e>
    }
    else if (data == 7)
 8001d92:	7bbb      	ldrb	r3, [r7, #14]
 8001d94:	2b07      	cmp	r3, #7
 8001d96:	d101      	bne.n	8001d9c <check_invalid_settg+0x5e>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INVALID;
 8001d98:	23f7      	movs	r3, #247	@ 0xf7
 8001d9a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001d9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <set_gyro_conf>:
static int8_t set_gyro_conf(struct bmi160_dev *dev)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 8001db0:	2300      	movs	r3, #0
 8001db2:	81bb      	strh	r3, [r7, #12]

    rslt = check_gyro_config(data, dev);
 8001db4:	f107 030c 	add.w	r3, r7, #12
 8001db8:	6879      	ldr	r1, [r7, #4]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f000 f833 	bl	8001e26 <check_gyro_config>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001dc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d126      	bne.n	8001e1a <set_gyro_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_GYRO_CONFIG_ADDR, &data[0], 1, dev);
 8001dcc:	f107 010c 	add.w	r1, r7, #12
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	2042      	movs	r0, #66	@ 0x42
 8001dd6:	f7ff f8ba 	bl	8000f4e <bmi160_set_regs>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d119      	bne.n	8001e1a <set_gyro_conf+0x72>
        {
            dev->prev_gyro_cfg.odr = dev->gyro_cfg.odr;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	7b5a      	ldrb	r2, [r3, #13]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	745a      	strb	r2, [r3, #17]
            dev->prev_gyro_cfg.bw = dev->gyro_cfg.bw;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	7bda      	ldrb	r2, [r3, #15]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	74da      	strb	r2, [r3, #19]

            /* Write gyro range */
            rslt = bmi160_set_regs(BMI160_GYRO_RANGE_ADDR, &data[1], 1, dev);
 8001df6:	f107 030c 	add.w	r3, r7, #12
 8001dfa:	1c59      	adds	r1, r3, #1
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	2043      	movs	r0, #67	@ 0x43
 8001e02:	f7ff f8a4 	bl	8000f4e <bmi160_set_regs>
 8001e06:	4603      	mov	r3, r0
 8001e08:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d103      	bne.n	8001e1a <set_gyro_conf+0x72>
            {
                dev->prev_gyro_cfg.range = dev->gyro_cfg.range;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	7b9a      	ldrb	r2, [r3, #14]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	749a      	strb	r2, [r3, #18]
            }
        }
    }

    return rslt;
 8001e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <check_gyro_config>:

/*!
 * @brief This API check the gyro configuration.
 */
static int8_t check_gyro_config(uint8_t *data, const struct bmi160_dev *dev)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b084      	sub	sp, #16
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
 8001e2e:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read gyro Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_GYRO_CONFIG_ADDR, data, 2, dev);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	2202      	movs	r2, #2
 8001e34:	6879      	ldr	r1, [r7, #4]
 8001e36:	2042      	movs	r0, #66	@ 0x42
 8001e38:	f7ff f856 	bl	8000ee8 <bmi160_get_regs>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001e40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d11b      	bne.n	8001e80 <check_gyro_config+0x5a>
    {
        rslt = process_gyro_odr(&data[0], dev);
 8001e48:	6839      	ldr	r1, [r7, #0]
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f81e 	bl	8001e8c <process_gyro_odr>
 8001e50:	4603      	mov	r3, r0
 8001e52:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d111      	bne.n	8001e80 <check_gyro_config+0x5a>
        {
            rslt = process_gyro_bw(&data[0], dev);
 8001e5c:	6839      	ldr	r1, [r7, #0]
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f848 	bl	8001ef4 <process_gyro_bw>
 8001e64:	4603      	mov	r3, r0
 8001e66:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d107      	bne.n	8001e80 <check_gyro_config+0x5a>
            {
                rslt = process_gyro_range(&data[1], dev);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3301      	adds	r3, #1
 8001e74:	6839      	ldr	r1, [r7, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 f86b 	bl	8001f52 <process_gyro_range>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001e80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <process_gyro_odr>:

/*!
 * @brief This API process the gyro odr.
 */
static int8_t process_gyro_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.odr <= BMI160_GYRO_ODR_3200HZ)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	7b5b      	ldrb	r3, [r3, #13]
 8001ea6:	2b0d      	cmp	r3, #13
 8001ea8:	d81a      	bhi.n	8001ee0 <process_gyro_odr+0x54>
    {
        if (dev->gyro_cfg.odr != dev->prev_gyro_cfg.odr)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	7b5a      	ldrb	r2, [r3, #13]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	7c5b      	ldrb	r3, [r3, #17]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d016      	beq.n	8001ee4 <process_gyro_odr+0x58>
        {
            odr = (uint8_t)dev->gyro_cfg.odr;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	7b5b      	ldrb	r3, [r3, #13]
 8001eba:	737b      	strb	r3, [r7, #13]
            temp = (*data & ~BMI160_GYRO_ODR_MASK);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	f023 030f 	bic.w	r3, r3, #15
 8001ec4:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_GYRO_ODR_MASK);
 8001ec6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	b25a      	sxtb	r2, r3
 8001ed0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	b25b      	sxtb	r3, r3
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	701a      	strb	r2, [r3, #0]
 8001ede:	e001      	b.n	8001ee4 <process_gyro_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001ee0:	23fc      	movs	r3, #252	@ 0xfc
 8001ee2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <process_gyro_bw>:

/*!
 * @brief This API process the gyro bandwidth.
 */
static int8_t process_gyro_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001efe:	2300      	movs	r3, #0
 8001f00:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.bw <= BMI160_GYRO_BW_NORMAL_MODE)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	7bdb      	ldrb	r3, [r3, #15]
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d815      	bhi.n	8001f3e <process_gyro_bw+0x4a>
    {
        bw = (uint8_t)dev->gyro_cfg.bw;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	7bdb      	ldrb	r3, [r3, #15]
 8001f16:	737b      	strb	r3, [r7, #13]
        temp = *data & ~BMI160_GYRO_BW_MASK;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001f20:	73bb      	strb	r3, [r7, #14]

        /* Adding bandwidth */
        *data = temp | ((bw << 4) & BMI160_GYRO_BW_MASK);
 8001f22:	7b7b      	ldrb	r3, [r7, #13]
 8001f24:	011b      	lsls	r3, r3, #4
 8001f26:	b25b      	sxtb	r3, r3
 8001f28:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001f2c:	b25a      	sxtb	r2, r3
 8001f2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	b25b      	sxtb	r3, r3
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	701a      	strb	r2, [r3, #0]
 8001f3c:	e001      	b.n	8001f42 <process_gyro_bw+0x4e>
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001f3e:	23fc      	movs	r3, #252	@ 0xfc
 8001f40:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <process_gyro_range>:

/*!
 * @brief This API process the gyro range.
 */
static int8_t process_gyro_range(uint8_t *data, const struct bmi160_dev *dev)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b085      	sub	sp, #20
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.range <= BMI160_GYRO_RANGE_125_DPS)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	7b9b      	ldrb	r3, [r3, #14]
 8001f6c:	2b04      	cmp	r3, #4
 8001f6e:	d81a      	bhi.n	8001fa6 <process_gyro_range+0x54>
    {
        if (dev->gyro_cfg.range != dev->prev_gyro_cfg.range)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	7b9a      	ldrb	r2, [r3, #14]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	7c9b      	ldrb	r3, [r3, #18]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d016      	beq.n	8001faa <process_gyro_range+0x58>
        {
            range = (uint8_t)dev->gyro_cfg.range;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	7b9b      	ldrb	r3, [r3, #14]
 8001f80:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_GYRO_RANGE_MASK;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	f023 0307 	bic.w	r3, r3, #7
 8001f8a:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_GYRO_RANGE_MASK);
 8001f8c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	b25a      	sxtb	r2, r3
 8001f96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	b25b      	sxtb	r3, r3
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	701a      	strb	r2, [r3, #0]
 8001fa4:	e001      	b.n	8001faa <process_gyro_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001fa6:	23fc      	movs	r3, #252	@ 0xfc
 8001fa8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <set_accel_pwr>:

/*!
 * @brief This API sets the accel power.
 */
static int8_t set_accel_pwr(struct bmi160_dev *dev)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b084      	sub	sp, #16
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	73fb      	strb	r3, [r7, #15]
    uint8_t data = 0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	73bb      	strb	r3, [r7, #14]

    if ((dev->accel_cfg.power >= BMI160_ACCEL_SUSPEND_MODE) && (dev->accel_cfg.power <= BMI160_ACCEL_LOWPOWER_MODE))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	791b      	ldrb	r3, [r3, #4]
 8001fce:	2b0f      	cmp	r3, #15
 8001fd0:	d92b      	bls.n	800202a <set_accel_pwr+0x70>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	791b      	ldrb	r3, [r3, #4]
 8001fd6:	2b12      	cmp	r3, #18
 8001fd8:	d827      	bhi.n	800202a <set_accel_pwr+0x70>
    {
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	791a      	ldrb	r2, [r3, #4]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	7a1b      	ldrb	r3, [r3, #8]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d024      	beq.n	8002030 <set_accel_pwr+0x76>
        {
            rslt = process_under_sampling(&data, dev);
 8001fe6:	f107 030e 	add.w	r3, r7, #14
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f000 f826 	bl	800203e <process_under_sampling>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d118      	bne.n	8002030 <set_accel_pwr+0x76>
            {
                /* Write accel power */
                rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->accel_cfg.power, 1, dev);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	1d19      	adds	r1, r3, #4
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	207e      	movs	r0, #126	@ 0x7e
 8002008:	f7fe ffa1 	bl	8000f4e <bmi160_set_regs>
 800200c:	4603      	mov	r3, r0
 800200e:	73fb      	strb	r3, [r7, #15]

                /* Add delay of 3.8 ms - refer data sheet table 24*/
                if (dev->prev_accel_cfg.power == BMI160_ACCEL_SUSPEND_MODE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	7a1b      	ldrb	r3, [r3, #8]
 8002014:	2b10      	cmp	r3, #16
 8002016:	d103      	bne.n	8002020 <set_accel_pwr+0x66>
                {
                    dev->delay_ms(BMI160_ACCEL_DELAY_MS);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201c:	2005      	movs	r0, #5
 800201e:	4798      	blx	r3
                }

                dev->prev_accel_cfg.power = dev->accel_cfg.power;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	791a      	ldrb	r2, [r3, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	721a      	strb	r2, [r3, #8]
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8002028:	e002      	b.n	8002030 <set_accel_pwr+0x76>
            }
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 800202a:	23f3      	movs	r3, #243	@ 0xf3
 800202c:	73fb      	strb	r3, [r7, #15]
 800202e:	e000      	b.n	8002032 <set_accel_pwr+0x78>
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8002030:	bf00      	nop
    }

    return rslt;
 8002032:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002036:	4618      	mov	r0, r3
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <process_under_sampling>:

/*!
 * @brief This API process the undersampling setting of Accel.
 */
static int8_t process_under_sampling(uint8_t *data, const struct bmi160_dev *dev)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b084      	sub	sp, #16
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8002048:	2300      	movs	r3, #0
 800204a:	73bb      	strb	r3, [r7, #14]
    uint8_t pre_filter[2] = { 0 };
 800204c:	2300      	movs	r3, #0
 800204e:	81bb      	strh	r3, [r7, #12]

    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	2201      	movs	r2, #1
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	2040      	movs	r0, #64	@ 0x40
 8002058:	f7fe ff46 	bl	8000ee8 <bmi160_get_regs>
 800205c:	4603      	mov	r3, r0
 800205e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002060:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d139      	bne.n	80020dc <process_under_sampling+0x9e>
    {
        if (dev->accel_cfg.power == BMI160_ACCEL_LOWPOWER_MODE)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	791b      	ldrb	r3, [r3, #4]
 800206c:	2b12      	cmp	r3, #18
 800206e:	d120      	bne.n	80020b2 <process_under_sampling+0x74>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002078:	73bb      	strb	r3, [r7, #14]

            /* Set under-sampling parameter */
            *data = temp | ((1 << 7) & BMI160_ACCEL_UNDERSAMPLING_MASK);
 800207a:	7bbb      	ldrb	r3, [r7, #14]
 800207c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002080:	b2da      	uxtb	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	2201      	movs	r2, #1
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	2040      	movs	r0, #64	@ 0x40
 800208e:	f7fe ff5e 	bl	8000f4e <bmi160_set_regs>
 8002092:	4603      	mov	r3, r0
 8002094:	73fb      	strb	r3, [r7, #15]

            /* Disable the pre-filter data in low power mode */
            if (rslt == BMI160_OK)
 8002096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d11e      	bne.n	80020dc <process_under_sampling+0x9e>
            {
                /* Disable the Pre-filter data*/
                rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, pre_filter, 2, dev);
 800209e:	f107 010c 	add.w	r1, r7, #12
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	2202      	movs	r2, #2
 80020a6:	2058      	movs	r0, #88	@ 0x58
 80020a8:	f7fe ff51 	bl	8000f4e <bmi160_set_regs>
 80020ac:	4603      	mov	r3, r0
 80020ae:	73fb      	strb	r3, [r7, #15]
 80020b0:	e014      	b.n	80020dc <process_under_sampling+0x9e>
            }
        }
        else if (*data & BMI160_ACCEL_UNDERSAMPLING_MASK)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	b25b      	sxtb	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	da0f      	bge.n	80020dc <process_under_sampling+0x9e>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020c4:	73bb      	strb	r3, [r7, #14]

            /* Disable under-sampling parameter if already enabled */
            *data = temp;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	7bba      	ldrb	r2, [r7, #14]
 80020ca:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	2201      	movs	r2, #1
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	2040      	movs	r0, #64	@ 0x40
 80020d4:	f7fe ff3b 	bl	8000f4e <bmi160_set_regs>
 80020d8:	4603      	mov	r3, r0
 80020da:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80020dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <set_gyro_pwr>:

/*!
 * @brief This API sets the gyro power mode.
 */
static int8_t set_gyro_pwr(struct bmi160_dev *dev)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 80020f0:	2300      	movs	r3, #0
 80020f2:	73fb      	strb	r3, [r7, #15]

    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	7b1b      	ldrb	r3, [r3, #12]
 80020f8:	2b14      	cmp	r3, #20
 80020fa:	d007      	beq.n	800210c <set_gyro_pwr+0x24>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	7b1b      	ldrb	r3, [r3, #12]
 8002100:	2b15      	cmp	r3, #21
 8002102:	d003      	beq.n	800210c <set_gyro_pwr+0x24>
        (dev->gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	7b1b      	ldrb	r3, [r3, #12]
    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 8002108:	2b17      	cmp	r3, #23
 800210a:	d129      	bne.n	8002160 <set_gyro_pwr+0x78>
    {
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	7b1a      	ldrb	r2, [r3, #12]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	7c1b      	ldrb	r3, [r3, #16]
 8002114:	429a      	cmp	r2, r3
 8002116:	d025      	beq.n	8002164 <set_gyro_pwr+0x7c>
        {
            /* Write gyro power */
            rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->gyro_cfg.power, 1, dev);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f103 010c 	add.w	r1, r3, #12
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	207e      	movs	r0, #126	@ 0x7e
 8002124:	f7fe ff13 	bl	8000f4e <bmi160_set_regs>
 8002128:	4603      	mov	r3, r0
 800212a:	73fb      	strb	r3, [r7, #15]
            if (dev->prev_gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	7c1b      	ldrb	r3, [r3, #16]
 8002130:	2b14      	cmp	r3, #20
 8002132:	d104      	bne.n	800213e <set_gyro_pwr+0x56>
            {
                /* Delay of 80 ms - datasheet Table 24 */
                dev->delay_ms(BMI160_GYRO_DELAY_MS);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002138:	2050      	movs	r0, #80	@ 0x50
 800213a:	4798      	blx	r3
 800213c:	e00b      	b.n	8002156 <set_gyro_pwr+0x6e>
            }
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	7c1b      	ldrb	r3, [r3, #16]
 8002142:	2b17      	cmp	r3, #23
 8002144:	d107      	bne.n	8002156 <set_gyro_pwr+0x6e>
                     (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	7b1b      	ldrb	r3, [r3, #12]
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 800214a:	2b15      	cmp	r3, #21
 800214c:	d103      	bne.n	8002156 <set_gyro_pwr+0x6e>
            {
                /* This delay is required for transition from
                 * fast-startup mode to normal mode - datasheet Table 3 */
                dev->delay_ms(10);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002152:	200a      	movs	r0, #10
 8002154:	4798      	blx	r3
            else
            {
                /* do nothing */
            }

            dev->prev_gyro_cfg.power = dev->gyro_cfg.power;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	7b1a      	ldrb	r2, [r3, #12]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	741a      	strb	r2, [r3, #16]
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 800215e:	e001      	b.n	8002164 <set_gyro_pwr+0x7c>
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 8002160:	23f3      	movs	r3, #243	@ 0xf3
 8002162:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002164:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <get_accel_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_accel_data(uint8_t len, struct bmi160_sensor_data *accel, const struct bmi160_dev *dev)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08c      	sub	sp, #48	@ 0x30
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
 800217c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 800217e:	2300      	movs	r3, #0
 8002180:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[9] = { 0 };
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	f107 0318 	add.w	r3, r7, #24
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	711a      	strb	r2, [r3, #4]
    uint8_t time_0 = 0;
 8002192:	2300      	movs	r3, #0
 8002194:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 8002198:	2300      	movs	r3, #0
 800219a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    /* read accel sensor data along with time if requested */
    rslt = bmi160_get_regs(BMI160_ACCEL_DATA_ADDR, data_array, 6 + len, dev);
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	3306      	adds	r3, #6
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	f107 0114 	add.w	r1, r7, #20
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2012      	movs	r0, #18
 80021b0:	f7fe fe9a 	bl	8000ee8 <bmi160_get_regs>
 80021b4:	4603      	mov	r3, r0
 80021b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (rslt == BMI160_OK)
 80021ba:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f040 8097 	bne.w	80022f2 <get_accel_data+0x182>
    {
        /* Accel Data */
        lsb = data_array[idx++];
 80021c4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80021c8:	1c5a      	adds	r2, r3, #1
 80021ca:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80021ce:	3330      	adds	r3, #48	@ 0x30
 80021d0:	443b      	add	r3, r7
 80021d2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80021d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 80021da:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80021de:	1c5a      	adds	r2, r3, #1
 80021e0:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80021e4:	3330      	adds	r3, #48	@ 0x30
 80021e6:	443b      	add	r3, r7
 80021e8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80021ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 80021f0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80021f4:	021b      	lsls	r3, r3, #8
 80021f6:	b21a      	sxth	r2, r3
 80021f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80021fc:	b21b      	sxth	r3, r3
 80021fe:	4313      	orrs	r3, r2
 8002200:	843b      	strh	r3, [r7, #32]
        accel->x = msblsb; /* Data in X axis */
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	8c3a      	ldrh	r2, [r7, #32]
 8002206:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 8002208:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800220c:	1c5a      	adds	r2, r3, #1
 800220e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002212:	3330      	adds	r3, #48	@ 0x30
 8002214:	443b      	add	r3, r7
 8002216:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800221a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800221e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002222:	1c5a      	adds	r2, r3, #1
 8002224:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002228:	3330      	adds	r3, #48	@ 0x30
 800222a:	443b      	add	r3, r7
 800222c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002230:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8002234:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002238:	021b      	lsls	r3, r3, #8
 800223a:	b21a      	sxth	r2, r3
 800223c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002240:	b21b      	sxth	r3, r3
 8002242:	4313      	orrs	r3, r2
 8002244:	843b      	strh	r3, [r7, #32]
        accel->y = msblsb; /* Data in Y axis */
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	8c3a      	ldrh	r2, [r7, #32]
 800224a:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 800224c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002250:	1c5a      	adds	r2, r3, #1
 8002252:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002256:	3330      	adds	r3, #48	@ 0x30
 8002258:	443b      	add	r3, r7
 800225a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800225e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8002262:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002266:	1c5a      	adds	r2, r3, #1
 8002268:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800226c:	3330      	adds	r3, #48	@ 0x30
 800226e:	443b      	add	r3, r7
 8002270:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002274:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8002278:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800227c:	021b      	lsls	r3, r3, #8
 800227e:	b21a      	sxth	r2, r3
 8002280:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002284:	b21b      	sxth	r3, r3
 8002286:	4313      	orrs	r3, r2
 8002288:	843b      	strh	r3, [r7, #32]
        accel->z = msblsb; /* Data in Z axis */
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	8c3a      	ldrh	r2, [r7, #32]
 800228e:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 8002290:	7bfb      	ldrb	r3, [r7, #15]
 8002292:	2b03      	cmp	r3, #3
 8002294:	d129      	bne.n	80022ea <get_accel_data+0x17a>
        {
            time_0 = data_array[idx++];
 8002296:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800229a:	1c5a      	adds	r2, r3, #1
 800229c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80022a0:	3330      	adds	r3, #48	@ 0x30
 80022a2:	443b      	add	r3, r7
 80022a4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80022a8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 80022ac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80022b0:	1c5a      	adds	r2, r3, #1
 80022b2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80022b6:	3330      	adds	r3, #48	@ 0x30
 80022b8:	443b      	add	r3, r7
 80022ba:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80022be:	021b      	lsls	r3, r3, #8
 80022c0:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 80022c2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80022c6:	1c5a      	adds	r2, r3, #1
 80022c8:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80022cc:	3330      	adds	r3, #48	@ 0x30
 80022ce:	443b      	add	r3, r7
 80022d0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80022d4:	041b      	lsls	r3, r3, #16
 80022d6:	627b      	str	r3, [r7, #36]	@ 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 80022d8:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80022da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022dc:	431a      	orrs	r2, r3
 80022de:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80022e2:	431a      	orrs	r2, r3
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	e006      	b.n	80022f8 <get_accel_data+0x188>
        }
        else
        {
            accel->sensortime = 0;
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	2200      	movs	r2, #0
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	e002      	b.n	80022f8 <get_accel_data+0x188>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 80022f2:	23fe      	movs	r3, #254	@ 0xfe
 80022f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 80022f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3730      	adds	r7, #48	@ 0x30
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <get_gyro_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_gyro_data(uint8_t len, struct bmi160_sensor_data *gyro, const struct bmi160_dev *dev)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08c      	sub	sp, #48	@ 0x30
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
 8002310:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 8002312:	2300      	movs	r3, #0
 8002314:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[15] = { 0 };
 8002318:	2300      	movs	r3, #0
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	f107 0314 	add.w	r3, r7, #20
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	f8c3 2007 	str.w	r2, [r3, #7]
    uint8_t time_0 = 0;
 800232a:	2300      	movs	r3, #0
 800232c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 8002330:	2300      	movs	r3, #0
 8002332:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 8002334:	2300      	movs	r3, #0
 8002336:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    if (len == 0)
 8002338:	7bfb      	ldrb	r3, [r7, #15]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d17b      	bne.n	8002436 <get_gyro_data+0x132>
    {
        /* read gyro data only */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 6, dev);
 800233e:	f107 0110 	add.w	r1, r7, #16
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2206      	movs	r2, #6
 8002346:	200c      	movs	r0, #12
 8002348:	f7fe fdce 	bl	8000ee8 <bmi160_get_regs>
 800234c:	4603      	mov	r3, r0
 800234e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rslt == BMI160_OK)
 8002352:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8002356:	2b00      	cmp	r3, #0
 8002358:	d169      	bne.n	800242e <get_gyro_data+0x12a>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 800235a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800235e:	1c5a      	adds	r2, r3, #1
 8002360:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002364:	3330      	adds	r3, #48	@ 0x30
 8002366:	443b      	add	r3, r7
 8002368:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800236c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 8002370:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002374:	1c5a      	adds	r2, r3, #1
 8002376:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800237a:	3330      	adds	r3, #48	@ 0x30
 800237c:	443b      	add	r3, r7
 800237e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002382:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8002386:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800238a:	021b      	lsls	r3, r3, #8
 800238c:	b21a      	sxth	r2, r3
 800238e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002392:	b21b      	sxth	r3, r3
 8002394:	4313      	orrs	r3, r2
 8002396:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* Data in X axis */
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	8c3a      	ldrh	r2, [r7, #32]
 800239c:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 800239e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80023a2:	1c5a      	adds	r2, r3, #1
 80023a4:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80023a8:	3330      	adds	r3, #48	@ 0x30
 80023aa:	443b      	add	r3, r7
 80023ac:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80023b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 80023b4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80023b8:	1c5a      	adds	r2, r3, #1
 80023ba:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80023be:	3330      	adds	r3, #48	@ 0x30
 80023c0:	443b      	add	r3, r7
 80023c2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80023c6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 80023ca:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80023ce:	021b      	lsls	r3, r3, #8
 80023d0:	b21a      	sxth	r2, r3
 80023d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80023d6:	b21b      	sxth	r3, r3
 80023d8:	4313      	orrs	r3, r2
 80023da:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* Data in Y axis */
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	8c3a      	ldrh	r2, [r7, #32]
 80023e0:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 80023e2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80023e6:	1c5a      	adds	r2, r3, #1
 80023e8:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80023ec:	3330      	adds	r3, #48	@ 0x30
 80023ee:	443b      	add	r3, r7
 80023f0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80023f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 80023f8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80023fc:	1c5a      	adds	r2, r3, #1
 80023fe:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002402:	3330      	adds	r3, #48	@ 0x30
 8002404:	443b      	add	r3, r7
 8002406:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800240a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 800240e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002412:	021b      	lsls	r3, r3, #8
 8002414:	b21a      	sxth	r2, r3
 8002416:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800241a:	b21b      	sxth	r3, r3
 800241c:	4313      	orrs	r3, r2
 800241e:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* Data in Z axis */
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	8c3a      	ldrh	r2, [r7, #32]
 8002424:	809a      	strh	r2, [r3, #4]
            gyro->sensortime = 0;
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	2200      	movs	r2, #0
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	e0ad      	b.n	800258a <get_gyro_data+0x286>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 800242e:	23fe      	movs	r3, #254	@ 0xfe
 8002430:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002434:	e0a9      	b.n	800258a <get_gyro_data+0x286>
        }
    }
    else
    {
        /* read gyro sensor data along with time */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 8002436:	7bfb      	ldrb	r3, [r7, #15]
 8002438:	b29b      	uxth	r3, r3
 800243a:	330c      	adds	r3, #12
 800243c:	b29a      	uxth	r2, r3
 800243e:	f107 0110 	add.w	r1, r7, #16
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	200c      	movs	r0, #12
 8002446:	f7fe fd4f 	bl	8000ee8 <bmi160_get_regs>
 800244a:	4603      	mov	r3, r0
 800244c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rslt == BMI160_OK)
 8002450:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8002454:	2b00      	cmp	r3, #0
 8002456:	f040 8095 	bne.w	8002584 <get_gyro_data+0x280>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 800245a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800245e:	1c5a      	adds	r2, r3, #1
 8002460:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002464:	3330      	adds	r3, #48	@ 0x30
 8002466:	443b      	add	r3, r7
 8002468:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800246c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 8002470:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002474:	1c5a      	adds	r2, r3, #1
 8002476:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800247a:	3330      	adds	r3, #48	@ 0x30
 800247c:	443b      	add	r3, r7
 800247e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002482:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8002486:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800248a:	021b      	lsls	r3, r3, #8
 800248c:	b21a      	sxth	r2, r3
 800248e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002492:	b21b      	sxth	r3, r3
 8002494:	4313      	orrs	r3, r2
 8002496:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* gyro X axis data */
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	8c3a      	ldrh	r2, [r7, #32]
 800249c:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 800249e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80024a8:	3330      	adds	r3, #48	@ 0x30
 80024aa:	443b      	add	r3, r7
 80024ac:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80024b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 80024b4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80024be:	3330      	adds	r3, #48	@ 0x30
 80024c0:	443b      	add	r3, r7
 80024c2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80024c6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 80024ca:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80024ce:	021b      	lsls	r3, r3, #8
 80024d0:	b21a      	sxth	r2, r3
 80024d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80024d6:	b21b      	sxth	r3, r3
 80024d8:	4313      	orrs	r3, r2
 80024da:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* gyro Y axis data */
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	8c3a      	ldrh	r2, [r7, #32]
 80024e0:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 80024e2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80024ec:	3330      	adds	r3, #48	@ 0x30
 80024ee:	443b      	add	r3, r7
 80024f0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80024f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 80024f8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80024fc:	1c5a      	adds	r2, r3, #1
 80024fe:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002502:	3330      	adds	r3, #48	@ 0x30
 8002504:	443b      	add	r3, r7
 8002506:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800250a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 800250e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002512:	021b      	lsls	r3, r3, #8
 8002514:	b21a      	sxth	r2, r3
 8002516:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800251a:	b21b      	sxth	r3, r3
 800251c:	4313      	orrs	r3, r2
 800251e:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* gyro Z axis data */
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	8c3a      	ldrh	r2, [r7, #32]
 8002524:	809a      	strh	r2, [r3, #4]
            idx = idx + 6;
 8002526:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800252a:	3306      	adds	r3, #6
 800252c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            time_0 = data_array[idx++];
 8002530:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800253a:	3330      	adds	r3, #48	@ 0x30
 800253c:	443b      	add	r3, r7
 800253e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002542:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 8002546:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800254a:	1c5a      	adds	r2, r3, #1
 800254c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002550:	3330      	adds	r3, #48	@ 0x30
 8002552:	443b      	add	r3, r7
 8002554:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002558:	021b      	lsls	r3, r3, #8
 800255a:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 800255c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002560:	1c5a      	adds	r2, r3, #1
 8002562:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002566:	3330      	adds	r3, #48	@ 0x30
 8002568:	443b      	add	r3, r7
 800256a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800256e:	041b      	lsls	r3, r3, #16
 8002570:	627b      	str	r3, [r7, #36]	@ 0x24
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8002572:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002576:	431a      	orrs	r2, r3
 8002578:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800257c:	431a      	orrs	r2, r3
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	609a      	str	r2, [r3, #8]
 8002582:	e002      	b.n	800258a <get_gyro_data+0x286>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 8002584:	23fe      	movs	r3, #254	@ 0xfe
 8002586:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }
    }

    return rslt;
 800258a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800258e:	4618      	mov	r0, r3
 8002590:	3730      	adds	r7, #48	@ 0x30
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <get_accel_gyro_data>:
 */
static int8_t get_accel_gyro_data(uint8_t len,
                                  struct bmi160_sensor_data *accel,
                                  struct bmi160_sensor_data *gyro,
                                  const struct bmi160_dev *dev)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b08c      	sub	sp, #48	@ 0x30
 800259a:	af00      	add	r7, sp, #0
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
 80025a0:	603b      	str	r3, [r7, #0]
 80025a2:	4603      	mov	r3, r0
 80025a4:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 80025a6:	2300      	movs	r3, #0
 80025a8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[15] = { 0 };
 80025ac:	2300      	movs	r3, #0
 80025ae:	613b      	str	r3, [r7, #16]
 80025b0:	f107 0314 	add.w	r3, r7, #20
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	f8c3 2007 	str.w	r2, [r3, #7]
    uint8_t time_0 = 0;
 80025be:	2300      	movs	r3, #0
 80025c0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 80025c8:	2300      	movs	r3, #0
 80025ca:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t msb;
    int16_t msblsb;

    /* read both accel and gyro sensor data
     * along with time if requested */
    rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 80025cc:	7bfb      	ldrb	r3, [r7, #15]
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	330c      	adds	r3, #12
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	f107 0110 	add.w	r1, r7, #16
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	200c      	movs	r0, #12
 80025dc:	f7fe fc84 	bl	8000ee8 <bmi160_get_regs>
 80025e0:	4603      	mov	r3, r0
 80025e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (rslt == BMI160_OK)
 80025e6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f040 8108 	bne.w	8002800 <get_accel_gyro_data+0x26a>
    {
        /* Gyro Data */
        lsb = data_array[idx++];
 80025f0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80025fa:	3330      	adds	r3, #48	@ 0x30
 80025fc:	443b      	add	r3, r7
 80025fe:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002602:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8002606:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002610:	3330      	adds	r3, #48	@ 0x30
 8002612:	443b      	add	r3, r7
 8002614:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002618:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800261c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002620:	021b      	lsls	r3, r3, #8
 8002622:	b21a      	sxth	r2, r3
 8002624:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002628:	b21b      	sxth	r3, r3
 800262a:	4313      	orrs	r3, r2
 800262c:	843b      	strh	r3, [r7, #32]
        gyro->x = msblsb; /* gyro X axis data */
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	8c3a      	ldrh	r2, [r7, #32]
 8002632:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 8002634:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002638:	1c5a      	adds	r2, r3, #1
 800263a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800263e:	3330      	adds	r3, #48	@ 0x30
 8002640:	443b      	add	r3, r7
 8002642:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002646:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800264a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800264e:	1c5a      	adds	r2, r3, #1
 8002650:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002654:	3330      	adds	r3, #48	@ 0x30
 8002656:	443b      	add	r3, r7
 8002658:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800265c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8002660:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002664:	021b      	lsls	r3, r3, #8
 8002666:	b21a      	sxth	r2, r3
 8002668:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800266c:	b21b      	sxth	r3, r3
 800266e:	4313      	orrs	r3, r2
 8002670:	843b      	strh	r3, [r7, #32]
        gyro->y = msblsb; /* gyro Y axis data */
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	8c3a      	ldrh	r2, [r7, #32]
 8002676:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 8002678:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002682:	3330      	adds	r3, #48	@ 0x30
 8002684:	443b      	add	r3, r7
 8002686:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800268a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800268e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002692:	1c5a      	adds	r2, r3, #1
 8002694:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002698:	3330      	adds	r3, #48	@ 0x30
 800269a:	443b      	add	r3, r7
 800269c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80026a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 80026a4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80026a8:	021b      	lsls	r3, r3, #8
 80026aa:	b21a      	sxth	r2, r3
 80026ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80026b0:	b21b      	sxth	r3, r3
 80026b2:	4313      	orrs	r3, r2
 80026b4:	843b      	strh	r3, [r7, #32]
        gyro->z = msblsb; /* gyro Z axis data */
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	8c3a      	ldrh	r2, [r7, #32]
 80026ba:	809a      	strh	r2, [r3, #4]
        /* Accel Data */
        lsb = data_array[idx++];
 80026bc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80026c0:	1c5a      	adds	r2, r3, #1
 80026c2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80026c6:	3330      	adds	r3, #48	@ 0x30
 80026c8:	443b      	add	r3, r7
 80026ca:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80026ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 80026d2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80026d6:	1c5a      	adds	r2, r3, #1
 80026d8:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80026dc:	3330      	adds	r3, #48	@ 0x30
 80026de:	443b      	add	r3, r7
 80026e0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80026e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 80026e8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80026ec:	021b      	lsls	r3, r3, #8
 80026ee:	b21a      	sxth	r2, r3
 80026f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80026f4:	b21b      	sxth	r3, r3
 80026f6:	4313      	orrs	r3, r2
 80026f8:	843b      	strh	r3, [r7, #32]
        accel->x = (int16_t)msblsb; /* accel X axis data */
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	8c3a      	ldrh	r2, [r7, #32]
 80026fe:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 8002700:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002704:	1c5a      	adds	r2, r3, #1
 8002706:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800270a:	3330      	adds	r3, #48	@ 0x30
 800270c:	443b      	add	r3, r7
 800270e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002712:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8002716:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800271a:	1c5a      	adds	r2, r3, #1
 800271c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002720:	3330      	adds	r3, #48	@ 0x30
 8002722:	443b      	add	r3, r7
 8002724:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002728:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800272c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002730:	021b      	lsls	r3, r3, #8
 8002732:	b21a      	sxth	r2, r3
 8002734:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002738:	b21b      	sxth	r3, r3
 800273a:	4313      	orrs	r3, r2
 800273c:	843b      	strh	r3, [r7, #32]
        accel->y = (int16_t)msblsb; /* accel Y axis data */
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	8c3a      	ldrh	r2, [r7, #32]
 8002742:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 8002744:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002748:	1c5a      	adds	r2, r3, #1
 800274a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800274e:	3330      	adds	r3, #48	@ 0x30
 8002750:	443b      	add	r3, r7
 8002752:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002756:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800275a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002764:	3330      	adds	r3, #48	@ 0x30
 8002766:	443b      	add	r3, r7
 8002768:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800276c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8002770:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002774:	021b      	lsls	r3, r3, #8
 8002776:	b21a      	sxth	r2, r3
 8002778:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800277c:	b21b      	sxth	r3, r3
 800277e:	4313      	orrs	r3, r2
 8002780:	843b      	strh	r3, [r7, #32]
        accel->z = (int16_t)msblsb; /* accel Z axis data */
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	8c3a      	ldrh	r2, [r7, #32]
 8002786:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 8002788:	7bfb      	ldrb	r3, [r7, #15]
 800278a:	2b03      	cmp	r3, #3
 800278c:	d131      	bne.n	80027f2 <get_accel_gyro_data+0x25c>
        {
            time_0 = data_array[idx++];
 800278e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002798:	3330      	adds	r3, #48	@ 0x30
 800279a:	443b      	add	r3, r7
 800279c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80027a0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 80027a4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80027a8:	1c5a      	adds	r2, r3, #1
 80027aa:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80027ae:	3330      	adds	r3, #48	@ 0x30
 80027b0:	443b      	add	r3, r7
 80027b2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80027b6:	021b      	lsls	r3, r3, #8
 80027b8:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 80027ba:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80027be:	1c5a      	adds	r2, r3, #1
 80027c0:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80027c4:	3330      	adds	r3, #48	@ 0x30
 80027c6:	443b      	add	r3, r7
 80027c8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80027cc:	041b      	lsls	r3, r3, #16
 80027ce:	627b      	str	r3, [r7, #36]	@ 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 80027d0:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80027d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d4:	431a      	orrs	r2, r3
 80027d6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80027da:	431a      	orrs	r2, r3
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	609a      	str	r2, [r3, #8]
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 80027e0:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80027e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e4:	431a      	orrs	r2, r3
 80027e6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	e009      	b.n	8002806 <get_accel_gyro_data+0x270>
        }
        else
        {
            accel->sensortime = 0;
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2200      	movs	r2, #0
 80027f6:	609a      	str	r2, [r3, #8]
            gyro->sensortime = 0;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	609a      	str	r2, [r3, #8]
 80027fe:	e002      	b.n	8002806 <get_accel_gyro_data+0x270>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 8002800:	23fe      	movs	r3, #254	@ 0xfe
 8002802:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 8002806:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800280a:	4618      	mov	r0, r3
 800280c:	3730      	adds	r7, #48	@ 0x30
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <enable_accel_any_motion_int>:
/*!
 * @brief This API enables the any-motion interrupt for accel.
 */
static int8_t enable_accel_any_motion_int(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                          struct bmi160_dev *dev)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b084      	sub	sp, #16
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
 800281a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800281c:	2300      	movs	r3, #0
 800281e:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002820:	2300      	movs	r3, #0
 8002822:	73bb      	strb	r3, [r7, #14]

    /* Enable any motion x, any motion y, any motion z
     * in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8002824:	f107 010d 	add.w	r1, r7, #13
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	2201      	movs	r2, #1
 800282c:	2050      	movs	r0, #80	@ 0x50
 800282e:	f7fe fb5b 	bl	8000ee8 <bmi160_get_regs>
 8002832:	4603      	mov	r3, r0
 8002834:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d151      	bne.n	80028e2 <enable_accel_any_motion_int+0xd0>
    {
        if (any_motion_int_cfg->anymotion_en == BMI160_ENABLE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b00      	cmp	r3, #0
 800284a:	d039      	beq.n	80028c0 <enable_accel_any_motion_int+0xae>
        {
            temp = data & ~BMI160_ANY_MOTION_X_INT_EN_MASK;
 800284c:	7b7b      	ldrb	r3, [r7, #13]
 800284e:	f023 0301 	bic.w	r3, r3, #1
 8002852:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion x axis */
            data = temp | (any_motion_int_cfg->anymotion_x & BMI160_ANY_MOTION_X_INT_EN_MASK);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800285c:	b2db      	uxtb	r3, r3
 800285e:	461a      	mov	r2, r3
 8002860:	7bbb      	ldrb	r3, [r7, #14]
 8002862:	4313      	orrs	r3, r2
 8002864:	b2db      	uxtb	r3, r3
 8002866:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_ANY_MOTION_Y_INT_EN_MASK;
 8002868:	7b7b      	ldrb	r3, [r7, #13]
 800286a:	f023 0302 	bic.w	r3, r3, #2
 800286e:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion y axis */
            data = temp | ((any_motion_int_cfg->anymotion_y << 1) & BMI160_ANY_MOTION_Y_INT_EN_MASK);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002878:	b2db      	uxtb	r3, r3
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	b25b      	sxtb	r3, r3
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	b25a      	sxtb	r2, r3
 8002884:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002888:	4313      	orrs	r3, r2
 800288a:	b25b      	sxtb	r3, r3
 800288c:	b2db      	uxtb	r3, r3
 800288e:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_ANY_MOTION_Z_INT_EN_MASK;
 8002890:	7b7b      	ldrb	r3, [r7, #13]
 8002892:	f023 0304 	bic.w	r3, r3, #4
 8002896:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion z axis */
            data = temp | ((any_motion_int_cfg->anymotion_z << 2) & BMI160_ANY_MOTION_Z_INT_EN_MASK);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	b25b      	sxtb	r3, r3
 80028a6:	f003 0304 	and.w	r3, r3, #4
 80028aa:	b25a      	sxtb	r2, r3
 80028ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	b25b      	sxtb	r3, r3
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	737b      	strb	r3, [r7, #13]

            /* any-motion feature selected*/
            dev->any_sig_sel = BMI160_ANY_MOTION_ENABLED;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	2200      	movs	r2, #0
 80028bc:	70da      	strb	r2, [r3, #3]
 80028be:	e007      	b.n	80028d0 <enable_accel_any_motion_int+0xbe>
        }
        else
        {
            data = data & ~BMI160_ANY_MOTION_ALL_INT_EN_MASK;
 80028c0:	7b7b      	ldrb	r3, [r7, #13]
 80028c2:	f023 0307 	bic.w	r3, r3, #7
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	737b      	strb	r3, [r7, #13]

            /* neither any-motion feature nor sig-motion selected */
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	22ff      	movs	r2, #255	@ 0xff
 80028ce:	70da      	strb	r2, [r3, #3]
        }

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 80028d0:	f107 010d 	add.w	r1, r7, #13
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	2201      	movs	r2, #1
 80028d8:	2050      	movs	r0, #80	@ 0x50
 80028da:	f7fe fb38 	bl	8000f4e <bmi160_set_regs>
 80028de:	4603      	mov	r3, r0
 80028e0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80028e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <disable_sig_motion_int>:

/*!
 * @brief This API disable the sig-motion interrupt.
 */
static int8_t disable_sig_motion_int(const struct bmi160_dev *dev)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b084      	sub	sp, #16
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 80028f6:	2300      	movs	r3, #0
 80028f8:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80028fa:	2300      	movs	r3, #0
 80028fc:	73bb      	strb	r3, [r7, #14]

    /* Disabling Significant motion interrupt if enabled */
    rslt = bmi160_get_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 80028fe:	f107 010d 	add.w	r1, r7, #13
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	2062      	movs	r0, #98	@ 0x62
 8002908:	f7fe faee 	bl	8000ee8 <bmi160_get_regs>
 800290c:	4603      	mov	r3, r0
 800290e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002910:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d115      	bne.n	8002944 <disable_sig_motion_int+0x56>
    {
        temp = (data & BMI160_SIG_MOTION_SEL_MASK);
 8002918:	7b7b      	ldrb	r3, [r7, #13]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	73bb      	strb	r3, [r7, #14]
        if (temp)
 8002920:	7bbb      	ldrb	r3, [r7, #14]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00e      	beq.n	8002944 <disable_sig_motion_int+0x56>
        {
            temp = data & ~BMI160_SIG_MOTION_SEL_MASK;
 8002926:	7b7b      	ldrb	r3, [r7, #13]
 8002928:	f023 0302 	bic.w	r3, r3, #2
 800292c:	73bb      	strb	r3, [r7, #14]
            data = temp;
 800292e:	7bbb      	ldrb	r3, [r7, #14]
 8002930:	737b      	strb	r3, [r7, #13]

            /* Write data to register */
            rslt = bmi160_set_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 8002932:	f107 010d 	add.w	r1, r7, #13
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	2062      	movs	r0, #98	@ 0x62
 800293c:	f7fe fb07 	bl	8000f4e <bmi160_set_regs>
 8002940:	4603      	mov	r3, r0
 8002942:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8002944:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <map_feature_interrupt>:
/*!
 *  @brief This API is used to map/unmap the Any/Sig motion, Step det/Low-g,
 *  Double tap, Single tap, Orientation, Flat, High-G, Nomotion interrupt pins.
 */
static int8_t map_feature_interrupt(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data[3] = { 0, 0, 0 };
 800295a:	4a48      	ldr	r2, [pc, #288]	@ (8002a7c <map_feature_interrupt+0x12c>)
 800295c:	f107 030c 	add.w	r3, r7, #12
 8002960:	6812      	ldr	r2, [r2, #0]
 8002962:	4611      	mov	r1, r2
 8002964:	8019      	strh	r1, [r3, #0]
 8002966:	3302      	adds	r3, #2
 8002968:	0c12      	lsrs	r2, r2, #16
 800296a:	701a      	strb	r2, [r3, #0]
    uint8_t temp[3] = { 0, 0, 0 };
 800296c:	4a43      	ldr	r2, [pc, #268]	@ (8002a7c <map_feature_interrupt+0x12c>)
 800296e:	f107 0308 	add.w	r3, r7, #8
 8002972:	6812      	ldr	r2, [r2, #0]
 8002974:	4611      	mov	r1, r2
 8002976:	8019      	strh	r1, [r3, #0]
 8002978:	3302      	adds	r3, #2
 800297a:	0c12      	lsrs	r2, r2, #16
 800297c:	701a      	strb	r2, [r3, #0]

    rslt = bmi160_get_regs(BMI160_INT_MAP_0_ADDR, data, 3, dev);
 800297e:	f107 010c 	add.w	r1, r7, #12
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	2203      	movs	r2, #3
 8002986:	2055      	movs	r0, #85	@ 0x55
 8002988:	f7fe faae 	bl	8000ee8 <bmi160_get_regs>
 800298c:	4603      	mov	r3, r0
 800298e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002990:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d16a      	bne.n	8002a6e <map_feature_interrupt+0x11e>
    {
        temp[0] = data[0] & ~int_mask_lookup_table[int_config->int_type];
 8002998:	7b3b      	ldrb	r3, [r7, #12]
 800299a:	b25a      	sxtb	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	785b      	ldrb	r3, [r3, #1]
 80029a0:	4619      	mov	r1, r3
 80029a2:	4b37      	ldr	r3, [pc, #220]	@ (8002a80 <map_feature_interrupt+0x130>)
 80029a4:	5c5b      	ldrb	r3, [r3, r1]
 80029a6:	b25b      	sxtb	r3, r3
 80029a8:	43db      	mvns	r3, r3
 80029aa:	b25b      	sxtb	r3, r3
 80029ac:	4013      	ands	r3, r2
 80029ae:	b25b      	sxtb	r3, r3
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	723b      	strb	r3, [r7, #8]
        temp[2] = data[2] & ~int_mask_lookup_table[int_config->int_type];
 80029b4:	7bbb      	ldrb	r3, [r7, #14]
 80029b6:	b25a      	sxtb	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	785b      	ldrb	r3, [r3, #1]
 80029bc:	4619      	mov	r1, r3
 80029be:	4b30      	ldr	r3, [pc, #192]	@ (8002a80 <map_feature_interrupt+0x130>)
 80029c0:	5c5b      	ldrb	r3, [r3, r1]
 80029c2:	b25b      	sxtb	r3, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	b25b      	sxtb	r3, r3
 80029c8:	4013      	ands	r3, r2
 80029ca:	b25b      	sxtb	r3, r3
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	72bb      	strb	r3, [r7, #10]
        switch (int_config->int_channel)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b03      	cmp	r3, #3
 80029d6:	d83b      	bhi.n	8002a50 <map_feature_interrupt+0x100>
 80029d8:	a201      	add	r2, pc, #4	@ (adr r2, 80029e0 <map_feature_interrupt+0x90>)
 80029da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029de:	bf00      	nop
 80029e0:	080029f1 	.word	0x080029f1
 80029e4:	080029fb 	.word	0x080029fb
 80029e8:	08002a13 	.word	0x08002a13
 80029ec:	08002a2b 	.word	0x08002a2b
        {
            case BMI160_INT_CHANNEL_NONE:
                data[0] = temp[0];
 80029f0:	7a3b      	ldrb	r3, [r7, #8]
 80029f2:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2];
 80029f4:	7abb      	ldrb	r3, [r7, #10]
 80029f6:	73bb      	strb	r3, [r7, #14]
                break;
 80029f8:	e02c      	b.n	8002a54 <map_feature_interrupt+0x104>
            case BMI160_INT_CHANNEL_1:
                data[0] = temp[0] | int_mask_lookup_table[int_config->int_type];
 80029fa:	7a3a      	ldrb	r2, [r7, #8]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	785b      	ldrb	r3, [r3, #1]
 8002a00:	4619      	mov	r1, r3
 8002a02:	4b1f      	ldr	r3, [pc, #124]	@ (8002a80 <map_feature_interrupt+0x130>)
 8002a04:	5c5b      	ldrb	r3, [r3, r1]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2];
 8002a0c:	7abb      	ldrb	r3, [r7, #10]
 8002a0e:	73bb      	strb	r3, [r7, #14]
                break;
 8002a10:	e020      	b.n	8002a54 <map_feature_interrupt+0x104>
            case BMI160_INT_CHANNEL_2:
                data[2] = temp[2] | int_mask_lookup_table[int_config->int_type];
 8002a12:	7aba      	ldrb	r2, [r7, #10]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	785b      	ldrb	r3, [r3, #1]
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4b19      	ldr	r3, [pc, #100]	@ (8002a80 <map_feature_interrupt+0x130>)
 8002a1c:	5c5b      	ldrb	r3, [r3, r1]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	73bb      	strb	r3, [r7, #14]
                data[0] = temp[0];
 8002a24:	7a3b      	ldrb	r3, [r7, #8]
 8002a26:	733b      	strb	r3, [r7, #12]
                break;
 8002a28:	e014      	b.n	8002a54 <map_feature_interrupt+0x104>
            case BMI160_INT_CHANNEL_BOTH:
                data[0] = temp[0] | int_mask_lookup_table[int_config->int_type];
 8002a2a:	7a3a      	ldrb	r2, [r7, #8]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	785b      	ldrb	r3, [r3, #1]
 8002a30:	4619      	mov	r1, r3
 8002a32:	4b13      	ldr	r3, [pc, #76]	@ (8002a80 <map_feature_interrupt+0x130>)
 8002a34:	5c5b      	ldrb	r3, [r3, r1]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2] | int_mask_lookup_table[int_config->int_type];
 8002a3c:	7aba      	ldrb	r2, [r7, #10]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	785b      	ldrb	r3, [r3, #1]
 8002a42:	4619      	mov	r1, r3
 8002a44:	4b0e      	ldr	r3, [pc, #56]	@ (8002a80 <map_feature_interrupt+0x130>)
 8002a46:	5c5b      	ldrb	r3, [r3, r1]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	73bb      	strb	r3, [r7, #14]
                break;
 8002a4e:	e001      	b.n	8002a54 <map_feature_interrupt+0x104>
            default:
                rslt = BMI160_E_OUT_OF_RANGE;
 8002a50:	23fc      	movs	r3, #252	@ 0xfc
 8002a52:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMI160_OK)
 8002a54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d108      	bne.n	8002a6e <map_feature_interrupt+0x11e>
        {
            rslt = bmi160_set_regs(BMI160_INT_MAP_0_ADDR, data, 3, dev);
 8002a5c:	f107 010c 	add.w	r1, r7, #12
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	2203      	movs	r2, #3
 8002a64:	2055      	movs	r0, #85	@ 0x55
 8002a66:	f7fe fa72 	bl	8000f4e <bmi160_set_regs>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8002a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	080152d0 	.word	0x080152d0
 8002a80:	08015380 	.word	0x08015380

08002a84 <map_hardware_interrupt>:
/*!
 *  @brief This API is used to map/unmap the Dataready(Accel & Gyro), FIFO full
 *  and FIFO watermark interrupt.
 */
static int8_t map_hardware_interrupt(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002a92:	2300      	movs	r3, #0
 8002a94:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_MAP_1_ADDR, &data, 1, dev);
 8002a96:	f107 010d 	add.w	r1, r7, #13
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	2056      	movs	r0, #86	@ 0x56
 8002aa0:	f7fe fa22 	bl	8000ee8 <bmi160_get_regs>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002aa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d168      	bne.n	8002b82 <map_hardware_interrupt+0xfe>
    {
        temp = data & ~int_mask_lookup_table[int_config->int_type];
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	785b      	ldrb	r3, [r3, #1]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	4b36      	ldr	r3, [pc, #216]	@ (8002b90 <map_hardware_interrupt+0x10c>)
 8002ab8:	5c9b      	ldrb	r3, [r3, r2]
 8002aba:	b25b      	sxtb	r3, r3
 8002abc:	43db      	mvns	r3, r3
 8002abe:	b25a      	sxtb	r2, r3
 8002ac0:	7b7b      	ldrb	r3, [r7, #13]
 8002ac2:	b25b      	sxtb	r3, r3
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	b25b      	sxtb	r3, r3
 8002ac8:	73bb      	strb	r3, [r7, #14]
        temp = temp & ~((uint8_t)(int_mask_lookup_table[int_config->int_type] << 4));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	785b      	ldrb	r3, [r3, #1]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	4b2f      	ldr	r3, [pc, #188]	@ (8002b90 <map_hardware_interrupt+0x10c>)
 8002ad2:	5c9b      	ldrb	r3, [r3, r2]
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	b25a      	sxtb	r2, r3
 8002ade:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	b25b      	sxtb	r3, r3
 8002ae6:	73bb      	strb	r3, [r7, #14]
        switch (int_config->int_channel)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b03      	cmp	r3, #3
 8002aee:	d839      	bhi.n	8002b64 <map_hardware_interrupt+0xe0>
 8002af0:	a201      	add	r2, pc, #4	@ (adr r2, 8002af8 <map_hardware_interrupt+0x74>)
 8002af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af6:	bf00      	nop
 8002af8:	08002b09 	.word	0x08002b09
 8002afc:	08002b0f 	.word	0x08002b0f
 8002b00:	08002b27 	.word	0x08002b27
 8002b04:	08002b3b 	.word	0x08002b3b
        {
            case BMI160_INT_CHANNEL_NONE:
                data = temp;
 8002b08:	7bbb      	ldrb	r3, [r7, #14]
 8002b0a:	737b      	strb	r3, [r7, #13]
                break;
 8002b0c:	e02c      	b.n	8002b68 <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_1:
                data = temp | (uint8_t)((int_mask_lookup_table[int_config->int_type]) << 4);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	785b      	ldrb	r3, [r3, #1]
 8002b12:	461a      	mov	r2, r3
 8002b14:	4b1e      	ldr	r3, [pc, #120]	@ (8002b90 <map_hardware_interrupt+0x10c>)
 8002b16:	5c9b      	ldrb	r3, [r3, r2]
 8002b18:	011b      	lsls	r3, r3, #4
 8002b1a:	b2da      	uxtb	r2, r3
 8002b1c:	7bbb      	ldrb	r3, [r7, #14]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	737b      	strb	r3, [r7, #13]
                break;
 8002b24:	e020      	b.n	8002b68 <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_2:
                data = temp | int_mask_lookup_table[int_config->int_type];
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	785b      	ldrb	r3, [r3, #1]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	4b18      	ldr	r3, [pc, #96]	@ (8002b90 <map_hardware_interrupt+0x10c>)
 8002b2e:	5c9a      	ldrb	r2, [r3, r2]
 8002b30:	7bbb      	ldrb	r3, [r7, #14]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	737b      	strb	r3, [r7, #13]
                break;
 8002b38:	e016      	b.n	8002b68 <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_BOTH:
                data = temp | int_mask_lookup_table[int_config->int_type];
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	785b      	ldrb	r3, [r3, #1]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	4b13      	ldr	r3, [pc, #76]	@ (8002b90 <map_hardware_interrupt+0x10c>)
 8002b42:	5c9a      	ldrb	r2, [r3, r2]
 8002b44:	7bbb      	ldrb	r3, [r7, #14]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	737b      	strb	r3, [r7, #13]
                data = data | (uint8_t)((int_mask_lookup_table[int_config->int_type]) << 4);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	785b      	ldrb	r3, [r3, #1]
 8002b50:	461a      	mov	r2, r3
 8002b52:	4b0f      	ldr	r3, [pc, #60]	@ (8002b90 <map_hardware_interrupt+0x10c>)
 8002b54:	5c9b      	ldrb	r3, [r3, r2]
 8002b56:	011b      	lsls	r3, r3, #4
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	7b7b      	ldrb	r3, [r7, #13]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	737b      	strb	r3, [r7, #13]
                break;
 8002b62:	e001      	b.n	8002b68 <map_hardware_interrupt+0xe4>
            default:
                rslt = BMI160_E_OUT_OF_RANGE;
 8002b64:	23fc      	movs	r3, #252	@ 0xfc
 8002b66:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMI160_OK)
 8002b68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d108      	bne.n	8002b82 <map_hardware_interrupt+0xfe>
        {
            rslt = bmi160_set_regs(BMI160_INT_MAP_1_ADDR, &data, 1, dev);
 8002b70:	f107 010d 	add.w	r1, r7, #13
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	2201      	movs	r2, #1
 8002b78:	2056      	movs	r0, #86	@ 0x56
 8002b7a:	f7fe f9e8 	bl	8000f4e <bmi160_set_regs>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8002b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	08015380 	.word	0x08015380

08002b94 <config_any_motion_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for any-motion interrupt.
 */
static int8_t config_any_motion_src(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                    const struct bmi160_dev *dev)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8002ba6:	f107 010d 	add.w	r1, r7, #13
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	2201      	movs	r2, #1
 8002bae:	2059      	movs	r0, #89	@ 0x59
 8002bb0:	f7fe f99a 	bl	8000ee8 <bmi160_get_regs>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002bb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d119      	bne.n	8002bf4 <config_any_motion_src+0x60>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 8002bc0:	7b7b      	ldrb	r3, [r7, #13]
 8002bc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002bc6:	73bb      	strb	r3, [r7, #14]
        data = temp | ((any_motion_int_cfg->anymotion_data_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	01db      	lsls	r3, r3, #7
 8002bd4:	b25a      	sxtb	r2, r3
 8002bd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	b25b      	sxtb	r3, r3
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8002be2:	f107 010d 	add.w	r1, r7, #13
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	2201      	movs	r2, #1
 8002bea:	2059      	movs	r0, #89	@ 0x59
 8002bec:	f7fe f9af 	bl	8000f4e <bmi160_set_regs>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002bf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <config_any_dur_threshold>:
 * @brief This API configure the duration and threshold of
 * any-motion interrupt.
 */
static int8_t config_any_dur_threshold(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                       const struct bmi160_dev *dev)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	733b      	strb	r3, [r7, #12]
    uint8_t temp = 0;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[2] = { 0 };
 8002c12:	2300      	movs	r3, #0
 8002c14:	813b      	strh	r3, [r7, #8]
    uint8_t dur;

    /* Configure Int Motion 0 register */
    rslt = bmi160_get_regs(BMI160_INT_MOTION_0_ADDR, &data, 1, dev);
 8002c16:	f107 010c 	add.w	r1, r7, #12
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	205f      	movs	r0, #95	@ 0x5f
 8002c20:	f7fe f962 	bl	8000ee8 <bmi160_get_regs>
 8002c24:	4603      	mov	r3, r0
 8002c26:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002c28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d122      	bne.n	8002c76 <config_any_dur_threshold+0x76>
    {
        /* slope duration */
        dur = (uint8_t)any_motion_int_cfg->anymotion_dur;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	737b      	strb	r3, [r7, #13]
        temp = data & ~BMI160_SLOPE_INT_DUR_MASK;
 8002c3c:	7b3b      	ldrb	r3, [r7, #12]
 8002c3e:	f023 0303 	bic.w	r3, r3, #3
 8002c42:	73bb      	strb	r3, [r7, #14]
        data = temp | (dur & BMI160_MOTION_SRC_INT_MASK);
 8002c44:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002c48:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002c4c:	b25a      	sxtb	r2, r3
 8002c4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	b25b      	sxtb	r3, r3
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	733b      	strb	r3, [r7, #12]
        data_array[0] = data;
 8002c5a:	7b3b      	ldrb	r3, [r7, #12]
 8002c5c:	723b      	strb	r3, [r7, #8]

        /* add slope threshold */
        data_array[1] = any_motion_int_cfg->anymotion_thr;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	785b      	ldrb	r3, [r3, #1]
 8002c62:	727b      	strb	r3, [r7, #9]
        /* INT MOTION 0 and INT MOTION 1 address lie consecutively,
         * hence writing data to respective registers at one go */

        /* Writing to Int_motion 0 and
         * Int_motion 1 Address simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_MOTION_0_ADDR, data_array, 2, dev);
 8002c64:	f107 0108 	add.w	r1, r7, #8
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	205f      	movs	r0, #95	@ 0x5f
 8002c6e:	f7fe f96e 	bl	8000f4e <bmi160_set_regs>
 8002c72:	4603      	mov	r3, r0
 8002c74:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <config_any_motion_int_settg>:
 * @brief This API configure necessary setting of any-motion interrupt.
 */
static int8_t config_any_motion_int_settg(const struct bmi160_int_settg *int_config,
                                          const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                          const struct bmi160_dev *dev)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b086      	sub	sp, #24
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	60f8      	str	r0, [r7, #12]
 8002c8a:	60b9      	str	r1, [r7, #8]
 8002c8c:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f7fe fee0 	bl	8001a56 <set_intr_pin_config>
 8002c96:	4603      	mov	r3, r0
 8002c98:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8002c9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d122      	bne.n	8002ce8 <config_any_motion_int_settg+0x66>
    {
        rslt = disable_sig_motion_int(dev);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7ff fe23 	bl	80028ee <disable_sig_motion_int>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8002cac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d119      	bne.n	8002ce8 <config_any_motion_int_settg+0x66>
        {
            rslt = map_feature_interrupt(int_config, dev);
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f7ff fe4a 	bl	8002950 <map_feature_interrupt>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 8002cc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10f      	bne.n	8002ce8 <config_any_motion_int_settg+0x66>
            {
                rslt = config_any_motion_src(any_motion_int_cfg, dev);
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	68b8      	ldr	r0, [r7, #8]
 8002ccc:	f7ff ff62 	bl	8002b94 <config_any_motion_src>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMI160_OK)
 8002cd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d105      	bne.n	8002ce8 <config_any_motion_int_settg+0x66>
                {
                    rslt = config_any_dur_threshold(any_motion_int_cfg, dev);
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	68b8      	ldr	r0, [r7, #8]
 8002ce0:	f7ff ff8e 	bl	8002c00 <config_any_dur_threshold>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    }

    return rslt;
 8002ce8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3718      	adds	r7, #24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <enable_data_ready_int>:

/*!
 * @brief This API enable the data ready interrupt.
 */
static int8_t enable_data_ready_int(const struct bmi160_dev *dev)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002d00:	2300      	movs	r3, #0
 8002d02:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8002d04:	f107 010d 	add.w	r1, r7, #13
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	2051      	movs	r0, #81	@ 0x51
 8002d0e:	f7fe f8eb 	bl	8000ee8 <bmi160_get_regs>
 8002d12:	4603      	mov	r3, r0
 8002d14:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d111      	bne.n	8002d42 <enable_data_ready_int+0x4e>
    {
        temp = data & ~BMI160_DATA_RDY_INT_EN_MASK;
 8002d1e:	7b7b      	ldrb	r3, [r7, #13]
 8002d20:	f023 0310 	bic.w	r3, r3, #16
 8002d24:	73bb      	strb	r3, [r7, #14]
        data = temp | ((1 << 4) & BMI160_DATA_RDY_INT_EN_MASK);
 8002d26:	7bbb      	ldrb	r3, [r7, #14]
 8002d28:	f043 0310 	orr.w	r3, r3, #16
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	737b      	strb	r3, [r7, #13]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8002d30:	f107 010d 	add.w	r1, r7, #13
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	2051      	movs	r0, #81	@ 0x51
 8002d3a:	f7fe f908 	bl	8000f4e <bmi160_set_regs>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <enable_no_motion_int>:
/*!
 * @brief This API enables the no motion/slow motion interrupt.
 */
static int8_t enable_no_motion_int(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                   const struct bmi160_dev *dev)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b084      	sub	sp, #16
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
 8002d56:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	73bb      	strb	r3, [r7, #14]

    /* Enable no motion x, no motion y, no motion z
     * in Int Enable 2 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 8002d60:	f107 010d 	add.w	r1, r7, #13
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	2201      	movs	r2, #1
 8002d68:	2052      	movs	r0, #82	@ 0x52
 8002d6a:	f7fe f8bd 	bl	8000ee8 <bmi160_get_regs>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d138      	bne.n	8002dec <enable_no_motion_int+0x9e>
    {
        if (no_mot_int_cfg->no_motion_x == 1)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d008      	beq.n	8002d9a <enable_no_motion_int+0x4c>
        {
            temp = data & ~BMI160_NO_MOTION_X_INT_EN_MASK;
 8002d88:	7b7b      	ldrb	r3, [r7, #13]
 8002d8a:	f023 0301 	bic.w	r3, r3, #1
 8002d8e:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | (1 & BMI160_NO_MOTION_X_INT_EN_MASK);
 8002d90:	7bbb      	ldrb	r3, [r7, #14]
 8002d92:	f043 0301 	orr.w	r3, r3, #1
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	737b      	strb	r3, [r7, #13]
        }

        if (no_mot_int_cfg->no_motion_y == 1)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d008      	beq.n	8002dba <enable_no_motion_int+0x6c>
        {
            temp = data & ~BMI160_NO_MOTION_Y_INT_EN_MASK;
 8002da8:	7b7b      	ldrb	r3, [r7, #13]
 8002daa:	f023 0302 	bic.w	r3, r3, #2
 8002dae:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | ((1 << 1) & BMI160_NO_MOTION_Y_INT_EN_MASK);
 8002db0:	7bbb      	ldrb	r3, [r7, #14]
 8002db2:	f043 0302 	orr.w	r3, r3, #2
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	737b      	strb	r3, [r7, #13]
        }

        if (no_mot_int_cfg->no_motion_z == 1)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	f003 0304 	and.w	r3, r3, #4
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d008      	beq.n	8002dda <enable_no_motion_int+0x8c>
        {
            temp = data & ~BMI160_NO_MOTION_Z_INT_EN_MASK;
 8002dc8:	7b7b      	ldrb	r3, [r7, #13]
 8002dca:	f023 0304 	bic.w	r3, r3, #4
 8002dce:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | ((1 << 2) & BMI160_NO_MOTION_Z_INT_EN_MASK);
 8002dd0:	7bbb      	ldrb	r3, [r7, #14]
 8002dd2:	f043 0304 	orr.w	r3, r3, #4
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	737b      	strb	r3, [r7, #13]
        }

        /* write data to Int Enable 2 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 8002dda:	f107 010d 	add.w	r1, r7, #13
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2201      	movs	r2, #1
 8002de2:	2052      	movs	r0, #82	@ 0x52
 8002de4:	f7fe f8b3 	bl	8000f4e <bmi160_set_regs>
 8002de8:	4603      	mov	r3, r0
 8002dea:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <config_no_motion_int_settg>:
 * no motion/slow motion interrupt.
 */
static int8_t config_no_motion_int_settg(const struct bmi160_int_settg *int_config,
                                         const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                         const struct bmi160_dev *dev)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f7fe fe25 	bl	8001a56 <set_intr_pin_config>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8002e10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d119      	bne.n	8002e4c <config_no_motion_int_settg+0x54>
    {
        rslt = map_feature_interrupt(int_config, dev);
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f7ff fd98 	bl	8002950 <map_feature_interrupt>
 8002e20:	4603      	mov	r3, r0
 8002e22:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8002e24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10f      	bne.n	8002e4c <config_no_motion_int_settg+0x54>
        {
            rslt = config_no_motion_data_src(no_mot_int_cfg, dev);
 8002e2c:	6879      	ldr	r1, [r7, #4]
 8002e2e:	68b8      	ldr	r0, [r7, #8]
 8002e30:	f000 f812 	bl	8002e58 <config_no_motion_data_src>
 8002e34:	4603      	mov	r3, r0
 8002e36:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 8002e38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d105      	bne.n	8002e4c <config_no_motion_int_settg+0x54>
            {
                rslt = config_no_motion_dur_thr(no_mot_int_cfg, dev);
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	68b8      	ldr	r0, [r7, #8]
 8002e44:	f000 f83e 	bl	8002ec4 <config_no_motion_dur_thr>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8002e4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <config_no_motion_data_src>:
/*!
 * @brief This API configure the source of interrupt for no motion.
 */
static int8_t config_no_motion_data_src(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                        const struct bmi160_dev *dev)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002e62:	2300      	movs	r3, #0
 8002e64:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002e66:	2300      	movs	r3, #0
 8002e68:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8002e6a:	f107 010d 	add.w	r1, r7, #13
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	2201      	movs	r2, #1
 8002e72:	2059      	movs	r0, #89	@ 0x59
 8002e74:	f7fe f838 	bl	8000ee8 <bmi160_get_regs>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002e7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d119      	bne.n	8002eb8 <config_no_motion_data_src+0x60>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 8002e84:	7b7b      	ldrb	r3, [r7, #13]
 8002e86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e8a:	73bb      	strb	r3, [r7, #14]
        data = temp | ((no_mot_int_cfg->no_motion_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	785b      	ldrb	r3, [r3, #1]
 8002e90:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	01db      	lsls	r3, r3, #7
 8002e98:	b25a      	sxtb	r2, r3
 8002e9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	b25b      	sxtb	r3, r3
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8002ea6:	f107 010d 	add.w	r1, r7, #13
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2201      	movs	r2, #1
 8002eae:	2059      	movs	r0, #89	@ 0x59
 8002eb0:	f7fe f84d 	bl	8000f4e <bmi160_set_regs>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002eb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <config_no_motion_dur_thr>:
 * @brief This API configure the duration and threshold of
 * no motion/slow motion interrupt along with selection of no/slow motion.
 */
static int8_t config_no_motion_dur_thr(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                       const struct bmi160_dev *dev)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	72fb      	strb	r3, [r7, #11]
    uint8_t temp = 0;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	73bb      	strb	r3, [r7, #14]
    uint8_t temp_1 = 0;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	737b      	strb	r3, [r7, #13]
    uint8_t reg_addr;
    uint8_t data_array[2] = { 0 };
 8002eda:	2300      	movs	r3, #0
 8002edc:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_MOTION register */
    reg_addr = BMI160_INT_MOTION_0_ADDR;
 8002ede:	235f      	movs	r3, #95	@ 0x5f
 8002ee0:	733b      	strb	r3, [r7, #12]
    rslt = bmi160_get_regs(reg_addr, &data, 1, dev);
 8002ee2:	f107 010b 	add.w	r1, r7, #11
 8002ee6:	7b38      	ldrb	r0, [r7, #12]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f7fd fffc 	bl	8000ee8 <bmi160_get_regs>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d14b      	bne.n	8002f94 <config_no_motion_dur_thr+0xd0>
    {
        temp = data & ~BMI160_NO_MOTION_INT_DUR_MASK;
 8002efc:	7afb      	ldrb	r3, [r7, #11]
 8002efe:	f003 0303 	and.w	r3, r3, #3
 8002f02:	73bb      	strb	r3, [r7, #14]

        /* Adding no_motion duration */
        data = temp | ((no_mot_int_cfg->no_motion_dur << 2) & BMI160_NO_MOTION_INT_DUR_MASK);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	b25a      	sxtb	r2, r3
 8002f12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	b25b      	sxtb	r3, r3
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	72fb      	strb	r3, [r7, #11]

        /* Write data to NO_MOTION 0 address */
        rslt = bmi160_set_regs(reg_addr, &data, 1, dev);
 8002f1e:	f107 010b 	add.w	r1, r7, #11
 8002f22:	7b38      	ldrb	r0, [r7, #12]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f7fe f811 	bl	8000f4e <bmi160_set_regs>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8002f30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d12d      	bne.n	8002f94 <config_no_motion_dur_thr+0xd0>
        {
            reg_addr = BMI160_INT_MOTION_3_ADDR;
 8002f38:	2362      	movs	r3, #98	@ 0x62
 8002f3a:	733b      	strb	r3, [r7, #12]
            rslt = bmi160_get_regs(reg_addr, &data, 1, dev);
 8002f3c:	f107 010b 	add.w	r1, r7, #11
 8002f40:	7b38      	ldrb	r0, [r7, #12]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f7fd ffcf 	bl	8000ee8 <bmi160_get_regs>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8002f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d11e      	bne.n	8002f94 <config_no_motion_dur_thr+0xd0>
            {
                temp = data & ~BMI160_NO_MOTION_SEL_BIT_MASK;
 8002f56:	7afb      	ldrb	r3, [r7, #11]
 8002f58:	f023 0301 	bic.w	r3, r3, #1
 8002f5c:	73bb      	strb	r3, [r7, #14]

                /* Adding no_motion_sel bit */
                temp_1 = (no_mot_int_cfg->no_motion_sel & BMI160_NO_MOTION_SEL_BIT_MASK);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	785b      	ldrb	r3, [r3, #1]
 8002f62:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	737b      	strb	r3, [r7, #13]
                data = (temp | temp_1);
 8002f6a:	7bba      	ldrb	r2, [r7, #14]
 8002f6c:	7b7b      	ldrb	r3, [r7, #13]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	72fb      	strb	r3, [r7, #11]
                data_array[1] = data;
 8002f74:	7afb      	ldrb	r3, [r7, #11]
 8002f76:	727b      	strb	r3, [r7, #9]

                /* Adding no motion threshold */
                data_array[0] = no_mot_int_cfg->no_motion_thres;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	789b      	ldrb	r3, [r3, #2]
 8002f7c:	723b      	strb	r3, [r7, #8]
                reg_addr = BMI160_INT_MOTION_2_ADDR;
 8002f7e:	2361      	movs	r3, #97	@ 0x61
 8002f80:	733b      	strb	r3, [r7, #12]

                /* writing data to INT_MOTION 2 and INT_MOTION 3
                 * address simultaneously */
                rslt = bmi160_set_regs(reg_addr, data_array, 2, dev);
 8002f82:	f107 0108 	add.w	r1, r7, #8
 8002f86:	7b38      	ldrb	r0, [r7, #12]
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	f7fd ffdf 	bl	8000f4e <bmi160_set_regs>
 8002f90:	4603      	mov	r3, r0
 8002f92:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8002f94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <enable_sig_motion_int>:

/*!
 * @brief This API enables the sig-motion motion interrupt.
 */
static int8_t enable_sig_motion_int(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg, struct bmi160_dev *dev)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002faa:	2300      	movs	r3, #0
 8002fac:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	73bb      	strb	r3, [r7, #14]

    /* For significant motion,enable any motion x,any motion y,
     * any motion z in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8002fb2:	f107 010d 	add.w	r1, r7, #13
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	2050      	movs	r0, #80	@ 0x50
 8002fbc:	f7fd ff94 	bl	8000ee8 <bmi160_get_regs>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002fc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d124      	bne.n	8003016 <enable_sig_motion_int+0x76>
    {
        if (sig_mot_int_cfg->sig_en == BMI160_ENABLE)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	f003 0320 	and.w	r3, r3, #32
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00c      	beq.n	8002ff4 <enable_sig_motion_int+0x54>
        {
            temp = data & ~BMI160_SIG_MOTION_INT_EN_MASK;
 8002fda:	7b7b      	ldrb	r3, [r7, #13]
 8002fdc:	f023 0307 	bic.w	r3, r3, #7
 8002fe0:	73bb      	strb	r3, [r7, #14]
            data = temp | (7 & BMI160_SIG_MOTION_INT_EN_MASK);
 8002fe2:	7bbb      	ldrb	r3, [r7, #14]
 8002fe4:	f043 0307 	orr.w	r3, r3, #7
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	737b      	strb	r3, [r7, #13]

            /* sig-motion feature selected*/
            dev->any_sig_sel = BMI160_SIG_MOTION_ENABLED;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	70da      	strb	r2, [r3, #3]
 8002ff2:	e007      	b.n	8003004 <enable_sig_motion_int+0x64>
        }
        else
        {
            data = data & ~BMI160_SIG_MOTION_INT_EN_MASK;
 8002ff4:	7b7b      	ldrb	r3, [r7, #13]
 8002ff6:	f023 0307 	bic.w	r3, r3, #7
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	737b      	strb	r3, [r7, #13]

            /* neither any-motion feature nor sig-motion selected */
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	22ff      	movs	r2, #255	@ 0xff
 8003002:	70da      	strb	r2, [r3, #3]
        }

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8003004:	f107 010d 	add.w	r1, r7, #13
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	2201      	movs	r2, #1
 800300c:	2050      	movs	r0, #80	@ 0x50
 800300e:	f7fd ff9e 	bl	8000f4e <bmi160_set_regs>
 8003012:	4603      	mov	r3, r0
 8003014:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003016:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <config_sig_motion_int_settg>:
 * significant motion interrupt.
 */
static int8_t config_sig_motion_int_settg(const struct bmi160_int_settg *int_config,
                                          const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                          const struct bmi160_dev *dev)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b086      	sub	sp, #24
 8003026:	af00      	add	r7, sp, #0
 8003028:	60f8      	str	r0, [r7, #12]
 800302a:	60b9      	str	r1, [r7, #8]
 800302c:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f7fe fd10 	bl	8001a56 <set_intr_pin_config>
 8003036:	4603      	mov	r3, r0
 8003038:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 800303a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d119      	bne.n	8003076 <config_sig_motion_int_settg+0x54>
    {
        rslt = map_feature_interrupt(int_config, dev);
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f7ff fc83 	bl	8002950 <map_feature_interrupt>
 800304a:	4603      	mov	r3, r0
 800304c:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 800304e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10f      	bne.n	8003076 <config_sig_motion_int_settg+0x54>
        {
            rslt = config_sig_motion_data_src(sig_mot_int_cfg, dev);
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	68b8      	ldr	r0, [r7, #8]
 800305a:	f000 f812 	bl	8003082 <config_sig_motion_data_src>
 800305e:	4603      	mov	r3, r0
 8003060:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 8003062:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d105      	bne.n	8003076 <config_sig_motion_int_settg+0x54>
            {
                rslt = config_sig_dur_threshold(sig_mot_int_cfg, dev);
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	68b8      	ldr	r0, [r7, #8]
 800306e:	f000 f83e 	bl	80030ee <config_sig_dur_threshold>
 8003072:	4603      	mov	r3, r0
 8003074:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8003076:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800307a:	4618      	mov	r0, r3
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <config_sig_motion_data_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for sig motion interrupt.
 */
static int8_t config_sig_motion_data_src(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                         const struct bmi160_dev *dev)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b084      	sub	sp, #16
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
 800308a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800308c:	2300      	movs	r3, #0
 800308e:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8003090:	2300      	movs	r3, #0
 8003092:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8003094:	f107 010d 	add.w	r1, r7, #13
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	2201      	movs	r2, #1
 800309c:	2059      	movs	r0, #89	@ 0x59
 800309e:	f7fd ff23 	bl	8000ee8 <bmi160_get_regs>
 80030a2:	4603      	mov	r3, r0
 80030a4:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80030a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d119      	bne.n	80030e2 <config_sig_motion_data_src+0x60>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 80030ae:	7b7b      	ldrb	r3, [r7, #13]
 80030b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030b4:	73bb      	strb	r3, [r7, #14]
        data = temp | ((sig_mot_int_cfg->sig_data_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	01db      	lsls	r3, r3, #7
 80030c2:	b25a      	sxtb	r2, r3
 80030c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	b25b      	sxtb	r3, r3
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 80030d0:	f107 010d 	add.w	r1, r7, #13
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	2201      	movs	r2, #1
 80030d8:	2059      	movs	r0, #89	@ 0x59
 80030da:	f7fd ff38 	bl	8000f4e <bmi160_set_regs>
 80030de:	4603      	mov	r3, r0
 80030e0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80030e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <config_sig_dur_threshold>:
 * @brief This API configure the threshold, skip and proof time of
 * sig motion interrupt.
 */
static int8_t config_sig_dur_threshold(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                       const struct bmi160_dev *dev)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b084      	sub	sp, #16
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
 80030f6:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;
    uint8_t temp = 0;
 80030f8:	2300      	movs	r3, #0
 80030fa:	73bb      	strb	r3, [r7, #14]

    /* Configuring INT_MOTION registers */

    /* Write significant motion threshold.
     * This threshold is same as any motion threshold */
    data = sig_mot_int_cfg->sig_mot_thres;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	785b      	ldrb	r3, [r3, #1]
 8003100:	737b      	strb	r3, [r7, #13]

    /* Write data to INT_MOTION 1 address */
    rslt = bmi160_set_regs(BMI160_INT_MOTION_1_ADDR, &data, 1, dev);
 8003102:	f107 010d 	add.w	r1, r7, #13
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	2201      	movs	r2, #1
 800310a:	2060      	movs	r0, #96	@ 0x60
 800310c:	f7fd ff1f 	bl	8000f4e <bmi160_set_regs>
 8003110:	4603      	mov	r3, r0
 8003112:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003114:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d151      	bne.n	80031c0 <config_sig_dur_threshold+0xd2>
    {
        rslt = bmi160_get_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 800311c:	f107 010d 	add.w	r1, r7, #13
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	2201      	movs	r2, #1
 8003124:	2062      	movs	r0, #98	@ 0x62
 8003126:	f7fd fedf 	bl	8000ee8 <bmi160_get_regs>
 800312a:	4603      	mov	r3, r0
 800312c:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800312e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d144      	bne.n	80031c0 <config_sig_dur_threshold+0xd2>
        {
            temp = data & ~BMI160_SIG_MOTION_SKIP_MASK;
 8003136:	7b7b      	ldrb	r3, [r7, #13]
 8003138:	f023 030c 	bic.w	r3, r3, #12
 800313c:	73bb      	strb	r3, [r7, #14]

            /* adding skip time of sig_motion interrupt*/
            data = temp | ((sig_mot_int_cfg->sig_mot_skip << 2) & BMI160_SIG_MOTION_SKIP_MASK);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003146:	b2db      	uxtb	r3, r3
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	b25b      	sxtb	r3, r3
 800314c:	f003 030c 	and.w	r3, r3, #12
 8003150:	b25a      	sxtb	r2, r3
 8003152:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003156:	4313      	orrs	r3, r2
 8003158:	b25b      	sxtb	r3, r3
 800315a:	b2db      	uxtb	r3, r3
 800315c:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_SIG_MOTION_PROOF_MASK;
 800315e:	7b7b      	ldrb	r3, [r7, #13]
 8003160:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003164:	73bb      	strb	r3, [r7, #14]

            /* adding proof time of sig_motion interrupt */
            data = temp | ((sig_mot_int_cfg->sig_mot_proof << 4) & BMI160_SIG_MOTION_PROOF_MASK);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800316e:	b2db      	uxtb	r3, r3
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	b25b      	sxtb	r3, r3
 8003174:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003178:	b25a      	sxtb	r2, r3
 800317a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800317e:	4313      	orrs	r3, r2
 8003180:	b25b      	sxtb	r3, r3
 8003182:	b2db      	uxtb	r3, r3
 8003184:	737b      	strb	r3, [r7, #13]

            /* configure the int_sig_mot_sel bit to select
             * significant motion interrupt */
            temp = data & ~BMI160_SIG_MOTION_SEL_MASK;
 8003186:	7b7b      	ldrb	r3, [r7, #13]
 8003188:	f023 0302 	bic.w	r3, r3, #2
 800318c:	73bb      	strb	r3, [r7, #14]
            data = temp | ((sig_mot_int_cfg->sig_en << 1) & BMI160_SIG_MOTION_SEL_MASK);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003196:	b2db      	uxtb	r3, r3
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	b25b      	sxtb	r3, r3
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	b25a      	sxtb	r2, r3
 80031a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	b25b      	sxtb	r3, r3
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	737b      	strb	r3, [r7, #13]
            rslt = bmi160_set_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 80031ae:	f107 010d 	add.w	r1, r7, #13
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	2201      	movs	r2, #1
 80031b6:	2062      	movs	r0, #98	@ 0x62
 80031b8:	f7fd fec9 	bl	8000f4e <bmi160_set_regs>
 80031bc:	4603      	mov	r3, r0
 80031be:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80031c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <enable_step_detect_int>:
/*!
 * @brief This API enables the step detector interrupt.
 */
static int8_t enable_step_detect_int(const struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg,
                                     const struct bmi160_dev *dev)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80031d6:	2300      	movs	r3, #0
 80031d8:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80031da:	2300      	movs	r3, #0
 80031dc:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 2 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 80031de:	f107 010d 	add.w	r1, r7, #13
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2201      	movs	r2, #1
 80031e6:	2052      	movs	r0, #82	@ 0x52
 80031e8:	f7fd fe7e 	bl	8000ee8 <bmi160_get_regs>
 80031ec:	4603      	mov	r3, r0
 80031ee:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80031f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d11c      	bne.n	8003232 <enable_step_detect_int+0x66>
    {
        temp = data & ~BMI160_STEP_DETECT_INT_EN_MASK;
 80031f8:	7b7b      	ldrb	r3, [r7, #13]
 80031fa:	f023 0308 	bic.w	r3, r3, #8
 80031fe:	73bb      	strb	r3, [r7, #14]
        data = temp | ((step_detect_int_cfg->step_detector_en << 3) & BMI160_STEP_DETECT_INT_EN_MASK);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003208:	b2db      	uxtb	r3, r3
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	b25b      	sxtb	r3, r3
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	b25a      	sxtb	r2, r3
 8003214:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003218:	4313      	orrs	r3, r2
 800321a:	b25b      	sxtb	r3, r3
 800321c:	b2db      	uxtb	r3, r3
 800321e:	737b      	strb	r3, [r7, #13]

        /* Writing data to INT ENABLE 2 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 8003220:	f107 010d 	add.w	r1, r7, #13
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	2201      	movs	r2, #1
 8003228:	2052      	movs	r0, #82	@ 0x52
 800322a:	f7fd fe90 	bl	8000f4e <bmi160_set_regs>
 800322e:	4603      	mov	r3, r0
 8003230:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003232:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <config_step_detect>:
/*!
 * @brief This API configure the step detector parameter.
 */
static int8_t config_step_detect(const struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg,
                                 const struct bmi160_dev *dev)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b084      	sub	sp, #16
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
 8003246:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8003248:	2300      	movs	r3, #0
 800324a:	73fb      	strb	r3, [r7, #15]
    uint8_t data_array[2] = { 0 };
 800324c:	2300      	movs	r3, #0
 800324e:	81bb      	strh	r3, [r7, #12]

    if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_NORMAL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d104      	bne.n	8003268 <config_step_detect+0x2a>
    {
        /* Normal mode setting */
        data_array[0] = 0x15;
 800325e:	2315      	movs	r3, #21
 8003260:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x03;
 8003262:	2303      	movs	r3, #3
 8003264:	737b      	strb	r3, [r7, #13]
 8003266:	e05b      	b.n	8003320 <config_step_detect+0xe2>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_SENSITIVE)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b40      	cmp	r3, #64	@ 0x40
 8003274:	d104      	bne.n	8003280 <config_step_detect+0x42>
    {
        /* Sensitive mode setting */
        data_array[0] = 0x2D;
 8003276:	232d      	movs	r3, #45	@ 0x2d
 8003278:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x00;
 800327a:	2300      	movs	r3, #0
 800327c:	737b      	strb	r3, [r7, #13]
 800327e:	e04f      	b.n	8003320 <config_step_detect+0xe2>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_ROBUST)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b80      	cmp	r3, #128	@ 0x80
 800328c:	d104      	bne.n	8003298 <config_step_detect+0x5a>
    {
        /* Robust mode setting */
        data_array[0] = 0x1D;
 800328e:	231d      	movs	r3, #29
 8003290:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x07;
 8003292:	2307      	movs	r3, #7
 8003294:	737b      	strb	r3, [r7, #13]
 8003296:	e043      	b.n	8003320 <config_step_detect+0xe2>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_USER_DEFINE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80032a4:	d13c      	bne.n	8003320 <config_step_detect+0xe2>
    {
        /* Non recommended User defined setting */
        /* Configuring STEP_CONFIG register */
        rslt = bmi160_get_regs(BMI160_INT_STEP_CONFIG_0_ADDR, &data_array[0], 2, dev);
 80032a6:	f107 010c 	add.w	r1, r7, #12
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	2202      	movs	r2, #2
 80032ae:	207a      	movs	r0, #122	@ 0x7a
 80032b0:	f7fd fe1a 	bl	8000ee8 <bmi160_get_regs>
 80032b4:	4603      	mov	r3, r0
 80032b6:	73bb      	strb	r3, [r7, #14]
        if (rslt == BMI160_OK)
 80032b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d12f      	bne.n	8003320 <config_step_detect+0xe2>
        {
            temp = data_array[0] & ~BMI160_STEP_DETECT_MIN_THRES_MASK;
 80032c0:	7b3b      	ldrb	r3, [r7, #12]
 80032c2:	f023 0318 	bic.w	r3, r3, #24
 80032c6:	73fb      	strb	r3, [r7, #15]

            /* Adding min_threshold */
            data_array[0] = temp | ((step_detect_int_cfg->min_threshold << 3) & BMI160_STEP_DETECT_MIN_THRES_MASK);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	b25b      	sxtb	r3, r3
 80032d6:	f003 0318 	and.w	r3, r3, #24
 80032da:	b25a      	sxtb	r2, r3
 80032dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	b25b      	sxtb	r3, r3
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	733b      	strb	r3, [r7, #12]
            temp = data_array[0] & ~BMI160_STEP_DETECT_STEPTIME_MIN_MASK;
 80032e8:	7b3b      	ldrb	r3, [r7, #12]
 80032ea:	f023 0307 	bic.w	r3, r3, #7
 80032ee:	73fb      	strb	r3, [r7, #15]

            /* Adding steptime_min */
            data_array[0] = temp | ((step_detect_int_cfg->steptime_min) & BMI160_STEP_DETECT_STEPTIME_MIN_MASK);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	461a      	mov	r2, r3
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
 80032fe:	4313      	orrs	r3, r2
 8003300:	b2db      	uxtb	r3, r3
 8003302:	733b      	strb	r3, [r7, #12]
            temp = data_array[1] & ~BMI160_STEP_MIN_BUF_MASK;
 8003304:	7b7b      	ldrb	r3, [r7, #13]
 8003306:	f023 0307 	bic.w	r3, r3, #7
 800330a:	73fb      	strb	r3, [r7, #15]

            /* Adding steptime_min */
            data_array[1] = temp | ((step_detect_int_cfg->step_min_buf) & BMI160_STEP_MIN_BUF_MASK);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	785b      	ldrb	r3, [r3, #1]
 8003310:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8003314:	b2db      	uxtb	r3, r3
 8003316:	461a      	mov	r2, r3
 8003318:	7bfb      	ldrb	r3, [r7, #15]
 800331a:	4313      	orrs	r3, r2
 800331c:	b2db      	uxtb	r3, r3
 800331e:	737b      	strb	r3, [r7, #13]
        }
    }

    /* Write data to STEP_CONFIG register */
    rslt = bmi160_set_regs(BMI160_INT_STEP_CONFIG_0_ADDR, data_array, 2, dev);
 8003320:	f107 010c 	add.w	r1, r7, #12
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	2202      	movs	r2, #2
 8003328:	207a      	movs	r0, #122	@ 0x7a
 800332a:	f7fd fe10 	bl	8000f4e <bmi160_set_regs>
 800332e:	4603      	mov	r3, r0
 8003330:	73bb      	strb	r3, [r7, #14]

    return rslt;
 8003332:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <enable_tap_int>:
 * @brief This API enables the single/double tap interrupt.
 */
static int8_t enable_tap_int(const struct bmi160_int_settg *int_config,
                             const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                             const struct bmi160_dev *dev)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b086      	sub	sp, #24
 8003342:	af00      	add	r7, sp, #0
 8003344:	60f8      	str	r0, [r7, #12]
 8003346:	60b9      	str	r1, [r7, #8]
 8003348:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 800334a:	2300      	movs	r3, #0
 800334c:	757b      	strb	r3, [r7, #21]
    uint8_t temp = 0;
 800334e:	2300      	movs	r3, #0
 8003350:	75bb      	strb	r3, [r7, #22]

    /* Enable single tap or double tap interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8003352:	f107 0115 	add.w	r1, r7, #21
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	2050      	movs	r0, #80	@ 0x50
 800335c:	f7fd fdc4 	bl	8000ee8 <bmi160_get_regs>
 8003360:	4603      	mov	r3, r0
 8003362:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8003364:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d135      	bne.n	80033d8 <enable_tap_int+0x9a>
    {
        if (int_config->int_type == BMI160_ACC_SINGLE_TAP_INT)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	785b      	ldrb	r3, [r3, #1]
 8003370:	2b04      	cmp	r3, #4
 8003372:	d114      	bne.n	800339e <enable_tap_int+0x60>
        {
            temp = data & ~BMI160_SINGLE_TAP_INT_EN_MASK;
 8003374:	7d7b      	ldrb	r3, [r7, #21]
 8003376:	f023 0320 	bic.w	r3, r3, #32
 800337a:	75bb      	strb	r3, [r7, #22]
            data = temp | ((tap_int_cfg->tap_en << 5) & BMI160_SINGLE_TAP_INT_EN_MASK);
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	785b      	ldrb	r3, [r3, #1]
 8003380:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003384:	b2db      	uxtb	r3, r3
 8003386:	015b      	lsls	r3, r3, #5
 8003388:	b25b      	sxtb	r3, r3
 800338a:	f003 0320 	and.w	r3, r3, #32
 800338e:	b25a      	sxtb	r2, r3
 8003390:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003394:	4313      	orrs	r3, r2
 8003396:	b25b      	sxtb	r3, r3
 8003398:	b2db      	uxtb	r3, r3
 800339a:	757b      	strb	r3, [r7, #21]
 800339c:	e013      	b.n	80033c6 <enable_tap_int+0x88>
        }
        else
        {
            temp = data & ~BMI160_DOUBLE_TAP_INT_EN_MASK;
 800339e:	7d7b      	ldrb	r3, [r7, #21]
 80033a0:	f023 0310 	bic.w	r3, r3, #16
 80033a4:	75bb      	strb	r3, [r7, #22]
            data = temp | ((tap_int_cfg->tap_en << 4) & BMI160_DOUBLE_TAP_INT_EN_MASK);
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	785b      	ldrb	r3, [r3, #1]
 80033aa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	011b      	lsls	r3, r3, #4
 80033b2:	b25b      	sxtb	r3, r3
 80033b4:	f003 0310 	and.w	r3, r3, #16
 80033b8:	b25a      	sxtb	r2, r3
 80033ba:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80033be:	4313      	orrs	r3, r2
 80033c0:	b25b      	sxtb	r3, r3
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	757b      	strb	r3, [r7, #21]
        }

        /* Write to Enable 0 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 80033c6:	f107 0115 	add.w	r1, r7, #21
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	2050      	movs	r0, #80	@ 0x50
 80033d0:	f7fd fdbd 	bl	8000f4e <bmi160_set_regs>
 80033d4:	4603      	mov	r3, r0
 80033d6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80033d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3718      	adds	r7, #24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <config_tap_int_settg>:
 * tap interrupt.
 */
static int8_t config_tap_int_settg(const struct bmi160_int_settg *int_config,
                                   const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                                   const struct bmi160_dev *dev)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f7fe fb2f 	bl	8001a56 <set_intr_pin_config>
 80033f8:	4603      	mov	r3, r0
 80033fa:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 80033fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d11a      	bne.n	800343a <config_tap_int_settg+0x56>
    {
        rslt = map_feature_interrupt(int_config, dev);
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f7ff faa2 	bl	8002950 <map_feature_interrupt>
 800340c:	4603      	mov	r3, r0
 800340e:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8003410:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d110      	bne.n	800343a <config_tap_int_settg+0x56>
        {
            rslt = config_tap_data_src(tap_int_cfg, dev);
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	68b8      	ldr	r0, [r7, #8]
 800341c:	f000 f813 	bl	8003446 <config_tap_data_src>
 8003420:	4603      	mov	r3, r0
 8003422:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 8003424:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d106      	bne.n	800343a <config_tap_int_settg+0x56>
            {
                rslt = config_tap_param(int_config, tap_int_cfg, dev);
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	68b9      	ldr	r1, [r7, #8]
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f000 f841 	bl	80034b8 <config_tap_param>
 8003436:	4603      	mov	r3, r0
 8003438:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 800343a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800343e:	4618      	mov	r0, r3
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <config_tap_data_src>:
/*!
 * @brief This API configure the source of data(filter & pre-filter)
 * for tap interrupt.
 */
static int8_t config_tap_data_src(const struct bmi160_acc_tap_int_cfg *tap_int_cfg, const struct bmi160_dev *dev)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b084      	sub	sp, #16
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
 800344e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8003450:	2300      	movs	r3, #0
 8003452:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8003454:	2300      	movs	r3, #0
 8003456:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8003458:	f107 010d 	add.w	r1, r7, #13
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	2201      	movs	r2, #1
 8003460:	2058      	movs	r0, #88	@ 0x58
 8003462:	f7fd fd41 	bl	8000ee8 <bmi160_get_regs>
 8003466:	4603      	mov	r3, r0
 8003468:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800346a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d11c      	bne.n	80034ac <config_tap_data_src+0x66>
    {
        temp = data & ~BMI160_TAP_SRC_INT_MASK;
 8003472:	7b7b      	ldrb	r3, [r7, #13]
 8003474:	f023 0308 	bic.w	r3, r3, #8
 8003478:	73bb      	strb	r3, [r7, #14]
        data = temp | ((tap_int_cfg->tap_data_src << 3) & BMI160_TAP_SRC_INT_MASK);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	785b      	ldrb	r3, [r3, #1]
 800347e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003482:	b2db      	uxtb	r3, r3
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	b25b      	sxtb	r3, r3
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	b25a      	sxtb	r2, r3
 800348e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003492:	4313      	orrs	r3, r2
 8003494:	b25b      	sxtb	r3, r3
 8003496:	b2db      	uxtb	r3, r3
 8003498:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 800349a:	f107 010d 	add.w	r1, r7, #13
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2201      	movs	r2, #1
 80034a2:	2058      	movs	r0, #88	@ 0x58
 80034a4:	f7fd fd53 	bl	8000f4e <bmi160_set_regs>
 80034a8:	4603      	mov	r3, r0
 80034aa:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80034ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <config_tap_param>:
 * Threshold, quite, shock, and duration.
 */
static int8_t config_tap_param(const struct bmi160_int_settg *int_config,
                               const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                               const struct bmi160_dev *dev)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b088      	sub	sp, #32
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t temp = 0;
 80034c4:	2300      	movs	r3, #0
 80034c6:	777b      	strb	r3, [r7, #29]
    uint8_t data = 0;
 80034c8:	2300      	movs	r3, #0
 80034ca:	77bb      	strb	r3, [r7, #30]
    uint8_t data_array[2] = { 0 };
 80034cc:	2300      	movs	r3, #0
 80034ce:	82bb      	strh	r3, [r7, #20]
    uint8_t count = 0;
 80034d0:	2300      	movs	r3, #0
 80034d2:	773b      	strb	r3, [r7, #28]
    uint8_t dur, shock, quiet, thres;

    /* Configure tap 0 register for tap shock,tap quiet duration
     * in case of single tap interrupt */
    rslt = bmi160_get_regs(BMI160_INT_TAP_0_ADDR, data_array, 2, dev);
 80034d4:	f107 0114 	add.w	r1, r7, #20
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2202      	movs	r2, #2
 80034dc:	2063      	movs	r0, #99	@ 0x63
 80034de:	f7fd fd03 	bl	8000ee8 <bmi160_get_regs>
 80034e2:	4603      	mov	r3, r0
 80034e4:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMI160_OK)
 80034e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d178      	bne.n	80035e0 <config_tap_param+0x128>
    {
        data = data_array[count];
 80034ee:	7f3b      	ldrb	r3, [r7, #28]
 80034f0:	3320      	adds	r3, #32
 80034f2:	443b      	add	r3, r7
 80034f4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80034f8:	77bb      	strb	r3, [r7, #30]
        if (int_config->int_type == BMI160_ACC_DOUBLE_TAP_INT)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	785b      	ldrb	r3, [r3, #1]
 80034fe:	2b03      	cmp	r3, #3
 8003500:	d113      	bne.n	800352a <config_tap_param+0x72>
        {
            dur = (uint8_t)tap_int_cfg->tap_dur;
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	881b      	ldrh	r3, [r3, #0]
 8003506:	f3c3 13c2 	ubfx	r3, r3, #7, #3
 800350a:	b2db      	uxtb	r3, r3
 800350c:	76fb      	strb	r3, [r7, #27]
            temp = (data & ~BMI160_TAP_DUR_MASK);
 800350e:	7fbb      	ldrb	r3, [r7, #30]
 8003510:	f023 0307 	bic.w	r3, r3, #7
 8003514:	777b      	strb	r3, [r7, #29]

            /* Add tap duration data in case of
             * double tap interrupt */
            data = temp | (dur & BMI160_TAP_DUR_MASK);
 8003516:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	b25a      	sxtb	r2, r3
 8003520:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003524:	4313      	orrs	r3, r2
 8003526:	b25b      	sxtb	r3, r3
 8003528:	77bb      	strb	r3, [r7, #30]
        }

        shock = (uint8_t)tap_int_cfg->tap_shock;
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003532:	b2db      	uxtb	r3, r3
 8003534:	76bb      	strb	r3, [r7, #26]
        temp = data & ~BMI160_TAP_SHOCK_DUR_MASK;
 8003536:	7fbb      	ldrb	r3, [r7, #30]
 8003538:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800353c:	777b      	strb	r3, [r7, #29]
        data = temp | ((shock << 6) & BMI160_TAP_SHOCK_DUR_MASK);
 800353e:	7ebb      	ldrb	r3, [r7, #26]
 8003540:	019b      	lsls	r3, r3, #6
 8003542:	b25b      	sxtb	r3, r3
 8003544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003548:	b25a      	sxtb	r2, r3
 800354a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800354e:	4313      	orrs	r3, r2
 8003550:	b25b      	sxtb	r3, r3
 8003552:	77bb      	strb	r3, [r7, #30]
        quiet = (uint8_t)tap_int_cfg->tap_quiet;
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800355c:	b2db      	uxtb	r3, r3
 800355e:	767b      	strb	r3, [r7, #25]
        temp = data & ~BMI160_TAP_QUIET_DUR_MASK;
 8003560:	7fbb      	ldrb	r3, [r7, #30]
 8003562:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003566:	777b      	strb	r3, [r7, #29]
        data = temp | ((quiet << 7) & BMI160_TAP_QUIET_DUR_MASK);
 8003568:	7e7b      	ldrb	r3, [r7, #25]
 800356a:	01db      	lsls	r3, r3, #7
 800356c:	b25a      	sxtb	r2, r3
 800356e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003572:	4313      	orrs	r3, r2
 8003574:	b25b      	sxtb	r3, r3
 8003576:	77bb      	strb	r3, [r7, #30]
        data_array[count++] = data;
 8003578:	7f3b      	ldrb	r3, [r7, #28]
 800357a:	1c5a      	adds	r2, r3, #1
 800357c:	773a      	strb	r2, [r7, #28]
 800357e:	3320      	adds	r3, #32
 8003580:	443b      	add	r3, r7
 8003582:	7fba      	ldrb	r2, [r7, #30]
 8003584:	f803 2c0c 	strb.w	r2, [r3, #-12]
        data = data_array[count];
 8003588:	7f3b      	ldrb	r3, [r7, #28]
 800358a:	3320      	adds	r3, #32
 800358c:	443b      	add	r3, r7
 800358e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003592:	77bb      	strb	r3, [r7, #30]
        thres = (uint8_t)tap_int_cfg->tap_thr;
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800359c:	b2db      	uxtb	r3, r3
 800359e:	763b      	strb	r3, [r7, #24]
        temp = data & ~BMI160_TAP_THRES_MASK;
 80035a0:	7fbb      	ldrb	r3, [r7, #30]
 80035a2:	f023 031f 	bic.w	r3, r3, #31
 80035a6:	777b      	strb	r3, [r7, #29]
        data = temp | (thres & BMI160_TAP_THRES_MASK);
 80035a8:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80035ac:	f003 031f 	and.w	r3, r3, #31
 80035b0:	b25a      	sxtb	r2, r3
 80035b2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	b25b      	sxtb	r3, r3
 80035ba:	77bb      	strb	r3, [r7, #30]
        data_array[count++] = data;
 80035bc:	7f3b      	ldrb	r3, [r7, #28]
 80035be:	1c5a      	adds	r2, r3, #1
 80035c0:	773a      	strb	r2, [r7, #28]
 80035c2:	3320      	adds	r3, #32
 80035c4:	443b      	add	r3, r7
 80035c6:	7fba      	ldrb	r2, [r7, #30]
 80035c8:	f803 2c0c 	strb.w	r2, [r3, #-12]

        /* TAP 0 and TAP 1 address lie consecutively,
         * hence writing data to respective registers at one go */

        /* Writing to Tap 0 and Tap 1 Address simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_TAP_0_ADDR, data_array, count, dev);
 80035cc:	7f3b      	ldrb	r3, [r7, #28]
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	f107 0114 	add.w	r1, r7, #20
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2063      	movs	r0, #99	@ 0x63
 80035d8:	f7fd fcb9 	bl	8000f4e <bmi160_set_regs>
 80035dc:	4603      	mov	r3, r0
 80035de:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80035e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3720      	adds	r7, #32
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <enable_orient_int>:

/*!
 * @brief This API enables the orient interrupt.
 */
static int8_t enable_orient_int(const struct bmi160_acc_orient_int_cfg *orient_int_cfg, const struct bmi160_dev *dev)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80035f6:	2300      	movs	r3, #0
 80035f8:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80035fa:	2300      	movs	r3, #0
 80035fc:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 80035fe:	f107 010d 	add.w	r1, r7, #13
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	2201      	movs	r2, #1
 8003606:	2050      	movs	r0, #80	@ 0x50
 8003608:	f7fd fc6e 	bl	8000ee8 <bmi160_get_regs>
 800360c:	4603      	mov	r3, r0
 800360e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d11c      	bne.n	8003652 <enable_orient_int+0x66>
    {
        temp = data & ~BMI160_ORIENT_INT_EN_MASK;
 8003618:	7b7b      	ldrb	r3, [r7, #13]
 800361a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800361e:	73bb      	strb	r3, [r7, #14]
        data = temp | ((orient_int_cfg->orient_en << 6) & BMI160_ORIENT_INT_EN_MASK);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	789b      	ldrb	r3, [r3, #2]
 8003624:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003628:	b2db      	uxtb	r3, r3
 800362a:	019b      	lsls	r3, r3, #6
 800362c:	b25b      	sxtb	r3, r3
 800362e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003632:	b25a      	sxtb	r2, r3
 8003634:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003638:	4313      	orrs	r3, r2
 800363a:	b25b      	sxtb	r3, r3
 800363c:	b2db      	uxtb	r3, r3
 800363e:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8003640:	f107 010d 	add.w	r1, r7, #13
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2201      	movs	r2, #1
 8003648:	2050      	movs	r0, #80	@ 0x50
 800364a:	f7fd fc80 	bl	8000f4e <bmi160_set_regs>
 800364e:	4603      	mov	r3, r0
 8003650:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003652:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <config_orient_int_settg>:
/*!
 * @brief This API configure the necessary setting of orientation interrupt.
 */
static int8_t config_orient_int_settg(const struct bmi160_acc_orient_int_cfg *orient_int_cfg,
                                      const struct bmi160_dev *dev)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b084      	sub	sp, #16
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
 8003666:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8003668:	2300      	movs	r3, #0
 800366a:	73bb      	strb	r3, [r7, #14]
    uint8_t temp = 0;
 800366c:	2300      	movs	r3, #0
 800366e:	737b      	strb	r3, [r7, #13]
    uint8_t data_array[2] = { 0, 0 };
 8003670:	2300      	movs	r3, #0
 8003672:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_ORIENT registers */
    rslt = bmi160_get_regs(BMI160_INT_ORIENT_0_ADDR, data_array, 2, dev);
 8003674:	f107 0108 	add.w	r1, r7, #8
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	2202      	movs	r2, #2
 800367c:	2065      	movs	r0, #101	@ 0x65
 800367e:	f7fd fc33 	bl	8000ee8 <bmi160_get_regs>
 8003682:	4603      	mov	r3, r0
 8003684:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d170      	bne.n	8003770 <config_orient_int_settg+0x112>
    {
        data = data_array[0];
 800368e:	7a3b      	ldrb	r3, [r7, #8]
 8003690:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_MODE_MASK;
 8003692:	7bbb      	ldrb	r3, [r7, #14]
 8003694:	f023 0303 	bic.w	r3, r3, #3
 8003698:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation mode */
        data = temp | ((orient_int_cfg->orient_mode) & BMI160_ORIENT_MODE_MASK);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	461a      	mov	r2, r3
 80036a6:	7b7b      	ldrb	r3, [r7, #13]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_BLOCK_MASK;
 80036ac:	7bbb      	ldrb	r3, [r7, #14]
 80036ae:	f023 030c 	bic.w	r3, r3, #12
 80036b2:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation blocking */
        data = temp | ((orient_int_cfg->orient_blocking << 2) & BMI160_ORIENT_BLOCK_MASK);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	b25b      	sxtb	r3, r3
 80036c2:	f003 030c 	and.w	r3, r3, #12
 80036c6:	b25a      	sxtb	r2, r3
 80036c8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	b25b      	sxtb	r3, r3
 80036d0:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_HYST_MASK;
 80036d2:	7bbb      	ldrb	r3, [r7, #14]
 80036d4:	f003 030f 	and.w	r3, r3, #15
 80036d8:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation hysteresis */
        data = temp | ((orient_int_cfg->orient_hyst << 4) & BMI160_ORIENT_HYST_MASK);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	b25a      	sxtb	r2, r3
 80036e8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	b25b      	sxtb	r3, r3
 80036f0:	73bb      	strb	r3, [r7, #14]
        data_array[0] = data;
 80036f2:	7bbb      	ldrb	r3, [r7, #14]
 80036f4:	723b      	strb	r3, [r7, #8]
        data = data_array[1];
 80036f6:	7a7b      	ldrb	r3, [r7, #9]
 80036f8:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_THETA_MASK;
 80036fa:	7bbb      	ldrb	r3, [r7, #14]
 80036fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003700:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation threshold */
        data = temp | ((orient_int_cfg->orient_theta) & BMI160_ORIENT_THETA_MASK);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	785b      	ldrb	r3, [r3, #1]
 8003706:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800370a:	b2db      	uxtb	r3, r3
 800370c:	461a      	mov	r2, r3
 800370e:	7b7b      	ldrb	r3, [r7, #13]
 8003710:	4313      	orrs	r3, r2
 8003712:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_UD_ENABLE;
 8003714:	7bbb      	ldrb	r3, [r7, #14]
 8003716:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800371a:	737b      	strb	r3, [r7, #13]

        /* Adding Orient_ud_en */
        data = temp | ((orient_int_cfg->orient_ud_en << 6) & BMI160_ORIENT_UD_ENABLE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	785b      	ldrb	r3, [r3, #1]
 8003720:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003724:	b2db      	uxtb	r3, r3
 8003726:	019b      	lsls	r3, r3, #6
 8003728:	b25b      	sxtb	r3, r3
 800372a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800372e:	b25a      	sxtb	r2, r3
 8003730:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003734:	4313      	orrs	r3, r2
 8003736:	b25b      	sxtb	r3, r3
 8003738:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_AXES_EN_MASK;
 800373a:	7bbb      	ldrb	r3, [r7, #14]
 800373c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003740:	737b      	strb	r3, [r7, #13]

        /* Adding axes_en */
        data = temp | ((orient_int_cfg->axes_ex << 7) & BMI160_AXES_EN_MASK);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	785b      	ldrb	r3, [r3, #1]
 8003746:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800374a:	b2db      	uxtb	r3, r3
 800374c:	01db      	lsls	r3, r3, #7
 800374e:	b25a      	sxtb	r2, r3
 8003750:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003754:	4313      	orrs	r3, r2
 8003756:	b25b      	sxtb	r3, r3
 8003758:	73bb      	strb	r3, [r7, #14]
        data_array[1] = data;
 800375a:	7bbb      	ldrb	r3, [r7, #14]
 800375c:	727b      	strb	r3, [r7, #9]

        /* Writing data to INT_ORIENT 0 and INT_ORIENT 1
         * registers simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_ORIENT_0_ADDR, data_array, 2, dev);
 800375e:	f107 0108 	add.w	r1, r7, #8
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2202      	movs	r2, #2
 8003766:	2065      	movs	r0, #101	@ 0x65
 8003768:	f7fd fbf1 	bl	8000f4e <bmi160_set_regs>
 800376c:	4603      	mov	r3, r0
 800376e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003770:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003774:	4618      	mov	r0, r3
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <enable_flat_int>:

/*!
 * @brief This API enables the flat interrupt.
 */
static int8_t enable_flat_int(const struct bmi160_acc_flat_detect_int_cfg *flat_int, const struct bmi160_dev *dev)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8003786:	2300      	movs	r3, #0
 8003788:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 800378a:	2300      	movs	r3, #0
 800378c:	73bb      	strb	r3, [r7, #14]

    /* Enable flat interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 800378e:	f107 010d 	add.w	r1, r7, #13
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2201      	movs	r2, #1
 8003796:	2050      	movs	r0, #80	@ 0x50
 8003798:	f7fd fba6 	bl	8000ee8 <bmi160_get_regs>
 800379c:	4603      	mov	r3, r0
 800379e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80037a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d119      	bne.n	80037dc <enable_flat_int+0x60>
    {
        temp = data & ~BMI160_FLAT_INT_EN_MASK;
 80037a8:	7b7b      	ldrb	r3, [r7, #13]
 80037aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80037ae:	73bb      	strb	r3, [r7, #14]
        data = temp | ((flat_int->flat_en << 7) & BMI160_FLAT_INT_EN_MASK);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	785b      	ldrb	r3, [r3, #1]
 80037b4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	01db      	lsls	r3, r3, #7
 80037bc:	b25a      	sxtb	r2, r3
 80037be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	b25b      	sxtb	r3, r3
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 80037ca:	f107 010d 	add.w	r1, r7, #13
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	2201      	movs	r2, #1
 80037d2:	2050      	movs	r0, #80	@ 0x50
 80037d4:	f7fd fbbb 	bl	8000f4e <bmi160_set_regs>
 80037d8:	4603      	mov	r3, r0
 80037da:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80037dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <config_flat_int_settg>:

/*!
 * @brief This API configure the necessary setting of flat interrupt.
 */
static int8_t config_flat_int_settg(const struct bmi160_acc_flat_detect_int_cfg *flat_int, const struct bmi160_dev *dev)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80037f2:	2300      	movs	r3, #0
 80037f4:	73bb      	strb	r3, [r7, #14]
    uint8_t temp = 0;
 80037f6:	2300      	movs	r3, #0
 80037f8:	737b      	strb	r3, [r7, #13]
    uint8_t data_array[2] = { 0, 0 };
 80037fa:	2300      	movs	r3, #0
 80037fc:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_FLAT register */
    rslt = bmi160_get_regs(BMI160_INT_FLAT_0_ADDR, data_array, 2, dev);
 80037fe:	f107 0108 	add.w	r1, r7, #8
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	2202      	movs	r2, #2
 8003806:	2067      	movs	r0, #103	@ 0x67
 8003808:	f7fd fb6e 	bl	8000ee8 <bmi160_get_regs>
 800380c:	4603      	mov	r3, r0
 800380e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003810:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d13d      	bne.n	8003894 <config_flat_int_settg+0xac>
    {
        data = data_array[0];
 8003818:	7a3b      	ldrb	r3, [r7, #8]
 800381a:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_THRES_MASK;
 800381c:	7bbb      	ldrb	r3, [r7, #14]
 800381e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003822:	737b      	strb	r3, [r7, #13]

        /* Adding flat theta */
        data = temp | ((flat_int->flat_theta) & BMI160_FLAT_THRES_MASK);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800382c:	b2db      	uxtb	r3, r3
 800382e:	461a      	mov	r2, r3
 8003830:	7b7b      	ldrb	r3, [r7, #13]
 8003832:	4313      	orrs	r3, r2
 8003834:	73bb      	strb	r3, [r7, #14]
        data_array[0] = data;
 8003836:	7bbb      	ldrb	r3, [r7, #14]
 8003838:	723b      	strb	r3, [r7, #8]
        data = data_array[1];
 800383a:	7a7b      	ldrb	r3, [r7, #9]
 800383c:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_HOLD_TIME_MASK;
 800383e:	7bbb      	ldrb	r3, [r7, #14]
 8003840:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003844:	737b      	strb	r3, [r7, #13]

        /* Adding flat hold time */
        data = temp | ((flat_int->flat_hold_time << 4) & BMI160_FLAT_HOLD_TIME_MASK);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	785b      	ldrb	r3, [r3, #1]
 800384a:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800384e:	b2db      	uxtb	r3, r3
 8003850:	011b      	lsls	r3, r3, #4
 8003852:	b25b      	sxtb	r3, r3
 8003854:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003858:	b25a      	sxtb	r2, r3
 800385a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800385e:	4313      	orrs	r3, r2
 8003860:	b25b      	sxtb	r3, r3
 8003862:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_HYST_MASK;
 8003864:	7bbb      	ldrb	r3, [r7, #14]
 8003866:	f023 0307 	bic.w	r3, r3, #7
 800386a:	737b      	strb	r3, [r7, #13]

        /* Adding flat hysteresis */
        data = temp | ((flat_int->flat_hy) & BMI160_FLAT_HYST_MASK);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	881b      	ldrh	r3, [r3, #0]
 8003870:	f3c3 1382 	ubfx	r3, r3, #6, #3
 8003874:	b2db      	uxtb	r3, r3
 8003876:	461a      	mov	r2, r3
 8003878:	7b7b      	ldrb	r3, [r7, #13]
 800387a:	4313      	orrs	r3, r2
 800387c:	73bb      	strb	r3, [r7, #14]
        data_array[1] = data;
 800387e:	7bbb      	ldrb	r3, [r7, #14]
 8003880:	727b      	strb	r3, [r7, #9]

        /* Writing data to INT_FLAT 0 and INT_FLAT 1
         * registers simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_FLAT_0_ADDR, data_array, 2, dev);
 8003882:	f107 0108 	add.w	r1, r7, #8
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2202      	movs	r2, #2
 800388a:	2067      	movs	r0, #103	@ 0x67
 800388c:	f7fd fb5f 	bl	8000f4e <bmi160_set_regs>
 8003890:	4603      	mov	r3, r0
 8003892:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003894:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <enable_low_g_int>:

/*!
 * @brief This API enables the Low-g interrupt.
 */
static int8_t enable_low_g_int(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80038aa:	2300      	movs	r3, #0
 80038ac:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80038ae:	2300      	movs	r3, #0
 80038b0:	73bb      	strb	r3, [r7, #14]

    /* Enable low-g interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80038b2:	f107 010d 	add.w	r1, r7, #13
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	2201      	movs	r2, #1
 80038ba:	2051      	movs	r0, #81	@ 0x51
 80038bc:	f7fd fb14 	bl	8000ee8 <bmi160_get_regs>
 80038c0:	4603      	mov	r3, r0
 80038c2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80038c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d11c      	bne.n	8003906 <enable_low_g_int+0x66>
    {
        temp = data & ~BMI160_LOW_G_INT_EN_MASK;
 80038cc:	7b7b      	ldrb	r3, [r7, #13]
 80038ce:	f023 0308 	bic.w	r3, r3, #8
 80038d2:	73bb      	strb	r3, [r7, #14]
        data = temp | ((low_g_int->low_en << 3) & BMI160_LOW_G_INT_EN_MASK);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	789b      	ldrb	r3, [r3, #2]
 80038d8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	b25b      	sxtb	r3, r3
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	b25a      	sxtb	r2, r3
 80038e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	b25b      	sxtb	r3, r3
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80038f4:	f107 010d 	add.w	r1, r7, #13
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	2201      	movs	r2, #1
 80038fc:	2051      	movs	r0, #81	@ 0x51
 80038fe:	f7fd fb26 	bl	8000f4e <bmi160_set_regs>
 8003902:	4603      	mov	r3, r0
 8003904:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003906:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <config_low_g_data_src>:
/*!
 * @brief This API configure the source of data(filter & pre-filter)
 * for low-g interrupt.
 */
static int8_t config_low_g_data_src(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b084      	sub	sp, #16
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800391c:	2300      	movs	r3, #0
 800391e:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8003920:	2300      	movs	r3, #0
 8003922:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8003924:	f107 010d 	add.w	r1, r7, #13
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	2201      	movs	r2, #1
 800392c:	2058      	movs	r0, #88	@ 0x58
 800392e:	f7fd fadb 	bl	8000ee8 <bmi160_get_regs>
 8003932:	4603      	mov	r3, r0
 8003934:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d119      	bne.n	8003972 <config_low_g_data_src+0x60>
    {
        temp = data & ~BMI160_LOW_HIGH_SRC_INT_MASK;
 800393e:	7b7b      	ldrb	r3, [r7, #13]
 8003940:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003944:	73bb      	strb	r3, [r7, #14]
        data = temp | ((low_g_int->low_data_src << 7) & BMI160_LOW_HIGH_SRC_INT_MASK);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	789b      	ldrb	r3, [r3, #2]
 800394a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800394e:	b2db      	uxtb	r3, r3
 8003950:	01db      	lsls	r3, r3, #7
 8003952:	b25a      	sxtb	r2, r3
 8003954:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003958:	4313      	orrs	r3, r2
 800395a:	b25b      	sxtb	r3, r3
 800395c:	b2db      	uxtb	r3, r3
 800395e:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8003960:	f107 010d 	add.w	r1, r7, #13
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	2201      	movs	r2, #1
 8003968:	2058      	movs	r0, #88	@ 0x58
 800396a:	f7fd faf0 	bl	8000f4e <bmi160_set_regs>
 800396e:	4603      	mov	r3, r0
 8003970:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003972:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <config_low_g_int_settg>:

/*!
 * @brief This API configure the necessary setting of low-g interrupt.
 */
static int8_t config_low_g_int_settg(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 800398a:	2300      	movs	r3, #0
 800398c:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[3] = { 0, 0, 0 };
 800398e:	4a27      	ldr	r2, [pc, #156]	@ (8003a2c <config_low_g_int_settg+0xac>)
 8003990:	f107 0308 	add.w	r3, r7, #8
 8003994:	6812      	ldr	r2, [r2, #0]
 8003996:	4611      	mov	r1, r2
 8003998:	8019      	strh	r1, [r3, #0]
 800399a:	3302      	adds	r3, #2
 800399c:	0c12      	lsrs	r2, r2, #16
 800399e:	701a      	strb	r2, [r3, #0]

    /* Configuring INT_LOWHIGH register for low-g interrupt */
    rslt = bmi160_get_regs(BMI160_INT_LOWHIGH_2_ADDR, &data_array[2], 1, dev);
 80039a0:	f107 0308 	add.w	r3, r7, #8
 80039a4:	1c99      	adds	r1, r3, #2
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2201      	movs	r2, #1
 80039aa:	205c      	movs	r0, #92	@ 0x5c
 80039ac:	f7fd fa9c 	bl	8000ee8 <bmi160_get_regs>
 80039b0:	4603      	mov	r3, r0
 80039b2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80039b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d130      	bne.n	8003a1e <config_low_g_int_settg+0x9e>
    {
        temp = data_array[2] & ~BMI160_LOW_G_HYST_MASK;
 80039bc:	7abb      	ldrb	r3, [r7, #10]
 80039be:	f023 0303 	bic.w	r3, r3, #3
 80039c2:	73bb      	strb	r3, [r7, #14]

        /* Adding low-g hysteresis */
        data_array[2] = temp | (low_g_int->low_hyst & BMI160_LOW_G_HYST_MASK);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	789b      	ldrb	r3, [r3, #2]
 80039c8:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	461a      	mov	r2, r3
 80039d0:	7bbb      	ldrb	r3, [r7, #14]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	72bb      	strb	r3, [r7, #10]
        temp = data_array[2] & ~BMI160_LOW_G_LOW_MODE_MASK;
 80039d8:	7abb      	ldrb	r3, [r7, #10]
 80039da:	f023 0304 	bic.w	r3, r3, #4
 80039de:	73bb      	strb	r3, [r7, #14]

        /* Adding low-mode */
        data_array[2] = temp | ((low_g_int->low_mode << 2) & BMI160_LOW_G_LOW_MODE_MASK);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	789b      	ldrb	r3, [r3, #2]
 80039e4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	b25b      	sxtb	r3, r3
 80039ee:	f003 0304 	and.w	r3, r3, #4
 80039f2:	b25a      	sxtb	r2, r3
 80039f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	b25b      	sxtb	r3, r3
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	72bb      	strb	r3, [r7, #10]

        /* Adding low-g threshold */
        data_array[1] = low_g_int->low_thres;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	785b      	ldrb	r3, [r3, #1]
 8003a04:	727b      	strb	r3, [r7, #9]

        /* Adding low-g interrupt delay */
        data_array[0] = low_g_int->low_dur;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	723b      	strb	r3, [r7, #8]

        /* Writing data to INT_LOWHIGH 0,1,2 registers simultaneously*/
        rslt = bmi160_set_regs(BMI160_INT_LOWHIGH_0_ADDR, data_array, 3, dev);
 8003a0c:	f107 0108 	add.w	r1, r7, #8
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	2203      	movs	r2, #3
 8003a14:	205a      	movs	r0, #90	@ 0x5a
 8003a16:	f7fd fa9a 	bl	8000f4e <bmi160_set_regs>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	080152d0 	.word	0x080152d0

08003a30 <enable_high_g_int>:

/*!
 * @brief This API enables the high-g interrupt.
 */
static int8_t enable_high_g_int(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg, const struct bmi160_dev *dev)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	73bb      	strb	r3, [r7, #14]

    /* Enable low-g interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8003a42:	f107 010d 	add.w	r1, r7, #13
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	2051      	movs	r0, #81	@ 0x51
 8003a4c:	f7fd fa4c 	bl	8000ee8 <bmi160_get_regs>
 8003a50:	4603      	mov	r3, r0
 8003a52:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003a54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d13e      	bne.n	8003ada <enable_high_g_int+0xaa>
    {
        /* Adding high-g X-axis */
        temp = data & ~BMI160_HIGH_G_X_INT_EN_MASK;
 8003a5c:	7b7b      	ldrb	r3, [r7, #13]
 8003a5e:	f023 0301 	bic.w	r3, r3, #1
 8003a62:	73bb      	strb	r3, [r7, #14]
        data = temp | (high_g_int_cfg->high_g_x & BMI160_HIGH_G_X_INT_EN_MASK);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	461a      	mov	r2, r3
 8003a70:	7bbb      	ldrb	r3, [r7, #14]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	737b      	strb	r3, [r7, #13]

        /* Adding high-g Y-axis */
        temp = data & ~BMI160_HIGH_G_Y_INT_EN_MASK;
 8003a78:	7b7b      	ldrb	r3, [r7, #13]
 8003a7a:	f023 0302 	bic.w	r3, r3, #2
 8003a7e:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_g_y << 1) & BMI160_HIGH_G_Y_INT_EN_MASK);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	b25b      	sxtb	r3, r3
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	b25a      	sxtb	r2, r3
 8003a94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	b25b      	sxtb	r3, r3
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	737b      	strb	r3, [r7, #13]

        /* Adding high-g Z-axis */
        temp = data & ~BMI160_HIGH_G_Z_INT_EN_MASK;
 8003aa0:	7b7b      	ldrb	r3, [r7, #13]
 8003aa2:	f023 0304 	bic.w	r3, r3, #4
 8003aa6:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_g_z << 2) & BMI160_HIGH_G_Z_INT_EN_MASK);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	b25b      	sxtb	r3, r3
 8003ab6:	f003 0304 	and.w	r3, r3, #4
 8003aba:	b25a      	sxtb	r2, r3
 8003abc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	b25b      	sxtb	r3, r3
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8003ac8:	f107 010d 	add.w	r1, r7, #13
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	2051      	movs	r0, #81	@ 0x51
 8003ad2:	f7fd fa3c 	bl	8000f4e <bmi160_set_regs>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <config_high_g_data_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for high-g interrupt.
 */
static int8_t config_high_g_data_src(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg,
                                     const struct bmi160_dev *dev)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b084      	sub	sp, #16
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
 8003aee:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8003af0:	2300      	movs	r3, #0
 8003af2:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8003af4:	2300      	movs	r3, #0
 8003af6:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8003af8:	f107 010d 	add.w	r1, r7, #13
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	2201      	movs	r2, #1
 8003b00:	2058      	movs	r0, #88	@ 0x58
 8003b02:	f7fd f9f1 	bl	8000ee8 <bmi160_get_regs>
 8003b06:	4603      	mov	r3, r0
 8003b08:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d119      	bne.n	8003b46 <config_high_g_data_src+0x60>
    {
        temp = data & ~BMI160_LOW_HIGH_SRC_INT_MASK;
 8003b12:	7b7b      	ldrb	r3, [r7, #13]
 8003b14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b18:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_data_src << 7) & BMI160_LOW_HIGH_SRC_INT_MASK);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	01db      	lsls	r3, r3, #7
 8003b26:	b25a      	sxtb	r2, r3
 8003b28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	b25b      	sxtb	r3, r3
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8003b34:	f107 010d 	add.w	r1, r7, #13
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	2058      	movs	r0, #88	@ 0x58
 8003b3e:	f7fd fa06 	bl	8000f4e <bmi160_set_regs>
 8003b42:	4603      	mov	r3, r0
 8003b44:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <config_high_g_int_settg>:
/*!
 * @brief This API configure the necessary setting of high-g interrupt.
 */
static int8_t config_high_g_int_settg(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg,
                                      const struct bmi160_dev *dev)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[3] = { 0, 0, 0 };
 8003b62:	4a1e      	ldr	r2, [pc, #120]	@ (8003bdc <config_high_g_int_settg+0x88>)
 8003b64:	f107 0308 	add.w	r3, r7, #8
 8003b68:	6812      	ldr	r2, [r2, #0]
 8003b6a:	4611      	mov	r1, r2
 8003b6c:	8019      	strh	r1, [r3, #0]
 8003b6e:	3302      	adds	r3, #2
 8003b70:	0c12      	lsrs	r2, r2, #16
 8003b72:	701a      	strb	r2, [r3, #0]

    rslt = bmi160_get_regs(BMI160_INT_LOWHIGH_2_ADDR, &data_array[0], 1, dev);
 8003b74:	f107 0108 	add.w	r1, r7, #8
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	205c      	movs	r0, #92	@ 0x5c
 8003b7e:	f7fd f9b3 	bl	8000ee8 <bmi160_get_regs>
 8003b82:	4603      	mov	r3, r0
 8003b84:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d11f      	bne.n	8003bce <config_high_g_int_settg+0x7a>
    {
        temp = data_array[0] & ~BMI160_HIGH_G_HYST_MASK;
 8003b8e:	7a3b      	ldrb	r3, [r7, #8]
 8003b90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b94:	73bb      	strb	r3, [r7, #14]

        /* Adding high-g hysteresis */
        data_array[0] = temp | ((high_g_int_cfg->high_hy << 6) & BMI160_HIGH_G_HYST_MASK);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	019b      	lsls	r3, r3, #6
 8003ba2:	b25a      	sxtb	r2, r3
 8003ba4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	b25b      	sxtb	r3, r3
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	723b      	strb	r3, [r7, #8]

        /* Adding high-g duration */
        data_array[1] = high_g_int_cfg->high_dur;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	789b      	ldrb	r3, [r3, #2]
 8003bb4:	727b      	strb	r3, [r7, #9]

        /* Adding high-g threshold */
        data_array[2] = high_g_int_cfg->high_thres;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	785b      	ldrb	r3, [r3, #1]
 8003bba:	72bb      	strb	r3, [r7, #10]
        rslt = bmi160_set_regs(BMI160_INT_LOWHIGH_2_ADDR, data_array, 3, dev);
 8003bbc:	f107 0108 	add.w	r1, r7, #8
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	2203      	movs	r2, #3
 8003bc4:	205c      	movs	r0, #92	@ 0x5c
 8003bc6:	f7fd f9c2 	bl	8000f4e <bmi160_set_regs>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	080152d0 	.word	0x080152d0

08003be0 <config_int_out_ctrl>:

/*!
 * @brief This API configure the behavioural setting of interrupt pin.
 */
static int8_t config_int_out_ctrl(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8003bea:	2300      	movs	r3, #0
 8003bec:	75bb      	strb	r3, [r7, #22]
    uint8_t data = 0;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	73fb      	strb	r3, [r7, #15]

    /* Configuration of output interrupt signals on pins INT1 and INT2 are
     * done in BMI160_INT_OUT_CTRL_ADDR register*/
    rslt = bmi160_get_regs(BMI160_INT_OUT_CTRL_ADDR, &data, 1, dev);
 8003bf2:	f107 010f 	add.w	r1, r7, #15
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	2053      	movs	r0, #83	@ 0x53
 8003bfc:	f7fd f974 	bl	8000ee8 <bmi160_get_regs>
 8003c00:	4603      	mov	r3, r0
 8003c02:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8003c04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f040 80a8 	bne.w	8003d5e <config_int_out_ctrl+0x17e>
    {
        /* updating the interrupt pin structure to local structure */
        const struct bmi160_int_pin_settg *intr_pin_sett = &(int_config->int_pin_settg);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	3302      	adds	r3, #2
 8003c12:	613b      	str	r3, [r7, #16]

        /* Configuring channel 1 */
        if (int_config->int_channel == BMI160_INT_CHANNEL_1)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d14a      	bne.n	8003cb2 <config_int_out_ctrl+0xd2>
        {
            /* Output enable */
            temp = data & ~BMI160_INT1_OUTPUT_EN_MASK;
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
 8003c1e:	f023 0308 	bic.w	r3, r3, #8
 8003c22:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_en << 3) & BMI160_INT1_OUTPUT_EN_MASK);
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	b25b      	sxtb	r3, r3
 8003c32:	f003 0308 	and.w	r3, r3, #8
 8003c36:	b25a      	sxtb	r2, r3
 8003c38:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	b25b      	sxtb	r3, r3
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	73fb      	strb	r3, [r7, #15]

            /* Output mode */
            temp = data & ~BMI160_INT1_OUTPUT_MODE_MASK;
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
 8003c46:	f023 0304 	bic.w	r3, r3, #4
 8003c4a:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_mode << 2) & BMI160_INT1_OUTPUT_MODE_MASK);
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	b25b      	sxtb	r3, r3
 8003c5a:	f003 0304 	and.w	r3, r3, #4
 8003c5e:	b25a      	sxtb	r2, r3
 8003c60:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	b25b      	sxtb	r3, r3
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	73fb      	strb	r3, [r7, #15]

            /* Output type */
            temp = data & ~BMI160_INT1_OUTPUT_TYPE_MASK;
 8003c6c:	7bfb      	ldrb	r3, [r7, #15]
 8003c6e:	f023 0302 	bic.w	r3, r3, #2
 8003c72:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_type << 1) & BMI160_INT1_OUTPUT_TYPE_MASK);
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	b25b      	sxtb	r3, r3
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	b25a      	sxtb	r2, r3
 8003c88:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	b25b      	sxtb	r3, r3
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	73fb      	strb	r3, [r7, #15]

            /* edge control */
            temp = data & ~BMI160_INT1_EDGE_CTRL_MASK;
 8003c94:	7bfb      	ldrb	r3, [r7, #15]
 8003c96:	f023 0301 	bic.w	r3, r3, #1
 8003c9a:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->edge_ctrl) & BMI160_INT1_EDGE_CTRL_MASK);
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	7dbb      	ldrb	r3, [r7, #22]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	73fb      	strb	r3, [r7, #15]
 8003cb0:	e04c      	b.n	8003d4c <config_int_out_ctrl+0x16c>
        }
        else
        {
            /* Configuring channel 2 */
            /* Output enable */
            temp = data & ~BMI160_INT2_OUTPUT_EN_MASK;
 8003cb2:	7bfb      	ldrb	r3, [r7, #15]
 8003cb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cb8:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_en << 7) & BMI160_INT2_OUTPUT_EN_MASK);
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	01db      	lsls	r3, r3, #7
 8003cc6:	b25a      	sxtb	r2, r3
 8003cc8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	b25b      	sxtb	r3, r3
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	73fb      	strb	r3, [r7, #15]

            /* Output mode */
            temp = data & ~BMI160_INT2_OUTPUT_MODE_MASK;
 8003cd4:	7bfb      	ldrb	r3, [r7, #15]
 8003cd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cda:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_mode << 6) & BMI160_INT2_OUTPUT_MODE_MASK);
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	019b      	lsls	r3, r3, #6
 8003ce8:	b25b      	sxtb	r3, r3
 8003cea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cee:	b25a      	sxtb	r2, r3
 8003cf0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	b25b      	sxtb	r3, r3
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	73fb      	strb	r3, [r7, #15]

            /* Output type */
            temp = data & ~BMI160_INT2_OUTPUT_TYPE_MASK;
 8003cfc:	7bfb      	ldrb	r3, [r7, #15]
 8003cfe:	f023 0320 	bic.w	r3, r3, #32
 8003d02:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_type << 5) & BMI160_INT2_OUTPUT_TYPE_MASK);
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	015b      	lsls	r3, r3, #5
 8003d10:	b25b      	sxtb	r3, r3
 8003d12:	f003 0320 	and.w	r3, r3, #32
 8003d16:	b25a      	sxtb	r2, r3
 8003d18:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	b25b      	sxtb	r3, r3
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	73fb      	strb	r3, [r7, #15]

            /* edge control */
            temp = data & ~BMI160_INT2_EDGE_CTRL_MASK;
 8003d24:	7bfb      	ldrb	r3, [r7, #15]
 8003d26:	f023 0310 	bic.w	r3, r3, #16
 8003d2a:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->edge_ctrl << 4) & BMI160_INT2_EDGE_CTRL_MASK);
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	b25b      	sxtb	r3, r3
 8003d3a:	f003 0310 	and.w	r3, r3, #16
 8003d3e:	b25a      	sxtb	r2, r3
 8003d40:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	b25b      	sxtb	r3, r3
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	73fb      	strb	r3, [r7, #15]
        }

        rslt = bmi160_set_regs(BMI160_INT_OUT_CTRL_ADDR, &data, 1, dev);
 8003d4c:	f107 010f 	add.w	r1, r7, #15
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	2201      	movs	r2, #1
 8003d54:	2053      	movs	r0, #83	@ 0x53
 8003d56:	f7fd f8fa 	bl	8000f4e <bmi160_set_regs>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003d5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3718      	adds	r7, #24
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <config_int_latch>:

/*!
 * @brief This API configure the mode(input enable, latch or non-latch) of interrupt pin.
 */
static int8_t config_int_latch(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b086      	sub	sp, #24
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8003d74:	2300      	movs	r3, #0
 8003d76:	75bb      	strb	r3, [r7, #22]
    uint8_t data = 0;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	73fb      	strb	r3, [r7, #15]

    /* Configuration of latch on pins INT1 and INT2 are done in
     * BMI160_INT_LATCH_ADDR register*/
    rslt = bmi160_get_regs(BMI160_INT_LATCH_ADDR, &data, 1, dev);
 8003d7c:	f107 010f 	add.w	r1, r7, #15
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	2201      	movs	r2, #1
 8003d84:	2054      	movs	r0, #84	@ 0x54
 8003d86:	f7fd f8af 	bl	8000ee8 <bmi160_get_regs>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8003d8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d146      	bne.n	8003e24 <config_int_latch+0xba>
    {
        /* updating the interrupt pin structure to local structure */
        const struct bmi160_int_pin_settg *intr_pin_sett = &(int_config->int_pin_settg);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	3302      	adds	r3, #2
 8003d9a:	613b      	str	r3, [r7, #16]
        if (int_config->int_channel == BMI160_INT_CHANNEL_1)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d114      	bne.n	8003dce <config_int_latch+0x64>
        {
            /* Configuring channel 1 */
            /* Input enable */
            temp = data & ~BMI160_INT1_INPUT_EN_MASK;
 8003da4:	7bfb      	ldrb	r3, [r7, #15]
 8003da6:	f023 0310 	bic.w	r3, r3, #16
 8003daa:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->input_en << 4) & BMI160_INT1_INPUT_EN_MASK);
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	011b      	lsls	r3, r3, #4
 8003db8:	b25b      	sxtb	r3, r3
 8003dba:	f003 0310 	and.w	r3, r3, #16
 8003dbe:	b25a      	sxtb	r2, r3
 8003dc0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	b25b      	sxtb	r3, r3
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	73fb      	strb	r3, [r7, #15]
 8003dcc:	e013      	b.n	8003df6 <config_int_latch+0x8c>
        }
        else
        {
            /* Configuring channel 2 */
            /* Input enable */
            temp = data & ~BMI160_INT2_INPUT_EN_MASK;
 8003dce:	7bfb      	ldrb	r3, [r7, #15]
 8003dd0:	f023 0320 	bic.w	r3, r3, #32
 8003dd4:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->input_en << 5) & BMI160_INT2_INPUT_EN_MASK);
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	015b      	lsls	r3, r3, #5
 8003de2:	b25b      	sxtb	r3, r3
 8003de4:	f003 0320 	and.w	r3, r3, #32
 8003de8:	b25a      	sxtb	r2, r3
 8003dea:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	b25b      	sxtb	r3, r3
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	73fb      	strb	r3, [r7, #15]

        /* In case of latch interrupt,update the latch duration */

        /* Latching holds the interrupt for the amount of latch
         * duration time */
        temp = data & ~BMI160_INT_LATCH_MASK;
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
 8003df8:	f023 030f 	bic.w	r3, r3, #15
 8003dfc:	75bb      	strb	r3, [r7, #22]
        data = temp | (intr_pin_sett->latch_dur & BMI160_INT_LATCH_MASK);
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	881b      	ldrh	r3, [r3, #0]
 8003e02:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	461a      	mov	r2, r3
 8003e0a:	7dbb      	ldrb	r3, [r7, #22]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	73fb      	strb	r3, [r7, #15]

        /* OUT_CTRL_INT and LATCH_INT address lie consecutively,
         * hence writing data to respective registers at one go */
        rslt = bmi160_set_regs(BMI160_INT_LATCH_ADDR, &data, 1, dev);
 8003e12:	f107 010f 	add.w	r1, r7, #15
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	2054      	movs	r0, #84	@ 0x54
 8003e1c:	f7fd f897 	bl	8000f4e <bmi160_set_regs>
 8003e20:	4603      	mov	r3, r0
 8003e22:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003e24:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3718      	adds	r7, #24
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <set_fifo_full_int>:
 *  @brief This API sets FIFO full interrupt of the sensor.This interrupt
 *  occurs when the FIFO is full and the next full data sample would cause
 *  a FIFO overflow, which may delete the old samples.
 */
static int8_t set_fifo_full_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d003      	beq.n	8003e4c <set_fifo_full_int+0x1c>
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d102      	bne.n	8003e52 <set_fifo_full_int+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8003e4c:	23ff      	movs	r3, #255	@ 0xff
 8003e4e:	73fb      	strb	r3, [r7, #15]
 8003e50:	e019      	b.n	8003e86 <set_fifo_full_int+0x56>
    }
    else
    {
        /*enable the fifo full interrupt */
        rslt = enable_fifo_full_int(int_config, dev);
 8003e52:	6839      	ldr	r1, [r7, #0]
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 f81c 	bl	8003e92 <enable_fifo_full_int>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8003e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10f      	bne.n	8003e86 <set_fifo_full_int+0x56>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8003e66:	6839      	ldr	r1, [r7, #0]
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f7fd fdf4 	bl	8001a56 <set_intr_pin_config>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8003e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d105      	bne.n	8003e86 <set_fifo_full_int+0x56>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 8003e7a:	6839      	ldr	r1, [r7, #0]
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f7fe fe01 	bl	8002a84 <map_hardware_interrupt>
 8003e82:	4603      	mov	r3, r0
 8003e84:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8003e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <enable_fifo_full_int>:

/*!
 * @brief This enable the FIFO full interrupt engine.
 */
static int8_t enable_fifo_full_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b084      	sub	sp, #16
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
 8003e9a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8003ea0:	f107 010e 	add.w	r1, r7, #14
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	2051      	movs	r0, #81	@ 0x51
 8003eaa:	f7fd f81d 	bl	8000ee8 <bmi160_get_regs>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d11b      	bne.n	8003ef2 <enable_fifo_full_int+0x60>
    {
        data = BMI160_SET_BITS(data, BMI160_FIFO_FULL_INT, int_config->fifo_full_int_en);
 8003eba:	7bbb      	ldrb	r3, [r7, #14]
 8003ebc:	b25b      	sxtb	r3, r3
 8003ebe:	f023 0320 	bic.w	r3, r3, #32
 8003ec2:	b25a      	sxtb	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	7a1b      	ldrb	r3, [r3, #8]
 8003ec8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	015b      	lsls	r3, r3, #5
 8003ed0:	b25b      	sxtb	r3, r3
 8003ed2:	f003 0320 	and.w	r3, r3, #32
 8003ed6:	b25b      	sxtb	r3, r3
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	b25b      	sxtb	r3, r3
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	73bb      	strb	r3, [r7, #14]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8003ee0:	f107 010e 	add.w	r1, r7, #14
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	2051      	movs	r0, #81	@ 0x51
 8003eea:	f7fd f830 	bl	8000f4e <bmi160_set_regs>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <set_fifo_watermark_int>:
 *  @brief This API sets FIFO watermark interrupt of the sensor.The FIFO
 *  watermark interrupt is fired, when the FIFO fill level is above a fifo
 *  watermark.
 */
static int8_t set_fifo_watermark_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b084      	sub	sp, #16
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
 8003f06:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->delay_ms == NULL))
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <set_fifo_watermark_int+0x1c>
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d102      	bne.n	8003f20 <set_fifo_watermark_int+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8003f1a:	23ff      	movs	r3, #255	@ 0xff
 8003f1c:	73fb      	strb	r3, [r7, #15]
 8003f1e:	e019      	b.n	8003f54 <set_fifo_watermark_int+0x56>
    }
    else
    {
        /* Enable fifo-watermark interrupt in Int Enable 1 register */
        rslt = enable_fifo_wtm_int(int_config, dev);
 8003f20:	6839      	ldr	r1, [r7, #0]
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f81c 	bl	8003f60 <enable_fifo_wtm_int>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8003f2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10f      	bne.n	8003f54 <set_fifo_watermark_int+0x56>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8003f34:	6839      	ldr	r1, [r7, #0]
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7fd fd8d 	bl	8001a56 <set_intr_pin_config>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8003f40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d105      	bne.n	8003f54 <set_fifo_watermark_int+0x56>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 8003f48:	6839      	ldr	r1, [r7, #0]
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7fe fd9a 	bl	8002a84 <map_hardware_interrupt>
 8003f50:	4603      	mov	r3, r0
 8003f52:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8003f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <enable_fifo_wtm_int>:

/*!
 * @brief This enable the FIFO watermark interrupt engine.
 */
static int8_t enable_fifo_wtm_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8003f6e:	f107 010e 	add.w	r1, r7, #14
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	2201      	movs	r2, #1
 8003f76:	2051      	movs	r0, #81	@ 0x51
 8003f78:	f7fc ffb6 	bl	8000ee8 <bmi160_get_regs>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003f80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d11b      	bne.n	8003fc0 <enable_fifo_wtm_int+0x60>
    {
        data = BMI160_SET_BITS(data, BMI160_FIFO_WTM_INT, int_config->fifo_wtm_int_en);
 8003f88:	7bbb      	ldrb	r3, [r7, #14]
 8003f8a:	b25b      	sxtb	r3, r3
 8003f8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f90:	b25a      	sxtb	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	7a1b      	ldrb	r3, [r3, #8]
 8003f96:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	019b      	lsls	r3, r3, #6
 8003f9e:	b25b      	sxtb	r3, r3
 8003fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fa4:	b25b      	sxtb	r3, r3
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	b25b      	sxtb	r3, r3
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	73bb      	strb	r3, [r7, #14]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8003fae:	f107 010e 	add.w	r1, r7, #14
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	2051      	movs	r0, #81	@ 0x51
 8003fb8:	f7fc ffc9 	bl	8000f4e <bmi160_set_regs>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <get_foc_status>:

/*!
 *  @brief This API is used to get the FOC status from the sensor
 */
static int8_t get_foc_status(uint8_t *foc_status, struct bmi160_dev const *dev)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;

    /* Read the FOC status from sensor */
    rslt = bmi160_get_regs(BMI160_STATUS_ADDR, &data, 1, dev);
 8003fd6:	f107 010e 	add.w	r1, r7, #14
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	201b      	movs	r0, #27
 8003fe0:	f7fc ff82 	bl	8000ee8 <bmi160_get_regs>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d107      	bne.n	8004000 <get_foc_status+0x34>
    {
        /* Get the foc_status bit */
        *foc_status = BMI160_GET_BITS(data, BMI160_FOC_STATUS);
 8003ff0:	7bbb      	ldrb	r3, [r7, #14]
 8003ff2:	10db      	asrs	r3, r3, #3
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8004000:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004004:	4618      	mov	r0, r3
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <configure_offset_enable>:

/*!
 *  @brief This API is used to configure the offset enable bits in the sensor
 */
static int8_t configure_offset_enable(const struct bmi160_foc_conf *foc_conf, struct bmi160_dev const *dev)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004016:	6838      	ldr	r0, [r7, #0]
 8004018:	f7fd fd38 	bl	8001a8c <null_ptr_check>
 800401c:	4603      	mov	r3, r0
 800401e:	73fb      	strb	r3, [r7, #15]
    if (rslt != BMI160_OK)
 8004020:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d002      	beq.n	800402e <configure_offset_enable+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8004028:	23ff      	movs	r3, #255	@ 0xff
 800402a:	73fb      	strb	r3, [r7, #15]
 800402c:	e032      	b.n	8004094 <configure_offset_enable+0x88>
    }
    else
    {
        /* Read the FOC config from the sensor */
        rslt = bmi160_get_regs(BMI160_OFFSET_CONF_ADDR, &data, 1, dev);
 800402e:	f107 010e 	add.w	r1, r7, #14
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	2201      	movs	r2, #1
 8004036:	2077      	movs	r0, #119	@ 0x77
 8004038:	f7fc ff56 	bl	8000ee8 <bmi160_get_regs>
 800403c:	4603      	mov	r3, r0
 800403e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004040:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d125      	bne.n	8004094 <configure_offset_enable+0x88>
        {
            /* Set the offset enable/disable for gyro */
            data = BMI160_SET_BITS(data, BMI160_GYRO_OFFSET_EN, foc_conf->gyro_off_en);
 8004048:	7bbb      	ldrb	r3, [r7, #14]
 800404a:	b25b      	sxtb	r3, r3
 800404c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004050:	b25a      	sxtb	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	795b      	ldrb	r3, [r3, #5]
 8004056:	01db      	lsls	r3, r3, #7
 8004058:	b25b      	sxtb	r3, r3
 800405a:	4313      	orrs	r3, r2
 800405c:	b25b      	sxtb	r3, r3
 800405e:	b2db      	uxtb	r3, r3
 8004060:	73bb      	strb	r3, [r7, #14]

            /* Set the offset enable/disable for accel */
            data = BMI160_SET_BITS(data, BMI160_ACCEL_OFFSET_EN, foc_conf->acc_off_en);
 8004062:	7bbb      	ldrb	r3, [r7, #14]
 8004064:	b25b      	sxtb	r3, r3
 8004066:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800406a:	b25a      	sxtb	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	791b      	ldrb	r3, [r3, #4]
 8004070:	019b      	lsls	r3, r3, #6
 8004072:	b25b      	sxtb	r3, r3
 8004074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004078:	b25b      	sxtb	r3, r3
 800407a:	4313      	orrs	r3, r2
 800407c:	b25b      	sxtb	r3, r3
 800407e:	b2db      	uxtb	r3, r3
 8004080:	73bb      	strb	r3, [r7, #14]

            /* Set the offset config in the sensor */
            rslt = bmi160_set_regs(BMI160_OFFSET_CONF_ADDR, &data, 1, dev);
 8004082:	f107 010e 	add.w	r1, r7, #14
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2201      	movs	r2, #1
 800408a:	2077      	movs	r0, #119	@ 0x77
 800408c:	f7fc ff5f 	bl	8000f4e <bmi160_set_regs>
 8004090:	4603      	mov	r3, r0
 8004092:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8004094:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004098:	4618      	mov	r0, r3
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <trigger_foc>:

static int8_t trigger_foc(struct bmi160_offsets *offset, struct bmi160_dev const *dev)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b088      	sub	sp, #32
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t foc_status = BMI160_ENABLE;
 80040aa:	2301      	movs	r3, #1
 80040ac:	777b      	strb	r3, [r7, #29]
    uint8_t cmd = BMI160_START_FOC_CMD;
 80040ae:	2303      	movs	r3, #3
 80040b0:	773b      	strb	r3, [r7, #28]
    uint8_t timeout = 0;
 80040b2:	2300      	movs	r3, #0
 80040b4:	77bb      	strb	r3, [r7, #30]
    uint8_t data_array[20];

    /* Start the FOC process */
    rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &cmd, 1, dev);
 80040b6:	f107 011c 	add.w	r1, r7, #28
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	2201      	movs	r2, #1
 80040be:	207e      	movs	r0, #126	@ 0x7e
 80040c0:	f7fc ff45 	bl	8000f4e <bmi160_set_regs>
 80040c4:	4603      	mov	r3, r0
 80040c6:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMI160_OK)
 80040c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d141      	bne.n	8004154 <trigger_foc+0xb4>
    {
        /* Check the FOC status*/
        rslt = get_foc_status(&foc_status, dev);
 80040d0:	f107 031d 	add.w	r3, r7, #29
 80040d4:	6839      	ldr	r1, [r7, #0]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff ff78 	bl	8003fcc <get_foc_status>
 80040dc:	4603      	mov	r3, r0
 80040de:	77fb      	strb	r3, [r7, #31]

        if ((rslt != BMI160_OK) || (foc_status != BMI160_ENABLE))
 80040e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d112      	bne.n	800410e <trigger_foc+0x6e>
 80040e8:	7f7b      	ldrb	r3, [r7, #29]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d025      	beq.n	800413a <trigger_foc+0x9a>
        {
            while ((foc_status != BMI160_ENABLE) && (timeout < 32))
 80040ee:	e00e      	b.n	800410e <trigger_foc+0x6e>
            {
                /* Maximum time of 250ms is given in 10
                 * steps of 25ms each - 250ms refer datasheet 2.9.1 */
                dev->delay_ms(25);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f4:	2019      	movs	r0, #25
 80040f6:	4798      	blx	r3

                /* Check the FOC status*/
                rslt = get_foc_status(&foc_status, dev);
 80040f8:	f107 031d 	add.w	r3, r7, #29
 80040fc:	6839      	ldr	r1, [r7, #0]
 80040fe:	4618      	mov	r0, r3
 8004100:	f7ff ff64 	bl	8003fcc <get_foc_status>
 8004104:	4603      	mov	r3, r0
 8004106:	77fb      	strb	r3, [r7, #31]
                timeout++;
 8004108:	7fbb      	ldrb	r3, [r7, #30]
 800410a:	3301      	adds	r3, #1
 800410c:	77bb      	strb	r3, [r7, #30]
            while ((foc_status != BMI160_ENABLE) && (timeout < 32))
 800410e:	7f7b      	ldrb	r3, [r7, #29]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d002      	beq.n	800411a <trigger_foc+0x7a>
 8004114:	7fbb      	ldrb	r3, [r7, #30]
 8004116:	2b1f      	cmp	r3, #31
 8004118:	d9ea      	bls.n	80040f0 <trigger_foc+0x50>
            }

            if ((rslt == BMI160_OK) && (foc_status == BMI160_ENABLE))
 800411a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d109      	bne.n	8004136 <trigger_foc+0x96>
 8004122:	7f7b      	ldrb	r3, [r7, #29]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d106      	bne.n	8004136 <trigger_foc+0x96>
            {
                /* Get offset values from sensor */
                rslt = bmi160_get_offsets(offset, dev);
 8004128:	6839      	ldr	r1, [r7, #0]
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7fd f9c9 	bl	80014c2 <bmi160_get_offsets>
 8004130:	4603      	mov	r3, r0
 8004132:	77fb      	strb	r3, [r7, #31]
 8004134:	e001      	b.n	800413a <trigger_foc+0x9a>
            }
            else
            {
                /* FOC failure case */
                rslt = BMI160_E_FOC_FAILURE;
 8004136:	23f5      	movs	r3, #245	@ 0xf5
 8004138:	77fb      	strb	r3, [r7, #31]
            }
        }

        if (rslt == BMI160_OK)
 800413a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d108      	bne.n	8004154 <trigger_foc+0xb4>
        {
            /* Read registers 0x04-0x17 */
            rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 20, dev);
 8004142:	f107 0108 	add.w	r1, r7, #8
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	2214      	movs	r2, #20
 800414a:	200c      	movs	r0, #12
 800414c:	f7fc fecc 	bl	8000ee8 <bmi160_get_regs>
 8004150:	4603      	mov	r3, r0
 8004152:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 8004154:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004158:	4618      	mov	r0, r3
 800415a:	3720      	adds	r7, #32
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <BMI160_init>:
uint8_t BMI160_Ascale_bit, BMI160_Gscale_bit;

float bmi160_aRes, bmi160_gRes;

int8_t BMI160_init(BMI160_t *DataStruct)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]

	int8_t rslt;

	set_bmi160_Ares();
 8004168:	f000 f970 	bl	800444c <set_bmi160_Ares>
	set_bmi160_Gres();
 800416c:	f000 f99a 	bl	80044a4 <set_bmi160_Gres>
	get_bmi160_Ares();
 8004170:	f000 f9ca 	bl	8004508 <get_bmi160_Ares>
	get_bmi160_Gres();
 8004174:	f000 f9fe 	bl	8004574 <get_bmi160_Gres>

    sensor.id = 0;
 8004178:	4b52      	ldr	r3, [pc, #328]	@ (80042c4 <BMI160_init+0x164>)
 800417a:	2200      	movs	r2, #0
 800417c:	705a      	strb	r2, [r3, #1]
    sensor.intf = BMI160_I2C_INTF;
 800417e:	4b51      	ldr	r3, [pc, #324]	@ (80042c4 <BMI160_init+0x164>)
 8004180:	2200      	movs	r2, #0
 8004182:	709a      	strb	r2, [r3, #2]
    sensor.read = SensorAPI_I2Cx_Read;
 8004184:	4b4f      	ldr	r3, [pc, #316]	@ (80042c4 <BMI160_init+0x164>)
 8004186:	4a50      	ldr	r2, [pc, #320]	@ (80042c8 <BMI160_init+0x168>)
 8004188:	61da      	str	r2, [r3, #28]
    sensor.write = SensorAPI_I2Cx_Write;
 800418a:	4b4e      	ldr	r3, [pc, #312]	@ (80042c4 <BMI160_init+0x164>)
 800418c:	4a4f      	ldr	r2, [pc, #316]	@ (80042cc <BMI160_init+0x16c>)
 800418e:	621a      	str	r2, [r3, #32]
    sensor.delay_ms = HAL_Delay;
 8004190:	4b4c      	ldr	r3, [pc, #304]	@ (80042c4 <BMI160_init+0x164>)
 8004192:	4a4f      	ldr	r2, [pc, #316]	@ (80042d0 <BMI160_init+0x170>)
 8004194:	625a      	str	r2, [r3, #36]	@ 0x24
    sensor.read_write_len = 32;
 8004196:	4b4b      	ldr	r3, [pc, #300]	@ (80042c4 <BMI160_init+0x164>)
 8004198:	2220      	movs	r2, #32
 800419a:	851a      	strh	r2, [r3, #40]	@ 0x28

    rslt = bmi160_soft_reset(&sensor);
 800419c:	4849      	ldr	r0, [pc, #292]	@ (80042c4 <BMI160_init+0x164>)
 800419e:	f7fc ff87 	bl	80010b0 <bmi160_soft_reset>
 80041a2:	4603      	mov	r3, r0
 80041a4:	73fb      	strb	r3, [r7, #15]
    sensor.delay_ms(200);
 80041a6:	4b47      	ldr	r3, [pc, #284]	@ (80042c4 <BMI160_init+0x164>)
 80041a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041aa:	20c8      	movs	r0, #200	@ 0xc8
 80041ac:	4798      	blx	r3
    rslt = bmi160_init(&sensor);
 80041ae:	4845      	ldr	r0, [pc, #276]	@ (80042c4 <BMI160_init+0x164>)
 80041b0:	f7fc ff30 	bl	8001014 <bmi160_init>
 80041b4:	4603      	mov	r3, r0
 80041b6:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    uint8_t reg_addr = BMI160_CHIP_ID_ADDR;
 80041b8:	2300      	movs	r3, #0
 80041ba:	73bb      	strb	r3, [r7, #14]
    uint8_t chipID = 0;
 80041bc:	2300      	movs	r3, #0
 80041be:	72fb      	strb	r3, [r7, #11]
    uint16_t len = 1;
 80041c0:	2301      	movs	r3, #1
 80041c2:	81bb      	strh	r3, [r7, #12]
    rslt = bmi160_get_regs(reg_addr, &chipID, len, &sensor);
 80041c4:	89ba      	ldrh	r2, [r7, #12]
 80041c6:	f107 010b 	add.w	r1, r7, #11
 80041ca:	7bb8      	ldrb	r0, [r7, #14]
 80041cc:	4b3d      	ldr	r3, [pc, #244]	@ (80042c4 <BMI160_init+0x164>)
 80041ce:	f7fc fe8b 	bl	8000ee8 <bmi160_get_regs>
 80041d2:	4603      	mov	r3, r0
 80041d4:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    /* Select the Output data rate, range of accelerometer sensor */
    sensor.accel_cfg.odr = BMI160_ACCEL_ODR_800HZ; //BMI160_ACCEL_ODR_400HZ
 80041d6:	4b3b      	ldr	r3, [pc, #236]	@ (80042c4 <BMI160_init+0x164>)
 80041d8:	220b      	movs	r2, #11
 80041da:	715a      	strb	r2, [r3, #5]
    sensor.delay_ms(100);
 80041dc:	4b39      	ldr	r3, [pc, #228]	@ (80042c4 <BMI160_init+0x164>)
 80041de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e0:	2064      	movs	r0, #100	@ 0x64
 80041e2:	4798      	blx	r3
    sensor.accel_cfg.range = BMI160_Ascale_bit;
 80041e4:	4b3b      	ldr	r3, [pc, #236]	@ (80042d4 <BMI160_init+0x174>)
 80041e6:	781a      	ldrb	r2, [r3, #0]
 80041e8:	4b36      	ldr	r3, [pc, #216]	@ (80042c4 <BMI160_init+0x164>)
 80041ea:	719a      	strb	r2, [r3, #6]
    sensor.delay_ms(100);
 80041ec:	4b35      	ldr	r3, [pc, #212]	@ (80042c4 <BMI160_init+0x164>)
 80041ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f0:	2064      	movs	r0, #100	@ 0x64
 80041f2:	4798      	blx	r3

    /* Select the power mode of accelerometer sensor */
    sensor.accel_cfg.power = BMI160_ACCEL_NORMAL_MODE;
 80041f4:	4b33      	ldr	r3, [pc, #204]	@ (80042c4 <BMI160_init+0x164>)
 80041f6:	2211      	movs	r2, #17
 80041f8:	711a      	strb	r2, [r3, #4]
    sensor.delay_ms(100);
 80041fa:	4b32      	ldr	r3, [pc, #200]	@ (80042c4 <BMI160_init+0x164>)
 80041fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fe:	2064      	movs	r0, #100	@ 0x64
 8004200:	4798      	blx	r3
    sensor.accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4; //BMI160_ACCEL_BW_OSR2_AVG2
 8004202:	4b30      	ldr	r3, [pc, #192]	@ (80042c4 <BMI160_init+0x164>)
 8004204:	2202      	movs	r2, #2
 8004206:	71da      	strb	r2, [r3, #7]
    sensor.delay_ms(100);
 8004208:	4b2e      	ldr	r3, [pc, #184]	@ (80042c4 <BMI160_init+0x164>)
 800420a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420c:	2064      	movs	r0, #100	@ 0x64
 800420e:	4798      	blx	r3


    /* Select the Output data rate, range of Gyroscope sensor */
    sensor.gyro_cfg.odr = BMI160_GYRO_ODR_800HZ; //BMI160_GYRO_ODR_400HZ
 8004210:	4b2c      	ldr	r3, [pc, #176]	@ (80042c4 <BMI160_init+0x164>)
 8004212:	220b      	movs	r2, #11
 8004214:	735a      	strb	r2, [r3, #13]
    sensor.delay_ms(100);
 8004216:	4b2b      	ldr	r3, [pc, #172]	@ (80042c4 <BMI160_init+0x164>)
 8004218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421a:	2064      	movs	r0, #100	@ 0x64
 800421c:	4798      	blx	r3
    sensor.gyro_cfg.range = BMI160_Gscale_bit; // BMI160_GYRO_RANGE_250_DPS
 800421e:	4b2e      	ldr	r3, [pc, #184]	@ (80042d8 <BMI160_init+0x178>)
 8004220:	781a      	ldrb	r2, [r3, #0]
 8004222:	4b28      	ldr	r3, [pc, #160]	@ (80042c4 <BMI160_init+0x164>)
 8004224:	739a      	strb	r2, [r3, #14]
    sensor.delay_ms(100);
 8004226:	4b27      	ldr	r3, [pc, #156]	@ (80042c4 <BMI160_init+0x164>)
 8004228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422a:	2064      	movs	r0, #100	@ 0x64
 800422c:	4798      	blx	r3

    /* Select the power mode of Gyroscope sensor */
    sensor.gyro_cfg.power = BMI160_GYRO_NORMAL_MODE;
 800422e:	4b25      	ldr	r3, [pc, #148]	@ (80042c4 <BMI160_init+0x164>)
 8004230:	2215      	movs	r2, #21
 8004232:	731a      	strb	r2, [r3, #12]
    sensor.delay_ms(100);
 8004234:	4b23      	ldr	r3, [pc, #140]	@ (80042c4 <BMI160_init+0x164>)
 8004236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004238:	2064      	movs	r0, #100	@ 0x64
 800423a:	4798      	blx	r3
    sensor.gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE; //BMI160_GYRO_BW_NORMAL_MODE
 800423c:	4b21      	ldr	r3, [pc, #132]	@ (80042c4 <BMI160_init+0x164>)
 800423e:	2202      	movs	r2, #2
 8004240:	73da      	strb	r2, [r3, #15]
    sensor.delay_ms(100);
 8004242:	4b20      	ldr	r3, [pc, #128]	@ (80042c4 <BMI160_init+0x164>)
 8004244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004246:	2064      	movs	r0, #100	@ 0x64
 8004248:	4798      	blx	r3

    /* Set the sensor configuration */
    rslt = bmi160_set_sens_conf(&sensor);
 800424a:	481e      	ldr	r0, [pc, #120]	@ (80042c4 <BMI160_init+0x164>)
 800424c:	f7fc ff6b 	bl	8001126 <bmi160_set_sens_conf>
 8004250:	4603      	mov	r3, r0
 8004252:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    rslt = start_foc();
 8004254:	f000 f844 	bl	80042e0 <start_foc>
 8004258:	4603      	mov	r3, r0
 800425a:	73fb      	strb	r3, [r7, #15]

	/********************************************************************/

    /* Select the Interrupt channel/pin */
    int_config.int_channel = BMI160_INT_CHANNEL_1;// Interrupt channel/pin 1
 800425c:	4b1f      	ldr	r3, [pc, #124]	@ (80042dc <BMI160_init+0x17c>)
 800425e:	2201      	movs	r2, #1
 8004260:	701a      	strb	r2, [r3, #0]

    /* Select the Interrupt type */
    int_config.int_type = BMI160_ACC_GYRO_DATA_RDY_INT;// Choosing Any motion interrupt
 8004262:	4b1e      	ldr	r3, [pc, #120]	@ (80042dc <BMI160_init+0x17c>)
 8004264:	220a      	movs	r2, #10
 8004266:	705a      	strb	r2, [r3, #1]
    /* Select the interrupt channel/pin settings */
    int_config.int_pin_settg.output_en = BMI160_ENABLE;// Enabling interrupt pins to act as output pin
 8004268:	4a1c      	ldr	r2, [pc, #112]	@ (80042dc <BMI160_init+0x17c>)
 800426a:	7893      	ldrb	r3, [r2, #2]
 800426c:	f043 0301 	orr.w	r3, r3, #1
 8004270:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.output_mode = BMI160_DISABLE;// Choosing push-pull mode for interrupt pin
 8004272:	4a1a      	ldr	r2, [pc, #104]	@ (80042dc <BMI160_init+0x17c>)
 8004274:	7893      	ldrb	r3, [r2, #2]
 8004276:	f36f 0341 	bfc	r3, #1, #1
 800427a:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.output_type = BMI160_DISABLE;// Choosing active low output
 800427c:	4a17      	ldr	r2, [pc, #92]	@ (80042dc <BMI160_init+0x17c>)
 800427e:	7893      	ldrb	r3, [r2, #2]
 8004280:	f36f 0382 	bfc	r3, #2, #1
 8004284:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.edge_ctrl = BMI160_ENABLE;// Choosing edge triggered output
 8004286:	4a15      	ldr	r2, [pc, #84]	@ (80042dc <BMI160_init+0x17c>)
 8004288:	7893      	ldrb	r3, [r2, #2]
 800428a:	f043 0308 	orr.w	r3, r3, #8
 800428e:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.input_en = BMI160_DISABLE;// Disabling interrupt pin to act as input
 8004290:	4a12      	ldr	r2, [pc, #72]	@ (80042dc <BMI160_init+0x17c>)
 8004292:	7893      	ldrb	r3, [r2, #2]
 8004294:	f36f 1304 	bfc	r3, #4, #1
 8004298:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.latch_dur = BMI160_LATCH_DUR_NONE;// non-latched output
 800429a:	4a10      	ldr	r2, [pc, #64]	@ (80042dc <BMI160_init+0x17c>)
 800429c:	8853      	ldrh	r3, [r2, #2]
 800429e:	f36f 1348 	bfc	r3, #5, #4
 80042a2:	8053      	strh	r3, [r2, #2]

    /* Set the Any-motion interrupt */
    rslt = bmi160_set_int_config(&int_config, &sensor); /* sensor is an instance of the structure bmi160_dev  */
 80042a4:	4907      	ldr	r1, [pc, #28]	@ (80042c4 <BMI160_init+0x164>)
 80042a6:	480d      	ldr	r0, [pc, #52]	@ (80042dc <BMI160_init+0x17c>)
 80042a8:	f7fc fffe 	bl	80012a8 <bmi160_set_int_config>
 80042ac:	4603      	mov	r3, r0
 80042ae:	73fb      	strb	r3, [r7, #15]

    DataStruct->INIT_OK_i8 = rslt;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	7bfa      	ldrb	r2, [r7, #15]
 80042b4:	761a      	strb	r2, [r3, #24]
    return rslt;
 80042b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	20000310 	.word	0x20000310
 80042c8:	080045fd 	.word	0x080045fd
 80042cc:	08004641 	.word	0x08004641
 80042d0:	0800571d 	.word	0x0800571d
 80042d4:	20000372 	.word	0x20000372
 80042d8:	20000373 	.word	0x20000373
 80042dc:	20000368 	.word	0x20000368

080042e0 <start_foc>:

int8_t start_foc()
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
	int8_t rslt = 0;
 80042e6:	2300      	movs	r3, #0
 80042e8:	71fb      	strb	r3, [r7, #7]

	/* Enable FOC for accel with target values of z = 1g ; x,y as 0g */
	foc_conf.acc_off_en = BMI160_ENABLE;
 80042ea:	4b13      	ldr	r3, [pc, #76]	@ (8004338 <start_foc+0x58>)
 80042ec:	2201      	movs	r2, #1
 80042ee:	711a      	strb	r2, [r3, #4]
	foc_conf.foc_acc_x  = BMI160_FOC_ACCEL_0G;
 80042f0:	4b11      	ldr	r3, [pc, #68]	@ (8004338 <start_foc+0x58>)
 80042f2:	2203      	movs	r2, #3
 80042f4:	705a      	strb	r2, [r3, #1]
	foc_conf.foc_acc_y  = BMI160_FOC_ACCEL_0G;
 80042f6:	4b10      	ldr	r3, [pc, #64]	@ (8004338 <start_foc+0x58>)
 80042f8:	2203      	movs	r2, #3
 80042fa:	709a      	strb	r2, [r3, #2]
	foc_conf.foc_acc_z  = BMI160_FOC_ACCEL_POSITIVE_G;
 80042fc:	4b0e      	ldr	r3, [pc, #56]	@ (8004338 <start_foc+0x58>)
 80042fe:	2201      	movs	r2, #1
 8004300:	70da      	strb	r2, [r3, #3]
	sensor.delay_ms(100);
 8004302:	4b0e      	ldr	r3, [pc, #56]	@ (800433c <start_foc+0x5c>)
 8004304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004306:	2064      	movs	r0, #100	@ 0x64
 8004308:	4798      	blx	r3

	/* Enable FOC for gyro */
	foc_conf.foc_gyr_en = BMI160_ENABLE;
 800430a:	4b0b      	ldr	r3, [pc, #44]	@ (8004338 <start_foc+0x58>)
 800430c:	2201      	movs	r2, #1
 800430e:	701a      	strb	r2, [r3, #0]
	foc_conf.gyro_off_en = BMI160_ENABLE;
 8004310:	4b09      	ldr	r3, [pc, #36]	@ (8004338 <start_foc+0x58>)
 8004312:	2201      	movs	r2, #1
 8004314:	715a      	strb	r2, [r3, #5]
	sensor.delay_ms(100);
 8004316:	4b09      	ldr	r3, [pc, #36]	@ (800433c <start_foc+0x5c>)
 8004318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800431a:	2064      	movs	r0, #100	@ 0x64
 800431c:	4798      	blx	r3

	rslt = bmi160_start_foc(&foc_conf, &offsets, &sensor);
 800431e:	4a07      	ldr	r2, [pc, #28]	@ (800433c <start_foc+0x5c>)
 8004320:	4907      	ldr	r1, [pc, #28]	@ (8004340 <start_foc+0x60>)
 8004322:	4805      	ldr	r0, [pc, #20]	@ (8004338 <start_foc+0x58>)
 8004324:	f7fd f84c 	bl	80013c0 <bmi160_start_foc>
 8004328:	4603      	mov	r3, r0
 800432a:	71fb      	strb	r3, [r7, #7]

	return rslt;
 800432c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004330:	4618      	mov	r0, r3
 8004332:	3708      	adds	r7, #8
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	20000354 	.word	0x20000354
 800433c:	20000310 	.word	0x20000310
 8004340:	2000035c 	.word	0x2000035c

08004344 <bmi160ReadAccelGyro>:

int8_t bmi160ReadAccelGyro(BMI160_t *DataStruct)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b08a      	sub	sp, #40	@ 0x28
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	float ax, ay, az, gx, gy, gz;

	rslt = bmi160_get_sensor_data((BMI160_ACCEL_SEL | BMI160_GYRO_SEL), &accel, &gyro, &sensor);
 800434c:	4b3a      	ldr	r3, [pc, #232]	@ (8004438 <bmi160ReadAccelGyro+0xf4>)
 800434e:	4a3b      	ldr	r2, [pc, #236]	@ (800443c <bmi160ReadAccelGyro+0xf8>)
 8004350:	493b      	ldr	r1, [pc, #236]	@ (8004440 <bmi160ReadAccelGyro+0xfc>)
 8004352:	2003      	movs	r0, #3
 8004354:	f7fc ff41 	bl	80011da <bmi160_get_sensor_data>
 8004358:	4603      	mov	r3, r0
 800435a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	ax = (float)accel.x / bmi160_aRes;
 800435e:	4b38      	ldr	r3, [pc, #224]	@ (8004440 <bmi160ReadAccelGyro+0xfc>)
 8004360:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004364:	ee07 3a90 	vmov	s15, r3
 8004368:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800436c:	4b35      	ldr	r3, [pc, #212]	@ (8004444 <bmi160ReadAccelGyro+0x100>)
 800436e:	ed93 7a00 	vldr	s14, [r3]
 8004372:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004376:	edc7 7a08 	vstr	s15, [r7, #32]
	ay = (float)accel.y / bmi160_aRes;
 800437a:	4b31      	ldr	r3, [pc, #196]	@ (8004440 <bmi160ReadAccelGyro+0xfc>)
 800437c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004380:	ee07 3a90 	vmov	s15, r3
 8004384:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004388:	4b2e      	ldr	r3, [pc, #184]	@ (8004444 <bmi160ReadAccelGyro+0x100>)
 800438a:	ed93 7a00 	vldr	s14, [r3]
 800438e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004392:	edc7 7a07 	vstr	s15, [r7, #28]
	az = (float)accel.z / bmi160_aRes;
 8004396:	4b2a      	ldr	r3, [pc, #168]	@ (8004440 <bmi160ReadAccelGyro+0xfc>)
 8004398:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800439c:	ee07 3a90 	vmov	s15, r3
 80043a0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80043a4:	4b27      	ldr	r3, [pc, #156]	@ (8004444 <bmi160ReadAccelGyro+0x100>)
 80043a6:	ed93 7a00 	vldr	s14, [r3]
 80043aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043ae:	edc7 7a06 	vstr	s15, [r7, #24]

	gx = (float)gyro.x / bmi160_gRes;
 80043b2:	4b22      	ldr	r3, [pc, #136]	@ (800443c <bmi160ReadAccelGyro+0xf8>)
 80043b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043b8:	ee07 3a90 	vmov	s15, r3
 80043bc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80043c0:	4b21      	ldr	r3, [pc, #132]	@ (8004448 <bmi160ReadAccelGyro+0x104>)
 80043c2:	ed93 7a00 	vldr	s14, [r3]
 80043c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043ca:	edc7 7a05 	vstr	s15, [r7, #20]
	gy = (float)gyro.y / bmi160_gRes;
 80043ce:	4b1b      	ldr	r3, [pc, #108]	@ (800443c <bmi160ReadAccelGyro+0xf8>)
 80043d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80043d4:	ee07 3a90 	vmov	s15, r3
 80043d8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80043dc:	4b1a      	ldr	r3, [pc, #104]	@ (8004448 <bmi160ReadAccelGyro+0x104>)
 80043de:	ed93 7a00 	vldr	s14, [r3]
 80043e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043e6:	edc7 7a04 	vstr	s15, [r7, #16]
	gz = (float)gyro.z / bmi160_gRes;
 80043ea:	4b14      	ldr	r3, [pc, #80]	@ (800443c <bmi160ReadAccelGyro+0xf8>)
 80043ec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80043f0:	ee07 3a90 	vmov	s15, r3
 80043f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80043f8:	4b13      	ldr	r3, [pc, #76]	@ (8004448 <bmi160ReadAccelGyro+0x104>)
 80043fa:	ed93 7a00 	vldr	s14, [r3]
 80043fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004402:	edc7 7a03 	vstr	s15, [r7, #12]


	DataStruct->BMI160_Ax_f32 = ax;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a3a      	ldr	r2, [r7, #32]
 800440a:	601a      	str	r2, [r3, #0]
	DataStruct->BMI160_Ay_f32 = ay;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	69fa      	ldr	r2, [r7, #28]
 8004410:	605a      	str	r2, [r3, #4]
	DataStruct->BMI160_Az_f32 = az;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	609a      	str	r2, [r3, #8]

	DataStruct->BMI160_Gx_f32 = gx;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	60da      	str	r2, [r3, #12]
	DataStruct->BMI160_Gy_f32 = gy;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	611a      	str	r2, [r3, #16]
	DataStruct->BMI160_Gz_f32 = gz;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	615a      	str	r2, [r3, #20]

	return rslt;
 800442a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800442e:	4618      	mov	r0, r3
 8004430:	3728      	adds	r7, #40	@ 0x28
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	20000310 	.word	0x20000310
 800443c:	20000348 	.word	0x20000348
 8004440:	2000033c 	.word	0x2000033c
 8004444:	20000374 	.word	0x20000374
 8004448:	20000378 	.word	0x20000378

0800444c <set_bmi160_Ares>:

void set_bmi160_Ares()
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
	switch (BMI160_Asens)
 8004450:	4b12      	ldr	r3, [pc, #72]	@ (800449c <set_bmi160_Ares+0x50>)
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	3b01      	subs	r3, #1
 8004456:	2b03      	cmp	r3, #3
 8004458:	d81a      	bhi.n	8004490 <set_bmi160_Ares+0x44>
 800445a:	a201      	add	r2, pc, #4	@ (adr r2, 8004460 <set_bmi160_Ares+0x14>)
 800445c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004460:	08004471 	.word	0x08004471
 8004464:	08004479 	.word	0x08004479
 8004468:	08004481 	.word	0x08004481
 800446c:	08004489 	.word	0x08004489
	{
		case AFS_2G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_2G;
 8004470:	4b0b      	ldr	r3, [pc, #44]	@ (80044a0 <set_bmi160_Ares+0x54>)
 8004472:	2203      	movs	r2, #3
 8004474:	701a      	strb	r2, [r3, #0]
			break;
 8004476:	e00b      	b.n	8004490 <set_bmi160_Ares+0x44>
		case AFS_4G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_4G;
 8004478:	4b09      	ldr	r3, [pc, #36]	@ (80044a0 <set_bmi160_Ares+0x54>)
 800447a:	2205      	movs	r2, #5
 800447c:	701a      	strb	r2, [r3, #0]
			break;
 800447e:	e007      	b.n	8004490 <set_bmi160_Ares+0x44>
		case AFS_8G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_8G;
 8004480:	4b07      	ldr	r3, [pc, #28]	@ (80044a0 <set_bmi160_Ares+0x54>)
 8004482:	2208      	movs	r2, #8
 8004484:	701a      	strb	r2, [r3, #0]
			break;
 8004486:	e003      	b.n	8004490 <set_bmi160_Ares+0x44>
		case AFS_16G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_16G;
 8004488:	4b05      	ldr	r3, [pc, #20]	@ (80044a0 <set_bmi160_Ares+0x54>)
 800448a:	220c      	movs	r2, #12
 800448c:	701a      	strb	r2, [r3, #0]
			break;
 800448e:	bf00      	nop
	}
}
 8004490:	bf00      	nop
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	20000008 	.word	0x20000008
 80044a0:	20000372 	.word	0x20000372

080044a4 <set_bmi160_Gres>:

void set_bmi160_Gres()
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
	switch (BMI160_Gsens)
 80044a8:	4b15      	ldr	r3, [pc, #84]	@ (8004500 <set_bmi160_Gres+0x5c>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	3b01      	subs	r3, #1
 80044ae:	2b04      	cmp	r3, #4
 80044b0:	d820      	bhi.n	80044f4 <set_bmi160_Gres+0x50>
 80044b2:	a201      	add	r2, pc, #4	@ (adr r2, 80044b8 <set_bmi160_Gres+0x14>)
 80044b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b8:	080044cd 	.word	0x080044cd
 80044bc:	080044d5 	.word	0x080044d5
 80044c0:	080044dd 	.word	0x080044dd
 80044c4:	080044e5 	.word	0x080044e5
 80044c8:	080044ed 	.word	0x080044ed
	{
		case GFS_125DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_125_DPS;
 80044cc:	4b0d      	ldr	r3, [pc, #52]	@ (8004504 <set_bmi160_Gres+0x60>)
 80044ce:	2204      	movs	r2, #4
 80044d0:	701a      	strb	r2, [r3, #0]
			break;
 80044d2:	e00f      	b.n	80044f4 <set_bmi160_Gres+0x50>
		case GFS_250DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_250_DPS;
 80044d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004504 <set_bmi160_Gres+0x60>)
 80044d6:	2203      	movs	r2, #3
 80044d8:	701a      	strb	r2, [r3, #0]
			break;
 80044da:	e00b      	b.n	80044f4 <set_bmi160_Gres+0x50>
		case GFS_500DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_500_DPS;
 80044dc:	4b09      	ldr	r3, [pc, #36]	@ (8004504 <set_bmi160_Gres+0x60>)
 80044de:	2202      	movs	r2, #2
 80044e0:	701a      	strb	r2, [r3, #0]
			break;
 80044e2:	e007      	b.n	80044f4 <set_bmi160_Gres+0x50>
		case GFS_1000DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_1000_DPS;
 80044e4:	4b07      	ldr	r3, [pc, #28]	@ (8004504 <set_bmi160_Gres+0x60>)
 80044e6:	2201      	movs	r2, #1
 80044e8:	701a      	strb	r2, [r3, #0]
			break;
 80044ea:	e003      	b.n	80044f4 <set_bmi160_Gres+0x50>
		case GFS_2000DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_2000_DPS;
 80044ec:	4b05      	ldr	r3, [pc, #20]	@ (8004504 <set_bmi160_Gres+0x60>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	701a      	strb	r2, [r3, #0]
			break;
 80044f2:	bf00      	nop
	}
}
 80044f4:	bf00      	nop
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	20000009 	.word	0x20000009
 8004504:	20000373 	.word	0x20000373

08004508 <get_bmi160_Ares>:

void get_bmi160_Ares()
{
 8004508:	b480      	push	{r7}
 800450a:	af00      	add	r7, sp, #0
	switch (BMI160_Ascale)
 800450c:	4b17      	ldr	r3, [pc, #92]	@ (800456c <get_bmi160_Ares+0x64>)
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	2b04      	cmp	r3, #4
 8004512:	d826      	bhi.n	8004562 <get_bmi160_Ares+0x5a>
 8004514:	a201      	add	r2, pc, #4	@ (adr r2, 800451c <get_bmi160_Ares+0x14>)
 8004516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451a:	bf00      	nop
 800451c:	08004531 	.word	0x08004531
 8004520:	0800453b 	.word	0x0800453b
 8004524:	08004545 	.word	0x08004545
 8004528:	0800454f 	.word	0x0800454f
 800452c:	08004559 	.word	0x08004559
	{
		case AFS_RAW:
			bmi160_aRes = 1.0f;
 8004530:	4b0f      	ldr	r3, [pc, #60]	@ (8004570 <get_bmi160_Ares+0x68>)
 8004532:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004536:	601a      	str	r2, [r3, #0]
			break;
 8004538:	e013      	b.n	8004562 <get_bmi160_Ares+0x5a>
		case AFS_2G:
			bmi160_aRes = 16384.0f;
 800453a:	4b0d      	ldr	r3, [pc, #52]	@ (8004570 <get_bmi160_Ares+0x68>)
 800453c:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8004540:	601a      	str	r2, [r3, #0]
			break;
 8004542:	e00e      	b.n	8004562 <get_bmi160_Ares+0x5a>
		case AFS_4G:
			bmi160_aRes = 8192.0f;
 8004544:	4b0a      	ldr	r3, [pc, #40]	@ (8004570 <get_bmi160_Ares+0x68>)
 8004546:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 800454a:	601a      	str	r2, [r3, #0]
			break;
 800454c:	e009      	b.n	8004562 <get_bmi160_Ares+0x5a>
		case AFS_8G:
			bmi160_aRes = 4096.0f;
 800454e:	4b08      	ldr	r3, [pc, #32]	@ (8004570 <get_bmi160_Ares+0x68>)
 8004550:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 8004554:	601a      	str	r2, [r3, #0]
			break;
 8004556:	e004      	b.n	8004562 <get_bmi160_Ares+0x5a>
		case AFS_16G:
			bmi160_aRes = 2048.0f;
 8004558:	4b05      	ldr	r3, [pc, #20]	@ (8004570 <get_bmi160_Ares+0x68>)
 800455a:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 800455e:	601a      	str	r2, [r3, #0]
			break;
 8004560:	bf00      	nop
	}
}
 8004562:	bf00      	nop
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	2000000a 	.word	0x2000000a
 8004570:	20000374 	.word	0x20000374

08004574 <get_bmi160_Gres>:

void get_bmi160_Gres()
{
 8004574:	b480      	push	{r7}
 8004576:	af00      	add	r7, sp, #0
	switch (BMI160_Gscale)
 8004578:	4b18      	ldr	r3, [pc, #96]	@ (80045dc <get_bmi160_Gres+0x68>)
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	2b05      	cmp	r3, #5
 800457e:	d828      	bhi.n	80045d2 <get_bmi160_Gres+0x5e>
 8004580:	a201      	add	r2, pc, #4	@ (adr r2, 8004588 <get_bmi160_Gres+0x14>)
 8004582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004586:	bf00      	nop
 8004588:	080045a1 	.word	0x080045a1
 800458c:	080045ab 	.word	0x080045ab
 8004590:	080045b3 	.word	0x080045b3
 8004594:	080045bb 	.word	0x080045bb
 8004598:	080045c3 	.word	0x080045c3
 800459c:	080045cb 	.word	0x080045cb
	{
		case GFS_RAW:
			bmi160_aRes = 1.0f;
 80045a0:	4b0f      	ldr	r3, [pc, #60]	@ (80045e0 <get_bmi160_Gres+0x6c>)
 80045a2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80045a6:	601a      	str	r2, [r3, #0]
			break;
 80045a8:	e013      	b.n	80045d2 <get_bmi160_Gres+0x5e>
		case GFS_125DPS:
			bmi160_gRes = 262.4f;
 80045aa:	4b0e      	ldr	r3, [pc, #56]	@ (80045e4 <get_bmi160_Gres+0x70>)
 80045ac:	4a0e      	ldr	r2, [pc, #56]	@ (80045e8 <get_bmi160_Gres+0x74>)
 80045ae:	601a      	str	r2, [r3, #0]
			break;
 80045b0:	e00f      	b.n	80045d2 <get_bmi160_Gres+0x5e>
		case GFS_250DPS:
			bmi160_gRes = 131.2f;
 80045b2:	4b0c      	ldr	r3, [pc, #48]	@ (80045e4 <get_bmi160_Gres+0x70>)
 80045b4:	4a0d      	ldr	r2, [pc, #52]	@ (80045ec <get_bmi160_Gres+0x78>)
 80045b6:	601a      	str	r2, [r3, #0]
			break;
 80045b8:	e00b      	b.n	80045d2 <get_bmi160_Gres+0x5e>
		case GFS_500DPS:
			bmi160_gRes = 65.6f;
 80045ba:	4b0a      	ldr	r3, [pc, #40]	@ (80045e4 <get_bmi160_Gres+0x70>)
 80045bc:	4a0c      	ldr	r2, [pc, #48]	@ (80045f0 <get_bmi160_Gres+0x7c>)
 80045be:	601a      	str	r2, [r3, #0]
			break;
 80045c0:	e007      	b.n	80045d2 <get_bmi160_Gres+0x5e>
		case GFS_1000DPS:
			bmi160_gRes = 32.8f;
 80045c2:	4b08      	ldr	r3, [pc, #32]	@ (80045e4 <get_bmi160_Gres+0x70>)
 80045c4:	4a0b      	ldr	r2, [pc, #44]	@ (80045f4 <get_bmi160_Gres+0x80>)
 80045c6:	601a      	str	r2, [r3, #0]
			break;
 80045c8:	e003      	b.n	80045d2 <get_bmi160_Gres+0x5e>
		case GFS_2000DPS:
			bmi160_gRes = 16.4f;
 80045ca:	4b06      	ldr	r3, [pc, #24]	@ (80045e4 <get_bmi160_Gres+0x70>)
 80045cc:	4a0a      	ldr	r2, [pc, #40]	@ (80045f8 <get_bmi160_Gres+0x84>)
 80045ce:	601a      	str	r2, [r3, #0]
			break;
 80045d0:	bf00      	nop
	}
}
 80045d2:	bf00      	nop
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	2000000b 	.word	0x2000000b
 80045e0:	20000374 	.word	0x20000374
 80045e4:	20000378 	.word	0x20000378
 80045e8:	43833333 	.word	0x43833333
 80045ec:	43033333 	.word	0x43033333
 80045f0:	42833333 	.word	0x42833333
 80045f4:	42033333 	.word	0x42033333
 80045f8:	41833333 	.word	0x41833333

080045fc <SensorAPI_I2Cx_Read>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af02      	add	r7, sp, #8
 8004602:	603a      	str	r2, [r7, #0]
 8004604:	461a      	mov	r2, r3
 8004606:	4603      	mov	r3, r0
 8004608:	71fb      	strb	r3, [r7, #7]
 800460a:	460b      	mov	r3, r1
 800460c:	71bb      	strb	r3, [r7, #6]
 800460e:	4613      	mov	r3, r2
 8004610:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, &reg_addr, 1, I2CTIMEOUT);
 8004612:	1dba      	adds	r2, r7, #6
 8004614:	2364      	movs	r3, #100	@ 0x64
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	2301      	movs	r3, #1
 800461a:	21d2      	movs	r1, #210	@ 0xd2
 800461c:	4807      	ldr	r0, [pc, #28]	@ (800463c <SensorAPI_I2Cx_Read+0x40>)
 800461e:	f003 f98f 	bl	8007940 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&I2C_HANDLE, BMI160_ADDR, data, len, I2CTIMEOUT);
 8004622:	88bb      	ldrh	r3, [r7, #4]
 8004624:	2264      	movs	r2, #100	@ 0x64
 8004626:	9200      	str	r2, [sp, #0]
 8004628:	683a      	ldr	r2, [r7, #0]
 800462a:	21d2      	movs	r1, #210	@ 0xd2
 800462c:	4803      	ldr	r0, [pc, #12]	@ (800463c <SensorAPI_I2Cx_Read+0x40>)
 800462e:	f003 fa9f 	bl	8007b70 <HAL_I2C_Master_Receive>
	return 0;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	2000066c 	.word	0x2000066c

08004640 <SensorAPI_I2Cx_Write>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af02      	add	r7, sp, #8
 8004646:	603a      	str	r2, [r7, #0]
 8004648:	461a      	mov	r2, r3
 800464a:	4603      	mov	r3, r0
 800464c:	71fb      	strb	r3, [r7, #7]
 800464e:	460b      	mov	r3, r1
 8004650:	71bb      	strb	r3, [r7, #6]
 8004652:	4613      	mov	r3, r2
 8004654:	80bb      	strh	r3, [r7, #4]
	GTXBuffer[0] = reg_addr;
 8004656:	4a0c      	ldr	r2, [pc, #48]	@ (8004688 <SensorAPI_I2Cx_Write+0x48>)
 8004658:	79bb      	ldrb	r3, [r7, #6]
 800465a:	7013      	strb	r3, [r2, #0]
	memcpy(&GTXBuffer[1], data, len);
 800465c:	88bb      	ldrh	r3, [r7, #4]
 800465e:	461a      	mov	r2, r3
 8004660:	6839      	ldr	r1, [r7, #0]
 8004662:	480a      	ldr	r0, [pc, #40]	@ (800468c <SensorAPI_I2Cx_Write+0x4c>)
 8004664:	f00e ff4f 	bl	8013506 <memcpy>

	HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, GTXBuffer, len+1, I2CTIMEOUT);
 8004668:	88bb      	ldrh	r3, [r7, #4]
 800466a:	3301      	adds	r3, #1
 800466c:	b29b      	uxth	r3, r3
 800466e:	2264      	movs	r2, #100	@ 0x64
 8004670:	9200      	str	r2, [sp, #0]
 8004672:	4a05      	ldr	r2, [pc, #20]	@ (8004688 <SensorAPI_I2Cx_Write+0x48>)
 8004674:	21d2      	movs	r1, #210	@ 0xd2
 8004676:	4806      	ldr	r0, [pc, #24]	@ (8004690 <SensorAPI_I2Cx_Write+0x50>)
 8004678:	f003 f962 	bl	8007940 <HAL_I2C_Master_Transmit>
	return 0;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	2000037c 	.word	0x2000037c
 800468c:	2000037d 	.word	0x2000037d
 8004690:	2000066c 	.word	0x2000066c

08004694 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800469c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80046a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80046ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4013      	ands	r3, r2
 80046b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80046b8:	68fb      	ldr	r3, [r7, #12]
}
 80046ba:	bf00      	nop
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80046c6:	b480      	push	{r7}
 80046c8:	b085      	sub	sp, #20
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80046ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80046d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4313      	orrs	r3, r2
 80046dc:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80046de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4013      	ands	r3, r2
 80046e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80046ea:	68fb      	ldr	r3, [r7, #12]
}
 80046ec:	bf00      	nop
 80046ee:	3714      	adds	r7, #20
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2)
  {
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
	////this updates the X and Y axes of my joystick
	  for(uint8_t i = 0; i<hadc1.Init.NbrOfConversion; i++){
 8004700:	2300      	movs	r3, #0
 8004702:	73fb      	strb	r3, [r7, #15]
 8004704:	e00a      	b.n	800471c <HAL_TIM_PeriodElapsedCallback+0x24>
		  mic = (uint16_t) rawValues[0];
 8004706:	4b0c      	ldr	r3, [pc, #48]	@ (8004738 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8004708:	881a      	ldrh	r2, [r3, #0]
 800470a:	4b0c      	ldr	r3, [pc, #48]	@ (800473c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800470c:	801a      	strh	r2, [r3, #0]
		  mic2 = mic;
 800470e:	4b0b      	ldr	r3, [pc, #44]	@ (800473c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8004710:	881a      	ldrh	r2, [r3, #0]
 8004712:	4b0b      	ldr	r3, [pc, #44]	@ (8004740 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8004714:	801a      	strh	r2, [r3, #0]
	  for(uint8_t i = 0; i<hadc1.Init.NbrOfConversion; i++){
 8004716:	7bfb      	ldrb	r3, [r7, #15]
 8004718:	3301      	adds	r3, #1
 800471a:	73fb      	strb	r3, [r7, #15]
 800471c:	7bfa      	ldrb	r2, [r7, #15]
 800471e:	4b09      	ldr	r3, [pc, #36]	@ (8004744 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	429a      	cmp	r2, r3
 8004724:	d3ef      	bcc.n	8004706 <HAL_TIM_PeriodElapsedCallback+0xe>
	  }
	  flag = 1;
 8004726:	4b08      	ldr	r3, [pc, #32]	@ (8004748 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8004728:	2201      	movs	r2, #1
 800472a:	701a      	strb	r2, [r3, #0]
	  sprintf(msg, "X axis: %hu, Y axis: %hu \r\n", Xaxis, Yaxis);
	  status = CDC_Transmit_FS(msg, strlen((char*)msg));
	  if (status == USBD_OK) {
	  	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin); // Example: Toggle LED on success
	  }*/
  }
 800472c:	bf00      	nop
 800472e:	3714      	adds	r7, #20
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr
 8004738:	20000710 	.word	0x20000710
 800473c:	2000070c 	.word	0x2000070c
 8004740:	2000070e 	.word	0x2000070e
 8004744:	200005a8 	.word	0x200005a8
 8004748:	20000714 	.word	0x20000714
 800474c:	00000000 	.word	0x00000000

08004750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004750:	b590      	push	{r4, r7, lr}
 8004752:	b085      	sub	sp, #20
 8004754:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004756:	f000 ff5b 	bl	8005610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800475a:	f000 f8ef 	bl	800493c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800475e:	f000 f951 	bl	8004a04 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004762:	f000 fa95 	bl	8004c90 <MX_GPIO_Init>
  MX_DMA_Init();
 8004766:	f000 fa81 	bl	8004c6c <MX_DMA_Init>
  MX_ADC1_Init();
 800476a:	f000 f97d 	bl	8004a68 <MX_ADC1_Init>
  MX_TIM2_Init();
 800476e:	f000 fa2f 	bl	8004bd0 <MX_TIM2_Init>
  MX_USB_Device_Init();
 8004772:	f00d fb8f 	bl	8011e94 <MX_USB_Device_Init>
  MX_I2C1_Init();
 8004776:	f000 f9eb 	bl	8004b50 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ////This begins the process of storing our ADC readings into the DMA. The DMA can be thought of a temporary storage location.
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) rawValues, 2);
 800477a:	2202      	movs	r2, #2
 800477c:	4964      	ldr	r1, [pc, #400]	@ (8004910 <main+0x1c0>)
 800477e:	4865      	ldr	r0, [pc, #404]	@ (8004914 <main+0x1c4>)
 8004780:	f001 fb24 	bl	8005dcc <HAL_ADC_Start_DMA>
    ////This begins our timer 2
  HAL_TIM_Base_Start_IT(&htim2);
 8004784:	4864      	ldr	r0, [pc, #400]	@ (8004918 <main+0x1c8>)
 8004786:	f007 ff65 	bl	800c654 <HAL_TIM_Base_Start_IT>

  while (BMI160_init(imu_t) == 1); // waits for IMU to be ready
 800478a:	bf00      	nop
 800478c:	4b63      	ldr	r3, [pc, #396]	@ (800491c <main+0x1cc>)
 800478e:	466c      	mov	r4, sp
 8004790:	f103 0210 	add.w	r2, r3, #16
 8004794:	ca07      	ldmia	r2, {r0, r1, r2}
 8004796:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800479a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800479c:	f7ff fce0 	bl	8004160 <BMI160_init>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d0f2      	beq.n	800478c <main+0x3c>
  }

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 80047a6:	2000      	movs	r0, #0
 80047a8:	f000 fdc0 	bl	800532c <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80047ac:	2001      	movs	r0, #1
 80047ae:	f000 fdbd 	bl	800532c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80047b2:	2002      	movs	r0, #2
 80047b4:	f000 fdba 	bl	800532c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 80047b8:	2101      	movs	r1, #1
 80047ba:	2000      	movs	r0, #0
 80047bc:	f000 fe0a 	bl	80053d4 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 80047c0:	2101      	movs	r1, #1
 80047c2:	2001      	movs	r0, #1
 80047c4:	f000 fe06 	bl	80053d4 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 80047c8:	2101      	movs	r1, #1
 80047ca:	2002      	movs	r0, #2
 80047cc:	f000 fe02 	bl	80053d4 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80047d0:	4b53      	ldr	r3, [pc, #332]	@ (8004920 <main+0x1d0>)
 80047d2:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80047d6:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80047d8:	4b51      	ldr	r3, [pc, #324]	@ (8004920 <main+0x1d0>)
 80047da:	2200      	movs	r2, #0
 80047dc:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80047de:	4b50      	ldr	r3, [pc, #320]	@ (8004920 <main+0x1d0>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80047e4:	4b4e      	ldr	r3, [pc, #312]	@ (8004920 <main+0x1d0>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80047ea:	4b4d      	ldr	r3, [pc, #308]	@ (8004920 <main+0x1d0>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80047f0:	494b      	ldr	r1, [pc, #300]	@ (8004920 <main+0x1d0>)
 80047f2:	2000      	movs	r0, #0
 80047f4:	f000 fe5e 	bl	80054b4 <BSP_COM_Init>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <main+0xb2>
  {
    Error_Handler();
 80047fe:	f000 fa73 	bl	8004ce8 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /*                                                                          ********************************************************************* */
  while (1)
  {
	  bmi160ReadAccelGyro(&imu_t);
 8004802:	4846      	ldr	r0, [pc, #280]	@ (800491c <main+0x1cc>)
 8004804:	f7ff fd9e 	bl	8004344 <bmi160ReadAccelGyro>

	  if (flag==1){
 8004808:	4b46      	ldr	r3, [pc, #280]	@ (8004924 <main+0x1d4>)
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d1f8      	bne.n	8004802 <main+0xb2>
		  a_f32[2] = 3;

		  g_f32[0] = 4;
		  g_f32[1] = 5;
		  g_f32[2] = 6;*/
		  a_f32[0] = imu_t.BMI160_Ax_f32*g;
 8004810:	4b42      	ldr	r3, [pc, #264]	@ (800491c <main+0x1cc>)
 8004812:	ed93 7a00 	vldr	s14, [r3]
 8004816:	4b44      	ldr	r3, [pc, #272]	@ (8004928 <main+0x1d8>)
 8004818:	edd3 7a00 	vldr	s15, [r3]
 800481c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004820:	4b42      	ldr	r3, [pc, #264]	@ (800492c <main+0x1dc>)
 8004822:	edc3 7a00 	vstr	s15, [r3]
		  a_f32[1] = -imu_t.BMI160_Ay_f32*g;
 8004826:	4b3d      	ldr	r3, [pc, #244]	@ (800491c <main+0x1cc>)
 8004828:	edd3 7a01 	vldr	s15, [r3, #4]
 800482c:	eeb1 7a67 	vneg.f32	s14, s15
 8004830:	4b3d      	ldr	r3, [pc, #244]	@ (8004928 <main+0x1d8>)
 8004832:	edd3 7a00 	vldr	s15, [r3]
 8004836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800483a:	4b3c      	ldr	r3, [pc, #240]	@ (800492c <main+0x1dc>)
 800483c:	edc3 7a01 	vstr	s15, [r3, #4]
		  a_f32[2] = -imu_t.BMI160_Az_f32*g;
 8004840:	4b36      	ldr	r3, [pc, #216]	@ (800491c <main+0x1cc>)
 8004842:	edd3 7a02 	vldr	s15, [r3, #8]
 8004846:	eeb1 7a67 	vneg.f32	s14, s15
 800484a:	4b37      	ldr	r3, [pc, #220]	@ (8004928 <main+0x1d8>)
 800484c:	edd3 7a00 	vldr	s15, [r3]
 8004850:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004854:	4b35      	ldr	r3, [pc, #212]	@ (800492c <main+0x1dc>)
 8004856:	edc3 7a02 	vstr	s15, [r3, #8]

		  g_f32[0] = imu_t.BMI160_Gx_f32*0.0174533;
 800485a:	4b30      	ldr	r3, [pc, #192]	@ (800491c <main+0x1cc>)
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	4618      	mov	r0, r3
 8004860:	f7fb fe4a 	bl	80004f8 <__aeabi_f2d>
 8004864:	a328      	add	r3, pc, #160	@ (adr r3, 8004908 <main+0x1b8>)
 8004866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486a:	f7fb fe9d 	bl	80005a8 <__aeabi_dmul>
 800486e:	4602      	mov	r2, r0
 8004870:	460b      	mov	r3, r1
 8004872:	4610      	mov	r0, r2
 8004874:	4619      	mov	r1, r3
 8004876:	f7fc f96f 	bl	8000b58 <__aeabi_d2f>
 800487a:	4603      	mov	r3, r0
 800487c:	4a2c      	ldr	r2, [pc, #176]	@ (8004930 <main+0x1e0>)
 800487e:	6013      	str	r3, [r2, #0]
		  g_f32[1] = -imu_t.BMI160_Gy_f32*0.0174533;
 8004880:	4b26      	ldr	r3, [pc, #152]	@ (800491c <main+0x1cc>)
 8004882:	edd3 7a04 	vldr	s15, [r3, #16]
 8004886:	eef1 7a67 	vneg.f32	s15, s15
 800488a:	ee17 3a90 	vmov	r3, s15
 800488e:	4618      	mov	r0, r3
 8004890:	f7fb fe32 	bl	80004f8 <__aeabi_f2d>
 8004894:	a31c      	add	r3, pc, #112	@ (adr r3, 8004908 <main+0x1b8>)
 8004896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489a:	f7fb fe85 	bl	80005a8 <__aeabi_dmul>
 800489e:	4602      	mov	r2, r0
 80048a0:	460b      	mov	r3, r1
 80048a2:	4610      	mov	r0, r2
 80048a4:	4619      	mov	r1, r3
 80048a6:	f7fc f957 	bl	8000b58 <__aeabi_d2f>
 80048aa:	4603      	mov	r3, r0
 80048ac:	4a20      	ldr	r2, [pc, #128]	@ (8004930 <main+0x1e0>)
 80048ae:	6053      	str	r3, [r2, #4]
		  g_f32[2] = -imu_t.BMI160_Gz_f32*0.0174533;
 80048b0:	4b1a      	ldr	r3, [pc, #104]	@ (800491c <main+0x1cc>)
 80048b2:	edd3 7a05 	vldr	s15, [r3, #20]
 80048b6:	eef1 7a67 	vneg.f32	s15, s15
 80048ba:	ee17 3a90 	vmov	r3, s15
 80048be:	4618      	mov	r0, r3
 80048c0:	f7fb fe1a 	bl	80004f8 <__aeabi_f2d>
 80048c4:	a310      	add	r3, pc, #64	@ (adr r3, 8004908 <main+0x1b8>)
 80048c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ca:	f7fb fe6d 	bl	80005a8 <__aeabi_dmul>
 80048ce:	4602      	mov	r2, r0
 80048d0:	460b      	mov	r3, r1
 80048d2:	4610      	mov	r0, r2
 80048d4:	4619      	mov	r1, r3
 80048d6:	f7fc f93f 	bl	8000b58 <__aeabi_d2f>
 80048da:	4603      	mov	r3, r0
 80048dc:	4a14      	ldr	r2, [pc, #80]	@ (8004930 <main+0x1e0>)
 80048de:	6093      	str	r3, [r2, #8]

		  prepare_data_packet_IMU(g_f32,a_f32,USB_buffer,&packet_length);
 80048e0:	4b14      	ldr	r3, [pc, #80]	@ (8004934 <main+0x1e4>)
 80048e2:	4a15      	ldr	r2, [pc, #84]	@ (8004938 <main+0x1e8>)
 80048e4:	4911      	ldr	r1, [pc, #68]	@ (800492c <main+0x1dc>)
 80048e6:	4812      	ldr	r0, [pc, #72]	@ (8004930 <main+0x1e0>)
 80048e8:	f000 f9df 	bl	8004caa <prepare_data_packet_IMU>
		  CDC_Transmit_FS(USB_buffer, packet_length);
 80048ec:	4b11      	ldr	r3, [pc, #68]	@ (8004934 <main+0x1e4>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	4619      	mov	r1, r3
 80048f4:	4810      	ldr	r0, [pc, #64]	@ (8004938 <main+0x1e8>)
 80048f6:	f00d fb8b 	bl	8012010 <CDC_Transmit_FS>
		  BSP_LED_Toggle(LED_GREEN);
 80048fa:	2001      	movs	r0, #1
 80048fc:	f000 fd50 	bl	80053a0 <BSP_LED_Toggle>
		  //HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
		  //snprintf(msg, sizeof(msg), "a: %.2f, g: %.2f", a_f32[0], g_f32[0]);
		  //CDC_Transmit_FS((uint8_t *)msg, strlen(msg));

		  flag = 0;
 8004900:	4b08      	ldr	r3, [pc, #32]	@ (8004924 <main+0x1d4>)
 8004902:	2200      	movs	r2, #0
 8004904:	701a      	strb	r2, [r3, #0]
	  bmi160ReadAccelGyro(&imu_t);
 8004906:	e77c      	b.n	8004802 <main+0xb2>
 8004908:	22d4405f 	.word	0x22d4405f
 800490c:	3f91df47 	.word	0x3f91df47
 8004910:	20000710 	.word	0x20000710
 8004914:	200005a8 	.word	0x200005a8
 8004918:	200006c0 	.word	0x200006c0
 800491c:	2000057c 	.word	0x2000057c
 8004920:	20000598 	.word	0x20000598
 8004924:	20000714 	.word	0x20000714
 8004928:	2000000c 	.word	0x2000000c
 800492c:	20000748 	.word	0x20000748
 8004930:	2000073c 	.word	0x2000073c
 8004934:	20000738 	.word	0x20000738
 8004938:	20000718 	.word	0x20000718

0800493c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b09a      	sub	sp, #104	@ 0x68
 8004940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004942:	f107 0320 	add.w	r3, r7, #32
 8004946:	2248      	movs	r2, #72	@ 0x48
 8004948:	2100      	movs	r1, #0
 800494a:	4618      	mov	r0, r3
 800494c:	f00e fd5b 	bl	8013406 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004950:	1d3b      	adds	r3, r7, #4
 8004952:	2200      	movs	r2, #0
 8004954:	601a      	str	r2, [r3, #0]
 8004956:	605a      	str	r2, [r3, #4]
 8004958:	609a      	str	r2, [r3, #8]
 800495a:	60da      	str	r2, [r3, #12]
 800495c:	611a      	str	r2, [r3, #16]
 800495e:	615a      	str	r2, [r3, #20]
 8004960:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004962:	4b27      	ldr	r3, [pc, #156]	@ (8004a00 <SystemClock_Config+0xc4>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800496a:	4a25      	ldr	r2, [pc, #148]	@ (8004a00 <SystemClock_Config+0xc4>)
 800496c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004970:	6013      	str	r3, [r2, #0]
 8004972:	4b23      	ldr	r3, [pc, #140]	@ (8004a00 <SystemClock_Config+0xc4>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800497a:	603b      	str	r3, [r7, #0]
 800497c:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800497e:	2303      	movs	r3, #3
 8004980:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004982:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004986:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004988:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800498c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800498e:	2340      	movs	r3, #64	@ 0x40
 8004990:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004992:	2302      	movs	r3, #2
 8004994:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004996:	2303      	movs	r3, #3
 8004998:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800499a:	2310      	movs	r3, #16
 800499c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 800499e:	2308      	movs	r3, #8
 80049a0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80049a2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80049a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80049a8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80049ac:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80049ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80049b2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80049b4:	f107 0320 	add.w	r3, r7, #32
 80049b8:	4618      	mov	r0, r3
 80049ba:	f006 fbbb 	bl	800b134 <HAL_RCC_OscConfig>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80049c4:	f000 f990 	bl	8004ce8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80049c8:	236f      	movs	r3, #111	@ 0x6f
 80049ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80049cc:	2303      	movs	r3, #3
 80049ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80049d0:	2300      	movs	r3, #0
 80049d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80049d4:	2300      	movs	r3, #0
 80049d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80049d8:	2300      	movs	r3, #0
 80049da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80049dc:	2380      	movs	r3, #128	@ 0x80
 80049de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80049e0:	2300      	movs	r3, #0
 80049e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80049e4:	1d3b      	adds	r3, r7, #4
 80049e6:	2103      	movs	r1, #3
 80049e8:	4618      	mov	r0, r3
 80049ea:	f006 ff17 	bl	800b81c <HAL_RCC_ClockConfig>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d001      	beq.n	80049f8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80049f4:	f000 f978 	bl	8004ce8 <Error_Handler>
  }
}
 80049f8:	bf00      	nop
 80049fa:	3768      	adds	r7, #104	@ 0x68
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	58000400 	.word	0x58000400

08004a04 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b094      	sub	sp, #80	@ 0x50
 8004a08:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004a0a:	463b      	mov	r3, r7
 8004a0c:	2250      	movs	r2, #80	@ 0x50
 8004a0e:	2100      	movs	r1, #0
 8004a10:	4618      	mov	r0, r3
 8004a12:	f00e fcf8 	bl	8013406 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 8004a16:	f44f 5314 	mov.w	r3, #9472	@ 0x2500
 8004a1a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8004a1c:	2306      	movs	r3, #6
 8004a1e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8004a20:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004a24:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8004a26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a2a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8004a2c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004a30:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8004a32:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 8004a36:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8004a38:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004a3c:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8004a3e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8004a44:	2300      	movs	r3, #0
 8004a46:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004a4c:	463b      	mov	r3, r7
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f007 fb21 	bl	800c096 <HAL_RCCEx_PeriphCLKConfig>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8004a5a:	f000 f945 	bl	8004ce8 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8004a5e:	bf00      	nop
 8004a60:	3750      	adds	r7, #80	@ 0x50
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
	...

08004a68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004a6e:	463b      	mov	r3, r7
 8004a70:	2200      	movs	r2, #0
 8004a72:	601a      	str	r2, [r3, #0]
 8004a74:	605a      	str	r2, [r3, #4]
 8004a76:	609a      	str	r2, [r3, #8]
 8004a78:	60da      	str	r2, [r3, #12]
 8004a7a:	611a      	str	r2, [r3, #16]
 8004a7c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8004a7e:	4b30      	ldr	r3, [pc, #192]	@ (8004b40 <MX_ADC1_Init+0xd8>)
 8004a80:	4a30      	ldr	r2, [pc, #192]	@ (8004b44 <MX_ADC1_Init+0xdc>)
 8004a82:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8004a84:	4b2e      	ldr	r3, [pc, #184]	@ (8004b40 <MX_ADC1_Init+0xd8>)
 8004a86:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004a8a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004a8c:	4b2c      	ldr	r3, [pc, #176]	@ (8004b40 <MX_ADC1_Init+0xd8>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004a92:	4b2b      	ldr	r3, [pc, #172]	@ (8004b40 <MX_ADC1_Init+0xd8>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004a98:	4b29      	ldr	r3, [pc, #164]	@ (8004b40 <MX_ADC1_Init+0xd8>)
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004a9e:	4b28      	ldr	r3, [pc, #160]	@ (8004b40 <MX_ADC1_Init+0xd8>)
 8004aa0:	2204      	movs	r2, #4
 8004aa2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004aa4:	4b26      	ldr	r3, [pc, #152]	@ (8004b40 <MX_ADC1_Init+0xd8>)
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004aaa:	4b25      	ldr	r3, [pc, #148]	@ (8004b40 <MX_ADC1_Init+0xd8>)
 8004aac:	2201      	movs	r2, #1
 8004aae:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8004ab0:	4b23      	ldr	r3, [pc, #140]	@ (8004b40 <MX_ADC1_Init+0xd8>)
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004ab6:	4b22      	ldr	r3, [pc, #136]	@ (8004b40 <MX_ADC1_Init+0xd8>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004abe:	4b20      	ldr	r3, [pc, #128]	@ (8004b40 <MX_ADC1_Init+0xd8>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004ac4:	4b1e      	ldr	r3, [pc, #120]	@ (8004b40 <MX_ADC1_Init+0xd8>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004aca:	4b1d      	ldr	r3, [pc, #116]	@ (8004b40 <MX_ADC1_Init+0xd8>)
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004ad2:	4b1b      	ldr	r3, [pc, #108]	@ (8004b40 <MX_ADC1_Init+0xd8>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8004ad8:	4b19      	ldr	r3, [pc, #100]	@ (8004b40 <MX_ADC1_Init+0xd8>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004ae0:	4817      	ldr	r0, [pc, #92]	@ (8004b40 <MX_ADC1_Init+0xd8>)
 8004ae2:	f001 f827 	bl	8005b34 <HAL_ADC_Init>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d001      	beq.n	8004af0 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8004aec:	f000 f8fc 	bl	8004ce8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004af0:	4b15      	ldr	r3, [pc, #84]	@ (8004b48 <MX_ADC1_Init+0xe0>)
 8004af2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004af4:	2306      	movs	r3, #6
 8004af6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8004af8:	2306      	movs	r3, #6
 8004afa:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004afc:	237f      	movs	r3, #127	@ 0x7f
 8004afe:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004b00:	2304      	movs	r3, #4
 8004b02:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8004b04:	2300      	movs	r3, #0
 8004b06:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004b08:	463b      	mov	r3, r7
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	480c      	ldr	r0, [pc, #48]	@ (8004b40 <MX_ADC1_Init+0xd8>)
 8004b0e:	f001 fbbf 	bl	8006290 <HAL_ADC_ConfigChannel>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8004b18:	f000 f8e6 	bl	8004ce8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b4c <MX_ADC1_Init+0xe4>)
 8004b1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004b20:	230c      	movs	r3, #12
 8004b22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004b24:	463b      	mov	r3, r7
 8004b26:	4619      	mov	r1, r3
 8004b28:	4805      	ldr	r0, [pc, #20]	@ (8004b40 <MX_ADC1_Init+0xd8>)
 8004b2a:	f001 fbb1 	bl	8006290 <HAL_ADC_ConfigChannel>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8004b34:	f000 f8d8 	bl	8004ce8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004b38:	bf00      	nop
 8004b3a:	3718      	adds	r7, #24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	200005a8 	.word	0x200005a8
 8004b44:	50040000 	.word	0x50040000
 8004b48:	04300002 	.word	0x04300002
 8004b4c:	08600004 	.word	0x08600004

08004b50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004b54:	4b1b      	ldr	r3, [pc, #108]	@ (8004bc4 <MX_I2C1_Init+0x74>)
 8004b56:	4a1c      	ldr	r2, [pc, #112]	@ (8004bc8 <MX_I2C1_Init+0x78>)
 8004b58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 8004b5a:	4b1a      	ldr	r3, [pc, #104]	@ (8004bc4 <MX_I2C1_Init+0x74>)
 8004b5c:	4a1b      	ldr	r2, [pc, #108]	@ (8004bcc <MX_I2C1_Init+0x7c>)
 8004b5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004b60:	4b18      	ldr	r3, [pc, #96]	@ (8004bc4 <MX_I2C1_Init+0x74>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004b66:	4b17      	ldr	r3, [pc, #92]	@ (8004bc4 <MX_I2C1_Init+0x74>)
 8004b68:	2201      	movs	r2, #1
 8004b6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004b6c:	4b15      	ldr	r3, [pc, #84]	@ (8004bc4 <MX_I2C1_Init+0x74>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004b72:	4b14      	ldr	r3, [pc, #80]	@ (8004bc4 <MX_I2C1_Init+0x74>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004b78:	4b12      	ldr	r3, [pc, #72]	@ (8004bc4 <MX_I2C1_Init+0x74>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004b7e:	4b11      	ldr	r3, [pc, #68]	@ (8004bc4 <MX_I2C1_Init+0x74>)
 8004b80:	2200      	movs	r2, #0
 8004b82:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004b84:	4b0f      	ldr	r3, [pc, #60]	@ (8004bc4 <MX_I2C1_Init+0x74>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004b8a:	480e      	ldr	r0, [pc, #56]	@ (8004bc4 <MX_I2C1_Init+0x74>)
 8004b8c:	f002 fe3d 	bl	800780a <HAL_I2C_Init>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004b96:	f000 f8a7 	bl	8004ce8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	4809      	ldr	r0, [pc, #36]	@ (8004bc4 <MX_I2C1_Init+0x74>)
 8004b9e:	f004 f95b 	bl	8008e58 <HAL_I2CEx_ConfigAnalogFilter>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d001      	beq.n	8004bac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004ba8:	f000 f89e 	bl	8004ce8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004bac:	2100      	movs	r1, #0
 8004bae:	4805      	ldr	r0, [pc, #20]	@ (8004bc4 <MX_I2C1_Init+0x74>)
 8004bb0:	f004 f99d 	bl	8008eee <HAL_I2CEx_ConfigDigitalFilter>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004bba:	f000 f895 	bl	8004ce8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004bbe:	bf00      	nop
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	2000066c 	.word	0x2000066c
 8004bc8:	40005400 	.word	0x40005400
 8004bcc:	10b17db5 	.word	0x10b17db5

08004bd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b088      	sub	sp, #32
 8004bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004bd6:	f107 0310 	add.w	r3, r7, #16
 8004bda:	2200      	movs	r2, #0
 8004bdc:	601a      	str	r2, [r3, #0]
 8004bde:	605a      	str	r2, [r3, #4]
 8004be0:	609a      	str	r2, [r3, #8]
 8004be2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004be4:	1d3b      	adds	r3, r7, #4
 8004be6:	2200      	movs	r2, #0
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	605a      	str	r2, [r3, #4]
 8004bec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004bee:	4b1e      	ldr	r3, [pc, #120]	@ (8004c68 <MX_TIM2_Init+0x98>)
 8004bf0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004bf4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 8004bf6:	4b1c      	ldr	r3, [pc, #112]	@ (8004c68 <MX_TIM2_Init+0x98>)
 8004bf8:	220a      	movs	r2, #10
 8004bfa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8004c68 <MX_TIM2_Init+0x98>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64000-1;
 8004c02:	4b19      	ldr	r3, [pc, #100]	@ (8004c68 <MX_TIM2_Init+0x98>)
 8004c04:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8004c08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c0a:	4b17      	ldr	r3, [pc, #92]	@ (8004c68 <MX_TIM2_Init+0x98>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004c10:	4b15      	ldr	r3, [pc, #84]	@ (8004c68 <MX_TIM2_Init+0x98>)
 8004c12:	2280      	movs	r2, #128	@ 0x80
 8004c14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004c16:	4814      	ldr	r0, [pc, #80]	@ (8004c68 <MX_TIM2_Init+0x98>)
 8004c18:	f007 fcc4 	bl	800c5a4 <HAL_TIM_Base_Init>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004c22:	f000 f861 	bl	8004ce8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004c2c:	f107 0310 	add.w	r3, r7, #16
 8004c30:	4619      	mov	r1, r3
 8004c32:	480d      	ldr	r0, [pc, #52]	@ (8004c68 <MX_TIM2_Init+0x98>)
 8004c34:	f007 fe63 	bl	800c8fe <HAL_TIM_ConfigClockSource>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004c3e:	f000 f853 	bl	8004ce8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004c42:	2320      	movs	r3, #32
 8004c44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c46:	2300      	movs	r3, #0
 8004c48:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004c4a:	1d3b      	adds	r3, r7, #4
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	4806      	ldr	r0, [pc, #24]	@ (8004c68 <MX_TIM2_Init+0x98>)
 8004c50:	f008 f852 	bl	800ccf8 <HAL_TIMEx_MasterConfigSynchronization>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004c5a:	f000 f845 	bl	8004ce8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004c5e:	bf00      	nop
 8004c60:	3720      	adds	r7, #32
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	200006c0 	.word	0x200006c0

08004c6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004c70:	2004      	movs	r0, #4
 8004c72:	f7ff fd0f 	bl	8004694 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004c76:	2001      	movs	r0, #1
 8004c78:	f7ff fd0c 	bl	8004694 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	2100      	movs	r1, #0
 8004c80:	200b      	movs	r0, #11
 8004c82:	f002 f8e6 	bl	8006e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004c86:	200b      	movs	r0, #11
 8004c88:	f002 f8fd 	bl	8006e86 <HAL_NVIC_EnableIRQ>

}
 8004c8c:	bf00      	nop
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c94:	2004      	movs	r0, #4
 8004c96:	f7ff fd16 	bl	80046c6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c9a:	2002      	movs	r0, #2
 8004c9c:	f7ff fd13 	bl	80046c6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ca0:	2001      	movs	r0, #1
 8004ca2:	f7ff fd10 	bl	80046c6 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004ca6:	bf00      	nop
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <prepare_data_packet_IMU>:
    buffer[1 + 2 * sizeof(float) * 3 + sizeof(uint16_t)] = (uint16_t)var2;*/

    // Set the total length of the packet
    *length = 1 + 2 * sizeof(float) * 3 + 2*sizeof(uint16_t);
}
void prepare_data_packet_IMU(float g_f32[3], float a_f32[3], uint8_t *buffer, size_t *length) {
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b084      	sub	sp, #16
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	60f8      	str	r0, [r7, #12]
 8004cb2:	60b9      	str	r1, [r7, #8]
 8004cb4:	607a      	str	r2, [r7, #4]
 8004cb6:	603b      	str	r3, [r7, #0]
    // Define the start byte
    buffer[0] = (uint8_t)-128;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2280      	movs	r2, #128	@ 0x80
 8004cbc:	701a      	strb	r2, [r3, #0]
    memcpy(&buffer[1], g_f32, sizeof(float) * 3);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	220c      	movs	r2, #12
 8004cc4:	68f9      	ldr	r1, [r7, #12]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f00e fc1d 	bl	8013506 <memcpy>
    memcpy(&buffer[1 + sizeof(float) * 3], a_f32, sizeof(float) * 3);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	330d      	adds	r3, #13
 8004cd0:	220c      	movs	r2, #12
 8004cd2:	68b9      	ldr	r1, [r7, #8]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f00e fc16 	bl	8013506 <memcpy>

    // Set the total length of the packet
    *length = 1 + 2 * sizeof(float) * 3;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	2219      	movs	r2, #25
 8004cde:	601a      	str	r2, [r3, #0]
}
 8004ce0:	bf00      	nop
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004cec:	b672      	cpsid	i
}
 8004cee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004cf0:	bf00      	nop
 8004cf2:	e7fd      	b.n	8004cf0 <Error_Handler+0x8>

08004cf4 <LL_AHB2_GRP1_EnableClock>:
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004cfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d00:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004d0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d10:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4013      	ands	r3, r2
 8004d16:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004d18:	68fb      	ldr	r3, [r7, #12]
}
 8004d1a:	bf00      	nop
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b085      	sub	sp, #20
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004d2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d32:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004d34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004d3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d42:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4013      	ands	r3, r2
 8004d48:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
}
 8004d4c:	bf00      	nop
 8004d4e:	3714      	adds	r7, #20
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d5c:	bf00      	nop
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
	...

08004d68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b088      	sub	sp, #32
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d70:	f107 030c 	add.w	r3, r7, #12
 8004d74:	2200      	movs	r2, #0
 8004d76:	601a      	str	r2, [r3, #0]
 8004d78:	605a      	str	r2, [r3, #4]
 8004d7a:	609a      	str	r2, [r3, #8]
 8004d7c:	60da      	str	r2, [r3, #12]
 8004d7e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a26      	ldr	r2, [pc, #152]	@ (8004e20 <HAL_ADC_MspInit+0xb8>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d145      	bne.n	8004e16 <HAL_ADC_MspInit+0xae>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004d8a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004d8e:	f7ff ffb1 	bl	8004cf4 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d92:	2004      	movs	r0, #4
 8004d94:	f7ff ffae 	bl	8004cf4 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004da0:	2300      	movs	r3, #0
 8004da2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004da4:	f107 030c 	add.w	r3, r7, #12
 8004da8:	4619      	mov	r1, r3
 8004daa:	481e      	ldr	r0, [pc, #120]	@ (8004e24 <HAL_ADC_MspInit+0xbc>)
 8004dac:	f002 fb68 	bl	8007480 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004db0:	4b1d      	ldr	r3, [pc, #116]	@ (8004e28 <HAL_ADC_MspInit+0xc0>)
 8004db2:	4a1e      	ldr	r2, [pc, #120]	@ (8004e2c <HAL_ADC_MspInit+0xc4>)
 8004db4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004db6:	4b1c      	ldr	r3, [pc, #112]	@ (8004e28 <HAL_ADC_MspInit+0xc0>)
 8004db8:	2205      	movs	r2, #5
 8004dba:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8004e28 <HAL_ADC_MspInit+0xc0>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004dc2:	4b19      	ldr	r3, [pc, #100]	@ (8004e28 <HAL_ADC_MspInit+0xc0>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004dc8:	4b17      	ldr	r3, [pc, #92]	@ (8004e28 <HAL_ADC_MspInit+0xc0>)
 8004dca:	2280      	movs	r2, #128	@ 0x80
 8004dcc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004dce:	4b16      	ldr	r3, [pc, #88]	@ (8004e28 <HAL_ADC_MspInit+0xc0>)
 8004dd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004dd4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004dd6:	4b14      	ldr	r3, [pc, #80]	@ (8004e28 <HAL_ADC_MspInit+0xc0>)
 8004dd8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004ddc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004dde:	4b12      	ldr	r3, [pc, #72]	@ (8004e28 <HAL_ADC_MspInit+0xc0>)
 8004de0:	2220      	movs	r2, #32
 8004de2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004de4:	4b10      	ldr	r3, [pc, #64]	@ (8004e28 <HAL_ADC_MspInit+0xc0>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004dea:	480f      	ldr	r0, [pc, #60]	@ (8004e28 <HAL_ADC_MspInit+0xc0>)
 8004dec:	f002 f866 	bl	8006ebc <HAL_DMA_Init>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <HAL_ADC_MspInit+0x92>
    {
      Error_Handler();
 8004df6:	f7ff ff77 	bl	8004ce8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a0a      	ldr	r2, [pc, #40]	@ (8004e28 <HAL_ADC_MspInit+0xc0>)
 8004dfe:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004e00:	4a09      	ldr	r2, [pc, #36]	@ (8004e28 <HAL_ADC_MspInit+0xc0>)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 2, 0);
 8004e06:	2200      	movs	r2, #0
 8004e08:	2102      	movs	r1, #2
 8004e0a:	2012      	movs	r0, #18
 8004e0c:	f002 f821 	bl	8006e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8004e10:	2012      	movs	r0, #18
 8004e12:	f002 f838 	bl	8006e86 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8004e16:	bf00      	nop
 8004e18:	3720      	adds	r7, #32
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	50040000 	.word	0x50040000
 8004e24:	48000800 	.word	0x48000800
 8004e28:	2000060c 	.word	0x2000060c
 8004e2c:	40020008 	.word	0x40020008

08004e30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b09c      	sub	sp, #112	@ 0x70
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e38:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]
 8004e40:	605a      	str	r2, [r3, #4]
 8004e42:	609a      	str	r2, [r3, #8]
 8004e44:	60da      	str	r2, [r3, #12]
 8004e46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004e48:	f107 030c 	add.w	r3, r7, #12
 8004e4c:	2250      	movs	r2, #80	@ 0x50
 8004e4e:	2100      	movs	r1, #0
 8004e50:	4618      	mov	r0, r3
 8004e52:	f00e fad8 	bl	8013406 <memset>
  if(hi2c->Instance==I2C1)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ed8 <HAL_I2C_MspInit+0xa8>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d136      	bne.n	8004ece <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004e60:	2304      	movs	r3, #4
 8004e62:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004e64:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8004e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004e6a:	f107 030c 	add.w	r3, r7, #12
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f007 f911 	bl	800c096 <HAL_RCCEx_PeriphCLKConfig>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004e7a:	f7ff ff35 	bl	8004ce8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e7e:	2002      	movs	r0, #2
 8004e80:	f7ff ff38 	bl	8004cf4 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004e84:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004e88:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e8a:	2312      	movs	r3, #18
 8004e8c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e92:	2300      	movs	r3, #0
 8004e94:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004e96:	2304      	movs	r3, #4
 8004e98:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e9a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	480e      	ldr	r0, [pc, #56]	@ (8004edc <HAL_I2C_MspInit+0xac>)
 8004ea2:	f002 faed 	bl	8007480 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004ea6:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8004eaa:	f7ff ff3c 	bl	8004d26 <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004eae:	2200      	movs	r2, #0
 8004eb0:	2100      	movs	r1, #0
 8004eb2:	201e      	movs	r0, #30
 8004eb4:	f001 ffcd 	bl	8006e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004eb8:	201e      	movs	r0, #30
 8004eba:	f001 ffe4 	bl	8006e86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	201f      	movs	r0, #31
 8004ec4:	f001 ffc5 	bl	8006e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004ec8:	201f      	movs	r0, #31
 8004eca:	f001 ffdc 	bl	8006e86 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8004ece:	bf00      	nop
 8004ed0:	3770      	adds	r7, #112	@ 0x70
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	40005400 	.word	0x40005400
 8004edc:	48000400 	.word	0x48000400

08004ee0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ef0:	d10a      	bne.n	8004f08 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004ef2:	2001      	movs	r0, #1
 8004ef4:	f7ff ff17 	bl	8004d26 <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004ef8:	2200      	movs	r2, #0
 8004efa:	2100      	movs	r1, #0
 8004efc:	201c      	movs	r0, #28
 8004efe:	f001 ffa8 	bl	8006e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004f02:	201c      	movs	r0, #28
 8004f04:	f001 ffbf 	bl	8006e86 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8004f08:	bf00      	nop
 8004f0a:	3708      	adds	r7, #8
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f10:	b480      	push	{r7}
 8004f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004f14:	bf00      	nop
 8004f16:	e7fd      	b.n	8004f14 <NMI_Handler+0x4>

08004f18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f1c:	bf00      	nop
 8004f1e:	e7fd      	b.n	8004f1c <HardFault_Handler+0x4>

08004f20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f20:	b480      	push	{r7}
 8004f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f24:	bf00      	nop
 8004f26:	e7fd      	b.n	8004f24 <MemManage_Handler+0x4>

08004f28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f2c:	bf00      	nop
 8004f2e:	e7fd      	b.n	8004f2c <BusFault_Handler+0x4>

08004f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f30:	b480      	push	{r7}
 8004f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f34:	bf00      	nop
 8004f36:	e7fd      	b.n	8004f34 <UsageFault_Handler+0x4>

08004f38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004f3c:	bf00      	nop
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f46:	b480      	push	{r7}
 8004f48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f4a:	bf00      	nop
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004f54:	b480      	push	{r7}
 8004f56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004f58:	bf00      	nop
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f66:	f000 fbad 	bl	80056c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f6a:	bf00      	nop
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 8004f72:	2001      	movs	r0, #1
 8004f74:	f002 fc26 	bl	80077c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004f78:	bf00      	nop
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 8004f80:	2002      	movs	r0, #2
 8004f82:	f002 fc1f 	bl	80077c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004f86:	bf00      	nop
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 8004f8e:	2010      	movs	r0, #16
 8004f90:	f002 fc18 	bl	80077c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004f94:	bf00      	nop
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004f9c:	4802      	ldr	r0, [pc, #8]	@ (8004fa8 <DMA1_Channel1_IRQHandler+0x10>)
 8004f9e:	f002 f90f 	bl	80071c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004fa2:	bf00      	nop
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	2000060c 	.word	0x2000060c

08004fac <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004fb0:	4802      	ldr	r0, [pc, #8]	@ (8004fbc <ADC1_IRQHandler+0x10>)
 8004fb2:	f000 ff8f 	bl	8005ed4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8004fb6:	bf00      	nop
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	200005a8 	.word	0x200005a8

08004fc0 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt.
  */
void USB_HP_IRQHandler(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004fc4:	4802      	ldr	r0, [pc, #8]	@ (8004fd0 <USB_HP_IRQHandler+0x10>)
 8004fc6:	f004 f8ce 	bl	8009166 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 8004fca:	bf00      	nop
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	20001cd4 	.word	0x20001cd4

08004fd4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004fd8:	4802      	ldr	r0, [pc, #8]	@ (8004fe4 <USB_LP_IRQHandler+0x10>)
 8004fda:	f004 f8c4 	bl	8009166 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8004fde:	bf00      	nop
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	20001cd4 	.word	0x20001cd4

08004fe8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004fec:	4802      	ldr	r0, [pc, #8]	@ (8004ff8 <TIM2_IRQHandler+0x10>)
 8004fee:	f007 fb7f 	bl	800c6f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004ff2:	bf00      	nop
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	200006c0 	.word	0x200006c0

08004ffc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005000:	4802      	ldr	r0, [pc, #8]	@ (800500c <I2C1_EV_IRQHandler+0x10>)
 8005002:	f002 feab 	bl	8007d5c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005006:	bf00      	nop
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	2000066c 	.word	0x2000066c

08005010 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005014:	4802      	ldr	r0, [pc, #8]	@ (8005020 <I2C1_ER_IRQHandler+0x10>)
 8005016:	f002 febb 	bl	8007d90 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800501a:	bf00      	nop
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	2000066c 	.word	0x2000066c

08005024 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005024:	b480      	push	{r7}
 8005026:	af00      	add	r7, sp, #0
  return 1;
 8005028:	2301      	movs	r3, #1
}
 800502a:	4618      	mov	r0, r3
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <_kill>:

int _kill(int pid, int sig)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800503e:	f00e fa35 	bl	80134ac <__errno>
 8005042:	4603      	mov	r3, r0
 8005044:	2216      	movs	r2, #22
 8005046:	601a      	str	r2, [r3, #0]
  return -1;
 8005048:	f04f 33ff 	mov.w	r3, #4294967295
}
 800504c:	4618      	mov	r0, r3
 800504e:	3708      	adds	r7, #8
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <_exit>:

void _exit (int status)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800505c:	f04f 31ff 	mov.w	r1, #4294967295
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f7ff ffe7 	bl	8005034 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005066:	bf00      	nop
 8005068:	e7fd      	b.n	8005066 <_exit+0x12>

0800506a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b086      	sub	sp, #24
 800506e:	af00      	add	r7, sp, #0
 8005070:	60f8      	str	r0, [r7, #12]
 8005072:	60b9      	str	r1, [r7, #8]
 8005074:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005076:	2300      	movs	r3, #0
 8005078:	617b      	str	r3, [r7, #20]
 800507a:	e00a      	b.n	8005092 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800507c:	f3af 8000 	nop.w
 8005080:	4601      	mov	r1, r0
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	1c5a      	adds	r2, r3, #1
 8005086:	60ba      	str	r2, [r7, #8]
 8005088:	b2ca      	uxtb	r2, r1
 800508a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	3301      	adds	r3, #1
 8005090:	617b      	str	r3, [r7, #20]
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	429a      	cmp	r2, r3
 8005098:	dbf0      	blt.n	800507c <_read+0x12>
  }

  return len;
 800509a:	687b      	ldr	r3, [r7, #4]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3718      	adds	r7, #24
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050b0:	2300      	movs	r3, #0
 80050b2:	617b      	str	r3, [r7, #20]
 80050b4:	e009      	b.n	80050ca <_write+0x26>
  {
    __io_putchar(*ptr++);
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	1c5a      	adds	r2, r3, #1
 80050ba:	60ba      	str	r2, [r7, #8]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 fa5a 	bl	8005578 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	3301      	adds	r3, #1
 80050c8:	617b      	str	r3, [r7, #20]
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	dbf1      	blt.n	80050b6 <_write+0x12>
  }
  return len;
 80050d2:	687b      	ldr	r3, [r7, #4]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3718      	adds	r7, #24
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <_close>:

int _close(int file)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80050e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005104:	605a      	str	r2, [r3, #4]
  return 0;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <_isatty>:

int _isatty(int file)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800511c:	2301      	movs	r3, #1
}
 800511e:	4618      	mov	r0, r3
 8005120:	370c      	adds	r7, #12
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr

0800512a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800512a:	b480      	push	{r7}
 800512c:	b085      	sub	sp, #20
 800512e:	af00      	add	r7, sp, #0
 8005130:	60f8      	str	r0, [r7, #12]
 8005132:	60b9      	str	r1, [r7, #8]
 8005134:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3714      	adds	r7, #20
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800514c:	4a14      	ldr	r2, [pc, #80]	@ (80051a0 <_sbrk+0x5c>)
 800514e:	4b15      	ldr	r3, [pc, #84]	@ (80051a4 <_sbrk+0x60>)
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005158:	4b13      	ldr	r3, [pc, #76]	@ (80051a8 <_sbrk+0x64>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d102      	bne.n	8005166 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005160:	4b11      	ldr	r3, [pc, #68]	@ (80051a8 <_sbrk+0x64>)
 8005162:	4a12      	ldr	r2, [pc, #72]	@ (80051ac <_sbrk+0x68>)
 8005164:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005166:	4b10      	ldr	r3, [pc, #64]	@ (80051a8 <_sbrk+0x64>)
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4413      	add	r3, r2
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	429a      	cmp	r2, r3
 8005172:	d207      	bcs.n	8005184 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005174:	f00e f99a 	bl	80134ac <__errno>
 8005178:	4603      	mov	r3, r0
 800517a:	220c      	movs	r2, #12
 800517c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800517e:	f04f 33ff 	mov.w	r3, #4294967295
 8005182:	e009      	b.n	8005198 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005184:	4b08      	ldr	r3, [pc, #32]	@ (80051a8 <_sbrk+0x64>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800518a:	4b07      	ldr	r3, [pc, #28]	@ (80051a8 <_sbrk+0x64>)
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4413      	add	r3, r2
 8005192:	4a05      	ldr	r2, [pc, #20]	@ (80051a8 <_sbrk+0x64>)
 8005194:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005196:	68fb      	ldr	r3, [r7, #12]
}
 8005198:	4618      	mov	r0, r3
 800519a:	3718      	adds	r7, #24
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	20030000 	.word	0x20030000
 80051a4:	00000400 	.word	0x00000400
 80051a8:	20000754 	.word	0x20000754
 80051ac:	20002320 	.word	0x20002320

080051b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80051b0:	b480      	push	{r7}
 80051b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80051b4:	4b24      	ldr	r3, [pc, #144]	@ (8005248 <SystemInit+0x98>)
 80051b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ba:	4a23      	ldr	r2, [pc, #140]	@ (8005248 <SystemInit+0x98>)
 80051bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80051c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80051c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051ce:	f043 0301 	orr.w	r3, r3, #1
 80051d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80051d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051d8:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80051dc:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80051de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80051e8:	4b18      	ldr	r3, [pc, #96]	@ (800524c <SystemInit+0x9c>)
 80051ea:	4013      	ands	r3, r2
 80051ec:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80051ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051fa:	f023 0305 	bic.w	r3, r3, #5
 80051fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8005202:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005206:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800520a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800520e:	f023 0301 	bic.w	r3, r3, #1
 8005212:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8005216:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800521a:	4a0d      	ldr	r2, [pc, #52]	@ (8005250 <SystemInit+0xa0>)
 800521c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800521e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005222:	4a0b      	ldr	r2, [pc, #44]	@ (8005250 <SystemInit+0xa0>)
 8005224:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005226:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005230:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005234:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005236:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800523a:	2200      	movs	r2, #0
 800523c:	619a      	str	r2, [r3, #24]
}
 800523e:	bf00      	nop
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr
 8005248:	e000ed00 	.word	0xe000ed00
 800524c:	faf6fefb 	.word	0xfaf6fefb
 8005250:	22041000 	.word	0x22041000

08005254 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8005254:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005256:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005258:	3304      	adds	r3, #4

0800525a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800525a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800525c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800525e:	d3f9      	bcc.n	8005254 <CopyDataInit>
  bx lr
 8005260:	4770      	bx	lr

08005262 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8005262:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8005264:	3004      	adds	r0, #4

08005266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8005266:	4288      	cmp	r0, r1
  bcc FillZerobss
 8005268:	d3fb      	bcc.n	8005262 <FillZerobss>
  bx lr
 800526a:	4770      	bx	lr

0800526c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800526c:	480c      	ldr	r0, [pc, #48]	@ (80052a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800526e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005270:	f7ff ff9e 	bl	80051b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8005274:	480b      	ldr	r0, [pc, #44]	@ (80052a4 <LoopForever+0x6>)
 8005276:	490c      	ldr	r1, [pc, #48]	@ (80052a8 <LoopForever+0xa>)
 8005278:	4a0c      	ldr	r2, [pc, #48]	@ (80052ac <LoopForever+0xe>)
 800527a:	2300      	movs	r3, #0
 800527c:	f7ff ffed 	bl	800525a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8005280:	480b      	ldr	r0, [pc, #44]	@ (80052b0 <LoopForever+0x12>)
 8005282:	490c      	ldr	r1, [pc, #48]	@ (80052b4 <LoopForever+0x16>)
 8005284:	4a0c      	ldr	r2, [pc, #48]	@ (80052b8 <LoopForever+0x1a>)
 8005286:	2300      	movs	r3, #0
 8005288:	f7ff ffe7 	bl	800525a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800528c:	480b      	ldr	r0, [pc, #44]	@ (80052bc <LoopForever+0x1e>)
 800528e:	490c      	ldr	r1, [pc, #48]	@ (80052c0 <LoopForever+0x22>)
 8005290:	2300      	movs	r3, #0
 8005292:	f7ff ffe8 	bl	8005266 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005296:	f00e f90f 	bl	80134b8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800529a:	f7ff fa59 	bl	8004750 <main>

0800529e <LoopForever>:

LoopForever:
  b LoopForever
 800529e:	e7fe      	b.n	800529e <LoopForever>
  ldr   r0, =_estack
 80052a0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80052a4:	20000008 	.word	0x20000008
 80052a8:	200002f4 	.word	0x200002f4
 80052ac:	080157e0 	.word	0x080157e0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80052b0:	20030000 	.word	0x20030000
 80052b4:	20030000 	.word	0x20030000
 80052b8:	08015acc 	.word	0x08015acc
  INIT_BSS _sbss, _ebss
 80052bc:	200002f4 	.word	0x200002f4
 80052c0:	2000231c 	.word	0x2000231c

080052c4 <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80052c4:	e7fe      	b.n	80052c4 <AES1_IRQHandler>

080052c6 <LL_AHB2_GRP1_EnableClock>:
{
 80052c6:	b480      	push	{r7}
 80052c8:	b085      	sub	sp, #20
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80052ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80052d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4313      	orrs	r3, r2
 80052dc:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80052de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4013      	ands	r3, r2
 80052e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80052ea:	68fb      	ldr	r3, [r7, #12]
}
 80052ec:	bf00      	nop
 80052ee:	3714      	adds	r7, #20
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8005300:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005304:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005306:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4313      	orrs	r3, r2
 800530e:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005310:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005314:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4013      	ands	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800531c:	68fb      	ldr	r3, [r7, #12]
}
 800531e:	bf00      	nop
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
	...

0800532c <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b088      	sub	sp, #32
 8005330:	af00      	add	r7, sp, #0
 8005332:	4603      	mov	r3, r0
 8005334:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8005336:	f107 030c 	add.w	r3, r7, #12
 800533a:	2200      	movs	r2, #0
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	605a      	str	r2, [r3, #4]
 8005340:	609a      	str	r2, [r3, #8]
 8005342:	60da      	str	r2, [r3, #12]
 8005344:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8005346:	2002      	movs	r0, #2
 8005348:	f7ff ffbd 	bl	80052c6 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 800534c:	79fb      	ldrb	r3, [r7, #7]
 800534e:	4a12      	ldr	r2, [pc, #72]	@ (8005398 <BSP_LED_Init+0x6c>)
 8005350:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005354:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005356:	2301      	movs	r3, #1
 8005358:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 800535a:	2300      	movs	r3, #0
 800535c:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800535e:	2302      	movs	r3, #2
 8005360:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8005362:	79fb      	ldrb	r3, [r7, #7]
 8005364:	4a0d      	ldr	r2, [pc, #52]	@ (800539c <BSP_LED_Init+0x70>)
 8005366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800536a:	f107 020c 	add.w	r2, r7, #12
 800536e:	4611      	mov	r1, r2
 8005370:	4618      	mov	r0, r3
 8005372:	f002 f885 	bl	8007480 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8005376:	79fb      	ldrb	r3, [r7, #7]
 8005378:	4a08      	ldr	r2, [pc, #32]	@ (800539c <BSP_LED_Init+0x70>)
 800537a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800537e:	79fb      	ldrb	r3, [r7, #7]
 8005380:	4a05      	ldr	r2, [pc, #20]	@ (8005398 <BSP_LED_Init+0x6c>)
 8005382:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005386:	2200      	movs	r2, #0
 8005388:	4619      	mov	r1, r3
 800538a:	f002 f9e9 	bl	8007760 <HAL_GPIO_WritePin>
}
 800538e:	bf00      	nop
 8005390:	3720      	adds	r7, #32
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	08015430 	.word	0x08015430
 800539c:	20000014 	.word	0x20000014

080053a0 <BSP_LED_Toggle>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	4603      	mov	r3, r0
 80053a8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80053aa:	79fb      	ldrb	r3, [r7, #7]
 80053ac:	4a07      	ldr	r2, [pc, #28]	@ (80053cc <BSP_LED_Toggle+0x2c>)
 80053ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80053b2:	79fb      	ldrb	r3, [r7, #7]
 80053b4:	4906      	ldr	r1, [pc, #24]	@ (80053d0 <BSP_LED_Toggle+0x30>)
 80053b6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80053ba:	4619      	mov	r1, r3
 80053bc:	4610      	mov	r0, r2
 80053be:	f002 f9e7 	bl	8007790 <HAL_GPIO_TogglePin>
}
 80053c2:	bf00      	nop
 80053c4:	3708      	adds	r7, #8
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	20000014 	.word	0x20000014
 80053d0:	08015430 	.word	0x08015430

080053d4 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b088      	sub	sp, #32
 80053d8:	af00      	add	r7, sp, #0
 80053da:	4603      	mov	r3, r0
 80053dc:	460a      	mov	r2, r1
 80053de:	71fb      	strb	r3, [r7, #7]
 80053e0:	4613      	mov	r3, r2
 80053e2:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 80053e4:	f107 030c 	add.w	r3, r7, #12
 80053e8:	2200      	movs	r2, #0
 80053ea:	601a      	str	r2, [r3, #0]
 80053ec:	605a      	str	r2, [r3, #4]
 80053ee:	609a      	str	r2, [r3, #8]
 80053f0:	60da      	str	r2, [r3, #12]
 80053f2:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80053f4:	79fb      	ldrb	r3, [r7, #7]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d103      	bne.n	8005402 <BSP_PB_Init+0x2e>
 80053fa:	2004      	movs	r0, #4
 80053fc:	f7ff ff63 	bl	80052c6 <LL_AHB2_GRP1_EnableClock>
 8005400:	e00c      	b.n	800541c <BSP_PB_Init+0x48>
 8005402:	79fb      	ldrb	r3, [r7, #7]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d103      	bne.n	8005410 <BSP_PB_Init+0x3c>
 8005408:	2008      	movs	r0, #8
 800540a:	f7ff ff5c 	bl	80052c6 <LL_AHB2_GRP1_EnableClock>
 800540e:	e005      	b.n	800541c <BSP_PB_Init+0x48>
 8005410:	79fb      	ldrb	r3, [r7, #7]
 8005412:	2b02      	cmp	r3, #2
 8005414:	d102      	bne.n	800541c <BSP_PB_Init+0x48>
 8005416:	2008      	movs	r0, #8
 8005418:	f7ff ff55 	bl	80052c6 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 800541c:	79bb      	ldrb	r3, [r7, #6]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d117      	bne.n	8005452 <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8005422:	79fb      	ldrb	r3, [r7, #7]
 8005424:	4a20      	ldr	r2, [pc, #128]	@ (80054a8 <BSP_PB_Init+0xd4>)
 8005426:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800542a:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 800542c:	2300      	movs	r3, #0
 800542e:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8005430:	2301      	movs	r3, #1
 8005432:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005434:	2302      	movs	r3, #2
 8005436:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8005438:	79fb      	ldrb	r3, [r7, #7]
 800543a:	4a1c      	ldr	r2, [pc, #112]	@ (80054ac <BSP_PB_Init+0xd8>)
 800543c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005440:	f107 020c 	add.w	r2, r7, #12
 8005444:	4611      	mov	r1, r2
 8005446:	4618      	mov	r0, r3
 8005448:	f002 f81a 	bl	8007480 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 800544c:	2001      	movs	r0, #1
 800544e:	f000 f965 	bl	800571c <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8005452:	79bb      	ldrb	r3, [r7, #6]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d123      	bne.n	80054a0 <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8005458:	79fb      	ldrb	r3, [r7, #7]
 800545a:	4a13      	ldr	r2, [pc, #76]	@ (80054a8 <BSP_PB_Init+0xd4>)
 800545c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005460:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8005462:	2301      	movs	r3, #1
 8005464:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8005466:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800546a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 800546c:	79fb      	ldrb	r3, [r7, #7]
 800546e:	4a0f      	ldr	r2, [pc, #60]	@ (80054ac <BSP_PB_Init+0xd8>)
 8005470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005474:	f107 020c 	add.w	r2, r7, #12
 8005478:	4611      	mov	r1, r2
 800547a:	4618      	mov	r0, r3
 800547c:	f002 f800 	bl	8007480 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8005480:	79fb      	ldrb	r3, [r7, #7]
 8005482:	4a0b      	ldr	r2, [pc, #44]	@ (80054b0 <BSP_PB_Init+0xdc>)
 8005484:	5cd3      	ldrb	r3, [r2, r3]
 8005486:	b25b      	sxtb	r3, r3
 8005488:	2200      	movs	r2, #0
 800548a:	210f      	movs	r1, #15
 800548c:	4618      	mov	r0, r3
 800548e:	f001 fce0 	bl	8006e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8005492:	79fb      	ldrb	r3, [r7, #7]
 8005494:	4a06      	ldr	r2, [pc, #24]	@ (80054b0 <BSP_PB_Init+0xdc>)
 8005496:	5cd3      	ldrb	r3, [r2, r3]
 8005498:	b25b      	sxtb	r3, r3
 800549a:	4618      	mov	r0, r3
 800549c:	f001 fcf3 	bl	8006e86 <HAL_NVIC_EnableIRQ>
  }
}
 80054a0:	bf00      	nop
 80054a2:	3720      	adds	r7, #32
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	08015438 	.word	0x08015438
 80054ac:	20000020 	.word	0x20000020
 80054b0:	08015440 	.word	0x08015440

080054b4 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	4603      	mov	r3, r0
 80054bc:	6039      	str	r1, [r7, #0]
 80054be:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80054c0:	2300      	movs	r3, #0
 80054c2:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 80054c4:	79fb      	ldrb	r3, [r7, #7]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d903      	bls.n	80054d2 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80054ca:	f06f 0301 	mvn.w	r3, #1
 80054ce:	60fb      	str	r3, [r7, #12]
 80054d0:	e018      	b.n	8005504 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80054d2:	79fb      	ldrb	r3, [r7, #7]
 80054d4:	2294      	movs	r2, #148	@ 0x94
 80054d6:	fb02 f303 	mul.w	r3, r2, r3
 80054da:	4a0d      	ldr	r2, [pc, #52]	@ (8005510 <BSP_COM_Init+0x5c>)
 80054dc:	4413      	add	r3, r2
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 f866 	bl	80055b0 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80054e4:	79fb      	ldrb	r3, [r7, #7]
 80054e6:	2294      	movs	r2, #148	@ 0x94
 80054e8:	fb02 f303 	mul.w	r3, r2, r3
 80054ec:	4a08      	ldr	r2, [pc, #32]	@ (8005510 <BSP_COM_Init+0x5c>)
 80054ee:	4413      	add	r3, r2
 80054f0:	6839      	ldr	r1, [r7, #0]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 f80e 	bl	8005514 <MX_LPUART1_Init>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d002      	beq.n	8005504 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 80054fe:	f06f 0303 	mvn.w	r3, #3
 8005502:	e000      	b.n	8005506 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8005504:	68fb      	ldr	r3, [r7, #12]
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	20000758 	.word	0x20000758

08005514 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 800551e:	4b15      	ldr	r3, [pc, #84]	@ (8005574 <MX_LPUART1_Init+0x60>)
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	220c      	movs	r2, #12
 8005532:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	895b      	ldrh	r3, [r3, #10]
 8005538:	461a      	mov	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	891b      	ldrh	r3, [r3, #8]
 800554a:	461a      	mov	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	899b      	ldrh	r3, [r3, #12]
 8005554:	461a      	mov	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005560:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f007 fc66 	bl	800ce34 <HAL_UART_Init>
 8005568:	4603      	mov	r3, r0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3708      	adds	r7, #8
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	2000002c 	.word	0x2000002c

08005578 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8005580:	4b09      	ldr	r3, [pc, #36]	@ (80055a8 <__io_putchar+0x30>)
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	461a      	mov	r2, r3
 8005586:	2394      	movs	r3, #148	@ 0x94
 8005588:	fb02 f303 	mul.w	r3, r2, r3
 800558c:	4a07      	ldr	r2, [pc, #28]	@ (80055ac <__io_putchar+0x34>)
 800558e:	1898      	adds	r0, r3, r2
 8005590:	1d39      	adds	r1, r7, #4
 8005592:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005596:	2201      	movs	r2, #1
 8005598:	f007 fca6 	bl	800cee8 <HAL_UART_Transmit>
  return ch;
 800559c:	687b      	ldr	r3, [r7, #4]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3708      	adds	r7, #8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	200007ec 	.word	0x200007ec
 80055ac:	20000758 	.word	0x20000758

080055b0 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b088      	sub	sp, #32
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80055b8:	2002      	movs	r0, #2
 80055ba:	f7ff fe84 	bl	80052c6 <LL_AHB2_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
 80055be:	2002      	movs	r0, #2
 80055c0:	f7ff fe81 	bl	80052c6 <LL_AHB2_GRP1_EnableClock>

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80055c4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80055c8:	f7ff fe96 	bl	80052f8 <LL_APB2_GRP1_EnableClock>

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 80055cc:	2340      	movs	r3, #64	@ 0x40
 80055ce:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80055d0:	2302      	movs	r3, #2
 80055d2:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80055d4:	2302      	movs	r3, #2
 80055d6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80055d8:	2301      	movs	r3, #1
 80055da:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80055dc:	2307      	movs	r3, #7
 80055de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80055e0:	f107 030c 	add.w	r3, r7, #12
 80055e4:	4619      	mov	r1, r3
 80055e6:	4809      	ldr	r0, [pc, #36]	@ (800560c <COM1_MspInit+0x5c>)
 80055e8:	f001 ff4a 	bl	8007480 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80055ec:	2380      	movs	r3, #128	@ 0x80
 80055ee:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80055f0:	2302      	movs	r3, #2
 80055f2:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80055f4:	2307      	movs	r3, #7
 80055f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80055f8:	f107 030c 	add.w	r3, r7, #12
 80055fc:	4619      	mov	r1, r3
 80055fe:	4803      	ldr	r0, [pc, #12]	@ (800560c <COM1_MspInit+0x5c>)
 8005600:	f001 ff3e 	bl	8007480 <HAL_GPIO_Init>
}
 8005604:	bf00      	nop
 8005606:	3720      	adds	r7, #32
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	48000400 	.word	0x48000400

08005610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005616:	2300      	movs	r3, #0
 8005618:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800561a:	4b0c      	ldr	r3, [pc, #48]	@ (800564c <HAL_Init+0x3c>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a0b      	ldr	r2, [pc, #44]	@ (800564c <HAL_Init+0x3c>)
 8005620:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005624:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005626:	2003      	movs	r0, #3
 8005628:	f001 fc08 	bl	8006e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800562c:	2000      	movs	r0, #0
 800562e:	f000 f80f 	bl	8005650 <HAL_InitTick>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d002      	beq.n	800563e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	71fb      	strb	r3, [r7, #7]
 800563c:	e001      	b.n	8005642 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800563e:	f7ff fb8b 	bl	8004d58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005642:	79fb      	ldrb	r3, [r7, #7]
}
 8005644:	4618      	mov	r0, r3
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	58004000 	.word	0x58004000

08005650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005658:	2300      	movs	r3, #0
 800565a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800565c:	4b17      	ldr	r3, [pc, #92]	@ (80056bc <HAL_InitTick+0x6c>)
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d024      	beq.n	80056ae <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005664:	f006 fa86 	bl	800bb74 <HAL_RCC_GetHCLKFreq>
 8005668:	4602      	mov	r2, r0
 800566a:	4b14      	ldr	r3, [pc, #80]	@ (80056bc <HAL_InitTick+0x6c>)
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	4619      	mov	r1, r3
 8005670:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005674:	fbb3 f3f1 	udiv	r3, r3, r1
 8005678:	fbb2 f3f3 	udiv	r3, r2, r3
 800567c:	4618      	mov	r0, r3
 800567e:	f001 fc10 	bl	8006ea2 <HAL_SYSTICK_Config>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10f      	bne.n	80056a8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b0f      	cmp	r3, #15
 800568c:	d809      	bhi.n	80056a2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800568e:	2200      	movs	r2, #0
 8005690:	6879      	ldr	r1, [r7, #4]
 8005692:	f04f 30ff 	mov.w	r0, #4294967295
 8005696:	f001 fbdc 	bl	8006e52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800569a:	4a09      	ldr	r2, [pc, #36]	@ (80056c0 <HAL_InitTick+0x70>)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6013      	str	r3, [r2, #0]
 80056a0:	e007      	b.n	80056b2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	73fb      	strb	r3, [r7, #15]
 80056a6:	e004      	b.n	80056b2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	73fb      	strb	r3, [r7, #15]
 80056ac:	e001      	b.n	80056b2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80056b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3710      	adds	r7, #16
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	20000034 	.word	0x20000034
 80056c0:	20000030 	.word	0x20000030

080056c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80056c4:	b480      	push	{r7}
 80056c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80056c8:	4b06      	ldr	r3, [pc, #24]	@ (80056e4 <HAL_IncTick+0x20>)
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	461a      	mov	r2, r3
 80056ce:	4b06      	ldr	r3, [pc, #24]	@ (80056e8 <HAL_IncTick+0x24>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4413      	add	r3, r2
 80056d4:	4a04      	ldr	r2, [pc, #16]	@ (80056e8 <HAL_IncTick+0x24>)
 80056d6:	6013      	str	r3, [r2, #0]
}
 80056d8:	bf00      	nop
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	20000034 	.word	0x20000034
 80056e8:	200007f0 	.word	0x200007f0

080056ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056ec:	b480      	push	{r7}
 80056ee:	af00      	add	r7, sp, #0
  return uwTick;
 80056f0:	4b03      	ldr	r3, [pc, #12]	@ (8005700 <HAL_GetTick+0x14>)
 80056f2:	681b      	ldr	r3, [r3, #0]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	200007f0 	.word	0x200007f0

08005704 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8005704:	b480      	push	{r7}
 8005706:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8005708:	4b03      	ldr	r3, [pc, #12]	@ (8005718 <HAL_GetTickPrio+0x14>)
 800570a:	681b      	ldr	r3, [r3, #0]
}
 800570c:	4618      	mov	r0, r3
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	20000030 	.word	0x20000030

0800571c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005724:	f7ff ffe2 	bl	80056ec <HAL_GetTick>
 8005728:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005734:	d005      	beq.n	8005742 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005736:	4b0a      	ldr	r3, [pc, #40]	@ (8005760 <HAL_Delay+0x44>)
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	461a      	mov	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	4413      	add	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005742:	bf00      	nop
 8005744:	f7ff ffd2 	bl	80056ec <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	429a      	cmp	r2, r3
 8005752:	d8f7      	bhi.n	8005744 <HAL_Delay+0x28>
  {
  }
}
 8005754:	bf00      	nop
 8005756:	bf00      	nop
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	20000034 	.word	0x20000034

08005764 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	431a      	orrs	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800577e:	bf00      	nop
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800578a:	b480      	push	{r7}
 800578c:	b083      	sub	sp, #12
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
 8005792:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	431a      	orrs	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	609a      	str	r2, [r3, #8]
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b087      	sub	sp, #28
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
 80057d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	3360      	adds	r3, #96	@ 0x60
 80057de:	461a      	mov	r2, r3
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	4413      	add	r3, r2
 80057e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	4b08      	ldr	r3, [pc, #32]	@ (8005810 <LL_ADC_SetOffset+0x44>)
 80057ee:	4013      	ands	r3, r2
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	430a      	orrs	r2, r1
 80057fa:	4313      	orrs	r3, r2
 80057fc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005804:	bf00      	nop
 8005806:	371c      	adds	r7, #28
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr
 8005810:	03fff000 	.word	0x03fff000

08005814 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	3360      	adds	r3, #96	@ 0x60
 8005822:	461a      	mov	r2, r3
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4413      	add	r3, r2
 800582a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8005834:	4618      	mov	r0, r3
 8005836:	3714      	adds	r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005840:	b480      	push	{r7}
 8005842:	b087      	sub	sp, #28
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	3360      	adds	r3, #96	@ 0x60
 8005850:	461a      	mov	r2, r3
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4413      	add	r3, r2
 8005858:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	431a      	orrs	r2, r3
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800586a:	bf00      	nop
 800586c:	371c      	adds	r7, #28
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005876:	b480      	push	{r7}
 8005878:	b083      	sub	sp, #12
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800588a:	2301      	movs	r3, #1
 800588c:	e000      	b.n	8005890 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800588e:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8005890:	4618      	mov	r0, r3
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800589c:	b480      	push	{r7}
 800589e:	b087      	sub	sp, #28
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	3330      	adds	r3, #48	@ 0x30
 80058ac:	461a      	mov	r2, r3
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	0a1b      	lsrs	r3, r3, #8
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	f003 030c 	and.w	r3, r3, #12
 80058b8:	4413      	add	r3, r2
 80058ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	f003 031f 	and.w	r3, r3, #31
 80058c6:	211f      	movs	r1, #31
 80058c8:	fa01 f303 	lsl.w	r3, r1, r3
 80058cc:	43db      	mvns	r3, r3
 80058ce:	401a      	ands	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	0e9b      	lsrs	r3, r3, #26
 80058d4:	f003 011f 	and.w	r1, r3, #31
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	f003 031f 	and.w	r3, r3, #31
 80058de:	fa01 f303 	lsl.w	r3, r1, r3
 80058e2:	431a      	orrs	r2, r3
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80058e8:	bf00      	nop
 80058ea:	371c      	adds	r7, #28
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f003 0303 	and.w	r3, r3, #3
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8005904:	4618      	mov	r0, r3
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800591c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d101      	bne.n	8005928 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8005924:	2301      	movs	r3, #1
 8005926:	e000      	b.n	800592a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005936:	b480      	push	{r7}
 8005938:	b087      	sub	sp, #28
 800593a:	af00      	add	r7, sp, #0
 800593c:	60f8      	str	r0, [r7, #12]
 800593e:	60b9      	str	r1, [r7, #8]
 8005940:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	3314      	adds	r3, #20
 8005946:	461a      	mov	r2, r3
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	0e5b      	lsrs	r3, r3, #25
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	f003 0304 	and.w	r3, r3, #4
 8005952:	4413      	add	r3, r2
 8005954:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	0d1b      	lsrs	r3, r3, #20
 800595e:	f003 031f 	and.w	r3, r3, #31
 8005962:	2107      	movs	r1, #7
 8005964:	fa01 f303 	lsl.w	r3, r1, r3
 8005968:	43db      	mvns	r3, r3
 800596a:	401a      	ands	r2, r3
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	0d1b      	lsrs	r3, r3, #20
 8005970:	f003 031f 	and.w	r3, r3, #31
 8005974:	6879      	ldr	r1, [r7, #4]
 8005976:	fa01 f303 	lsl.w	r3, r1, r3
 800597a:	431a      	orrs	r2, r3
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8005980:	bf00      	nop
 8005982:	371c      	adds	r7, #28
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059a4:	43db      	mvns	r3, r3
 80059a6:	401a      	ands	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f003 0318 	and.w	r3, r3, #24
 80059ae:	4908      	ldr	r1, [pc, #32]	@ (80059d0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80059b0:	40d9      	lsrs	r1, r3
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	400b      	ands	r3, r1
 80059b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059ba:	431a      	orrs	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80059c2:	bf00      	nop
 80059c4:	3714      	adds	r7, #20
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	0007ffff 	.word	0x0007ffff

080059d4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80059e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	6093      	str	r3, [r2, #8]
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a0c:	d101      	bne.n	8005a12 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e000      	b.n	8005a14 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8005a30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005a34:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a5c:	d101      	bne.n	8005a62 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e000      	b.n	8005a64 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005a80:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005a84:	f043 0201 	orr.w	r2, r3, #1
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d101      	bne.n	8005ab0 <LL_ADC_IsEnabled+0x18>
 8005aac:	2301      	movs	r3, #1
 8005aae:	e000      	b.n	8005ab2 <LL_ADC_IsEnabled+0x1a>
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b083      	sub	sp, #12
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005ace:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005ad2:	f043 0204 	orr.w	r2, r3, #4
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005ada:	bf00      	nop
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b083      	sub	sp, #12
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f003 0304 	and.w	r3, r3, #4
 8005af6:	2b04      	cmp	r3, #4
 8005af8:	d101      	bne.n	8005afe <LL_ADC_REG_IsConversionOngoing+0x18>
 8005afa:	2301      	movs	r3, #1
 8005afc:	e000      	b.n	8005b00 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f003 0308 	and.w	r3, r3, #8
 8005b1c:	2b08      	cmp	r3, #8
 8005b1e:	d101      	bne.n	8005b24 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005b20:	2301      	movs	r3, #1
 8005b22:	e000      	b.n	8005b26 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
	...

08005b34 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b088      	sub	sp, #32
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8005b40:	2300      	movs	r3, #0
 8005b42:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005b44:	2300      	movs	r3, #0
 8005b46:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e12e      	b.n	8005db0 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d109      	bne.n	8005b74 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f7ff f901 	bl	8004d68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7ff ff3d 	bl	80059f8 <LL_ADC_IsDeepPowerDownEnabled>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d004      	beq.n	8005b8e <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7ff ff23 	bl	80059d4 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7ff ff58 	bl	8005a48 <LL_ADC_IsInternalRegulatorEnabled>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d115      	bne.n	8005bca <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7ff ff3c 	bl	8005a20 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005ba8:	4b83      	ldr	r3, [pc, #524]	@ (8005db8 <HAL_ADC_Init+0x284>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	099b      	lsrs	r3, r3, #6
 8005bae:	4a83      	ldr	r2, [pc, #524]	@ (8005dbc <HAL_ADC_Init+0x288>)
 8005bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb4:	099b      	lsrs	r3, r3, #6
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	005b      	lsls	r3, r3, #1
 8005bba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005bbc:	e002      	b.n	8005bc4 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1f9      	bne.n	8005bbe <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7ff ff3a 	bl	8005a48 <LL_ADC_IsInternalRegulatorEnabled>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10d      	bne.n	8005bf6 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bde:	f043 0210 	orr.w	r2, r3, #16
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bea:	f043 0201 	orr.w	r2, r3, #1
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7ff ff73 	bl	8005ae6 <LL_ADC_REG_IsConversionOngoing>
 8005c00:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c06:	f003 0310 	and.w	r3, r3, #16
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f040 80c7 	bne.w	8005d9e <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f040 80c3 	bne.w	8005d9e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c1c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005c20:	f043 0202 	orr.w	r2, r3, #2
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7ff ff33 	bl	8005a98 <LL_ADC_IsEnabled>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10b      	bne.n	8005c50 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c38:	4861      	ldr	r0, [pc, #388]	@ (8005dc0 <HAL_ADC_Init+0x28c>)
 8005c3a:	f7ff ff2d 	bl	8005a98 <LL_ADC_IsEnabled>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d105      	bne.n	8005c50 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	4619      	mov	r1, r3
 8005c4a:	485e      	ldr	r0, [pc, #376]	@ (8005dc4 <HAL_ADC_Init+0x290>)
 8005c4c:	f7ff fd8a 	bl	8005764 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	7e5b      	ldrb	r3, [r3, #25]
 8005c54:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005c5a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005c60:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005c66:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c6e:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8005c70:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005c72:	69ba      	ldr	r2, [r7, #24]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d106      	bne.n	8005c90 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c86:	3b01      	subs	r3, #1
 8005c88:	045b      	lsls	r3, r3, #17
 8005c8a:	69ba      	ldr	r2, [r7, #24]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d009      	beq.n	8005cac <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c9c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005ca6:	69ba      	ldr	r2, [r7, #24]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68da      	ldr	r2, [r3, #12]
 8005cb2:	4b45      	ldr	r3, [pc, #276]	@ (8005dc8 <HAL_ADC_Init+0x294>)
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	6812      	ldr	r2, [r2, #0]
 8005cba:	69b9      	ldr	r1, [r7, #24]
 8005cbc:	430b      	orrs	r3, r1
 8005cbe:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7ff ff0e 	bl	8005ae6 <LL_ADC_REG_IsConversionOngoing>
 8005cca:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7ff ff1b 	bl	8005b0c <LL_ADC_INJ_IsConversionOngoing>
 8005cd6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d13d      	bne.n	8005d5a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d13a      	bne.n	8005d5a <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005ce8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005cf0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d00:	f023 0302 	bic.w	r3, r3, #2
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	6812      	ldr	r2, [r2, #0]
 8005d08:	69b9      	ldr	r1, [r7, #24]
 8005d0a:	430b      	orrs	r3, r1
 8005d0c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d118      	bne.n	8005d4a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005d22:	f023 0304 	bic.w	r3, r3, #4
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005d2e:	4311      	orrs	r1, r2
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005d34:	4311      	orrs	r1, r2
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	431a      	orrs	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f042 0201 	orr.w	r2, r2, #1
 8005d46:	611a      	str	r2, [r3, #16]
 8005d48:	e007      	b.n	8005d5a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	691a      	ldr	r2, [r3, #16]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f022 0201 	bic.w	r2, r2, #1
 8005d58:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d10c      	bne.n	8005d7c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d68:	f023 010f 	bic.w	r1, r3, #15
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	69db      	ldr	r3, [r3, #28]
 8005d70:	1e5a      	subs	r2, r3, #1
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	430a      	orrs	r2, r1
 8005d78:	631a      	str	r2, [r3, #48]	@ 0x30
 8005d7a:	e007      	b.n	8005d8c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f022 020f 	bic.w	r2, r2, #15
 8005d8a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d90:	f023 0303 	bic.w	r3, r3, #3
 8005d94:	f043 0201 	orr.w	r2, r3, #1
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	655a      	str	r2, [r3, #84]	@ 0x54
 8005d9c:	e007      	b.n	8005dae <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005da2:	f043 0210 	orr.w	r2, r3, #16
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005dae:	7ffb      	ldrb	r3, [r7, #31]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3720      	adds	r7, #32
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	20000010 	.word	0x20000010
 8005dbc:	053e2d63 	.word	0x053e2d63
 8005dc0:	50040000 	.word	0x50040000
 8005dc4:	50040300 	.word	0x50040300
 8005dc8:	fff0c007 	.word	0xfff0c007

08005dcc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b086      	sub	sp, #24
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7ff fe82 	bl	8005ae6 <LL_ADC_REG_IsConversionOngoing>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d167      	bne.n	8005eb8 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d101      	bne.n	8005df6 <HAL_ADC_Start_DMA+0x2a>
 8005df2:	2302      	movs	r3, #2
 8005df4:	e063      	b.n	8005ebe <HAL_ADC_Start_DMA+0xf2>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f000 fe0c 	bl	8006a1c <ADC_Enable>
 8005e04:	4603      	mov	r3, r0
 8005e06:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005e08:	7dfb      	ldrb	r3, [r7, #23]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d14f      	bne.n	8005eae <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e12:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005e16:	f023 0301 	bic.w	r3, r3, #1
 8005e1a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d006      	beq.n	8005e3c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e32:	f023 0206 	bic.w	r2, r3, #6
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	659a      	str	r2, [r3, #88]	@ 0x58
 8005e3a:	e002      	b.n	8005e42 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e46:	4a20      	ldr	r2, [pc, #128]	@ (8005ec8 <HAL_ADC_Start_DMA+0xfc>)
 8005e48:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e4e:	4a1f      	ldr	r2, [pc, #124]	@ (8005ecc <HAL_ADC_Start_DMA+0x100>)
 8005e50:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e56:	4a1e      	ldr	r2, [pc, #120]	@ (8005ed0 <HAL_ADC_Start_DMA+0x104>)
 8005e58:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	221c      	movs	r2, #28
 8005e60:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	685a      	ldr	r2, [r3, #4]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f042 0210 	orr.w	r2, r2, #16
 8005e78:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68da      	ldr	r2, [r3, #12]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f042 0201 	orr.w	r2, r2, #1
 8005e88:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	3340      	adds	r3, #64	@ 0x40
 8005e94:	4619      	mov	r1, r3
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f001 f8b7 	bl	800700c <HAL_DMA_Start_IT>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7ff fe09 	bl	8005abe <LL_ADC_REG_StartConversion>
 8005eac:	e006      	b.n	8005ebc <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005eb6:	e001      	b.n	8005ebc <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005eb8:	2302      	movs	r3, #2
 8005eba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3718      	adds	r7, #24
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	08006b11 	.word	0x08006b11
 8005ecc:	08006be9 	.word	0x08006be9
 8005ed0:	08006c05 	.word	0x08006c05

08005ed4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b088      	sub	sp, #32
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005edc:	2300      	movs	r3, #0
 8005ede:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	f003 0302 	and.w	r3, r3, #2
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d017      	beq.n	8005f2a <HAL_ADC_IRQHandler+0x56>
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	f003 0302 	and.w	r3, r3, #2
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d012      	beq.n	8005f2a <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f08:	f003 0310 	and.w	r3, r3, #16
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d105      	bne.n	8005f1c <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f14:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 feb3 	bl	8006c88 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2202      	movs	r2, #2
 8005f28:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	f003 0304 	and.w	r3, r3, #4
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d004      	beq.n	8005f3e <HAL_ADC_IRQHandler+0x6a>
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	f003 0304 	and.w	r3, r3, #4
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d109      	bne.n	8005f52 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d05d      	beq.n	8006004 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	f003 0308 	and.w	r3, r3, #8
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d058      	beq.n	8006004 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f56:	f003 0310 	and.w	r3, r3, #16
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d105      	bne.n	8005f6a <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f62:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7ff fc81 	bl	8005876 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d03d      	beq.n	8005ff6 <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f88:	d035      	beq.n	8005ff6 <HAL_ADC_IRQHandler+0x122>
#endif /* ADC_SUPPORT_2_5_MSPS */
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0308 	and.w	r3, r3, #8
 8005f94:	2b08      	cmp	r3, #8
 8005f96:	d12e      	bne.n	8005ff6 <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7ff fda2 	bl	8005ae6 <LL_ADC_REG_IsConversionOngoing>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d11a      	bne.n	8005fde <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	685a      	ldr	r2, [r3, #4]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f022 020c 	bic.w	r2, r2, #12
 8005fb6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fbc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d112      	bne.n	8005ff6 <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fd4:	f043 0201 	orr.w	r2, r3, #1
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	655a      	str	r2, [r3, #84]	@ 0x54
 8005fdc:	e00b      	b.n	8005ff6 <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fe2:	f043 0210 	orr.w	r2, r3, #16
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fee:	f043 0201 	orr.w	r2, r3, #1
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f922 	bl	8006240 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	220c      	movs	r2, #12
 8006002:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	f003 0320 	and.w	r3, r3, #32
 800600a:	2b00      	cmp	r3, #0
 800600c:	d004      	beq.n	8006018 <HAL_ADC_IRQHandler+0x144>
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	f003 0320 	and.w	r3, r3, #32
 8006014:	2b00      	cmp	r3, #0
 8006016:	d109      	bne.n	800602c <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800601e:	2b00      	cmp	r3, #0
 8006020:	d074      	beq.n	800610c <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006028:	2b00      	cmp	r3, #0
 800602a:	d06f      	beq.n	800610c <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006030:	f003 0310 	and.w	r3, r3, #16
 8006034:	2b00      	cmp	r3, #0
 8006036:	d105      	bne.n	8006044 <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800603c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4618      	mov	r0, r3
 800604a:	f7ff fc61 	bl	8005910 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800604e:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4618      	mov	r0, r3
 8006056:	f7ff fc0e 	bl	8005876 <LL_ADC_REG_IsTriggerSourceSWStart>
 800605a:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d049      	beq.n	80060fe <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d007      	beq.n	8006084 <HAL_ADC_IRQHandler+0x1b0>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d041      	beq.n	80060fe <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8006080:	2b00      	cmp	r3, #0
 8006082:	d13c      	bne.n	80060fe <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800608e:	2b40      	cmp	r3, #64	@ 0x40
 8006090:	d135      	bne.n	80060fe <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800609c:	2b00      	cmp	r3, #0
 800609e:	d12e      	bne.n	80060fe <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7ff fd31 	bl	8005b0c <LL_ADC_INJ_IsConversionOngoing>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d11a      	bne.n	80060e6 <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	685a      	ldr	r2, [r3, #4]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80060be:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d112      	bne.n	80060fe <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060dc:	f043 0201 	orr.w	r2, r3, #1
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	655a      	str	r2, [r3, #84]	@ 0x54
 80060e4:	e00b      	b.n	80060fe <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060ea:	f043 0210 	orr.w	r2, r3, #16
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060f6:	f043 0201 	orr.w	r2, r3, #1
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 fd9a 	bl	8006c38 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2260      	movs	r2, #96	@ 0x60
 800610a:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006112:	2b00      	cmp	r3, #0
 8006114:	d011      	beq.n	800613a <HAL_ADC_IRQHandler+0x266>
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00c      	beq.n	800613a <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006124:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 f89b 	bl	8006268 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2280      	movs	r2, #128	@ 0x80
 8006138:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006140:	2b00      	cmp	r3, #0
 8006142:	d012      	beq.n	800616a <HAL_ADC_IRQHandler+0x296>
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00d      	beq.n	800616a <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006152:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 fd80 	bl	8006c60 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006168:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006170:	2b00      	cmp	r3, #0
 8006172:	d012      	beq.n	800619a <HAL_ADC_IRQHandler+0x2c6>
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00d      	beq.n	800619a <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006182:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 fd72 	bl	8006c74 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006198:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	f003 0310 	and.w	r3, r3, #16
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d02b      	beq.n	80061fc <HAL_ADC_IRQHandler+0x328>
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	f003 0310 	and.w	r3, r3, #16
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d026      	beq.n	80061fc <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d102      	bne.n	80061bc <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 80061b6:	2301      	movs	r3, #1
 80061b8:	61fb      	str	r3, [r7, #28]
 80061ba:	e009      	b.n	80061d0 <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7ff fb97 	bl	80058f4 <LL_ADC_REG_GetDMATransfer>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d001      	beq.n	80061d0 <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 80061cc:	2301      	movs	r3, #1
 80061ce:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d10e      	bne.n	80061f4 <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061da:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061e6:	f043 0202 	orr.w	r2, r3, #2
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 f844 	bl	800627c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2210      	movs	r2, #16
 80061fa:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006202:	2b00      	cmp	r3, #0
 8006204:	d018      	beq.n	8006238 <HAL_ADC_IRQHandler+0x364>
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800620c:	2b00      	cmp	r3, #0
 800620e:	d013      	beq.n	8006238 <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006214:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006220:	f043 0208 	orr.w	r2, r3, #8
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006230:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fd0a 	bl	8006c4c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 8006238:	bf00      	nop
 800623a:	3720      	adds	r7, #32
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b0b6      	sub	sp, #216	@ 0xd8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800629a:	2300      	movs	r3, #0
 800629c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80062a0:	2300      	movs	r3, #0
 80062a2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d101      	bne.n	80062b2 <HAL_ADC_ConfigChannel+0x22>
 80062ae:	2302      	movs	r3, #2
 80062b0:	e39f      	b.n	80069f2 <HAL_ADC_ConfigChannel+0x762>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4618      	mov	r0, r3
 80062c0:	f7ff fc11 	bl	8005ae6 <LL_ADC_REG_IsConversionOngoing>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f040 8384 	bne.w	80069d4 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6818      	ldr	r0, [r3, #0]
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	6859      	ldr	r1, [r3, #4]
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	461a      	mov	r2, r3
 80062da:	f7ff fadf 	bl	800589c <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7ff fbff 	bl	8005ae6 <LL_ADC_REG_IsConversionOngoing>
 80062e8:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4618      	mov	r0, r3
 80062f2:	f7ff fc0b 	bl	8005b0c <LL_ADC_INJ_IsConversionOngoing>
 80062f6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80062fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f040 81a6 	bne.w	8006650 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006304:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006308:	2b00      	cmp	r3, #0
 800630a:	f040 81a1 	bne.w	8006650 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6818      	ldr	r0, [r3, #0]
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	6819      	ldr	r1, [r3, #0]
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	461a      	mov	r2, r3
 800631c:	f7ff fb0b 	bl	8005936 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	695a      	ldr	r2, [r3, #20]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	08db      	lsrs	r3, r3, #3
 800632c:	f003 0303 	and.w	r3, r3, #3
 8006330:	005b      	lsls	r3, r3, #1
 8006332:	fa02 f303 	lsl.w	r3, r2, r3
 8006336:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	2b04      	cmp	r3, #4
 8006340:	d00a      	beq.n	8006358 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6818      	ldr	r0, [r3, #0]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	6919      	ldr	r1, [r3, #16]
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006352:	f7ff fa3b 	bl	80057cc <LL_ADC_SetOffset>
 8006356:	e17b      	b.n	8006650 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2100      	movs	r1, #0
 800635e:	4618      	mov	r0, r3
 8006360:	f7ff fa58 	bl	8005814 <LL_ADC_GetOffsetChannel>
 8006364:	4603      	mov	r3, r0
 8006366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800636a:	2b00      	cmp	r3, #0
 800636c:	d10a      	bne.n	8006384 <HAL_ADC_ConfigChannel+0xf4>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2100      	movs	r1, #0
 8006374:	4618      	mov	r0, r3
 8006376:	f7ff fa4d 	bl	8005814 <LL_ADC_GetOffsetChannel>
 800637a:	4603      	mov	r3, r0
 800637c:	0e9b      	lsrs	r3, r3, #26
 800637e:	f003 021f 	and.w	r2, r3, #31
 8006382:	e01e      	b.n	80063c2 <HAL_ADC_ConfigChannel+0x132>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2100      	movs	r1, #0
 800638a:	4618      	mov	r0, r3
 800638c:	f7ff fa42 	bl	8005814 <LL_ADC_GetOffsetChannel>
 8006390:	4603      	mov	r3, r0
 8006392:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006396:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800639a:	fa93 f3a3 	rbit	r3, r3
 800639e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80063a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80063a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80063aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 80063b2:	2320      	movs	r3, #32
 80063b4:	e004      	b.n	80063c0 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 80063b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80063ba:	fab3 f383 	clz	r3, r3
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	461a      	mov	r2, r3
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d105      	bne.n	80063da <HAL_ADC_ConfigChannel+0x14a>
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	0e9b      	lsrs	r3, r3, #26
 80063d4:	f003 031f 	and.w	r3, r3, #31
 80063d8:	e018      	b.n	800640c <HAL_ADC_ConfigChannel+0x17c>
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80063e6:	fa93 f3a3 	rbit	r3, r3
 80063ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80063ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80063f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80063f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d101      	bne.n	8006402 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 80063fe:	2320      	movs	r3, #32
 8006400:	e004      	b.n	800640c <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8006402:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006406:	fab3 f383 	clz	r3, r3
 800640a:	b2db      	uxtb	r3, r3
 800640c:	429a      	cmp	r2, r3
 800640e:	d106      	bne.n	800641e <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2200      	movs	r2, #0
 8006416:	2100      	movs	r1, #0
 8006418:	4618      	mov	r0, r3
 800641a:	f7ff fa11 	bl	8005840 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2101      	movs	r1, #1
 8006424:	4618      	mov	r0, r3
 8006426:	f7ff f9f5 	bl	8005814 <LL_ADC_GetOffsetChannel>
 800642a:	4603      	mov	r3, r0
 800642c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10a      	bne.n	800644a <HAL_ADC_ConfigChannel+0x1ba>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2101      	movs	r1, #1
 800643a:	4618      	mov	r0, r3
 800643c:	f7ff f9ea 	bl	8005814 <LL_ADC_GetOffsetChannel>
 8006440:	4603      	mov	r3, r0
 8006442:	0e9b      	lsrs	r3, r3, #26
 8006444:	f003 021f 	and.w	r2, r3, #31
 8006448:	e01e      	b.n	8006488 <HAL_ADC_ConfigChannel+0x1f8>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2101      	movs	r1, #1
 8006450:	4618      	mov	r0, r3
 8006452:	f7ff f9df 	bl	8005814 <LL_ADC_GetOffsetChannel>
 8006456:	4603      	mov	r3, r0
 8006458:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800645c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006460:	fa93 f3a3 	rbit	r3, r3
 8006464:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8006468:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800646c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8006470:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006474:	2b00      	cmp	r3, #0
 8006476:	d101      	bne.n	800647c <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8006478:	2320      	movs	r3, #32
 800647a:	e004      	b.n	8006486 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 800647c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006480:	fab3 f383 	clz	r3, r3
 8006484:	b2db      	uxtb	r3, r3
 8006486:	461a      	mov	r2, r3
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006490:	2b00      	cmp	r3, #0
 8006492:	d105      	bne.n	80064a0 <HAL_ADC_ConfigChannel+0x210>
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	0e9b      	lsrs	r3, r3, #26
 800649a:	f003 031f 	and.w	r3, r3, #31
 800649e:	e018      	b.n	80064d2 <HAL_ADC_ConfigChannel+0x242>
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064ac:	fa93 f3a3 	rbit	r3, r3
 80064b0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80064b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80064b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80064bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 80064c4:	2320      	movs	r3, #32
 80064c6:	e004      	b.n	80064d2 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 80064c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80064cc:	fab3 f383 	clz	r3, r3
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d106      	bne.n	80064e4 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2200      	movs	r2, #0
 80064dc:	2101      	movs	r1, #1
 80064de:	4618      	mov	r0, r3
 80064e0:	f7ff f9ae 	bl	8005840 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2102      	movs	r1, #2
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7ff f992 	bl	8005814 <LL_ADC_GetOffsetChannel>
 80064f0:	4603      	mov	r3, r0
 80064f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d10a      	bne.n	8006510 <HAL_ADC_ConfigChannel+0x280>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2102      	movs	r1, #2
 8006500:	4618      	mov	r0, r3
 8006502:	f7ff f987 	bl	8005814 <LL_ADC_GetOffsetChannel>
 8006506:	4603      	mov	r3, r0
 8006508:	0e9b      	lsrs	r3, r3, #26
 800650a:	f003 021f 	and.w	r2, r3, #31
 800650e:	e01e      	b.n	800654e <HAL_ADC_ConfigChannel+0x2be>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2102      	movs	r1, #2
 8006516:	4618      	mov	r0, r3
 8006518:	f7ff f97c 	bl	8005814 <LL_ADC_GetOffsetChannel>
 800651c:	4603      	mov	r3, r0
 800651e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006522:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006526:	fa93 f3a3 	rbit	r3, r3
 800652a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800652e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006532:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8006536:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800653a:	2b00      	cmp	r3, #0
 800653c:	d101      	bne.n	8006542 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 800653e:	2320      	movs	r3, #32
 8006540:	e004      	b.n	800654c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8006542:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006546:	fab3 f383 	clz	r3, r3
 800654a:	b2db      	uxtb	r3, r3
 800654c:	461a      	mov	r2, r3
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006556:	2b00      	cmp	r3, #0
 8006558:	d105      	bne.n	8006566 <HAL_ADC_ConfigChannel+0x2d6>
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	0e9b      	lsrs	r3, r3, #26
 8006560:	f003 031f 	and.w	r3, r3, #31
 8006564:	e016      	b.n	8006594 <HAL_ADC_ConfigChannel+0x304>
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800656e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006572:	fa93 f3a3 	rbit	r3, r3
 8006576:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8006578:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800657a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800657e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006582:	2b00      	cmp	r3, #0
 8006584:	d101      	bne.n	800658a <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8006586:	2320      	movs	r3, #32
 8006588:	e004      	b.n	8006594 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 800658a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800658e:	fab3 f383 	clz	r3, r3
 8006592:	b2db      	uxtb	r3, r3
 8006594:	429a      	cmp	r2, r3
 8006596:	d106      	bne.n	80065a6 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2200      	movs	r2, #0
 800659e:	2102      	movs	r1, #2
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7ff f94d 	bl	8005840 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2103      	movs	r1, #3
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7ff f931 	bl	8005814 <LL_ADC_GetOffsetChannel>
 80065b2:	4603      	mov	r3, r0
 80065b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d10a      	bne.n	80065d2 <HAL_ADC_ConfigChannel+0x342>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2103      	movs	r1, #3
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7ff f926 	bl	8005814 <LL_ADC_GetOffsetChannel>
 80065c8:	4603      	mov	r3, r0
 80065ca:	0e9b      	lsrs	r3, r3, #26
 80065cc:	f003 021f 	and.w	r2, r3, #31
 80065d0:	e017      	b.n	8006602 <HAL_ADC_ConfigChannel+0x372>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2103      	movs	r1, #3
 80065d8:	4618      	mov	r0, r3
 80065da:	f7ff f91b 	bl	8005814 <LL_ADC_GetOffsetChannel>
 80065de:	4603      	mov	r3, r0
 80065e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80065e4:	fa93 f3a3 	rbit	r3, r3
 80065e8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80065ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80065ec:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80065ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d101      	bne.n	80065f8 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 80065f4:	2320      	movs	r3, #32
 80065f6:	e003      	b.n	8006600 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 80065f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065fa:	fab3 f383 	clz	r3, r3
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	461a      	mov	r2, r3
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800660a:	2b00      	cmp	r3, #0
 800660c:	d105      	bne.n	800661a <HAL_ADC_ConfigChannel+0x38a>
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	0e9b      	lsrs	r3, r3, #26
 8006614:	f003 031f 	and.w	r3, r3, #31
 8006618:	e011      	b.n	800663e <HAL_ADC_ConfigChannel+0x3ae>
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006620:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006622:	fa93 f3a3 	rbit	r3, r3
 8006626:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8006628:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800662a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800662c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800662e:	2b00      	cmp	r3, #0
 8006630:	d101      	bne.n	8006636 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8006632:	2320      	movs	r3, #32
 8006634:	e003      	b.n	800663e <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8006636:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006638:	fab3 f383 	clz	r3, r3
 800663c:	b2db      	uxtb	r3, r3
 800663e:	429a      	cmp	r2, r3
 8006640:	d106      	bne.n	8006650 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2200      	movs	r2, #0
 8006648:	2103      	movs	r1, #3
 800664a:	4618      	mov	r0, r3
 800664c:	f7ff f8f8 	bl	8005840 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4618      	mov	r0, r3
 8006656:	f7ff fa1f 	bl	8005a98 <LL_ADC_IsEnabled>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	f040 81c2 	bne.w	80069e6 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6818      	ldr	r0, [r3, #0]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	6819      	ldr	r1, [r3, #0]
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	461a      	mov	r2, r3
 8006670:	f7ff f98c 	bl	800598c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	4a8e      	ldr	r2, [pc, #568]	@ (80068b4 <HAL_ADC_ConfigChannel+0x624>)
 800667a:	4293      	cmp	r3, r2
 800667c:	f040 8130 	bne.w	80068e0 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10b      	bne.n	80066a8 <HAL_ADC_ConfigChannel+0x418>
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	0e9b      	lsrs	r3, r3, #26
 8006696:	3301      	adds	r3, #1
 8006698:	f003 031f 	and.w	r3, r3, #31
 800669c:	2b09      	cmp	r3, #9
 800669e:	bf94      	ite	ls
 80066a0:	2301      	movls	r3, #1
 80066a2:	2300      	movhi	r3, #0
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	e019      	b.n	80066dc <HAL_ADC_ConfigChannel+0x44c>
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066b0:	fa93 f3a3 	rbit	r3, r3
 80066b4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80066b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80066b8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80066ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d101      	bne.n	80066c4 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 80066c0:	2320      	movs	r3, #32
 80066c2:	e003      	b.n	80066cc <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 80066c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80066c6:	fab3 f383 	clz	r3, r3
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	3301      	adds	r3, #1
 80066ce:	f003 031f 	and.w	r3, r3, #31
 80066d2:	2b09      	cmp	r3, #9
 80066d4:	bf94      	ite	ls
 80066d6:	2301      	movls	r3, #1
 80066d8:	2300      	movhi	r3, #0
 80066da:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d079      	beq.n	80067d4 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d107      	bne.n	80066fc <HAL_ADC_ConfigChannel+0x46c>
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	0e9b      	lsrs	r3, r3, #26
 80066f2:	3301      	adds	r3, #1
 80066f4:	069b      	lsls	r3, r3, #26
 80066f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80066fa:	e015      	b.n	8006728 <HAL_ADC_ConfigChannel+0x498>
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006702:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006704:	fa93 f3a3 	rbit	r3, r3
 8006708:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800670a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800670c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800670e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006710:	2b00      	cmp	r3, #0
 8006712:	d101      	bne.n	8006718 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8006714:	2320      	movs	r3, #32
 8006716:	e003      	b.n	8006720 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8006718:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800671a:	fab3 f383 	clz	r3, r3
 800671e:	b2db      	uxtb	r3, r3
 8006720:	3301      	adds	r3, #1
 8006722:	069b      	lsls	r3, r3, #26
 8006724:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006730:	2b00      	cmp	r3, #0
 8006732:	d109      	bne.n	8006748 <HAL_ADC_ConfigChannel+0x4b8>
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	0e9b      	lsrs	r3, r3, #26
 800673a:	3301      	adds	r3, #1
 800673c:	f003 031f 	and.w	r3, r3, #31
 8006740:	2101      	movs	r1, #1
 8006742:	fa01 f303 	lsl.w	r3, r1, r3
 8006746:	e017      	b.n	8006778 <HAL_ADC_ConfigChannel+0x4e8>
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800674e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006750:	fa93 f3a3 	rbit	r3, r3
 8006754:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8006756:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006758:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800675a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800675c:	2b00      	cmp	r3, #0
 800675e:	d101      	bne.n	8006764 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8006760:	2320      	movs	r3, #32
 8006762:	e003      	b.n	800676c <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8006764:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006766:	fab3 f383 	clz	r3, r3
 800676a:	b2db      	uxtb	r3, r3
 800676c:	3301      	adds	r3, #1
 800676e:	f003 031f 	and.w	r3, r3, #31
 8006772:	2101      	movs	r1, #1
 8006774:	fa01 f303 	lsl.w	r3, r1, r3
 8006778:	ea42 0103 	orr.w	r1, r2, r3
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006784:	2b00      	cmp	r3, #0
 8006786:	d10a      	bne.n	800679e <HAL_ADC_ConfigChannel+0x50e>
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	0e9b      	lsrs	r3, r3, #26
 800678e:	3301      	adds	r3, #1
 8006790:	f003 021f 	and.w	r2, r3, #31
 8006794:	4613      	mov	r3, r2
 8006796:	005b      	lsls	r3, r3, #1
 8006798:	4413      	add	r3, r2
 800679a:	051b      	lsls	r3, r3, #20
 800679c:	e018      	b.n	80067d0 <HAL_ADC_ConfigChannel+0x540>
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067a6:	fa93 f3a3 	rbit	r3, r3
 80067aa:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80067ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80067b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80067b6:	2320      	movs	r3, #32
 80067b8:	e003      	b.n	80067c2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80067ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067bc:	fab3 f383 	clz	r3, r3
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	3301      	adds	r3, #1
 80067c4:	f003 021f 	and.w	r2, r3, #31
 80067c8:	4613      	mov	r3, r2
 80067ca:	005b      	lsls	r3, r3, #1
 80067cc:	4413      	add	r3, r2
 80067ce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80067d0:	430b      	orrs	r3, r1
 80067d2:	e080      	b.n	80068d6 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d107      	bne.n	80067f0 <HAL_ADC_ConfigChannel+0x560>
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	0e9b      	lsrs	r3, r3, #26
 80067e6:	3301      	adds	r3, #1
 80067e8:	069b      	lsls	r3, r3, #26
 80067ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80067ee:	e015      	b.n	800681c <HAL_ADC_ConfigChannel+0x58c>
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067f8:	fa93 f3a3 	rbit	r3, r3
 80067fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80067fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006800:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8006802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006804:	2b00      	cmp	r3, #0
 8006806:	d101      	bne.n	800680c <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8006808:	2320      	movs	r3, #32
 800680a:	e003      	b.n	8006814 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 800680c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800680e:	fab3 f383 	clz	r3, r3
 8006812:	b2db      	uxtb	r3, r3
 8006814:	3301      	adds	r3, #1
 8006816:	069b      	lsls	r3, r3, #26
 8006818:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006824:	2b00      	cmp	r3, #0
 8006826:	d109      	bne.n	800683c <HAL_ADC_ConfigChannel+0x5ac>
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	0e9b      	lsrs	r3, r3, #26
 800682e:	3301      	adds	r3, #1
 8006830:	f003 031f 	and.w	r3, r3, #31
 8006834:	2101      	movs	r1, #1
 8006836:	fa01 f303 	lsl.w	r3, r1, r3
 800683a:	e017      	b.n	800686c <HAL_ADC_ConfigChannel+0x5dc>
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006842:	6a3b      	ldr	r3, [r7, #32]
 8006844:	fa93 f3a3 	rbit	r3, r3
 8006848:	61fb      	str	r3, [r7, #28]
  return result;
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800684e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006850:	2b00      	cmp	r3, #0
 8006852:	d101      	bne.n	8006858 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8006854:	2320      	movs	r3, #32
 8006856:	e003      	b.n	8006860 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8006858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800685a:	fab3 f383 	clz	r3, r3
 800685e:	b2db      	uxtb	r3, r3
 8006860:	3301      	adds	r3, #1
 8006862:	f003 031f 	and.w	r3, r3, #31
 8006866:	2101      	movs	r1, #1
 8006868:	fa01 f303 	lsl.w	r3, r1, r3
 800686c:	ea42 0103 	orr.w	r1, r2, r3
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006878:	2b00      	cmp	r3, #0
 800687a:	d10d      	bne.n	8006898 <HAL_ADC_ConfigChannel+0x608>
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	0e9b      	lsrs	r3, r3, #26
 8006882:	3301      	adds	r3, #1
 8006884:	f003 021f 	and.w	r2, r3, #31
 8006888:	4613      	mov	r3, r2
 800688a:	005b      	lsls	r3, r3, #1
 800688c:	4413      	add	r3, r2
 800688e:	3b1e      	subs	r3, #30
 8006890:	051b      	lsls	r3, r3, #20
 8006892:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006896:	e01d      	b.n	80068d4 <HAL_ADC_ConfigChannel+0x644>
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	fa93 f3a3 	rbit	r3, r3
 80068a4:	613b      	str	r3, [r7, #16]
  return result;
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d103      	bne.n	80068b8 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 80068b0:	2320      	movs	r3, #32
 80068b2:	e005      	b.n	80068c0 <HAL_ADC_ConfigChannel+0x630>
 80068b4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	fab3 f383 	clz	r3, r3
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	3301      	adds	r3, #1
 80068c2:	f003 021f 	and.w	r2, r3, #31
 80068c6:	4613      	mov	r3, r2
 80068c8:	005b      	lsls	r3, r3, #1
 80068ca:	4413      	add	r3, r2
 80068cc:	3b1e      	subs	r3, #30
 80068ce:	051b      	lsls	r3, r3, #20
 80068d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80068d4:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80068da:	4619      	mov	r1, r3
 80068dc:	f7ff f82b 	bl	8005936 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	4b45      	ldr	r3, [pc, #276]	@ (80069fc <HAL_ADC_ConfigChannel+0x76c>)
 80068e6:	4013      	ands	r3, r2
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d07c      	beq.n	80069e6 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80068ec:	4844      	ldr	r0, [pc, #272]	@ (8006a00 <HAL_ADC_ConfigChannel+0x770>)
 80068ee:	f7fe ff5f 	bl	80057b0 <LL_ADC_GetCommonPathInternalCh>
 80068f2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80068f6:	4843      	ldr	r0, [pc, #268]	@ (8006a04 <HAL_ADC_ConfigChannel+0x774>)
 80068f8:	f7ff f8ce 	bl	8005a98 <LL_ADC_IsEnabled>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d15e      	bne.n	80069c0 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a40      	ldr	r2, [pc, #256]	@ (8006a08 <HAL_ADC_ConfigChannel+0x778>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d127      	bne.n	800695c <HAL_ADC_ConfigChannel+0x6cc>
 800690c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006910:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006914:	2b00      	cmp	r3, #0
 8006916:	d121      	bne.n	800695c <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a39      	ldr	r2, [pc, #228]	@ (8006a04 <HAL_ADC_ConfigChannel+0x774>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d161      	bne.n	80069e6 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006922:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006926:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800692a:	4619      	mov	r1, r3
 800692c:	4834      	ldr	r0, [pc, #208]	@ (8006a00 <HAL_ADC_ConfigChannel+0x770>)
 800692e:	f7fe ff2c 	bl	800578a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006932:	4b36      	ldr	r3, [pc, #216]	@ (8006a0c <HAL_ADC_ConfigChannel+0x77c>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	099b      	lsrs	r3, r3, #6
 8006938:	4a35      	ldr	r2, [pc, #212]	@ (8006a10 <HAL_ADC_ConfigChannel+0x780>)
 800693a:	fba2 2303 	umull	r2, r3, r2, r3
 800693e:	099b      	lsrs	r3, r3, #6
 8006940:	1c5a      	adds	r2, r3, #1
 8006942:	4613      	mov	r3, r2
 8006944:	005b      	lsls	r3, r3, #1
 8006946:	4413      	add	r3, r2
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800694c:	e002      	b.n	8006954 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	3b01      	subs	r3, #1
 8006952:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1f9      	bne.n	800694e <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800695a:	e044      	b.n	80069e6 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a2c      	ldr	r2, [pc, #176]	@ (8006a14 <HAL_ADC_ConfigChannel+0x784>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d113      	bne.n	800698e <HAL_ADC_ConfigChannel+0x6fe>
 8006966:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800696a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10d      	bne.n	800698e <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a23      	ldr	r2, [pc, #140]	@ (8006a04 <HAL_ADC_ConfigChannel+0x774>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d134      	bne.n	80069e6 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800697c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006980:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006984:	4619      	mov	r1, r3
 8006986:	481e      	ldr	r0, [pc, #120]	@ (8006a00 <HAL_ADC_ConfigChannel+0x770>)
 8006988:	f7fe feff 	bl	800578a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800698c:	e02b      	b.n	80069e6 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a21      	ldr	r2, [pc, #132]	@ (8006a18 <HAL_ADC_ConfigChannel+0x788>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d126      	bne.n	80069e6 <HAL_ADC_ConfigChannel+0x756>
 8006998:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800699c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d120      	bne.n	80069e6 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a16      	ldr	r2, [pc, #88]	@ (8006a04 <HAL_ADC_ConfigChannel+0x774>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d11b      	bne.n	80069e6 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80069ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80069b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80069b6:	4619      	mov	r1, r3
 80069b8:	4811      	ldr	r0, [pc, #68]	@ (8006a00 <HAL_ADC_ConfigChannel+0x770>)
 80069ba:	f7fe fee6 	bl	800578a <LL_ADC_SetCommonPathInternalCh>
 80069be:	e012      	b.n	80069e6 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069c4:	f043 0220 	orr.w	r2, r3, #32
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80069d2:	e008      	b.n	80069e6 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069d8:	f043 0220 	orr.w	r2, r3, #32
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 80069ee:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	37d8      	adds	r7, #216	@ 0xd8
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	80080000 	.word	0x80080000
 8006a00:	50040300 	.word	0x50040300
 8006a04:	50040000 	.word	0x50040000
 8006a08:	c7520000 	.word	0xc7520000
 8006a0c:	20000010 	.word	0x20000010
 8006a10:	053e2d63 	.word	0x053e2d63
 8006a14:	cb840000 	.word	0xcb840000
 8006a18:	80000001 	.word	0x80000001

08006a1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006a24:	2300      	movs	r3, #0
 8006a26:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7ff f833 	bl	8005a98 <LL_ADC_IsEnabled>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d15e      	bne.n	8006af6 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	689a      	ldr	r2, [r3, #8]
 8006a3e:	4b30      	ldr	r3, [pc, #192]	@ (8006b00 <ADC_Enable+0xe4>)
 8006a40:	4013      	ands	r3, r2
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00d      	beq.n	8006a62 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a4a:	f043 0210 	orr.w	r2, r3, #16
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a56:	f043 0201 	orr.w	r2, r3, #1
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e04a      	b.n	8006af8 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7ff f802 	bl	8005a70 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006a6c:	4825      	ldr	r0, [pc, #148]	@ (8006b04 <ADC_Enable+0xe8>)
 8006a6e:	f7fe fe9f 	bl	80057b0 <LL_ADC_GetCommonPathInternalCh>
 8006a72:	4603      	mov	r3, r0
 8006a74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00f      	beq.n	8006a9c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006a7c:	4b22      	ldr	r3, [pc, #136]	@ (8006b08 <ADC_Enable+0xec>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	099b      	lsrs	r3, r3, #6
 8006a82:	4a22      	ldr	r2, [pc, #136]	@ (8006b0c <ADC_Enable+0xf0>)
 8006a84:	fba2 2303 	umull	r2, r3, r2, r3
 8006a88:	099b      	lsrs	r3, r3, #6
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8006a8e:	e002      	b.n	8006a96 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	3b01      	subs	r3, #1
 8006a94:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d1f9      	bne.n	8006a90 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8006a9c:	f7fe fe26 	bl	80056ec <HAL_GetTick>
 8006aa0:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006aa2:	e021      	b.n	8006ae8 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7fe fff5 	bl	8005a98 <LL_ADC_IsEnabled>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d104      	bne.n	8006abe <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f7fe ffd9 	bl	8005a70 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006abe:	f7fe fe15 	bl	80056ec <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d90d      	bls.n	8006ae8 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ad0:	f043 0210 	orr.w	r2, r3, #16
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006adc:	f043 0201 	orr.w	r2, r3, #1
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e007      	b.n	8006af8 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0301 	and.w	r3, r3, #1
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d1d6      	bne.n	8006aa4 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	8000003f 	.word	0x8000003f
 8006b04:	50040300 	.word	0x50040300
 8006b08:	20000010 	.word	0x20000010
 8006b0c:	053e2d63 	.word	0x053e2d63

08006b10 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b1c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b22:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d14b      	bne.n	8006bc2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b2e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0308 	and.w	r3, r3, #8
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d021      	beq.n	8006b88 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f7fe fe94 	bl	8005876 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d032      	beq.n	8006bba <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d12b      	bne.n	8006bba <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b66:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d11f      	bne.n	8006bba <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b7e:	f043 0201 	orr.w	r2, r3, #1
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	655a      	str	r2, [r3, #84]	@ 0x54
 8006b86:	e018      	b.n	8006bba <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	f003 0302 	and.w	r3, r3, #2
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d111      	bne.n	8006bba <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b9a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ba6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d105      	bne.n	8006bba <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bb2:	f043 0201 	orr.w	r2, r3, #1
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006bba:	68f8      	ldr	r0, [r7, #12]
 8006bbc:	f7ff fb40 	bl	8006240 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006bc0:	e00e      	b.n	8006be0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bc6:	f003 0310 	and.w	r3, r3, #16
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d003      	beq.n	8006bd6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f7ff fb54 	bl	800627c <HAL_ADC_ErrorCallback>
}
 8006bd4:	e004      	b.n	8006be0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	4798      	blx	r3
}
 8006be0:	bf00      	nop
 8006be2:	3710      	adds	r7, #16
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bf4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f7ff fb2c 	bl	8006254 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006bfc:	bf00      	nop
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c10:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c16:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c22:	f043 0204 	orr.w	r2, r3, #4
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f7ff fb26 	bl	800627c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006c30:	bf00      	nop
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006c54:	bf00      	nop
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006c68:	bf00      	nop
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006c7c:	bf00      	nop
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006c90:	bf00      	nop
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f003 0307 	and.w	r3, r3, #7
 8006caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006cac:	4b0c      	ldr	r3, [pc, #48]	@ (8006ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006cb8:	4013      	ands	r3, r2
 8006cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006cc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006cc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006cce:	4a04      	ldr	r2, [pc, #16]	@ (8006ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	60d3      	str	r3, [r2, #12]
}
 8006cd4:	bf00      	nop
 8006cd6:	3714      	adds	r7, #20
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr
 8006ce0:	e000ed00 	.word	0xe000ed00

08006ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ce8:	4b04      	ldr	r3, [pc, #16]	@ (8006cfc <__NVIC_GetPriorityGrouping+0x18>)
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	0a1b      	lsrs	r3, r3, #8
 8006cee:	f003 0307 	and.w	r3, r3, #7
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	e000ed00 	.word	0xe000ed00

08006d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	4603      	mov	r3, r0
 8006d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	db0b      	blt.n	8006d2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d12:	79fb      	ldrb	r3, [r7, #7]
 8006d14:	f003 021f 	and.w	r2, r3, #31
 8006d18:	4907      	ldr	r1, [pc, #28]	@ (8006d38 <__NVIC_EnableIRQ+0x38>)
 8006d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d1e:	095b      	lsrs	r3, r3, #5
 8006d20:	2001      	movs	r0, #1
 8006d22:	fa00 f202 	lsl.w	r2, r0, r2
 8006d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006d2a:	bf00      	nop
 8006d2c:	370c      	adds	r7, #12
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	e000e100 	.word	0xe000e100

08006d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	4603      	mov	r3, r0
 8006d44:	6039      	str	r1, [r7, #0]
 8006d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	db0a      	blt.n	8006d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	b2da      	uxtb	r2, r3
 8006d54:	490c      	ldr	r1, [pc, #48]	@ (8006d88 <__NVIC_SetPriority+0x4c>)
 8006d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d5a:	0112      	lsls	r2, r2, #4
 8006d5c:	b2d2      	uxtb	r2, r2
 8006d5e:	440b      	add	r3, r1
 8006d60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006d64:	e00a      	b.n	8006d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	b2da      	uxtb	r2, r3
 8006d6a:	4908      	ldr	r1, [pc, #32]	@ (8006d8c <__NVIC_SetPriority+0x50>)
 8006d6c:	79fb      	ldrb	r3, [r7, #7]
 8006d6e:	f003 030f 	and.w	r3, r3, #15
 8006d72:	3b04      	subs	r3, #4
 8006d74:	0112      	lsls	r2, r2, #4
 8006d76:	b2d2      	uxtb	r2, r2
 8006d78:	440b      	add	r3, r1
 8006d7a:	761a      	strb	r2, [r3, #24]
}
 8006d7c:	bf00      	nop
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr
 8006d88:	e000e100 	.word	0xe000e100
 8006d8c:	e000ed00 	.word	0xe000ed00

08006d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b089      	sub	sp, #36	@ 0x24
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f003 0307 	and.w	r3, r3, #7
 8006da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	f1c3 0307 	rsb	r3, r3, #7
 8006daa:	2b04      	cmp	r3, #4
 8006dac:	bf28      	it	cs
 8006dae:	2304      	movcs	r3, #4
 8006db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	3304      	adds	r3, #4
 8006db6:	2b06      	cmp	r3, #6
 8006db8:	d902      	bls.n	8006dc0 <NVIC_EncodePriority+0x30>
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	3b03      	subs	r3, #3
 8006dbe:	e000      	b.n	8006dc2 <NVIC_EncodePriority+0x32>
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	fa02 f303 	lsl.w	r3, r2, r3
 8006dce:	43da      	mvns	r2, r3
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	401a      	ands	r2, r3
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	fa01 f303 	lsl.w	r3, r1, r3
 8006de2:	43d9      	mvns	r1, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006de8:	4313      	orrs	r3, r2
         );
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3724      	adds	r7, #36	@ 0x24
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
	...

08006df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	3b01      	subs	r3, #1
 8006e04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e08:	d301      	bcc.n	8006e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e00f      	b.n	8006e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8006e38 <SysTick_Config+0x40>)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	3b01      	subs	r3, #1
 8006e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006e16:	210f      	movs	r1, #15
 8006e18:	f04f 30ff 	mov.w	r0, #4294967295
 8006e1c:	f7ff ff8e 	bl	8006d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006e20:	4b05      	ldr	r3, [pc, #20]	@ (8006e38 <SysTick_Config+0x40>)
 8006e22:	2200      	movs	r2, #0
 8006e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006e26:	4b04      	ldr	r3, [pc, #16]	@ (8006e38 <SysTick_Config+0x40>)
 8006e28:	2207      	movs	r2, #7
 8006e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	e000e010 	.word	0xe000e010

08006e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f7ff ff29 	bl	8006c9c <__NVIC_SetPriorityGrouping>
}
 8006e4a:	bf00      	nop
 8006e4c:	3708      	adds	r7, #8
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b086      	sub	sp, #24
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	4603      	mov	r3, r0
 8006e5a:	60b9      	str	r1, [r7, #8]
 8006e5c:	607a      	str	r2, [r7, #4]
 8006e5e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006e60:	f7ff ff40 	bl	8006ce4 <__NVIC_GetPriorityGrouping>
 8006e64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	68b9      	ldr	r1, [r7, #8]
 8006e6a:	6978      	ldr	r0, [r7, #20]
 8006e6c:	f7ff ff90 	bl	8006d90 <NVIC_EncodePriority>
 8006e70:	4602      	mov	r2, r0
 8006e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e76:	4611      	mov	r1, r2
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f7ff ff5f 	bl	8006d3c <__NVIC_SetPriority>
}
 8006e7e:	bf00      	nop
 8006e80:	3718      	adds	r7, #24
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b082      	sub	sp, #8
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7ff ff33 	bl	8006d00 <__NVIC_EnableIRQ>
}
 8006e9a:	bf00      	nop
 8006e9c:	3708      	adds	r7, #8
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b082      	sub	sp, #8
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f7ff ffa4 	bl	8006df8 <SysTick_Config>
 8006eb0:	4603      	mov	r3, r0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3708      	adds	r7, #8
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
	...

08006ebc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d101      	bne.n	8006ece <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e08e      	b.n	8006fec <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	4b47      	ldr	r3, [pc, #284]	@ (8006ff4 <HAL_DMA_Init+0x138>)
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d80f      	bhi.n	8006efa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	461a      	mov	r2, r3
 8006ee0:	4b45      	ldr	r3, [pc, #276]	@ (8006ff8 <HAL_DMA_Init+0x13c>)
 8006ee2:	4413      	add	r3, r2
 8006ee4:	4a45      	ldr	r2, [pc, #276]	@ (8006ffc <HAL_DMA_Init+0x140>)
 8006ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8006eea:	091b      	lsrs	r3, r3, #4
 8006eec:	009a      	lsls	r2, r3, #2
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a42      	ldr	r2, [pc, #264]	@ (8007000 <HAL_DMA_Init+0x144>)
 8006ef6:	641a      	str	r2, [r3, #64]	@ 0x40
 8006ef8:	e00e      	b.n	8006f18 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	461a      	mov	r2, r3
 8006f00:	4b40      	ldr	r3, [pc, #256]	@ (8007004 <HAL_DMA_Init+0x148>)
 8006f02:	4413      	add	r3, r2
 8006f04:	4a3d      	ldr	r2, [pc, #244]	@ (8006ffc <HAL_DMA_Init+0x140>)
 8006f06:	fba2 2303 	umull	r2, r3, r2, r3
 8006f0a:	091b      	lsrs	r3, r3, #4
 8006f0c:	009a      	lsls	r2, r3, #2
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a3c      	ldr	r2, [pc, #240]	@ (8007008 <HAL_DMA_Init+0x14c>)
 8006f16:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006f2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f32:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006f3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a1b      	ldr	r3, [r3, #32]
 8006f5a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 fa24 	bl	80073b8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f78:	d102      	bne.n	8006f80 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	685a      	ldr	r2, [r3, #4]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f88:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8006f8c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006f96:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d010      	beq.n	8006fc2 <HAL_DMA_Init+0x106>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	2b04      	cmp	r3, #4
 8006fa6:	d80c      	bhi.n	8006fc2 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 fa43 	bl	8007434 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006fbe:	605a      	str	r2, [r3, #4]
 8006fc0:	e008      	b.n	8006fd4 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	40020407 	.word	0x40020407
 8006ff8:	bffdfff8 	.word	0xbffdfff8
 8006ffc:	cccccccd 	.word	0xcccccccd
 8007000:	40020000 	.word	0x40020000
 8007004:	bffdfbf8 	.word	0xbffdfbf8
 8007008:	40020400 	.word	0x40020400

0800700c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b086      	sub	sp, #24
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	607a      	str	r2, [r7, #4]
 8007018:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800701a:	2300      	movs	r3, #0
 800701c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007024:	2b01      	cmp	r3, #1
 8007026:	d101      	bne.n	800702c <HAL_DMA_Start_IT+0x20>
 8007028:	2302      	movs	r3, #2
 800702a:	e066      	b.n	80070fa <HAL_DMA_Start_IT+0xee>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800703a:	b2db      	uxtb	r3, r3
 800703c:	2b01      	cmp	r3, #1
 800703e:	d155      	bne.n	80070ec <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2202      	movs	r2, #2
 8007044:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2200      	movs	r2, #0
 800704c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f022 0201 	bic.w	r2, r2, #1
 800705c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	68b9      	ldr	r1, [r7, #8]
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f000 f968 	bl	800733a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800706e:	2b00      	cmp	r3, #0
 8007070:	d008      	beq.n	8007084 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f042 020e 	orr.w	r2, r2, #14
 8007080:	601a      	str	r2, [r3, #0]
 8007082:	e00f      	b.n	80070a4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f022 0204 	bic.w	r2, r2, #4
 8007092:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f042 020a 	orr.w	r2, r2, #10
 80070a2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d007      	beq.n	80070c2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80070c0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d007      	beq.n	80070da <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80070d8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f042 0201 	orr.w	r2, r2, #1
 80070e8:	601a      	str	r2, [r3, #0]
 80070ea:	e005      	b.n	80070f8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80070f4:	2302      	movs	r3, #2
 80070f6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80070f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3718      	adds	r7, #24
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b084      	sub	sp, #16
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800710a:	2300      	movs	r3, #0
 800710c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b02      	cmp	r3, #2
 8007118:	d005      	beq.n	8007126 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2204      	movs	r2, #4
 800711e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	73fb      	strb	r3, [r7, #15]
 8007124:	e047      	b.n	80071b6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f022 020e 	bic.w	r2, r2, #14
 8007134:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f022 0201 	bic.w	r2, r2, #1
 8007144:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007150:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007154:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800715a:	f003 021c 	and.w	r2, r3, #28
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007162:	2101      	movs	r1, #1
 8007164:	fa01 f202 	lsl.w	r2, r1, r2
 8007168:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007172:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00c      	beq.n	8007196 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007186:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800718a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007194:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d003      	beq.n	80071b6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	4798      	blx	r3
    }
  }
  return status;
 80071b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3710      	adds	r7, #16
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071dc:	f003 031c 	and.w	r3, r3, #28
 80071e0:	2204      	movs	r2, #4
 80071e2:	409a      	lsls	r2, r3
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	4013      	ands	r3, r2
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d026      	beq.n	800723a <HAL_DMA_IRQHandler+0x7a>
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	f003 0304 	and.w	r3, r3, #4
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d021      	beq.n	800723a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 0320 	and.w	r3, r3, #32
 8007200:	2b00      	cmp	r3, #0
 8007202:	d107      	bne.n	8007214 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f022 0204 	bic.w	r2, r2, #4
 8007212:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007218:	f003 021c 	and.w	r2, r3, #28
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007220:	2104      	movs	r1, #4
 8007222:	fa01 f202 	lsl.w	r2, r1, r2
 8007226:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800722c:	2b00      	cmp	r3, #0
 800722e:	d071      	beq.n	8007314 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007238:	e06c      	b.n	8007314 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800723e:	f003 031c 	and.w	r3, r3, #28
 8007242:	2202      	movs	r2, #2
 8007244:	409a      	lsls	r2, r3
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	4013      	ands	r3, r2
 800724a:	2b00      	cmp	r3, #0
 800724c:	d02e      	beq.n	80072ac <HAL_DMA_IRQHandler+0xec>
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	f003 0302 	and.w	r3, r3, #2
 8007254:	2b00      	cmp	r3, #0
 8007256:	d029      	beq.n	80072ac <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 0320 	and.w	r3, r3, #32
 8007262:	2b00      	cmp	r3, #0
 8007264:	d10b      	bne.n	800727e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f022 020a 	bic.w	r2, r2, #10
 8007274:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2201      	movs	r2, #1
 800727a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007282:	f003 021c 	and.w	r2, r3, #28
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800728a:	2102      	movs	r1, #2
 800728c:	fa01 f202 	lsl.w	r2, r1, r2
 8007290:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d038      	beq.n	8007314 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80072aa:	e033      	b.n	8007314 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072b0:	f003 031c 	and.w	r3, r3, #28
 80072b4:	2208      	movs	r2, #8
 80072b6:	409a      	lsls	r2, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	4013      	ands	r3, r2
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d02a      	beq.n	8007316 <HAL_DMA_IRQHandler+0x156>
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	f003 0308 	and.w	r3, r3, #8
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d025      	beq.n	8007316 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f022 020e 	bic.w	r2, r2, #14
 80072d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072de:	f003 021c 	and.w	r2, r3, #28
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e6:	2101      	movs	r1, #1
 80072e8:	fa01 f202 	lsl.w	r2, r1, r2
 80072ec:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2201      	movs	r2, #1
 80072f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007308:	2b00      	cmp	r3, #0
 800730a:	d004      	beq.n	8007316 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007314:	bf00      	nop
 8007316:	bf00      	nop
}
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800731e:	b480      	push	{r7}
 8007320:	b083      	sub	sp, #12
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800732c:	b2db      	uxtb	r3, r3
}
 800732e:	4618      	mov	r0, r3
 8007330:	370c      	adds	r7, #12
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr

0800733a <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800733a:	b480      	push	{r7}
 800733c:	b085      	sub	sp, #20
 800733e:	af00      	add	r7, sp, #0
 8007340:	60f8      	str	r0, [r7, #12]
 8007342:	60b9      	str	r1, [r7, #8]
 8007344:	607a      	str	r2, [r7, #4]
 8007346:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007350:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007356:	2b00      	cmp	r3, #0
 8007358:	d004      	beq.n	8007364 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800735e:	68fa      	ldr	r2, [r7, #12]
 8007360:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007362:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007368:	f003 021c 	and.w	r2, r3, #28
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007370:	2101      	movs	r1, #1
 8007372:	fa01 f202 	lsl.w	r2, r1, r2
 8007376:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	683a      	ldr	r2, [r7, #0]
 800737e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	2b10      	cmp	r3, #16
 8007386:	d108      	bne.n	800739a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68ba      	ldr	r2, [r7, #8]
 8007396:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007398:	e007      	b.n	80073aa <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68ba      	ldr	r2, [r7, #8]
 80073a0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	60da      	str	r2, [r3, #12]
}
 80073aa:	bf00      	nop
 80073ac:	3714      	adds	r7, #20
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
	...

080073b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	461a      	mov	r2, r3
 80073c6:	4b17      	ldr	r3, [pc, #92]	@ (8007424 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d80a      	bhi.n	80073e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073d0:	089b      	lsrs	r3, r3, #2
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80073d8:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	6493      	str	r3, [r2, #72]	@ 0x48
 80073e0:	e007      	b.n	80073f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073e6:	089b      	lsrs	r3, r3, #2
 80073e8:	009a      	lsls	r2, r3, #2
 80073ea:	4b0f      	ldr	r3, [pc, #60]	@ (8007428 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80073ec:	4413      	add	r3, r2
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	3b08      	subs	r3, #8
 80073fa:	4a0c      	ldr	r2, [pc, #48]	@ (800742c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80073fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007400:	091b      	lsrs	r3, r3, #4
 8007402:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4a0a      	ldr	r2, [pc, #40]	@ (8007430 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007408:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f003 031f 	and.w	r3, r3, #31
 8007410:	2201      	movs	r2, #1
 8007412:	409a      	lsls	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007418:	bf00      	nop
 800741a:	3714      	adds	r7, #20
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr
 8007424:	40020407 	.word	0x40020407
 8007428:	4002081c 	.word	0x4002081c
 800742c:	cccccccd 	.word	0xcccccccd
 8007430:	40020880 	.word	0x40020880

08007434 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007444:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	4b0b      	ldr	r3, [pc, #44]	@ (8007478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800744a:	4413      	add	r3, r2
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	461a      	mov	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a09      	ldr	r2, [pc, #36]	@ (800747c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8007458:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	3b01      	subs	r3, #1
 800745e:	f003 0303 	and.w	r3, r3, #3
 8007462:	2201      	movs	r2, #1
 8007464:	409a      	lsls	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800746a:	bf00      	nop
 800746c:	3714      	adds	r7, #20
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	1000823f 	.word	0x1000823f
 800747c:	40020940 	.word	0x40020940

08007480 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007480:	b480      	push	{r7}
 8007482:	b087      	sub	sp, #28
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800748a:	2300      	movs	r3, #0
 800748c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800748e:	e14c      	b.n	800772a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	2101      	movs	r1, #1
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	fa01 f303 	lsl.w	r3, r1, r3
 800749c:	4013      	ands	r3, r2
 800749e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f000 813e 	beq.w	8007724 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	f003 0303 	and.w	r3, r3, #3
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d005      	beq.n	80074c0 <HAL_GPIO_Init+0x40>
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	f003 0303 	and.w	r3, r3, #3
 80074bc:	2b02      	cmp	r3, #2
 80074be:	d130      	bne.n	8007522 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	005b      	lsls	r3, r3, #1
 80074ca:	2203      	movs	r2, #3
 80074cc:	fa02 f303 	lsl.w	r3, r2, r3
 80074d0:	43db      	mvns	r3, r3
 80074d2:	693a      	ldr	r2, [r7, #16]
 80074d4:	4013      	ands	r3, r2
 80074d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	68da      	ldr	r2, [r3, #12]
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	005b      	lsls	r3, r3, #1
 80074e0:	fa02 f303 	lsl.w	r3, r2, r3
 80074e4:	693a      	ldr	r2, [r7, #16]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	693a      	ldr	r2, [r7, #16]
 80074ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80074f6:	2201      	movs	r2, #1
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	fa02 f303 	lsl.w	r3, r2, r3
 80074fe:	43db      	mvns	r3, r3
 8007500:	693a      	ldr	r2, [r7, #16]
 8007502:	4013      	ands	r3, r2
 8007504:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	091b      	lsrs	r3, r3, #4
 800750c:	f003 0201 	and.w	r2, r3, #1
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	fa02 f303 	lsl.w	r3, r2, r3
 8007516:	693a      	ldr	r2, [r7, #16]
 8007518:	4313      	orrs	r3, r2
 800751a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	693a      	ldr	r2, [r7, #16]
 8007520:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	f003 0303 	and.w	r3, r3, #3
 800752a:	2b03      	cmp	r3, #3
 800752c:	d017      	beq.n	800755e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	005b      	lsls	r3, r3, #1
 8007538:	2203      	movs	r2, #3
 800753a:	fa02 f303 	lsl.w	r3, r2, r3
 800753e:	43db      	mvns	r3, r3
 8007540:	693a      	ldr	r2, [r7, #16]
 8007542:	4013      	ands	r3, r2
 8007544:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	689a      	ldr	r2, [r3, #8]
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	005b      	lsls	r3, r3, #1
 800754e:	fa02 f303 	lsl.w	r3, r2, r3
 8007552:	693a      	ldr	r2, [r7, #16]
 8007554:	4313      	orrs	r3, r2
 8007556:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	693a      	ldr	r2, [r7, #16]
 800755c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	f003 0303 	and.w	r3, r3, #3
 8007566:	2b02      	cmp	r3, #2
 8007568:	d123      	bne.n	80075b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	08da      	lsrs	r2, r3, #3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	3208      	adds	r2, #8
 8007572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007576:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	f003 0307 	and.w	r3, r3, #7
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	220f      	movs	r2, #15
 8007582:	fa02 f303 	lsl.w	r3, r2, r3
 8007586:	43db      	mvns	r3, r3
 8007588:	693a      	ldr	r2, [r7, #16]
 800758a:	4013      	ands	r3, r2
 800758c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	691a      	ldr	r2, [r3, #16]
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	f003 0307 	and.w	r3, r3, #7
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	fa02 f303 	lsl.w	r3, r2, r3
 800759e:	693a      	ldr	r2, [r7, #16]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	08da      	lsrs	r2, r3, #3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	3208      	adds	r2, #8
 80075ac:	6939      	ldr	r1, [r7, #16]
 80075ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	005b      	lsls	r3, r3, #1
 80075bc:	2203      	movs	r2, #3
 80075be:	fa02 f303 	lsl.w	r3, r2, r3
 80075c2:	43db      	mvns	r3, r3
 80075c4:	693a      	ldr	r2, [r7, #16]
 80075c6:	4013      	ands	r3, r2
 80075c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	f003 0203 	and.w	r2, r3, #3
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	005b      	lsls	r3, r3, #1
 80075d6:	fa02 f303 	lsl.w	r3, r2, r3
 80075da:	693a      	ldr	r2, [r7, #16]
 80075dc:	4313      	orrs	r3, r2
 80075de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	693a      	ldr	r2, [r7, #16]
 80075e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	f000 8098 	beq.w	8007724 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80075f4:	4a54      	ldr	r2, [pc, #336]	@ (8007748 <HAL_GPIO_Init+0x2c8>)
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	089b      	lsrs	r3, r3, #2
 80075fa:	3302      	adds	r3, #2
 80075fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007600:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	f003 0303 	and.w	r3, r3, #3
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	220f      	movs	r2, #15
 800760c:	fa02 f303 	lsl.w	r3, r2, r3
 8007610:	43db      	mvns	r3, r3
 8007612:	693a      	ldr	r2, [r7, #16]
 8007614:	4013      	ands	r3, r2
 8007616:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800761e:	d019      	beq.n	8007654 <HAL_GPIO_Init+0x1d4>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a4a      	ldr	r2, [pc, #296]	@ (800774c <HAL_GPIO_Init+0x2cc>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d013      	beq.n	8007650 <HAL_GPIO_Init+0x1d0>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a49      	ldr	r2, [pc, #292]	@ (8007750 <HAL_GPIO_Init+0x2d0>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d00d      	beq.n	800764c <HAL_GPIO_Init+0x1cc>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a48      	ldr	r2, [pc, #288]	@ (8007754 <HAL_GPIO_Init+0x2d4>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d007      	beq.n	8007648 <HAL_GPIO_Init+0x1c8>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a47      	ldr	r2, [pc, #284]	@ (8007758 <HAL_GPIO_Init+0x2d8>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d101      	bne.n	8007644 <HAL_GPIO_Init+0x1c4>
 8007640:	2304      	movs	r3, #4
 8007642:	e008      	b.n	8007656 <HAL_GPIO_Init+0x1d6>
 8007644:	2307      	movs	r3, #7
 8007646:	e006      	b.n	8007656 <HAL_GPIO_Init+0x1d6>
 8007648:	2303      	movs	r3, #3
 800764a:	e004      	b.n	8007656 <HAL_GPIO_Init+0x1d6>
 800764c:	2302      	movs	r3, #2
 800764e:	e002      	b.n	8007656 <HAL_GPIO_Init+0x1d6>
 8007650:	2301      	movs	r3, #1
 8007652:	e000      	b.n	8007656 <HAL_GPIO_Init+0x1d6>
 8007654:	2300      	movs	r3, #0
 8007656:	697a      	ldr	r2, [r7, #20]
 8007658:	f002 0203 	and.w	r2, r2, #3
 800765c:	0092      	lsls	r2, r2, #2
 800765e:	4093      	lsls	r3, r2
 8007660:	693a      	ldr	r2, [r7, #16]
 8007662:	4313      	orrs	r3, r2
 8007664:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007666:	4938      	ldr	r1, [pc, #224]	@ (8007748 <HAL_GPIO_Init+0x2c8>)
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	089b      	lsrs	r3, r3, #2
 800766c:	3302      	adds	r3, #2
 800766e:	693a      	ldr	r2, [r7, #16]
 8007670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007674:	4b39      	ldr	r3, [pc, #228]	@ (800775c <HAL_GPIO_Init+0x2dc>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	43db      	mvns	r3, r3
 800767e:	693a      	ldr	r2, [r7, #16]
 8007680:	4013      	ands	r3, r2
 8007682:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800768c:	2b00      	cmp	r3, #0
 800768e:	d003      	beq.n	8007698 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8007690:	693a      	ldr	r2, [r7, #16]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	4313      	orrs	r3, r2
 8007696:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007698:	4a30      	ldr	r2, [pc, #192]	@ (800775c <HAL_GPIO_Init+0x2dc>)
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800769e:	4b2f      	ldr	r3, [pc, #188]	@ (800775c <HAL_GPIO_Init+0x2dc>)
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	43db      	mvns	r3, r3
 80076a8:	693a      	ldr	r2, [r7, #16]
 80076aa:	4013      	ands	r3, r2
 80076ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d003      	beq.n	80076c2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80076ba:	693a      	ldr	r2, [r7, #16]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	4313      	orrs	r3, r2
 80076c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80076c2:	4a26      	ldr	r2, [pc, #152]	@ (800775c <HAL_GPIO_Init+0x2dc>)
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80076c8:	4b24      	ldr	r3, [pc, #144]	@ (800775c <HAL_GPIO_Init+0x2dc>)
 80076ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	43db      	mvns	r3, r3
 80076d4:	693a      	ldr	r2, [r7, #16]
 80076d6:	4013      	ands	r3, r2
 80076d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d003      	beq.n	80076ee <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80076e6:	693a      	ldr	r2, [r7, #16]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80076ee:	4a1b      	ldr	r2, [pc, #108]	@ (800775c <HAL_GPIO_Init+0x2dc>)
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80076f6:	4b19      	ldr	r3, [pc, #100]	@ (800775c <HAL_GPIO_Init+0x2dc>)
 80076f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	43db      	mvns	r3, r3
 8007702:	693a      	ldr	r2, [r7, #16]
 8007704:	4013      	ands	r3, r2
 8007706:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007710:	2b00      	cmp	r3, #0
 8007712:	d003      	beq.n	800771c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8007714:	693a      	ldr	r2, [r7, #16]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	4313      	orrs	r3, r2
 800771a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800771c:	4a0f      	ldr	r2, [pc, #60]	@ (800775c <HAL_GPIO_Init+0x2dc>)
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	3301      	adds	r3, #1
 8007728:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	fa22 f303 	lsr.w	r3, r2, r3
 8007734:	2b00      	cmp	r3, #0
 8007736:	f47f aeab 	bne.w	8007490 <HAL_GPIO_Init+0x10>
  }
}
 800773a:	bf00      	nop
 800773c:	bf00      	nop
 800773e:	371c      	adds	r7, #28
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr
 8007748:	40010000 	.word	0x40010000
 800774c:	48000400 	.word	0x48000400
 8007750:	48000800 	.word	0x48000800
 8007754:	48000c00 	.word	0x48000c00
 8007758:	48001000 	.word	0x48001000
 800775c:	58000800 	.word	0x58000800

08007760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	460b      	mov	r3, r1
 800776a:	807b      	strh	r3, [r7, #2]
 800776c:	4613      	mov	r3, r2
 800776e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007770:	787b      	ldrb	r3, [r7, #1]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d003      	beq.n	800777e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007776:	887a      	ldrh	r2, [r7, #2]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800777c:	e002      	b.n	8007784 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800777e:	887a      	ldrh	r2, [r7, #2]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007784:	bf00      	nop
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	460b      	mov	r3, r1
 800779a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	695b      	ldr	r3, [r3, #20]
 80077a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80077a2:	887a      	ldrh	r2, [r7, #2]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	4013      	ands	r3, r2
 80077a8:	041a      	lsls	r2, r3, #16
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	43d9      	mvns	r1, r3
 80077ae:	887b      	ldrh	r3, [r7, #2]
 80077b0:	400b      	ands	r3, r1
 80077b2:	431a      	orrs	r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	619a      	str	r2, [r3, #24]
}
 80077b8:	bf00      	nop
 80077ba:	3714      	adds	r7, #20
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	4603      	mov	r3, r0
 80077cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80077ce:	4b08      	ldr	r3, [pc, #32]	@ (80077f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80077d0:	68da      	ldr	r2, [r3, #12]
 80077d2:	88fb      	ldrh	r3, [r7, #6]
 80077d4:	4013      	ands	r3, r2
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d006      	beq.n	80077e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80077da:	4a05      	ldr	r2, [pc, #20]	@ (80077f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80077dc:	88fb      	ldrh	r3, [r7, #6]
 80077de:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80077e0:	88fb      	ldrh	r3, [r7, #6]
 80077e2:	4618      	mov	r0, r3
 80077e4:	f000 f806 	bl	80077f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80077e8:	bf00      	nop
 80077ea:	3708      	adds	r7, #8
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	58000800 	.word	0x58000800

080077f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	4603      	mov	r3, r0
 80077fc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80077fe:	bf00      	nop
 8007800:	370c      	adds	r7, #12
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr

0800780a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b082      	sub	sp, #8
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d101      	bne.n	800781c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	e08d      	b.n	8007938 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007822:	b2db      	uxtb	r3, r3
 8007824:	2b00      	cmp	r3, #0
 8007826:	d106      	bne.n	8007836 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f7fd fafd 	bl	8004e30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2224      	movs	r2, #36	@ 0x24
 800783a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f022 0201 	bic.w	r2, r2, #1
 800784c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	685a      	ldr	r2, [r3, #4]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800785a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	689a      	ldr	r2, [r3, #8]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800786a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	2b01      	cmp	r3, #1
 8007872:	d107      	bne.n	8007884 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	689a      	ldr	r2, [r3, #8]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007880:	609a      	str	r2, [r3, #8]
 8007882:	e006      	b.n	8007892 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	689a      	ldr	r2, [r3, #8]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007890:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	2b02      	cmp	r3, #2
 8007898:	d108      	bne.n	80078ac <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	685a      	ldr	r2, [r3, #4]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80078a8:	605a      	str	r2, [r3, #4]
 80078aa:	e007      	b.n	80078bc <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	685a      	ldr	r2, [r3, #4]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80078ba:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	6812      	ldr	r2, [r2, #0]
 80078c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80078ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078ce:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68da      	ldr	r2, [r3, #12]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80078de:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	691a      	ldr	r2, [r3, #16]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	695b      	ldr	r3, [r3, #20]
 80078e8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	430a      	orrs	r2, r1
 80078f8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	69d9      	ldr	r1, [r3, #28]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a1a      	ldr	r2, [r3, #32]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	430a      	orrs	r2, r1
 8007908:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f042 0201 	orr.w	r2, r2, #1
 8007918:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2220      	movs	r2, #32
 8007924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007936:	2300      	movs	r3, #0
}
 8007938:	4618      	mov	r0, r3
 800793a:	3708      	adds	r7, #8
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b088      	sub	sp, #32
 8007944:	af02      	add	r7, sp, #8
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	607a      	str	r2, [r7, #4]
 800794a:	461a      	mov	r2, r3
 800794c:	460b      	mov	r3, r1
 800794e:	817b      	strh	r3, [r7, #10]
 8007950:	4613      	mov	r3, r2
 8007952:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800795a:	b2db      	uxtb	r3, r3
 800795c:	2b20      	cmp	r3, #32
 800795e:	f040 80fd 	bne.w	8007b5c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007968:	2b01      	cmp	r3, #1
 800796a:	d101      	bne.n	8007970 <HAL_I2C_Master_Transmit+0x30>
 800796c:	2302      	movs	r3, #2
 800796e:	e0f6      	b.n	8007b5e <HAL_I2C_Master_Transmit+0x21e>
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007978:	f7fd feb8 	bl	80056ec <HAL_GetTick>
 800797c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	9300      	str	r3, [sp, #0]
 8007982:	2319      	movs	r3, #25
 8007984:	2201      	movs	r2, #1
 8007986:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800798a:	68f8      	ldr	r0, [r7, #12]
 800798c:	f000 ff85 	bl	800889a <I2C_WaitOnFlagUntilTimeout>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d001      	beq.n	800799a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	e0e1      	b.n	8007b5e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2221      	movs	r2, #33	@ 0x21
 800799e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2210      	movs	r2, #16
 80079a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2200      	movs	r2, #0
 80079ae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	893a      	ldrh	r2, [r7, #8]
 80079ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2200      	movs	r2, #0
 80079c0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	2bff      	cmp	r3, #255	@ 0xff
 80079ca:	d906      	bls.n	80079da <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	22ff      	movs	r2, #255	@ 0xff
 80079d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80079d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80079d6:	617b      	str	r3, [r7, #20]
 80079d8:	e007      	b.n	80079ea <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079de:	b29a      	uxth	r2, r3
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80079e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80079e8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d024      	beq.n	8007a3c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079f6:	781a      	ldrb	r2, [r3, #0]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a02:	1c5a      	adds	r2, r3, #1
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	b29a      	uxth	r2, r3
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	b29a      	uxth	r2, r3
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	3301      	adds	r3, #1
 8007a2a:	b2da      	uxtb	r2, r3
 8007a2c:	8979      	ldrh	r1, [r7, #10]
 8007a2e:	4b4e      	ldr	r3, [pc, #312]	@ (8007b68 <HAL_I2C_Master_Transmit+0x228>)
 8007a30:	9300      	str	r3, [sp, #0]
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	f001 f97f 	bl	8008d38 <I2C_TransferConfig>
 8007a3a:	e066      	b.n	8007b0a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a40:	b2da      	uxtb	r2, r3
 8007a42:	8979      	ldrh	r1, [r7, #10]
 8007a44:	4b48      	ldr	r3, [pc, #288]	@ (8007b68 <HAL_I2C_Master_Transmit+0x228>)
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	68f8      	ldr	r0, [r7, #12]
 8007a4c:	f001 f974 	bl	8008d38 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007a50:	e05b      	b.n	8007b0a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a52:	693a      	ldr	r2, [r7, #16]
 8007a54:	6a39      	ldr	r1, [r7, #32]
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	f000 ff78 	bl	800894c <I2C_WaitOnTXISFlagUntilTimeout>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d001      	beq.n	8007a66 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	e07b      	b.n	8007b5e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a6a:	781a      	ldrb	r2, [r3, #0]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a76:	1c5a      	adds	r2, r3, #1
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	3b01      	subs	r3, #1
 8007a84:	b29a      	uxth	r2, r3
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d034      	beq.n	8007b0a <HAL_I2C_Master_Transmit+0x1ca>
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d130      	bne.n	8007b0a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	9300      	str	r3, [sp, #0]
 8007aac:	6a3b      	ldr	r3, [r7, #32]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	2180      	movs	r1, #128	@ 0x80
 8007ab2:	68f8      	ldr	r0, [r7, #12]
 8007ab4:	f000 fef1 	bl	800889a <I2C_WaitOnFlagUntilTimeout>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d001      	beq.n	8007ac2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e04d      	b.n	8007b5e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	2bff      	cmp	r3, #255	@ 0xff
 8007aca:	d90e      	bls.n	8007aea <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	22ff      	movs	r2, #255	@ 0xff
 8007ad0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ad6:	b2da      	uxtb	r2, r3
 8007ad8:	8979      	ldrh	r1, [r7, #10]
 8007ada:	2300      	movs	r3, #0
 8007adc:	9300      	str	r3, [sp, #0]
 8007ade:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f001 f928 	bl	8008d38 <I2C_TransferConfig>
 8007ae8:	e00f      	b.n	8007b0a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007af8:	b2da      	uxtb	r2, r3
 8007afa:	8979      	ldrh	r1, [r7, #10]
 8007afc:	2300      	movs	r3, #0
 8007afe:	9300      	str	r3, [sp, #0]
 8007b00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f001 f917 	bl	8008d38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d19e      	bne.n	8007a52 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	6a39      	ldr	r1, [r7, #32]
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	f000 ff5e 	bl	80089da <I2C_WaitOnSTOPFlagUntilTimeout>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d001      	beq.n	8007b28 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	e01a      	b.n	8007b5e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2220      	movs	r2, #32
 8007b2e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	6859      	ldr	r1, [r3, #4]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8007b6c <HAL_I2C_Master_Transmit+0x22c>)
 8007b3c:	400b      	ands	r3, r1
 8007b3e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2220      	movs	r2, #32
 8007b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	e000      	b.n	8007b5e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8007b5c:	2302      	movs	r3, #2
  }
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3718      	adds	r7, #24
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	80002000 	.word	0x80002000
 8007b6c:	fe00e800 	.word	0xfe00e800

08007b70 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b088      	sub	sp, #32
 8007b74:	af02      	add	r7, sp, #8
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	607a      	str	r2, [r7, #4]
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	817b      	strh	r3, [r7, #10]
 8007b80:	4613      	mov	r3, r2
 8007b82:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	2b20      	cmp	r3, #32
 8007b8e:	f040 80db 	bne.w	8007d48 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d101      	bne.n	8007ba0 <HAL_I2C_Master_Receive+0x30>
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	e0d4      	b.n	8007d4a <HAL_I2C_Master_Receive+0x1da>
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007ba8:	f7fd fda0 	bl	80056ec <HAL_GetTick>
 8007bac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	9300      	str	r3, [sp, #0]
 8007bb2:	2319      	movs	r3, #25
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f000 fe6d 	bl	800889a <I2C_WaitOnFlagUntilTimeout>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d001      	beq.n	8007bca <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e0bf      	b.n	8007d4a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2222      	movs	r2, #34	@ 0x22
 8007bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2210      	movs	r2, #16
 8007bd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	893a      	ldrh	r2, [r7, #8]
 8007bea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	2bff      	cmp	r3, #255	@ 0xff
 8007bfa:	d90e      	bls.n	8007c1a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	22ff      	movs	r2, #255	@ 0xff
 8007c00:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c06:	b2da      	uxtb	r2, r3
 8007c08:	8979      	ldrh	r1, [r7, #10]
 8007c0a:	4b52      	ldr	r3, [pc, #328]	@ (8007d54 <HAL_I2C_Master_Receive+0x1e4>)
 8007c0c:	9300      	str	r3, [sp, #0]
 8007c0e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007c12:	68f8      	ldr	r0, [r7, #12]
 8007c14:	f001 f890 	bl	8008d38 <I2C_TransferConfig>
 8007c18:	e06d      	b.n	8007cf6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c1e:	b29a      	uxth	r2, r3
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c28:	b2da      	uxtb	r2, r3
 8007c2a:	8979      	ldrh	r1, [r7, #10]
 8007c2c:	4b49      	ldr	r3, [pc, #292]	@ (8007d54 <HAL_I2C_Master_Receive+0x1e4>)
 8007c2e:	9300      	str	r3, [sp, #0]
 8007c30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f001 f87f 	bl	8008d38 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007c3a:	e05c      	b.n	8007cf6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c3c:	697a      	ldr	r2, [r7, #20]
 8007c3e:	6a39      	ldr	r1, [r7, #32]
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	f000 ff0d 	bl	8008a60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d001      	beq.n	8007c50 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	e07c      	b.n	8007d4a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c5a:	b2d2      	uxtb	r2, r2
 8007c5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c62:	1c5a      	adds	r2, r3, #1
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c6c:	3b01      	subs	r3, #1
 8007c6e:	b29a      	uxth	r2, r3
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	b29a      	uxth	r2, r3
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d034      	beq.n	8007cf6 <HAL_I2C_Master_Receive+0x186>
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d130      	bne.n	8007cf6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	6a3b      	ldr	r3, [r7, #32]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	2180      	movs	r1, #128	@ 0x80
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f000 fdfb 	bl	800889a <I2C_WaitOnFlagUntilTimeout>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d001      	beq.n	8007cae <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e04d      	b.n	8007d4a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	2bff      	cmp	r3, #255	@ 0xff
 8007cb6:	d90e      	bls.n	8007cd6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	22ff      	movs	r2, #255	@ 0xff
 8007cbc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cc2:	b2da      	uxtb	r2, r3
 8007cc4:	8979      	ldrh	r1, [r7, #10]
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	9300      	str	r3, [sp, #0]
 8007cca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007cce:	68f8      	ldr	r0, [r7, #12]
 8007cd0:	f001 f832 	bl	8008d38 <I2C_TransferConfig>
 8007cd4:	e00f      	b.n	8007cf6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cda:	b29a      	uxth	r2, r3
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ce4:	b2da      	uxtb	r2, r3
 8007ce6:	8979      	ldrh	r1, [r7, #10]
 8007ce8:	2300      	movs	r3, #0
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	f001 f821 	bl	8008d38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d19d      	bne.n	8007c3c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d00:	697a      	ldr	r2, [r7, #20]
 8007d02:	6a39      	ldr	r1, [r7, #32]
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f000 fe68 	bl	80089da <I2C_WaitOnSTOPFlagUntilTimeout>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d001      	beq.n	8007d14 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	e01a      	b.n	8007d4a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2220      	movs	r2, #32
 8007d1a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	6859      	ldr	r1, [r3, #4]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	4b0c      	ldr	r3, [pc, #48]	@ (8007d58 <HAL_I2C_Master_Receive+0x1e8>)
 8007d28:	400b      	ands	r3, r1
 8007d2a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2220      	movs	r2, #32
 8007d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007d44:	2300      	movs	r3, #0
 8007d46:	e000      	b.n	8007d4a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007d48:	2302      	movs	r3, #2
  }
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3718      	adds	r7, #24
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	80002400 	.word	0x80002400
 8007d58:	fe00e800 	.word	0xfe00e800

08007d5c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	699b      	ldr	r3, [r3, #24]
 8007d6a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d005      	beq.n	8007d88 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d80:	68ba      	ldr	r2, [r7, #8]
 8007d82:	68f9      	ldr	r1, [r7, #12]
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	4798      	blx	r3
  }
}
 8007d88:	bf00      	nop
 8007d8a:	3710      	adds	r7, #16
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b086      	sub	sp, #24
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00f      	beq.n	8007dd2 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00a      	beq.n	8007dd2 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dc0:	f043 0201 	orr.w	r2, r3, #1
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007dd0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d00f      	beq.n	8007dfc <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00a      	beq.n	8007dfc <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dea:	f043 0208 	orr.w	r2, r3, #8
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007dfa:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d00f      	beq.n	8007e26 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00a      	beq.n	8007e26 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e14:	f043 0202 	orr.w	r2, r3, #2
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007e24:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e2a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f003 030b 	and.w	r3, r3, #11
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d003      	beq.n	8007e3e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8007e36:	68f9      	ldr	r1, [r7, #12]
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 fbd5 	bl	80085e8 <I2C_ITError>
  }
}
 8007e3e:	bf00      	nop
 8007e40:	3718      	adds	r7, #24
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007e46:	b480      	push	{r7}
 8007e48:	b083      	sub	sp, #12
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007e4e:	bf00      	nop
 8007e50:	370c      	adds	r7, #12
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr

08007e5a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007e5a:	b480      	push	{r7}
 8007e5c:	b083      	sub	sp, #12
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007e62:	bf00      	nop
 8007e64:	370c      	adds	r7, #12
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr

08007e6e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007e6e:	b480      	push	{r7}
 8007e70:	b083      	sub	sp, #12
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
 8007e76:	460b      	mov	r3, r1
 8007e78:	70fb      	strb	r3, [r7, #3]
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007e7e:	bf00      	nop
 8007e80:	370c      	adds	r7, #12
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr

08007e8a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007e8a:	b480      	push	{r7}
 8007e8c:	b083      	sub	sp, #12
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007e92:	bf00      	nop
 8007e94:	370c      	adds	r7, #12
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr

08007e9e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	b083      	sub	sp, #12
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007ea6:	bf00      	nop
 8007ea8:	370c      	adds	r7, #12
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr

08007eb2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007eb2:	b480      	push	{r7}
 8007eb4:	b083      	sub	sp, #12
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007eba:	bf00      	nop
 8007ebc:	370c      	adds	r7, #12
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr

08007ec6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b086      	sub	sp, #24
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	60f8      	str	r0, [r7, #12]
 8007ece:	60b9      	str	r1, [r7, #8]
 8007ed0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ed6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d101      	bne.n	8007eea <I2C_Slave_ISR_IT+0x24>
 8007ee6:	2302      	movs	r3, #2
 8007ee8:	e0e2      	b.n	80080b0 <I2C_Slave_ISR_IT+0x1ea>
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2201      	movs	r2, #1
 8007eee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	f003 0320 	and.w	r3, r3, #32
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d009      	beq.n	8007f10 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d004      	beq.n	8007f10 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007f06:	6939      	ldr	r1, [r7, #16]
 8007f08:	68f8      	ldr	r0, [r7, #12]
 8007f0a:	f000 f9b5 	bl	8008278 <I2C_ITSlaveCplt>
 8007f0e:	e0ca      	b.n	80080a6 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	f003 0310 	and.w	r3, r3, #16
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d04b      	beq.n	8007fb2 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d046      	beq.n	8007fb2 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d128      	bne.n	8007f80 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2b28      	cmp	r3, #40	@ 0x28
 8007f38:	d108      	bne.n	8007f4c <I2C_Slave_ISR_IT+0x86>
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f40:	d104      	bne.n	8007f4c <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007f42:	6939      	ldr	r1, [r7, #16]
 8007f44:	68f8      	ldr	r0, [r7, #12]
 8007f46:	f000 fafb 	bl	8008540 <I2C_ITListenCplt>
 8007f4a:	e031      	b.n	8007fb0 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	2b29      	cmp	r3, #41	@ 0x29
 8007f56:	d10e      	bne.n	8007f76 <I2C_Slave_ISR_IT+0xb0>
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007f5e:	d00a      	beq.n	8007f76 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	2210      	movs	r2, #16
 8007f66:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	f000 fc54 	bl	8008816 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007f6e:	68f8      	ldr	r0, [r7, #12]
 8007f70:	f000 f926 	bl	80081c0 <I2C_ITSlaveSeqCplt>
 8007f74:	e01c      	b.n	8007fb0 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2210      	movs	r2, #16
 8007f7c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007f7e:	e08f      	b.n	80080a0 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2210      	movs	r2, #16
 8007f86:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f8c:	f043 0204 	orr.w	r2, r3, #4
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d003      	beq.n	8007fa2 <I2C_Slave_ISR_IT+0xdc>
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007fa0:	d17e      	bne.n	80080a0 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	f000 fb1d 	bl	80085e8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007fae:	e077      	b.n	80080a0 <I2C_Slave_ISR_IT+0x1da>
 8007fb0:	e076      	b.n	80080a0 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	f003 0304 	and.w	r3, r3, #4
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d02f      	beq.n	800801c <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d02a      	beq.n	800801c <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d018      	beq.n	8008002 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fda:	b2d2      	uxtb	r2, r2
 8007fdc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fe2:	1c5a      	adds	r2, r3, #1
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fec:	3b01      	subs	r3, #1
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	3b01      	subs	r3, #1
 8007ffc:	b29a      	uxth	r2, r3
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008006:	b29b      	uxth	r3, r3
 8008008:	2b00      	cmp	r3, #0
 800800a:	d14b      	bne.n	80080a4 <I2C_Slave_ISR_IT+0x1de>
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008012:	d047      	beq.n	80080a4 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008014:	68f8      	ldr	r0, [r7, #12]
 8008016:	f000 f8d3 	bl	80081c0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800801a:	e043      	b.n	80080a4 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	f003 0308 	and.w	r3, r3, #8
 8008022:	2b00      	cmp	r3, #0
 8008024:	d009      	beq.n	800803a <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800802c:	2b00      	cmp	r3, #0
 800802e:	d004      	beq.n	800803a <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008030:	6939      	ldr	r1, [r7, #16]
 8008032:	68f8      	ldr	r0, [r7, #12]
 8008034:	f000 f840 	bl	80080b8 <I2C_ITAddrCplt>
 8008038:	e035      	b.n	80080a6 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	f003 0302 	and.w	r3, r3, #2
 8008040:	2b00      	cmp	r3, #0
 8008042:	d030      	beq.n	80080a6 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800804a:	2b00      	cmp	r3, #0
 800804c:	d02b      	beq.n	80080a6 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008052:	b29b      	uxth	r3, r3
 8008054:	2b00      	cmp	r3, #0
 8008056:	d018      	beq.n	800808a <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800805c:	781a      	ldrb	r2, [r3, #0]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008068:	1c5a      	adds	r2, r3, #1
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008072:	b29b      	uxth	r3, r3
 8008074:	3b01      	subs	r3, #1
 8008076:	b29a      	uxth	r2, r3
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008080:	3b01      	subs	r3, #1
 8008082:	b29a      	uxth	r2, r3
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008088:	e00d      	b.n	80080a6 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008090:	d002      	beq.n	8008098 <I2C_Slave_ISR_IT+0x1d2>
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d106      	bne.n	80080a6 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008098:	68f8      	ldr	r0, [r7, #12]
 800809a:	f000 f891 	bl	80081c0 <I2C_ITSlaveSeqCplt>
 800809e:	e002      	b.n	80080a6 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80080a0:	bf00      	nop
 80080a2:	e000      	b.n	80080a6 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80080a4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2200      	movs	r2, #0
 80080aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3718      	adds	r7, #24
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80080ce:	2b28      	cmp	r3, #40	@ 0x28
 80080d0:	d16a      	bne.n	80081a8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	699b      	ldr	r3, [r3, #24]
 80080d8:	0c1b      	lsrs	r3, r3, #16
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	f003 0301 	and.w	r3, r3, #1
 80080e0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	699b      	ldr	r3, [r3, #24]
 80080e8:	0c1b      	lsrs	r3, r3, #16
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80080f0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080fe:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	68db      	ldr	r3, [r3, #12]
 8008106:	b29b      	uxth	r3, r3
 8008108:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800810c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	2b02      	cmp	r3, #2
 8008114:	d138      	bne.n	8008188 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008116:	897b      	ldrh	r3, [r7, #10]
 8008118:	09db      	lsrs	r3, r3, #7
 800811a:	b29a      	uxth	r2, r3
 800811c:	89bb      	ldrh	r3, [r7, #12]
 800811e:	4053      	eors	r3, r2
 8008120:	b29b      	uxth	r3, r3
 8008122:	f003 0306 	and.w	r3, r3, #6
 8008126:	2b00      	cmp	r3, #0
 8008128:	d11c      	bne.n	8008164 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800812a:	897b      	ldrh	r3, [r7, #10]
 800812c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008132:	1c5a      	adds	r2, r3, #1
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800813c:	2b02      	cmp	r3, #2
 800813e:	d13b      	bne.n	80081b8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2208      	movs	r2, #8
 800814c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008156:	89ba      	ldrh	r2, [r7, #12]
 8008158:	7bfb      	ldrb	r3, [r7, #15]
 800815a:	4619      	mov	r1, r3
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f7ff fe86 	bl	8007e6e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008162:	e029      	b.n	80081b8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008164:	893b      	ldrh	r3, [r7, #8]
 8008166:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008168:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 fe15 	bl	8008d9c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800817a:	89ba      	ldrh	r2, [r7, #12]
 800817c:	7bfb      	ldrb	r3, [r7, #15]
 800817e:	4619      	mov	r1, r3
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f7ff fe74 	bl	8007e6e <HAL_I2C_AddrCallback>
}
 8008186:	e017      	b.n	80081b8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008188:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 fe05 	bl	8008d9c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800819a:	89ba      	ldrh	r2, [r7, #12]
 800819c:	7bfb      	ldrb	r3, [r7, #15]
 800819e:	4619      	mov	r1, r3
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f7ff fe64 	bl	8007e6e <HAL_I2C_AddrCallback>
}
 80081a6:	e007      	b.n	80081b8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2208      	movs	r2, #8
 80081ae:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80081b8:	bf00      	nop
 80081ba:	3710      	adds	r7, #16
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d008      	beq.n	80081f4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80081f0:	601a      	str	r2, [r3, #0]
 80081f2:	e00c      	b.n	800820e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d007      	beq.n	800820e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800820c:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008214:	b2db      	uxtb	r3, r3
 8008216:	2b29      	cmp	r3, #41	@ 0x29
 8008218:	d112      	bne.n	8008240 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2228      	movs	r2, #40	@ 0x28
 800821e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2221      	movs	r2, #33	@ 0x21
 8008226:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008228:	2101      	movs	r1, #1
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 fdb6 	bl	8008d9c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f7ff fe04 	bl	8007e46 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800823e:	e017      	b.n	8008270 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008246:	b2db      	uxtb	r3, r3
 8008248:	2b2a      	cmp	r3, #42	@ 0x2a
 800824a:	d111      	bne.n	8008270 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2228      	movs	r2, #40	@ 0x28
 8008250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2222      	movs	r2, #34	@ 0x22
 8008258:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800825a:	2102      	movs	r1, #2
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 fd9d 	bl	8008d9c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f7ff fdf5 	bl	8007e5a <HAL_I2C_SlaveRxCpltCallback>
}
 8008270:	bf00      	nop
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b086      	sub	sp, #24
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008292:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800829a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2220      	movs	r2, #32
 80082a2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80082a4:	7afb      	ldrb	r3, [r7, #11]
 80082a6:	2b21      	cmp	r3, #33	@ 0x21
 80082a8:	d002      	beq.n	80082b0 <I2C_ITSlaveCplt+0x38>
 80082aa:	7afb      	ldrb	r3, [r7, #11]
 80082ac:	2b29      	cmp	r3, #41	@ 0x29
 80082ae:	d108      	bne.n	80082c2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80082b0:	f248 0101 	movw	r1, #32769	@ 0x8001
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 fd71 	bl	8008d9c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2221      	movs	r2, #33	@ 0x21
 80082be:	631a      	str	r2, [r3, #48]	@ 0x30
 80082c0:	e019      	b.n	80082f6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80082c2:	7afb      	ldrb	r3, [r7, #11]
 80082c4:	2b22      	cmp	r3, #34	@ 0x22
 80082c6:	d002      	beq.n	80082ce <I2C_ITSlaveCplt+0x56>
 80082c8:	7afb      	ldrb	r3, [r7, #11]
 80082ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80082cc:	d108      	bne.n	80082e0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80082ce:	f248 0102 	movw	r1, #32770	@ 0x8002
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 fd62 	bl	8008d9c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2222      	movs	r2, #34	@ 0x22
 80082dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80082de:	e00a      	b.n	80082f6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80082e0:	7afb      	ldrb	r3, [r7, #11]
 80082e2:	2b28      	cmp	r3, #40	@ 0x28
 80082e4:	d107      	bne.n	80082f6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80082e6:	f248 0103 	movw	r1, #32771	@ 0x8003
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 fd56 	bl	8008d9c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	685a      	ldr	r2, [r3, #4]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008304:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	6859      	ldr	r1, [r3, #4]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	4b89      	ldr	r3, [pc, #548]	@ (8008538 <I2C_ITSlaveCplt+0x2c0>)
 8008312:	400b      	ands	r3, r1
 8008314:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fa7d 	bl	8008816 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008322:	2b00      	cmp	r3, #0
 8008324:	d013      	beq.n	800834e <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008334:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800833a:	2b00      	cmp	r3, #0
 800833c:	d01f      	beq.n	800837e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	b29a      	uxth	r2, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800834c:	e017      	b.n	800837e <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008354:	2b00      	cmp	r3, #0
 8008356:	d012      	beq.n	800837e <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008366:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800836c:	2b00      	cmp	r3, #0
 800836e:	d006      	beq.n	800837e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	b29a      	uxth	r2, r3
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	f003 0304 	and.w	r3, r3, #4
 8008384:	2b00      	cmp	r3, #0
 8008386:	d020      	beq.n	80083ca <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	f023 0304 	bic.w	r3, r3, #4
 800838e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800839a:	b2d2      	uxtb	r2, r2
 800839c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083a2:	1c5a      	adds	r2, r3, #1
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00c      	beq.n	80083ca <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083b4:	3b01      	subs	r3, #1
 80083b6:	b29a      	uxth	r2, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	3b01      	subs	r3, #1
 80083c4:	b29a      	uxth	r2, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d005      	beq.n	80083e0 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083d8:	f043 0204 	orr.w	r2, r3, #4
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	f003 0310 	and.w	r3, r3, #16
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d049      	beq.n	800847e <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d044      	beq.n	800847e <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d128      	bne.n	8008450 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008404:	b2db      	uxtb	r3, r3
 8008406:	2b28      	cmp	r3, #40	@ 0x28
 8008408:	d108      	bne.n	800841c <I2C_ITSlaveCplt+0x1a4>
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008410:	d104      	bne.n	800841c <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008412:	6979      	ldr	r1, [r7, #20]
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 f893 	bl	8008540 <I2C_ITListenCplt>
 800841a:	e030      	b.n	800847e <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008422:	b2db      	uxtb	r3, r3
 8008424:	2b29      	cmp	r3, #41	@ 0x29
 8008426:	d10e      	bne.n	8008446 <I2C_ITSlaveCplt+0x1ce>
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800842e:	d00a      	beq.n	8008446 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2210      	movs	r2, #16
 8008436:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 f9ec 	bl	8008816 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f7ff febe 	bl	80081c0 <I2C_ITSlaveSeqCplt>
 8008444:	e01b      	b.n	800847e <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	2210      	movs	r2, #16
 800844c:	61da      	str	r2, [r3, #28]
 800844e:	e016      	b.n	800847e <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	2210      	movs	r2, #16
 8008456:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800845c:	f043 0204 	orr.w	r2, r3, #4
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d003      	beq.n	8008472 <I2C_ITSlaveCplt+0x1fa>
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008470:	d105      	bne.n	800847e <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008476:	4619      	mov	r1, r3
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 f8b5 	bl	80085e8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2200      	movs	r2, #0
 800848a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008490:	2b00      	cmp	r3, #0
 8008492:	d010      	beq.n	80084b6 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008498:	4619      	mov	r1, r3
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 f8a4 	bl	80085e8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	2b28      	cmp	r3, #40	@ 0x28
 80084aa:	d141      	bne.n	8008530 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80084ac:	6979      	ldr	r1, [r7, #20]
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 f846 	bl	8008540 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80084b4:	e03c      	b.n	8008530 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084ba:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80084be:	d014      	beq.n	80084ea <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f7ff fe7d 	bl	80081c0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4a1c      	ldr	r2, [pc, #112]	@ (800853c <I2C_ITSlaveCplt+0x2c4>)
 80084ca:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2220      	movs	r2, #32
 80084d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f7ff fcd1 	bl	8007e8a <HAL_I2C_ListenCpltCallback>
}
 80084e8:	e022      	b.n	8008530 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	2b22      	cmp	r3, #34	@ 0x22
 80084f4:	d10e      	bne.n	8008514 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2220      	movs	r2, #32
 80084fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f7ff fca4 	bl	8007e5a <HAL_I2C_SlaveRxCpltCallback>
}
 8008512:	e00d      	b.n	8008530 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2220      	movs	r2, #32
 8008518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f7ff fc8b 	bl	8007e46 <HAL_I2C_SlaveTxCpltCallback>
}
 8008530:	bf00      	nop
 8008532:	3718      	adds	r7, #24
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}
 8008538:	fe00e800 	.word	0xfe00e800
 800853c:	ffff0000 	.word	0xffff0000

08008540 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4a25      	ldr	r2, [pc, #148]	@ (80085e4 <I2C_ITListenCplt+0xa4>)
 800854e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2220      	movs	r2, #32
 800855a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	f003 0304 	and.w	r3, r3, #4
 8008572:	2b00      	cmp	r3, #0
 8008574:	d022      	beq.n	80085bc <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008580:	b2d2      	uxtb	r2, r2
 8008582:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008588:	1c5a      	adds	r2, r3, #1
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008592:	2b00      	cmp	r3, #0
 8008594:	d012      	beq.n	80085bc <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800859a:	3b01      	subs	r3, #1
 800859c:	b29a      	uxth	r2, r3
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	3b01      	subs	r3, #1
 80085aa:	b29a      	uxth	r2, r3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085b4:	f043 0204 	orr.w	r2, r3, #4
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80085bc:	f248 0103 	movw	r1, #32771	@ 0x8003
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 fbeb 	bl	8008d9c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	2210      	movs	r2, #16
 80085cc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2200      	movs	r2, #0
 80085d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f7ff fc57 	bl	8007e8a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80085dc:	bf00      	nop
 80085de:	3708      	adds	r7, #8
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	ffff0000 	.word	0xffff0000

080085e8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085f8:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2200      	movs	r2, #0
 80085fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	4a6d      	ldr	r2, [pc, #436]	@ (80087bc <I2C_ITError+0x1d4>)
 8008606:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	431a      	orrs	r2, r3
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800861a:	7bfb      	ldrb	r3, [r7, #15]
 800861c:	2b28      	cmp	r3, #40	@ 0x28
 800861e:	d005      	beq.n	800862c <I2C_ITError+0x44>
 8008620:	7bfb      	ldrb	r3, [r7, #15]
 8008622:	2b29      	cmp	r3, #41	@ 0x29
 8008624:	d002      	beq.n	800862c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8008626:	7bfb      	ldrb	r3, [r7, #15]
 8008628:	2b2a      	cmp	r3, #42	@ 0x2a
 800862a:	d10b      	bne.n	8008644 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800862c:	2103      	movs	r1, #3
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 fbb4 	bl	8008d9c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2228      	movs	r2, #40	@ 0x28
 8008638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	4a60      	ldr	r2, [pc, #384]	@ (80087c0 <I2C_ITError+0x1d8>)
 8008640:	635a      	str	r2, [r3, #52]	@ 0x34
 8008642:	e030      	b.n	80086a6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008644:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 fba7 	bl	8008d9c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 f8e1 	bl	8008816 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800865a:	b2db      	uxtb	r3, r3
 800865c:	2b60      	cmp	r3, #96	@ 0x60
 800865e:	d01f      	beq.n	80086a0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2220      	movs	r2, #32
 8008664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	699b      	ldr	r3, [r3, #24]
 800866e:	f003 0320 	and.w	r3, r3, #32
 8008672:	2b20      	cmp	r3, #32
 8008674:	d114      	bne.n	80086a0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	699b      	ldr	r3, [r3, #24]
 800867c:	f003 0310 	and.w	r3, r3, #16
 8008680:	2b10      	cmp	r3, #16
 8008682:	d109      	bne.n	8008698 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2210      	movs	r2, #16
 800868a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008690:	f043 0204 	orr.w	r2, r3, #4
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2220      	movs	r2, #32
 800869e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086aa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d039      	beq.n	8008728 <I2C_ITError+0x140>
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	2b11      	cmp	r3, #17
 80086b8:	d002      	beq.n	80086c0 <I2C_ITError+0xd8>
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	2b21      	cmp	r3, #33	@ 0x21
 80086be:	d133      	bne.n	8008728 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80086ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80086ce:	d107      	bne.n	80086e0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80086de:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086e4:	4618      	mov	r0, r3
 80086e6:	f7fe fe1a 	bl	800731e <HAL_DMA_GetState>
 80086ea:	4603      	mov	r3, r0
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d017      	beq.n	8008720 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086f4:	4a33      	ldr	r2, [pc, #204]	@ (80087c4 <I2C_ITError+0x1dc>)
 80086f6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008704:	4618      	mov	r0, r3
 8008706:	f7fe fcfc 	bl	8007102 <HAL_DMA_Abort_IT>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d04d      	beq.n	80087ac <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800871a:	4610      	mov	r0, r2
 800871c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800871e:	e045      	b.n	80087ac <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 f851 	bl	80087c8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008726:	e041      	b.n	80087ac <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800872c:	2b00      	cmp	r3, #0
 800872e:	d039      	beq.n	80087a4 <I2C_ITError+0x1bc>
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	2b12      	cmp	r3, #18
 8008734:	d002      	beq.n	800873c <I2C_ITError+0x154>
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	2b22      	cmp	r3, #34	@ 0x22
 800873a:	d133      	bne.n	80087a4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008746:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800874a:	d107      	bne.n	800875c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800875a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008760:	4618      	mov	r0, r3
 8008762:	f7fe fddc 	bl	800731e <HAL_DMA_GetState>
 8008766:	4603      	mov	r3, r0
 8008768:	2b01      	cmp	r3, #1
 800876a:	d017      	beq.n	800879c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008770:	4a14      	ldr	r2, [pc, #80]	@ (80087c4 <I2C_ITError+0x1dc>)
 8008772:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008780:	4618      	mov	r0, r3
 8008782:	f7fe fcbe 	bl	8007102 <HAL_DMA_Abort_IT>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d011      	beq.n	80087b0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008796:	4610      	mov	r0, r2
 8008798:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800879a:	e009      	b.n	80087b0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 f813 	bl	80087c8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80087a2:	e005      	b.n	80087b0 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 f80f 	bl	80087c8 <I2C_TreatErrorCallback>
  }
}
 80087aa:	e002      	b.n	80087b2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80087ac:	bf00      	nop
 80087ae:	e000      	b.n	80087b2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80087b0:	bf00      	nop
}
 80087b2:	bf00      	nop
 80087b4:	3710      	adds	r7, #16
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop
 80087bc:	ffff0000 	.word	0xffff0000
 80087c0:	08007ec7 	.word	0x08007ec7
 80087c4:	0800885f 	.word	0x0800885f

080087c8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	2b60      	cmp	r3, #96	@ 0x60
 80087da:	d10e      	bne.n	80087fa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2220      	movs	r2, #32
 80087e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f7ff fb5d 	bl	8007eb2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80087f8:	e009      	b.n	800880e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f7ff fb48 	bl	8007e9e <HAL_I2C_ErrorCallback>
}
 800880e:	bf00      	nop
 8008810:	3708      	adds	r7, #8
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008816:	b480      	push	{r7}
 8008818:	b083      	sub	sp, #12
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	699b      	ldr	r3, [r3, #24]
 8008824:	f003 0302 	and.w	r3, r3, #2
 8008828:	2b02      	cmp	r3, #2
 800882a:	d103      	bne.n	8008834 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2200      	movs	r2, #0
 8008832:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	699b      	ldr	r3, [r3, #24]
 800883a:	f003 0301 	and.w	r3, r3, #1
 800883e:	2b01      	cmp	r3, #1
 8008840:	d007      	beq.n	8008852 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	699a      	ldr	r2, [r3, #24]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f042 0201 	orr.w	r2, r2, #1
 8008850:	619a      	str	r2, [r3, #24]
  }
}
 8008852:	bf00      	nop
 8008854:	370c      	adds	r7, #12
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr

0800885e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b084      	sub	sp, #16
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800886a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008870:	2b00      	cmp	r3, #0
 8008872:	d003      	beq.n	800887c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008878:	2200      	movs	r2, #0
 800887a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008880:	2b00      	cmp	r3, #0
 8008882:	d003      	beq.n	800888c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008888:	2200      	movs	r2, #0
 800888a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f7ff ff9b 	bl	80087c8 <I2C_TreatErrorCallback>
}
 8008892:	bf00      	nop
 8008894:	3710      	adds	r7, #16
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b084      	sub	sp, #16
 800889e:	af00      	add	r7, sp, #0
 80088a0:	60f8      	str	r0, [r7, #12]
 80088a2:	60b9      	str	r1, [r7, #8]
 80088a4:	603b      	str	r3, [r7, #0]
 80088a6:	4613      	mov	r3, r2
 80088a8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80088aa:	e03b      	b.n	8008924 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80088ac:	69ba      	ldr	r2, [r7, #24]
 80088ae:	6839      	ldr	r1, [r7, #0]
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	f000 f961 	bl	8008b78 <I2C_IsErrorOccurred>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d001      	beq.n	80088c0 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	e041      	b.n	8008944 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088c6:	d02d      	beq.n	8008924 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088c8:	f7fc ff10 	bl	80056ec <HAL_GetTick>
 80088cc:	4602      	mov	r2, r0
 80088ce:	69bb      	ldr	r3, [r7, #24]
 80088d0:	1ad3      	subs	r3, r2, r3
 80088d2:	683a      	ldr	r2, [r7, #0]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d302      	bcc.n	80088de <I2C_WaitOnFlagUntilTimeout+0x44>
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d122      	bne.n	8008924 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	699a      	ldr	r2, [r3, #24]
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	4013      	ands	r3, r2
 80088e8:	68ba      	ldr	r2, [r7, #8]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	bf0c      	ite	eq
 80088ee:	2301      	moveq	r3, #1
 80088f0:	2300      	movne	r3, #0
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	461a      	mov	r2, r3
 80088f6:	79fb      	ldrb	r3, [r7, #7]
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d113      	bne.n	8008924 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008900:	f043 0220 	orr.w	r2, r3, #32
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2220      	movs	r2, #32
 800890c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2200      	movs	r2, #0
 8008914:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2200      	movs	r2, #0
 800891c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	e00f      	b.n	8008944 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	699a      	ldr	r2, [r3, #24]
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	4013      	ands	r3, r2
 800892e:	68ba      	ldr	r2, [r7, #8]
 8008930:	429a      	cmp	r2, r3
 8008932:	bf0c      	ite	eq
 8008934:	2301      	moveq	r3, #1
 8008936:	2300      	movne	r3, #0
 8008938:	b2db      	uxtb	r3, r3
 800893a:	461a      	mov	r2, r3
 800893c:	79fb      	ldrb	r3, [r7, #7]
 800893e:	429a      	cmp	r2, r3
 8008940:	d0b4      	beq.n	80088ac <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008942:	2300      	movs	r3, #0
}
 8008944:	4618      	mov	r0, r3
 8008946:	3710      	adds	r7, #16
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008958:	e033      	b.n	80089c2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	68b9      	ldr	r1, [r7, #8]
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	f000 f90a 	bl	8008b78 <I2C_IsErrorOccurred>
 8008964:	4603      	mov	r3, r0
 8008966:	2b00      	cmp	r3, #0
 8008968:	d001      	beq.n	800896e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	e031      	b.n	80089d2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008974:	d025      	beq.n	80089c2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008976:	f7fc feb9 	bl	80056ec <HAL_GetTick>
 800897a:	4602      	mov	r2, r0
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	1ad3      	subs	r3, r2, r3
 8008980:	68ba      	ldr	r2, [r7, #8]
 8008982:	429a      	cmp	r2, r3
 8008984:	d302      	bcc.n	800898c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d11a      	bne.n	80089c2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	699b      	ldr	r3, [r3, #24]
 8008992:	f003 0302 	and.w	r3, r3, #2
 8008996:	2b02      	cmp	r3, #2
 8008998:	d013      	beq.n	80089c2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800899e:	f043 0220 	orr.w	r2, r3, #32
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2220      	movs	r2, #32
 80089aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2200      	movs	r2, #0
 80089ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	e007      	b.n	80089d2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	699b      	ldr	r3, [r3, #24]
 80089c8:	f003 0302 	and.w	r3, r3, #2
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	d1c4      	bne.n	800895a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}

080089da <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80089da:	b580      	push	{r7, lr}
 80089dc:	b084      	sub	sp, #16
 80089de:	af00      	add	r7, sp, #0
 80089e0:	60f8      	str	r0, [r7, #12]
 80089e2:	60b9      	str	r1, [r7, #8]
 80089e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80089e6:	e02f      	b.n	8008a48 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	68b9      	ldr	r1, [r7, #8]
 80089ec:	68f8      	ldr	r0, [r7, #12]
 80089ee:	f000 f8c3 	bl	8008b78 <I2C_IsErrorOccurred>
 80089f2:	4603      	mov	r3, r0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d001      	beq.n	80089fc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	e02d      	b.n	8008a58 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089fc:	f7fc fe76 	bl	80056ec <HAL_GetTick>
 8008a00:	4602      	mov	r2, r0
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	68ba      	ldr	r2, [r7, #8]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d302      	bcc.n	8008a12 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d11a      	bne.n	8008a48 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	699b      	ldr	r3, [r3, #24]
 8008a18:	f003 0320 	and.w	r3, r3, #32
 8008a1c:	2b20      	cmp	r3, #32
 8008a1e:	d013      	beq.n	8008a48 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a24:	f043 0220 	orr.w	r2, r3, #32
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2220      	movs	r2, #32
 8008a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	e007      	b.n	8008a58 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	699b      	ldr	r3, [r3, #24]
 8008a4e:	f003 0320 	and.w	r3, r3, #32
 8008a52:	2b20      	cmp	r3, #32
 8008a54:	d1c8      	bne.n	80089e8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008a56:	2300      	movs	r3, #0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3710      	adds	r7, #16
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	60b9      	str	r1, [r7, #8]
 8008a6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008a70:	e071      	b.n	8008b56 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	68b9      	ldr	r1, [r7, #8]
 8008a76:	68f8      	ldr	r0, [r7, #12]
 8008a78:	f000 f87e 	bl	8008b78 <I2C_IsErrorOccurred>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d001      	beq.n	8008a86 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	699b      	ldr	r3, [r3, #24]
 8008a8c:	f003 0320 	and.w	r3, r3, #32
 8008a90:	2b20      	cmp	r3, #32
 8008a92:	d13b      	bne.n	8008b0c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8008a94:	7dfb      	ldrb	r3, [r7, #23]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d138      	bne.n	8008b0c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	699b      	ldr	r3, [r3, #24]
 8008aa0:	f003 0304 	and.w	r3, r3, #4
 8008aa4:	2b04      	cmp	r3, #4
 8008aa6:	d105      	bne.n	8008ab4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d001      	beq.n	8008ab4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	699b      	ldr	r3, [r3, #24]
 8008aba:	f003 0310 	and.w	r3, r3, #16
 8008abe:	2b10      	cmp	r3, #16
 8008ac0:	d121      	bne.n	8008b06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	2210      	movs	r2, #16
 8008ac8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2204      	movs	r2, #4
 8008ace:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2220      	movs	r2, #32
 8008ad6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	6859      	ldr	r1, [r3, #4]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	4b24      	ldr	r3, [pc, #144]	@ (8008b74 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8008ae4:	400b      	ands	r3, r1
 8008ae6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2220      	movs	r2, #32
 8008aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2200      	movs	r2, #0
 8008af4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2200      	movs	r2, #0
 8008afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	75fb      	strb	r3, [r7, #23]
 8008b04:	e002      	b.n	8008b0c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8008b0c:	f7fc fdee 	bl	80056ec <HAL_GetTick>
 8008b10:	4602      	mov	r2, r0
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	1ad3      	subs	r3, r2, r3
 8008b16:	68ba      	ldr	r2, [r7, #8]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d302      	bcc.n	8008b22 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d119      	bne.n	8008b56 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8008b22:	7dfb      	ldrb	r3, [r7, #23]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d116      	bne.n	8008b56 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	699b      	ldr	r3, [r3, #24]
 8008b2e:	f003 0304 	and.w	r3, r3, #4
 8008b32:	2b04      	cmp	r3, #4
 8008b34:	d00f      	beq.n	8008b56 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b3a:	f043 0220 	orr.w	r2, r3, #32
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2220      	movs	r2, #32
 8008b46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	699b      	ldr	r3, [r3, #24]
 8008b5c:	f003 0304 	and.w	r3, r3, #4
 8008b60:	2b04      	cmp	r3, #4
 8008b62:	d002      	beq.n	8008b6a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8008b64:	7dfb      	ldrb	r3, [r7, #23]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d083      	beq.n	8008a72 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8008b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3718      	adds	r7, #24
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	fe00e800 	.word	0xfe00e800

08008b78 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b08a      	sub	sp, #40	@ 0x28
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b84:	2300      	movs	r3, #0
 8008b86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	699b      	ldr	r3, [r3, #24]
 8008b90:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008b92:	2300      	movs	r3, #0
 8008b94:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008b9a:	69bb      	ldr	r3, [r7, #24]
 8008b9c:	f003 0310 	and.w	r3, r3, #16
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d068      	beq.n	8008c76 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2210      	movs	r2, #16
 8008baa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008bac:	e049      	b.n	8008c42 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb4:	d045      	beq.n	8008c42 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008bb6:	f7fc fd99 	bl	80056ec <HAL_GetTick>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	1ad3      	subs	r3, r2, r3
 8008bc0:	68ba      	ldr	r2, [r7, #8]
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d302      	bcc.n	8008bcc <I2C_IsErrorOccurred+0x54>
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d13a      	bne.n	8008c42 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008bd6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008bde:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	699b      	ldr	r3, [r3, #24]
 8008be6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008bea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008bee:	d121      	bne.n	8008c34 <I2C_IsErrorOccurred+0xbc>
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008bf6:	d01d      	beq.n	8008c34 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008bf8:	7cfb      	ldrb	r3, [r7, #19]
 8008bfa:	2b20      	cmp	r3, #32
 8008bfc:	d01a      	beq.n	8008c34 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	685a      	ldr	r2, [r3, #4]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008c0c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008c0e:	f7fc fd6d 	bl	80056ec <HAL_GetTick>
 8008c12:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008c14:	e00e      	b.n	8008c34 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008c16:	f7fc fd69 	bl	80056ec <HAL_GetTick>
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	1ad3      	subs	r3, r2, r3
 8008c20:	2b19      	cmp	r3, #25
 8008c22:	d907      	bls.n	8008c34 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008c24:	6a3b      	ldr	r3, [r7, #32]
 8008c26:	f043 0320 	orr.w	r3, r3, #32
 8008c2a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8008c32:	e006      	b.n	8008c42 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	699b      	ldr	r3, [r3, #24]
 8008c3a:	f003 0320 	and.w	r3, r3, #32
 8008c3e:	2b20      	cmp	r3, #32
 8008c40:	d1e9      	bne.n	8008c16 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	699b      	ldr	r3, [r3, #24]
 8008c48:	f003 0320 	and.w	r3, r3, #32
 8008c4c:	2b20      	cmp	r3, #32
 8008c4e:	d003      	beq.n	8008c58 <I2C_IsErrorOccurred+0xe0>
 8008c50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d0aa      	beq.n	8008bae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008c58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d103      	bne.n	8008c68 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	2220      	movs	r2, #32
 8008c66:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008c68:	6a3b      	ldr	r3, [r7, #32]
 8008c6a:	f043 0304 	orr.w	r3, r3, #4
 8008c6e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	699b      	ldr	r3, [r3, #24]
 8008c7c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008c7e:	69bb      	ldr	r3, [r7, #24]
 8008c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00b      	beq.n	8008ca0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008c88:	6a3b      	ldr	r3, [r7, #32]
 8008c8a:	f043 0301 	orr.w	r3, r3, #1
 8008c8e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008c98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008ca0:	69bb      	ldr	r3, [r7, #24]
 8008ca2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00b      	beq.n	8008cc2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008caa:	6a3b      	ldr	r3, [r7, #32]
 8008cac:	f043 0308 	orr.w	r3, r3, #8
 8008cb0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008cba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d00b      	beq.n	8008ce4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008ccc:	6a3b      	ldr	r3, [r7, #32]
 8008cce:	f043 0302 	orr.w	r3, r3, #2
 8008cd2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008cdc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d01c      	beq.n	8008d26 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008cec:	68f8      	ldr	r0, [r7, #12]
 8008cee:	f7ff fd92 	bl	8008816 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	6859      	ldr	r1, [r3, #4]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8008d34 <I2C_IsErrorOccurred+0x1bc>)
 8008cfe:	400b      	ands	r3, r1
 8008d00:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d06:	6a3b      	ldr	r3, [r7, #32]
 8008d08:	431a      	orrs	r2, r3
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2220      	movs	r2, #32
 8008d12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2200      	movs	r2, #0
 8008d22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008d26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3728      	adds	r7, #40	@ 0x28
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	fe00e800 	.word	0xfe00e800

08008d38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b087      	sub	sp, #28
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	607b      	str	r3, [r7, #4]
 8008d42:	460b      	mov	r3, r1
 8008d44:	817b      	strh	r3, [r7, #10]
 8008d46:	4613      	mov	r3, r2
 8008d48:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008d4a:	897b      	ldrh	r3, [r7, #10]
 8008d4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008d50:	7a7b      	ldrb	r3, [r7, #9]
 8008d52:	041b      	lsls	r3, r3, #16
 8008d54:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008d58:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008d5e:	6a3b      	ldr	r3, [r7, #32]
 8008d60:	4313      	orrs	r3, r2
 8008d62:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008d66:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	685a      	ldr	r2, [r3, #4]
 8008d6e:	6a3b      	ldr	r3, [r7, #32]
 8008d70:	0d5b      	lsrs	r3, r3, #21
 8008d72:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008d76:	4b08      	ldr	r3, [pc, #32]	@ (8008d98 <I2C_TransferConfig+0x60>)
 8008d78:	430b      	orrs	r3, r1
 8008d7a:	43db      	mvns	r3, r3
 8008d7c:	ea02 0103 	and.w	r1, r2, r3
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	697a      	ldr	r2, [r7, #20]
 8008d86:	430a      	orrs	r2, r1
 8008d88:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008d8a:	bf00      	nop
 8008d8c:	371c      	adds	r7, #28
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr
 8008d96:	bf00      	nop
 8008d98:	03ff63ff 	.word	0x03ff63ff

08008d9c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	460b      	mov	r3, r1
 8008da6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008da8:	2300      	movs	r3, #0
 8008daa:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008dac:	887b      	ldrh	r3, [r7, #2]
 8008dae:	f003 0301 	and.w	r3, r3, #1
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d00f      	beq.n	8008dd6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8008dbc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008dca:	2b28      	cmp	r3, #40	@ 0x28
 8008dcc:	d003      	beq.n	8008dd6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008dd4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008dd6:	887b      	ldrh	r3, [r7, #2]
 8008dd8:	f003 0302 	and.w	r3, r3, #2
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d00f      	beq.n	8008e00 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8008de6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008df4:	2b28      	cmp	r3, #40	@ 0x28
 8008df6:	d003      	beq.n	8008e00 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008dfe:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008e00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	da03      	bge.n	8008e10 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008e0e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008e10:	887b      	ldrh	r3, [r7, #2]
 8008e12:	2b10      	cmp	r3, #16
 8008e14:	d103      	bne.n	8008e1e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008e1c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008e1e:	887b      	ldrh	r3, [r7, #2]
 8008e20:	2b20      	cmp	r3, #32
 8008e22:	d103      	bne.n	8008e2c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f043 0320 	orr.w	r3, r3, #32
 8008e2a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008e2c:	887b      	ldrh	r3, [r7, #2]
 8008e2e:	2b40      	cmp	r3, #64	@ 0x40
 8008e30:	d103      	bne.n	8008e3a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e38:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	6819      	ldr	r1, [r3, #0]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	43da      	mvns	r2, r3
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	400a      	ands	r2, r1
 8008e4a:	601a      	str	r2, [r3, #0]
}
 8008e4c:	bf00      	nop
 8008e4e:	3714      	adds	r7, #20
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr

08008e58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	2b20      	cmp	r3, #32
 8008e6c:	d138      	bne.n	8008ee0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d101      	bne.n	8008e7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008e78:	2302      	movs	r3, #2
 8008e7a:	e032      	b.n	8008ee2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2224      	movs	r2, #36	@ 0x24
 8008e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f022 0201 	bic.w	r2, r2, #1
 8008e9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	681a      	ldr	r2, [r3, #0]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008eaa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	6819      	ldr	r1, [r3, #0]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	683a      	ldr	r2, [r7, #0]
 8008eb8:	430a      	orrs	r2, r1
 8008eba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f042 0201 	orr.w	r2, r2, #1
 8008eca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2220      	movs	r2, #32
 8008ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008edc:	2300      	movs	r3, #0
 8008ede:	e000      	b.n	8008ee2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008ee0:	2302      	movs	r3, #2
  }
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	370c      	adds	r7, #12
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr

08008eee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008eee:	b480      	push	{r7}
 8008ef0:	b085      	sub	sp, #20
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
 8008ef6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	2b20      	cmp	r3, #32
 8008f02:	d139      	bne.n	8008f78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d101      	bne.n	8008f12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008f0e:	2302      	movs	r3, #2
 8008f10:	e033      	b.n	8008f7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2201      	movs	r2, #1
 8008f16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2224      	movs	r2, #36	@ 0x24
 8008f1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f022 0201 	bic.w	r2, r2, #1
 8008f30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008f40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	021b      	lsls	r3, r3, #8
 8008f46:	68fa      	ldr	r2, [r7, #12]
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	68fa      	ldr	r2, [r7, #12]
 8008f52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f042 0201 	orr.w	r2, r2, #1
 8008f62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2220      	movs	r2, #32
 8008f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008f74:	2300      	movs	r3, #0
 8008f76:	e000      	b.n	8008f7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008f78:	2302      	movs	r3, #2
  }
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3714      	adds	r7, #20
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr

08008f86 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b084      	sub	sp, #16
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d101      	bne.n	8008f98 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008f94:	2301      	movs	r3, #1
 8008f96:	e0c0      	b.n	800911a <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d106      	bne.n	8008fb2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f009 f9a9 	bl	8012304 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2203      	movs	r2, #3
 8008fb6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f004 fc7e 	bl	800d8c0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	73fb      	strb	r3, [r7, #15]
 8008fc8:	e03e      	b.n	8009048 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008fca:	7bfa      	ldrb	r2, [r7, #15]
 8008fcc:	6879      	ldr	r1, [r7, #4]
 8008fce:	4613      	mov	r3, r2
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	4413      	add	r3, r2
 8008fd4:	00db      	lsls	r3, r3, #3
 8008fd6:	440b      	add	r3, r1
 8008fd8:	3311      	adds	r3, #17
 8008fda:	2201      	movs	r2, #1
 8008fdc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008fde:	7bfa      	ldrb	r2, [r7, #15]
 8008fe0:	6879      	ldr	r1, [r7, #4]
 8008fe2:	4613      	mov	r3, r2
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	4413      	add	r3, r2
 8008fe8:	00db      	lsls	r3, r3, #3
 8008fea:	440b      	add	r3, r1
 8008fec:	3310      	adds	r3, #16
 8008fee:	7bfa      	ldrb	r2, [r7, #15]
 8008ff0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008ff2:	7bfa      	ldrb	r2, [r7, #15]
 8008ff4:	6879      	ldr	r1, [r7, #4]
 8008ff6:	4613      	mov	r3, r2
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	4413      	add	r3, r2
 8008ffc:	00db      	lsls	r3, r3, #3
 8008ffe:	440b      	add	r3, r1
 8009000:	3313      	adds	r3, #19
 8009002:	2200      	movs	r2, #0
 8009004:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009006:	7bfa      	ldrb	r2, [r7, #15]
 8009008:	6879      	ldr	r1, [r7, #4]
 800900a:	4613      	mov	r3, r2
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	4413      	add	r3, r2
 8009010:	00db      	lsls	r3, r3, #3
 8009012:	440b      	add	r3, r1
 8009014:	3320      	adds	r3, #32
 8009016:	2200      	movs	r2, #0
 8009018:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800901a:	7bfa      	ldrb	r2, [r7, #15]
 800901c:	6879      	ldr	r1, [r7, #4]
 800901e:	4613      	mov	r3, r2
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	4413      	add	r3, r2
 8009024:	00db      	lsls	r3, r3, #3
 8009026:	440b      	add	r3, r1
 8009028:	3324      	adds	r3, #36	@ 0x24
 800902a:	2200      	movs	r2, #0
 800902c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800902e:	7bfb      	ldrb	r3, [r7, #15]
 8009030:	6879      	ldr	r1, [r7, #4]
 8009032:	1c5a      	adds	r2, r3, #1
 8009034:	4613      	mov	r3, r2
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	4413      	add	r3, r2
 800903a:	00db      	lsls	r3, r3, #3
 800903c:	440b      	add	r3, r1
 800903e:	2200      	movs	r2, #0
 8009040:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009042:	7bfb      	ldrb	r3, [r7, #15]
 8009044:	3301      	adds	r3, #1
 8009046:	73fb      	strb	r3, [r7, #15]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	791b      	ldrb	r3, [r3, #4]
 800904c:	7bfa      	ldrb	r2, [r7, #15]
 800904e:	429a      	cmp	r2, r3
 8009050:	d3bb      	bcc.n	8008fca <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009052:	2300      	movs	r3, #0
 8009054:	73fb      	strb	r3, [r7, #15]
 8009056:	e044      	b.n	80090e2 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009058:	7bfa      	ldrb	r2, [r7, #15]
 800905a:	6879      	ldr	r1, [r7, #4]
 800905c:	4613      	mov	r3, r2
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	4413      	add	r3, r2
 8009062:	00db      	lsls	r3, r3, #3
 8009064:	440b      	add	r3, r1
 8009066:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800906a:	2200      	movs	r2, #0
 800906c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800906e:	7bfa      	ldrb	r2, [r7, #15]
 8009070:	6879      	ldr	r1, [r7, #4]
 8009072:	4613      	mov	r3, r2
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	4413      	add	r3, r2
 8009078:	00db      	lsls	r3, r3, #3
 800907a:	440b      	add	r3, r1
 800907c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009080:	7bfa      	ldrb	r2, [r7, #15]
 8009082:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009084:	7bfa      	ldrb	r2, [r7, #15]
 8009086:	6879      	ldr	r1, [r7, #4]
 8009088:	4613      	mov	r3, r2
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	4413      	add	r3, r2
 800908e:	00db      	lsls	r3, r3, #3
 8009090:	440b      	add	r3, r1
 8009092:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8009096:	2200      	movs	r2, #0
 8009098:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800909a:	7bfa      	ldrb	r2, [r7, #15]
 800909c:	6879      	ldr	r1, [r7, #4]
 800909e:	4613      	mov	r3, r2
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	4413      	add	r3, r2
 80090a4:	00db      	lsls	r3, r3, #3
 80090a6:	440b      	add	r3, r1
 80090a8:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80090ac:	2200      	movs	r2, #0
 80090ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80090b0:	7bfa      	ldrb	r2, [r7, #15]
 80090b2:	6879      	ldr	r1, [r7, #4]
 80090b4:	4613      	mov	r3, r2
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	4413      	add	r3, r2
 80090ba:	00db      	lsls	r3, r3, #3
 80090bc:	440b      	add	r3, r1
 80090be:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80090c2:	2200      	movs	r2, #0
 80090c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80090c6:	7bfa      	ldrb	r2, [r7, #15]
 80090c8:	6879      	ldr	r1, [r7, #4]
 80090ca:	4613      	mov	r3, r2
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	4413      	add	r3, r2
 80090d0:	00db      	lsls	r3, r3, #3
 80090d2:	440b      	add	r3, r1
 80090d4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80090d8:	2200      	movs	r2, #0
 80090da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80090dc:	7bfb      	ldrb	r3, [r7, #15]
 80090de:	3301      	adds	r3, #1
 80090e0:	73fb      	strb	r3, [r7, #15]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	791b      	ldrb	r3, [r3, #4]
 80090e6:	7bfa      	ldrb	r2, [r7, #15]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d3b5      	bcc.n	8009058 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6818      	ldr	r0, [r3, #0]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	3304      	adds	r3, #4
 80090f4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80090f8:	f004 fbfd 	bl	800d8f6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2200      	movs	r2, #0
 8009100:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2201      	movs	r2, #1
 8009106:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	7a9b      	ldrb	r3, [r3, #10]
 800910e:	2b01      	cmp	r3, #1
 8009110:	d102      	bne.n	8009118 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f001 fc40 	bl	800a998 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8009118:	2300      	movs	r3, #0
}
 800911a:	4618      	mov	r0, r3
 800911c:	3710      	adds	r7, #16
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}

08009122 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009122:	b580      	push	{r7, lr}
 8009124:	b082      	sub	sp, #8
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8009130:	2b01      	cmp	r3, #1
 8009132:	d101      	bne.n	8009138 <HAL_PCD_Start+0x16>
 8009134:	2302      	movs	r3, #2
 8009136:	e012      	b.n	800915e <HAL_PCD_Start+0x3c>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2201      	movs	r2, #1
 800913c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4618      	mov	r0, r3
 8009146:	f004 fba4 	bl	800d892 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4618      	mov	r0, r3
 8009150:	f006 fe65 	bl	800fe1e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800915c:	2300      	movs	r3, #0
}
 800915e:	4618      	mov	r0, r3
 8009160:	3708      	adds	r7, #8
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}

08009166 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009166:	b580      	push	{r7, lr}
 8009168:	b084      	sub	sp, #16
 800916a:	af00      	add	r7, sp, #0
 800916c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4618      	mov	r0, r3
 8009174:	f006 fe6a 	bl	800fe4c <USB_ReadInterrupts>
 8009178:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009180:	2b00      	cmp	r3, #0
 8009182:	d003      	beq.n	800918c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 fb04 	bl	8009792 <PCD_EP_ISR_Handler>

    return;
 800918a:	e110      	b.n	80093ae <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009192:	2b00      	cmp	r3, #0
 8009194:	d013      	beq.n	80091be <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800919e:	b29a      	uxth	r2, r3
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80091a8:	b292      	uxth	r2, r2
 80091aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f009 f93d 	bl	801242e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80091b4:	2100      	movs	r1, #0
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 f8fc 	bl	80093b4 <HAL_PCD_SetAddress>

    return;
 80091bc:	e0f7      	b.n	80093ae <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d00c      	beq.n	80091e2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80091d0:	b29a      	uxth	r2, r3
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80091da:	b292      	uxth	r2, r2
 80091dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80091e0:	e0e5      	b.n	80093ae <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d00c      	beq.n	8009206 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80091f4:	b29a      	uxth	r2, r3
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80091fe:	b292      	uxth	r2, r2
 8009200:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8009204:	e0d3      	b.n	80093ae <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800920c:	2b00      	cmp	r3, #0
 800920e:	d034      	beq.n	800927a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009218:	b29a      	uxth	r2, r3
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f022 0204 	bic.w	r2, r2, #4
 8009222:	b292      	uxth	r2, r2
 8009224:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009230:	b29a      	uxth	r2, r3
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f022 0208 	bic.w	r2, r2, #8
 800923a:	b292      	uxth	r2, r2
 800923c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8009246:	2b01      	cmp	r3, #1
 8009248:	d107      	bne.n	800925a <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2200      	movs	r2, #0
 800924e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009252:	2100      	movs	r1, #0
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f009 fadf 	bl	8012818 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f009 f920 	bl	80124a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009268:	b29a      	uxth	r2, r3
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009272:	b292      	uxth	r2, r2
 8009274:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8009278:	e099      	b.n	80093ae <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009280:	2b00      	cmp	r3, #0
 8009282:	d027      	beq.n	80092d4 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800928c:	b29a      	uxth	r2, r3
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f042 0208 	orr.w	r2, r2, #8
 8009296:	b292      	uxth	r2, r2
 8009298:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80092a4:	b29a      	uxth	r2, r3
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80092ae:	b292      	uxth	r2, r2
 80092b0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80092bc:	b29a      	uxth	r2, r3
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f042 0204 	orr.w	r2, r2, #4
 80092c6:	b292      	uxth	r2, r2
 80092c8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f009 f8cd 	bl	801246c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80092d2:	e06c      	b.n	80093ae <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d040      	beq.n	8009360 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80092e6:	b29a      	uxth	r2, r3
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80092f0:	b292      	uxth	r2, r2
 80092f2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d12b      	bne.n	8009358 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009308:	b29a      	uxth	r2, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f042 0204 	orr.w	r2, r2, #4
 8009312:	b292      	uxth	r2, r2
 8009314:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009320:	b29a      	uxth	r2, r3
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f042 0208 	orr.w	r2, r2, #8
 800932a:	b292      	uxth	r2, r2
 800932c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2201      	movs	r2, #1
 8009334:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8009340:	b29b      	uxth	r3, r3
 8009342:	089b      	lsrs	r3, r3, #2
 8009344:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800934e:	2101      	movs	r1, #1
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f009 fa61 	bl	8012818 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8009356:	e02a      	b.n	80093ae <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f009 f887 	bl	801246c <HAL_PCD_SuspendCallback>
    return;
 800935e:	e026      	b.n	80093ae <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009366:	2b00      	cmp	r3, #0
 8009368:	d00f      	beq.n	800938a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009372:	b29a      	uxth	r2, r3
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800937c:	b292      	uxth	r2, r2
 800937e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f009 f845 	bl	8012412 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8009388:	e011      	b.n	80093ae <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009390:	2b00      	cmp	r3, #0
 8009392:	d00c      	beq.n	80093ae <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800939c:	b29a      	uxth	r2, r3
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80093a6:	b292      	uxth	r2, r2
 80093a8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80093ac:	bf00      	nop
  }
}
 80093ae:	3710      	adds	r7, #16
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	460b      	mov	r3, r1
 80093be:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d101      	bne.n	80093ce <HAL_PCD_SetAddress+0x1a>
 80093ca:	2302      	movs	r3, #2
 80093cc:	e012      	b.n	80093f4 <HAL_PCD_SetAddress+0x40>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2201      	movs	r2, #1
 80093d2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	78fa      	ldrb	r2, [r7, #3]
 80093da:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	78fa      	ldrb	r2, [r7, #3]
 80093e2:	4611      	mov	r1, r2
 80093e4:	4618      	mov	r0, r3
 80093e6:	f006 fd06 	bl	800fdf6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80093f2:	2300      	movs	r3, #0
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3708      	adds	r7, #8
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	4608      	mov	r0, r1
 8009406:	4611      	mov	r1, r2
 8009408:	461a      	mov	r2, r3
 800940a:	4603      	mov	r3, r0
 800940c:	70fb      	strb	r3, [r7, #3]
 800940e:	460b      	mov	r3, r1
 8009410:	803b      	strh	r3, [r7, #0]
 8009412:	4613      	mov	r3, r2
 8009414:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009416:	2300      	movs	r3, #0
 8009418:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800941a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800941e:	2b00      	cmp	r3, #0
 8009420:	da0e      	bge.n	8009440 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009422:	78fb      	ldrb	r3, [r7, #3]
 8009424:	f003 0207 	and.w	r2, r3, #7
 8009428:	4613      	mov	r3, r2
 800942a:	009b      	lsls	r3, r3, #2
 800942c:	4413      	add	r3, r2
 800942e:	00db      	lsls	r3, r3, #3
 8009430:	3310      	adds	r3, #16
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	4413      	add	r3, r2
 8009436:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2201      	movs	r2, #1
 800943c:	705a      	strb	r2, [r3, #1]
 800943e:	e00e      	b.n	800945e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009440:	78fb      	ldrb	r3, [r7, #3]
 8009442:	f003 0207 	and.w	r2, r3, #7
 8009446:	4613      	mov	r3, r2
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	4413      	add	r3, r2
 800944c:	00db      	lsls	r3, r3, #3
 800944e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	4413      	add	r3, r2
 8009456:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2200      	movs	r2, #0
 800945c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800945e:	78fb      	ldrb	r3, [r7, #3]
 8009460:	f003 0307 	and.w	r3, r3, #7
 8009464:	b2da      	uxtb	r2, r3
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800946a:	883a      	ldrh	r2, [r7, #0]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	78ba      	ldrb	r2, [r7, #2]
 8009474:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009476:	78bb      	ldrb	r3, [r7, #2]
 8009478:	2b02      	cmp	r3, #2
 800947a:	d102      	bne.n	8009482 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2200      	movs	r2, #0
 8009480:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8009488:	2b01      	cmp	r3, #1
 800948a:	d101      	bne.n	8009490 <HAL_PCD_EP_Open+0x94>
 800948c:	2302      	movs	r3, #2
 800948e:	e00e      	b.n	80094ae <HAL_PCD_EP_Open+0xb2>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2201      	movs	r2, #1
 8009494:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	68f9      	ldr	r1, [r7, #12]
 800949e:	4618      	mov	r0, r3
 80094a0:	f004 fa48 	bl	800d934 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80094ac:	7afb      	ldrb	r3, [r7, #11]
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3710      	adds	r7, #16
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b084      	sub	sp, #16
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
 80094be:	460b      	mov	r3, r1
 80094c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80094c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	da0e      	bge.n	80094e8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80094ca:	78fb      	ldrb	r3, [r7, #3]
 80094cc:	f003 0207 	and.w	r2, r3, #7
 80094d0:	4613      	mov	r3, r2
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	4413      	add	r3, r2
 80094d6:	00db      	lsls	r3, r3, #3
 80094d8:	3310      	adds	r3, #16
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	4413      	add	r3, r2
 80094de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2201      	movs	r2, #1
 80094e4:	705a      	strb	r2, [r3, #1]
 80094e6:	e00e      	b.n	8009506 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80094e8:	78fb      	ldrb	r3, [r7, #3]
 80094ea:	f003 0207 	and.w	r2, r3, #7
 80094ee:	4613      	mov	r3, r2
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	4413      	add	r3, r2
 80094f4:	00db      	lsls	r3, r3, #3
 80094f6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	4413      	add	r3, r2
 80094fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2200      	movs	r2, #0
 8009504:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009506:	78fb      	ldrb	r3, [r7, #3]
 8009508:	f003 0307 	and.w	r3, r3, #7
 800950c:	b2da      	uxtb	r2, r3
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8009518:	2b01      	cmp	r3, #1
 800951a:	d101      	bne.n	8009520 <HAL_PCD_EP_Close+0x6a>
 800951c:	2302      	movs	r3, #2
 800951e:	e00e      	b.n	800953e <HAL_PCD_EP_Close+0x88>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2201      	movs	r2, #1
 8009524:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	68f9      	ldr	r1, [r7, #12]
 800952e:	4618      	mov	r0, r3
 8009530:	f004 fdc4 	bl	800e0bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2200      	movs	r2, #0
 8009538:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800953c:	2300      	movs	r3, #0
}
 800953e:	4618      	mov	r0, r3
 8009540:	3710      	adds	r7, #16
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009546:	b580      	push	{r7, lr}
 8009548:	b086      	sub	sp, #24
 800954a:	af00      	add	r7, sp, #0
 800954c:	60f8      	str	r0, [r7, #12]
 800954e:	607a      	str	r2, [r7, #4]
 8009550:	603b      	str	r3, [r7, #0]
 8009552:	460b      	mov	r3, r1
 8009554:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009556:	7afb      	ldrb	r3, [r7, #11]
 8009558:	f003 0207 	and.w	r2, r3, #7
 800955c:	4613      	mov	r3, r2
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	4413      	add	r3, r2
 8009562:	00db      	lsls	r3, r3, #3
 8009564:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009568:	68fa      	ldr	r2, [r7, #12]
 800956a:	4413      	add	r3, r2
 800956c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	683a      	ldr	r2, [r7, #0]
 8009578:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	2200      	movs	r2, #0
 800957e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	2200      	movs	r2, #0
 8009584:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009586:	7afb      	ldrb	r3, [r7, #11]
 8009588:	f003 0307 	and.w	r3, r3, #7
 800958c:	b2da      	uxtb	r2, r3
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	6979      	ldr	r1, [r7, #20]
 8009598:	4618      	mov	r0, r3
 800959a:	f004 ff7c 	bl	800e496 <USB_EPStartXfer>

  return HAL_OK;
 800959e:	2300      	movs	r3, #0
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3718      	adds	r7, #24
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b083      	sub	sp, #12
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	460b      	mov	r3, r1
 80095b2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80095b4:	78fb      	ldrb	r3, [r7, #3]
 80095b6:	f003 0207 	and.w	r2, r3, #7
 80095ba:	6879      	ldr	r1, [r7, #4]
 80095bc:	4613      	mov	r3, r2
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	4413      	add	r3, r2
 80095c2:	00db      	lsls	r3, r3, #3
 80095c4:	440b      	add	r3, r1
 80095c6:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80095ca:	681b      	ldr	r3, [r3, #0]
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	370c      	adds	r7, #12
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr

080095d8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b086      	sub	sp, #24
 80095dc:	af00      	add	r7, sp, #0
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	607a      	str	r2, [r7, #4]
 80095e2:	603b      	str	r3, [r7, #0]
 80095e4:	460b      	mov	r3, r1
 80095e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80095e8:	7afb      	ldrb	r3, [r7, #11]
 80095ea:	f003 0207 	and.w	r2, r3, #7
 80095ee:	4613      	mov	r3, r2
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	4413      	add	r3, r2
 80095f4:	00db      	lsls	r3, r3, #3
 80095f6:	3310      	adds	r3, #16
 80095f8:	68fa      	ldr	r2, [r7, #12]
 80095fa:	4413      	add	r3, r2
 80095fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	683a      	ldr	r2, [r7, #0]
 8009608:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	2201      	movs	r2, #1
 800960e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	683a      	ldr	r2, [r7, #0]
 8009616:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	2200      	movs	r2, #0
 800961c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	2201      	movs	r2, #1
 8009622:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009624:	7afb      	ldrb	r3, [r7, #11]
 8009626:	f003 0307 	and.w	r3, r3, #7
 800962a:	b2da      	uxtb	r2, r3
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	6979      	ldr	r1, [r7, #20]
 8009636:	4618      	mov	r0, r3
 8009638:	f004 ff2d 	bl	800e496 <USB_EPStartXfer>

  return HAL_OK;
 800963c:	2300      	movs	r3, #0
}
 800963e:	4618      	mov	r0, r3
 8009640:	3718      	adds	r7, #24
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}

08009646 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009646:	b580      	push	{r7, lr}
 8009648:	b084      	sub	sp, #16
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
 800964e:	460b      	mov	r3, r1
 8009650:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009652:	78fb      	ldrb	r3, [r7, #3]
 8009654:	f003 0307 	and.w	r3, r3, #7
 8009658:	687a      	ldr	r2, [r7, #4]
 800965a:	7912      	ldrb	r2, [r2, #4]
 800965c:	4293      	cmp	r3, r2
 800965e:	d901      	bls.n	8009664 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009660:	2301      	movs	r3, #1
 8009662:	e03e      	b.n	80096e2 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009664:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009668:	2b00      	cmp	r3, #0
 800966a:	da0e      	bge.n	800968a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800966c:	78fb      	ldrb	r3, [r7, #3]
 800966e:	f003 0207 	and.w	r2, r3, #7
 8009672:	4613      	mov	r3, r2
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	4413      	add	r3, r2
 8009678:	00db      	lsls	r3, r3, #3
 800967a:	3310      	adds	r3, #16
 800967c:	687a      	ldr	r2, [r7, #4]
 800967e:	4413      	add	r3, r2
 8009680:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2201      	movs	r2, #1
 8009686:	705a      	strb	r2, [r3, #1]
 8009688:	e00c      	b.n	80096a4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800968a:	78fa      	ldrb	r2, [r7, #3]
 800968c:	4613      	mov	r3, r2
 800968e:	009b      	lsls	r3, r3, #2
 8009690:	4413      	add	r3, r2
 8009692:	00db      	lsls	r3, r3, #3
 8009694:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	4413      	add	r3, r2
 800969c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2200      	movs	r2, #0
 80096a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2201      	movs	r2, #1
 80096a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80096aa:	78fb      	ldrb	r3, [r7, #3]
 80096ac:	f003 0307 	and.w	r3, r3, #7
 80096b0:	b2da      	uxtb	r2, r3
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d101      	bne.n	80096c4 <HAL_PCD_EP_SetStall+0x7e>
 80096c0:	2302      	movs	r3, #2
 80096c2:	e00e      	b.n	80096e2 <HAL_PCD_EP_SetStall+0x9c>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2201      	movs	r2, #1
 80096c8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	68f9      	ldr	r1, [r7, #12]
 80096d2:	4618      	mov	r0, r3
 80096d4:	f006 fa90 	bl	800fbf8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2200      	movs	r2, #0
 80096dc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80096e0:	2300      	movs	r3, #0
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3710      	adds	r7, #16
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}

080096ea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80096ea:	b580      	push	{r7, lr}
 80096ec:	b084      	sub	sp, #16
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
 80096f2:	460b      	mov	r3, r1
 80096f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80096f6:	78fb      	ldrb	r3, [r7, #3]
 80096f8:	f003 030f 	and.w	r3, r3, #15
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	7912      	ldrb	r2, [r2, #4]
 8009700:	4293      	cmp	r3, r2
 8009702:	d901      	bls.n	8009708 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009704:	2301      	movs	r3, #1
 8009706:	e040      	b.n	800978a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009708:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800970c:	2b00      	cmp	r3, #0
 800970e:	da0e      	bge.n	800972e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009710:	78fb      	ldrb	r3, [r7, #3]
 8009712:	f003 0207 	and.w	r2, r3, #7
 8009716:	4613      	mov	r3, r2
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	4413      	add	r3, r2
 800971c:	00db      	lsls	r3, r3, #3
 800971e:	3310      	adds	r3, #16
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	4413      	add	r3, r2
 8009724:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2201      	movs	r2, #1
 800972a:	705a      	strb	r2, [r3, #1]
 800972c:	e00e      	b.n	800974c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800972e:	78fb      	ldrb	r3, [r7, #3]
 8009730:	f003 0207 	and.w	r2, r3, #7
 8009734:	4613      	mov	r3, r2
 8009736:	009b      	lsls	r3, r3, #2
 8009738:	4413      	add	r3, r2
 800973a:	00db      	lsls	r3, r3, #3
 800973c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	4413      	add	r3, r2
 8009744:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2200      	movs	r2, #0
 800974a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2200      	movs	r2, #0
 8009750:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009752:	78fb      	ldrb	r3, [r7, #3]
 8009754:	f003 0307 	and.w	r3, r3, #7
 8009758:	b2da      	uxtb	r2, r3
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8009764:	2b01      	cmp	r3, #1
 8009766:	d101      	bne.n	800976c <HAL_PCD_EP_ClrStall+0x82>
 8009768:	2302      	movs	r3, #2
 800976a:	e00e      	b.n	800978a <HAL_PCD_EP_ClrStall+0xa0>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2201      	movs	r2, #1
 8009770:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	68f9      	ldr	r1, [r7, #12]
 800977a:	4618      	mov	r0, r3
 800977c:	f006 fa8d 	bl	800fc9a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8009788:	2300      	movs	r3, #0
}
 800978a:	4618      	mov	r0, r3
 800978c:	3710      	adds	r7, #16
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8009792:	b580      	push	{r7, lr}
 8009794:	b096      	sub	sp, #88	@ 0x58
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800979a:	e3ad      	b.n	8009ef8 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80097a4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80097a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	f003 030f 	and.w	r3, r3, #15
 80097b2:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80097b6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	f040 816f 	bne.w	8009a9e <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80097c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80097c4:	f003 0310 	and.w	r3, r3, #16
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d14c      	bne.n	8009866 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	881b      	ldrh	r3, [r3, #0]
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80097d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097dc:	81fb      	strh	r3, [r7, #14]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681a      	ldr	r2, [r3, #0]
 80097e2:	89fb      	ldrh	r3, [r7, #14]
 80097e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	3310      	adds	r3, #16
 80097f4:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80097fe:	b29b      	uxth	r3, r3
 8009800:	461a      	mov	r2, r3
 8009802:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	00db      	lsls	r3, r3, #3
 8009808:	4413      	add	r3, r2
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	6812      	ldr	r2, [r2, #0]
 800980e:	4413      	add	r3, r2
 8009810:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009814:	881b      	ldrh	r3, [r3, #0]
 8009816:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800981a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800981c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800981e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009820:	695a      	ldr	r2, [r3, #20]
 8009822:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009824:	69db      	ldr	r3, [r3, #28]
 8009826:	441a      	add	r2, r3
 8009828:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800982a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800982c:	2100      	movs	r1, #0
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f008 fdd5 	bl	80123de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	7b1b      	ldrb	r3, [r3, #12]
 8009838:	b2db      	uxtb	r3, r3
 800983a:	2b00      	cmp	r3, #0
 800983c:	f000 835c 	beq.w	8009ef8 <PCD_EP_ISR_Handler+0x766>
 8009840:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009842:	699b      	ldr	r3, [r3, #24]
 8009844:	2b00      	cmp	r3, #0
 8009846:	f040 8357 	bne.w	8009ef8 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	7b1b      	ldrb	r3, [r3, #12]
 800984e:	b2db      	uxtb	r3, r3
 8009850:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009854:	b2da      	uxtb	r2, r3
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2200      	movs	r2, #0
 8009862:	731a      	strb	r2, [r3, #12]
 8009864:	e348      	b.n	8009ef8 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800986c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	881b      	ldrh	r3, [r3, #0]
 8009874:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8009878:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800987c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009880:	2b00      	cmp	r3, #0
 8009882:	d032      	beq.n	80098ea <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800988c:	b29b      	uxth	r3, r3
 800988e:	461a      	mov	r2, r3
 8009890:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	00db      	lsls	r3, r3, #3
 8009896:	4413      	add	r3, r2
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	6812      	ldr	r2, [r2, #0]
 800989c:	4413      	add	r3, r2
 800989e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80098a2:	881b      	ldrh	r3, [r3, #0]
 80098a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80098a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098aa:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6818      	ldr	r0, [r3, #0]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80098b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098b8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80098ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098bc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80098be:	b29b      	uxth	r3, r3
 80098c0:	f006 fb16 	bl	800fef0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	881b      	ldrh	r3, [r3, #0]
 80098ca:	b29a      	uxth	r2, r3
 80098cc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80098d0:	4013      	ands	r3, r2
 80098d2:	823b      	strh	r3, [r7, #16]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	8a3a      	ldrh	r2, [r7, #16]
 80098da:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80098de:	b292      	uxth	r2, r2
 80098e0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f008 fd4e 	bl	8012384 <HAL_PCD_SetupStageCallback>
 80098e8:	e306      	b.n	8009ef8 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80098ea:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	f280 8302 	bge.w	8009ef8 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	881b      	ldrh	r3, [r3, #0]
 80098fa:	b29a      	uxth	r2, r3
 80098fc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8009900:	4013      	ands	r3, r2
 8009902:	83fb      	strh	r3, [r7, #30]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	8bfa      	ldrh	r2, [r7, #30]
 800990a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800990e:	b292      	uxth	r2, r2
 8009910:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800991a:	b29b      	uxth	r3, r3
 800991c:	461a      	mov	r2, r3
 800991e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	00db      	lsls	r3, r3, #3
 8009924:	4413      	add	r3, r2
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	6812      	ldr	r2, [r2, #0]
 800992a:	4413      	add	r3, r2
 800992c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009930:	881b      	ldrh	r3, [r3, #0]
 8009932:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009936:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009938:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800993a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800993c:	69db      	ldr	r3, [r3, #28]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d019      	beq.n	8009976 <PCD_EP_ISR_Handler+0x1e4>
 8009942:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009944:	695b      	ldr	r3, [r3, #20]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d015      	beq.n	8009976 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6818      	ldr	r0, [r3, #0]
 800994e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009950:	6959      	ldr	r1, [r3, #20]
 8009952:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009954:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8009956:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009958:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800995a:	b29b      	uxth	r3, r3
 800995c:	f006 fac8 	bl	800fef0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8009960:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009962:	695a      	ldr	r2, [r3, #20]
 8009964:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009966:	69db      	ldr	r3, [r3, #28]
 8009968:	441a      	add	r2, r3
 800996a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800996c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800996e:	2100      	movs	r1, #0
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f008 fd19 	bl	80123a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	881b      	ldrh	r3, [r3, #0]
 800997c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8009980:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009984:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009988:	2b00      	cmp	r3, #0
 800998a:	f040 82b5 	bne.w	8009ef8 <PCD_EP_ISR_Handler+0x766>
 800998e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009992:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009996:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800999a:	f000 82ad 	beq.w	8009ef8 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	61bb      	str	r3, [r7, #24]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80099ac:	b29b      	uxth	r3, r3
 80099ae:	461a      	mov	r2, r3
 80099b0:	69bb      	ldr	r3, [r7, #24]
 80099b2:	4413      	add	r3, r2
 80099b4:	61bb      	str	r3, [r7, #24]
 80099b6:	69bb      	ldr	r3, [r7, #24]
 80099b8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80099bc:	617b      	str	r3, [r7, #20]
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	881b      	ldrh	r3, [r3, #0]
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80099c8:	b29a      	uxth	r2, r3
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	801a      	strh	r2, [r3, #0]
 80099ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	2b3e      	cmp	r3, #62	@ 0x3e
 80099d4:	d91d      	bls.n	8009a12 <PCD_EP_ISR_Handler+0x280>
 80099d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099d8:	691b      	ldr	r3, [r3, #16]
 80099da:	095b      	lsrs	r3, r3, #5
 80099dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80099de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099e0:	691b      	ldr	r3, [r3, #16]
 80099e2:	f003 031f 	and.w	r3, r3, #31
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d102      	bne.n	80099f0 <PCD_EP_ISR_Handler+0x25e>
 80099ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099ec:	3b01      	subs	r3, #1
 80099ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	881b      	ldrh	r3, [r3, #0]
 80099f4:	b29a      	uxth	r2, r3
 80099f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	029b      	lsls	r3, r3, #10
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	4313      	orrs	r3, r2
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a0a:	b29a      	uxth	r2, r3
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	801a      	strh	r2, [r3, #0]
 8009a10:	e026      	b.n	8009a60 <PCD_EP_ISR_Handler+0x2ce>
 8009a12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a14:	691b      	ldr	r3, [r3, #16]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d10a      	bne.n	8009a30 <PCD_EP_ISR_Handler+0x29e>
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	881b      	ldrh	r3, [r3, #0]
 8009a1e:	b29b      	uxth	r3, r3
 8009a20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a28:	b29a      	uxth	r2, r3
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	801a      	strh	r2, [r3, #0]
 8009a2e:	e017      	b.n	8009a60 <PCD_EP_ISR_Handler+0x2ce>
 8009a30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a32:	691b      	ldr	r3, [r3, #16]
 8009a34:	085b      	lsrs	r3, r3, #1
 8009a36:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a3a:	691b      	ldr	r3, [r3, #16]
 8009a3c:	f003 0301 	and.w	r3, r3, #1
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d002      	beq.n	8009a4a <PCD_EP_ISR_Handler+0x2b8>
 8009a44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a46:	3301      	adds	r3, #1
 8009a48:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	881b      	ldrh	r3, [r3, #0]
 8009a4e:	b29a      	uxth	r2, r3
 8009a50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	029b      	lsls	r3, r3, #10
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	b29a      	uxth	r2, r3
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	881b      	ldrh	r3, [r3, #0]
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009a6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a70:	827b      	strh	r3, [r7, #18]
 8009a72:	8a7b      	ldrh	r3, [r7, #18]
 8009a74:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009a78:	827b      	strh	r3, [r7, #18]
 8009a7a:	8a7b      	ldrh	r3, [r7, #18]
 8009a7c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009a80:	827b      	strh	r3, [r7, #18]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681a      	ldr	r2, [r3, #0]
 8009a86:	8a7b      	ldrh	r3, [r7, #18]
 8009a88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009a94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	8013      	strh	r3, [r2, #0]
 8009a9c:	e22c      	b.n	8009ef8 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	4413      	add	r3, r2
 8009aac:	881b      	ldrh	r3, [r3, #0]
 8009aae:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009ab2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	f280 80f6 	bge.w	8009ca8 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	4413      	add	r3, r2
 8009aca:	881b      	ldrh	r3, [r3, #0]
 8009acc:	b29a      	uxth	r2, r3
 8009ace:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8009ad2:	4013      	ands	r3, r2
 8009ad4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	461a      	mov	r2, r3
 8009ade:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	4413      	add	r3, r2
 8009ae6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8009aea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009aee:	b292      	uxth	r2, r2
 8009af0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8009af2:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8009af6:	4613      	mov	r3, r2
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	4413      	add	r3, r2
 8009afc:	00db      	lsls	r3, r3, #3
 8009afe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	4413      	add	r3, r2
 8009b06:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8009b08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b0a:	7b1b      	ldrb	r3, [r3, #12]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d123      	bne.n	8009b58 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	00db      	lsls	r3, r3, #3
 8009b22:	4413      	add	r3, r2
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	6812      	ldr	r2, [r2, #0]
 8009b28:	4413      	add	r3, r2
 8009b2a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009b2e:	881b      	ldrh	r3, [r3, #0]
 8009b30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b34:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8009b38:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	f000 808e 	beq.w	8009c5e <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6818      	ldr	r0, [r3, #0]
 8009b46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b48:	6959      	ldr	r1, [r3, #20]
 8009b4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b4c:	88da      	ldrh	r2, [r3, #6]
 8009b4e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009b52:	f006 f9cd 	bl	800fef0 <USB_ReadPMA>
 8009b56:	e082      	b.n	8009c5e <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8009b58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b5a:	78db      	ldrb	r3, [r3, #3]
 8009b5c:	2b02      	cmp	r3, #2
 8009b5e:	d10a      	bne.n	8009b76 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8009b60:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009b64:	461a      	mov	r2, r3
 8009b66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f000 f9d3 	bl	8009f14 <HAL_PCD_EP_DB_Receive>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8009b74:	e073      	b.n	8009c5e <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b7e:	781b      	ldrb	r3, [r3, #0]
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	4413      	add	r3, r2
 8009b84:	881b      	ldrh	r3, [r3, #0]
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b90:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	461a      	mov	r2, r3
 8009b9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	441a      	add	r2, r3
 8009ba2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8009ba6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009baa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009bae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009bb2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	4413      	add	r3, r2
 8009bc8:	881b      	ldrh	r3, [r3, #0]
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d022      	beq.n	8009c1a <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	461a      	mov	r2, r3
 8009be0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	00db      	lsls	r3, r3, #3
 8009be6:	4413      	add	r3, r2
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	6812      	ldr	r2, [r2, #0]
 8009bec:	4413      	add	r3, r2
 8009bee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009bf2:	881b      	ldrh	r3, [r3, #0]
 8009bf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009bf8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8009bfc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d02c      	beq.n	8009c5e <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6818      	ldr	r0, [r3, #0]
 8009c08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c0a:	6959      	ldr	r1, [r3, #20]
 8009c0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c0e:	891a      	ldrh	r2, [r3, #8]
 8009c10:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009c14:	f006 f96c 	bl	800fef0 <USB_ReadPMA>
 8009c18:	e021      	b.n	8009c5e <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	461a      	mov	r2, r3
 8009c26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c28:	781b      	ldrb	r3, [r3, #0]
 8009c2a:	00db      	lsls	r3, r3, #3
 8009c2c:	4413      	add	r3, r2
 8009c2e:	687a      	ldr	r2, [r7, #4]
 8009c30:	6812      	ldr	r2, [r2, #0]
 8009c32:	4413      	add	r3, r2
 8009c34:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009c38:	881b      	ldrh	r3, [r3, #0]
 8009c3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c3e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8009c42:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d009      	beq.n	8009c5e <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6818      	ldr	r0, [r3, #0]
 8009c4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c50:	6959      	ldr	r1, [r3, #20]
 8009c52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c54:	895a      	ldrh	r2, [r3, #10]
 8009c56:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009c5a:	f006 f949 	bl	800fef0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8009c5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c60:	69da      	ldr	r2, [r3, #28]
 8009c62:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009c66:	441a      	add	r2, r3
 8009c68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c6a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8009c6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c6e:	695a      	ldr	r2, [r3, #20]
 8009c70:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009c74:	441a      	add	r2, r3
 8009c76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c78:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8009c7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c7c:	699b      	ldr	r3, [r3, #24]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d005      	beq.n	8009c8e <PCD_EP_ISR_Handler+0x4fc>
 8009c82:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8009c86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c88:	691b      	ldr	r3, [r3, #16]
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d206      	bcs.n	8009c9c <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8009c8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	4619      	mov	r1, r3
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f008 fb87 	bl	80123a8 <HAL_PCD_DataOutStageCallback>
 8009c9a:	e005      	b.n	8009ca8 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f004 fbf7 	bl	800e496 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8009ca8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009cac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	f000 8121 	beq.w	8009ef8 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8009cb6:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8009cba:	4613      	mov	r3, r2
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	4413      	add	r3, r2
 8009cc0:	00db      	lsls	r3, r3, #3
 8009cc2:	3310      	adds	r3, #16
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	461a      	mov	r2, r3
 8009cd0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8009cd4:	009b      	lsls	r3, r3, #2
 8009cd6:	4413      	add	r3, r2
 8009cd8:	881b      	ldrh	r3, [r3, #0]
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8009ce0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ce4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	461a      	mov	r2, r3
 8009cee:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	441a      	add	r2, r3
 8009cf6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009cfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8009d06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d08:	78db      	ldrb	r3, [r3, #3]
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	f040 80a2 	bne.w	8009e54 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8009d10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d12:	2200      	movs	r2, #0
 8009d14:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8009d16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d18:	7b1b      	ldrb	r3, [r3, #12]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	f000 8093 	beq.w	8009e46 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009d20:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d046      	beq.n	8009dba <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009d2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d2e:	785b      	ldrb	r3, [r3, #1]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d126      	bne.n	8009d82 <PCD_EP_ISR_Handler+0x5f0>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d42:	b29b      	uxth	r3, r3
 8009d44:	461a      	mov	r2, r3
 8009d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d48:	4413      	add	r3, r2
 8009d4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	00da      	lsls	r2, r3, #3
 8009d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d54:	4413      	add	r3, r2
 8009d56:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009d5a:	623b      	str	r3, [r7, #32]
 8009d5c:	6a3b      	ldr	r3, [r7, #32]
 8009d5e:	881b      	ldrh	r3, [r3, #0]
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d66:	b29a      	uxth	r2, r3
 8009d68:	6a3b      	ldr	r3, [r7, #32]
 8009d6a:	801a      	strh	r2, [r3, #0]
 8009d6c:	6a3b      	ldr	r3, [r7, #32]
 8009d6e:	881b      	ldrh	r3, [r3, #0]
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d7a:	b29a      	uxth	r2, r3
 8009d7c:	6a3b      	ldr	r3, [r7, #32]
 8009d7e:	801a      	strh	r2, [r3, #0]
 8009d80:	e061      	b.n	8009e46 <PCD_EP_ISR_Handler+0x6b4>
 8009d82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d84:	785b      	ldrb	r3, [r3, #1]
 8009d86:	2b01      	cmp	r3, #1
 8009d88:	d15d      	bne.n	8009e46 <PCD_EP_ISR_Handler+0x6b4>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d9e:	4413      	add	r3, r2
 8009da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009da2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	00da      	lsls	r2, r3, #3
 8009da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009daa:	4413      	add	r3, r2
 8009dac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009db0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009db4:	2200      	movs	r2, #0
 8009db6:	801a      	strh	r2, [r3, #0]
 8009db8:	e045      	b.n	8009e46 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009dc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009dc2:	785b      	ldrb	r3, [r3, #1]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d126      	bne.n	8009e16 <PCD_EP_ISR_Handler+0x684>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	461a      	mov	r2, r3
 8009dda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ddc:	4413      	add	r3, r2
 8009dde:	637b      	str	r3, [r7, #52]	@ 0x34
 8009de0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	00da      	lsls	r2, r3, #3
 8009de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009de8:	4413      	add	r3, r2
 8009dea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009dee:	633b      	str	r3, [r7, #48]	@ 0x30
 8009df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009df2:	881b      	ldrh	r3, [r3, #0]
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009dfa:	b29a      	uxth	r2, r3
 8009dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dfe:	801a      	strh	r2, [r3, #0]
 8009e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e02:	881b      	ldrh	r3, [r3, #0]
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e0e:	b29a      	uxth	r2, r3
 8009e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e12:	801a      	strh	r2, [r3, #0]
 8009e14:	e017      	b.n	8009e46 <PCD_EP_ISR_Handler+0x6b4>
 8009e16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e18:	785b      	ldrb	r3, [r3, #1]
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	d113      	bne.n	8009e46 <PCD_EP_ISR_Handler+0x6b4>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e26:	b29b      	uxth	r3, r3
 8009e28:	461a      	mov	r2, r3
 8009e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e2c:	4413      	add	r3, r2
 8009e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e32:	781b      	ldrb	r3, [r3, #0]
 8009e34:	00da      	lsls	r2, r3, #3
 8009e36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e38:	4413      	add	r3, r2
 8009e3a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009e3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e42:	2200      	movs	r2, #0
 8009e44:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009e46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e48:	781b      	ldrb	r3, [r3, #0]
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f008 fac6 	bl	80123de <HAL_PCD_DataInStageCallback>
 8009e52:	e051      	b.n	8009ef8 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8009e54:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d144      	bne.n	8009eea <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	00db      	lsls	r3, r3, #3
 8009e72:	4413      	add	r3, r2
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	6812      	ldr	r2, [r2, #0]
 8009e78:	4413      	add	r3, r2
 8009e7a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009e7e:	881b      	ldrh	r3, [r3, #0]
 8009e80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e84:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8009e88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e8a:	699a      	ldr	r2, [r3, #24]
 8009e8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d907      	bls.n	8009ea4 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8009e94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e96:	699a      	ldr	r2, [r3, #24]
 8009e98:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009e9c:	1ad2      	subs	r2, r2, r3
 8009e9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ea0:	619a      	str	r2, [r3, #24]
 8009ea2:	e002      	b.n	8009eaa <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8009ea4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8009eaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009eac:	699b      	ldr	r3, [r3, #24]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d106      	bne.n	8009ec0 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009eb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009eb4:	781b      	ldrb	r3, [r3, #0]
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f008 fa90 	bl	80123de <HAL_PCD_DataInStageCallback>
 8009ebe:	e01b      	b.n	8009ef8 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8009ec0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ec2:	695a      	ldr	r2, [r3, #20]
 8009ec4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009ec8:	441a      	add	r2, r3
 8009eca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ecc:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8009ece:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ed0:	69da      	ldr	r2, [r3, #28]
 8009ed2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009ed6:	441a      	add	r2, r3
 8009ed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009eda:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f004 fad7 	bl	800e496 <USB_EPStartXfer>
 8009ee8:	e006      	b.n	8009ef8 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8009eea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009eee:	461a      	mov	r2, r3
 8009ef0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 f917 	bl	800a126 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	b21b      	sxth	r3, r3
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f6ff ac49 	blt.w	800979c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8009f0a:	2300      	movs	r3, #0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3758      	adds	r7, #88	@ 0x58
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b088      	sub	sp, #32
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	60b9      	str	r1, [r7, #8]
 8009f1e:	4613      	mov	r3, r2
 8009f20:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009f22:	88fb      	ldrh	r3, [r7, #6]
 8009f24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d07c      	beq.n	800a026 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f34:	b29b      	uxth	r3, r3
 8009f36:	461a      	mov	r2, r3
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	781b      	ldrb	r3, [r3, #0]
 8009f3c:	00db      	lsls	r3, r3, #3
 8009f3e:	4413      	add	r3, r2
 8009f40:	68fa      	ldr	r2, [r7, #12]
 8009f42:	6812      	ldr	r2, [r2, #0]
 8009f44:	4413      	add	r3, r2
 8009f46:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009f4a:	881b      	ldrh	r3, [r3, #0]
 8009f4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f50:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	699a      	ldr	r2, [r3, #24]
 8009f56:	8b7b      	ldrh	r3, [r7, #26]
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d306      	bcc.n	8009f6a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	699a      	ldr	r2, [r3, #24]
 8009f60:	8b7b      	ldrh	r3, [r7, #26]
 8009f62:	1ad2      	subs	r2, r2, r3
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	619a      	str	r2, [r3, #24]
 8009f68:	e002      	b.n	8009f70 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	699b      	ldr	r3, [r3, #24]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d123      	bne.n	8009fc0 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	4413      	add	r3, r2
 8009f86:	881b      	ldrh	r3, [r3, #0]
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009f8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f92:	833b      	strh	r3, [r7, #24]
 8009f94:	8b3b      	ldrh	r3, [r7, #24]
 8009f96:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009f9a:	833b      	strh	r3, [r7, #24]
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	441a      	add	r2, r3
 8009faa:	8b3b      	ldrh	r3, [r7, #24]
 8009fac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009fb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009fb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009fb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009fc0:	88fb      	ldrh	r3, [r7, #6]
 8009fc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d01f      	beq.n	800a00a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	461a      	mov	r2, r3
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	4413      	add	r3, r2
 8009fd8:	881b      	ldrh	r3, [r3, #0]
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009fe0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fe4:	82fb      	strh	r3, [r7, #22]
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	461a      	mov	r2, r3
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	441a      	add	r2, r3
 8009ff4:	8afb      	ldrh	r3, [r7, #22]
 8009ff6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ffa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ffe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a002:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a006:	b29b      	uxth	r3, r3
 800a008:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800a00a:	8b7b      	ldrh	r3, [r7, #26]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	f000 8085 	beq.w	800a11c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	6818      	ldr	r0, [r3, #0]
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	6959      	ldr	r1, [r3, #20]
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	891a      	ldrh	r2, [r3, #8]
 800a01e:	8b7b      	ldrh	r3, [r7, #26]
 800a020:	f005 ff66 	bl	800fef0 <USB_ReadPMA>
 800a024:	e07a      	b.n	800a11c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a02e:	b29b      	uxth	r3, r3
 800a030:	461a      	mov	r2, r3
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	00db      	lsls	r3, r3, #3
 800a038:	4413      	add	r3, r2
 800a03a:	68fa      	ldr	r2, [r7, #12]
 800a03c:	6812      	ldr	r2, [r2, #0]
 800a03e:	4413      	add	r3, r2
 800a040:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a044:	881b      	ldrh	r3, [r3, #0]
 800a046:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a04a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	699a      	ldr	r2, [r3, #24]
 800a050:	8b7b      	ldrh	r3, [r7, #26]
 800a052:	429a      	cmp	r2, r3
 800a054:	d306      	bcc.n	800a064 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	699a      	ldr	r2, [r3, #24]
 800a05a:	8b7b      	ldrh	r3, [r7, #26]
 800a05c:	1ad2      	subs	r2, r2, r3
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	619a      	str	r2, [r3, #24]
 800a062:	e002      	b.n	800a06a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	2200      	movs	r2, #0
 800a068:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	699b      	ldr	r3, [r3, #24]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d123      	bne.n	800a0ba <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	461a      	mov	r2, r3
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	781b      	ldrb	r3, [r3, #0]
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	4413      	add	r3, r2
 800a080:	881b      	ldrh	r3, [r3, #0]
 800a082:	b29b      	uxth	r3, r3
 800a084:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a088:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a08c:	83fb      	strh	r3, [r7, #30]
 800a08e:	8bfb      	ldrh	r3, [r7, #30]
 800a090:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a094:	83fb      	strh	r3, [r7, #30]
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	461a      	mov	r2, r3
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	009b      	lsls	r3, r3, #2
 800a0a2:	441a      	add	r2, r3
 800a0a4:	8bfb      	ldrh	r3, [r7, #30]
 800a0a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a0aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a0ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a0b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0b6:	b29b      	uxth	r3, r3
 800a0b8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800a0ba:	88fb      	ldrh	r3, [r7, #6]
 800a0bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d11f      	bne.n	800a104 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	781b      	ldrb	r3, [r3, #0]
 800a0ce:	009b      	lsls	r3, r3, #2
 800a0d0:	4413      	add	r3, r2
 800a0d2:	881b      	ldrh	r3, [r3, #0]
 800a0d4:	b29b      	uxth	r3, r3
 800a0d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a0da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0de:	83bb      	strh	r3, [r7, #28]
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	781b      	ldrb	r3, [r3, #0]
 800a0ea:	009b      	lsls	r3, r3, #2
 800a0ec:	441a      	add	r2, r3
 800a0ee:	8bbb      	ldrh	r3, [r7, #28]
 800a0f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a0f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a0f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a0fc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a100:	b29b      	uxth	r3, r3
 800a102:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800a104:	8b7b      	ldrh	r3, [r7, #26]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d008      	beq.n	800a11c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	6818      	ldr	r0, [r3, #0]
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	6959      	ldr	r1, [r3, #20]
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	895a      	ldrh	r2, [r3, #10]
 800a116:	8b7b      	ldrh	r3, [r7, #26]
 800a118:	f005 feea 	bl	800fef0 <USB_ReadPMA>
    }
  }

  return count;
 800a11c:	8b7b      	ldrh	r3, [r7, #26]
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3720      	adds	r7, #32
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}

0800a126 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800a126:	b580      	push	{r7, lr}
 800a128:	b0a4      	sub	sp, #144	@ 0x90
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	60f8      	str	r0, [r7, #12]
 800a12e:	60b9      	str	r1, [r7, #8]
 800a130:	4613      	mov	r3, r2
 800a132:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a134:	88fb      	ldrh	r3, [r7, #6]
 800a136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	f000 81db 	beq.w	800a4f6 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a148:	b29b      	uxth	r3, r3
 800a14a:	461a      	mov	r2, r3
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	00db      	lsls	r3, r3, #3
 800a152:	4413      	add	r3, r2
 800a154:	68fa      	ldr	r2, [r7, #12]
 800a156:	6812      	ldr	r2, [r2, #0]
 800a158:	4413      	add	r3, r2
 800a15a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a15e:	881b      	ldrh	r3, [r3, #0]
 800a160:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a164:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	699a      	ldr	r2, [r3, #24]
 800a16c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a170:	429a      	cmp	r2, r3
 800a172:	d907      	bls.n	800a184 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	699a      	ldr	r2, [r3, #24]
 800a178:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a17c:	1ad2      	subs	r2, r2, r3
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	619a      	str	r2, [r3, #24]
 800a182:	e002      	b.n	800a18a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	2200      	movs	r2, #0
 800a188:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	699b      	ldr	r3, [r3, #24]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	f040 80b9 	bne.w	800a306 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	785b      	ldrb	r3, [r3, #1]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d126      	bne.n	800a1ea <HAL_PCD_EP_DB_Transmit+0xc4>
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1b0:	4413      	add	r3, r2
 800a1b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	00da      	lsls	r2, r3, #3
 800a1ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1bc:	4413      	add	r3, r2
 800a1be:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a1c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a1c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1c6:	881b      	ldrh	r3, [r3, #0]
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a1ce:	b29a      	uxth	r2, r3
 800a1d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1d2:	801a      	strh	r2, [r3, #0]
 800a1d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1d6:	881b      	ldrh	r3, [r3, #0]
 800a1d8:	b29b      	uxth	r3, r3
 800a1da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1e2:	b29a      	uxth	r2, r3
 800a1e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1e6:	801a      	strh	r2, [r3, #0]
 800a1e8:	e01a      	b.n	800a220 <HAL_PCD_EP_DB_Transmit+0xfa>
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	785b      	ldrb	r3, [r3, #1]
 800a1ee:	2b01      	cmp	r3, #1
 800a1f0:	d116      	bne.n	800a220 <HAL_PCD_EP_DB_Transmit+0xfa>
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a200:	b29b      	uxth	r3, r3
 800a202:	461a      	mov	r2, r3
 800a204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a206:	4413      	add	r3, r2
 800a208:	637b      	str	r3, [r7, #52]	@ 0x34
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	00da      	lsls	r2, r3, #3
 800a210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a212:	4413      	add	r3, r2
 800a214:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a218:	633b      	str	r3, [r7, #48]	@ 0x30
 800a21a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a21c:	2200      	movs	r2, #0
 800a21e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	627b      	str	r3, [r7, #36]	@ 0x24
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	785b      	ldrb	r3, [r3, #1]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d126      	bne.n	800a27c <HAL_PCD_EP_DB_Transmit+0x156>
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	61fb      	str	r3, [r7, #28]
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	461a      	mov	r2, r3
 800a240:	69fb      	ldr	r3, [r7, #28]
 800a242:	4413      	add	r3, r2
 800a244:	61fb      	str	r3, [r7, #28]
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	00da      	lsls	r2, r3, #3
 800a24c:	69fb      	ldr	r3, [r7, #28]
 800a24e:	4413      	add	r3, r2
 800a250:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a254:	61bb      	str	r3, [r7, #24]
 800a256:	69bb      	ldr	r3, [r7, #24]
 800a258:	881b      	ldrh	r3, [r3, #0]
 800a25a:	b29b      	uxth	r3, r3
 800a25c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a260:	b29a      	uxth	r2, r3
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	801a      	strh	r2, [r3, #0]
 800a266:	69bb      	ldr	r3, [r7, #24]
 800a268:	881b      	ldrh	r3, [r3, #0]
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a270:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a274:	b29a      	uxth	r2, r3
 800a276:	69bb      	ldr	r3, [r7, #24]
 800a278:	801a      	strh	r2, [r3, #0]
 800a27a:	e017      	b.n	800a2ac <HAL_PCD_EP_DB_Transmit+0x186>
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	785b      	ldrb	r3, [r3, #1]
 800a280:	2b01      	cmp	r3, #1
 800a282:	d113      	bne.n	800a2ac <HAL_PCD_EP_DB_Transmit+0x186>
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	461a      	mov	r2, r3
 800a290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a292:	4413      	add	r3, r2
 800a294:	627b      	str	r3, [r7, #36]	@ 0x24
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	781b      	ldrb	r3, [r3, #0]
 800a29a:	00da      	lsls	r2, r3, #3
 800a29c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a29e:	4413      	add	r3, r2
 800a2a0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a2a4:	623b      	str	r3, [r7, #32]
 800a2a6:	6a3b      	ldr	r3, [r7, #32]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	4619      	mov	r1, r3
 800a2b2:	68f8      	ldr	r0, [r7, #12]
 800a2b4:	f008 f893 	bl	80123de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a2b8:	88fb      	ldrh	r3, [r7, #6]
 800a2ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	f000 82fa 	beq.w	800a8b8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	009b      	lsls	r3, r3, #2
 800a2d0:	4413      	add	r3, r2
 800a2d2:	881b      	ldrh	r3, [r3, #0]
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a2da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2de:	82fb      	strh	r3, [r7, #22]
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	441a      	add	r2, r3
 800a2ee:	8afb      	ldrh	r3, [r7, #22]
 800a2f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a2f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a2f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a2fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a300:	b29b      	uxth	r3, r3
 800a302:	8013      	strh	r3, [r2, #0]
 800a304:	e2d8      	b.n	800a8b8 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a306:	88fb      	ldrh	r3, [r7, #6]
 800a308:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d021      	beq.n	800a354 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	461a      	mov	r2, r3
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	781b      	ldrb	r3, [r3, #0]
 800a31a:	009b      	lsls	r3, r3, #2
 800a31c:	4413      	add	r3, r2
 800a31e:	881b      	ldrh	r3, [r3, #0]
 800a320:	b29b      	uxth	r3, r3
 800a322:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a32a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	461a      	mov	r2, r3
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	781b      	ldrb	r3, [r3, #0]
 800a338:	009b      	lsls	r3, r3, #2
 800a33a:	441a      	add	r2, r3
 800a33c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a340:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a344:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a348:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a34c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a350:	b29b      	uxth	r3, r3
 800a352:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	f040 82ac 	bne.w	800a8b8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	695a      	ldr	r2, [r3, #20]
 800a364:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a368:	441a      	add	r2, r3
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	69da      	ldr	r2, [r3, #28]
 800a372:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a376:	441a      	add	r2, r3
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	6a1a      	ldr	r2, [r3, #32]
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	691b      	ldr	r3, [r3, #16]
 800a384:	429a      	cmp	r2, r3
 800a386:	d30b      	bcc.n	800a3a0 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	691b      	ldr	r3, [r3, #16]
 800a38c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	6a1a      	ldr	r2, [r3, #32]
 800a394:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a398:	1ad2      	subs	r2, r2, r3
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	621a      	str	r2, [r3, #32]
 800a39e:	e017      	b.n	800a3d0 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	6a1b      	ldr	r3, [r3, #32]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d108      	bne.n	800a3ba <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800a3a8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a3ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800a3b8:	e00a      	b.n	800a3d0 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	6a1b      	ldr	r3, [r3, #32]
 800a3c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	785b      	ldrb	r3, [r3, #1]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d165      	bne.n	800a4a4 <HAL_PCD_EP_DB_Transmit+0x37e>
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a3e6:	b29b      	uxth	r3, r3
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3ec:	4413      	add	r3, r2
 800a3ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	00da      	lsls	r2, r3, #3
 800a3f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3f8:	4413      	add	r3, r2
 800a3fa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a3fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a402:	881b      	ldrh	r3, [r3, #0]
 800a404:	b29b      	uxth	r3, r3
 800a406:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a40a:	b29a      	uxth	r2, r3
 800a40c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a40e:	801a      	strh	r2, [r3, #0]
 800a410:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a414:	2b3e      	cmp	r3, #62	@ 0x3e
 800a416:	d91d      	bls.n	800a454 <HAL_PCD_EP_DB_Transmit+0x32e>
 800a418:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a41c:	095b      	lsrs	r3, r3, #5
 800a41e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a420:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a424:	f003 031f 	and.w	r3, r3, #31
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d102      	bne.n	800a432 <HAL_PCD_EP_DB_Transmit+0x30c>
 800a42c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a42e:	3b01      	subs	r3, #1
 800a430:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a434:	881b      	ldrh	r3, [r3, #0]
 800a436:	b29a      	uxth	r2, r3
 800a438:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	029b      	lsls	r3, r3, #10
 800a43e:	b29b      	uxth	r3, r3
 800a440:	4313      	orrs	r3, r2
 800a442:	b29b      	uxth	r3, r3
 800a444:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a448:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a44c:	b29a      	uxth	r2, r3
 800a44e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a450:	801a      	strh	r2, [r3, #0]
 800a452:	e044      	b.n	800a4de <HAL_PCD_EP_DB_Transmit+0x3b8>
 800a454:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d10a      	bne.n	800a472 <HAL_PCD_EP_DB_Transmit+0x34c>
 800a45c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a45e:	881b      	ldrh	r3, [r3, #0]
 800a460:	b29b      	uxth	r3, r3
 800a462:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a466:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a46a:	b29a      	uxth	r2, r3
 800a46c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a46e:	801a      	strh	r2, [r3, #0]
 800a470:	e035      	b.n	800a4de <HAL_PCD_EP_DB_Transmit+0x3b8>
 800a472:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a476:	085b      	lsrs	r3, r3, #1
 800a478:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a47a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a47e:	f003 0301 	and.w	r3, r3, #1
 800a482:	2b00      	cmp	r3, #0
 800a484:	d002      	beq.n	800a48c <HAL_PCD_EP_DB_Transmit+0x366>
 800a486:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a488:	3301      	adds	r3, #1
 800a48a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a48c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a48e:	881b      	ldrh	r3, [r3, #0]
 800a490:	b29a      	uxth	r2, r3
 800a492:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a494:	b29b      	uxth	r3, r3
 800a496:	029b      	lsls	r3, r3, #10
 800a498:	b29b      	uxth	r3, r3
 800a49a:	4313      	orrs	r3, r2
 800a49c:	b29a      	uxth	r2, r3
 800a49e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4a0:	801a      	strh	r2, [r3, #0]
 800a4a2:	e01c      	b.n	800a4de <HAL_PCD_EP_DB_Transmit+0x3b8>
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	785b      	ldrb	r3, [r3, #1]
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	d118      	bne.n	800a4de <HAL_PCD_EP_DB_Transmit+0x3b8>
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	461a      	mov	r2, r3
 800a4be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4c0:	4413      	add	r3, r2
 800a4c2:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	00da      	lsls	r2, r3, #3
 800a4ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4cc:	4413      	add	r3, r2
 800a4ce:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a4d2:	643b      	str	r3, [r7, #64]	@ 0x40
 800a4d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a4d8:	b29a      	uxth	r2, r3
 800a4da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a4dc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	6818      	ldr	r0, [r3, #0]
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	6959      	ldr	r1, [r3, #20]
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	891a      	ldrh	r2, [r3, #8]
 800a4ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	f005 fcbc 	bl	800fe6c <USB_WritePMA>
 800a4f4:	e1e0      	b.n	800a8b8 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a4fe:	b29b      	uxth	r3, r3
 800a500:	461a      	mov	r2, r3
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	00db      	lsls	r3, r3, #3
 800a508:	4413      	add	r3, r2
 800a50a:	68fa      	ldr	r2, [r7, #12]
 800a50c:	6812      	ldr	r2, [r2, #0]
 800a50e:	4413      	add	r3, r2
 800a510:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a514:	881b      	ldrh	r3, [r3, #0]
 800a516:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a51a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	699a      	ldr	r2, [r3, #24]
 800a522:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a526:	429a      	cmp	r2, r3
 800a528:	d307      	bcc.n	800a53a <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	699a      	ldr	r2, [r3, #24]
 800a52e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a532:	1ad2      	subs	r2, r2, r3
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	619a      	str	r2, [r3, #24]
 800a538:	e002      	b.n	800a540 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	2200      	movs	r2, #0
 800a53e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	699b      	ldr	r3, [r3, #24]
 800a544:	2b00      	cmp	r3, #0
 800a546:	f040 80c0 	bne.w	800a6ca <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	785b      	ldrb	r3, [r3, #1]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d126      	bne.n	800a5a0 <HAL_PCD_EP_DB_Transmit+0x47a>
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a560:	b29b      	uxth	r3, r3
 800a562:	461a      	mov	r2, r3
 800a564:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a566:	4413      	add	r3, r2
 800a568:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	781b      	ldrb	r3, [r3, #0]
 800a56e:	00da      	lsls	r2, r3, #3
 800a570:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a572:	4413      	add	r3, r2
 800a574:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a578:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a57a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a57c:	881b      	ldrh	r3, [r3, #0]
 800a57e:	b29b      	uxth	r3, r3
 800a580:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a584:	b29a      	uxth	r2, r3
 800a586:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a588:	801a      	strh	r2, [r3, #0]
 800a58a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a58c:	881b      	ldrh	r3, [r3, #0]
 800a58e:	b29b      	uxth	r3, r3
 800a590:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a594:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a598:	b29a      	uxth	r2, r3
 800a59a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a59c:	801a      	strh	r2, [r3, #0]
 800a59e:	e01a      	b.n	800a5d6 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	785b      	ldrb	r3, [r3, #1]
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d116      	bne.n	800a5d6 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	667b      	str	r3, [r7, #100]	@ 0x64
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a5bc:	4413      	add	r3, r2
 800a5be:	667b      	str	r3, [r7, #100]	@ 0x64
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	781b      	ldrb	r3, [r3, #0]
 800a5c4:	00da      	lsls	r2, r3, #3
 800a5c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a5c8:	4413      	add	r3, r2
 800a5ca:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a5ce:	663b      	str	r3, [r7, #96]	@ 0x60
 800a5d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	677b      	str	r3, [r7, #116]	@ 0x74
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	785b      	ldrb	r3, [r3, #1]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d12b      	bne.n	800a63c <HAL_PCD_EP_DB_Transmit+0x516>
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5f8:	4413      	add	r3, r2
 800a5fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	00da      	lsls	r2, r3, #3
 800a602:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a604:	4413      	add	r3, r2
 800a606:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a60a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a60e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a612:	881b      	ldrh	r3, [r3, #0]
 800a614:	b29b      	uxth	r3, r3
 800a616:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a61a:	b29a      	uxth	r2, r3
 800a61c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a620:	801a      	strh	r2, [r3, #0]
 800a622:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a626:	881b      	ldrh	r3, [r3, #0]
 800a628:	b29b      	uxth	r3, r3
 800a62a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a62e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a632:	b29a      	uxth	r2, r3
 800a634:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a638:	801a      	strh	r2, [r3, #0]
 800a63a:	e017      	b.n	800a66c <HAL_PCD_EP_DB_Transmit+0x546>
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	785b      	ldrb	r3, [r3, #1]
 800a640:	2b01      	cmp	r3, #1
 800a642:	d113      	bne.n	800a66c <HAL_PCD_EP_DB_Transmit+0x546>
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	461a      	mov	r2, r3
 800a650:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a652:	4413      	add	r3, r2
 800a654:	677b      	str	r3, [r7, #116]	@ 0x74
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	781b      	ldrb	r3, [r3, #0]
 800a65a:	00da      	lsls	r2, r3, #3
 800a65c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a65e:	4413      	add	r3, r2
 800a660:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a664:	673b      	str	r3, [r7, #112]	@ 0x70
 800a666:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a668:	2200      	movs	r2, #0
 800a66a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	781b      	ldrb	r3, [r3, #0]
 800a670:	4619      	mov	r1, r3
 800a672:	68f8      	ldr	r0, [r7, #12]
 800a674:	f007 feb3 	bl	80123de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a678:	88fb      	ldrh	r3, [r7, #6]
 800a67a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a67e:	2b00      	cmp	r3, #0
 800a680:	f040 811a 	bne.w	800a8b8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	461a      	mov	r2, r3
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	781b      	ldrb	r3, [r3, #0]
 800a68e:	009b      	lsls	r3, r3, #2
 800a690:	4413      	add	r3, r2
 800a692:	881b      	ldrh	r3, [r3, #0]
 800a694:	b29b      	uxth	r3, r3
 800a696:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a69a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a69e:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	781b      	ldrb	r3, [r3, #0]
 800a6ac:	009b      	lsls	r3, r3, #2
 800a6ae:	441a      	add	r2, r3
 800a6b0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800a6b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a6b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a6bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a6c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6c4:	b29b      	uxth	r3, r3
 800a6c6:	8013      	strh	r3, [r2, #0]
 800a6c8:	e0f6      	b.n	800a8b8 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a6ca:	88fb      	ldrh	r3, [r7, #6]
 800a6cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d121      	bne.n	800a718 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	461a      	mov	r2, r3
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	009b      	lsls	r3, r3, #2
 800a6e0:	4413      	add	r3, r2
 800a6e2:	881b      	ldrh	r3, [r3, #0]
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a6ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6ee:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	781b      	ldrb	r3, [r3, #0]
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	441a      	add	r2, r3
 800a700:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a704:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a708:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a70c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a710:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a714:	b29b      	uxth	r3, r3
 800a716:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a71e:	2b01      	cmp	r3, #1
 800a720:	f040 80ca 	bne.w	800a8b8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	695a      	ldr	r2, [r3, #20]
 800a728:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a72c:	441a      	add	r2, r3
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	69da      	ldr	r2, [r3, #28]
 800a736:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a73a:	441a      	add	r2, r3
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	6a1a      	ldr	r2, [r3, #32]
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	691b      	ldr	r3, [r3, #16]
 800a748:	429a      	cmp	r2, r3
 800a74a:	d30b      	bcc.n	800a764 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	691b      	ldr	r3, [r3, #16]
 800a750:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	6a1a      	ldr	r2, [r3, #32]
 800a758:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a75c:	1ad2      	subs	r2, r2, r3
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	621a      	str	r2, [r3, #32]
 800a762:	e017      	b.n	800a794 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	6a1b      	ldr	r3, [r3, #32]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d108      	bne.n	800a77e <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800a76c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a770:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	2200      	movs	r2, #0
 800a778:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800a77c:	e00a      	b.n	800a794 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	6a1b      	ldr	r3, [r3, #32]
 800a782:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	2200      	movs	r2, #0
 800a78a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	2200      	movs	r2, #0
 800a790:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	657b      	str	r3, [r7, #84]	@ 0x54
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	785b      	ldrb	r3, [r3, #1]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d165      	bne.n	800a86e <HAL_PCD_EP_DB_Transmit+0x748>
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a7b0:	b29b      	uxth	r3, r3
 800a7b2:	461a      	mov	r2, r3
 800a7b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a7b6:	4413      	add	r3, r2
 800a7b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	781b      	ldrb	r3, [r3, #0]
 800a7be:	00da      	lsls	r2, r3, #3
 800a7c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a7c2:	4413      	add	r3, r2
 800a7c4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a7c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a7ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a7cc:	881b      	ldrh	r3, [r3, #0]
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a7d4:	b29a      	uxth	r2, r3
 800a7d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a7d8:	801a      	strh	r2, [r3, #0]
 800a7da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a7de:	2b3e      	cmp	r3, #62	@ 0x3e
 800a7e0:	d91d      	bls.n	800a81e <HAL_PCD_EP_DB_Transmit+0x6f8>
 800a7e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a7e6:	095b      	lsrs	r3, r3, #5
 800a7e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a7ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a7ee:	f003 031f 	and.w	r3, r3, #31
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d102      	bne.n	800a7fc <HAL_PCD_EP_DB_Transmit+0x6d6>
 800a7f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a7f8:	3b01      	subs	r3, #1
 800a7fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a7fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a7fe:	881b      	ldrh	r3, [r3, #0]
 800a800:	b29a      	uxth	r2, r3
 800a802:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a804:	b29b      	uxth	r3, r3
 800a806:	029b      	lsls	r3, r3, #10
 800a808:	b29b      	uxth	r3, r3
 800a80a:	4313      	orrs	r3, r2
 800a80c:	b29b      	uxth	r3, r3
 800a80e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a812:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a816:	b29a      	uxth	r2, r3
 800a818:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a81a:	801a      	strh	r2, [r3, #0]
 800a81c:	e041      	b.n	800a8a2 <HAL_PCD_EP_DB_Transmit+0x77c>
 800a81e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a822:	2b00      	cmp	r3, #0
 800a824:	d10a      	bne.n	800a83c <HAL_PCD_EP_DB_Transmit+0x716>
 800a826:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a828:	881b      	ldrh	r3, [r3, #0]
 800a82a:	b29b      	uxth	r3, r3
 800a82c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a830:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a834:	b29a      	uxth	r2, r3
 800a836:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a838:	801a      	strh	r2, [r3, #0]
 800a83a:	e032      	b.n	800a8a2 <HAL_PCD_EP_DB_Transmit+0x77c>
 800a83c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a840:	085b      	lsrs	r3, r3, #1
 800a842:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a844:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a848:	f003 0301 	and.w	r3, r3, #1
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d002      	beq.n	800a856 <HAL_PCD_EP_DB_Transmit+0x730>
 800a850:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a852:	3301      	adds	r3, #1
 800a854:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a856:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a858:	881b      	ldrh	r3, [r3, #0]
 800a85a:	b29a      	uxth	r2, r3
 800a85c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a85e:	b29b      	uxth	r3, r3
 800a860:	029b      	lsls	r3, r3, #10
 800a862:	b29b      	uxth	r3, r3
 800a864:	4313      	orrs	r3, r2
 800a866:	b29a      	uxth	r2, r3
 800a868:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a86a:	801a      	strh	r2, [r3, #0]
 800a86c:	e019      	b.n	800a8a2 <HAL_PCD_EP_DB_Transmit+0x77c>
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	785b      	ldrb	r3, [r3, #1]
 800a872:	2b01      	cmp	r3, #1
 800a874:	d115      	bne.n	800a8a2 <HAL_PCD_EP_DB_Transmit+0x77c>
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a87e:	b29b      	uxth	r3, r3
 800a880:	461a      	mov	r2, r3
 800a882:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a884:	4413      	add	r3, r2
 800a886:	657b      	str	r3, [r7, #84]	@ 0x54
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	00da      	lsls	r2, r3, #3
 800a88e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a890:	4413      	add	r3, r2
 800a892:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a896:	653b      	str	r3, [r7, #80]	@ 0x50
 800a898:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a89c:	b29a      	uxth	r2, r3
 800a89e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a8a0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	6818      	ldr	r0, [r3, #0]
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	6959      	ldr	r1, [r3, #20]
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	895a      	ldrh	r2, [r3, #10]
 800a8ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	f005 fada 	bl	800fe6c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	461a      	mov	r2, r3
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	781b      	ldrb	r3, [r3, #0]
 800a8c2:	009b      	lsls	r3, r3, #2
 800a8c4:	4413      	add	r3, r2
 800a8c6:	881b      	ldrh	r3, [r3, #0]
 800a8c8:	b29b      	uxth	r3, r3
 800a8ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a8ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a8d2:	82bb      	strh	r3, [r7, #20]
 800a8d4:	8abb      	ldrh	r3, [r7, #20]
 800a8d6:	f083 0310 	eor.w	r3, r3, #16
 800a8da:	82bb      	strh	r3, [r7, #20]
 800a8dc:	8abb      	ldrh	r3, [r7, #20]
 800a8de:	f083 0320 	eor.w	r3, r3, #32
 800a8e2:	82bb      	strh	r3, [r7, #20]
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	461a      	mov	r2, r3
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	781b      	ldrb	r3, [r3, #0]
 800a8ee:	009b      	lsls	r3, r3, #2
 800a8f0:	441a      	add	r2, r3
 800a8f2:	8abb      	ldrh	r3, [r7, #20]
 800a8f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a8f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a8fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a900:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a904:	b29b      	uxth	r3, r3
 800a906:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800a908:	2300      	movs	r3, #0
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3790      	adds	r7, #144	@ 0x90
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}

0800a912 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800a912:	b480      	push	{r7}
 800a914:	b087      	sub	sp, #28
 800a916:	af00      	add	r7, sp, #0
 800a918:	60f8      	str	r0, [r7, #12]
 800a91a:	607b      	str	r3, [r7, #4]
 800a91c:	460b      	mov	r3, r1
 800a91e:	817b      	strh	r3, [r7, #10]
 800a920:	4613      	mov	r3, r2
 800a922:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800a924:	897b      	ldrh	r3, [r7, #10]
 800a926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a92a:	b29b      	uxth	r3, r3
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d00b      	beq.n	800a948 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a930:	897b      	ldrh	r3, [r7, #10]
 800a932:	f003 0207 	and.w	r2, r3, #7
 800a936:	4613      	mov	r3, r2
 800a938:	009b      	lsls	r3, r3, #2
 800a93a:	4413      	add	r3, r2
 800a93c:	00db      	lsls	r3, r3, #3
 800a93e:	3310      	adds	r3, #16
 800a940:	68fa      	ldr	r2, [r7, #12]
 800a942:	4413      	add	r3, r2
 800a944:	617b      	str	r3, [r7, #20]
 800a946:	e009      	b.n	800a95c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a948:	897a      	ldrh	r2, [r7, #10]
 800a94a:	4613      	mov	r3, r2
 800a94c:	009b      	lsls	r3, r3, #2
 800a94e:	4413      	add	r3, r2
 800a950:	00db      	lsls	r3, r3, #3
 800a952:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a956:	68fa      	ldr	r2, [r7, #12]
 800a958:	4413      	add	r3, r2
 800a95a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800a95c:	893b      	ldrh	r3, [r7, #8]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d107      	bne.n	800a972 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	2200      	movs	r2, #0
 800a966:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	b29a      	uxth	r2, r3
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	80da      	strh	r2, [r3, #6]
 800a970:	e00b      	b.n	800a98a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	2201      	movs	r2, #1
 800a976:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	b29a      	uxth	r2, r3
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	0c1b      	lsrs	r3, r3, #16
 800a984:	b29a      	uxth	r2, r3
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a98a:	2300      	movs	r3, #0
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	371c      	adds	r7, #28
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr

0800a998 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a998:	b480      	push	{r7}
 800a99a:	b085      	sub	sp, #20
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	f043 0301 	orr.w	r3, r3, #1
 800a9c2:	b29a      	uxth	r2, r3
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800a9d0:	b29b      	uxth	r3, r3
 800a9d2:	f043 0302 	orr.w	r3, r3, #2
 800a9d6:	b29a      	uxth	r2, r3
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800a9de:	2300      	movs	r3, #0
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3714      	adds	r7, #20
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr

0800a9ec <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a9f0:	4b05      	ldr	r3, [pc, #20]	@ (800aa08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4a04      	ldr	r2, [pc, #16]	@ (800aa08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a9f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a9fa:	6013      	str	r3, [r2, #0]
}
 800a9fc:	bf00      	nop
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa04:	4770      	bx	lr
 800aa06:	bf00      	nop
 800aa08:	58000400 	.word	0x58000400

0800aa0c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800aa10:	4b04      	ldr	r3, [pc, #16]	@ (800aa24 <HAL_PWREx_GetVoltageRange+0x18>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa20:	4770      	bx	lr
 800aa22:	bf00      	nop
 800aa24:	58000400 	.word	0x58000400

0800aa28 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800aa2c:	4b05      	ldr	r3, [pc, #20]	@ (800aa44 <HAL_PWREx_EnableVddUSB+0x1c>)
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	4a04      	ldr	r2, [pc, #16]	@ (800aa44 <HAL_PWREx_EnableVddUSB+0x1c>)
 800aa32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800aa36:	6053      	str	r3, [r2, #4]
}
 800aa38:	bf00      	nop
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr
 800aa42:	bf00      	nop
 800aa44:	58000400 	.word	0x58000400

0800aa48 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800aa4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800aa56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa5a:	d101      	bne.n	800aa60 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	e000      	b.n	800aa62 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800aa60:	2300      	movs	r3, #0
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr

0800aa6c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800aa70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aa7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aa7e:	6013      	str	r3, [r2, #0]
}
 800aa80:	bf00      	nop
 800aa82:	46bd      	mov	sp, r7
 800aa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa88:	4770      	bx	lr

0800aa8a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800aa8a:	b480      	push	{r7}
 800aa8c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800aa8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aa98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aa9c:	6013      	str	r3, [r2, #0]
}
 800aa9e:	bf00      	nop
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr

0800aaa8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800aaac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aab6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aaba:	d101      	bne.n	800aac0 <LL_RCC_HSE_IsReady+0x18>
 800aabc:	2301      	movs	r3, #1
 800aabe:	e000      	b.n	800aac2 <LL_RCC_HSE_IsReady+0x1a>
 800aac0:	2300      	movs	r3, #0
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr

0800aacc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800aacc:	b480      	push	{r7}
 800aace:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800aad0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aada:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aade:	6013      	str	r3, [r2, #0]
}
 800aae0:	bf00      	nop
 800aae2:	46bd      	mov	sp, r7
 800aae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae8:	4770      	bx	lr

0800aaea <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800aaea:	b480      	push	{r7}
 800aaec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800aaee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aaf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aafc:	6013      	str	r3, [r2, #0]
}
 800aafe:	bf00      	nop
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr

0800ab08 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800ab0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ab16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab1a:	d101      	bne.n	800ab20 <LL_RCC_HSI_IsReady+0x18>
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	e000      	b.n	800ab22 <LL_RCC_HSI_IsReady+0x1a>
 800ab20:	2300      	movs	r3, #0
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	46bd      	mov	sp, r7
 800ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2a:	4770      	bx	lr

0800ab2c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b083      	sub	sp, #12
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800ab34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	061b      	lsls	r3, r3, #24
 800ab42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ab46:	4313      	orrs	r3, r2
 800ab48:	604b      	str	r3, [r1, #4]
}
 800ab4a:	bf00      	nop
 800ab4c:	370c      	adds	r7, #12
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr

0800ab56 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800ab56:	b480      	push	{r7}
 800ab58:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800ab5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ab62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ab66:	f043 0301 	orr.w	r3, r3, #1
 800ab6a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800ab6e:	bf00      	nop
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr

0800ab78 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800ab7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ab84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ab88:	f023 0301 	bic.w	r3, r3, #1
 800ab8c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800ab90:	bf00      	nop
 800ab92:	46bd      	mov	sp, r7
 800ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab98:	4770      	bx	lr

0800ab9a <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800ab9a:	b480      	push	{r7}
 800ab9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800ab9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aba2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800aba6:	f003 0302 	and.w	r3, r3, #2
 800abaa:	2b02      	cmp	r3, #2
 800abac:	d101      	bne.n	800abb2 <LL_RCC_HSI48_IsReady+0x18>
 800abae:	2301      	movs	r3, #1
 800abb0:	e000      	b.n	800abb4 <LL_RCC_HSI48_IsReady+0x1a>
 800abb2:	2300      	movs	r3, #0
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	46bd      	mov	sp, r7
 800abb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbc:	4770      	bx	lr

0800abbe <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 800abbe:	b480      	push	{r7}
 800abc0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800abc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800abc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800abce:	f043 0301 	orr.w	r3, r3, #1
 800abd2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800abd6:	bf00      	nop
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr

0800abe0 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 800abe0:	b480      	push	{r7}
 800abe2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800abe4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800abe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800abf0:	f023 0301 	bic.w	r3, r3, #1
 800abf4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800abf8:	bf00      	nop
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr

0800ac02 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 800ac02:	b480      	push	{r7}
 800ac04:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800ac06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ac12:	f043 0304 	orr.w	r3, r3, #4
 800ac16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800ac1a:	bf00      	nop
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr

0800ac24 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 800ac24:	b480      	push	{r7}
 800ac26:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800ac28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ac34:	f023 0304 	bic.w	r3, r3, #4
 800ac38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800ac3c:	bf00      	nop
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr

0800ac46 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800ac46:	b480      	push	{r7}
 800ac48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800ac4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac52:	f003 0302 	and.w	r3, r3, #2
 800ac56:	2b02      	cmp	r3, #2
 800ac58:	d101      	bne.n	800ac5e <LL_RCC_LSE_IsReady+0x18>
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	e000      	b.n	800ac60 <LL_RCC_LSE_IsReady+0x1a>
 800ac5e:	2300      	movs	r3, #0
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	46bd      	mov	sp, r7
 800ac64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac68:	4770      	bx	lr

0800ac6a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800ac6a:	b480      	push	{r7}
 800ac6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800ac6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ac76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ac7a:	f043 0301 	orr.w	r3, r3, #1
 800ac7e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800ac82:	bf00      	nop
 800ac84:	46bd      	mov	sp, r7
 800ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8a:	4770      	bx	lr

0800ac8c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800ac90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ac98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ac9c:	f023 0301 	bic.w	r3, r3, #1
 800aca0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800aca4:	bf00      	nop
 800aca6:	46bd      	mov	sp, r7
 800aca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acac:	4770      	bx	lr

0800acae <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800acae:	b480      	push	{r7}
 800acb0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800acb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800acb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800acba:	f003 0302 	and.w	r3, r3, #2
 800acbe:	2b02      	cmp	r3, #2
 800acc0:	d101      	bne.n	800acc6 <LL_RCC_LSI1_IsReady+0x18>
 800acc2:	2301      	movs	r3, #1
 800acc4:	e000      	b.n	800acc8 <LL_RCC_LSI1_IsReady+0x1a>
 800acc6:	2300      	movs	r3, #0
}
 800acc8:	4618      	mov	r0, r3
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr

0800acd2 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800acd2:	b480      	push	{r7}
 800acd4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800acd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800acda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800acde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ace2:	f043 0304 	orr.w	r3, r3, #4
 800ace6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800acea:	bf00      	nop
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr

0800acf4 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 800acf4:	b480      	push	{r7}
 800acf6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800acf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800acfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ad00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ad04:	f023 0304 	bic.w	r3, r3, #4
 800ad08:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800ad0c:	bf00      	nop
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad14:	4770      	bx	lr

0800ad16 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800ad16:	b480      	push	{r7}
 800ad18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800ad1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ad22:	f003 0308 	and.w	r3, r3, #8
 800ad26:	2b08      	cmp	r3, #8
 800ad28:	d101      	bne.n	800ad2e <LL_RCC_LSI2_IsReady+0x18>
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	e000      	b.n	800ad30 <LL_RCC_LSI2_IsReady+0x1a>
 800ad2e:	2300      	movs	r3, #0
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr

0800ad3a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800ad3a:	b480      	push	{r7}
 800ad3c:	b083      	sub	sp, #12
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800ad42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ad4a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	021b      	lsls	r3, r3, #8
 800ad52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ad56:	4313      	orrs	r3, r2
 800ad58:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800ad5c:	bf00      	nop
 800ad5e:	370c      	adds	r7, #12
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr

0800ad68 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800ad6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ad76:	f043 0301 	orr.w	r3, r3, #1
 800ad7a:	6013      	str	r3, [r2, #0]
}
 800ad7c:	bf00      	nop
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad84:	4770      	bx	lr

0800ad86 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800ad86:	b480      	push	{r7}
 800ad88:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800ad8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ad94:	f023 0301 	bic.w	r3, r3, #1
 800ad98:	6013      	str	r3, [r2, #0]
}
 800ad9a:	bf00      	nop
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr

0800ada4 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800ada4:	b480      	push	{r7}
 800ada6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800ada8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f003 0302 	and.w	r3, r3, #2
 800adb2:	2b02      	cmp	r3, #2
 800adb4:	d101      	bne.n	800adba <LL_RCC_MSI_IsReady+0x16>
 800adb6:	2301      	movs	r3, #1
 800adb8:	e000      	b.n	800adbc <LL_RCC_MSI_IsReady+0x18>
 800adba:	2300      	movs	r3, #0
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	46bd      	mov	sp, r7
 800adc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc4:	4770      	bx	lr

0800adc6 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800adc6:	b480      	push	{r7}
 800adc8:	b083      	sub	sp, #12
 800adca:	af00      	add	r7, sp, #0
 800adcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800adce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800add8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	4313      	orrs	r3, r2
 800ade0:	600b      	str	r3, [r1, #0]
}
 800ade2:	bf00      	nop
 800ade4:	370c      	adds	r7, #12
 800ade6:	46bd      	mov	sp, r7
 800ade8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adec:	4770      	bx	lr

0800adee <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800adee:	b480      	push	{r7}
 800adf0:	b083      	sub	sp, #12
 800adf2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800adf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800adfe:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2bb0      	cmp	r3, #176	@ 0xb0
 800ae04:	d901      	bls.n	800ae0a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800ae06:	23b0      	movs	r3, #176	@ 0xb0
 800ae08:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800ae0a:	687b      	ldr	r3, [r7, #4]
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	370c      	adds	r7, #12
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr

0800ae18 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b083      	sub	sp, #12
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800ae20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	021b      	lsls	r3, r3, #8
 800ae2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ae32:	4313      	orrs	r3, r2
 800ae34:	604b      	str	r3, [r1, #4]
}
 800ae36:	bf00      	nop
 800ae38:	370c      	adds	r7, #12
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae40:	4770      	bx	lr

0800ae42 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800ae42:	b480      	push	{r7}
 800ae44:	b083      	sub	sp, #12
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800ae4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae4e:	689b      	ldr	r3, [r3, #8]
 800ae50:	f023 0203 	bic.w	r2, r3, #3
 800ae54:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	608b      	str	r3, [r1, #8]
}
 800ae5e:	bf00      	nop
 800ae60:	370c      	adds	r7, #12
 800ae62:	46bd      	mov	sp, r7
 800ae64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae68:	4770      	bx	lr

0800ae6a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800ae6a:	b480      	push	{r7}
 800ae6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800ae6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae72:	689b      	ldr	r3, [r3, #8]
 800ae74:	f003 030c 	and.w	r3, r3, #12
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae80:	4770      	bx	lr

0800ae82 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800ae82:	b480      	push	{r7}
 800ae84:	b083      	sub	sp, #12
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800ae8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae8e:	689b      	ldr	r3, [r3, #8]
 800ae90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ae94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	4313      	orrs	r3, r2
 800ae9c:	608b      	str	r3, [r1, #8]
}
 800ae9e:	bf00      	nop
 800aea0:	370c      	adds	r7, #12
 800aea2:	46bd      	mov	sp, r7
 800aea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea8:	4770      	bx	lr

0800aeaa <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800aeaa:	b480      	push	{r7}
 800aeac:	b083      	sub	sp, #12
 800aeae:	af00      	add	r7, sp, #0
 800aeb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800aeb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aeb6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800aeba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800aebe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	4313      	orrs	r3, r2
 800aec6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800aeca:	bf00      	nop
 800aecc:	370c      	adds	r7, #12
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr

0800aed6 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800aed6:	b480      	push	{r7}
 800aed8:	b083      	sub	sp, #12
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800aede:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aee2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800aee6:	f023 020f 	bic.w	r2, r3, #15
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	091b      	lsrs	r3, r3, #4
 800aeee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800aef2:	4313      	orrs	r3, r2
 800aef4:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800aef8:	bf00      	nop
 800aefa:	370c      	adds	r7, #12
 800aefc:	46bd      	mov	sp, r7
 800aefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af02:	4770      	bx	lr

0800af04 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800af04:	b480      	push	{r7}
 800af06:	b083      	sub	sp, #12
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800af0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af10:	689b      	ldr	r3, [r3, #8]
 800af12:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800af16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	4313      	orrs	r3, r2
 800af1e:	608b      	str	r3, [r1, #8]
}
 800af20:	bf00      	nop
 800af22:	370c      	adds	r7, #12
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr

0800af2c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b083      	sub	sp, #12
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800af34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af38:	689b      	ldr	r3, [r3, #8]
 800af3a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800af3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	4313      	orrs	r3, r2
 800af46:	608b      	str	r3, [r1, #8]
}
 800af48:	bf00      	nop
 800af4a:	370c      	adds	r7, #12
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr

0800af54 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800af54:	b480      	push	{r7}
 800af56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800af58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af5c:	689b      	ldr	r3, [r3, #8]
 800af5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800af62:	4618      	mov	r0, r3
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr

0800af6c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 800af6c:	b480      	push	{r7}
 800af6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800af70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af74:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800af78:	011b      	lsls	r3, r3, #4
 800af7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800af7e:	4618      	mov	r0, r3
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr

0800af88 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800af88:	b480      	push	{r7}
 800af8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800af8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af90:	689b      	ldr	r3, [r3, #8]
 800af92:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800af96:	4618      	mov	r0, r3
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr

0800afa0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800afa0:	b480      	push	{r7}
 800afa2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800afa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800afa8:	689b      	ldr	r3, [r3, #8]
 800afaa:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800afae:	4618      	mov	r0, r3
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr

0800afb8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800afb8:	b480      	push	{r7}
 800afba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800afbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800afc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800afca:	6013      	str	r3, [r2, #0]
}
 800afcc:	bf00      	nop
 800afce:	46bd      	mov	sp, r7
 800afd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd4:	4770      	bx	lr

0800afd6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800afd6:	b480      	push	{r7}
 800afd8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800afda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800afe4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800afe8:	6013      	str	r3, [r2, #0]
}
 800afea:	bf00      	nop
 800afec:	46bd      	mov	sp, r7
 800afee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff2:	4770      	bx	lr

0800aff4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800aff4:	b480      	push	{r7}
 800aff6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800aff8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b002:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b006:	d101      	bne.n	800b00c <LL_RCC_PLL_IsReady+0x18>
 800b008:	2301      	movs	r3, #1
 800b00a:	e000      	b.n	800b00e <LL_RCC_PLL_IsReady+0x1a>
 800b00c:	2300      	movs	r3, #0
}
 800b00e:	4618      	mov	r0, r3
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr

0800b018 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800b018:	b480      	push	{r7}
 800b01a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800b01c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b020:	68db      	ldr	r3, [r3, #12]
 800b022:	0a1b      	lsrs	r3, r3, #8
 800b024:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800b028:	4618      	mov	r0, r3
 800b02a:	46bd      	mov	sp, r7
 800b02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b030:	4770      	bx	lr

0800b032 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800b032:	b480      	push	{r7}
 800b034:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800b036:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b03a:	68db      	ldr	r3, [r3, #12]
 800b03c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800b040:	4618      	mov	r0, r3
 800b042:	46bd      	mov	sp, r7
 800b044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b048:	4770      	bx	lr

0800b04a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800b04a:	b480      	push	{r7}
 800b04c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800b04e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b052:	68db      	ldr	r3, [r3, #12]
 800b054:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800b058:	4618      	mov	r0, r3
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr

0800b062 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800b062:	b480      	push	{r7}
 800b064:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800b066:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b06a:	68db      	ldr	r3, [r3, #12]
 800b06c:	f003 0303 	and.w	r3, r3, #3
}
 800b070:	4618      	mov	r0, r3
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr

0800b07a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800b07a:	b480      	push	{r7}
 800b07c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800b07e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b082:	689b      	ldr	r3, [r3, #8]
 800b084:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b088:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b08c:	d101      	bne.n	800b092 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800b08e:	2301      	movs	r3, #1
 800b090:	e000      	b.n	800b094 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800b092:	2300      	movs	r3, #0
}
 800b094:	4618      	mov	r0, r3
 800b096:	46bd      	mov	sp, r7
 800b098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09c:	4770      	bx	lr

0800b09e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800b09e:	b480      	push	{r7}
 800b0a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800b0a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b0a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800b0aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b0ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b0b2:	d101      	bne.n	800b0b8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	e000      	b.n	800b0ba <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800b0b8:	2300      	movs	r3, #0
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c2:	4770      	bx	lr

0800b0c4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800b0c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b0cc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800b0d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b0d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0d8:	d101      	bne.n	800b0de <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800b0da:	2301      	movs	r3, #1
 800b0dc:	e000      	b.n	800b0e0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800b0de:	2300      	movs	r3, #0
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e8:	4770      	bx	lr

0800b0ea <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800b0ea:	b480      	push	{r7}
 800b0ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800b0ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b0f2:	689b      	ldr	r3, [r3, #8]
 800b0f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b0f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b0fc:	d101      	bne.n	800b102 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800b0fe:	2301      	movs	r3, #1
 800b100:	e000      	b.n	800b104 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800b102:	2300      	movs	r3, #0
}
 800b104:	4618      	mov	r0, r3
 800b106:	46bd      	mov	sp, r7
 800b108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10c:	4770      	bx	lr

0800b10e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800b10e:	b480      	push	{r7}
 800b110:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800b112:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b116:	689b      	ldr	r3, [r3, #8]
 800b118:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b11c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b120:	d101      	bne.n	800b126 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800b122:	2301      	movs	r3, #1
 800b124:	e000      	b.n	800b128 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800b126:	2300      	movs	r3, #0
}
 800b128:	4618      	mov	r0, r3
 800b12a:	46bd      	mov	sp, r7
 800b12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b130:	4770      	bx	lr
	...

0800b134 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b134:	b590      	push	{r4, r7, lr}
 800b136:	b08d      	sub	sp, #52	@ 0x34
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d101      	bne.n	800b146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b142:	2301      	movs	r3, #1
 800b144:	e363      	b.n	800b80e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f003 0320 	and.w	r3, r3, #32
 800b14e:	2b00      	cmp	r3, #0
 800b150:	f000 808d 	beq.w	800b26e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b154:	f7ff fe89 	bl	800ae6a <LL_RCC_GetSysClkSource>
 800b158:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b15a:	f7ff ff82 	bl	800b062 <LL_RCC_PLL_GetMainSource>
 800b15e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800b160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b162:	2b00      	cmp	r3, #0
 800b164:	d005      	beq.n	800b172 <HAL_RCC_OscConfig+0x3e>
 800b166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b168:	2b0c      	cmp	r3, #12
 800b16a:	d147      	bne.n	800b1fc <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800b16c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b16e:	2b01      	cmp	r3, #1
 800b170:	d144      	bne.n	800b1fc <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	69db      	ldr	r3, [r3, #28]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d101      	bne.n	800b17e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800b17a:	2301      	movs	r3, #1
 800b17c:	e347      	b.n	800b80e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800b182:	f7ff fe34 	bl	800adee <LL_RCC_MSI_GetRange>
 800b186:	4603      	mov	r3, r0
 800b188:	429c      	cmp	r4, r3
 800b18a:	d914      	bls.n	800b1b6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b190:	4618      	mov	r0, r3
 800b192:	f000 fd2f 	bl	800bbf4 <RCC_SetFlashLatencyFromMSIRange>
 800b196:	4603      	mov	r3, r0
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d001      	beq.n	800b1a0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800b19c:	2301      	movs	r3, #1
 800b19e:	e336      	b.n	800b80e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f7ff fe0e 	bl	800adc6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6a1b      	ldr	r3, [r3, #32]
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f7ff fe32 	bl	800ae18 <LL_RCC_MSI_SetCalibTrimming>
 800b1b4:	e013      	b.n	800b1de <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f7ff fe03 	bl	800adc6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6a1b      	ldr	r3, [r3, #32]
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f7ff fe27 	bl	800ae18 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f000 fd10 	bl	800bbf4 <RCC_SetFlashLatencyFromMSIRange>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d001      	beq.n	800b1de <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800b1da:	2301      	movs	r3, #1
 800b1dc:	e317      	b.n	800b80e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800b1de:	f000 fcc9 	bl	800bb74 <HAL_RCC_GetHCLKFreq>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	4aa4      	ldr	r2, [pc, #656]	@ (800b478 <HAL_RCC_OscConfig+0x344>)
 800b1e6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b1e8:	4ba4      	ldr	r3, [pc, #656]	@ (800b47c <HAL_RCC_OscConfig+0x348>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f7fa fa2f 	bl	8005650 <HAL_InitTick>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d039      	beq.n	800b26c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	e308      	b.n	800b80e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	69db      	ldr	r3, [r3, #28]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d01e      	beq.n	800b242 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800b204:	f7ff fdb0 	bl	800ad68 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b208:	f7fa fa70 	bl	80056ec <HAL_GetTick>
 800b20c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800b20e:	e008      	b.n	800b222 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b210:	f7fa fa6c 	bl	80056ec <HAL_GetTick>
 800b214:	4602      	mov	r2, r0
 800b216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b218:	1ad3      	subs	r3, r2, r3
 800b21a:	2b02      	cmp	r3, #2
 800b21c:	d901      	bls.n	800b222 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800b21e:	2303      	movs	r3, #3
 800b220:	e2f5      	b.n	800b80e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800b222:	f7ff fdbf 	bl	800ada4 <LL_RCC_MSI_IsReady>
 800b226:	4603      	mov	r3, r0
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d0f1      	beq.n	800b210 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b230:	4618      	mov	r0, r3
 800b232:	f7ff fdc8 	bl	800adc6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6a1b      	ldr	r3, [r3, #32]
 800b23a:	4618      	mov	r0, r3
 800b23c:	f7ff fdec 	bl	800ae18 <LL_RCC_MSI_SetCalibTrimming>
 800b240:	e015      	b.n	800b26e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800b242:	f7ff fda0 	bl	800ad86 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b246:	f7fa fa51 	bl	80056ec <HAL_GetTick>
 800b24a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800b24c:	e008      	b.n	800b260 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b24e:	f7fa fa4d 	bl	80056ec <HAL_GetTick>
 800b252:	4602      	mov	r2, r0
 800b254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b256:	1ad3      	subs	r3, r2, r3
 800b258:	2b02      	cmp	r3, #2
 800b25a:	d901      	bls.n	800b260 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800b25c:	2303      	movs	r3, #3
 800b25e:	e2d6      	b.n	800b80e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800b260:	f7ff fda0 	bl	800ada4 <LL_RCC_MSI_IsReady>
 800b264:	4603      	mov	r3, r0
 800b266:	2b00      	cmp	r3, #0
 800b268:	d1f1      	bne.n	800b24e <HAL_RCC_OscConfig+0x11a>
 800b26a:	e000      	b.n	800b26e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800b26c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f003 0301 	and.w	r3, r3, #1
 800b276:	2b00      	cmp	r3, #0
 800b278:	d047      	beq.n	800b30a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b27a:	f7ff fdf6 	bl	800ae6a <LL_RCC_GetSysClkSource>
 800b27e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b280:	f7ff feef 	bl	800b062 <LL_RCC_PLL_GetMainSource>
 800b284:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800b286:	6a3b      	ldr	r3, [r7, #32]
 800b288:	2b08      	cmp	r3, #8
 800b28a:	d005      	beq.n	800b298 <HAL_RCC_OscConfig+0x164>
 800b28c:	6a3b      	ldr	r3, [r7, #32]
 800b28e:	2b0c      	cmp	r3, #12
 800b290:	d108      	bne.n	800b2a4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800b292:	69fb      	ldr	r3, [r7, #28]
 800b294:	2b03      	cmp	r3, #3
 800b296:	d105      	bne.n	800b2a4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d134      	bne.n	800b30a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	e2b4      	b.n	800b80e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b2ac:	d102      	bne.n	800b2b4 <HAL_RCC_OscConfig+0x180>
 800b2ae:	f7ff fbdd 	bl	800aa6c <LL_RCC_HSE_Enable>
 800b2b2:	e001      	b.n	800b2b8 <HAL_RCC_OscConfig+0x184>
 800b2b4:	f7ff fbe9 	bl	800aa8a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d012      	beq.n	800b2e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2c0:	f7fa fa14 	bl	80056ec <HAL_GetTick>
 800b2c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800b2c6:	e008      	b.n	800b2da <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b2c8:	f7fa fa10 	bl	80056ec <HAL_GetTick>
 800b2cc:	4602      	mov	r2, r0
 800b2ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2d0:	1ad3      	subs	r3, r2, r3
 800b2d2:	2b64      	cmp	r3, #100	@ 0x64
 800b2d4:	d901      	bls.n	800b2da <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800b2d6:	2303      	movs	r3, #3
 800b2d8:	e299      	b.n	800b80e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800b2da:	f7ff fbe5 	bl	800aaa8 <LL_RCC_HSE_IsReady>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d0f1      	beq.n	800b2c8 <HAL_RCC_OscConfig+0x194>
 800b2e4:	e011      	b.n	800b30a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2e6:	f7fa fa01 	bl	80056ec <HAL_GetTick>
 800b2ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800b2ec:	e008      	b.n	800b300 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b2ee:	f7fa f9fd 	bl	80056ec <HAL_GetTick>
 800b2f2:	4602      	mov	r2, r0
 800b2f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2f6:	1ad3      	subs	r3, r2, r3
 800b2f8:	2b64      	cmp	r3, #100	@ 0x64
 800b2fa:	d901      	bls.n	800b300 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800b2fc:	2303      	movs	r3, #3
 800b2fe:	e286      	b.n	800b80e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800b300:	f7ff fbd2 	bl	800aaa8 <LL_RCC_HSE_IsReady>
 800b304:	4603      	mov	r3, r0
 800b306:	2b00      	cmp	r3, #0
 800b308:	d1f1      	bne.n	800b2ee <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f003 0302 	and.w	r3, r3, #2
 800b312:	2b00      	cmp	r3, #0
 800b314:	d04c      	beq.n	800b3b0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b316:	f7ff fda8 	bl	800ae6a <LL_RCC_GetSysClkSource>
 800b31a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b31c:	f7ff fea1 	bl	800b062 <LL_RCC_PLL_GetMainSource>
 800b320:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800b322:	69bb      	ldr	r3, [r7, #24]
 800b324:	2b04      	cmp	r3, #4
 800b326:	d005      	beq.n	800b334 <HAL_RCC_OscConfig+0x200>
 800b328:	69bb      	ldr	r3, [r7, #24]
 800b32a:	2b0c      	cmp	r3, #12
 800b32c:	d10e      	bne.n	800b34c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	2b02      	cmp	r3, #2
 800b332:	d10b      	bne.n	800b34c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	68db      	ldr	r3, [r3, #12]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d101      	bne.n	800b340 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800b33c:	2301      	movs	r3, #1
 800b33e:	e266      	b.n	800b80e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	691b      	ldr	r3, [r3, #16]
 800b344:	4618      	mov	r0, r3
 800b346:	f7ff fbf1 	bl	800ab2c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800b34a:	e031      	b.n	800b3b0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	68db      	ldr	r3, [r3, #12]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d019      	beq.n	800b388 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b354:	f7ff fbba 	bl	800aacc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b358:	f7fa f9c8 	bl	80056ec <HAL_GetTick>
 800b35c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800b35e:	e008      	b.n	800b372 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b360:	f7fa f9c4 	bl	80056ec <HAL_GetTick>
 800b364:	4602      	mov	r2, r0
 800b366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b368:	1ad3      	subs	r3, r2, r3
 800b36a:	2b02      	cmp	r3, #2
 800b36c:	d901      	bls.n	800b372 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800b36e:	2303      	movs	r3, #3
 800b370:	e24d      	b.n	800b80e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800b372:	f7ff fbc9 	bl	800ab08 <LL_RCC_HSI_IsReady>
 800b376:	4603      	mov	r3, r0
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d0f1      	beq.n	800b360 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	691b      	ldr	r3, [r3, #16]
 800b380:	4618      	mov	r0, r3
 800b382:	f7ff fbd3 	bl	800ab2c <LL_RCC_HSI_SetCalibTrimming>
 800b386:	e013      	b.n	800b3b0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b388:	f7ff fbaf 	bl	800aaea <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b38c:	f7fa f9ae 	bl	80056ec <HAL_GetTick>
 800b390:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800b392:	e008      	b.n	800b3a6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b394:	f7fa f9aa 	bl	80056ec <HAL_GetTick>
 800b398:	4602      	mov	r2, r0
 800b39a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b39c:	1ad3      	subs	r3, r2, r3
 800b39e:	2b02      	cmp	r3, #2
 800b3a0:	d901      	bls.n	800b3a6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800b3a2:	2303      	movs	r3, #3
 800b3a4:	e233      	b.n	800b80e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800b3a6:	f7ff fbaf 	bl	800ab08 <LL_RCC_HSI_IsReady>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d1f1      	bne.n	800b394 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f003 0308 	and.w	r3, r3, #8
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d106      	bne.n	800b3ca <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	f000 80a3 	beq.w	800b510 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	695b      	ldr	r3, [r3, #20]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d076      	beq.n	800b4c0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f003 0310 	and.w	r3, r3, #16
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d046      	beq.n	800b46c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800b3de:	f7ff fc66 	bl	800acae <LL_RCC_LSI1_IsReady>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d113      	bne.n	800b410 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800b3e8:	f7ff fc3f 	bl	800ac6a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b3ec:	f7fa f97e 	bl	80056ec <HAL_GetTick>
 800b3f0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800b3f2:	e008      	b.n	800b406 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b3f4:	f7fa f97a 	bl	80056ec <HAL_GetTick>
 800b3f8:	4602      	mov	r2, r0
 800b3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3fc:	1ad3      	subs	r3, r2, r3
 800b3fe:	2b02      	cmp	r3, #2
 800b400:	d901      	bls.n	800b406 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800b402:	2303      	movs	r3, #3
 800b404:	e203      	b.n	800b80e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800b406:	f7ff fc52 	bl	800acae <LL_RCC_LSI1_IsReady>
 800b40a:	4603      	mov	r3, r0
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d0f1      	beq.n	800b3f4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800b410:	f7ff fc5f 	bl	800acd2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b414:	f7fa f96a 	bl	80056ec <HAL_GetTick>
 800b418:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800b41a:	e008      	b.n	800b42e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b41c:	f7fa f966 	bl	80056ec <HAL_GetTick>
 800b420:	4602      	mov	r2, r0
 800b422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b424:	1ad3      	subs	r3, r2, r3
 800b426:	2b03      	cmp	r3, #3
 800b428:	d901      	bls.n	800b42e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800b42a:	2303      	movs	r3, #3
 800b42c:	e1ef      	b.n	800b80e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800b42e:	f7ff fc72 	bl	800ad16 <LL_RCC_LSI2_IsReady>
 800b432:	4603      	mov	r3, r0
 800b434:	2b00      	cmp	r3, #0
 800b436:	d0f1      	beq.n	800b41c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	699b      	ldr	r3, [r3, #24]
 800b43c:	4618      	mov	r0, r3
 800b43e:	f7ff fc7c 	bl	800ad3a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800b442:	f7ff fc23 	bl	800ac8c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b446:	f7fa f951 	bl	80056ec <HAL_GetTick>
 800b44a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800b44c:	e008      	b.n	800b460 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b44e:	f7fa f94d 	bl	80056ec <HAL_GetTick>
 800b452:	4602      	mov	r2, r0
 800b454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b456:	1ad3      	subs	r3, r2, r3
 800b458:	2b02      	cmp	r3, #2
 800b45a:	d901      	bls.n	800b460 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800b45c:	2303      	movs	r3, #3
 800b45e:	e1d6      	b.n	800b80e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800b460:	f7ff fc25 	bl	800acae <LL_RCC_LSI1_IsReady>
 800b464:	4603      	mov	r3, r0
 800b466:	2b00      	cmp	r3, #0
 800b468:	d1f1      	bne.n	800b44e <HAL_RCC_OscConfig+0x31a>
 800b46a:	e051      	b.n	800b510 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800b46c:	f7ff fbfd 	bl	800ac6a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b470:	f7fa f93c 	bl	80056ec <HAL_GetTick>
 800b474:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800b476:	e00c      	b.n	800b492 <HAL_RCC_OscConfig+0x35e>
 800b478:	20000010 	.word	0x20000010
 800b47c:	20000030 	.word	0x20000030
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b480:	f7fa f934 	bl	80056ec <HAL_GetTick>
 800b484:	4602      	mov	r2, r0
 800b486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b488:	1ad3      	subs	r3, r2, r3
 800b48a:	2b02      	cmp	r3, #2
 800b48c:	d901      	bls.n	800b492 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800b48e:	2303      	movs	r3, #3
 800b490:	e1bd      	b.n	800b80e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800b492:	f7ff fc0c 	bl	800acae <LL_RCC_LSI1_IsReady>
 800b496:	4603      	mov	r3, r0
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d0f1      	beq.n	800b480 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800b49c:	f7ff fc2a 	bl	800acf4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800b4a0:	e008      	b.n	800b4b4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b4a2:	f7fa f923 	bl	80056ec <HAL_GetTick>
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4aa:	1ad3      	subs	r3, r2, r3
 800b4ac:	2b03      	cmp	r3, #3
 800b4ae:	d901      	bls.n	800b4b4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800b4b0:	2303      	movs	r3, #3
 800b4b2:	e1ac      	b.n	800b80e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800b4b4:	f7ff fc2f 	bl	800ad16 <LL_RCC_LSI2_IsReady>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d1f1      	bne.n	800b4a2 <HAL_RCC_OscConfig+0x36e>
 800b4be:	e027      	b.n	800b510 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800b4c0:	f7ff fc18 	bl	800acf4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b4c4:	f7fa f912 	bl	80056ec <HAL_GetTick>
 800b4c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800b4ca:	e008      	b.n	800b4de <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b4cc:	f7fa f90e 	bl	80056ec <HAL_GetTick>
 800b4d0:	4602      	mov	r2, r0
 800b4d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4d4:	1ad3      	subs	r3, r2, r3
 800b4d6:	2b03      	cmp	r3, #3
 800b4d8:	d901      	bls.n	800b4de <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800b4da:	2303      	movs	r3, #3
 800b4dc:	e197      	b.n	800b80e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800b4de:	f7ff fc1a 	bl	800ad16 <LL_RCC_LSI2_IsReady>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d1f1      	bne.n	800b4cc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800b4e8:	f7ff fbd0 	bl	800ac8c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b4ec:	f7fa f8fe 	bl	80056ec <HAL_GetTick>
 800b4f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800b4f2:	e008      	b.n	800b506 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b4f4:	f7fa f8fa 	bl	80056ec <HAL_GetTick>
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4fc:	1ad3      	subs	r3, r2, r3
 800b4fe:	2b02      	cmp	r3, #2
 800b500:	d901      	bls.n	800b506 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800b502:	2303      	movs	r3, #3
 800b504:	e183      	b.n	800b80e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800b506:	f7ff fbd2 	bl	800acae <LL_RCC_LSI1_IsReady>
 800b50a:	4603      	mov	r3, r0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d1f1      	bne.n	800b4f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f003 0304 	and.w	r3, r3, #4
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d05b      	beq.n	800b5d4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b51c:	4ba7      	ldr	r3, [pc, #668]	@ (800b7bc <HAL_RCC_OscConfig+0x688>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b524:	2b00      	cmp	r3, #0
 800b526:	d114      	bne.n	800b552 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800b528:	f7ff fa60 	bl	800a9ec <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b52c:	f7fa f8de 	bl	80056ec <HAL_GetTick>
 800b530:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b532:	e008      	b.n	800b546 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b534:	f7fa f8da 	bl	80056ec <HAL_GetTick>
 800b538:	4602      	mov	r2, r0
 800b53a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b53c:	1ad3      	subs	r3, r2, r3
 800b53e:	2b02      	cmp	r3, #2
 800b540:	d901      	bls.n	800b546 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800b542:	2303      	movs	r3, #3
 800b544:	e163      	b.n	800b80e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b546:	4b9d      	ldr	r3, [pc, #628]	@ (800b7bc <HAL_RCC_OscConfig+0x688>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d0f0      	beq.n	800b534 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	689b      	ldr	r3, [r3, #8]
 800b556:	2b01      	cmp	r3, #1
 800b558:	d102      	bne.n	800b560 <HAL_RCC_OscConfig+0x42c>
 800b55a:	f7ff fb30 	bl	800abbe <LL_RCC_LSE_Enable>
 800b55e:	e00c      	b.n	800b57a <HAL_RCC_OscConfig+0x446>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	689b      	ldr	r3, [r3, #8]
 800b564:	2b05      	cmp	r3, #5
 800b566:	d104      	bne.n	800b572 <HAL_RCC_OscConfig+0x43e>
 800b568:	f7ff fb4b 	bl	800ac02 <LL_RCC_LSE_EnableBypass>
 800b56c:	f7ff fb27 	bl	800abbe <LL_RCC_LSE_Enable>
 800b570:	e003      	b.n	800b57a <HAL_RCC_OscConfig+0x446>
 800b572:	f7ff fb35 	bl	800abe0 <LL_RCC_LSE_Disable>
 800b576:	f7ff fb55 	bl	800ac24 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	689b      	ldr	r3, [r3, #8]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d014      	beq.n	800b5ac <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b582:	f7fa f8b3 	bl	80056ec <HAL_GetTick>
 800b586:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800b588:	e00a      	b.n	800b5a0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b58a:	f7fa f8af 	bl	80056ec <HAL_GetTick>
 800b58e:	4602      	mov	r2, r0
 800b590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b592:	1ad3      	subs	r3, r2, r3
 800b594:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b598:	4293      	cmp	r3, r2
 800b59a:	d901      	bls.n	800b5a0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800b59c:	2303      	movs	r3, #3
 800b59e:	e136      	b.n	800b80e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800b5a0:	f7ff fb51 	bl	800ac46 <LL_RCC_LSE_IsReady>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d0ef      	beq.n	800b58a <HAL_RCC_OscConfig+0x456>
 800b5aa:	e013      	b.n	800b5d4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b5ac:	f7fa f89e 	bl	80056ec <HAL_GetTick>
 800b5b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800b5b2:	e00a      	b.n	800b5ca <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b5b4:	f7fa f89a 	bl	80056ec <HAL_GetTick>
 800b5b8:	4602      	mov	r2, r0
 800b5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5bc:	1ad3      	subs	r3, r2, r3
 800b5be:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d901      	bls.n	800b5ca <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800b5c6:	2303      	movs	r3, #3
 800b5c8:	e121      	b.n	800b80e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800b5ca:	f7ff fb3c 	bl	800ac46 <LL_RCC_LSE_IsReady>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d1ef      	bne.n	800b5b4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d02c      	beq.n	800b63a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d014      	beq.n	800b612 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b5e8:	f7ff fab5 	bl	800ab56 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b5ec:	f7fa f87e 	bl	80056ec <HAL_GetTick>
 800b5f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800b5f2:	e008      	b.n	800b606 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b5f4:	f7fa f87a 	bl	80056ec <HAL_GetTick>
 800b5f8:	4602      	mov	r2, r0
 800b5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5fc:	1ad3      	subs	r3, r2, r3
 800b5fe:	2b02      	cmp	r3, #2
 800b600:	d901      	bls.n	800b606 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800b602:	2303      	movs	r3, #3
 800b604:	e103      	b.n	800b80e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800b606:	f7ff fac8 	bl	800ab9a <LL_RCC_HSI48_IsReady>
 800b60a:	4603      	mov	r3, r0
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d0f1      	beq.n	800b5f4 <HAL_RCC_OscConfig+0x4c0>
 800b610:	e013      	b.n	800b63a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b612:	f7ff fab1 	bl	800ab78 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b616:	f7fa f869 	bl	80056ec <HAL_GetTick>
 800b61a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800b61c:	e008      	b.n	800b630 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b61e:	f7fa f865 	bl	80056ec <HAL_GetTick>
 800b622:	4602      	mov	r2, r0
 800b624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b626:	1ad3      	subs	r3, r2, r3
 800b628:	2b02      	cmp	r3, #2
 800b62a:	d901      	bls.n	800b630 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800b62c:	2303      	movs	r3, #3
 800b62e:	e0ee      	b.n	800b80e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800b630:	f7ff fab3 	bl	800ab9a <LL_RCC_HSI48_IsReady>
 800b634:	4603      	mov	r3, r0
 800b636:	2b00      	cmp	r3, #0
 800b638:	d1f1      	bne.n	800b61e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b63e:	2b00      	cmp	r3, #0
 800b640:	f000 80e4 	beq.w	800b80c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b644:	f7ff fc11 	bl	800ae6a <LL_RCC_GetSysClkSource>
 800b648:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800b64a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b64e:	68db      	ldr	r3, [r3, #12]
 800b650:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b656:	2b02      	cmp	r3, #2
 800b658:	f040 80b4 	bne.w	800b7c4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f003 0203 	and.w	r2, r3, #3
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b666:	429a      	cmp	r2, r3
 800b668:	d123      	bne.n	800b6b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b674:	429a      	cmp	r2, r3
 800b676:	d11c      	bne.n	800b6b2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	0a1b      	lsrs	r3, r3, #8
 800b67c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b684:	429a      	cmp	r2, r3
 800b686:	d114      	bne.n	800b6b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800b692:	429a      	cmp	r2, r3
 800b694:	d10d      	bne.n	800b6b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d106      	bne.n	800b6b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	d05d      	beq.n	800b76e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	2b0c      	cmp	r3, #12
 800b6b6:	d058      	beq.n	800b76a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800b6b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d001      	beq.n	800b6ca <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	e0a1      	b.n	800b80e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800b6ca:	f7ff fc84 	bl	800afd6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b6ce:	f7fa f80d 	bl	80056ec <HAL_GetTick>
 800b6d2:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b6d4:	e008      	b.n	800b6e8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b6d6:	f7fa f809 	bl	80056ec <HAL_GetTick>
 800b6da:	4602      	mov	r2, r0
 800b6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6de:	1ad3      	subs	r3, r2, r3
 800b6e0:	2b02      	cmp	r3, #2
 800b6e2:	d901      	bls.n	800b6e8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800b6e4:	2303      	movs	r3, #3
 800b6e6:	e092      	b.n	800b80e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b6e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d1ef      	bne.n	800b6d6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b6f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6fa:	68da      	ldr	r2, [r3, #12]
 800b6fc:	4b30      	ldr	r3, [pc, #192]	@ (800b7c0 <HAL_RCC_OscConfig+0x68c>)
 800b6fe:	4013      	ands	r3, r2
 800b700:	687a      	ldr	r2, [r7, #4]
 800b702:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800b704:	687a      	ldr	r2, [r7, #4]
 800b706:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b708:	4311      	orrs	r1, r2
 800b70a:	687a      	ldr	r2, [r7, #4]
 800b70c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b70e:	0212      	lsls	r2, r2, #8
 800b710:	4311      	orrs	r1, r2
 800b712:	687a      	ldr	r2, [r7, #4]
 800b714:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b716:	4311      	orrs	r1, r2
 800b718:	687a      	ldr	r2, [r7, #4]
 800b71a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800b71c:	4311      	orrs	r1, r2
 800b71e:	687a      	ldr	r2, [r7, #4]
 800b720:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800b722:	430a      	orrs	r2, r1
 800b724:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b728:	4313      	orrs	r3, r2
 800b72a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800b72c:	f7ff fc44 	bl	800afb8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b730:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b734:	68db      	ldr	r3, [r3, #12]
 800b736:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b73a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b73e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b740:	f7f9 ffd4 	bl	80056ec <HAL_GetTick>
 800b744:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b746:	e008      	b.n	800b75a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b748:	f7f9 ffd0 	bl	80056ec <HAL_GetTick>
 800b74c:	4602      	mov	r2, r0
 800b74e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b750:	1ad3      	subs	r3, r2, r3
 800b752:	2b02      	cmp	r3, #2
 800b754:	d901      	bls.n	800b75a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800b756:	2303      	movs	r3, #3
 800b758:	e059      	b.n	800b80e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b75a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b764:	2b00      	cmp	r3, #0
 800b766:	d0ef      	beq.n	800b748 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b768:	e050      	b.n	800b80c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800b76a:	2301      	movs	r3, #1
 800b76c:	e04f      	b.n	800b80e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b76e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d147      	bne.n	800b80c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800b77c:	f7ff fc1c 	bl	800afb8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b780:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b784:	68db      	ldr	r3, [r3, #12]
 800b786:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b78a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b78e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b790:	f7f9 ffac 	bl	80056ec <HAL_GetTick>
 800b794:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b796:	e008      	b.n	800b7aa <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b798:	f7f9 ffa8 	bl	80056ec <HAL_GetTick>
 800b79c:	4602      	mov	r2, r0
 800b79e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7a0:	1ad3      	subs	r3, r2, r3
 800b7a2:	2b02      	cmp	r3, #2
 800b7a4:	d901      	bls.n	800b7aa <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800b7a6:	2303      	movs	r3, #3
 800b7a8:	e031      	b.n	800b80e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b7aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d0ef      	beq.n	800b798 <HAL_RCC_OscConfig+0x664>
 800b7b8:	e028      	b.n	800b80c <HAL_RCC_OscConfig+0x6d8>
 800b7ba:	bf00      	nop
 800b7bc:	58000400 	.word	0x58000400
 800b7c0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	2b0c      	cmp	r3, #12
 800b7c8:	d01e      	beq.n	800b808 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b7ca:	f7ff fc04 	bl	800afd6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7ce:	f7f9 ff8d 	bl	80056ec <HAL_GetTick>
 800b7d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b7d4:	e008      	b.n	800b7e8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b7d6:	f7f9 ff89 	bl	80056ec <HAL_GetTick>
 800b7da:	4602      	mov	r2, r0
 800b7dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7de:	1ad3      	subs	r3, r2, r3
 800b7e0:	2b02      	cmp	r3, #2
 800b7e2:	d901      	bls.n	800b7e8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800b7e4:	2303      	movs	r3, #3
 800b7e6:	e012      	b.n	800b80e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b7e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d1ef      	bne.n	800b7d6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800b7f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b7fa:	68da      	ldr	r2, [r3, #12]
 800b7fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b800:	4b05      	ldr	r3, [pc, #20]	@ (800b818 <HAL_RCC_OscConfig+0x6e4>)
 800b802:	4013      	ands	r3, r2
 800b804:	60cb      	str	r3, [r1, #12]
 800b806:	e001      	b.n	800b80c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800b808:	2301      	movs	r3, #1
 800b80a:	e000      	b.n	800b80e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800b80c:	2300      	movs	r3, #0
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3734      	adds	r7, #52	@ 0x34
 800b812:	46bd      	mov	sp, r7
 800b814:	bd90      	pop	{r4, r7, pc}
 800b816:	bf00      	nop
 800b818:	eefefffc 	.word	0xeefefffc

0800b81c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b084      	sub	sp, #16
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d101      	bne.n	800b830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b82c:	2301      	movs	r3, #1
 800b82e:	e12d      	b.n	800ba8c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b830:	4b98      	ldr	r3, [pc, #608]	@ (800ba94 <HAL_RCC_ClockConfig+0x278>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	f003 0307 	and.w	r3, r3, #7
 800b838:	683a      	ldr	r2, [r7, #0]
 800b83a:	429a      	cmp	r2, r3
 800b83c:	d91b      	bls.n	800b876 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b83e:	4b95      	ldr	r3, [pc, #596]	@ (800ba94 <HAL_RCC_ClockConfig+0x278>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f023 0207 	bic.w	r2, r3, #7
 800b846:	4993      	ldr	r1, [pc, #588]	@ (800ba94 <HAL_RCC_ClockConfig+0x278>)
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	4313      	orrs	r3, r2
 800b84c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b84e:	f7f9 ff4d 	bl	80056ec <HAL_GetTick>
 800b852:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b854:	e008      	b.n	800b868 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b856:	f7f9 ff49 	bl	80056ec <HAL_GetTick>
 800b85a:	4602      	mov	r2, r0
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	1ad3      	subs	r3, r2, r3
 800b860:	2b02      	cmp	r3, #2
 800b862:	d901      	bls.n	800b868 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800b864:	2303      	movs	r3, #3
 800b866:	e111      	b.n	800ba8c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b868:	4b8a      	ldr	r3, [pc, #552]	@ (800ba94 <HAL_RCC_ClockConfig+0x278>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f003 0307 	and.w	r3, r3, #7
 800b870:	683a      	ldr	r2, [r7, #0]
 800b872:	429a      	cmp	r2, r3
 800b874:	d1ef      	bne.n	800b856 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f003 0302 	and.w	r3, r3, #2
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d016      	beq.n	800b8b0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	689b      	ldr	r3, [r3, #8]
 800b886:	4618      	mov	r0, r3
 800b888:	f7ff fafb 	bl	800ae82 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b88c:	f7f9 ff2e 	bl	80056ec <HAL_GetTick>
 800b890:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800b892:	e008      	b.n	800b8a6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b894:	f7f9 ff2a 	bl	80056ec <HAL_GetTick>
 800b898:	4602      	mov	r2, r0
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	1ad3      	subs	r3, r2, r3
 800b89e:	2b02      	cmp	r3, #2
 800b8a0:	d901      	bls.n	800b8a6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800b8a2:	2303      	movs	r3, #3
 800b8a4:	e0f2      	b.n	800ba8c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800b8a6:	f7ff fbe8 	bl	800b07a <LL_RCC_IsActiveFlag_HPRE>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d0f1      	beq.n	800b894 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f003 0320 	and.w	r3, r3, #32
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d016      	beq.n	800b8ea <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	695b      	ldr	r3, [r3, #20]
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f7ff faf2 	bl	800aeaa <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b8c6:	f7f9 ff11 	bl	80056ec <HAL_GetTick>
 800b8ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800b8cc:	e008      	b.n	800b8e0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b8ce:	f7f9 ff0d 	bl	80056ec <HAL_GetTick>
 800b8d2:	4602      	mov	r2, r0
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	1ad3      	subs	r3, r2, r3
 800b8d8:	2b02      	cmp	r3, #2
 800b8da:	d901      	bls.n	800b8e0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800b8dc:	2303      	movs	r3, #3
 800b8de:	e0d5      	b.n	800ba8c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800b8e0:	f7ff fbdd 	bl	800b09e <LL_RCC_IsActiveFlag_C2HPRE>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d0f1      	beq.n	800b8ce <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d016      	beq.n	800b924 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	699b      	ldr	r3, [r3, #24]
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f7ff faeb 	bl	800aed6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b900:	f7f9 fef4 	bl	80056ec <HAL_GetTick>
 800b904:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800b906:	e008      	b.n	800b91a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b908:	f7f9 fef0 	bl	80056ec <HAL_GetTick>
 800b90c:	4602      	mov	r2, r0
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	1ad3      	subs	r3, r2, r3
 800b912:	2b02      	cmp	r3, #2
 800b914:	d901      	bls.n	800b91a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800b916:	2303      	movs	r3, #3
 800b918:	e0b8      	b.n	800ba8c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800b91a:	f7ff fbd3 	bl	800b0c4 <LL_RCC_IsActiveFlag_SHDHPRE>
 800b91e:	4603      	mov	r3, r0
 800b920:	2b00      	cmp	r3, #0
 800b922:	d0f1      	beq.n	800b908 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f003 0304 	and.w	r3, r3, #4
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d016      	beq.n	800b95e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	68db      	ldr	r3, [r3, #12]
 800b934:	4618      	mov	r0, r3
 800b936:	f7ff fae5 	bl	800af04 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b93a:	f7f9 fed7 	bl	80056ec <HAL_GetTick>
 800b93e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800b940:	e008      	b.n	800b954 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b942:	f7f9 fed3 	bl	80056ec <HAL_GetTick>
 800b946:	4602      	mov	r2, r0
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	1ad3      	subs	r3, r2, r3
 800b94c:	2b02      	cmp	r3, #2
 800b94e:	d901      	bls.n	800b954 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800b950:	2303      	movs	r3, #3
 800b952:	e09b      	b.n	800ba8c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800b954:	f7ff fbc9 	bl	800b0ea <LL_RCC_IsActiveFlag_PPRE1>
 800b958:	4603      	mov	r3, r0
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d0f1      	beq.n	800b942 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f003 0308 	and.w	r3, r3, #8
 800b966:	2b00      	cmp	r3, #0
 800b968:	d017      	beq.n	800b99a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	691b      	ldr	r3, [r3, #16]
 800b96e:	00db      	lsls	r3, r3, #3
 800b970:	4618      	mov	r0, r3
 800b972:	f7ff fadb 	bl	800af2c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b976:	f7f9 feb9 	bl	80056ec <HAL_GetTick>
 800b97a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800b97c:	e008      	b.n	800b990 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b97e:	f7f9 feb5 	bl	80056ec <HAL_GetTick>
 800b982:	4602      	mov	r2, r0
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	1ad3      	subs	r3, r2, r3
 800b988:	2b02      	cmp	r3, #2
 800b98a:	d901      	bls.n	800b990 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800b98c:	2303      	movs	r3, #3
 800b98e:	e07d      	b.n	800ba8c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800b990:	f7ff fbbd 	bl	800b10e <LL_RCC_IsActiveFlag_PPRE2>
 800b994:	4603      	mov	r3, r0
 800b996:	2b00      	cmp	r3, #0
 800b998:	d0f1      	beq.n	800b97e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f003 0301 	and.w	r3, r3, #1
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d043      	beq.n	800ba2e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	685b      	ldr	r3, [r3, #4]
 800b9aa:	2b02      	cmp	r3, #2
 800b9ac:	d106      	bne.n	800b9bc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800b9ae:	f7ff f87b 	bl	800aaa8 <LL_RCC_HSE_IsReady>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d11e      	bne.n	800b9f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	e067      	b.n	800ba8c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	685b      	ldr	r3, [r3, #4]
 800b9c0:	2b03      	cmp	r3, #3
 800b9c2:	d106      	bne.n	800b9d2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800b9c4:	f7ff fb16 	bl	800aff4 <LL_RCC_PLL_IsReady>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d113      	bne.n	800b9f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	e05c      	b.n	800ba8c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d106      	bne.n	800b9e8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800b9da:	f7ff f9e3 	bl	800ada4 <LL_RCC_MSI_IsReady>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d108      	bne.n	800b9f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	e051      	b.n	800ba8c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800b9e8:	f7ff f88e 	bl	800ab08 <LL_RCC_HSI_IsReady>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d101      	bne.n	800b9f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	e04a      	b.n	800ba8c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	685b      	ldr	r3, [r3, #4]
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7ff fa21 	bl	800ae42 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba00:	f7f9 fe74 	bl	80056ec <HAL_GetTick>
 800ba04:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ba06:	e00a      	b.n	800ba1e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ba08:	f7f9 fe70 	bl	80056ec <HAL_GetTick>
 800ba0c:	4602      	mov	r2, r0
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	1ad3      	subs	r3, r2, r3
 800ba12:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ba16:	4293      	cmp	r3, r2
 800ba18:	d901      	bls.n	800ba1e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800ba1a:	2303      	movs	r3, #3
 800ba1c:	e036      	b.n	800ba8c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ba1e:	f7ff fa24 	bl	800ae6a <LL_RCC_GetSysClkSource>
 800ba22:	4602      	mov	r2, r0
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	009b      	lsls	r3, r3, #2
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d1ec      	bne.n	800ba08 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ba2e:	4b19      	ldr	r3, [pc, #100]	@ (800ba94 <HAL_RCC_ClockConfig+0x278>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	f003 0307 	and.w	r3, r3, #7
 800ba36:	683a      	ldr	r2, [r7, #0]
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	d21b      	bcs.n	800ba74 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ba3c:	4b15      	ldr	r3, [pc, #84]	@ (800ba94 <HAL_RCC_ClockConfig+0x278>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f023 0207 	bic.w	r2, r3, #7
 800ba44:	4913      	ldr	r1, [pc, #76]	@ (800ba94 <HAL_RCC_ClockConfig+0x278>)
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	4313      	orrs	r3, r2
 800ba4a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba4c:	f7f9 fe4e 	bl	80056ec <HAL_GetTick>
 800ba50:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ba52:	e008      	b.n	800ba66 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800ba54:	f7f9 fe4a 	bl	80056ec <HAL_GetTick>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	1ad3      	subs	r3, r2, r3
 800ba5e:	2b02      	cmp	r3, #2
 800ba60:	d901      	bls.n	800ba66 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800ba62:	2303      	movs	r3, #3
 800ba64:	e012      	b.n	800ba8c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ba66:	4b0b      	ldr	r3, [pc, #44]	@ (800ba94 <HAL_RCC_ClockConfig+0x278>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f003 0307 	and.w	r3, r3, #7
 800ba6e:	683a      	ldr	r2, [r7, #0]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d1ef      	bne.n	800ba54 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800ba74:	f000 f87e 	bl	800bb74 <HAL_RCC_GetHCLKFreq>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	4a07      	ldr	r2, [pc, #28]	@ (800ba98 <HAL_RCC_ClockConfig+0x27c>)
 800ba7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800ba7e:	f7f9 fe41 	bl	8005704 <HAL_GetTickPrio>
 800ba82:	4603      	mov	r3, r0
 800ba84:	4618      	mov	r0, r3
 800ba86:	f7f9 fde3 	bl	8005650 <HAL_InitTick>
 800ba8a:	4603      	mov	r3, r0
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3710      	adds	r7, #16
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}
 800ba94:	58004000 	.word	0x58004000
 800ba98:	20000010 	.word	0x20000010

0800ba9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ba9c:	b590      	push	{r4, r7, lr}
 800ba9e:	b085      	sub	sp, #20
 800baa0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800baa2:	f7ff f9e2 	bl	800ae6a <LL_RCC_GetSysClkSource>
 800baa6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d10a      	bne.n	800bac4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800baae:	f7ff f99e 	bl	800adee <LL_RCC_MSI_GetRange>
 800bab2:	4603      	mov	r3, r0
 800bab4:	091b      	lsrs	r3, r3, #4
 800bab6:	f003 030f 	and.w	r3, r3, #15
 800baba:	4a2b      	ldr	r2, [pc, #172]	@ (800bb68 <HAL_RCC_GetSysClockFreq+0xcc>)
 800babc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bac0:	60fb      	str	r3, [r7, #12]
 800bac2:	e04b      	b.n	800bb5c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2b04      	cmp	r3, #4
 800bac8:	d102      	bne.n	800bad0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800baca:	4b28      	ldr	r3, [pc, #160]	@ (800bb6c <HAL_RCC_GetSysClockFreq+0xd0>)
 800bacc:	60fb      	str	r3, [r7, #12]
 800bace:	e045      	b.n	800bb5c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2b08      	cmp	r3, #8
 800bad4:	d10a      	bne.n	800baec <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800bad6:	f7fe ffb7 	bl	800aa48 <LL_RCC_HSE_IsEnabledDiv2>
 800bada:	4603      	mov	r3, r0
 800badc:	2b01      	cmp	r3, #1
 800bade:	d102      	bne.n	800bae6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800bae0:	4b22      	ldr	r3, [pc, #136]	@ (800bb6c <HAL_RCC_GetSysClockFreq+0xd0>)
 800bae2:	60fb      	str	r3, [r7, #12]
 800bae4:	e03a      	b.n	800bb5c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800bae6:	4b22      	ldr	r3, [pc, #136]	@ (800bb70 <HAL_RCC_GetSysClockFreq+0xd4>)
 800bae8:	60fb      	str	r3, [r7, #12]
 800baea:	e037      	b.n	800bb5c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800baec:	f7ff fab9 	bl	800b062 <LL_RCC_PLL_GetMainSource>
 800baf0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	2b02      	cmp	r3, #2
 800baf6:	d003      	beq.n	800bb00 <HAL_RCC_GetSysClockFreq+0x64>
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	2b03      	cmp	r3, #3
 800bafc:	d003      	beq.n	800bb06 <HAL_RCC_GetSysClockFreq+0x6a>
 800bafe:	e00d      	b.n	800bb1c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800bb00:	4b1a      	ldr	r3, [pc, #104]	@ (800bb6c <HAL_RCC_GetSysClockFreq+0xd0>)
 800bb02:	60bb      	str	r3, [r7, #8]
        break;
 800bb04:	e015      	b.n	800bb32 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800bb06:	f7fe ff9f 	bl	800aa48 <LL_RCC_HSE_IsEnabledDiv2>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	2b01      	cmp	r3, #1
 800bb0e:	d102      	bne.n	800bb16 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800bb10:	4b16      	ldr	r3, [pc, #88]	@ (800bb6c <HAL_RCC_GetSysClockFreq+0xd0>)
 800bb12:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800bb14:	e00d      	b.n	800bb32 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800bb16:	4b16      	ldr	r3, [pc, #88]	@ (800bb70 <HAL_RCC_GetSysClockFreq+0xd4>)
 800bb18:	60bb      	str	r3, [r7, #8]
        break;
 800bb1a:	e00a      	b.n	800bb32 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800bb1c:	f7ff f967 	bl	800adee <LL_RCC_MSI_GetRange>
 800bb20:	4603      	mov	r3, r0
 800bb22:	091b      	lsrs	r3, r3, #4
 800bb24:	f003 030f 	and.w	r3, r3, #15
 800bb28:	4a0f      	ldr	r2, [pc, #60]	@ (800bb68 <HAL_RCC_GetSysClockFreq+0xcc>)
 800bb2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb2e:	60bb      	str	r3, [r7, #8]
        break;
 800bb30:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800bb32:	f7ff fa71 	bl	800b018 <LL_RCC_PLL_GetN>
 800bb36:	4602      	mov	r2, r0
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	fb03 f402 	mul.w	r4, r3, r2
 800bb3e:	f7ff fa84 	bl	800b04a <LL_RCC_PLL_GetDivider>
 800bb42:	4603      	mov	r3, r0
 800bb44:	091b      	lsrs	r3, r3, #4
 800bb46:	3301      	adds	r3, #1
 800bb48:	fbb4 f4f3 	udiv	r4, r4, r3
 800bb4c:	f7ff fa71 	bl	800b032 <LL_RCC_PLL_GetR>
 800bb50:	4603      	mov	r3, r0
 800bb52:	0f5b      	lsrs	r3, r3, #29
 800bb54:	3301      	adds	r3, #1
 800bb56:	fbb4 f3f3 	udiv	r3, r4, r3
 800bb5a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3714      	adds	r7, #20
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd90      	pop	{r4, r7, pc}
 800bb66:	bf00      	nop
 800bb68:	080153f0 	.word	0x080153f0
 800bb6c:	00f42400 	.word	0x00f42400
 800bb70:	01e84800 	.word	0x01e84800

0800bb74 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bb74:	b598      	push	{r3, r4, r7, lr}
 800bb76:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800bb78:	f7ff ff90 	bl	800ba9c <HAL_RCC_GetSysClockFreq>
 800bb7c:	4604      	mov	r4, r0
 800bb7e:	f7ff f9e9 	bl	800af54 <LL_RCC_GetAHBPrescaler>
 800bb82:	4603      	mov	r3, r0
 800bb84:	091b      	lsrs	r3, r3, #4
 800bb86:	f003 030f 	and.w	r3, r3, #15
 800bb8a:	4a03      	ldr	r2, [pc, #12]	@ (800bb98 <HAL_RCC_GetHCLKFreq+0x24>)
 800bb8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb90:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	bd98      	pop	{r3, r4, r7, pc}
 800bb98:	08015390 	.word	0x08015390

0800bb9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bb9c:	b598      	push	{r3, r4, r7, lr}
 800bb9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800bba0:	f7ff ffe8 	bl	800bb74 <HAL_RCC_GetHCLKFreq>
 800bba4:	4604      	mov	r4, r0
 800bba6:	f7ff f9ef 	bl	800af88 <LL_RCC_GetAPB1Prescaler>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	0a1b      	lsrs	r3, r3, #8
 800bbae:	f003 0307 	and.w	r3, r3, #7
 800bbb2:	4a04      	ldr	r2, [pc, #16]	@ (800bbc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800bbb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbb8:	f003 031f 	and.w	r3, r3, #31
 800bbbc:	fa24 f303 	lsr.w	r3, r4, r3
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	bd98      	pop	{r3, r4, r7, pc}
 800bbc4:	080153d0 	.word	0x080153d0

0800bbc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bbc8:	b598      	push	{r3, r4, r7, lr}
 800bbca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800bbcc:	f7ff ffd2 	bl	800bb74 <HAL_RCC_GetHCLKFreq>
 800bbd0:	4604      	mov	r4, r0
 800bbd2:	f7ff f9e5 	bl	800afa0 <LL_RCC_GetAPB2Prescaler>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	0adb      	lsrs	r3, r3, #11
 800bbda:	f003 0307 	and.w	r3, r3, #7
 800bbde:	4a04      	ldr	r2, [pc, #16]	@ (800bbf0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800bbe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbe4:	f003 031f 	and.w	r3, r3, #31
 800bbe8:	fa24 f303 	lsr.w	r3, r4, r3
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	bd98      	pop	{r3, r4, r7, pc}
 800bbf0:	080153d0 	.word	0x080153d0

0800bbf4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800bbf4:	b590      	push	{r4, r7, lr}
 800bbf6:	b085      	sub	sp, #20
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2bb0      	cmp	r3, #176	@ 0xb0
 800bc00:	d903      	bls.n	800bc0a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800bc02:	4b15      	ldr	r3, [pc, #84]	@ (800bc58 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800bc04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc06:	60fb      	str	r3, [r7, #12]
 800bc08:	e007      	b.n	800bc1a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	091b      	lsrs	r3, r3, #4
 800bc0e:	f003 030f 	and.w	r3, r3, #15
 800bc12:	4a11      	ldr	r2, [pc, #68]	@ (800bc58 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800bc14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc18:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800bc1a:	f7ff f9a7 	bl	800af6c <LL_RCC_GetAHB4Prescaler>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	091b      	lsrs	r3, r3, #4
 800bc22:	f003 030f 	and.w	r3, r3, #15
 800bc26:	4a0d      	ldr	r2, [pc, #52]	@ (800bc5c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800bc28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc2c:	68fa      	ldr	r2, [r7, #12]
 800bc2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc32:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	4a0a      	ldr	r2, [pc, #40]	@ (800bc60 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800bc38:	fba2 2303 	umull	r2, r3, r2, r3
 800bc3c:	0c9c      	lsrs	r4, r3, #18
 800bc3e:	f7fe fee5 	bl	800aa0c <HAL_PWREx_GetVoltageRange>
 800bc42:	4603      	mov	r3, r0
 800bc44:	4619      	mov	r1, r3
 800bc46:	4620      	mov	r0, r4
 800bc48:	f000 f80c 	bl	800bc64 <RCC_SetFlashLatency>
 800bc4c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3714      	adds	r7, #20
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd90      	pop	{r4, r7, pc}
 800bc56:	bf00      	nop
 800bc58:	080153f0 	.word	0x080153f0
 800bc5c:	08015390 	.word	0x08015390
 800bc60:	431bde83 	.word	0x431bde83

0800bc64 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800bc64:	b590      	push	{r4, r7, lr}
 800bc66:	b093      	sub	sp, #76	@ 0x4c
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
 800bc6c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800bc6e:	4b37      	ldr	r3, [pc, #220]	@ (800bd4c <RCC_SetFlashLatency+0xe8>)
 800bc70:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800bc74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bc76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800bc7a:	4a35      	ldr	r2, [pc, #212]	@ (800bd50 <RCC_SetFlashLatency+0xec>)
 800bc7c:	f107 031c 	add.w	r3, r7, #28
 800bc80:	ca07      	ldmia	r2, {r0, r1, r2}
 800bc82:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800bc86:	4b33      	ldr	r3, [pc, #204]	@ (800bd54 <RCC_SetFlashLatency+0xf0>)
 800bc88:	f107 040c 	add.w	r4, r7, #12
 800bc8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bc8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800bc92:	2300      	movs	r3, #0
 800bc94:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc9c:	d11a      	bne.n	800bcd4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800bc9e:	2300      	movs	r3, #0
 800bca0:	643b      	str	r3, [r7, #64]	@ 0x40
 800bca2:	e013      	b.n	800bccc <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800bca4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bca6:	009b      	lsls	r3, r3, #2
 800bca8:	3348      	adds	r3, #72	@ 0x48
 800bcaa:	443b      	add	r3, r7
 800bcac:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800bcb0:	687a      	ldr	r2, [r7, #4]
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	d807      	bhi.n	800bcc6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800bcb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcb8:	009b      	lsls	r3, r3, #2
 800bcba:	3348      	adds	r3, #72	@ 0x48
 800bcbc:	443b      	add	r3, r7
 800bcbe:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800bcc2:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800bcc4:	e020      	b.n	800bd08 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800bcc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcc8:	3301      	adds	r3, #1
 800bcca:	643b      	str	r3, [r7, #64]	@ 0x40
 800bccc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcce:	2b03      	cmp	r3, #3
 800bcd0:	d9e8      	bls.n	800bca4 <RCC_SetFlashLatency+0x40>
 800bcd2:	e019      	b.n	800bd08 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bcd8:	e013      	b.n	800bd02 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800bcda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcdc:	009b      	lsls	r3, r3, #2
 800bcde:	3348      	adds	r3, #72	@ 0x48
 800bce0:	443b      	add	r3, r7
 800bce2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	429a      	cmp	r2, r3
 800bcea:	d807      	bhi.n	800bcfc <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800bcec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcee:	009b      	lsls	r3, r3, #2
 800bcf0:	3348      	adds	r3, #72	@ 0x48
 800bcf2:	443b      	add	r3, r7
 800bcf4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800bcf8:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800bcfa:	e005      	b.n	800bd08 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800bcfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcfe:	3301      	adds	r3, #1
 800bd00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bd02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd04:	2b02      	cmp	r3, #2
 800bd06:	d9e8      	bls.n	800bcda <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800bd08:	4b13      	ldr	r3, [pc, #76]	@ (800bd58 <RCC_SetFlashLatency+0xf4>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f023 0207 	bic.w	r2, r3, #7
 800bd10:	4911      	ldr	r1, [pc, #68]	@ (800bd58 <RCC_SetFlashLatency+0xf4>)
 800bd12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd14:	4313      	orrs	r3, r2
 800bd16:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bd18:	f7f9 fce8 	bl	80056ec <HAL_GetTick>
 800bd1c:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800bd1e:	e008      	b.n	800bd32 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800bd20:	f7f9 fce4 	bl	80056ec <HAL_GetTick>
 800bd24:	4602      	mov	r2, r0
 800bd26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd28:	1ad3      	subs	r3, r2, r3
 800bd2a:	2b02      	cmp	r3, #2
 800bd2c:	d901      	bls.n	800bd32 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800bd2e:	2303      	movs	r3, #3
 800bd30:	e007      	b.n	800bd42 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800bd32:	4b09      	ldr	r3, [pc, #36]	@ (800bd58 <RCC_SetFlashLatency+0xf4>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f003 0307 	and.w	r3, r3, #7
 800bd3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	d1ef      	bne.n	800bd20 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800bd40:	2300      	movs	r3, #0
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	374c      	adds	r7, #76	@ 0x4c
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd90      	pop	{r4, r7, pc}
 800bd4a:	bf00      	nop
 800bd4c:	080152d4 	.word	0x080152d4
 800bd50:	080152e4 	.word	0x080152e4
 800bd54:	080152f0 	.word	0x080152f0
 800bd58:	58004000 	.word	0x58004000

0800bd5c <LL_RCC_LSE_IsEnabled>:
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800bd60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd68:	f003 0301 	and.w	r3, r3, #1
 800bd6c:	2b01      	cmp	r3, #1
 800bd6e:	d101      	bne.n	800bd74 <LL_RCC_LSE_IsEnabled+0x18>
 800bd70:	2301      	movs	r3, #1
 800bd72:	e000      	b.n	800bd76 <LL_RCC_LSE_IsEnabled+0x1a>
 800bd74:	2300      	movs	r3, #0
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr

0800bd80 <LL_RCC_LSE_IsReady>:
{
 800bd80:	b480      	push	{r7}
 800bd82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800bd84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd8c:	f003 0302 	and.w	r3, r3, #2
 800bd90:	2b02      	cmp	r3, #2
 800bd92:	d101      	bne.n	800bd98 <LL_RCC_LSE_IsReady+0x18>
 800bd94:	2301      	movs	r3, #1
 800bd96:	e000      	b.n	800bd9a <LL_RCC_LSE_IsReady+0x1a>
 800bd98:	2300      	movs	r3, #0
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda2:	4770      	bx	lr

0800bda4 <LL_RCC_SetRFWKPClockSource>:
{
 800bda4:	b480      	push	{r7}
 800bda6:	b083      	sub	sp, #12
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800bdac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bdb4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800bdb8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	4313      	orrs	r3, r2
 800bdc0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800bdc4:	bf00      	nop
 800bdc6:	370c      	adds	r7, #12
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdce:	4770      	bx	lr

0800bdd0 <LL_RCC_SetSMPSClockSource>:
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b083      	sub	sp, #12
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800bdd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdde:	f023 0203 	bic.w	r2, r3, #3
 800bde2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	4313      	orrs	r3, r2
 800bdea:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800bdec:	bf00      	nop
 800bdee:	370c      	adds	r7, #12
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf6:	4770      	bx	lr

0800bdf8 <LL_RCC_SetSMPSPrescaler>:
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b083      	sub	sp, #12
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800be00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be06:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800be0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	4313      	orrs	r3, r2
 800be12:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800be14:	bf00      	nop
 800be16:	370c      	adds	r7, #12
 800be18:	46bd      	mov	sp, r7
 800be1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1e:	4770      	bx	lr

0800be20 <LL_RCC_SetUSARTClockSource>:
{
 800be20:	b480      	push	{r7}
 800be22:	b083      	sub	sp, #12
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800be28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be30:	f023 0203 	bic.w	r2, r3, #3
 800be34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	4313      	orrs	r3, r2
 800be3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800be40:	bf00      	nop
 800be42:	370c      	adds	r7, #12
 800be44:	46bd      	mov	sp, r7
 800be46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4a:	4770      	bx	lr

0800be4c <LL_RCC_SetLPUARTClockSource>:
{
 800be4c:	b480      	push	{r7}
 800be4e:	b083      	sub	sp, #12
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800be54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be5c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800be60:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	4313      	orrs	r3, r2
 800be68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800be6c:	bf00      	nop
 800be6e:	370c      	adds	r7, #12
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr

0800be78 <LL_RCC_SetI2CClockSource>:
{
 800be78:	b480      	push	{r7}
 800be7a:	b083      	sub	sp, #12
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800be80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be84:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	091b      	lsrs	r3, r3, #4
 800be8c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800be90:	43db      	mvns	r3, r3
 800be92:	401a      	ands	r2, r3
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	011b      	lsls	r3, r3, #4
 800be98:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800be9c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bea0:	4313      	orrs	r3, r2
 800bea2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bea6:	bf00      	nop
 800bea8:	370c      	adds	r7, #12
 800beaa:	46bd      	mov	sp, r7
 800beac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb0:	4770      	bx	lr

0800beb2 <LL_RCC_SetLPTIMClockSource>:
{
 800beb2:	b480      	push	{r7}
 800beb4:	b083      	sub	sp, #12
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800beba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bebe:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	0c1b      	lsrs	r3, r3, #16
 800bec6:	041b      	lsls	r3, r3, #16
 800bec8:	43db      	mvns	r3, r3
 800beca:	401a      	ands	r2, r3
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	041b      	lsls	r3, r3, #16
 800bed0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bed4:	4313      	orrs	r3, r2
 800bed6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800beda:	bf00      	nop
 800bedc:	370c      	adds	r7, #12
 800bede:	46bd      	mov	sp, r7
 800bee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee4:	4770      	bx	lr

0800bee6 <LL_RCC_SetSAIClockSource>:
{
 800bee6:	b480      	push	{r7}
 800bee8:	b083      	sub	sp, #12
 800beea:	af00      	add	r7, sp, #0
 800beec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800beee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bef6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800befa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	4313      	orrs	r3, r2
 800bf02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bf06:	bf00      	nop
 800bf08:	370c      	adds	r7, #12
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf10:	4770      	bx	lr

0800bf12 <LL_RCC_SetRNGClockSource>:
{
 800bf12:	b480      	push	{r7}
 800bf14:	b083      	sub	sp, #12
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800bf1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf22:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800bf26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	4313      	orrs	r3, r2
 800bf2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bf32:	bf00      	nop
 800bf34:	370c      	adds	r7, #12
 800bf36:	46bd      	mov	sp, r7
 800bf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3c:	4770      	bx	lr

0800bf3e <LL_RCC_SetCLK48ClockSource>:
{
 800bf3e:	b480      	push	{r7}
 800bf40:	b083      	sub	sp, #12
 800bf42:	af00      	add	r7, sp, #0
 800bf44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800bf46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf4e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800bf52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	4313      	orrs	r3, r2
 800bf5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bf5e:	bf00      	nop
 800bf60:	370c      	adds	r7, #12
 800bf62:	46bd      	mov	sp, r7
 800bf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf68:	4770      	bx	lr

0800bf6a <LL_RCC_SetUSBClockSource>:
{
 800bf6a:	b580      	push	{r7, lr}
 800bf6c:	b082      	sub	sp, #8
 800bf6e:	af00      	add	r7, sp, #0
 800bf70:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f7ff ffe3 	bl	800bf3e <LL_RCC_SetCLK48ClockSource>
}
 800bf78:	bf00      	nop
 800bf7a:	3708      	adds	r7, #8
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <LL_RCC_SetADCClockSource>:
{
 800bf80:	b480      	push	{r7}
 800bf82:	b083      	sub	sp, #12
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800bf88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf90:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800bf94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	4313      	orrs	r3, r2
 800bf9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bfa0:	bf00      	nop
 800bfa2:	370c      	adds	r7, #12
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfaa:	4770      	bx	lr

0800bfac <LL_RCC_SetRTCClockSource>:
{
 800bfac:	b480      	push	{r7}
 800bfae:	b083      	sub	sp, #12
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800bfb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bfb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bfc0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	4313      	orrs	r3, r2
 800bfc8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800bfcc:	bf00      	nop
 800bfce:	370c      	adds	r7, #12
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd6:	4770      	bx	lr

0800bfd8 <LL_RCC_GetRTCClockSource>:
{
 800bfd8:	b480      	push	{r7}
 800bfda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800bfdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bfe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfe4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	46bd      	mov	sp, r7
 800bfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff0:	4770      	bx	lr

0800bff2 <LL_RCC_ForceBackupDomainReset>:
{
 800bff2:	b480      	push	{r7}
 800bff4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800bff6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bffe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c002:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c006:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800c00a:	bf00      	nop
 800c00c:	46bd      	mov	sp, r7
 800c00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c012:	4770      	bx	lr

0800c014 <LL_RCC_ReleaseBackupDomainReset>:
{
 800c014:	b480      	push	{r7}
 800c016:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800c018:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c01c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c020:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c024:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c028:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800c02c:	bf00      	nop
 800c02e:	46bd      	mov	sp, r7
 800c030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c034:	4770      	bx	lr

0800c036 <LL_RCC_PLLSAI1_Enable>:
{
 800c036:	b480      	push	{r7}
 800c038:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800c03a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c044:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c048:	6013      	str	r3, [r2, #0]
}
 800c04a:	bf00      	nop
 800c04c:	46bd      	mov	sp, r7
 800c04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c052:	4770      	bx	lr

0800c054 <LL_RCC_PLLSAI1_Disable>:
{
 800c054:	b480      	push	{r7}
 800c056:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800c058:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c062:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c066:	6013      	str	r3, [r2, #0]
}
 800c068:	bf00      	nop
 800c06a:	46bd      	mov	sp, r7
 800c06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c070:	4770      	bx	lr

0800c072 <LL_RCC_PLLSAI1_IsReady>:
{
 800c072:	b480      	push	{r7}
 800c074:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800c076:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c080:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c084:	d101      	bne.n	800c08a <LL_RCC_PLLSAI1_IsReady+0x18>
 800c086:	2301      	movs	r3, #1
 800c088:	e000      	b.n	800c08c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800c08a:	2300      	movs	r3, #0
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	46bd      	mov	sp, r7
 800c090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c094:	4770      	bx	lr

0800c096 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c096:	b580      	push	{r7, lr}
 800c098:	b088      	sub	sp, #32
 800c09a:	af00      	add	r7, sp, #0
 800c09c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800c09e:	2300      	movs	r3, #0
 800c0a0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d034      	beq.n	800c11c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0b6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c0ba:	d021      	beq.n	800c100 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800c0bc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c0c0:	d81b      	bhi.n	800c0fa <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c0c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c0c6:	d01d      	beq.n	800c104 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800c0c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c0cc:	d815      	bhi.n	800c0fa <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d00b      	beq.n	800c0ea <HAL_RCCEx_PeriphCLKConfig+0x54>
 800c0d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c0d6:	d110      	bne.n	800c0fa <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800c0d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c0dc:	68db      	ldr	r3, [r3, #12]
 800c0de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c0e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c0e6:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800c0e8:	e00d      	b.n	800c106 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	3304      	adds	r3, #4
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f000 f947 	bl	800c382 <RCCEx_PLLSAI1_ConfigNP>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800c0f8:	e005      	b.n	800c106 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	77fb      	strb	r3, [r7, #31]
        break;
 800c0fe:	e002      	b.n	800c106 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800c100:	bf00      	nop
 800c102:	e000      	b.n	800c106 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800c104:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c106:	7ffb      	ldrb	r3, [r7, #31]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d105      	bne.n	800c118 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c110:	4618      	mov	r0, r3
 800c112:	f7ff fee8 	bl	800bee6 <LL_RCC_SetSAIClockSource>
 800c116:	e001      	b.n	800c11c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c118:	7ffb      	ldrb	r3, [r7, #31]
 800c11a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c124:	2b00      	cmp	r3, #0
 800c126:	d046      	beq.n	800c1b6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800c128:	f7ff ff56 	bl	800bfd8 <LL_RCC_GetRTCClockSource>
 800c12c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c132:	69ba      	ldr	r2, [r7, #24]
 800c134:	429a      	cmp	r2, r3
 800c136:	d03c      	beq.n	800c1b2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800c138:	f7fe fc58 	bl	800a9ec <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800c13c:	69bb      	ldr	r3, [r7, #24]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d105      	bne.n	800c14e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c146:	4618      	mov	r0, r3
 800c148:	f7ff ff30 	bl	800bfac <LL_RCC_SetRTCClockSource>
 800c14c:	e02e      	b.n	800c1ac <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800c14e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c156:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800c158:	f7ff ff4b 	bl	800bff2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800c15c:	f7ff ff5a 	bl	800c014 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c16a:	4313      	orrs	r3, r2
 800c16c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800c16e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800c178:	f7ff fdf0 	bl	800bd5c <LL_RCC_LSE_IsEnabled>
 800c17c:	4603      	mov	r3, r0
 800c17e:	2b01      	cmp	r3, #1
 800c180:	d114      	bne.n	800c1ac <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c182:	f7f9 fab3 	bl	80056ec <HAL_GetTick>
 800c186:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800c188:	e00b      	b.n	800c1a2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c18a:	f7f9 faaf 	bl	80056ec <HAL_GetTick>
 800c18e:	4602      	mov	r2, r0
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	1ad3      	subs	r3, r2, r3
 800c194:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c198:	4293      	cmp	r3, r2
 800c19a:	d902      	bls.n	800c1a2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800c19c:	2303      	movs	r3, #3
 800c19e:	77fb      	strb	r3, [r7, #31]
              break;
 800c1a0:	e004      	b.n	800c1ac <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800c1a2:	f7ff fded 	bl	800bd80 <LL_RCC_LSE_IsReady>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	2b01      	cmp	r3, #1
 800c1aa:	d1ee      	bne.n	800c18a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800c1ac:	7ffb      	ldrb	r3, [r7, #31]
 800c1ae:	77bb      	strb	r3, [r7, #30]
 800c1b0:	e001      	b.n	800c1b6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1b2:	7ffb      	ldrb	r3, [r7, #31]
 800c1b4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f003 0301 	and.w	r3, r3, #1
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d004      	beq.n	800c1cc <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	699b      	ldr	r3, [r3, #24]
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f7ff fe2a 	bl	800be20 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	f003 0302 	and.w	r3, r3, #2
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d004      	beq.n	800c1e2 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	69db      	ldr	r3, [r3, #28]
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f7ff fe35 	bl	800be4c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f003 0310 	and.w	r3, r3, #16
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d004      	beq.n	800c1f8 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7ff fe5d 	bl	800beb2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	f003 0320 	and.w	r3, r3, #32
 800c200:	2b00      	cmp	r3, #0
 800c202:	d004      	beq.n	800c20e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c208:	4618      	mov	r0, r3
 800c20a:	f7ff fe52 	bl	800beb2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f003 0304 	and.w	r3, r3, #4
 800c216:	2b00      	cmp	r3, #0
 800c218:	d004      	beq.n	800c224 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6a1b      	ldr	r3, [r3, #32]
 800c21e:	4618      	mov	r0, r3
 800c220:	f7ff fe2a 	bl	800be78 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	f003 0308 	and.w	r3, r3, #8
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d004      	beq.n	800c23a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c234:	4618      	mov	r0, r3
 800c236:	f7ff fe1f 	bl	800be78 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c242:	2b00      	cmp	r3, #0
 800c244:	d022      	beq.n	800c28c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c24a:	4618      	mov	r0, r3
 800c24c:	f7ff fe8d 	bl	800bf6a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c254:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c258:	d107      	bne.n	800c26a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800c25a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c25e:	68db      	ldr	r3, [r3, #12]
 800c260:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c264:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c268:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c26e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c272:	d10b      	bne.n	800c28c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	3304      	adds	r3, #4
 800c278:	4618      	mov	r0, r3
 800c27a:	f000 f8dd 	bl	800c438 <RCCEx_PLLSAI1_ConfigNQ>
 800c27e:	4603      	mov	r3, r0
 800c280:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800c282:	7ffb      	ldrb	r3, [r7, #31]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d001      	beq.n	800c28c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800c288:	7ffb      	ldrb	r3, [r7, #31]
 800c28a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c294:	2b00      	cmp	r3, #0
 800c296:	d02b      	beq.n	800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c29c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c2a0:	d008      	beq.n	800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c2aa:	d003      	beq.n	800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d105      	bne.n	800c2c0 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f7ff fe2a 	bl	800bf12 <LL_RCC_SetRNGClockSource>
 800c2be:	e00a      	b.n	800c2d6 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c2c8:	60fb      	str	r3, [r7, #12]
 800c2ca:	2000      	movs	r0, #0
 800c2cc:	f7ff fe21 	bl	800bf12 <LL_RCC_SetRNGClockSource>
 800c2d0:	68f8      	ldr	r0, [r7, #12]
 800c2d2:	f7ff fe34 	bl	800bf3e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2da:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800c2de:	d107      	bne.n	800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800c2e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c2e4:	68db      	ldr	r3, [r3, #12]
 800c2e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c2ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c2ee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d022      	beq.n	800c342 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c300:	4618      	mov	r0, r3
 800c302:	f7ff fe3d 	bl	800bf80 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c30a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c30e:	d107      	bne.n	800c320 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c310:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c314:	68db      	ldr	r3, [r3, #12]
 800c316:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c31a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c31e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c324:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c328:	d10b      	bne.n	800c342 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	3304      	adds	r3, #4
 800c32e:	4618      	mov	r0, r3
 800c330:	f000 f8dd 	bl	800c4ee <RCCEx_PLLSAI1_ConfigNR>
 800c334:	4603      	mov	r3, r0
 800c336:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800c338:	7ffb      	ldrb	r3, [r7, #31]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d001      	beq.n	800c342 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800c33e:	7ffb      	ldrb	r3, [r7, #31]
 800c340:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d004      	beq.n	800c358 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c352:	4618      	mov	r0, r3
 800c354:	f7ff fd26 	bl	800bda4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c360:	2b00      	cmp	r3, #0
 800c362:	d009      	beq.n	800c378 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c368:	4618      	mov	r0, r3
 800c36a:	f7ff fd45 	bl	800bdf8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c372:	4618      	mov	r0, r3
 800c374:	f7ff fd2c 	bl	800bdd0 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800c378:	7fbb      	ldrb	r3, [r7, #30]
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3720      	adds	r7, #32
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}

0800c382 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800c382:	b580      	push	{r7, lr}
 800c384:	b084      	sub	sp, #16
 800c386:	af00      	add	r7, sp, #0
 800c388:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c38a:	2300      	movs	r3, #0
 800c38c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c38e:	f7ff fe61 	bl	800c054 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c392:	f7f9 f9ab 	bl	80056ec <HAL_GetTick>
 800c396:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c398:	e009      	b.n	800c3ae <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c39a:	f7f9 f9a7 	bl	80056ec <HAL_GetTick>
 800c39e:	4602      	mov	r2, r0
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	1ad3      	subs	r3, r2, r3
 800c3a4:	2b02      	cmp	r3, #2
 800c3a6:	d902      	bls.n	800c3ae <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800c3a8:	2303      	movs	r3, #3
 800c3aa:	73fb      	strb	r3, [r7, #15]
      break;
 800c3ac:	e004      	b.n	800c3b8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c3ae:	f7ff fe60 	bl	800c072 <LL_RCC_PLLSAI1_IsReady>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d1f0      	bne.n	800c39a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800c3b8:	7bfb      	ldrb	r3, [r7, #15]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d137      	bne.n	800c42e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800c3be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c3c2:	691b      	ldr	r3, [r3, #16]
 800c3c4:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	021b      	lsls	r3, r3, #8
 800c3ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c3d2:	4313      	orrs	r3, r2
 800c3d4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800c3d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c3da:	691b      	ldr	r3, [r3, #16]
 800c3dc:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	685b      	ldr	r3, [r3, #4]
 800c3e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c3e8:	4313      	orrs	r3, r2
 800c3ea:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800c3ec:	f7ff fe23 	bl	800c036 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c3f0:	f7f9 f97c 	bl	80056ec <HAL_GetTick>
 800c3f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c3f6:	e009      	b.n	800c40c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c3f8:	f7f9 f978 	bl	80056ec <HAL_GetTick>
 800c3fc:	4602      	mov	r2, r0
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	1ad3      	subs	r3, r2, r3
 800c402:	2b02      	cmp	r3, #2
 800c404:	d902      	bls.n	800c40c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800c406:	2303      	movs	r3, #3
 800c408:	73fb      	strb	r3, [r7, #15]
        break;
 800c40a:	e004      	b.n	800c416 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c40c:	f7ff fe31 	bl	800c072 <LL_RCC_PLLSAI1_IsReady>
 800c410:	4603      	mov	r3, r0
 800c412:	2b01      	cmp	r3, #1
 800c414:	d1f0      	bne.n	800c3f8 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800c416:	7bfb      	ldrb	r3, [r7, #15]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d108      	bne.n	800c42e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800c41c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c420:	691a      	ldr	r2, [r3, #16]
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	691b      	ldr	r3, [r3, #16]
 800c426:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c42a:	4313      	orrs	r3, r2
 800c42c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800c42e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c430:	4618      	mov	r0, r3
 800c432:	3710      	adds	r7, #16
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}

0800c438 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b084      	sub	sp, #16
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c440:	2300      	movs	r3, #0
 800c442:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c444:	f7ff fe06 	bl	800c054 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c448:	f7f9 f950 	bl	80056ec <HAL_GetTick>
 800c44c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c44e:	e009      	b.n	800c464 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c450:	f7f9 f94c 	bl	80056ec <HAL_GetTick>
 800c454:	4602      	mov	r2, r0
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	1ad3      	subs	r3, r2, r3
 800c45a:	2b02      	cmp	r3, #2
 800c45c:	d902      	bls.n	800c464 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800c45e:	2303      	movs	r3, #3
 800c460:	73fb      	strb	r3, [r7, #15]
      break;
 800c462:	e004      	b.n	800c46e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c464:	f7ff fe05 	bl	800c072 <LL_RCC_PLLSAI1_IsReady>
 800c468:	4603      	mov	r3, r0
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d1f0      	bne.n	800c450 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800c46e:	7bfb      	ldrb	r3, [r7, #15]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d137      	bne.n	800c4e4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800c474:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c478:	691b      	ldr	r3, [r3, #16]
 800c47a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	021b      	lsls	r3, r3, #8
 800c484:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c488:	4313      	orrs	r3, r2
 800c48a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800c48c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c490:	691b      	ldr	r3, [r3, #16]
 800c492:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	689b      	ldr	r3, [r3, #8]
 800c49a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c49e:	4313      	orrs	r3, r2
 800c4a0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800c4a2:	f7ff fdc8 	bl	800c036 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c4a6:	f7f9 f921 	bl	80056ec <HAL_GetTick>
 800c4aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c4ac:	e009      	b.n	800c4c2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c4ae:	f7f9 f91d 	bl	80056ec <HAL_GetTick>
 800c4b2:	4602      	mov	r2, r0
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	1ad3      	subs	r3, r2, r3
 800c4b8:	2b02      	cmp	r3, #2
 800c4ba:	d902      	bls.n	800c4c2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800c4bc:	2303      	movs	r3, #3
 800c4be:	73fb      	strb	r3, [r7, #15]
        break;
 800c4c0:	e004      	b.n	800c4cc <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c4c2:	f7ff fdd6 	bl	800c072 <LL_RCC_PLLSAI1_IsReady>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	2b01      	cmp	r3, #1
 800c4ca:	d1f0      	bne.n	800c4ae <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800c4cc:	7bfb      	ldrb	r3, [r7, #15]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d108      	bne.n	800c4e4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800c4d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c4d6:	691a      	ldr	r2, [r3, #16]
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	691b      	ldr	r3, [r3, #16]
 800c4dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c4e0:	4313      	orrs	r3, r2
 800c4e2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800c4e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3710      	adds	r7, #16
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}

0800c4ee <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800c4ee:	b580      	push	{r7, lr}
 800c4f0:	b084      	sub	sp, #16
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c4fa:	f7ff fdab 	bl	800c054 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c4fe:	f7f9 f8f5 	bl	80056ec <HAL_GetTick>
 800c502:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c504:	e009      	b.n	800c51a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c506:	f7f9 f8f1 	bl	80056ec <HAL_GetTick>
 800c50a:	4602      	mov	r2, r0
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	1ad3      	subs	r3, r2, r3
 800c510:	2b02      	cmp	r3, #2
 800c512:	d902      	bls.n	800c51a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800c514:	2303      	movs	r3, #3
 800c516:	73fb      	strb	r3, [r7, #15]
      break;
 800c518:	e004      	b.n	800c524 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c51a:	f7ff fdaa 	bl	800c072 <LL_RCC_PLLSAI1_IsReady>
 800c51e:	4603      	mov	r3, r0
 800c520:	2b00      	cmp	r3, #0
 800c522:	d1f0      	bne.n	800c506 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800c524:	7bfb      	ldrb	r3, [r7, #15]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d137      	bne.n	800c59a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800c52a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c52e:	691b      	ldr	r3, [r3, #16]
 800c530:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	021b      	lsls	r3, r3, #8
 800c53a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c53e:	4313      	orrs	r3, r2
 800c540:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800c542:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c546:	691b      	ldr	r3, [r3, #16]
 800c548:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	68db      	ldr	r3, [r3, #12]
 800c550:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c554:	4313      	orrs	r3, r2
 800c556:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800c558:	f7ff fd6d 	bl	800c036 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c55c:	f7f9 f8c6 	bl	80056ec <HAL_GetTick>
 800c560:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c562:	e009      	b.n	800c578 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c564:	f7f9 f8c2 	bl	80056ec <HAL_GetTick>
 800c568:	4602      	mov	r2, r0
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	1ad3      	subs	r3, r2, r3
 800c56e:	2b02      	cmp	r3, #2
 800c570:	d902      	bls.n	800c578 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800c572:	2303      	movs	r3, #3
 800c574:	73fb      	strb	r3, [r7, #15]
        break;
 800c576:	e004      	b.n	800c582 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c578:	f7ff fd7b 	bl	800c072 <LL_RCC_PLLSAI1_IsReady>
 800c57c:	4603      	mov	r3, r0
 800c57e:	2b01      	cmp	r3, #1
 800c580:	d1f0      	bne.n	800c564 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800c582:	7bfb      	ldrb	r3, [r7, #15]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d108      	bne.n	800c59a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800c588:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c58c:	691a      	ldr	r2, [r3, #16]
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	691b      	ldr	r3, [r3, #16]
 800c592:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c596:	4313      	orrs	r3, r2
 800c598:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800c59a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3710      	adds	r7, #16
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}

0800c5a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b082      	sub	sp, #8
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d101      	bne.n	800c5b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	e049      	b.n	800c64a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c5bc:	b2db      	uxtb	r3, r3
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d106      	bne.n	800c5d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f7f8 fc88 	bl	8004ee0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2202      	movs	r2, #2
 800c5d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681a      	ldr	r2, [r3, #0]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	3304      	adds	r3, #4
 800c5e0:	4619      	mov	r1, r3
 800c5e2:	4610      	mov	r0, r2
 800c5e4:	f000 fa7c 	bl	800cae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2201      	movs	r2, #1
 800c604:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2201      	movs	r2, #1
 800c60c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2201      	movs	r2, #1
 800c614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2201      	movs	r2, #1
 800c61c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2201      	movs	r2, #1
 800c624:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2201      	movs	r2, #1
 800c62c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2201      	movs	r2, #1
 800c634:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2201      	movs	r2, #1
 800c63c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2201      	movs	r2, #1
 800c644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c648:	2300      	movs	r3, #0
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3708      	adds	r7, #8
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}
	...

0800c654 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c654:	b480      	push	{r7}
 800c656:	b085      	sub	sp, #20
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c662:	b2db      	uxtb	r3, r3
 800c664:	2b01      	cmp	r3, #1
 800c666:	d001      	beq.n	800c66c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c668:	2301      	movs	r3, #1
 800c66a:	e036      	b.n	800c6da <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2202      	movs	r2, #2
 800c670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	68da      	ldr	r2, [r3, #12]
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f042 0201 	orr.w	r2, r2, #1
 800c682:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	4a17      	ldr	r2, [pc, #92]	@ (800c6e8 <HAL_TIM_Base_Start_IT+0x94>)
 800c68a:	4293      	cmp	r3, r2
 800c68c:	d004      	beq.n	800c698 <HAL_TIM_Base_Start_IT+0x44>
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c696:	d115      	bne.n	800c6c4 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	689a      	ldr	r2, [r3, #8]
 800c69e:	4b13      	ldr	r3, [pc, #76]	@ (800c6ec <HAL_TIM_Base_Start_IT+0x98>)
 800c6a0:	4013      	ands	r3, r2
 800c6a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	2b06      	cmp	r3, #6
 800c6a8:	d015      	beq.n	800c6d6 <HAL_TIM_Base_Start_IT+0x82>
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c6b0:	d011      	beq.n	800c6d6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	681a      	ldr	r2, [r3, #0]
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f042 0201 	orr.w	r2, r2, #1
 800c6c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6c2:	e008      	b.n	800c6d6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	681a      	ldr	r2, [r3, #0]
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	f042 0201 	orr.w	r2, r2, #1
 800c6d2:	601a      	str	r2, [r3, #0]
 800c6d4:	e000      	b.n	800c6d8 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c6d8:	2300      	movs	r3, #0
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	3714      	adds	r7, #20
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e4:	4770      	bx	lr
 800c6e6:	bf00      	nop
 800c6e8:	40012c00 	.word	0x40012c00
 800c6ec:	00010007 	.word	0x00010007

0800c6f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b084      	sub	sp, #16
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	68db      	ldr	r3, [r3, #12]
 800c6fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	691b      	ldr	r3, [r3, #16]
 800c706:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	f003 0302 	and.w	r3, r3, #2
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d020      	beq.n	800c754 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	f003 0302 	and.w	r3, r3, #2
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d01b      	beq.n	800c754 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f06f 0202 	mvn.w	r2, #2
 800c724:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2201      	movs	r2, #1
 800c72a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	699b      	ldr	r3, [r3, #24]
 800c732:	f003 0303 	and.w	r3, r3, #3
 800c736:	2b00      	cmp	r3, #0
 800c738:	d003      	beq.n	800c742 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f000 f9b2 	bl	800caa4 <HAL_TIM_IC_CaptureCallback>
 800c740:	e005      	b.n	800c74e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f000 f9a4 	bl	800ca90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f000 f9b5 	bl	800cab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2200      	movs	r2, #0
 800c752:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	f003 0304 	and.w	r3, r3, #4
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d020      	beq.n	800c7a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	f003 0304 	and.w	r3, r3, #4
 800c764:	2b00      	cmp	r3, #0
 800c766:	d01b      	beq.n	800c7a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	f06f 0204 	mvn.w	r2, #4
 800c770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2202      	movs	r2, #2
 800c776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	699b      	ldr	r3, [r3, #24]
 800c77e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c782:	2b00      	cmp	r3, #0
 800c784:	d003      	beq.n	800c78e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f000 f98c 	bl	800caa4 <HAL_TIM_IC_CaptureCallback>
 800c78c:	e005      	b.n	800c79a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f000 f97e 	bl	800ca90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	f000 f98f 	bl	800cab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2200      	movs	r2, #0
 800c79e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	f003 0308 	and.w	r3, r3, #8
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d020      	beq.n	800c7ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	f003 0308 	and.w	r3, r3, #8
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d01b      	beq.n	800c7ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	f06f 0208 	mvn.w	r2, #8
 800c7bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2204      	movs	r2, #4
 800c7c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	69db      	ldr	r3, [r3, #28]
 800c7ca:	f003 0303 	and.w	r3, r3, #3
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d003      	beq.n	800c7da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f000 f966 	bl	800caa4 <HAL_TIM_IC_CaptureCallback>
 800c7d8:	e005      	b.n	800c7e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f000 f958 	bl	800ca90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f000 f969 	bl	800cab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	f003 0310 	and.w	r3, r3, #16
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d020      	beq.n	800c838 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	f003 0310 	and.w	r3, r3, #16
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d01b      	beq.n	800c838 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	f06f 0210 	mvn.w	r2, #16
 800c808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2208      	movs	r2, #8
 800c80e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	69db      	ldr	r3, [r3, #28]
 800c816:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d003      	beq.n	800c826 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f000 f940 	bl	800caa4 <HAL_TIM_IC_CaptureCallback>
 800c824:	e005      	b.n	800c832 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f000 f932 	bl	800ca90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f000 f943 	bl	800cab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2200      	movs	r2, #0
 800c836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	f003 0301 	and.w	r3, r3, #1
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d00c      	beq.n	800c85c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	f003 0301 	and.w	r3, r3, #1
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d007      	beq.n	800c85c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f06f 0201 	mvn.w	r2, #1
 800c854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f7f7 ff4e 	bl	80046f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c862:	2b00      	cmp	r3, #0
 800c864:	d104      	bne.n	800c870 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d00c      	beq.n	800c88a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c876:	2b00      	cmp	r3, #0
 800c878:	d007      	beq.n	800c88a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f000 faa1 	bl	800cdcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c890:	2b00      	cmp	r3, #0
 800c892:	d00c      	beq.n	800c8ae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d007      	beq.n	800c8ae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c8a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f000 fa99 	bl	800cde0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d00c      	beq.n	800c8d2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d007      	beq.n	800c8d2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c8ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	f000 f8fd 	bl	800cacc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	f003 0320 	and.w	r3, r3, #32
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d00c      	beq.n	800c8f6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	f003 0320 	and.w	r3, r3, #32
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d007      	beq.n	800c8f6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	f06f 0220 	mvn.w	r2, #32
 800c8ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f000 fa61 	bl	800cdb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c8f6:	bf00      	nop
 800c8f8:	3710      	adds	r7, #16
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}

0800c8fe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c8fe:	b580      	push	{r7, lr}
 800c900:	b084      	sub	sp, #16
 800c902:	af00      	add	r7, sp, #0
 800c904:	6078      	str	r0, [r7, #4]
 800c906:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c908:	2300      	movs	r3, #0
 800c90a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c912:	2b01      	cmp	r3, #1
 800c914:	d101      	bne.n	800c91a <HAL_TIM_ConfigClockSource+0x1c>
 800c916:	2302      	movs	r3, #2
 800c918:	e0b6      	b.n	800ca88 <HAL_TIM_ConfigClockSource+0x18a>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2201      	movs	r2, #1
 800c91e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2202      	movs	r2, #2
 800c926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	689b      	ldr	r3, [r3, #8]
 800c930:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800c938:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c93c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c944:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	68ba      	ldr	r2, [r7, #8]
 800c94c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c956:	d03e      	beq.n	800c9d6 <HAL_TIM_ConfigClockSource+0xd8>
 800c958:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c95c:	f200 8087 	bhi.w	800ca6e <HAL_TIM_ConfigClockSource+0x170>
 800c960:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c964:	f000 8086 	beq.w	800ca74 <HAL_TIM_ConfigClockSource+0x176>
 800c968:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c96c:	d87f      	bhi.n	800ca6e <HAL_TIM_ConfigClockSource+0x170>
 800c96e:	2b70      	cmp	r3, #112	@ 0x70
 800c970:	d01a      	beq.n	800c9a8 <HAL_TIM_ConfigClockSource+0xaa>
 800c972:	2b70      	cmp	r3, #112	@ 0x70
 800c974:	d87b      	bhi.n	800ca6e <HAL_TIM_ConfigClockSource+0x170>
 800c976:	2b60      	cmp	r3, #96	@ 0x60
 800c978:	d050      	beq.n	800ca1c <HAL_TIM_ConfigClockSource+0x11e>
 800c97a:	2b60      	cmp	r3, #96	@ 0x60
 800c97c:	d877      	bhi.n	800ca6e <HAL_TIM_ConfigClockSource+0x170>
 800c97e:	2b50      	cmp	r3, #80	@ 0x50
 800c980:	d03c      	beq.n	800c9fc <HAL_TIM_ConfigClockSource+0xfe>
 800c982:	2b50      	cmp	r3, #80	@ 0x50
 800c984:	d873      	bhi.n	800ca6e <HAL_TIM_ConfigClockSource+0x170>
 800c986:	2b40      	cmp	r3, #64	@ 0x40
 800c988:	d058      	beq.n	800ca3c <HAL_TIM_ConfigClockSource+0x13e>
 800c98a:	2b40      	cmp	r3, #64	@ 0x40
 800c98c:	d86f      	bhi.n	800ca6e <HAL_TIM_ConfigClockSource+0x170>
 800c98e:	2b30      	cmp	r3, #48	@ 0x30
 800c990:	d064      	beq.n	800ca5c <HAL_TIM_ConfigClockSource+0x15e>
 800c992:	2b30      	cmp	r3, #48	@ 0x30
 800c994:	d86b      	bhi.n	800ca6e <HAL_TIM_ConfigClockSource+0x170>
 800c996:	2b20      	cmp	r3, #32
 800c998:	d060      	beq.n	800ca5c <HAL_TIM_ConfigClockSource+0x15e>
 800c99a:	2b20      	cmp	r3, #32
 800c99c:	d867      	bhi.n	800ca6e <HAL_TIM_ConfigClockSource+0x170>
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d05c      	beq.n	800ca5c <HAL_TIM_ConfigClockSource+0x15e>
 800c9a2:	2b10      	cmp	r3, #16
 800c9a4:	d05a      	beq.n	800ca5c <HAL_TIM_ConfigClockSource+0x15e>
 800c9a6:	e062      	b.n	800ca6e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c9b8:	f000 f97e 	bl	800ccb8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	689b      	ldr	r3, [r3, #8]
 800c9c2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c9ca:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	68ba      	ldr	r2, [r7, #8]
 800c9d2:	609a      	str	r2, [r3, #8]
      break;
 800c9d4:	e04f      	b.n	800ca76 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c9e6:	f000 f967 	bl	800ccb8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	689a      	ldr	r2, [r3, #8]
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c9f8:	609a      	str	r2, [r3, #8]
      break;
 800c9fa:	e03c      	b.n	800ca76 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca08:	461a      	mov	r2, r3
 800ca0a:	f000 f8d9 	bl	800cbc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	2150      	movs	r1, #80	@ 0x50
 800ca14:	4618      	mov	r0, r3
 800ca16:	f000 f932 	bl	800cc7e <TIM_ITRx_SetConfig>
      break;
 800ca1a:	e02c      	b.n	800ca76 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca28:	461a      	mov	r2, r3
 800ca2a:	f000 f8f8 	bl	800cc1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	2160      	movs	r1, #96	@ 0x60
 800ca34:	4618      	mov	r0, r3
 800ca36:	f000 f922 	bl	800cc7e <TIM_ITRx_SetConfig>
      break;
 800ca3a:	e01c      	b.n	800ca76 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca48:	461a      	mov	r2, r3
 800ca4a:	f000 f8b9 	bl	800cbc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	2140      	movs	r1, #64	@ 0x40
 800ca54:	4618      	mov	r0, r3
 800ca56:	f000 f912 	bl	800cc7e <TIM_ITRx_SetConfig>
      break;
 800ca5a:	e00c      	b.n	800ca76 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681a      	ldr	r2, [r3, #0]
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	4619      	mov	r1, r3
 800ca66:	4610      	mov	r0, r2
 800ca68:	f000 f909 	bl	800cc7e <TIM_ITRx_SetConfig>
      break;
 800ca6c:	e003      	b.n	800ca76 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800ca6e:	2301      	movs	r3, #1
 800ca70:	73fb      	strb	r3, [r7, #15]
      break;
 800ca72:	e000      	b.n	800ca76 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800ca74:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2201      	movs	r2, #1
 800ca7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2200      	movs	r2, #0
 800ca82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ca86:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca88:	4618      	mov	r0, r3
 800ca8a:	3710      	adds	r7, #16
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}

0800ca90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ca90:	b480      	push	{r7}
 800ca92:	b083      	sub	sp, #12
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ca98:	bf00      	nop
 800ca9a:	370c      	adds	r7, #12
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa2:	4770      	bx	lr

0800caa4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800caa4:	b480      	push	{r7}
 800caa6:	b083      	sub	sp, #12
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800caac:	bf00      	nop
 800caae:	370c      	adds	r7, #12
 800cab0:	46bd      	mov	sp, r7
 800cab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab6:	4770      	bx	lr

0800cab8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cab8:	b480      	push	{r7}
 800caba:	b083      	sub	sp, #12
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cac0:	bf00      	nop
 800cac2:	370c      	adds	r7, #12
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr

0800cacc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cacc:	b480      	push	{r7}
 800cace:	b083      	sub	sp, #12
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cad4:	bf00      	nop
 800cad6:	370c      	adds	r7, #12
 800cad8:	46bd      	mov	sp, r7
 800cada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cade:	4770      	bx	lr

0800cae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cae0:	b480      	push	{r7}
 800cae2:	b085      	sub	sp, #20
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
 800cae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	4a30      	ldr	r2, [pc, #192]	@ (800cbb4 <TIM_Base_SetConfig+0xd4>)
 800caf4:	4293      	cmp	r3, r2
 800caf6:	d003      	beq.n	800cb00 <TIM_Base_SetConfig+0x20>
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cafe:	d108      	bne.n	800cb12 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	685b      	ldr	r3, [r3, #4]
 800cb0c:	68fa      	ldr	r2, [r7, #12]
 800cb0e:	4313      	orrs	r3, r2
 800cb10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	4a27      	ldr	r2, [pc, #156]	@ (800cbb4 <TIM_Base_SetConfig+0xd4>)
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d00b      	beq.n	800cb32 <TIM_Base_SetConfig+0x52>
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb20:	d007      	beq.n	800cb32 <TIM_Base_SetConfig+0x52>
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	4a24      	ldr	r2, [pc, #144]	@ (800cbb8 <TIM_Base_SetConfig+0xd8>)
 800cb26:	4293      	cmp	r3, r2
 800cb28:	d003      	beq.n	800cb32 <TIM_Base_SetConfig+0x52>
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	4a23      	ldr	r2, [pc, #140]	@ (800cbbc <TIM_Base_SetConfig+0xdc>)
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	d108      	bne.n	800cb44 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cb38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	68db      	ldr	r3, [r3, #12]
 800cb3e:	68fa      	ldr	r2, [r7, #12]
 800cb40:	4313      	orrs	r3, r2
 800cb42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	695b      	ldr	r3, [r3, #20]
 800cb4e:	4313      	orrs	r3, r2
 800cb50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	68fa      	ldr	r2, [r7, #12]
 800cb56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	689a      	ldr	r2, [r3, #8]
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	681a      	ldr	r2, [r3, #0]
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	4a12      	ldr	r2, [pc, #72]	@ (800cbb4 <TIM_Base_SetConfig+0xd4>)
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	d007      	beq.n	800cb80 <TIM_Base_SetConfig+0xa0>
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	4a11      	ldr	r2, [pc, #68]	@ (800cbb8 <TIM_Base_SetConfig+0xd8>)
 800cb74:	4293      	cmp	r3, r2
 800cb76:	d003      	beq.n	800cb80 <TIM_Base_SetConfig+0xa0>
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	4a10      	ldr	r2, [pc, #64]	@ (800cbbc <TIM_Base_SetConfig+0xdc>)
 800cb7c:	4293      	cmp	r3, r2
 800cb7e:	d103      	bne.n	800cb88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	691a      	ldr	r2, [r3, #16]
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2201      	movs	r2, #1
 800cb8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	691b      	ldr	r3, [r3, #16]
 800cb92:	f003 0301 	and.w	r3, r3, #1
 800cb96:	2b01      	cmp	r3, #1
 800cb98:	d105      	bne.n	800cba6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	691b      	ldr	r3, [r3, #16]
 800cb9e:	f023 0201 	bic.w	r2, r3, #1
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	611a      	str	r2, [r3, #16]
  }
}
 800cba6:	bf00      	nop
 800cba8:	3714      	adds	r7, #20
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb0:	4770      	bx	lr
 800cbb2:	bf00      	nop
 800cbb4:	40012c00 	.word	0x40012c00
 800cbb8:	40014400 	.word	0x40014400
 800cbbc:	40014800 	.word	0x40014800

0800cbc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	b087      	sub	sp, #28
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	60f8      	str	r0, [r7, #12]
 800cbc8:	60b9      	str	r1, [r7, #8]
 800cbca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	6a1b      	ldr	r3, [r3, #32]
 800cbd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	6a1b      	ldr	r3, [r3, #32]
 800cbd6:	f023 0201 	bic.w	r2, r3, #1
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	699b      	ldr	r3, [r3, #24]
 800cbe2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cbe4:	693b      	ldr	r3, [r7, #16]
 800cbe6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cbea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	011b      	lsls	r3, r3, #4
 800cbf0:	693a      	ldr	r2, [r7, #16]
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cbf6:	697b      	ldr	r3, [r7, #20]
 800cbf8:	f023 030a 	bic.w	r3, r3, #10
 800cbfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cbfe:	697a      	ldr	r2, [r7, #20]
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	4313      	orrs	r3, r2
 800cc04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	693a      	ldr	r2, [r7, #16]
 800cc0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	697a      	ldr	r2, [r7, #20]
 800cc10:	621a      	str	r2, [r3, #32]
}
 800cc12:	bf00      	nop
 800cc14:	371c      	adds	r7, #28
 800cc16:	46bd      	mov	sp, r7
 800cc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1c:	4770      	bx	lr

0800cc1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc1e:	b480      	push	{r7}
 800cc20:	b087      	sub	sp, #28
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	60f8      	str	r0, [r7, #12]
 800cc26:	60b9      	str	r1, [r7, #8]
 800cc28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	6a1b      	ldr	r3, [r3, #32]
 800cc2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	6a1b      	ldr	r3, [r3, #32]
 800cc34:	f023 0210 	bic.w	r2, r3, #16
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	699b      	ldr	r3, [r3, #24]
 800cc40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800cc48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	031b      	lsls	r3, r3, #12
 800cc4e:	693a      	ldr	r2, [r7, #16]
 800cc50:	4313      	orrs	r3, r2
 800cc52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800cc5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	011b      	lsls	r3, r3, #4
 800cc60:	697a      	ldr	r2, [r7, #20]
 800cc62:	4313      	orrs	r3, r2
 800cc64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	693a      	ldr	r2, [r7, #16]
 800cc6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	697a      	ldr	r2, [r7, #20]
 800cc70:	621a      	str	r2, [r3, #32]
}
 800cc72:	bf00      	nop
 800cc74:	371c      	adds	r7, #28
 800cc76:	46bd      	mov	sp, r7
 800cc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7c:	4770      	bx	lr

0800cc7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cc7e:	b480      	push	{r7}
 800cc80:	b085      	sub	sp, #20
 800cc82:	af00      	add	r7, sp, #0
 800cc84:	6078      	str	r0, [r7, #4]
 800cc86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	689b      	ldr	r3, [r3, #8]
 800cc8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800cc94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cc9a:	683a      	ldr	r2, [r7, #0]
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	4313      	orrs	r3, r2
 800cca0:	f043 0307 	orr.w	r3, r3, #7
 800cca4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	68fa      	ldr	r2, [r7, #12]
 800ccaa:	609a      	str	r2, [r3, #8]
}
 800ccac:	bf00      	nop
 800ccae:	3714      	adds	r7, #20
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb6:	4770      	bx	lr

0800ccb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ccb8:	b480      	push	{r7}
 800ccba:	b087      	sub	sp, #28
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	60f8      	str	r0, [r7, #12]
 800ccc0:	60b9      	str	r1, [r7, #8]
 800ccc2:	607a      	str	r2, [r7, #4]
 800ccc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	689b      	ldr	r3, [r3, #8]
 800ccca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cccc:	697b      	ldr	r3, [r7, #20]
 800ccce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ccd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	021a      	lsls	r2, r3, #8
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	431a      	orrs	r2, r3
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	4313      	orrs	r3, r2
 800cce0:	697a      	ldr	r2, [r7, #20]
 800cce2:	4313      	orrs	r3, r2
 800cce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	697a      	ldr	r2, [r7, #20]
 800ccea:	609a      	str	r2, [r3, #8]
}
 800ccec:	bf00      	nop
 800ccee:	371c      	adds	r7, #28
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf6:	4770      	bx	lr

0800ccf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b085      	sub	sp, #20
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cd08:	2b01      	cmp	r3, #1
 800cd0a:	d101      	bne.n	800cd10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cd0c:	2302      	movs	r3, #2
 800cd0e:	e04a      	b.n	800cda6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2201      	movs	r2, #1
 800cd14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2202      	movs	r2, #2
 800cd1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	685b      	ldr	r3, [r3, #4]
 800cd26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	689b      	ldr	r3, [r3, #8]
 800cd2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	4a1f      	ldr	r2, [pc, #124]	@ (800cdb4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800cd36:	4293      	cmp	r3, r2
 800cd38:	d108      	bne.n	800cd4c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800cd40:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	685b      	ldr	r3, [r3, #4]
 800cd46:	68fa      	ldr	r2, [r7, #12]
 800cd48:	4313      	orrs	r3, r2
 800cd4a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	68fa      	ldr	r2, [r7, #12]
 800cd5a:	4313      	orrs	r3, r2
 800cd5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	68fa      	ldr	r2, [r7, #12]
 800cd64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	4a12      	ldr	r2, [pc, #72]	@ (800cdb4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	d004      	beq.n	800cd7a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd78:	d10c      	bne.n	800cd94 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cd7a:	68bb      	ldr	r3, [r7, #8]
 800cd7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cd80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	689b      	ldr	r3, [r3, #8]
 800cd86:	68ba      	ldr	r2, [r7, #8]
 800cd88:	4313      	orrs	r3, r2
 800cd8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	68ba      	ldr	r2, [r7, #8]
 800cd92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2201      	movs	r2, #1
 800cd98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2200      	movs	r2, #0
 800cda0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cda4:	2300      	movs	r3, #0
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3714      	adds	r7, #20
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb0:	4770      	bx	lr
 800cdb2:	bf00      	nop
 800cdb4:	40012c00 	.word	0x40012c00

0800cdb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cdb8:	b480      	push	{r7}
 800cdba:	b083      	sub	sp, #12
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cdc0:	bf00      	nop
 800cdc2:	370c      	adds	r7, #12
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdca:	4770      	bx	lr

0800cdcc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cdcc:	b480      	push	{r7}
 800cdce:	b083      	sub	sp, #12
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cdd4:	bf00      	nop
 800cdd6:	370c      	adds	r7, #12
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdde:	4770      	bx	lr

0800cde0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cde0:	b480      	push	{r7}
 800cde2:	b083      	sub	sp, #12
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cde8:	bf00      	nop
 800cdea:	370c      	adds	r7, #12
 800cdec:	46bd      	mov	sp, r7
 800cdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf2:	4770      	bx	lr

0800cdf4 <LL_RCC_GetUSARTClockSource>:
{
 800cdf4:	b480      	push	{r7}
 800cdf6:	b083      	sub	sp, #12
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800cdfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ce00:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	4013      	ands	r3, r2
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	370c      	adds	r7, #12
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce12:	4770      	bx	lr

0800ce14 <LL_RCC_GetLPUARTClockSource>:
{
 800ce14:	b480      	push	{r7}
 800ce16:	b083      	sub	sp, #12
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800ce1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ce20:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	4013      	ands	r3, r2
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	370c      	adds	r7, #12
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce32:	4770      	bx	lr

0800ce34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b082      	sub	sp, #8
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d101      	bne.n	800ce46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ce42:	2301      	movs	r3, #1
 800ce44:	e042      	b.n	800cecc <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d106      	bne.n	800ce5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2200      	movs	r2, #0
 800ce54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ce58:	6878      	ldr	r0, [r7, #4]
 800ce5a:	f000 f83b 	bl	800ced4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	2224      	movs	r2, #36	@ 0x24
 800ce62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	681a      	ldr	r2, [r3, #0]
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f022 0201 	bic.w	r2, r2, #1
 800ce74:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d002      	beq.n	800ce84 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f000 fae8 	bl	800d454 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f000 f8bd 	bl	800d004 <UART_SetConfig>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	2b01      	cmp	r3, #1
 800ce8e:	d101      	bne.n	800ce94 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ce90:	2301      	movs	r3, #1
 800ce92:	e01b      	b.n	800cecc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	685a      	ldr	r2, [r3, #4]
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cea2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	689a      	ldr	r2, [r3, #8]
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ceb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	681a      	ldr	r2, [r3, #0]
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f042 0201 	orr.w	r2, r2, #1
 800cec2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cec4:	6878      	ldr	r0, [r7, #4]
 800cec6:	f000 fb67 	bl	800d598 <UART_CheckIdleState>
 800ceca:	4603      	mov	r3, r0
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3708      	adds	r7, #8
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}

0800ced4 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800ced4:	b480      	push	{r7}
 800ced6:	b083      	sub	sp, #12
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800cedc:	bf00      	nop
 800cede:	370c      	adds	r7, #12
 800cee0:	46bd      	mov	sp, r7
 800cee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee6:	4770      	bx	lr

0800cee8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b08a      	sub	sp, #40	@ 0x28
 800ceec:	af02      	add	r7, sp, #8
 800ceee:	60f8      	str	r0, [r7, #12]
 800cef0:	60b9      	str	r1, [r7, #8]
 800cef2:	603b      	str	r3, [r7, #0]
 800cef4:	4613      	mov	r3, r2
 800cef6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cefe:	2b20      	cmp	r3, #32
 800cf00:	d17b      	bne.n	800cffa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d002      	beq.n	800cf0e <HAL_UART_Transmit+0x26>
 800cf08:	88fb      	ldrh	r3, [r7, #6]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d101      	bne.n	800cf12 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800cf0e:	2301      	movs	r3, #1
 800cf10:	e074      	b.n	800cffc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	2200      	movs	r2, #0
 800cf16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	2221      	movs	r2, #33	@ 0x21
 800cf1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cf22:	f7f8 fbe3 	bl	80056ec <HAL_GetTick>
 800cf26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	88fa      	ldrh	r2, [r7, #6]
 800cf2c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	88fa      	ldrh	r2, [r7, #6]
 800cf34:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	689b      	ldr	r3, [r3, #8]
 800cf3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cf40:	d108      	bne.n	800cf54 <HAL_UART_Transmit+0x6c>
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	691b      	ldr	r3, [r3, #16]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d104      	bne.n	800cf54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	61bb      	str	r3, [r7, #24]
 800cf52:	e003      	b.n	800cf5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cf5c:	e030      	b.n	800cfc0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	9300      	str	r3, [sp, #0]
 800cf62:	697b      	ldr	r3, [r7, #20]
 800cf64:	2200      	movs	r2, #0
 800cf66:	2180      	movs	r1, #128	@ 0x80
 800cf68:	68f8      	ldr	r0, [r7, #12]
 800cf6a:	f000 fbbf 	bl	800d6ec <UART_WaitOnFlagUntilTimeout>
 800cf6e:	4603      	mov	r3, r0
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d005      	beq.n	800cf80 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	2220      	movs	r2, #32
 800cf78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800cf7c:	2303      	movs	r3, #3
 800cf7e:	e03d      	b.n	800cffc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800cf80:	69fb      	ldr	r3, [r7, #28]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d10b      	bne.n	800cf9e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cf86:	69bb      	ldr	r3, [r7, #24]
 800cf88:	881b      	ldrh	r3, [r3, #0]
 800cf8a:	461a      	mov	r2, r3
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cf94:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800cf96:	69bb      	ldr	r3, [r7, #24]
 800cf98:	3302      	adds	r3, #2
 800cf9a:	61bb      	str	r3, [r7, #24]
 800cf9c:	e007      	b.n	800cfae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cf9e:	69fb      	ldr	r3, [r7, #28]
 800cfa0:	781a      	ldrb	r2, [r3, #0]
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800cfa8:	69fb      	ldr	r3, [r7, #28]
 800cfaa:	3301      	adds	r3, #1
 800cfac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cfb4:	b29b      	uxth	r3, r3
 800cfb6:	3b01      	subs	r3, #1
 800cfb8:	b29a      	uxth	r2, r3
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cfc6:	b29b      	uxth	r3, r3
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d1c8      	bne.n	800cf5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	9300      	str	r3, [sp, #0]
 800cfd0:	697b      	ldr	r3, [r7, #20]
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	2140      	movs	r1, #64	@ 0x40
 800cfd6:	68f8      	ldr	r0, [r7, #12]
 800cfd8:	f000 fb88 	bl	800d6ec <UART_WaitOnFlagUntilTimeout>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d005      	beq.n	800cfee <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	2220      	movs	r2, #32
 800cfe6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800cfea:	2303      	movs	r3, #3
 800cfec:	e006      	b.n	800cffc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	2220      	movs	r2, #32
 800cff2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800cff6:	2300      	movs	r3, #0
 800cff8:	e000      	b.n	800cffc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800cffa:	2302      	movs	r3, #2
  }
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	3720      	adds	r7, #32
 800d000:	46bd      	mov	sp, r7
 800d002:	bd80      	pop	{r7, pc}

0800d004 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d004:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d008:	b08c      	sub	sp, #48	@ 0x30
 800d00a:	af00      	add	r7, sp, #0
 800d00c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d00e:	2300      	movs	r3, #0
 800d010:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d014:	697b      	ldr	r3, [r7, #20]
 800d016:	689a      	ldr	r2, [r3, #8]
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	691b      	ldr	r3, [r3, #16]
 800d01c:	431a      	orrs	r2, r3
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	695b      	ldr	r3, [r3, #20]
 800d022:	431a      	orrs	r2, r3
 800d024:	697b      	ldr	r3, [r7, #20]
 800d026:	69db      	ldr	r3, [r3, #28]
 800d028:	4313      	orrs	r3, r2
 800d02a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	681a      	ldr	r2, [r3, #0]
 800d032:	4baf      	ldr	r3, [pc, #700]	@ (800d2f0 <UART_SetConfig+0x2ec>)
 800d034:	4013      	ands	r3, r2
 800d036:	697a      	ldr	r2, [r7, #20]
 800d038:	6812      	ldr	r2, [r2, #0]
 800d03a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d03c:	430b      	orrs	r3, r1
 800d03e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d040:	697b      	ldr	r3, [r7, #20]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	685b      	ldr	r3, [r3, #4]
 800d046:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d04a:	697b      	ldr	r3, [r7, #20]
 800d04c:	68da      	ldr	r2, [r3, #12]
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	430a      	orrs	r2, r1
 800d054:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	699b      	ldr	r3, [r3, #24]
 800d05a:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	4aa4      	ldr	r2, [pc, #656]	@ (800d2f4 <UART_SetConfig+0x2f0>)
 800d062:	4293      	cmp	r3, r2
 800d064:	d004      	beq.n	800d070 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d066:	697b      	ldr	r3, [r7, #20]
 800d068:	6a1b      	ldr	r3, [r3, #32]
 800d06a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d06c:	4313      	orrs	r3, r2
 800d06e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	689b      	ldr	r3, [r3, #8]
 800d076:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800d07a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800d07e:	697a      	ldr	r2, [r7, #20]
 800d080:	6812      	ldr	r2, [r2, #0]
 800d082:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d084:	430b      	orrs	r3, r1
 800d086:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d088:	697b      	ldr	r3, [r7, #20]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d08e:	f023 010f 	bic.w	r1, r3, #15
 800d092:	697b      	ldr	r3, [r7, #20]
 800d094:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d096:	697b      	ldr	r3, [r7, #20]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	430a      	orrs	r2, r1
 800d09c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	4a95      	ldr	r2, [pc, #596]	@ (800d2f8 <UART_SetConfig+0x2f4>)
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d125      	bne.n	800d0f4 <UART_SetConfig+0xf0>
 800d0a8:	2003      	movs	r0, #3
 800d0aa:	f7ff fea3 	bl	800cdf4 <LL_RCC_GetUSARTClockSource>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	2b03      	cmp	r3, #3
 800d0b2:	d81b      	bhi.n	800d0ec <UART_SetConfig+0xe8>
 800d0b4:	a201      	add	r2, pc, #4	@ (adr r2, 800d0bc <UART_SetConfig+0xb8>)
 800d0b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0ba:	bf00      	nop
 800d0bc:	0800d0cd 	.word	0x0800d0cd
 800d0c0:	0800d0dd 	.word	0x0800d0dd
 800d0c4:	0800d0d5 	.word	0x0800d0d5
 800d0c8:	0800d0e5 	.word	0x0800d0e5
 800d0cc:	2301      	movs	r3, #1
 800d0ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d0d2:	e042      	b.n	800d15a <UART_SetConfig+0x156>
 800d0d4:	2302      	movs	r3, #2
 800d0d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d0da:	e03e      	b.n	800d15a <UART_SetConfig+0x156>
 800d0dc:	2304      	movs	r3, #4
 800d0de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d0e2:	e03a      	b.n	800d15a <UART_SetConfig+0x156>
 800d0e4:	2308      	movs	r3, #8
 800d0e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d0ea:	e036      	b.n	800d15a <UART_SetConfig+0x156>
 800d0ec:	2310      	movs	r3, #16
 800d0ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d0f2:	e032      	b.n	800d15a <UART_SetConfig+0x156>
 800d0f4:	697b      	ldr	r3, [r7, #20]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	4a7e      	ldr	r2, [pc, #504]	@ (800d2f4 <UART_SetConfig+0x2f0>)
 800d0fa:	4293      	cmp	r3, r2
 800d0fc:	d12a      	bne.n	800d154 <UART_SetConfig+0x150>
 800d0fe:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800d102:	f7ff fe87 	bl	800ce14 <LL_RCC_GetLPUARTClockSource>
 800d106:	4603      	mov	r3, r0
 800d108:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d10c:	d01a      	beq.n	800d144 <UART_SetConfig+0x140>
 800d10e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d112:	d81b      	bhi.n	800d14c <UART_SetConfig+0x148>
 800d114:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d118:	d00c      	beq.n	800d134 <UART_SetConfig+0x130>
 800d11a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d11e:	d815      	bhi.n	800d14c <UART_SetConfig+0x148>
 800d120:	2b00      	cmp	r3, #0
 800d122:	d003      	beq.n	800d12c <UART_SetConfig+0x128>
 800d124:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d128:	d008      	beq.n	800d13c <UART_SetConfig+0x138>
 800d12a:	e00f      	b.n	800d14c <UART_SetConfig+0x148>
 800d12c:	2300      	movs	r3, #0
 800d12e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d132:	e012      	b.n	800d15a <UART_SetConfig+0x156>
 800d134:	2302      	movs	r3, #2
 800d136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d13a:	e00e      	b.n	800d15a <UART_SetConfig+0x156>
 800d13c:	2304      	movs	r3, #4
 800d13e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d142:	e00a      	b.n	800d15a <UART_SetConfig+0x156>
 800d144:	2308      	movs	r3, #8
 800d146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d14a:	e006      	b.n	800d15a <UART_SetConfig+0x156>
 800d14c:	2310      	movs	r3, #16
 800d14e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d152:	e002      	b.n	800d15a <UART_SetConfig+0x156>
 800d154:	2310      	movs	r3, #16
 800d156:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	4a65      	ldr	r2, [pc, #404]	@ (800d2f4 <UART_SetConfig+0x2f0>)
 800d160:	4293      	cmp	r3, r2
 800d162:	f040 8097 	bne.w	800d294 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d166:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d16a:	2b08      	cmp	r3, #8
 800d16c:	d823      	bhi.n	800d1b6 <UART_SetConfig+0x1b2>
 800d16e:	a201      	add	r2, pc, #4	@ (adr r2, 800d174 <UART_SetConfig+0x170>)
 800d170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d174:	0800d199 	.word	0x0800d199
 800d178:	0800d1b7 	.word	0x0800d1b7
 800d17c:	0800d1a1 	.word	0x0800d1a1
 800d180:	0800d1b7 	.word	0x0800d1b7
 800d184:	0800d1a7 	.word	0x0800d1a7
 800d188:	0800d1b7 	.word	0x0800d1b7
 800d18c:	0800d1b7 	.word	0x0800d1b7
 800d190:	0800d1b7 	.word	0x0800d1b7
 800d194:	0800d1af 	.word	0x0800d1af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d198:	f7fe fd00 	bl	800bb9c <HAL_RCC_GetPCLK1Freq>
 800d19c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d19e:	e010      	b.n	800d1c2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d1a0:	4b56      	ldr	r3, [pc, #344]	@ (800d2fc <UART_SetConfig+0x2f8>)
 800d1a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d1a4:	e00d      	b.n	800d1c2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d1a6:	f7fe fc79 	bl	800ba9c <HAL_RCC_GetSysClockFreq>
 800d1aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d1ac:	e009      	b.n	800d1c2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d1ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d1b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d1b4:	e005      	b.n	800d1c2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d1c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d1c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	f000 812b 	beq.w	800d420 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1ce:	4a4c      	ldr	r2, [pc, #304]	@ (800d300 <UART_SetConfig+0x2fc>)
 800d1d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d1d4:	461a      	mov	r2, r3
 800d1d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d1dc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d1de:	697b      	ldr	r3, [r7, #20]
 800d1e0:	685a      	ldr	r2, [r3, #4]
 800d1e2:	4613      	mov	r3, r2
 800d1e4:	005b      	lsls	r3, r3, #1
 800d1e6:	4413      	add	r3, r2
 800d1e8:	69ba      	ldr	r2, [r7, #24]
 800d1ea:	429a      	cmp	r2, r3
 800d1ec:	d305      	bcc.n	800d1fa <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	685b      	ldr	r3, [r3, #4]
 800d1f2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d1f4:	69ba      	ldr	r2, [r7, #24]
 800d1f6:	429a      	cmp	r2, r3
 800d1f8:	d903      	bls.n	800d202 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d200:	e10e      	b.n	800d420 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d204:	2200      	movs	r2, #0
 800d206:	60bb      	str	r3, [r7, #8]
 800d208:	60fa      	str	r2, [r7, #12]
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d20e:	4a3c      	ldr	r2, [pc, #240]	@ (800d300 <UART_SetConfig+0x2fc>)
 800d210:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d214:	b29b      	uxth	r3, r3
 800d216:	2200      	movs	r2, #0
 800d218:	603b      	str	r3, [r7, #0]
 800d21a:	607a      	str	r2, [r7, #4]
 800d21c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d220:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d224:	f7f3 fce8 	bl	8000bf8 <__aeabi_uldivmod>
 800d228:	4602      	mov	r2, r0
 800d22a:	460b      	mov	r3, r1
 800d22c:	4610      	mov	r0, r2
 800d22e:	4619      	mov	r1, r3
 800d230:	f04f 0200 	mov.w	r2, #0
 800d234:	f04f 0300 	mov.w	r3, #0
 800d238:	020b      	lsls	r3, r1, #8
 800d23a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d23e:	0202      	lsls	r2, r0, #8
 800d240:	6979      	ldr	r1, [r7, #20]
 800d242:	6849      	ldr	r1, [r1, #4]
 800d244:	0849      	lsrs	r1, r1, #1
 800d246:	2000      	movs	r0, #0
 800d248:	460c      	mov	r4, r1
 800d24a:	4605      	mov	r5, r0
 800d24c:	eb12 0804 	adds.w	r8, r2, r4
 800d250:	eb43 0905 	adc.w	r9, r3, r5
 800d254:	697b      	ldr	r3, [r7, #20]
 800d256:	685b      	ldr	r3, [r3, #4]
 800d258:	2200      	movs	r2, #0
 800d25a:	469a      	mov	sl, r3
 800d25c:	4693      	mov	fp, r2
 800d25e:	4652      	mov	r2, sl
 800d260:	465b      	mov	r3, fp
 800d262:	4640      	mov	r0, r8
 800d264:	4649      	mov	r1, r9
 800d266:	f7f3 fcc7 	bl	8000bf8 <__aeabi_uldivmod>
 800d26a:	4602      	mov	r2, r0
 800d26c:	460b      	mov	r3, r1
 800d26e:	4613      	mov	r3, r2
 800d270:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d272:	6a3b      	ldr	r3, [r7, #32]
 800d274:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d278:	d308      	bcc.n	800d28c <UART_SetConfig+0x288>
 800d27a:	6a3b      	ldr	r3, [r7, #32]
 800d27c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d280:	d204      	bcs.n	800d28c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	6a3a      	ldr	r2, [r7, #32]
 800d288:	60da      	str	r2, [r3, #12]
 800d28a:	e0c9      	b.n	800d420 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800d28c:	2301      	movs	r3, #1
 800d28e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d292:	e0c5      	b.n	800d420 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d294:	697b      	ldr	r3, [r7, #20]
 800d296:	69db      	ldr	r3, [r3, #28]
 800d298:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d29c:	d16d      	bne.n	800d37a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800d29e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d2a2:	3b01      	subs	r3, #1
 800d2a4:	2b07      	cmp	r3, #7
 800d2a6:	d82d      	bhi.n	800d304 <UART_SetConfig+0x300>
 800d2a8:	a201      	add	r2, pc, #4	@ (adr r2, 800d2b0 <UART_SetConfig+0x2ac>)
 800d2aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2ae:	bf00      	nop
 800d2b0:	0800d2d1 	.word	0x0800d2d1
 800d2b4:	0800d2d9 	.word	0x0800d2d9
 800d2b8:	0800d305 	.word	0x0800d305
 800d2bc:	0800d2df 	.word	0x0800d2df
 800d2c0:	0800d305 	.word	0x0800d305
 800d2c4:	0800d305 	.word	0x0800d305
 800d2c8:	0800d305 	.word	0x0800d305
 800d2cc:	0800d2e7 	.word	0x0800d2e7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d2d0:	f7fe fc7a 	bl	800bbc8 <HAL_RCC_GetPCLK2Freq>
 800d2d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d2d6:	e01b      	b.n	800d310 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d2d8:	4b08      	ldr	r3, [pc, #32]	@ (800d2fc <UART_SetConfig+0x2f8>)
 800d2da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d2dc:	e018      	b.n	800d310 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d2de:	f7fe fbdd 	bl	800ba9c <HAL_RCC_GetSysClockFreq>
 800d2e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d2e4:	e014      	b.n	800d310 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d2e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d2ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d2ec:	e010      	b.n	800d310 <UART_SetConfig+0x30c>
 800d2ee:	bf00      	nop
 800d2f0:	cfff69f3 	.word	0xcfff69f3
 800d2f4:	40008000 	.word	0x40008000
 800d2f8:	40013800 	.word	0x40013800
 800d2fc:	00f42400 	.word	0x00f42400
 800d300:	08015444 	.word	0x08015444
      default:
        pclk = 0U;
 800d304:	2300      	movs	r3, #0
 800d306:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d308:	2301      	movs	r3, #1
 800d30a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d30e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d312:	2b00      	cmp	r3, #0
 800d314:	f000 8084 	beq.w	800d420 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d318:	697b      	ldr	r3, [r7, #20]
 800d31a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d31c:	4a4b      	ldr	r2, [pc, #300]	@ (800d44c <UART_SetConfig+0x448>)
 800d31e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d322:	461a      	mov	r2, r3
 800d324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d326:	fbb3 f3f2 	udiv	r3, r3, r2
 800d32a:	005a      	lsls	r2, r3, #1
 800d32c:	697b      	ldr	r3, [r7, #20]
 800d32e:	685b      	ldr	r3, [r3, #4]
 800d330:	085b      	lsrs	r3, r3, #1
 800d332:	441a      	add	r2, r3
 800d334:	697b      	ldr	r3, [r7, #20]
 800d336:	685b      	ldr	r3, [r3, #4]
 800d338:	fbb2 f3f3 	udiv	r3, r2, r3
 800d33c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d33e:	6a3b      	ldr	r3, [r7, #32]
 800d340:	2b0f      	cmp	r3, #15
 800d342:	d916      	bls.n	800d372 <UART_SetConfig+0x36e>
 800d344:	6a3b      	ldr	r3, [r7, #32]
 800d346:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d34a:	d212      	bcs.n	800d372 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d34c:	6a3b      	ldr	r3, [r7, #32]
 800d34e:	b29b      	uxth	r3, r3
 800d350:	f023 030f 	bic.w	r3, r3, #15
 800d354:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d356:	6a3b      	ldr	r3, [r7, #32]
 800d358:	085b      	lsrs	r3, r3, #1
 800d35a:	b29b      	uxth	r3, r3
 800d35c:	f003 0307 	and.w	r3, r3, #7
 800d360:	b29a      	uxth	r2, r3
 800d362:	8bfb      	ldrh	r3, [r7, #30]
 800d364:	4313      	orrs	r3, r2
 800d366:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	8bfa      	ldrh	r2, [r7, #30]
 800d36e:	60da      	str	r2, [r3, #12]
 800d370:	e056      	b.n	800d420 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800d372:	2301      	movs	r3, #1
 800d374:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d378:	e052      	b.n	800d420 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d37a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d37e:	3b01      	subs	r3, #1
 800d380:	2b07      	cmp	r3, #7
 800d382:	d822      	bhi.n	800d3ca <UART_SetConfig+0x3c6>
 800d384:	a201      	add	r2, pc, #4	@ (adr r2, 800d38c <UART_SetConfig+0x388>)
 800d386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d38a:	bf00      	nop
 800d38c:	0800d3ad 	.word	0x0800d3ad
 800d390:	0800d3b5 	.word	0x0800d3b5
 800d394:	0800d3cb 	.word	0x0800d3cb
 800d398:	0800d3bb 	.word	0x0800d3bb
 800d39c:	0800d3cb 	.word	0x0800d3cb
 800d3a0:	0800d3cb 	.word	0x0800d3cb
 800d3a4:	0800d3cb 	.word	0x0800d3cb
 800d3a8:	0800d3c3 	.word	0x0800d3c3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d3ac:	f7fe fc0c 	bl	800bbc8 <HAL_RCC_GetPCLK2Freq>
 800d3b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d3b2:	e010      	b.n	800d3d6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d3b4:	4b26      	ldr	r3, [pc, #152]	@ (800d450 <UART_SetConfig+0x44c>)
 800d3b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d3b8:	e00d      	b.n	800d3d6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d3ba:	f7fe fb6f 	bl	800ba9c <HAL_RCC_GetSysClockFreq>
 800d3be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d3c0:	e009      	b.n	800d3d6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d3c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d3c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d3c8:	e005      	b.n	800d3d6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d3d4:	bf00      	nop
    }

    if (pclk != 0U)
 800d3d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d021      	beq.n	800d420 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d3dc:	697b      	ldr	r3, [r7, #20]
 800d3de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3e0:	4a1a      	ldr	r2, [pc, #104]	@ (800d44c <UART_SetConfig+0x448>)
 800d3e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d3e6:	461a      	mov	r2, r3
 800d3e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ea:	fbb3 f2f2 	udiv	r2, r3, r2
 800d3ee:	697b      	ldr	r3, [r7, #20]
 800d3f0:	685b      	ldr	r3, [r3, #4]
 800d3f2:	085b      	lsrs	r3, r3, #1
 800d3f4:	441a      	add	r2, r3
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	685b      	ldr	r3, [r3, #4]
 800d3fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d400:	6a3b      	ldr	r3, [r7, #32]
 800d402:	2b0f      	cmp	r3, #15
 800d404:	d909      	bls.n	800d41a <UART_SetConfig+0x416>
 800d406:	6a3b      	ldr	r3, [r7, #32]
 800d408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d40c:	d205      	bcs.n	800d41a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d40e:	6a3b      	ldr	r3, [r7, #32]
 800d410:	b29a      	uxth	r2, r3
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	60da      	str	r2, [r3, #12]
 800d418:	e002      	b.n	800d420 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800d41a:	2301      	movs	r3, #1
 800d41c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	2201      	movs	r2, #1
 800d424:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d428:	697b      	ldr	r3, [r7, #20]
 800d42a:	2201      	movs	r2, #1
 800d42c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d430:	697b      	ldr	r3, [r7, #20]
 800d432:	2200      	movs	r2, #0
 800d434:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	2200      	movs	r2, #0
 800d43a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d43c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800d440:	4618      	mov	r0, r3
 800d442:	3730      	adds	r7, #48	@ 0x30
 800d444:	46bd      	mov	sp, r7
 800d446:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d44a:	bf00      	nop
 800d44c:	08015444 	.word	0x08015444
 800d450:	00f42400 	.word	0x00f42400

0800d454 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d454:	b480      	push	{r7}
 800d456:	b083      	sub	sp, #12
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d460:	f003 0308 	and.w	r3, r3, #8
 800d464:	2b00      	cmp	r3, #0
 800d466:	d00a      	beq.n	800d47e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	685b      	ldr	r3, [r3, #4]
 800d46e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	430a      	orrs	r2, r1
 800d47c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d482:	f003 0301 	and.w	r3, r3, #1
 800d486:	2b00      	cmp	r3, #0
 800d488:	d00a      	beq.n	800d4a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	685b      	ldr	r3, [r3, #4]
 800d490:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	430a      	orrs	r2, r1
 800d49e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4a4:	f003 0302 	and.w	r3, r3, #2
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d00a      	beq.n	800d4c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	685b      	ldr	r3, [r3, #4]
 800d4b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	430a      	orrs	r2, r1
 800d4c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4c6:	f003 0304 	and.w	r3, r3, #4
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d00a      	beq.n	800d4e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	685b      	ldr	r3, [r3, #4]
 800d4d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	430a      	orrs	r2, r1
 800d4e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4e8:	f003 0310 	and.w	r3, r3, #16
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d00a      	beq.n	800d506 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	689b      	ldr	r3, [r3, #8]
 800d4f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	430a      	orrs	r2, r1
 800d504:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d50a:	f003 0320 	and.w	r3, r3, #32
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d00a      	beq.n	800d528 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	689b      	ldr	r3, [r3, #8]
 800d518:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	430a      	orrs	r2, r1
 800d526:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d52c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d530:	2b00      	cmp	r3, #0
 800d532:	d01a      	beq.n	800d56a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	685b      	ldr	r3, [r3, #4]
 800d53a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	430a      	orrs	r2, r1
 800d548:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d54e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d552:	d10a      	bne.n	800d56a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	685b      	ldr	r3, [r3, #4]
 800d55a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	430a      	orrs	r2, r1
 800d568:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d56e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d572:	2b00      	cmp	r3, #0
 800d574:	d00a      	beq.n	800d58c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	685b      	ldr	r3, [r3, #4]
 800d57c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	430a      	orrs	r2, r1
 800d58a:	605a      	str	r2, [r3, #4]
  }
}
 800d58c:	bf00      	nop
 800d58e:	370c      	adds	r7, #12
 800d590:	46bd      	mov	sp, r7
 800d592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d596:	4770      	bx	lr

0800d598 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b098      	sub	sp, #96	@ 0x60
 800d59c:	af02      	add	r7, sp, #8
 800d59e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d5a8:	f7f8 f8a0 	bl	80056ec <HAL_GetTick>
 800d5ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f003 0308 	and.w	r3, r3, #8
 800d5b8:	2b08      	cmp	r3, #8
 800d5ba:	d12f      	bne.n	800d61c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d5bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d5c0:	9300      	str	r3, [sp, #0]
 800d5c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f000 f88e 	bl	800d6ec <UART_WaitOnFlagUntilTimeout>
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d022      	beq.n	800d61c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5de:	e853 3f00 	ldrex	r3, [r3]
 800d5e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d5e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d5ea:	653b      	str	r3, [r7, #80]	@ 0x50
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	461a      	mov	r2, r3
 800d5f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d5f4:	647b      	str	r3, [r7, #68]	@ 0x44
 800d5f6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d5fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d5fc:	e841 2300 	strex	r3, r2, [r1]
 800d600:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d602:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d604:	2b00      	cmp	r3, #0
 800d606:	d1e6      	bne.n	800d5d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2220      	movs	r2, #32
 800d60c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2200      	movs	r2, #0
 800d614:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d618:	2303      	movs	r3, #3
 800d61a:	e063      	b.n	800d6e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	f003 0304 	and.w	r3, r3, #4
 800d626:	2b04      	cmp	r3, #4
 800d628:	d149      	bne.n	800d6be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d62a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d62e:	9300      	str	r3, [sp, #0]
 800d630:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d632:	2200      	movs	r2, #0
 800d634:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f000 f857 	bl	800d6ec <UART_WaitOnFlagUntilTimeout>
 800d63e:	4603      	mov	r3, r0
 800d640:	2b00      	cmp	r3, #0
 800d642:	d03c      	beq.n	800d6be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d64a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d64c:	e853 3f00 	ldrex	r3, [r3]
 800d650:	623b      	str	r3, [r7, #32]
   return(result);
 800d652:	6a3b      	ldr	r3, [r7, #32]
 800d654:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d658:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	461a      	mov	r2, r3
 800d660:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d662:	633b      	str	r3, [r7, #48]	@ 0x30
 800d664:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d666:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d668:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d66a:	e841 2300 	strex	r3, r2, [r1]
 800d66e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d672:	2b00      	cmp	r3, #0
 800d674:	d1e6      	bne.n	800d644 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	3308      	adds	r3, #8
 800d67c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d67e:	693b      	ldr	r3, [r7, #16]
 800d680:	e853 3f00 	ldrex	r3, [r3]
 800d684:	60fb      	str	r3, [r7, #12]
   return(result);
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	f023 0301 	bic.w	r3, r3, #1
 800d68c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	3308      	adds	r3, #8
 800d694:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d696:	61fa      	str	r2, [r7, #28]
 800d698:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d69a:	69b9      	ldr	r1, [r7, #24]
 800d69c:	69fa      	ldr	r2, [r7, #28]
 800d69e:	e841 2300 	strex	r3, r2, [r1]
 800d6a2:	617b      	str	r3, [r7, #20]
   return(result);
 800d6a4:	697b      	ldr	r3, [r7, #20]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d1e5      	bne.n	800d676 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2220      	movs	r2, #32
 800d6ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d6ba:	2303      	movs	r3, #3
 800d6bc:	e012      	b.n	800d6e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2220      	movs	r2, #32
 800d6c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2220      	movs	r2, #32
 800d6ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	2200      	movs	r2, #0
 800d6de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d6e2:	2300      	movs	r3, #0
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3758      	adds	r7, #88	@ 0x58
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}

0800d6ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b084      	sub	sp, #16
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	60f8      	str	r0, [r7, #12]
 800d6f4:	60b9      	str	r1, [r7, #8]
 800d6f6:	603b      	str	r3, [r7, #0]
 800d6f8:	4613      	mov	r3, r2
 800d6fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d6fc:	e04f      	b.n	800d79e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d6fe:	69bb      	ldr	r3, [r7, #24]
 800d700:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d704:	d04b      	beq.n	800d79e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d706:	f7f7 fff1 	bl	80056ec <HAL_GetTick>
 800d70a:	4602      	mov	r2, r0
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	1ad3      	subs	r3, r2, r3
 800d710:	69ba      	ldr	r2, [r7, #24]
 800d712:	429a      	cmp	r2, r3
 800d714:	d302      	bcc.n	800d71c <UART_WaitOnFlagUntilTimeout+0x30>
 800d716:	69bb      	ldr	r3, [r7, #24]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d101      	bne.n	800d720 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d71c:	2303      	movs	r3, #3
 800d71e:	e04e      	b.n	800d7be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	f003 0304 	and.w	r3, r3, #4
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d037      	beq.n	800d79e <UART_WaitOnFlagUntilTimeout+0xb2>
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	2b80      	cmp	r3, #128	@ 0x80
 800d732:	d034      	beq.n	800d79e <UART_WaitOnFlagUntilTimeout+0xb2>
 800d734:	68bb      	ldr	r3, [r7, #8]
 800d736:	2b40      	cmp	r3, #64	@ 0x40
 800d738:	d031      	beq.n	800d79e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	69db      	ldr	r3, [r3, #28]
 800d740:	f003 0308 	and.w	r3, r3, #8
 800d744:	2b08      	cmp	r3, #8
 800d746:	d110      	bne.n	800d76a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	2208      	movs	r2, #8
 800d74e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d750:	68f8      	ldr	r0, [r7, #12]
 800d752:	f000 f838 	bl	800d7c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	2208      	movs	r2, #8
 800d75a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	2200      	movs	r2, #0
 800d762:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d766:	2301      	movs	r3, #1
 800d768:	e029      	b.n	800d7be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	69db      	ldr	r3, [r3, #28]
 800d770:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d774:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d778:	d111      	bne.n	800d79e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d782:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d784:	68f8      	ldr	r0, [r7, #12]
 800d786:	f000 f81e 	bl	800d7c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	2220      	movs	r2, #32
 800d78e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	2200      	movs	r2, #0
 800d796:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d79a:	2303      	movs	r3, #3
 800d79c:	e00f      	b.n	800d7be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	69da      	ldr	r2, [r3, #28]
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	4013      	ands	r3, r2
 800d7a8:	68ba      	ldr	r2, [r7, #8]
 800d7aa:	429a      	cmp	r2, r3
 800d7ac:	bf0c      	ite	eq
 800d7ae:	2301      	moveq	r3, #1
 800d7b0:	2300      	movne	r3, #0
 800d7b2:	b2db      	uxtb	r3, r3
 800d7b4:	461a      	mov	r2, r3
 800d7b6:	79fb      	ldrb	r3, [r7, #7]
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	d0a0      	beq.n	800d6fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d7bc:	2300      	movs	r3, #0
}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	3710      	adds	r7, #16
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}

0800d7c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d7c6:	b480      	push	{r7}
 800d7c8:	b095      	sub	sp, #84	@ 0x54
 800d7ca:	af00      	add	r7, sp, #0
 800d7cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7d6:	e853 3f00 	ldrex	r3, [r3]
 800d7da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d7dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d7e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	461a      	mov	r2, r3
 800d7ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d7ec:	643b      	str	r3, [r7, #64]	@ 0x40
 800d7ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d7f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d7f4:	e841 2300 	strex	r3, r2, [r1]
 800d7f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d7fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d1e6      	bne.n	800d7ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	3308      	adds	r3, #8
 800d806:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d808:	6a3b      	ldr	r3, [r7, #32]
 800d80a:	e853 3f00 	ldrex	r3, [r3]
 800d80e:	61fb      	str	r3, [r7, #28]
   return(result);
 800d810:	69fb      	ldr	r3, [r7, #28]
 800d812:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d816:	f023 0301 	bic.w	r3, r3, #1
 800d81a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	3308      	adds	r3, #8
 800d822:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d824:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d826:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d828:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d82a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d82c:	e841 2300 	strex	r3, r2, [r1]
 800d830:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d834:	2b00      	cmp	r3, #0
 800d836:	d1e3      	bne.n	800d800 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d83c:	2b01      	cmp	r3, #1
 800d83e:	d118      	bne.n	800d872 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	e853 3f00 	ldrex	r3, [r3]
 800d84c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	f023 0310 	bic.w	r3, r3, #16
 800d854:	647b      	str	r3, [r7, #68]	@ 0x44
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	461a      	mov	r2, r3
 800d85c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d85e:	61bb      	str	r3, [r7, #24]
 800d860:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d862:	6979      	ldr	r1, [r7, #20]
 800d864:	69ba      	ldr	r2, [r7, #24]
 800d866:	e841 2300 	strex	r3, r2, [r1]
 800d86a:	613b      	str	r3, [r7, #16]
   return(result);
 800d86c:	693b      	ldr	r3, [r7, #16]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d1e6      	bne.n	800d840 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2220      	movs	r2, #32
 800d876:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2200      	movs	r2, #0
 800d87e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2200      	movs	r2, #0
 800d884:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d886:	bf00      	nop
 800d888:	3754      	adds	r7, #84	@ 0x54
 800d88a:	46bd      	mov	sp, r7
 800d88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d890:	4770      	bx	lr

0800d892 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800d892:	b480      	push	{r7}
 800d894:	b085      	sub	sp, #20
 800d896:	af00      	add	r7, sp, #0
 800d898:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2200      	movs	r2, #0
 800d89e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d8a2:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800d8a6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	b29a      	uxth	r2, r3
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800d8b2:	2300      	movs	r3, #0
}
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	3714      	adds	r7, #20
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8be:	4770      	bx	lr

0800d8c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800d8c0:	b480      	push	{r7}
 800d8c2:	b085      	sub	sp, #20
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d8c8:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800d8cc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800d8d4:	b29a      	uxth	r2, r3
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	b29b      	uxth	r3, r3
 800d8da:	43db      	mvns	r3, r3
 800d8dc:	b29b      	uxth	r3, r3
 800d8de:	4013      	ands	r3, r2
 800d8e0:	b29a      	uxth	r2, r3
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800d8e8:	2300      	movs	r3, #0
}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	3714      	adds	r7, #20
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f4:	4770      	bx	lr

0800d8f6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800d8f6:	b480      	push	{r7}
 800d8f8:	b085      	sub	sp, #20
 800d8fa:	af00      	add	r7, sp, #0
 800d8fc:	60f8      	str	r0, [r7, #12]
 800d8fe:	1d3b      	adds	r3, r7, #4
 800d900:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	2201      	movs	r2, #1
 800d908:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	2200      	movs	r2, #0
 800d910:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	2200      	movs	r2, #0
 800d918:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	2200      	movs	r2, #0
 800d920:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800d924:	2300      	movs	r3, #0
}
 800d926:	4618      	mov	r0, r3
 800d928:	3714      	adds	r7, #20
 800d92a:	46bd      	mov	sp, r7
 800d92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d930:	4770      	bx	lr
	...

0800d934 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d934:	b480      	push	{r7}
 800d936:	b09d      	sub	sp, #116	@ 0x74
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
 800d93c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800d93e:	2300      	movs	r3, #0
 800d940:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800d944:	687a      	ldr	r2, [r7, #4]
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	781b      	ldrb	r3, [r3, #0]
 800d94a:	009b      	lsls	r3, r3, #2
 800d94c:	4413      	add	r3, r2
 800d94e:	881b      	ldrh	r3, [r3, #0]
 800d950:	b29b      	uxth	r3, r3
 800d952:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800d956:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d95a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	78db      	ldrb	r3, [r3, #3]
 800d962:	2b03      	cmp	r3, #3
 800d964:	d81f      	bhi.n	800d9a6 <USB_ActivateEndpoint+0x72>
 800d966:	a201      	add	r2, pc, #4	@ (adr r2, 800d96c <USB_ActivateEndpoint+0x38>)
 800d968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d96c:	0800d97d 	.word	0x0800d97d
 800d970:	0800d999 	.word	0x0800d999
 800d974:	0800d9af 	.word	0x0800d9af
 800d978:	0800d98b 	.word	0x0800d98b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800d97c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d980:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d984:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800d988:	e012      	b.n	800d9b0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800d98a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d98e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800d992:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800d996:	e00b      	b.n	800d9b0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800d998:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d99c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d9a0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800d9a4:	e004      	b.n	800d9b0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800d9ac:	e000      	b.n	800d9b0 <USB_ActivateEndpoint+0x7c>
      break;
 800d9ae:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800d9b0:	687a      	ldr	r2, [r7, #4]
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	781b      	ldrb	r3, [r3, #0]
 800d9b6:	009b      	lsls	r3, r3, #2
 800d9b8:	441a      	add	r2, r3
 800d9ba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d9be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d9c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d9c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d9ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d9ce:	b29b      	uxth	r3, r3
 800d9d0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800d9d2:	687a      	ldr	r2, [r7, #4]
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	781b      	ldrb	r3, [r3, #0]
 800d9d8:	009b      	lsls	r3, r3, #2
 800d9da:	4413      	add	r3, r2
 800d9dc:	881b      	ldrh	r3, [r3, #0]
 800d9de:	b29b      	uxth	r3, r3
 800d9e0:	b21b      	sxth	r3, r3
 800d9e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d9e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d9ea:	b21a      	sxth	r2, r3
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	781b      	ldrb	r3, [r3, #0]
 800d9f0:	b21b      	sxth	r3, r3
 800d9f2:	4313      	orrs	r3, r2
 800d9f4:	b21b      	sxth	r3, r3
 800d9f6:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800d9fa:	687a      	ldr	r2, [r7, #4]
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	781b      	ldrb	r3, [r3, #0]
 800da00:	009b      	lsls	r3, r3, #2
 800da02:	441a      	add	r2, r3
 800da04:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800da08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800da0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800da10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800da14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da18:	b29b      	uxth	r3, r3
 800da1a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	7b1b      	ldrb	r3, [r3, #12]
 800da20:	2b00      	cmp	r3, #0
 800da22:	f040 8178 	bne.w	800dd16 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	785b      	ldrb	r3, [r3, #1]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	f000 8084 	beq.w	800db38 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	61bb      	str	r3, [r7, #24]
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800da3a:	b29b      	uxth	r3, r3
 800da3c:	461a      	mov	r2, r3
 800da3e:	69bb      	ldr	r3, [r7, #24]
 800da40:	4413      	add	r3, r2
 800da42:	61bb      	str	r3, [r7, #24]
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	781b      	ldrb	r3, [r3, #0]
 800da48:	00da      	lsls	r2, r3, #3
 800da4a:	69bb      	ldr	r3, [r7, #24]
 800da4c:	4413      	add	r3, r2
 800da4e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800da52:	617b      	str	r3, [r7, #20]
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	88db      	ldrh	r3, [r3, #6]
 800da58:	085b      	lsrs	r3, r3, #1
 800da5a:	b29b      	uxth	r3, r3
 800da5c:	005b      	lsls	r3, r3, #1
 800da5e:	b29a      	uxth	r2, r3
 800da60:	697b      	ldr	r3, [r7, #20]
 800da62:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800da64:	687a      	ldr	r2, [r7, #4]
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	781b      	ldrb	r3, [r3, #0]
 800da6a:	009b      	lsls	r3, r3, #2
 800da6c:	4413      	add	r3, r2
 800da6e:	881b      	ldrh	r3, [r3, #0]
 800da70:	827b      	strh	r3, [r7, #18]
 800da72:	8a7b      	ldrh	r3, [r7, #18]
 800da74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d01b      	beq.n	800dab4 <USB_ActivateEndpoint+0x180>
 800da7c:	687a      	ldr	r2, [r7, #4]
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	781b      	ldrb	r3, [r3, #0]
 800da82:	009b      	lsls	r3, r3, #2
 800da84:	4413      	add	r3, r2
 800da86:	881b      	ldrh	r3, [r3, #0]
 800da88:	b29b      	uxth	r3, r3
 800da8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800da8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800da92:	823b      	strh	r3, [r7, #16]
 800da94:	687a      	ldr	r2, [r7, #4]
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	781b      	ldrb	r3, [r3, #0]
 800da9a:	009b      	lsls	r3, r3, #2
 800da9c:	441a      	add	r2, r3
 800da9e:	8a3b      	ldrh	r3, [r7, #16]
 800daa0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800daa4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800daa8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800daac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800dab0:	b29b      	uxth	r3, r3
 800dab2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	78db      	ldrb	r3, [r3, #3]
 800dab8:	2b01      	cmp	r3, #1
 800daba:	d020      	beq.n	800dafe <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800dabc:	687a      	ldr	r2, [r7, #4]
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	781b      	ldrb	r3, [r3, #0]
 800dac2:	009b      	lsls	r3, r3, #2
 800dac4:	4413      	add	r3, r2
 800dac6:	881b      	ldrh	r3, [r3, #0]
 800dac8:	b29b      	uxth	r3, r3
 800daca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dace:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dad2:	81bb      	strh	r3, [r7, #12]
 800dad4:	89bb      	ldrh	r3, [r7, #12]
 800dad6:	f083 0320 	eor.w	r3, r3, #32
 800dada:	81bb      	strh	r3, [r7, #12]
 800dadc:	687a      	ldr	r2, [r7, #4]
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	781b      	ldrb	r3, [r3, #0]
 800dae2:	009b      	lsls	r3, r3, #2
 800dae4:	441a      	add	r2, r3
 800dae6:	89bb      	ldrh	r3, [r7, #12]
 800dae8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800daec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800daf0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800daf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800daf8:	b29b      	uxth	r3, r3
 800dafa:	8013      	strh	r3, [r2, #0]
 800dafc:	e2d5      	b.n	800e0aa <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800dafe:	687a      	ldr	r2, [r7, #4]
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	781b      	ldrb	r3, [r3, #0]
 800db04:	009b      	lsls	r3, r3, #2
 800db06:	4413      	add	r3, r2
 800db08:	881b      	ldrh	r3, [r3, #0]
 800db0a:	b29b      	uxth	r3, r3
 800db0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800db10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800db14:	81fb      	strh	r3, [r7, #14]
 800db16:	687a      	ldr	r2, [r7, #4]
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	781b      	ldrb	r3, [r3, #0]
 800db1c:	009b      	lsls	r3, r3, #2
 800db1e:	441a      	add	r2, r3
 800db20:	89fb      	ldrh	r3, [r7, #14]
 800db22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800db26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800db2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800db2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db32:	b29b      	uxth	r3, r3
 800db34:	8013      	strh	r3, [r2, #0]
 800db36:	e2b8      	b.n	800e0aa <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	633b      	str	r3, [r7, #48]	@ 0x30
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800db42:	b29b      	uxth	r3, r3
 800db44:	461a      	mov	r2, r3
 800db46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db48:	4413      	add	r3, r2
 800db4a:	633b      	str	r3, [r7, #48]	@ 0x30
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	781b      	ldrb	r3, [r3, #0]
 800db50:	00da      	lsls	r2, r3, #3
 800db52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db54:	4413      	add	r3, r2
 800db56:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800db5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	88db      	ldrh	r3, [r3, #6]
 800db60:	085b      	lsrs	r3, r3, #1
 800db62:	b29b      	uxth	r3, r3
 800db64:	005b      	lsls	r3, r3, #1
 800db66:	b29a      	uxth	r2, r3
 800db68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db6a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800db76:	b29b      	uxth	r3, r3
 800db78:	461a      	mov	r2, r3
 800db7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db7c:	4413      	add	r3, r2
 800db7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	781b      	ldrb	r3, [r3, #0]
 800db84:	00da      	lsls	r2, r3, #3
 800db86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db88:	4413      	add	r3, r2
 800db8a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800db8e:	627b      	str	r3, [r7, #36]	@ 0x24
 800db90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db92:	881b      	ldrh	r3, [r3, #0]
 800db94:	b29b      	uxth	r3, r3
 800db96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800db9a:	b29a      	uxth	r2, r3
 800db9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db9e:	801a      	strh	r2, [r3, #0]
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	691b      	ldr	r3, [r3, #16]
 800dba4:	2b3e      	cmp	r3, #62	@ 0x3e
 800dba6:	d91d      	bls.n	800dbe4 <USB_ActivateEndpoint+0x2b0>
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	691b      	ldr	r3, [r3, #16]
 800dbac:	095b      	lsrs	r3, r3, #5
 800dbae:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	691b      	ldr	r3, [r3, #16]
 800dbb4:	f003 031f 	and.w	r3, r3, #31
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d102      	bne.n	800dbc2 <USB_ActivateEndpoint+0x28e>
 800dbbc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dbbe:	3b01      	subs	r3, #1
 800dbc0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dbc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbc4:	881b      	ldrh	r3, [r3, #0]
 800dbc6:	b29a      	uxth	r2, r3
 800dbc8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dbca:	b29b      	uxth	r3, r3
 800dbcc:	029b      	lsls	r3, r3, #10
 800dbce:	b29b      	uxth	r3, r3
 800dbd0:	4313      	orrs	r3, r2
 800dbd2:	b29b      	uxth	r3, r3
 800dbd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dbd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dbdc:	b29a      	uxth	r2, r3
 800dbde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbe0:	801a      	strh	r2, [r3, #0]
 800dbe2:	e026      	b.n	800dc32 <USB_ActivateEndpoint+0x2fe>
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	691b      	ldr	r3, [r3, #16]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d10a      	bne.n	800dc02 <USB_ActivateEndpoint+0x2ce>
 800dbec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbee:	881b      	ldrh	r3, [r3, #0]
 800dbf0:	b29b      	uxth	r3, r3
 800dbf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dbf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dbfa:	b29a      	uxth	r2, r3
 800dbfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbfe:	801a      	strh	r2, [r3, #0]
 800dc00:	e017      	b.n	800dc32 <USB_ActivateEndpoint+0x2fe>
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	691b      	ldr	r3, [r3, #16]
 800dc06:	085b      	lsrs	r3, r3, #1
 800dc08:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	691b      	ldr	r3, [r3, #16]
 800dc0e:	f003 0301 	and.w	r3, r3, #1
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d002      	beq.n	800dc1c <USB_ActivateEndpoint+0x2e8>
 800dc16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dc18:	3301      	adds	r3, #1
 800dc1a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dc1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc1e:	881b      	ldrh	r3, [r3, #0]
 800dc20:	b29a      	uxth	r2, r3
 800dc22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dc24:	b29b      	uxth	r3, r3
 800dc26:	029b      	lsls	r3, r3, #10
 800dc28:	b29b      	uxth	r3, r3
 800dc2a:	4313      	orrs	r3, r2
 800dc2c:	b29a      	uxth	r2, r3
 800dc2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc30:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dc32:	687a      	ldr	r2, [r7, #4]
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	781b      	ldrb	r3, [r3, #0]
 800dc38:	009b      	lsls	r3, r3, #2
 800dc3a:	4413      	add	r3, r2
 800dc3c:	881b      	ldrh	r3, [r3, #0]
 800dc3e:	847b      	strh	r3, [r7, #34]	@ 0x22
 800dc40:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dc42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d01b      	beq.n	800dc82 <USB_ActivateEndpoint+0x34e>
 800dc4a:	687a      	ldr	r2, [r7, #4]
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	781b      	ldrb	r3, [r3, #0]
 800dc50:	009b      	lsls	r3, r3, #2
 800dc52:	4413      	add	r3, r2
 800dc54:	881b      	ldrh	r3, [r3, #0]
 800dc56:	b29b      	uxth	r3, r3
 800dc58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dc5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dc60:	843b      	strh	r3, [r7, #32]
 800dc62:	687a      	ldr	r2, [r7, #4]
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	781b      	ldrb	r3, [r3, #0]
 800dc68:	009b      	lsls	r3, r3, #2
 800dc6a:	441a      	add	r2, r3
 800dc6c:	8c3b      	ldrh	r3, [r7, #32]
 800dc6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dc72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dc76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800dc7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc7e:	b29b      	uxth	r3, r3
 800dc80:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	781b      	ldrb	r3, [r3, #0]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d124      	bne.n	800dcd4 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800dc8a:	687a      	ldr	r2, [r7, #4]
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	781b      	ldrb	r3, [r3, #0]
 800dc90:	009b      	lsls	r3, r3, #2
 800dc92:	4413      	add	r3, r2
 800dc94:	881b      	ldrh	r3, [r3, #0]
 800dc96:	b29b      	uxth	r3, r3
 800dc98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800dc9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dca0:	83bb      	strh	r3, [r7, #28]
 800dca2:	8bbb      	ldrh	r3, [r7, #28]
 800dca4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800dca8:	83bb      	strh	r3, [r7, #28]
 800dcaa:	8bbb      	ldrh	r3, [r7, #28]
 800dcac:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800dcb0:	83bb      	strh	r3, [r7, #28]
 800dcb2:	687a      	ldr	r2, [r7, #4]
 800dcb4:	683b      	ldr	r3, [r7, #0]
 800dcb6:	781b      	ldrb	r3, [r3, #0]
 800dcb8:	009b      	lsls	r3, r3, #2
 800dcba:	441a      	add	r2, r3
 800dcbc:	8bbb      	ldrh	r3, [r7, #28]
 800dcbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dcc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dcc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dcca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dcce:	b29b      	uxth	r3, r3
 800dcd0:	8013      	strh	r3, [r2, #0]
 800dcd2:	e1ea      	b.n	800e0aa <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800dcd4:	687a      	ldr	r2, [r7, #4]
 800dcd6:	683b      	ldr	r3, [r7, #0]
 800dcd8:	781b      	ldrb	r3, [r3, #0]
 800dcda:	009b      	lsls	r3, r3, #2
 800dcdc:	4413      	add	r3, r2
 800dcde:	881b      	ldrh	r3, [r3, #0]
 800dce0:	b29b      	uxth	r3, r3
 800dce2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800dce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dcea:	83fb      	strh	r3, [r7, #30]
 800dcec:	8bfb      	ldrh	r3, [r7, #30]
 800dcee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800dcf2:	83fb      	strh	r3, [r7, #30]
 800dcf4:	687a      	ldr	r2, [r7, #4]
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	781b      	ldrb	r3, [r3, #0]
 800dcfa:	009b      	lsls	r3, r3, #2
 800dcfc:	441a      	add	r2, r3
 800dcfe:	8bfb      	ldrh	r3, [r7, #30]
 800dd00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dd04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dd08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dd0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd10:	b29b      	uxth	r3, r3
 800dd12:	8013      	strh	r3, [r2, #0]
 800dd14:	e1c9      	b.n	800e0aa <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	78db      	ldrb	r3, [r3, #3]
 800dd1a:	2b02      	cmp	r3, #2
 800dd1c:	d11e      	bne.n	800dd5c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800dd1e:	687a      	ldr	r2, [r7, #4]
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	781b      	ldrb	r3, [r3, #0]
 800dd24:	009b      	lsls	r3, r3, #2
 800dd26:	4413      	add	r3, r2
 800dd28:	881b      	ldrh	r3, [r3, #0]
 800dd2a:	b29b      	uxth	r3, r3
 800dd2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dd30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dd34:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800dd38:	687a      	ldr	r2, [r7, #4]
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	781b      	ldrb	r3, [r3, #0]
 800dd3e:	009b      	lsls	r3, r3, #2
 800dd40:	441a      	add	r2, r3
 800dd42:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800dd46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dd4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dd4e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800dd52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd56:	b29b      	uxth	r3, r3
 800dd58:	8013      	strh	r3, [r2, #0]
 800dd5a:	e01d      	b.n	800dd98 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800dd5c:	687a      	ldr	r2, [r7, #4]
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	781b      	ldrb	r3, [r3, #0]
 800dd62:	009b      	lsls	r3, r3, #2
 800dd64:	4413      	add	r3, r2
 800dd66:	881b      	ldrh	r3, [r3, #0]
 800dd68:	b29b      	uxth	r3, r3
 800dd6a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800dd6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dd72:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800dd76:	687a      	ldr	r2, [r7, #4]
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	781b      	ldrb	r3, [r3, #0]
 800dd7c:	009b      	lsls	r3, r3, #2
 800dd7e:	441a      	add	r2, r3
 800dd80:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800dd84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dd88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dd8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dd90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd94:	b29b      	uxth	r3, r3
 800dd96:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dda2:	b29b      	uxth	r3, r3
 800dda4:	461a      	mov	r2, r3
 800dda6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dda8:	4413      	add	r3, r2
 800ddaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	781b      	ldrb	r3, [r3, #0]
 800ddb0:	00da      	lsls	r2, r3, #3
 800ddb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ddb4:	4413      	add	r3, r2
 800ddb6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ddba:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	891b      	ldrh	r3, [r3, #8]
 800ddc0:	085b      	lsrs	r3, r3, #1
 800ddc2:	b29b      	uxth	r3, r3
 800ddc4:	005b      	lsls	r3, r3, #1
 800ddc6:	b29a      	uxth	r2, r3
 800ddc8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ddca:	801a      	strh	r2, [r3, #0]
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	657b      	str	r3, [r7, #84]	@ 0x54
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ddd6:	b29b      	uxth	r3, r3
 800ddd8:	461a      	mov	r2, r3
 800ddda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dddc:	4413      	add	r3, r2
 800ddde:	657b      	str	r3, [r7, #84]	@ 0x54
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	781b      	ldrb	r3, [r3, #0]
 800dde4:	00da      	lsls	r2, r3, #3
 800dde6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dde8:	4413      	add	r3, r2
 800ddea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ddee:	653b      	str	r3, [r7, #80]	@ 0x50
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	895b      	ldrh	r3, [r3, #10]
 800ddf4:	085b      	lsrs	r3, r3, #1
 800ddf6:	b29b      	uxth	r3, r3
 800ddf8:	005b      	lsls	r3, r3, #1
 800ddfa:	b29a      	uxth	r2, r3
 800ddfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ddfe:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	785b      	ldrb	r3, [r3, #1]
 800de04:	2b00      	cmp	r3, #0
 800de06:	f040 8093 	bne.w	800df30 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800de0a:	687a      	ldr	r2, [r7, #4]
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	781b      	ldrb	r3, [r3, #0]
 800de10:	009b      	lsls	r3, r3, #2
 800de12:	4413      	add	r3, r2
 800de14:	881b      	ldrh	r3, [r3, #0]
 800de16:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800de1a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800de1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800de22:	2b00      	cmp	r3, #0
 800de24:	d01b      	beq.n	800de5e <USB_ActivateEndpoint+0x52a>
 800de26:	687a      	ldr	r2, [r7, #4]
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	781b      	ldrb	r3, [r3, #0]
 800de2c:	009b      	lsls	r3, r3, #2
 800de2e:	4413      	add	r3, r2
 800de30:	881b      	ldrh	r3, [r3, #0]
 800de32:	b29b      	uxth	r3, r3
 800de34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800de38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800de3c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800de3e:	687a      	ldr	r2, [r7, #4]
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	781b      	ldrb	r3, [r3, #0]
 800de44:	009b      	lsls	r3, r3, #2
 800de46:	441a      	add	r2, r3
 800de48:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800de4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800de4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800de52:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800de56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de5a:	b29b      	uxth	r3, r3
 800de5c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800de5e:	687a      	ldr	r2, [r7, #4]
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	781b      	ldrb	r3, [r3, #0]
 800de64:	009b      	lsls	r3, r3, #2
 800de66:	4413      	add	r3, r2
 800de68:	881b      	ldrh	r3, [r3, #0]
 800de6a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800de6c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800de6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800de72:	2b00      	cmp	r3, #0
 800de74:	d01b      	beq.n	800deae <USB_ActivateEndpoint+0x57a>
 800de76:	687a      	ldr	r2, [r7, #4]
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	781b      	ldrb	r3, [r3, #0]
 800de7c:	009b      	lsls	r3, r3, #2
 800de7e:	4413      	add	r3, r2
 800de80:	881b      	ldrh	r3, [r3, #0]
 800de82:	b29b      	uxth	r3, r3
 800de84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800de88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800de8c:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800de8e:	687a      	ldr	r2, [r7, #4]
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	781b      	ldrb	r3, [r3, #0]
 800de94:	009b      	lsls	r3, r3, #2
 800de96:	441a      	add	r2, r3
 800de98:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800de9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800de9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dea2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dea6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800deaa:	b29b      	uxth	r3, r3
 800deac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800deae:	687a      	ldr	r2, [r7, #4]
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	781b      	ldrb	r3, [r3, #0]
 800deb4:	009b      	lsls	r3, r3, #2
 800deb6:	4413      	add	r3, r2
 800deb8:	881b      	ldrh	r3, [r3, #0]
 800deba:	b29b      	uxth	r3, r3
 800debc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800dec0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dec4:	873b      	strh	r3, [r7, #56]	@ 0x38
 800dec6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800dec8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800decc:	873b      	strh	r3, [r7, #56]	@ 0x38
 800dece:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800ded0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ded4:	873b      	strh	r3, [r7, #56]	@ 0x38
 800ded6:	687a      	ldr	r2, [r7, #4]
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	781b      	ldrb	r3, [r3, #0]
 800dedc:	009b      	lsls	r3, r3, #2
 800dede:	441a      	add	r2, r3
 800dee0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800dee2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dee6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800deea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800deee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800def2:	b29b      	uxth	r3, r3
 800def4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800def6:	687a      	ldr	r2, [r7, #4]
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	781b      	ldrb	r3, [r3, #0]
 800defc:	009b      	lsls	r3, r3, #2
 800defe:	4413      	add	r3, r2
 800df00:	881b      	ldrh	r3, [r3, #0]
 800df02:	b29b      	uxth	r3, r3
 800df04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800df08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800df0c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800df0e:	687a      	ldr	r2, [r7, #4]
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	781b      	ldrb	r3, [r3, #0]
 800df14:	009b      	lsls	r3, r3, #2
 800df16:	441a      	add	r2, r3
 800df18:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800df1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800df1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800df22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800df26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df2a:	b29b      	uxth	r3, r3
 800df2c:	8013      	strh	r3, [r2, #0]
 800df2e:	e0bc      	b.n	800e0aa <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800df30:	687a      	ldr	r2, [r7, #4]
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	781b      	ldrb	r3, [r3, #0]
 800df36:	009b      	lsls	r3, r3, #2
 800df38:	4413      	add	r3, r2
 800df3a:	881b      	ldrh	r3, [r3, #0]
 800df3c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800df40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800df44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d01d      	beq.n	800df88 <USB_ActivateEndpoint+0x654>
 800df4c:	687a      	ldr	r2, [r7, #4]
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	781b      	ldrb	r3, [r3, #0]
 800df52:	009b      	lsls	r3, r3, #2
 800df54:	4413      	add	r3, r2
 800df56:	881b      	ldrh	r3, [r3, #0]
 800df58:	b29b      	uxth	r3, r3
 800df5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800df5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800df62:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800df66:	687a      	ldr	r2, [r7, #4]
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	781b      	ldrb	r3, [r3, #0]
 800df6c:	009b      	lsls	r3, r3, #2
 800df6e:	441a      	add	r2, r3
 800df70:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800df74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800df78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800df7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800df80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df84:	b29b      	uxth	r3, r3
 800df86:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800df88:	687a      	ldr	r2, [r7, #4]
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	781b      	ldrb	r3, [r3, #0]
 800df8e:	009b      	lsls	r3, r3, #2
 800df90:	4413      	add	r3, r2
 800df92:	881b      	ldrh	r3, [r3, #0]
 800df94:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800df98:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800df9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d01d      	beq.n	800dfe0 <USB_ActivateEndpoint+0x6ac>
 800dfa4:	687a      	ldr	r2, [r7, #4]
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	781b      	ldrb	r3, [r3, #0]
 800dfaa:	009b      	lsls	r3, r3, #2
 800dfac:	4413      	add	r3, r2
 800dfae:	881b      	ldrh	r3, [r3, #0]
 800dfb0:	b29b      	uxth	r3, r3
 800dfb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dfb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dfba:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800dfbe:	687a      	ldr	r2, [r7, #4]
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	781b      	ldrb	r3, [r3, #0]
 800dfc4:	009b      	lsls	r3, r3, #2
 800dfc6:	441a      	add	r2, r3
 800dfc8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800dfcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dfd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dfd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dfd8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800dfdc:	b29b      	uxth	r3, r3
 800dfde:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	78db      	ldrb	r3, [r3, #3]
 800dfe4:	2b01      	cmp	r3, #1
 800dfe6:	d024      	beq.n	800e032 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800dfe8:	687a      	ldr	r2, [r7, #4]
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	781b      	ldrb	r3, [r3, #0]
 800dfee:	009b      	lsls	r3, r3, #2
 800dff0:	4413      	add	r3, r2
 800dff2:	881b      	ldrh	r3, [r3, #0]
 800dff4:	b29b      	uxth	r3, r3
 800dff6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dffa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dffe:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800e002:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800e006:	f083 0320 	eor.w	r3, r3, #32
 800e00a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800e00e:	687a      	ldr	r2, [r7, #4]
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	781b      	ldrb	r3, [r3, #0]
 800e014:	009b      	lsls	r3, r3, #2
 800e016:	441a      	add	r2, r3
 800e018:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800e01c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e020:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e024:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e028:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e02c:	b29b      	uxth	r3, r3
 800e02e:	8013      	strh	r3, [r2, #0]
 800e030:	e01d      	b.n	800e06e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e032:	687a      	ldr	r2, [r7, #4]
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	781b      	ldrb	r3, [r3, #0]
 800e038:	009b      	lsls	r3, r3, #2
 800e03a:	4413      	add	r3, r2
 800e03c:	881b      	ldrh	r3, [r3, #0]
 800e03e:	b29b      	uxth	r3, r3
 800e040:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e044:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e048:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800e04c:	687a      	ldr	r2, [r7, #4]
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	781b      	ldrb	r3, [r3, #0]
 800e052:	009b      	lsls	r3, r3, #2
 800e054:	441a      	add	r2, r3
 800e056:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800e05a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e05e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e062:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e06a:	b29b      	uxth	r3, r3
 800e06c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e06e:	687a      	ldr	r2, [r7, #4]
 800e070:	683b      	ldr	r3, [r7, #0]
 800e072:	781b      	ldrb	r3, [r3, #0]
 800e074:	009b      	lsls	r3, r3, #2
 800e076:	4413      	add	r3, r2
 800e078:	881b      	ldrh	r3, [r3, #0]
 800e07a:	b29b      	uxth	r3, r3
 800e07c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e080:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e084:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800e088:	687a      	ldr	r2, [r7, #4]
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	781b      	ldrb	r3, [r3, #0]
 800e08e:	009b      	lsls	r3, r3, #2
 800e090:	441a      	add	r2, r3
 800e092:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800e096:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e09a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e09e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e0a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0a6:	b29b      	uxth	r3, r3
 800e0a8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800e0aa:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	3774      	adds	r7, #116	@ 0x74
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b8:	4770      	bx	lr
 800e0ba:	bf00      	nop

0800e0bc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e0bc:	b480      	push	{r7}
 800e0be:	b08d      	sub	sp, #52	@ 0x34
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
 800e0c4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	7b1b      	ldrb	r3, [r3, #12]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	f040 808e 	bne.w	800e1ec <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	785b      	ldrb	r3, [r3, #1]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d044      	beq.n	800e162 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e0d8:	687a      	ldr	r2, [r7, #4]
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	781b      	ldrb	r3, [r3, #0]
 800e0de:	009b      	lsls	r3, r3, #2
 800e0e0:	4413      	add	r3, r2
 800e0e2:	881b      	ldrh	r3, [r3, #0]
 800e0e4:	81bb      	strh	r3, [r7, #12]
 800e0e6:	89bb      	ldrh	r3, [r7, #12]
 800e0e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d01b      	beq.n	800e128 <USB_DeactivateEndpoint+0x6c>
 800e0f0:	687a      	ldr	r2, [r7, #4]
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	781b      	ldrb	r3, [r3, #0]
 800e0f6:	009b      	lsls	r3, r3, #2
 800e0f8:	4413      	add	r3, r2
 800e0fa:	881b      	ldrh	r3, [r3, #0]
 800e0fc:	b29b      	uxth	r3, r3
 800e0fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e106:	817b      	strh	r3, [r7, #10]
 800e108:	687a      	ldr	r2, [r7, #4]
 800e10a:	683b      	ldr	r3, [r7, #0]
 800e10c:	781b      	ldrb	r3, [r3, #0]
 800e10e:	009b      	lsls	r3, r3, #2
 800e110:	441a      	add	r2, r3
 800e112:	897b      	ldrh	r3, [r7, #10]
 800e114:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e118:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e11c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e120:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e124:	b29b      	uxth	r3, r3
 800e126:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e128:	687a      	ldr	r2, [r7, #4]
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	781b      	ldrb	r3, [r3, #0]
 800e12e:	009b      	lsls	r3, r3, #2
 800e130:	4413      	add	r3, r2
 800e132:	881b      	ldrh	r3, [r3, #0]
 800e134:	b29b      	uxth	r3, r3
 800e136:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e13a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e13e:	813b      	strh	r3, [r7, #8]
 800e140:	687a      	ldr	r2, [r7, #4]
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	781b      	ldrb	r3, [r3, #0]
 800e146:	009b      	lsls	r3, r3, #2
 800e148:	441a      	add	r2, r3
 800e14a:	893b      	ldrh	r3, [r7, #8]
 800e14c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e150:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e154:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e158:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e15c:	b29b      	uxth	r3, r3
 800e15e:	8013      	strh	r3, [r2, #0]
 800e160:	e192      	b.n	800e488 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e162:	687a      	ldr	r2, [r7, #4]
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	781b      	ldrb	r3, [r3, #0]
 800e168:	009b      	lsls	r3, r3, #2
 800e16a:	4413      	add	r3, r2
 800e16c:	881b      	ldrh	r3, [r3, #0]
 800e16e:	827b      	strh	r3, [r7, #18]
 800e170:	8a7b      	ldrh	r3, [r7, #18]
 800e172:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e176:	2b00      	cmp	r3, #0
 800e178:	d01b      	beq.n	800e1b2 <USB_DeactivateEndpoint+0xf6>
 800e17a:	687a      	ldr	r2, [r7, #4]
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	781b      	ldrb	r3, [r3, #0]
 800e180:	009b      	lsls	r3, r3, #2
 800e182:	4413      	add	r3, r2
 800e184:	881b      	ldrh	r3, [r3, #0]
 800e186:	b29b      	uxth	r3, r3
 800e188:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e18c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e190:	823b      	strh	r3, [r7, #16]
 800e192:	687a      	ldr	r2, [r7, #4]
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	781b      	ldrb	r3, [r3, #0]
 800e198:	009b      	lsls	r3, r3, #2
 800e19a:	441a      	add	r2, r3
 800e19c:	8a3b      	ldrh	r3, [r7, #16]
 800e19e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e1a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e1a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e1aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e1ae:	b29b      	uxth	r3, r3
 800e1b0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e1b2:	687a      	ldr	r2, [r7, #4]
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	781b      	ldrb	r3, [r3, #0]
 800e1b8:	009b      	lsls	r3, r3, #2
 800e1ba:	4413      	add	r3, r2
 800e1bc:	881b      	ldrh	r3, [r3, #0]
 800e1be:	b29b      	uxth	r3, r3
 800e1c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e1c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e1c8:	81fb      	strh	r3, [r7, #14]
 800e1ca:	687a      	ldr	r2, [r7, #4]
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	781b      	ldrb	r3, [r3, #0]
 800e1d0:	009b      	lsls	r3, r3, #2
 800e1d2:	441a      	add	r2, r3
 800e1d4:	89fb      	ldrh	r3, [r7, #14]
 800e1d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e1da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e1de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e1e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e1e6:	b29b      	uxth	r3, r3
 800e1e8:	8013      	strh	r3, [r2, #0]
 800e1ea:	e14d      	b.n	800e488 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	785b      	ldrb	r3, [r3, #1]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	f040 80a5 	bne.w	800e340 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e1f6:	687a      	ldr	r2, [r7, #4]
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	781b      	ldrb	r3, [r3, #0]
 800e1fc:	009b      	lsls	r3, r3, #2
 800e1fe:	4413      	add	r3, r2
 800e200:	881b      	ldrh	r3, [r3, #0]
 800e202:	843b      	strh	r3, [r7, #32]
 800e204:	8c3b      	ldrh	r3, [r7, #32]
 800e206:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d01b      	beq.n	800e246 <USB_DeactivateEndpoint+0x18a>
 800e20e:	687a      	ldr	r2, [r7, #4]
 800e210:	683b      	ldr	r3, [r7, #0]
 800e212:	781b      	ldrb	r3, [r3, #0]
 800e214:	009b      	lsls	r3, r3, #2
 800e216:	4413      	add	r3, r2
 800e218:	881b      	ldrh	r3, [r3, #0]
 800e21a:	b29b      	uxth	r3, r3
 800e21c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e220:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e224:	83fb      	strh	r3, [r7, #30]
 800e226:	687a      	ldr	r2, [r7, #4]
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	781b      	ldrb	r3, [r3, #0]
 800e22c:	009b      	lsls	r3, r3, #2
 800e22e:	441a      	add	r2, r3
 800e230:	8bfb      	ldrh	r3, [r7, #30]
 800e232:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e236:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e23a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e23e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e242:	b29b      	uxth	r3, r3
 800e244:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e246:	687a      	ldr	r2, [r7, #4]
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	781b      	ldrb	r3, [r3, #0]
 800e24c:	009b      	lsls	r3, r3, #2
 800e24e:	4413      	add	r3, r2
 800e250:	881b      	ldrh	r3, [r3, #0]
 800e252:	83bb      	strh	r3, [r7, #28]
 800e254:	8bbb      	ldrh	r3, [r7, #28]
 800e256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d01b      	beq.n	800e296 <USB_DeactivateEndpoint+0x1da>
 800e25e:	687a      	ldr	r2, [r7, #4]
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	781b      	ldrb	r3, [r3, #0]
 800e264:	009b      	lsls	r3, r3, #2
 800e266:	4413      	add	r3, r2
 800e268:	881b      	ldrh	r3, [r3, #0]
 800e26a:	b29b      	uxth	r3, r3
 800e26c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e270:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e274:	837b      	strh	r3, [r7, #26]
 800e276:	687a      	ldr	r2, [r7, #4]
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	781b      	ldrb	r3, [r3, #0]
 800e27c:	009b      	lsls	r3, r3, #2
 800e27e:	441a      	add	r2, r3
 800e280:	8b7b      	ldrh	r3, [r7, #26]
 800e282:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e286:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e28a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e28e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e292:	b29b      	uxth	r3, r3
 800e294:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800e296:	687a      	ldr	r2, [r7, #4]
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	781b      	ldrb	r3, [r3, #0]
 800e29c:	009b      	lsls	r3, r3, #2
 800e29e:	4413      	add	r3, r2
 800e2a0:	881b      	ldrh	r3, [r3, #0]
 800e2a2:	b29b      	uxth	r3, r3
 800e2a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e2a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e2ac:	833b      	strh	r3, [r7, #24]
 800e2ae:	687a      	ldr	r2, [r7, #4]
 800e2b0:	683b      	ldr	r3, [r7, #0]
 800e2b2:	781b      	ldrb	r3, [r3, #0]
 800e2b4:	009b      	lsls	r3, r3, #2
 800e2b6:	441a      	add	r2, r3
 800e2b8:	8b3b      	ldrh	r3, [r7, #24]
 800e2ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e2be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e2c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e2c6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e2ca:	b29b      	uxth	r3, r3
 800e2cc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e2ce:	687a      	ldr	r2, [r7, #4]
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	781b      	ldrb	r3, [r3, #0]
 800e2d4:	009b      	lsls	r3, r3, #2
 800e2d6:	4413      	add	r3, r2
 800e2d8:	881b      	ldrh	r3, [r3, #0]
 800e2da:	b29b      	uxth	r3, r3
 800e2dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e2e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e2e4:	82fb      	strh	r3, [r7, #22]
 800e2e6:	687a      	ldr	r2, [r7, #4]
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	781b      	ldrb	r3, [r3, #0]
 800e2ec:	009b      	lsls	r3, r3, #2
 800e2ee:	441a      	add	r2, r3
 800e2f0:	8afb      	ldrh	r3, [r7, #22]
 800e2f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e2f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e2fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e2fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e302:	b29b      	uxth	r3, r3
 800e304:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e306:	687a      	ldr	r2, [r7, #4]
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	781b      	ldrb	r3, [r3, #0]
 800e30c:	009b      	lsls	r3, r3, #2
 800e30e:	4413      	add	r3, r2
 800e310:	881b      	ldrh	r3, [r3, #0]
 800e312:	b29b      	uxth	r3, r3
 800e314:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e318:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e31c:	82bb      	strh	r3, [r7, #20]
 800e31e:	687a      	ldr	r2, [r7, #4]
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	781b      	ldrb	r3, [r3, #0]
 800e324:	009b      	lsls	r3, r3, #2
 800e326:	441a      	add	r2, r3
 800e328:	8abb      	ldrh	r3, [r7, #20]
 800e32a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e32e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e332:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e336:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e33a:	b29b      	uxth	r3, r3
 800e33c:	8013      	strh	r3, [r2, #0]
 800e33e:	e0a3      	b.n	800e488 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e340:	687a      	ldr	r2, [r7, #4]
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	781b      	ldrb	r3, [r3, #0]
 800e346:	009b      	lsls	r3, r3, #2
 800e348:	4413      	add	r3, r2
 800e34a:	881b      	ldrh	r3, [r3, #0]
 800e34c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800e34e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e350:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e354:	2b00      	cmp	r3, #0
 800e356:	d01b      	beq.n	800e390 <USB_DeactivateEndpoint+0x2d4>
 800e358:	687a      	ldr	r2, [r7, #4]
 800e35a:	683b      	ldr	r3, [r7, #0]
 800e35c:	781b      	ldrb	r3, [r3, #0]
 800e35e:	009b      	lsls	r3, r3, #2
 800e360:	4413      	add	r3, r2
 800e362:	881b      	ldrh	r3, [r3, #0]
 800e364:	b29b      	uxth	r3, r3
 800e366:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e36a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e36e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800e370:	687a      	ldr	r2, [r7, #4]
 800e372:	683b      	ldr	r3, [r7, #0]
 800e374:	781b      	ldrb	r3, [r3, #0]
 800e376:	009b      	lsls	r3, r3, #2
 800e378:	441a      	add	r2, r3
 800e37a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800e37c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e380:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e384:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e388:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e38c:	b29b      	uxth	r3, r3
 800e38e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e390:	687a      	ldr	r2, [r7, #4]
 800e392:	683b      	ldr	r3, [r7, #0]
 800e394:	781b      	ldrb	r3, [r3, #0]
 800e396:	009b      	lsls	r3, r3, #2
 800e398:	4413      	add	r3, r2
 800e39a:	881b      	ldrh	r3, [r3, #0]
 800e39c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800e39e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e3a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d01b      	beq.n	800e3e0 <USB_DeactivateEndpoint+0x324>
 800e3a8:	687a      	ldr	r2, [r7, #4]
 800e3aa:	683b      	ldr	r3, [r7, #0]
 800e3ac:	781b      	ldrb	r3, [r3, #0]
 800e3ae:	009b      	lsls	r3, r3, #2
 800e3b0:	4413      	add	r3, r2
 800e3b2:	881b      	ldrh	r3, [r3, #0]
 800e3b4:	b29b      	uxth	r3, r3
 800e3b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e3ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e3be:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e3c0:	687a      	ldr	r2, [r7, #4]
 800e3c2:	683b      	ldr	r3, [r7, #0]
 800e3c4:	781b      	ldrb	r3, [r3, #0]
 800e3c6:	009b      	lsls	r3, r3, #2
 800e3c8:	441a      	add	r2, r3
 800e3ca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e3cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e3d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e3d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e3d8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e3dc:	b29b      	uxth	r3, r3
 800e3de:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800e3e0:	687a      	ldr	r2, [r7, #4]
 800e3e2:	683b      	ldr	r3, [r7, #0]
 800e3e4:	781b      	ldrb	r3, [r3, #0]
 800e3e6:	009b      	lsls	r3, r3, #2
 800e3e8:	4413      	add	r3, r2
 800e3ea:	881b      	ldrh	r3, [r3, #0]
 800e3ec:	b29b      	uxth	r3, r3
 800e3ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e3f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e3f6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e3f8:	687a      	ldr	r2, [r7, #4]
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	781b      	ldrb	r3, [r3, #0]
 800e3fe:	009b      	lsls	r3, r3, #2
 800e400:	441a      	add	r2, r3
 800e402:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e404:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e408:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e40c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e410:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e414:	b29b      	uxth	r3, r3
 800e416:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e418:	687a      	ldr	r2, [r7, #4]
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	781b      	ldrb	r3, [r3, #0]
 800e41e:	009b      	lsls	r3, r3, #2
 800e420:	4413      	add	r3, r2
 800e422:	881b      	ldrh	r3, [r3, #0]
 800e424:	b29b      	uxth	r3, r3
 800e426:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e42a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e42e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800e430:	687a      	ldr	r2, [r7, #4]
 800e432:	683b      	ldr	r3, [r7, #0]
 800e434:	781b      	ldrb	r3, [r3, #0]
 800e436:	009b      	lsls	r3, r3, #2
 800e438:	441a      	add	r2, r3
 800e43a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e43c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e440:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e444:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e448:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e44c:	b29b      	uxth	r3, r3
 800e44e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e450:	687a      	ldr	r2, [r7, #4]
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	781b      	ldrb	r3, [r3, #0]
 800e456:	009b      	lsls	r3, r3, #2
 800e458:	4413      	add	r3, r2
 800e45a:	881b      	ldrh	r3, [r3, #0]
 800e45c:	b29b      	uxth	r3, r3
 800e45e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e462:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e466:	847b      	strh	r3, [r7, #34]	@ 0x22
 800e468:	687a      	ldr	r2, [r7, #4]
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	781b      	ldrb	r3, [r3, #0]
 800e46e:	009b      	lsls	r3, r3, #2
 800e470:	441a      	add	r2, r3
 800e472:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e474:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e478:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e47c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e480:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e484:	b29b      	uxth	r3, r3
 800e486:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800e488:	2300      	movs	r3, #0
}
 800e48a:	4618      	mov	r0, r3
 800e48c:	3734      	adds	r7, #52	@ 0x34
 800e48e:	46bd      	mov	sp, r7
 800e490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e494:	4770      	bx	lr

0800e496 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e496:	b580      	push	{r7, lr}
 800e498:	b0c2      	sub	sp, #264	@ 0x108
 800e49a:	af00      	add	r7, sp, #0
 800e49c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e4a4:	6018      	str	r0, [r3, #0]
 800e4a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e4ae:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e4b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	785b      	ldrb	r3, [r3, #1]
 800e4bc:	2b01      	cmp	r3, #1
 800e4be:	f040 86b7 	bne.w	800f230 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800e4c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	699a      	ldr	r2, [r3, #24]
 800e4ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	691b      	ldr	r3, [r3, #16]
 800e4da:	429a      	cmp	r2, r3
 800e4dc:	d908      	bls.n	800e4f0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800e4de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	691b      	ldr	r3, [r3, #16]
 800e4ea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800e4ee:	e007      	b.n	800e500 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800e4f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	699b      	ldr	r3, [r3, #24]
 800e4fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800e500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e504:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	7b1b      	ldrb	r3, [r3, #12]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d13a      	bne.n	800e586 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800e510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e514:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	6959      	ldr	r1, [r3, #20]
 800e51c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e520:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	88da      	ldrh	r2, [r3, #6]
 800e528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e52c:	b29b      	uxth	r3, r3
 800e52e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800e532:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800e536:	6800      	ldr	r0, [r0, #0]
 800e538:	f001 fc98 	bl	800fe6c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e53c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e540:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	613b      	str	r3, [r7, #16]
 800e548:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e54c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e556:	b29b      	uxth	r3, r3
 800e558:	461a      	mov	r2, r3
 800e55a:	693b      	ldr	r3, [r7, #16]
 800e55c:	4413      	add	r3, r2
 800e55e:	613b      	str	r3, [r7, #16]
 800e560:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e564:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	781b      	ldrb	r3, [r3, #0]
 800e56c:	00da      	lsls	r2, r3, #3
 800e56e:	693b      	ldr	r3, [r7, #16]
 800e570:	4413      	add	r3, r2
 800e572:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e576:	60fb      	str	r3, [r7, #12]
 800e578:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e57c:	b29a      	uxth	r2, r3
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	801a      	strh	r2, [r3, #0]
 800e582:	f000 be1f 	b.w	800f1c4 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800e586:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e58a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	78db      	ldrb	r3, [r3, #3]
 800e592:	2b02      	cmp	r3, #2
 800e594:	f040 8462 	bne.w	800ee5c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800e598:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e59c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	6a1a      	ldr	r2, [r3, #32]
 800e5a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	691b      	ldr	r3, [r3, #16]
 800e5b0:	429a      	cmp	r2, r3
 800e5b2:	f240 83df 	bls.w	800ed74 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800e5b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e5be:	681a      	ldr	r2, [r3, #0]
 800e5c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	781b      	ldrb	r3, [r3, #0]
 800e5cc:	009b      	lsls	r3, r3, #2
 800e5ce:	4413      	add	r3, r2
 800e5d0:	881b      	ldrh	r3, [r3, #0]
 800e5d2:	b29b      	uxth	r3, r3
 800e5d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e5d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e5dc:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800e5e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e5e8:	681a      	ldr	r2, [r3, #0]
 800e5ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	781b      	ldrb	r3, [r3, #0]
 800e5f6:	009b      	lsls	r3, r3, #2
 800e5f8:	441a      	add	r2, r3
 800e5fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800e5fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e602:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e606:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800e60a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e60e:	b29b      	uxth	r3, r3
 800e610:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800e612:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e616:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	6a1a      	ldr	r2, [r3, #32]
 800e61e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e622:	1ad2      	subs	r2, r2, r3
 800e624:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e628:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e630:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e634:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e638:	681a      	ldr	r2, [r3, #0]
 800e63a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e63e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	781b      	ldrb	r3, [r3, #0]
 800e646:	009b      	lsls	r3, r3, #2
 800e648:	4413      	add	r3, r2
 800e64a:	881b      	ldrh	r3, [r3, #0]
 800e64c:	b29b      	uxth	r3, r3
 800e64e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e652:	2b00      	cmp	r3, #0
 800e654:	f000 81c7 	beq.w	800e9e6 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e65c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	633b      	str	r3, [r7, #48]	@ 0x30
 800e664:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e668:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	785b      	ldrb	r3, [r3, #1]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d177      	bne.n	800e764 <USB_EPStartXfer+0x2ce>
 800e674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e678:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e680:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e684:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e68e:	b29b      	uxth	r3, r3
 800e690:	461a      	mov	r2, r3
 800e692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e694:	4413      	add	r3, r2
 800e696:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e698:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e69c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	781b      	ldrb	r3, [r3, #0]
 800e6a4:	00da      	lsls	r2, r3, #3
 800e6a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6a8:	4413      	add	r3, r2
 800e6aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e6ae:	627b      	str	r3, [r7, #36]	@ 0x24
 800e6b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6b2:	881b      	ldrh	r3, [r3, #0]
 800e6b4:	b29b      	uxth	r3, r3
 800e6b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e6ba:	b29a      	uxth	r2, r3
 800e6bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6be:	801a      	strh	r2, [r3, #0]
 800e6c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6c4:	2b3e      	cmp	r3, #62	@ 0x3e
 800e6c6:	d921      	bls.n	800e70c <USB_EPStartXfer+0x276>
 800e6c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6cc:	095b      	lsrs	r3, r3, #5
 800e6ce:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800e6d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6d6:	f003 031f 	and.w	r3, r3, #31
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d104      	bne.n	800e6e8 <USB_EPStartXfer+0x252>
 800e6de:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800e6e2:	3b01      	subs	r3, #1
 800e6e4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800e6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6ea:	881b      	ldrh	r3, [r3, #0]
 800e6ec:	b29a      	uxth	r2, r3
 800e6ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800e6f2:	b29b      	uxth	r3, r3
 800e6f4:	029b      	lsls	r3, r3, #10
 800e6f6:	b29b      	uxth	r3, r3
 800e6f8:	4313      	orrs	r3, r2
 800e6fa:	b29b      	uxth	r3, r3
 800e6fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e700:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e704:	b29a      	uxth	r2, r3
 800e706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e708:	801a      	strh	r2, [r3, #0]
 800e70a:	e050      	b.n	800e7ae <USB_EPStartXfer+0x318>
 800e70c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e710:	2b00      	cmp	r3, #0
 800e712:	d10a      	bne.n	800e72a <USB_EPStartXfer+0x294>
 800e714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e716:	881b      	ldrh	r3, [r3, #0]
 800e718:	b29b      	uxth	r3, r3
 800e71a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e71e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e722:	b29a      	uxth	r2, r3
 800e724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e726:	801a      	strh	r2, [r3, #0]
 800e728:	e041      	b.n	800e7ae <USB_EPStartXfer+0x318>
 800e72a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e72e:	085b      	lsrs	r3, r3, #1
 800e730:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800e734:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e738:	f003 0301 	and.w	r3, r3, #1
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d004      	beq.n	800e74a <USB_EPStartXfer+0x2b4>
 800e740:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800e744:	3301      	adds	r3, #1
 800e746:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800e74a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e74c:	881b      	ldrh	r3, [r3, #0]
 800e74e:	b29a      	uxth	r2, r3
 800e750:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800e754:	b29b      	uxth	r3, r3
 800e756:	029b      	lsls	r3, r3, #10
 800e758:	b29b      	uxth	r3, r3
 800e75a:	4313      	orrs	r3, r2
 800e75c:	b29a      	uxth	r2, r3
 800e75e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e760:	801a      	strh	r2, [r3, #0]
 800e762:	e024      	b.n	800e7ae <USB_EPStartXfer+0x318>
 800e764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e768:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	785b      	ldrb	r3, [r3, #1]
 800e770:	2b01      	cmp	r3, #1
 800e772:	d11c      	bne.n	800e7ae <USB_EPStartXfer+0x318>
 800e774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e778:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e782:	b29b      	uxth	r3, r3
 800e784:	461a      	mov	r2, r3
 800e786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e788:	4413      	add	r3, r2
 800e78a:	633b      	str	r3, [r7, #48]	@ 0x30
 800e78c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e790:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	781b      	ldrb	r3, [r3, #0]
 800e798:	00da      	lsls	r2, r3, #3
 800e79a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e79c:	4413      	add	r3, r2
 800e79e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e7a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e7a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7a8:	b29a      	uxth	r2, r3
 800e7aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800e7ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e7b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	895b      	ldrh	r3, [r3, #10]
 800e7ba:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e7be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e7c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	6959      	ldr	r1, [r3, #20]
 800e7ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7ce:	b29b      	uxth	r3, r3
 800e7d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e7d4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800e7d8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800e7dc:	6800      	ldr	r0, [r0, #0]
 800e7de:	f001 fb45 	bl	800fe6c <USB_WritePMA>
            ep->xfer_buff += len;
 800e7e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e7e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	695a      	ldr	r2, [r3, #20]
 800e7ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7f2:	441a      	add	r2, r3
 800e7f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e7f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e800:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e804:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	6a1a      	ldr	r2, [r3, #32]
 800e80c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e810:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	691b      	ldr	r3, [r3, #16]
 800e818:	429a      	cmp	r2, r3
 800e81a:	d90f      	bls.n	800e83c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800e81c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e820:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	6a1a      	ldr	r2, [r3, #32]
 800e828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e82c:	1ad2      	subs	r2, r2, r3
 800e82e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e832:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	621a      	str	r2, [r3, #32]
 800e83a:	e00e      	b.n	800e85a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800e83c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e840:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	6a1b      	ldr	r3, [r3, #32]
 800e848:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800e84c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e850:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	2200      	movs	r2, #0
 800e858:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e85a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e85e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	785b      	ldrb	r3, [r3, #1]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d177      	bne.n	800e95a <USB_EPStartXfer+0x4c4>
 800e86a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e86e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	61bb      	str	r3, [r7, #24]
 800e876:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e87a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e884:	b29b      	uxth	r3, r3
 800e886:	461a      	mov	r2, r3
 800e888:	69bb      	ldr	r3, [r7, #24]
 800e88a:	4413      	add	r3, r2
 800e88c:	61bb      	str	r3, [r7, #24]
 800e88e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e892:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	781b      	ldrb	r3, [r3, #0]
 800e89a:	00da      	lsls	r2, r3, #3
 800e89c:	69bb      	ldr	r3, [r7, #24]
 800e89e:	4413      	add	r3, r2
 800e8a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e8a4:	617b      	str	r3, [r7, #20]
 800e8a6:	697b      	ldr	r3, [r7, #20]
 800e8a8:	881b      	ldrh	r3, [r3, #0]
 800e8aa:	b29b      	uxth	r3, r3
 800e8ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e8b0:	b29a      	uxth	r2, r3
 800e8b2:	697b      	ldr	r3, [r7, #20]
 800e8b4:	801a      	strh	r2, [r3, #0]
 800e8b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8ba:	2b3e      	cmp	r3, #62	@ 0x3e
 800e8bc:	d921      	bls.n	800e902 <USB_EPStartXfer+0x46c>
 800e8be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8c2:	095b      	lsrs	r3, r3, #5
 800e8c4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800e8c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8cc:	f003 031f 	and.w	r3, r3, #31
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d104      	bne.n	800e8de <USB_EPStartXfer+0x448>
 800e8d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e8d8:	3b01      	subs	r3, #1
 800e8da:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800e8de:	697b      	ldr	r3, [r7, #20]
 800e8e0:	881b      	ldrh	r3, [r3, #0]
 800e8e2:	b29a      	uxth	r2, r3
 800e8e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e8e8:	b29b      	uxth	r3, r3
 800e8ea:	029b      	lsls	r3, r3, #10
 800e8ec:	b29b      	uxth	r3, r3
 800e8ee:	4313      	orrs	r3, r2
 800e8f0:	b29b      	uxth	r3, r3
 800e8f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e8f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e8fa:	b29a      	uxth	r2, r3
 800e8fc:	697b      	ldr	r3, [r7, #20]
 800e8fe:	801a      	strh	r2, [r3, #0]
 800e900:	e056      	b.n	800e9b0 <USB_EPStartXfer+0x51a>
 800e902:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e906:	2b00      	cmp	r3, #0
 800e908:	d10a      	bne.n	800e920 <USB_EPStartXfer+0x48a>
 800e90a:	697b      	ldr	r3, [r7, #20]
 800e90c:	881b      	ldrh	r3, [r3, #0]
 800e90e:	b29b      	uxth	r3, r3
 800e910:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e914:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e918:	b29a      	uxth	r2, r3
 800e91a:	697b      	ldr	r3, [r7, #20]
 800e91c:	801a      	strh	r2, [r3, #0]
 800e91e:	e047      	b.n	800e9b0 <USB_EPStartXfer+0x51a>
 800e920:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e924:	085b      	lsrs	r3, r3, #1
 800e926:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800e92a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e92e:	f003 0301 	and.w	r3, r3, #1
 800e932:	2b00      	cmp	r3, #0
 800e934:	d004      	beq.n	800e940 <USB_EPStartXfer+0x4aa>
 800e936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e93a:	3301      	adds	r3, #1
 800e93c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800e940:	697b      	ldr	r3, [r7, #20]
 800e942:	881b      	ldrh	r3, [r3, #0]
 800e944:	b29a      	uxth	r2, r3
 800e946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e94a:	b29b      	uxth	r3, r3
 800e94c:	029b      	lsls	r3, r3, #10
 800e94e:	b29b      	uxth	r3, r3
 800e950:	4313      	orrs	r3, r2
 800e952:	b29a      	uxth	r2, r3
 800e954:	697b      	ldr	r3, [r7, #20]
 800e956:	801a      	strh	r2, [r3, #0]
 800e958:	e02a      	b.n	800e9b0 <USB_EPStartXfer+0x51a>
 800e95a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e95e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	785b      	ldrb	r3, [r3, #1]
 800e966:	2b01      	cmp	r3, #1
 800e968:	d122      	bne.n	800e9b0 <USB_EPStartXfer+0x51a>
 800e96a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e96e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	623b      	str	r3, [r7, #32]
 800e976:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e97a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e984:	b29b      	uxth	r3, r3
 800e986:	461a      	mov	r2, r3
 800e988:	6a3b      	ldr	r3, [r7, #32]
 800e98a:	4413      	add	r3, r2
 800e98c:	623b      	str	r3, [r7, #32]
 800e98e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e992:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	781b      	ldrb	r3, [r3, #0]
 800e99a:	00da      	lsls	r2, r3, #3
 800e99c:	6a3b      	ldr	r3, [r7, #32]
 800e99e:	4413      	add	r3, r2
 800e9a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e9a4:	61fb      	str	r3, [r7, #28]
 800e9a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9aa:	b29a      	uxth	r2, r3
 800e9ac:	69fb      	ldr	r3, [r7, #28]
 800e9ae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e9b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e9b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	891b      	ldrh	r3, [r3, #8]
 800e9bc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e9c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e9c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	6959      	ldr	r1, [r3, #20]
 800e9cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9d0:	b29b      	uxth	r3, r3
 800e9d2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e9d6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800e9da:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800e9de:	6800      	ldr	r0, [r0, #0]
 800e9e0:	f001 fa44 	bl	800fe6c <USB_WritePMA>
 800e9e4:	e3ee      	b.n	800f1c4 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e9e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e9ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	785b      	ldrb	r3, [r3, #1]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d177      	bne.n	800eae6 <USB_EPStartXfer+0x650>
 800e9f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e9fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ea02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ea06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ea10:	b29b      	uxth	r3, r3
 800ea12:	461a      	mov	r2, r3
 800ea14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ea16:	4413      	add	r3, r2
 800ea18:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ea1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ea1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	781b      	ldrb	r3, [r3, #0]
 800ea26:	00da      	lsls	r2, r3, #3
 800ea28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ea2a:	4413      	add	r3, r2
 800ea2c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ea30:	647b      	str	r3, [r7, #68]	@ 0x44
 800ea32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea34:	881b      	ldrh	r3, [r3, #0]
 800ea36:	b29b      	uxth	r3, r3
 800ea38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ea3c:	b29a      	uxth	r2, r3
 800ea3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea40:	801a      	strh	r2, [r3, #0]
 800ea42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea46:	2b3e      	cmp	r3, #62	@ 0x3e
 800ea48:	d921      	bls.n	800ea8e <USB_EPStartXfer+0x5f8>
 800ea4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea4e:	095b      	lsrs	r3, r3, #5
 800ea50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800ea54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea58:	f003 031f 	and.w	r3, r3, #31
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d104      	bne.n	800ea6a <USB_EPStartXfer+0x5d4>
 800ea60:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ea64:	3b01      	subs	r3, #1
 800ea66:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800ea6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea6c:	881b      	ldrh	r3, [r3, #0]
 800ea6e:	b29a      	uxth	r2, r3
 800ea70:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ea74:	b29b      	uxth	r3, r3
 800ea76:	029b      	lsls	r3, r3, #10
 800ea78:	b29b      	uxth	r3, r3
 800ea7a:	4313      	orrs	r3, r2
 800ea7c:	b29b      	uxth	r3, r3
 800ea7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ea82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ea86:	b29a      	uxth	r2, r3
 800ea88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea8a:	801a      	strh	r2, [r3, #0]
 800ea8c:	e056      	b.n	800eb3c <USB_EPStartXfer+0x6a6>
 800ea8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d10a      	bne.n	800eaac <USB_EPStartXfer+0x616>
 800ea96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea98:	881b      	ldrh	r3, [r3, #0]
 800ea9a:	b29b      	uxth	r3, r3
 800ea9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eaa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eaa4:	b29a      	uxth	r2, r3
 800eaa6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eaa8:	801a      	strh	r2, [r3, #0]
 800eaaa:	e047      	b.n	800eb3c <USB_EPStartXfer+0x6a6>
 800eaac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eab0:	085b      	lsrs	r3, r3, #1
 800eab2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800eab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eaba:	f003 0301 	and.w	r3, r3, #1
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d004      	beq.n	800eacc <USB_EPStartXfer+0x636>
 800eac2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800eac6:	3301      	adds	r3, #1
 800eac8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800eacc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eace:	881b      	ldrh	r3, [r3, #0]
 800ead0:	b29a      	uxth	r2, r3
 800ead2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ead6:	b29b      	uxth	r3, r3
 800ead8:	029b      	lsls	r3, r3, #10
 800eada:	b29b      	uxth	r3, r3
 800eadc:	4313      	orrs	r3, r2
 800eade:	b29a      	uxth	r2, r3
 800eae0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eae2:	801a      	strh	r2, [r3, #0]
 800eae4:	e02a      	b.n	800eb3c <USB_EPStartXfer+0x6a6>
 800eae6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eaea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	785b      	ldrb	r3, [r3, #1]
 800eaf2:	2b01      	cmp	r3, #1
 800eaf4:	d122      	bne.n	800eb3c <USB_EPStartXfer+0x6a6>
 800eaf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eafa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	653b      	str	r3, [r7, #80]	@ 0x50
 800eb02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eb06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800eb10:	b29b      	uxth	r3, r3
 800eb12:	461a      	mov	r2, r3
 800eb14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eb16:	4413      	add	r3, r2
 800eb18:	653b      	str	r3, [r7, #80]	@ 0x50
 800eb1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eb1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	781b      	ldrb	r3, [r3, #0]
 800eb26:	00da      	lsls	r2, r3, #3
 800eb28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eb2a:	4413      	add	r3, r2
 800eb2c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800eb30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800eb32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb36:	b29a      	uxth	r2, r3
 800eb38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eb3a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800eb3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eb40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	891b      	ldrh	r3, [r3, #8]
 800eb48:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800eb4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eb50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	6959      	ldr	r1, [r3, #20]
 800eb58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb5c:	b29b      	uxth	r3, r3
 800eb5e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800eb62:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800eb66:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800eb6a:	6800      	ldr	r0, [r0, #0]
 800eb6c:	f001 f97e 	bl	800fe6c <USB_WritePMA>
            ep->xfer_buff += len;
 800eb70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eb74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	695a      	ldr	r2, [r3, #20]
 800eb7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb80:	441a      	add	r2, r3
 800eb82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eb86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800eb8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eb92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	6a1a      	ldr	r2, [r3, #32]
 800eb9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eb9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	691b      	ldr	r3, [r3, #16]
 800eba6:	429a      	cmp	r2, r3
 800eba8:	d90f      	bls.n	800ebca <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800ebaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ebae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	6a1a      	ldr	r2, [r3, #32]
 800ebb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebba:	1ad2      	subs	r2, r2, r3
 800ebbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ebc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	621a      	str	r2, [r3, #32]
 800ebc8:	e00e      	b.n	800ebe8 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800ebca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ebce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	6a1b      	ldr	r3, [r3, #32]
 800ebd6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800ebda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ebde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ebe8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ebec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	643b      	str	r3, [r7, #64]	@ 0x40
 800ebf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ebf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	785b      	ldrb	r3, [r3, #1]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d177      	bne.n	800ecf4 <USB_EPStartXfer+0x85e>
 800ec04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ec10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ec1e:	b29b      	uxth	r3, r3
 800ec20:	461a      	mov	r2, r3
 800ec22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec24:	4413      	add	r3, r2
 800ec26:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ec28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	781b      	ldrb	r3, [r3, #0]
 800ec34:	00da      	lsls	r2, r3, #3
 800ec36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec38:	4413      	add	r3, r2
 800ec3a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ec3e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ec40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec42:	881b      	ldrh	r3, [r3, #0]
 800ec44:	b29b      	uxth	r3, r3
 800ec46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ec4a:	b29a      	uxth	r2, r3
 800ec4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec4e:	801a      	strh	r2, [r3, #0]
 800ec50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec54:	2b3e      	cmp	r3, #62	@ 0x3e
 800ec56:	d921      	bls.n	800ec9c <USB_EPStartXfer+0x806>
 800ec58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec5c:	095b      	lsrs	r3, r3, #5
 800ec5e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ec62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec66:	f003 031f 	and.w	r3, r3, #31
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d104      	bne.n	800ec78 <USB_EPStartXfer+0x7e2>
 800ec6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ec72:	3b01      	subs	r3, #1
 800ec74:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ec78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec7a:	881b      	ldrh	r3, [r3, #0]
 800ec7c:	b29a      	uxth	r2, r3
 800ec7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ec82:	b29b      	uxth	r3, r3
 800ec84:	029b      	lsls	r3, r3, #10
 800ec86:	b29b      	uxth	r3, r3
 800ec88:	4313      	orrs	r3, r2
 800ec8a:	b29b      	uxth	r3, r3
 800ec8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ec90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ec94:	b29a      	uxth	r2, r3
 800ec96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec98:	801a      	strh	r2, [r3, #0]
 800ec9a:	e050      	b.n	800ed3e <USB_EPStartXfer+0x8a8>
 800ec9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d10a      	bne.n	800ecba <USB_EPStartXfer+0x824>
 800eca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eca6:	881b      	ldrh	r3, [r3, #0]
 800eca8:	b29b      	uxth	r3, r3
 800ecaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ecae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ecb2:	b29a      	uxth	r2, r3
 800ecb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecb6:	801a      	strh	r2, [r3, #0]
 800ecb8:	e041      	b.n	800ed3e <USB_EPStartXfer+0x8a8>
 800ecba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ecbe:	085b      	lsrs	r3, r3, #1
 800ecc0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ecc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ecc8:	f003 0301 	and.w	r3, r3, #1
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d004      	beq.n	800ecda <USB_EPStartXfer+0x844>
 800ecd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ecd4:	3301      	adds	r3, #1
 800ecd6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ecda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecdc:	881b      	ldrh	r3, [r3, #0]
 800ecde:	b29a      	uxth	r2, r3
 800ece0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ece4:	b29b      	uxth	r3, r3
 800ece6:	029b      	lsls	r3, r3, #10
 800ece8:	b29b      	uxth	r3, r3
 800ecea:	4313      	orrs	r3, r2
 800ecec:	b29a      	uxth	r2, r3
 800ecee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecf0:	801a      	strh	r2, [r3, #0]
 800ecf2:	e024      	b.n	800ed3e <USB_EPStartXfer+0x8a8>
 800ecf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ecf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	785b      	ldrb	r3, [r3, #1]
 800ed00:	2b01      	cmp	r3, #1
 800ed02:	d11c      	bne.n	800ed3e <USB_EPStartXfer+0x8a8>
 800ed04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ed08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ed12:	b29b      	uxth	r3, r3
 800ed14:	461a      	mov	r2, r3
 800ed16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ed18:	4413      	add	r3, r2
 800ed1a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ed1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ed20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	781b      	ldrb	r3, [r3, #0]
 800ed28:	00da      	lsls	r2, r3, #3
 800ed2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ed2c:	4413      	add	r3, r2
 800ed2e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ed32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed38:	b29a      	uxth	r2, r3
 800ed3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed3c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ed3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ed42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	895b      	ldrh	r3, [r3, #10]
 800ed4a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ed4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ed52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	6959      	ldr	r1, [r3, #20]
 800ed5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed5e:	b29b      	uxth	r3, r3
 800ed60:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ed64:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ed68:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ed6c:	6800      	ldr	r0, [r0, #0]
 800ed6e:	f001 f87d 	bl	800fe6c <USB_WritePMA>
 800ed72:	e227      	b.n	800f1c4 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800ed74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ed78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	6a1b      	ldr	r3, [r3, #32]
 800ed80:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800ed84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ed88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ed8c:	681a      	ldr	r2, [r3, #0]
 800ed8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ed92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	781b      	ldrb	r3, [r3, #0]
 800ed9a:	009b      	lsls	r3, r3, #2
 800ed9c:	4413      	add	r3, r2
 800ed9e:	881b      	ldrh	r3, [r3, #0]
 800eda0:	b29b      	uxth	r3, r3
 800eda2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800eda6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800edaa:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800edae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800edb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800edb6:	681a      	ldr	r2, [r3, #0]
 800edb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800edbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	781b      	ldrb	r3, [r3, #0]
 800edc4:	009b      	lsls	r3, r3, #2
 800edc6:	441a      	add	r2, r3
 800edc8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800edcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800edd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800edd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800edd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eddc:	b29b      	uxth	r3, r3
 800edde:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ede0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ede4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800edec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800edf0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800edfa:	b29b      	uxth	r3, r3
 800edfc:	461a      	mov	r2, r3
 800edfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ee00:	4413      	add	r3, r2
 800ee02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ee04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	781b      	ldrb	r3, [r3, #0]
 800ee10:	00da      	lsls	r2, r3, #3
 800ee12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ee14:	4413      	add	r3, r2
 800ee16:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ee1a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ee1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee20:	b29a      	uxth	r2, r3
 800ee22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ee24:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ee26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	891b      	ldrh	r3, [r3, #8]
 800ee32:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ee36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	6959      	ldr	r1, [r3, #20]
 800ee42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee46:	b29b      	uxth	r3, r3
 800ee48:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ee4c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ee50:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ee54:	6800      	ldr	r0, [r0, #0]
 800ee56:	f001 f809 	bl	800fe6c <USB_WritePMA>
 800ee5a:	e1b3      	b.n	800f1c4 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ee5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	6a1a      	ldr	r2, [r3, #32]
 800ee68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee6c:	1ad2      	subs	r2, r2, r3
 800ee6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ee7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ee82:	681a      	ldr	r2, [r3, #0]
 800ee84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	781b      	ldrb	r3, [r3, #0]
 800ee90:	009b      	lsls	r3, r3, #2
 800ee92:	4413      	add	r3, r2
 800ee94:	881b      	ldrh	r3, [r3, #0]
 800ee96:	b29b      	uxth	r3, r3
 800ee98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	f000 80c6 	beq.w	800f02e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800eea2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eea6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	673b      	str	r3, [r7, #112]	@ 0x70
 800eeae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eeb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	785b      	ldrb	r3, [r3, #1]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d177      	bne.n	800efae <USB_EPStartXfer+0xb18>
 800eebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eec2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800eeca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eece:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800eed8:	b29b      	uxth	r3, r3
 800eeda:	461a      	mov	r2, r3
 800eedc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800eede:	4413      	add	r3, r2
 800eee0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800eee2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eee6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	781b      	ldrb	r3, [r3, #0]
 800eeee:	00da      	lsls	r2, r3, #3
 800eef0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800eef2:	4413      	add	r3, r2
 800eef4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800eef8:	667b      	str	r3, [r7, #100]	@ 0x64
 800eefa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eefc:	881b      	ldrh	r3, [r3, #0]
 800eefe:	b29b      	uxth	r3, r3
 800ef00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ef04:	b29a      	uxth	r2, r3
 800ef06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ef08:	801a      	strh	r2, [r3, #0]
 800ef0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef0e:	2b3e      	cmp	r3, #62	@ 0x3e
 800ef10:	d921      	bls.n	800ef56 <USB_EPStartXfer+0xac0>
 800ef12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef16:	095b      	lsrs	r3, r3, #5
 800ef18:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ef1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef20:	f003 031f 	and.w	r3, r3, #31
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d104      	bne.n	800ef32 <USB_EPStartXfer+0xa9c>
 800ef28:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ef2c:	3b01      	subs	r3, #1
 800ef2e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ef32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ef34:	881b      	ldrh	r3, [r3, #0]
 800ef36:	b29a      	uxth	r2, r3
 800ef38:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ef3c:	b29b      	uxth	r3, r3
 800ef3e:	029b      	lsls	r3, r3, #10
 800ef40:	b29b      	uxth	r3, r3
 800ef42:	4313      	orrs	r3, r2
 800ef44:	b29b      	uxth	r3, r3
 800ef46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ef4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ef4e:	b29a      	uxth	r2, r3
 800ef50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ef52:	801a      	strh	r2, [r3, #0]
 800ef54:	e050      	b.n	800eff8 <USB_EPStartXfer+0xb62>
 800ef56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d10a      	bne.n	800ef74 <USB_EPStartXfer+0xade>
 800ef5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ef60:	881b      	ldrh	r3, [r3, #0]
 800ef62:	b29b      	uxth	r3, r3
 800ef64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ef68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ef6c:	b29a      	uxth	r2, r3
 800ef6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ef70:	801a      	strh	r2, [r3, #0]
 800ef72:	e041      	b.n	800eff8 <USB_EPStartXfer+0xb62>
 800ef74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef78:	085b      	lsrs	r3, r3, #1
 800ef7a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ef7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef82:	f003 0301 	and.w	r3, r3, #1
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d004      	beq.n	800ef94 <USB_EPStartXfer+0xafe>
 800ef8a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ef8e:	3301      	adds	r3, #1
 800ef90:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ef94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ef96:	881b      	ldrh	r3, [r3, #0]
 800ef98:	b29a      	uxth	r2, r3
 800ef9a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ef9e:	b29b      	uxth	r3, r3
 800efa0:	029b      	lsls	r3, r3, #10
 800efa2:	b29b      	uxth	r3, r3
 800efa4:	4313      	orrs	r3, r2
 800efa6:	b29a      	uxth	r2, r3
 800efa8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800efaa:	801a      	strh	r2, [r3, #0]
 800efac:	e024      	b.n	800eff8 <USB_EPStartXfer+0xb62>
 800efae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800efb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	785b      	ldrb	r3, [r3, #1]
 800efba:	2b01      	cmp	r3, #1
 800efbc:	d11c      	bne.n	800eff8 <USB_EPStartXfer+0xb62>
 800efbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800efc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800efcc:	b29b      	uxth	r3, r3
 800efce:	461a      	mov	r2, r3
 800efd0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800efd2:	4413      	add	r3, r2
 800efd4:	673b      	str	r3, [r7, #112]	@ 0x70
 800efd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800efda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	781b      	ldrb	r3, [r3, #0]
 800efe2:	00da      	lsls	r2, r3, #3
 800efe4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800efe6:	4413      	add	r3, r2
 800efe8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800efec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800efee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eff2:	b29a      	uxth	r2, r3
 800eff4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eff6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800eff8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800effc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	895b      	ldrh	r3, [r3, #10]
 800f004:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f00c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	6959      	ldr	r1, [r3, #20]
 800f014:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f018:	b29b      	uxth	r3, r3
 800f01a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800f01e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800f022:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800f026:	6800      	ldr	r0, [r0, #0]
 800f028:	f000 ff20 	bl	800fe6c <USB_WritePMA>
 800f02c:	e0ca      	b.n	800f1c4 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f02e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f032:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	785b      	ldrb	r3, [r3, #1]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d177      	bne.n	800f12e <USB_EPStartXfer+0xc98>
 800f03e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f042:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f04a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f04e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f058:	b29b      	uxth	r3, r3
 800f05a:	461a      	mov	r2, r3
 800f05c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f05e:	4413      	add	r3, r2
 800f060:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f062:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f066:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	781b      	ldrb	r3, [r3, #0]
 800f06e:	00da      	lsls	r2, r3, #3
 800f070:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f072:	4413      	add	r3, r2
 800f074:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f078:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f07a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f07c:	881b      	ldrh	r3, [r3, #0]
 800f07e:	b29b      	uxth	r3, r3
 800f080:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f084:	b29a      	uxth	r2, r3
 800f086:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f088:	801a      	strh	r2, [r3, #0]
 800f08a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f08e:	2b3e      	cmp	r3, #62	@ 0x3e
 800f090:	d921      	bls.n	800f0d6 <USB_EPStartXfer+0xc40>
 800f092:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f096:	095b      	lsrs	r3, r3, #5
 800f098:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800f09c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f0a0:	f003 031f 	and.w	r3, r3, #31
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d104      	bne.n	800f0b2 <USB_EPStartXfer+0xc1c>
 800f0a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f0ac:	3b01      	subs	r3, #1
 800f0ae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800f0b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f0b4:	881b      	ldrh	r3, [r3, #0]
 800f0b6:	b29a      	uxth	r2, r3
 800f0b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f0bc:	b29b      	uxth	r3, r3
 800f0be:	029b      	lsls	r3, r3, #10
 800f0c0:	b29b      	uxth	r3, r3
 800f0c2:	4313      	orrs	r3, r2
 800f0c4:	b29b      	uxth	r3, r3
 800f0c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f0ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f0ce:	b29a      	uxth	r2, r3
 800f0d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f0d2:	801a      	strh	r2, [r3, #0]
 800f0d4:	e05c      	b.n	800f190 <USB_EPStartXfer+0xcfa>
 800f0d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d10a      	bne.n	800f0f4 <USB_EPStartXfer+0xc5e>
 800f0de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f0e0:	881b      	ldrh	r3, [r3, #0]
 800f0e2:	b29b      	uxth	r3, r3
 800f0e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f0e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f0ec:	b29a      	uxth	r2, r3
 800f0ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f0f0:	801a      	strh	r2, [r3, #0]
 800f0f2:	e04d      	b.n	800f190 <USB_EPStartXfer+0xcfa>
 800f0f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f0f8:	085b      	lsrs	r3, r3, #1
 800f0fa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800f0fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f102:	f003 0301 	and.w	r3, r3, #1
 800f106:	2b00      	cmp	r3, #0
 800f108:	d004      	beq.n	800f114 <USB_EPStartXfer+0xc7e>
 800f10a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f10e:	3301      	adds	r3, #1
 800f110:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800f114:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f116:	881b      	ldrh	r3, [r3, #0]
 800f118:	b29a      	uxth	r2, r3
 800f11a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f11e:	b29b      	uxth	r3, r3
 800f120:	029b      	lsls	r3, r3, #10
 800f122:	b29b      	uxth	r3, r3
 800f124:	4313      	orrs	r3, r2
 800f126:	b29a      	uxth	r2, r3
 800f128:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f12a:	801a      	strh	r2, [r3, #0]
 800f12c:	e030      	b.n	800f190 <USB_EPStartXfer+0xcfa>
 800f12e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f132:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	785b      	ldrb	r3, [r3, #1]
 800f13a:	2b01      	cmp	r3, #1
 800f13c:	d128      	bne.n	800f190 <USB_EPStartXfer+0xcfa>
 800f13e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f142:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f14c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f150:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f15a:	b29b      	uxth	r3, r3
 800f15c:	461a      	mov	r2, r3
 800f15e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f162:	4413      	add	r3, r2
 800f164:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f168:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f16c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	781b      	ldrb	r3, [r3, #0]
 800f174:	00da      	lsls	r2, r3, #3
 800f176:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f17a:	4413      	add	r3, r2
 800f17c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f180:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f188:	b29a      	uxth	r2, r3
 800f18a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f18e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800f190:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f194:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	891b      	ldrh	r3, [r3, #8]
 800f19c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f1a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f1a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	6959      	ldr	r1, [r3, #20]
 800f1ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f1b0:	b29b      	uxth	r3, r3
 800f1b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800f1b6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800f1ba:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800f1be:	6800      	ldr	r0, [r0, #0]
 800f1c0:	f000 fe54 	bl	800fe6c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800f1c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f1c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f1cc:	681a      	ldr	r2, [r3, #0]
 800f1ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f1d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	781b      	ldrb	r3, [r3, #0]
 800f1da:	009b      	lsls	r3, r3, #2
 800f1dc:	4413      	add	r3, r2
 800f1de:	881b      	ldrh	r3, [r3, #0]
 800f1e0:	b29b      	uxth	r3, r3
 800f1e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f1e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f1ea:	817b      	strh	r3, [r7, #10]
 800f1ec:	897b      	ldrh	r3, [r7, #10]
 800f1ee:	f083 0310 	eor.w	r3, r3, #16
 800f1f2:	817b      	strh	r3, [r7, #10]
 800f1f4:	897b      	ldrh	r3, [r7, #10]
 800f1f6:	f083 0320 	eor.w	r3, r3, #32
 800f1fa:	817b      	strh	r3, [r7, #10]
 800f1fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f200:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f204:	681a      	ldr	r2, [r3, #0]
 800f206:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f20a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	781b      	ldrb	r3, [r3, #0]
 800f212:	009b      	lsls	r3, r3, #2
 800f214:	441a      	add	r2, r3
 800f216:	897b      	ldrh	r3, [r7, #10]
 800f218:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f21c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f220:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f224:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f228:	b29b      	uxth	r3, r3
 800f22a:	8013      	strh	r3, [r2, #0]
 800f22c:	f000 bcde 	b.w	800fbec <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800f230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f234:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	7b1b      	ldrb	r3, [r3, #12]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	f040 80bb 	bne.w	800f3b8 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800f242:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f246:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	699a      	ldr	r2, [r3, #24]
 800f24e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f252:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	691b      	ldr	r3, [r3, #16]
 800f25a:	429a      	cmp	r2, r3
 800f25c:	d917      	bls.n	800f28e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800f25e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f262:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	691b      	ldr	r3, [r3, #16]
 800f26a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800f26e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f272:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	699a      	ldr	r2, [r3, #24]
 800f27a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f27e:	1ad2      	subs	r2, r2, r3
 800f280:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f284:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	619a      	str	r2, [r3, #24]
 800f28c:	e00e      	b.n	800f2ac <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800f28e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f292:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	699b      	ldr	r3, [r3, #24]
 800f29a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800f29e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f2a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800f2ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f2b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f2ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f2be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f2c8:	b29b      	uxth	r3, r3
 800f2ca:	461a      	mov	r2, r3
 800f2cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f2d0:	4413      	add	r3, r2
 800f2d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f2d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f2da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	781b      	ldrb	r3, [r3, #0]
 800f2e2:	00da      	lsls	r2, r3, #3
 800f2e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f2e8:	4413      	add	r3, r2
 800f2ea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f2ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f2f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f2f6:	881b      	ldrh	r3, [r3, #0]
 800f2f8:	b29b      	uxth	r3, r3
 800f2fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f2fe:	b29a      	uxth	r2, r3
 800f300:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f304:	801a      	strh	r2, [r3, #0]
 800f306:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f30a:	2b3e      	cmp	r3, #62	@ 0x3e
 800f30c:	d924      	bls.n	800f358 <USB_EPStartXfer+0xec2>
 800f30e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f312:	095b      	lsrs	r3, r3, #5
 800f314:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800f318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f31c:	f003 031f 	and.w	r3, r3, #31
 800f320:	2b00      	cmp	r3, #0
 800f322:	d104      	bne.n	800f32e <USB_EPStartXfer+0xe98>
 800f324:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800f328:	3b01      	subs	r3, #1
 800f32a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800f32e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f332:	881b      	ldrh	r3, [r3, #0]
 800f334:	b29a      	uxth	r2, r3
 800f336:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800f33a:	b29b      	uxth	r3, r3
 800f33c:	029b      	lsls	r3, r3, #10
 800f33e:	b29b      	uxth	r3, r3
 800f340:	4313      	orrs	r3, r2
 800f342:	b29b      	uxth	r3, r3
 800f344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f34c:	b29a      	uxth	r2, r3
 800f34e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f352:	801a      	strh	r2, [r3, #0]
 800f354:	f000 bc10 	b.w	800fb78 <USB_EPStartXfer+0x16e2>
 800f358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d10c      	bne.n	800f37a <USB_EPStartXfer+0xee4>
 800f360:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f364:	881b      	ldrh	r3, [r3, #0]
 800f366:	b29b      	uxth	r3, r3
 800f368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f36c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f370:	b29a      	uxth	r2, r3
 800f372:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f376:	801a      	strh	r2, [r3, #0]
 800f378:	e3fe      	b.n	800fb78 <USB_EPStartXfer+0x16e2>
 800f37a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f37e:	085b      	lsrs	r3, r3, #1
 800f380:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800f384:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f388:	f003 0301 	and.w	r3, r3, #1
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d004      	beq.n	800f39a <USB_EPStartXfer+0xf04>
 800f390:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800f394:	3301      	adds	r3, #1
 800f396:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800f39a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f39e:	881b      	ldrh	r3, [r3, #0]
 800f3a0:	b29a      	uxth	r2, r3
 800f3a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800f3a6:	b29b      	uxth	r3, r3
 800f3a8:	029b      	lsls	r3, r3, #10
 800f3aa:	b29b      	uxth	r3, r3
 800f3ac:	4313      	orrs	r3, r2
 800f3ae:	b29a      	uxth	r2, r3
 800f3b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f3b4:	801a      	strh	r2, [r3, #0]
 800f3b6:	e3df      	b.n	800fb78 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800f3b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f3bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	78db      	ldrb	r3, [r3, #3]
 800f3c4:	2b02      	cmp	r3, #2
 800f3c6:	f040 8218 	bne.w	800f7fa <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800f3ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f3ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	785b      	ldrb	r3, [r3, #1]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	f040 809d 	bne.w	800f516 <USB_EPStartXfer+0x1080>
 800f3dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f3e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f3ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f3ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f3f8:	b29b      	uxth	r3, r3
 800f3fa:	461a      	mov	r2, r3
 800f3fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f400:	4413      	add	r3, r2
 800f402:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f40a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	781b      	ldrb	r3, [r3, #0]
 800f412:	00da      	lsls	r2, r3, #3
 800f414:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f418:	4413      	add	r3, r2
 800f41a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f41e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800f422:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f426:	881b      	ldrh	r3, [r3, #0]
 800f428:	b29b      	uxth	r3, r3
 800f42a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f42e:	b29a      	uxth	r2, r3
 800f430:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f434:	801a      	strh	r2, [r3, #0]
 800f436:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f43a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	691b      	ldr	r3, [r3, #16]
 800f442:	2b3e      	cmp	r3, #62	@ 0x3e
 800f444:	d92b      	bls.n	800f49e <USB_EPStartXfer+0x1008>
 800f446:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f44a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	691b      	ldr	r3, [r3, #16]
 800f452:	095b      	lsrs	r3, r3, #5
 800f454:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800f458:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f45c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	691b      	ldr	r3, [r3, #16]
 800f464:	f003 031f 	and.w	r3, r3, #31
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d104      	bne.n	800f476 <USB_EPStartXfer+0xfe0>
 800f46c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f470:	3b01      	subs	r3, #1
 800f472:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800f476:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f47a:	881b      	ldrh	r3, [r3, #0]
 800f47c:	b29a      	uxth	r2, r3
 800f47e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f482:	b29b      	uxth	r3, r3
 800f484:	029b      	lsls	r3, r3, #10
 800f486:	b29b      	uxth	r3, r3
 800f488:	4313      	orrs	r3, r2
 800f48a:	b29b      	uxth	r3, r3
 800f48c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f494:	b29a      	uxth	r2, r3
 800f496:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f49a:	801a      	strh	r2, [r3, #0]
 800f49c:	e070      	b.n	800f580 <USB_EPStartXfer+0x10ea>
 800f49e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f4a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	691b      	ldr	r3, [r3, #16]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d10c      	bne.n	800f4c8 <USB_EPStartXfer+0x1032>
 800f4ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f4b2:	881b      	ldrh	r3, [r3, #0]
 800f4b4:	b29b      	uxth	r3, r3
 800f4b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f4ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f4be:	b29a      	uxth	r2, r3
 800f4c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f4c4:	801a      	strh	r2, [r3, #0]
 800f4c6:	e05b      	b.n	800f580 <USB_EPStartXfer+0x10ea>
 800f4c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f4cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	691b      	ldr	r3, [r3, #16]
 800f4d4:	085b      	lsrs	r3, r3, #1
 800f4d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800f4da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f4de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	691b      	ldr	r3, [r3, #16]
 800f4e6:	f003 0301 	and.w	r3, r3, #1
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d004      	beq.n	800f4f8 <USB_EPStartXfer+0x1062>
 800f4ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f4f2:	3301      	adds	r3, #1
 800f4f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800f4f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f4fc:	881b      	ldrh	r3, [r3, #0]
 800f4fe:	b29a      	uxth	r2, r3
 800f500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f504:	b29b      	uxth	r3, r3
 800f506:	029b      	lsls	r3, r3, #10
 800f508:	b29b      	uxth	r3, r3
 800f50a:	4313      	orrs	r3, r2
 800f50c:	b29a      	uxth	r2, r3
 800f50e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f512:	801a      	strh	r2, [r3, #0]
 800f514:	e034      	b.n	800f580 <USB_EPStartXfer+0x10ea>
 800f516:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f51a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	785b      	ldrb	r3, [r3, #1]
 800f522:	2b01      	cmp	r3, #1
 800f524:	d12c      	bne.n	800f580 <USB_EPStartXfer+0x10ea>
 800f526:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f52a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f534:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f538:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f542:	b29b      	uxth	r3, r3
 800f544:	461a      	mov	r2, r3
 800f546:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f54a:	4413      	add	r3, r2
 800f54c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f550:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f554:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	781b      	ldrb	r3, [r3, #0]
 800f55c:	00da      	lsls	r2, r3, #3
 800f55e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f562:	4413      	add	r3, r2
 800f564:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f568:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f56c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f570:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	691b      	ldr	r3, [r3, #16]
 800f578:	b29a      	uxth	r2, r3
 800f57a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800f57e:	801a      	strh	r2, [r3, #0]
 800f580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f584:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800f58e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f592:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	785b      	ldrb	r3, [r3, #1]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	f040 809d 	bne.w	800f6da <USB_EPStartXfer+0x1244>
 800f5a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f5a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f5ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f5b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f5bc:	b29b      	uxth	r3, r3
 800f5be:	461a      	mov	r2, r3
 800f5c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f5c4:	4413      	add	r3, r2
 800f5c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f5ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f5ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	781b      	ldrb	r3, [r3, #0]
 800f5d6:	00da      	lsls	r2, r3, #3
 800f5d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f5dc:	4413      	add	r3, r2
 800f5de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f5e2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f5e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f5ea:	881b      	ldrh	r3, [r3, #0]
 800f5ec:	b29b      	uxth	r3, r3
 800f5ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f5f2:	b29a      	uxth	r2, r3
 800f5f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f5f8:	801a      	strh	r2, [r3, #0]
 800f5fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f5fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	691b      	ldr	r3, [r3, #16]
 800f606:	2b3e      	cmp	r3, #62	@ 0x3e
 800f608:	d92b      	bls.n	800f662 <USB_EPStartXfer+0x11cc>
 800f60a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f60e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	691b      	ldr	r3, [r3, #16]
 800f616:	095b      	lsrs	r3, r3, #5
 800f618:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800f61c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f620:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	691b      	ldr	r3, [r3, #16]
 800f628:	f003 031f 	and.w	r3, r3, #31
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d104      	bne.n	800f63a <USB_EPStartXfer+0x11a4>
 800f630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f634:	3b01      	subs	r3, #1
 800f636:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800f63a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f63e:	881b      	ldrh	r3, [r3, #0]
 800f640:	b29a      	uxth	r2, r3
 800f642:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f646:	b29b      	uxth	r3, r3
 800f648:	029b      	lsls	r3, r3, #10
 800f64a:	b29b      	uxth	r3, r3
 800f64c:	4313      	orrs	r3, r2
 800f64e:	b29b      	uxth	r3, r3
 800f650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f658:	b29a      	uxth	r2, r3
 800f65a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f65e:	801a      	strh	r2, [r3, #0]
 800f660:	e069      	b.n	800f736 <USB_EPStartXfer+0x12a0>
 800f662:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f666:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	691b      	ldr	r3, [r3, #16]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d10c      	bne.n	800f68c <USB_EPStartXfer+0x11f6>
 800f672:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f676:	881b      	ldrh	r3, [r3, #0]
 800f678:	b29b      	uxth	r3, r3
 800f67a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f67e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f682:	b29a      	uxth	r2, r3
 800f684:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f688:	801a      	strh	r2, [r3, #0]
 800f68a:	e054      	b.n	800f736 <USB_EPStartXfer+0x12a0>
 800f68c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f690:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	691b      	ldr	r3, [r3, #16]
 800f698:	085b      	lsrs	r3, r3, #1
 800f69a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800f69e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f6a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	691b      	ldr	r3, [r3, #16]
 800f6aa:	f003 0301 	and.w	r3, r3, #1
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d004      	beq.n	800f6bc <USB_EPStartXfer+0x1226>
 800f6b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f6b6:	3301      	adds	r3, #1
 800f6b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800f6bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f6c0:	881b      	ldrh	r3, [r3, #0]
 800f6c2:	b29a      	uxth	r2, r3
 800f6c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f6c8:	b29b      	uxth	r3, r3
 800f6ca:	029b      	lsls	r3, r3, #10
 800f6cc:	b29b      	uxth	r3, r3
 800f6ce:	4313      	orrs	r3, r2
 800f6d0:	b29a      	uxth	r2, r3
 800f6d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f6d6:	801a      	strh	r2, [r3, #0]
 800f6d8:	e02d      	b.n	800f736 <USB_EPStartXfer+0x12a0>
 800f6da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f6de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	785b      	ldrb	r3, [r3, #1]
 800f6e6:	2b01      	cmp	r3, #1
 800f6e8:	d125      	bne.n	800f736 <USB_EPStartXfer+0x12a0>
 800f6ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f6ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f6f8:	b29b      	uxth	r3, r3
 800f6fa:	461a      	mov	r2, r3
 800f6fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f700:	4413      	add	r3, r2
 800f702:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800f706:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f70a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	781b      	ldrb	r3, [r3, #0]
 800f712:	00da      	lsls	r2, r3, #3
 800f714:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f718:	4413      	add	r3, r2
 800f71a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f71e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800f722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f726:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	691b      	ldr	r3, [r3, #16]
 800f72e:	b29a      	uxth	r2, r3
 800f730:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f734:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800f736:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f73a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	69db      	ldr	r3, [r3, #28]
 800f742:	2b00      	cmp	r3, #0
 800f744:	f000 8218 	beq.w	800fb78 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800f748:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f74c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f750:	681a      	ldr	r2, [r3, #0]
 800f752:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f756:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	781b      	ldrb	r3, [r3, #0]
 800f75e:	009b      	lsls	r3, r3, #2
 800f760:	4413      	add	r3, r2
 800f762:	881b      	ldrh	r3, [r3, #0]
 800f764:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f768:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800f76c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f770:	2b00      	cmp	r3, #0
 800f772:	d005      	beq.n	800f780 <USB_EPStartXfer+0x12ea>
 800f774:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800f778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d10d      	bne.n	800f79c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f780:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800f784:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f788:	2b00      	cmp	r3, #0
 800f78a:	f040 81f5 	bne.w	800fb78 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f78e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800f792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f796:	2b00      	cmp	r3, #0
 800f798:	f040 81ee 	bne.w	800fb78 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800f79c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f7a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f7a4:	681a      	ldr	r2, [r3, #0]
 800f7a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f7aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	781b      	ldrb	r3, [r3, #0]
 800f7b2:	009b      	lsls	r3, r3, #2
 800f7b4:	4413      	add	r3, r2
 800f7b6:	881b      	ldrh	r3, [r3, #0]
 800f7b8:	b29b      	uxth	r3, r3
 800f7ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f7be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f7c2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800f7c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f7ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f7ce:	681a      	ldr	r2, [r3, #0]
 800f7d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f7d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	781b      	ldrb	r3, [r3, #0]
 800f7dc:	009b      	lsls	r3, r3, #2
 800f7de:	441a      	add	r2, r3
 800f7e0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800f7e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f7e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f7ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f7f0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f7f4:	b29b      	uxth	r3, r3
 800f7f6:	8013      	strh	r3, [r2, #0]
 800f7f8:	e1be      	b.n	800fb78 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800f7fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f7fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	78db      	ldrb	r3, [r3, #3]
 800f806:	2b01      	cmp	r3, #1
 800f808:	f040 81b4 	bne.w	800fb74 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800f80c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f810:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	699a      	ldr	r2, [r3, #24]
 800f818:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f81c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	691b      	ldr	r3, [r3, #16]
 800f824:	429a      	cmp	r2, r3
 800f826:	d917      	bls.n	800f858 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800f828:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f82c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	691b      	ldr	r3, [r3, #16]
 800f834:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800f838:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f83c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	699a      	ldr	r2, [r3, #24]
 800f844:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f848:	1ad2      	subs	r2, r2, r3
 800f84a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f84e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	619a      	str	r2, [r3, #24]
 800f856:	e00e      	b.n	800f876 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800f858:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f85c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	699b      	ldr	r3, [r3, #24]
 800f864:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800f868:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f86c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	2200      	movs	r2, #0
 800f874:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800f876:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f87a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	785b      	ldrb	r3, [r3, #1]
 800f882:	2b00      	cmp	r3, #0
 800f884:	f040 8085 	bne.w	800f992 <USB_EPStartXfer+0x14fc>
 800f888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f88c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800f896:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f89a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f8a4:	b29b      	uxth	r3, r3
 800f8a6:	461a      	mov	r2, r3
 800f8a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f8ac:	4413      	add	r3, r2
 800f8ae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800f8b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f8b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	781b      	ldrb	r3, [r3, #0]
 800f8be:	00da      	lsls	r2, r3, #3
 800f8c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f8c4:	4413      	add	r3, r2
 800f8c6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f8ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f8ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f8d2:	881b      	ldrh	r3, [r3, #0]
 800f8d4:	b29b      	uxth	r3, r3
 800f8d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f8da:	b29a      	uxth	r2, r3
 800f8dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f8e0:	801a      	strh	r2, [r3, #0]
 800f8e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f8e6:	2b3e      	cmp	r3, #62	@ 0x3e
 800f8e8:	d923      	bls.n	800f932 <USB_EPStartXfer+0x149c>
 800f8ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f8ee:	095b      	lsrs	r3, r3, #5
 800f8f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800f8f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f8f8:	f003 031f 	and.w	r3, r3, #31
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d104      	bne.n	800f90a <USB_EPStartXfer+0x1474>
 800f900:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f904:	3b01      	subs	r3, #1
 800f906:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800f90a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f90e:	881b      	ldrh	r3, [r3, #0]
 800f910:	b29a      	uxth	r2, r3
 800f912:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f916:	b29b      	uxth	r3, r3
 800f918:	029b      	lsls	r3, r3, #10
 800f91a:	b29b      	uxth	r3, r3
 800f91c:	4313      	orrs	r3, r2
 800f91e:	b29b      	uxth	r3, r3
 800f920:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f924:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f928:	b29a      	uxth	r2, r3
 800f92a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f92e:	801a      	strh	r2, [r3, #0]
 800f930:	e060      	b.n	800f9f4 <USB_EPStartXfer+0x155e>
 800f932:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f936:	2b00      	cmp	r3, #0
 800f938:	d10c      	bne.n	800f954 <USB_EPStartXfer+0x14be>
 800f93a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f93e:	881b      	ldrh	r3, [r3, #0]
 800f940:	b29b      	uxth	r3, r3
 800f942:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f946:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f94a:	b29a      	uxth	r2, r3
 800f94c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f950:	801a      	strh	r2, [r3, #0]
 800f952:	e04f      	b.n	800f9f4 <USB_EPStartXfer+0x155e>
 800f954:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f958:	085b      	lsrs	r3, r3, #1
 800f95a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800f95e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f962:	f003 0301 	and.w	r3, r3, #1
 800f966:	2b00      	cmp	r3, #0
 800f968:	d004      	beq.n	800f974 <USB_EPStartXfer+0x14de>
 800f96a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f96e:	3301      	adds	r3, #1
 800f970:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800f974:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f978:	881b      	ldrh	r3, [r3, #0]
 800f97a:	b29a      	uxth	r2, r3
 800f97c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f980:	b29b      	uxth	r3, r3
 800f982:	029b      	lsls	r3, r3, #10
 800f984:	b29b      	uxth	r3, r3
 800f986:	4313      	orrs	r3, r2
 800f988:	b29a      	uxth	r2, r3
 800f98a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f98e:	801a      	strh	r2, [r3, #0]
 800f990:	e030      	b.n	800f9f4 <USB_EPStartXfer+0x155e>
 800f992:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f996:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	785b      	ldrb	r3, [r3, #1]
 800f99e:	2b01      	cmp	r3, #1
 800f9a0:	d128      	bne.n	800f9f4 <USB_EPStartXfer+0x155e>
 800f9a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f9a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800f9b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f9b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f9be:	b29b      	uxth	r3, r3
 800f9c0:	461a      	mov	r2, r3
 800f9c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f9c6:	4413      	add	r3, r2
 800f9c8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800f9cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f9d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	781b      	ldrb	r3, [r3, #0]
 800f9d8:	00da      	lsls	r2, r3, #3
 800f9da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f9de:	4413      	add	r3, r2
 800f9e0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f9e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f9e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f9ec:	b29a      	uxth	r2, r3
 800f9ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800f9f2:	801a      	strh	r2, [r3, #0]
 800f9f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f9f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800fa02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fa06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	785b      	ldrb	r3, [r3, #1]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	f040 8085 	bne.w	800fb1e <USB_EPStartXfer+0x1688>
 800fa14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fa18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800fa22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fa26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800fa30:	b29b      	uxth	r3, r3
 800fa32:	461a      	mov	r2, r3
 800fa34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800fa38:	4413      	add	r3, r2
 800fa3a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800fa3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fa42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	781b      	ldrb	r3, [r3, #0]
 800fa4a:	00da      	lsls	r2, r3, #3
 800fa4c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800fa50:	4413      	add	r3, r2
 800fa52:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800fa56:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800fa5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800fa5e:	881b      	ldrh	r3, [r3, #0]
 800fa60:	b29b      	uxth	r3, r3
 800fa62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fa66:	b29a      	uxth	r2, r3
 800fa68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800fa6c:	801a      	strh	r2, [r3, #0]
 800fa6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fa72:	2b3e      	cmp	r3, #62	@ 0x3e
 800fa74:	d923      	bls.n	800fabe <USB_EPStartXfer+0x1628>
 800fa76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fa7a:	095b      	lsrs	r3, r3, #5
 800fa7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800fa80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fa84:	f003 031f 	and.w	r3, r3, #31
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d104      	bne.n	800fa96 <USB_EPStartXfer+0x1600>
 800fa8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fa90:	3b01      	subs	r3, #1
 800fa92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800fa96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800fa9a:	881b      	ldrh	r3, [r3, #0]
 800fa9c:	b29a      	uxth	r2, r3
 800fa9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800faa2:	b29b      	uxth	r3, r3
 800faa4:	029b      	lsls	r3, r3, #10
 800faa6:	b29b      	uxth	r3, r3
 800faa8:	4313      	orrs	r3, r2
 800faaa:	b29b      	uxth	r3, r3
 800faac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fab0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fab4:	b29a      	uxth	r2, r3
 800fab6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800faba:	801a      	strh	r2, [r3, #0]
 800fabc:	e05c      	b.n	800fb78 <USB_EPStartXfer+0x16e2>
 800fabe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d10c      	bne.n	800fae0 <USB_EPStartXfer+0x164a>
 800fac6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800faca:	881b      	ldrh	r3, [r3, #0]
 800facc:	b29b      	uxth	r3, r3
 800face:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fad2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fad6:	b29a      	uxth	r2, r3
 800fad8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800fadc:	801a      	strh	r2, [r3, #0]
 800fade:	e04b      	b.n	800fb78 <USB_EPStartXfer+0x16e2>
 800fae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fae4:	085b      	lsrs	r3, r3, #1
 800fae6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800faea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800faee:	f003 0301 	and.w	r3, r3, #1
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d004      	beq.n	800fb00 <USB_EPStartXfer+0x166a>
 800faf6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fafa:	3301      	adds	r3, #1
 800fafc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800fb00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800fb04:	881b      	ldrh	r3, [r3, #0]
 800fb06:	b29a      	uxth	r2, r3
 800fb08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fb0c:	b29b      	uxth	r3, r3
 800fb0e:	029b      	lsls	r3, r3, #10
 800fb10:	b29b      	uxth	r3, r3
 800fb12:	4313      	orrs	r3, r2
 800fb14:	b29a      	uxth	r2, r3
 800fb16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800fb1a:	801a      	strh	r2, [r3, #0]
 800fb1c:	e02c      	b.n	800fb78 <USB_EPStartXfer+0x16e2>
 800fb1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fb22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	785b      	ldrb	r3, [r3, #1]
 800fb2a:	2b01      	cmp	r3, #1
 800fb2c:	d124      	bne.n	800fb78 <USB_EPStartXfer+0x16e2>
 800fb2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fb32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800fb3c:	b29b      	uxth	r3, r3
 800fb3e:	461a      	mov	r2, r3
 800fb40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800fb44:	4413      	add	r3, r2
 800fb46:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800fb4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fb4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	781b      	ldrb	r3, [r3, #0]
 800fb56:	00da      	lsls	r2, r3, #3
 800fb58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800fb5c:	4413      	add	r3, r2
 800fb5e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800fb62:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800fb66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fb6a:	b29a      	uxth	r2, r3
 800fb6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800fb70:	801a      	strh	r2, [r3, #0]
 800fb72:	e001      	b.n	800fb78 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800fb74:	2301      	movs	r3, #1
 800fb76:	e03a      	b.n	800fbee <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800fb78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fb7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800fb80:	681a      	ldr	r2, [r3, #0]
 800fb82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fb86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	781b      	ldrb	r3, [r3, #0]
 800fb8e:	009b      	lsls	r3, r3, #2
 800fb90:	4413      	add	r3, r2
 800fb92:	881b      	ldrh	r3, [r3, #0]
 800fb94:	b29b      	uxth	r3, r3
 800fb96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800fb9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fb9e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800fba2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800fba6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800fbaa:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800fbae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800fbb2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800fbb6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800fbba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fbbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800fbc2:	681a      	ldr	r2, [r3, #0]
 800fbc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fbc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	781b      	ldrb	r3, [r3, #0]
 800fbd0:	009b      	lsls	r3, r3, #2
 800fbd2:	441a      	add	r2, r3
 800fbd4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800fbd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fbdc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fbe0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fbe4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fbe8:	b29b      	uxth	r3, r3
 800fbea:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800fbec:	2300      	movs	r3, #0
}
 800fbee:	4618      	mov	r0, r3
 800fbf0:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	bd80      	pop	{r7, pc}

0800fbf8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800fbf8:	b480      	push	{r7}
 800fbfa:	b085      	sub	sp, #20
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
 800fc00:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800fc02:	683b      	ldr	r3, [r7, #0]
 800fc04:	785b      	ldrb	r3, [r3, #1]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d020      	beq.n	800fc4c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800fc0a:	687a      	ldr	r2, [r7, #4]
 800fc0c:	683b      	ldr	r3, [r7, #0]
 800fc0e:	781b      	ldrb	r3, [r3, #0]
 800fc10:	009b      	lsls	r3, r3, #2
 800fc12:	4413      	add	r3, r2
 800fc14:	881b      	ldrh	r3, [r3, #0]
 800fc16:	b29b      	uxth	r3, r3
 800fc18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fc1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fc20:	81bb      	strh	r3, [r7, #12]
 800fc22:	89bb      	ldrh	r3, [r7, #12]
 800fc24:	f083 0310 	eor.w	r3, r3, #16
 800fc28:	81bb      	strh	r3, [r7, #12]
 800fc2a:	687a      	ldr	r2, [r7, #4]
 800fc2c:	683b      	ldr	r3, [r7, #0]
 800fc2e:	781b      	ldrb	r3, [r3, #0]
 800fc30:	009b      	lsls	r3, r3, #2
 800fc32:	441a      	add	r2, r3
 800fc34:	89bb      	ldrh	r3, [r7, #12]
 800fc36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fc3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fc3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fc42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fc46:	b29b      	uxth	r3, r3
 800fc48:	8013      	strh	r3, [r2, #0]
 800fc4a:	e01f      	b.n	800fc8c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800fc4c:	687a      	ldr	r2, [r7, #4]
 800fc4e:	683b      	ldr	r3, [r7, #0]
 800fc50:	781b      	ldrb	r3, [r3, #0]
 800fc52:	009b      	lsls	r3, r3, #2
 800fc54:	4413      	add	r3, r2
 800fc56:	881b      	ldrh	r3, [r3, #0]
 800fc58:	b29b      	uxth	r3, r3
 800fc5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800fc5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fc62:	81fb      	strh	r3, [r7, #14]
 800fc64:	89fb      	ldrh	r3, [r7, #14]
 800fc66:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800fc6a:	81fb      	strh	r3, [r7, #14]
 800fc6c:	687a      	ldr	r2, [r7, #4]
 800fc6e:	683b      	ldr	r3, [r7, #0]
 800fc70:	781b      	ldrb	r3, [r3, #0]
 800fc72:	009b      	lsls	r3, r3, #2
 800fc74:	441a      	add	r2, r3
 800fc76:	89fb      	ldrh	r3, [r7, #14]
 800fc78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fc7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fc80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fc84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fc88:	b29b      	uxth	r3, r3
 800fc8a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800fc8c:	2300      	movs	r3, #0
}
 800fc8e:	4618      	mov	r0, r3
 800fc90:	3714      	adds	r7, #20
 800fc92:	46bd      	mov	sp, r7
 800fc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc98:	4770      	bx	lr

0800fc9a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800fc9a:	b480      	push	{r7}
 800fc9c:	b087      	sub	sp, #28
 800fc9e:	af00      	add	r7, sp, #0
 800fca0:	6078      	str	r0, [r7, #4]
 800fca2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800fca4:	683b      	ldr	r3, [r7, #0]
 800fca6:	7b1b      	ldrb	r3, [r3, #12]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	f040 809d 	bne.w	800fde8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	785b      	ldrb	r3, [r3, #1]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d04c      	beq.n	800fd50 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800fcb6:	687a      	ldr	r2, [r7, #4]
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	781b      	ldrb	r3, [r3, #0]
 800fcbc:	009b      	lsls	r3, r3, #2
 800fcbe:	4413      	add	r3, r2
 800fcc0:	881b      	ldrh	r3, [r3, #0]
 800fcc2:	823b      	strh	r3, [r7, #16]
 800fcc4:	8a3b      	ldrh	r3, [r7, #16]
 800fcc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d01b      	beq.n	800fd06 <USB_EPClearStall+0x6c>
 800fcce:	687a      	ldr	r2, [r7, #4]
 800fcd0:	683b      	ldr	r3, [r7, #0]
 800fcd2:	781b      	ldrb	r3, [r3, #0]
 800fcd4:	009b      	lsls	r3, r3, #2
 800fcd6:	4413      	add	r3, r2
 800fcd8:	881b      	ldrh	r3, [r3, #0]
 800fcda:	b29b      	uxth	r3, r3
 800fcdc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fce0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fce4:	81fb      	strh	r3, [r7, #14]
 800fce6:	687a      	ldr	r2, [r7, #4]
 800fce8:	683b      	ldr	r3, [r7, #0]
 800fcea:	781b      	ldrb	r3, [r3, #0]
 800fcec:	009b      	lsls	r3, r3, #2
 800fcee:	441a      	add	r2, r3
 800fcf0:	89fb      	ldrh	r3, [r7, #14]
 800fcf2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fcf6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fcfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fcfe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800fd02:	b29b      	uxth	r3, r3
 800fd04:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800fd06:	683b      	ldr	r3, [r7, #0]
 800fd08:	78db      	ldrb	r3, [r3, #3]
 800fd0a:	2b01      	cmp	r3, #1
 800fd0c:	d06c      	beq.n	800fde8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800fd0e:	687a      	ldr	r2, [r7, #4]
 800fd10:	683b      	ldr	r3, [r7, #0]
 800fd12:	781b      	ldrb	r3, [r3, #0]
 800fd14:	009b      	lsls	r3, r3, #2
 800fd16:	4413      	add	r3, r2
 800fd18:	881b      	ldrh	r3, [r3, #0]
 800fd1a:	b29b      	uxth	r3, r3
 800fd1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fd20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fd24:	81bb      	strh	r3, [r7, #12]
 800fd26:	89bb      	ldrh	r3, [r7, #12]
 800fd28:	f083 0320 	eor.w	r3, r3, #32
 800fd2c:	81bb      	strh	r3, [r7, #12]
 800fd2e:	687a      	ldr	r2, [r7, #4]
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	781b      	ldrb	r3, [r3, #0]
 800fd34:	009b      	lsls	r3, r3, #2
 800fd36:	441a      	add	r2, r3
 800fd38:	89bb      	ldrh	r3, [r7, #12]
 800fd3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fd3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fd42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fd46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fd4a:	b29b      	uxth	r3, r3
 800fd4c:	8013      	strh	r3, [r2, #0]
 800fd4e:	e04b      	b.n	800fde8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800fd50:	687a      	ldr	r2, [r7, #4]
 800fd52:	683b      	ldr	r3, [r7, #0]
 800fd54:	781b      	ldrb	r3, [r3, #0]
 800fd56:	009b      	lsls	r3, r3, #2
 800fd58:	4413      	add	r3, r2
 800fd5a:	881b      	ldrh	r3, [r3, #0]
 800fd5c:	82fb      	strh	r3, [r7, #22]
 800fd5e:	8afb      	ldrh	r3, [r7, #22]
 800fd60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d01b      	beq.n	800fda0 <USB_EPClearStall+0x106>
 800fd68:	687a      	ldr	r2, [r7, #4]
 800fd6a:	683b      	ldr	r3, [r7, #0]
 800fd6c:	781b      	ldrb	r3, [r3, #0]
 800fd6e:	009b      	lsls	r3, r3, #2
 800fd70:	4413      	add	r3, r2
 800fd72:	881b      	ldrh	r3, [r3, #0]
 800fd74:	b29b      	uxth	r3, r3
 800fd76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fd7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fd7e:	82bb      	strh	r3, [r7, #20]
 800fd80:	687a      	ldr	r2, [r7, #4]
 800fd82:	683b      	ldr	r3, [r7, #0]
 800fd84:	781b      	ldrb	r3, [r3, #0]
 800fd86:	009b      	lsls	r3, r3, #2
 800fd88:	441a      	add	r2, r3
 800fd8a:	8abb      	ldrh	r3, [r7, #20]
 800fd8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fd90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fd94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800fd98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fd9c:	b29b      	uxth	r3, r3
 800fd9e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800fda0:	687a      	ldr	r2, [r7, #4]
 800fda2:	683b      	ldr	r3, [r7, #0]
 800fda4:	781b      	ldrb	r3, [r3, #0]
 800fda6:	009b      	lsls	r3, r3, #2
 800fda8:	4413      	add	r3, r2
 800fdaa:	881b      	ldrh	r3, [r3, #0]
 800fdac:	b29b      	uxth	r3, r3
 800fdae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800fdb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fdb6:	827b      	strh	r3, [r7, #18]
 800fdb8:	8a7b      	ldrh	r3, [r7, #18]
 800fdba:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800fdbe:	827b      	strh	r3, [r7, #18]
 800fdc0:	8a7b      	ldrh	r3, [r7, #18]
 800fdc2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800fdc6:	827b      	strh	r3, [r7, #18]
 800fdc8:	687a      	ldr	r2, [r7, #4]
 800fdca:	683b      	ldr	r3, [r7, #0]
 800fdcc:	781b      	ldrb	r3, [r3, #0]
 800fdce:	009b      	lsls	r3, r3, #2
 800fdd0:	441a      	add	r2, r3
 800fdd2:	8a7b      	ldrh	r3, [r7, #18]
 800fdd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fdd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fddc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fde0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fde4:	b29b      	uxth	r3, r3
 800fde6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800fde8:	2300      	movs	r3, #0
}
 800fdea:	4618      	mov	r0, r3
 800fdec:	371c      	adds	r7, #28
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf4:	4770      	bx	lr

0800fdf6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800fdf6:	b480      	push	{r7}
 800fdf8:	b083      	sub	sp, #12
 800fdfa:	af00      	add	r7, sp, #0
 800fdfc:	6078      	str	r0, [r7, #4]
 800fdfe:	460b      	mov	r3, r1
 800fe00:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800fe02:	78fb      	ldrb	r3, [r7, #3]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d103      	bne.n	800fe10 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	2280      	movs	r2, #128	@ 0x80
 800fe0c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800fe10:	2300      	movs	r3, #0
}
 800fe12:	4618      	mov	r0, r3
 800fe14:	370c      	adds	r7, #12
 800fe16:	46bd      	mov	sp, r7
 800fe18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1c:	4770      	bx	lr

0800fe1e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800fe1e:	b480      	push	{r7}
 800fe20:	b083      	sub	sp, #12
 800fe22:	af00      	add	r7, sp, #0
 800fe24:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800fe2c:	b29b      	uxth	r3, r3
 800fe2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fe32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fe36:	b29a      	uxth	r2, r3
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800fe3e:	2300      	movs	r3, #0
}
 800fe40:	4618      	mov	r0, r3
 800fe42:	370c      	adds	r7, #12
 800fe44:	46bd      	mov	sp, r7
 800fe46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4a:	4770      	bx	lr

0800fe4c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800fe4c:	b480      	push	{r7}
 800fe4e:	b085      	sub	sp, #20
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800fe5a:	b29b      	uxth	r3, r3
 800fe5c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800fe5e:	68fb      	ldr	r3, [r7, #12]
}
 800fe60:	4618      	mov	r0, r3
 800fe62:	3714      	adds	r7, #20
 800fe64:	46bd      	mov	sp, r7
 800fe66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6a:	4770      	bx	lr

0800fe6c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800fe6c:	b480      	push	{r7}
 800fe6e:	b08b      	sub	sp, #44	@ 0x2c
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	60f8      	str	r0, [r7, #12]
 800fe74:	60b9      	str	r1, [r7, #8]
 800fe76:	4611      	mov	r1, r2
 800fe78:	461a      	mov	r2, r3
 800fe7a:	460b      	mov	r3, r1
 800fe7c:	80fb      	strh	r3, [r7, #6]
 800fe7e:	4613      	mov	r3, r2
 800fe80:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800fe82:	88bb      	ldrh	r3, [r7, #4]
 800fe84:	3301      	adds	r3, #1
 800fe86:	085b      	lsrs	r3, r3, #1
 800fe88:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800fe8e:	68bb      	ldr	r3, [r7, #8]
 800fe90:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800fe92:	88fa      	ldrh	r2, [r7, #6]
 800fe94:	697b      	ldr	r3, [r7, #20]
 800fe96:	4413      	add	r3, r2
 800fe98:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800fe9c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800fe9e:	69bb      	ldr	r3, [r7, #24]
 800fea0:	627b      	str	r3, [r7, #36]	@ 0x24
 800fea2:	e01b      	b.n	800fedc <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800fea4:	69fb      	ldr	r3, [r7, #28]
 800fea6:	781b      	ldrb	r3, [r3, #0]
 800fea8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800feaa:	69fb      	ldr	r3, [r7, #28]
 800feac:	3301      	adds	r3, #1
 800feae:	781b      	ldrb	r3, [r3, #0]
 800feb0:	021b      	lsls	r3, r3, #8
 800feb2:	b21a      	sxth	r2, r3
 800feb4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800feb8:	4313      	orrs	r3, r2
 800feba:	b21b      	sxth	r3, r3
 800febc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800febe:	6a3b      	ldr	r3, [r7, #32]
 800fec0:	8a7a      	ldrh	r2, [r7, #18]
 800fec2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800fec4:	6a3b      	ldr	r3, [r7, #32]
 800fec6:	3302      	adds	r3, #2
 800fec8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800feca:	69fb      	ldr	r3, [r7, #28]
 800fecc:	3301      	adds	r3, #1
 800fece:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800fed0:	69fb      	ldr	r3, [r7, #28]
 800fed2:	3301      	adds	r3, #1
 800fed4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800fed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fed8:	3b01      	subs	r3, #1
 800feda:	627b      	str	r3, [r7, #36]	@ 0x24
 800fedc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d1e0      	bne.n	800fea4 <USB_WritePMA+0x38>
  }
}
 800fee2:	bf00      	nop
 800fee4:	bf00      	nop
 800fee6:	372c      	adds	r7, #44	@ 0x2c
 800fee8:	46bd      	mov	sp, r7
 800feea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feee:	4770      	bx	lr

0800fef0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800fef0:	b480      	push	{r7}
 800fef2:	b08b      	sub	sp, #44	@ 0x2c
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	60f8      	str	r0, [r7, #12]
 800fef8:	60b9      	str	r1, [r7, #8]
 800fefa:	4611      	mov	r1, r2
 800fefc:	461a      	mov	r2, r3
 800fefe:	460b      	mov	r3, r1
 800ff00:	80fb      	strh	r3, [r7, #6]
 800ff02:	4613      	mov	r3, r2
 800ff04:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ff06:	88bb      	ldrh	r3, [r7, #4]
 800ff08:	085b      	lsrs	r3, r3, #1
 800ff0a:	b29b      	uxth	r3, r3
 800ff0c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ff12:	68bb      	ldr	r3, [r7, #8]
 800ff14:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ff16:	88fa      	ldrh	r2, [r7, #6]
 800ff18:	697b      	ldr	r3, [r7, #20]
 800ff1a:	4413      	add	r3, r2
 800ff1c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ff20:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ff22:	69bb      	ldr	r3, [r7, #24]
 800ff24:	627b      	str	r3, [r7, #36]	@ 0x24
 800ff26:	e018      	b.n	800ff5a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800ff28:	6a3b      	ldr	r3, [r7, #32]
 800ff2a:	881b      	ldrh	r3, [r3, #0]
 800ff2c:	b29b      	uxth	r3, r3
 800ff2e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ff30:	6a3b      	ldr	r3, [r7, #32]
 800ff32:	3302      	adds	r3, #2
 800ff34:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ff36:	693b      	ldr	r3, [r7, #16]
 800ff38:	b2da      	uxtb	r2, r3
 800ff3a:	69fb      	ldr	r3, [r7, #28]
 800ff3c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ff3e:	69fb      	ldr	r3, [r7, #28]
 800ff40:	3301      	adds	r3, #1
 800ff42:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800ff44:	693b      	ldr	r3, [r7, #16]
 800ff46:	0a1b      	lsrs	r3, r3, #8
 800ff48:	b2da      	uxtb	r2, r3
 800ff4a:	69fb      	ldr	r3, [r7, #28]
 800ff4c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ff4e:	69fb      	ldr	r3, [r7, #28]
 800ff50:	3301      	adds	r3, #1
 800ff52:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ff54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff56:	3b01      	subs	r3, #1
 800ff58:	627b      	str	r3, [r7, #36]	@ 0x24
 800ff5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d1e3      	bne.n	800ff28 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ff60:	88bb      	ldrh	r3, [r7, #4]
 800ff62:	f003 0301 	and.w	r3, r3, #1
 800ff66:	b29b      	uxth	r3, r3
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d007      	beq.n	800ff7c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800ff6c:	6a3b      	ldr	r3, [r7, #32]
 800ff6e:	881b      	ldrh	r3, [r3, #0]
 800ff70:	b29b      	uxth	r3, r3
 800ff72:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ff74:	693b      	ldr	r3, [r7, #16]
 800ff76:	b2da      	uxtb	r2, r3
 800ff78:	69fb      	ldr	r3, [r7, #28]
 800ff7a:	701a      	strb	r2, [r3, #0]
  }
}
 800ff7c:	bf00      	nop
 800ff7e:	372c      	adds	r7, #44	@ 0x2c
 800ff80:	46bd      	mov	sp, r7
 800ff82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff86:	4770      	bx	lr

0800ff88 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b084      	sub	sp, #16
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	6078      	str	r0, [r7, #4]
 800ff90:	460b      	mov	r3, r1
 800ff92:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ff94:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ff98:	f002 fc74 	bl	8012884 <USBD_static_malloc>
 800ff9c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d109      	bne.n	800ffb8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	32b0      	adds	r2, #176	@ 0xb0
 800ffae:	2100      	movs	r1, #0
 800ffb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ffb4:	2302      	movs	r3, #2
 800ffb6:	e0d4      	b.n	8010162 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ffb8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800ffbc:	2100      	movs	r1, #0
 800ffbe:	68f8      	ldr	r0, [r7, #12]
 800ffc0:	f003 fa21 	bl	8013406 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	32b0      	adds	r2, #176	@ 0xb0
 800ffce:	68f9      	ldr	r1, [r7, #12]
 800ffd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	32b0      	adds	r2, #176	@ 0xb0
 800ffde:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	7c1b      	ldrb	r3, [r3, #16]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d138      	bne.n	8010062 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800fff0:	4b5e      	ldr	r3, [pc, #376]	@ (801016c <USBD_CDC_Init+0x1e4>)
 800fff2:	7819      	ldrb	r1, [r3, #0]
 800fff4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fff8:	2202      	movs	r2, #2
 800fffa:	6878      	ldr	r0, [r7, #4]
 800fffc:	f002 fae9 	bl	80125d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010000:	4b5a      	ldr	r3, [pc, #360]	@ (801016c <USBD_CDC_Init+0x1e4>)
 8010002:	781b      	ldrb	r3, [r3, #0]
 8010004:	f003 020f 	and.w	r2, r3, #15
 8010008:	6879      	ldr	r1, [r7, #4]
 801000a:	4613      	mov	r3, r2
 801000c:	009b      	lsls	r3, r3, #2
 801000e:	4413      	add	r3, r2
 8010010:	009b      	lsls	r3, r3, #2
 8010012:	440b      	add	r3, r1
 8010014:	3324      	adds	r3, #36	@ 0x24
 8010016:	2201      	movs	r2, #1
 8010018:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801001a:	4b55      	ldr	r3, [pc, #340]	@ (8010170 <USBD_CDC_Init+0x1e8>)
 801001c:	7819      	ldrb	r1, [r3, #0]
 801001e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010022:	2202      	movs	r2, #2
 8010024:	6878      	ldr	r0, [r7, #4]
 8010026:	f002 fad4 	bl	80125d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801002a:	4b51      	ldr	r3, [pc, #324]	@ (8010170 <USBD_CDC_Init+0x1e8>)
 801002c:	781b      	ldrb	r3, [r3, #0]
 801002e:	f003 020f 	and.w	r2, r3, #15
 8010032:	6879      	ldr	r1, [r7, #4]
 8010034:	4613      	mov	r3, r2
 8010036:	009b      	lsls	r3, r3, #2
 8010038:	4413      	add	r3, r2
 801003a:	009b      	lsls	r3, r3, #2
 801003c:	440b      	add	r3, r1
 801003e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010042:	2201      	movs	r2, #1
 8010044:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8010046:	4b4b      	ldr	r3, [pc, #300]	@ (8010174 <USBD_CDC_Init+0x1ec>)
 8010048:	781b      	ldrb	r3, [r3, #0]
 801004a:	f003 020f 	and.w	r2, r3, #15
 801004e:	6879      	ldr	r1, [r7, #4]
 8010050:	4613      	mov	r3, r2
 8010052:	009b      	lsls	r3, r3, #2
 8010054:	4413      	add	r3, r2
 8010056:	009b      	lsls	r3, r3, #2
 8010058:	440b      	add	r3, r1
 801005a:	3326      	adds	r3, #38	@ 0x26
 801005c:	2210      	movs	r2, #16
 801005e:	801a      	strh	r2, [r3, #0]
 8010060:	e035      	b.n	80100ce <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8010062:	4b42      	ldr	r3, [pc, #264]	@ (801016c <USBD_CDC_Init+0x1e4>)
 8010064:	7819      	ldrb	r1, [r3, #0]
 8010066:	2340      	movs	r3, #64	@ 0x40
 8010068:	2202      	movs	r2, #2
 801006a:	6878      	ldr	r0, [r7, #4]
 801006c:	f002 fab1 	bl	80125d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010070:	4b3e      	ldr	r3, [pc, #248]	@ (801016c <USBD_CDC_Init+0x1e4>)
 8010072:	781b      	ldrb	r3, [r3, #0]
 8010074:	f003 020f 	and.w	r2, r3, #15
 8010078:	6879      	ldr	r1, [r7, #4]
 801007a:	4613      	mov	r3, r2
 801007c:	009b      	lsls	r3, r3, #2
 801007e:	4413      	add	r3, r2
 8010080:	009b      	lsls	r3, r3, #2
 8010082:	440b      	add	r3, r1
 8010084:	3324      	adds	r3, #36	@ 0x24
 8010086:	2201      	movs	r2, #1
 8010088:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801008a:	4b39      	ldr	r3, [pc, #228]	@ (8010170 <USBD_CDC_Init+0x1e8>)
 801008c:	7819      	ldrb	r1, [r3, #0]
 801008e:	2340      	movs	r3, #64	@ 0x40
 8010090:	2202      	movs	r2, #2
 8010092:	6878      	ldr	r0, [r7, #4]
 8010094:	f002 fa9d 	bl	80125d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8010098:	4b35      	ldr	r3, [pc, #212]	@ (8010170 <USBD_CDC_Init+0x1e8>)
 801009a:	781b      	ldrb	r3, [r3, #0]
 801009c:	f003 020f 	and.w	r2, r3, #15
 80100a0:	6879      	ldr	r1, [r7, #4]
 80100a2:	4613      	mov	r3, r2
 80100a4:	009b      	lsls	r3, r3, #2
 80100a6:	4413      	add	r3, r2
 80100a8:	009b      	lsls	r3, r3, #2
 80100aa:	440b      	add	r3, r1
 80100ac:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80100b0:	2201      	movs	r2, #1
 80100b2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80100b4:	4b2f      	ldr	r3, [pc, #188]	@ (8010174 <USBD_CDC_Init+0x1ec>)
 80100b6:	781b      	ldrb	r3, [r3, #0]
 80100b8:	f003 020f 	and.w	r2, r3, #15
 80100bc:	6879      	ldr	r1, [r7, #4]
 80100be:	4613      	mov	r3, r2
 80100c0:	009b      	lsls	r3, r3, #2
 80100c2:	4413      	add	r3, r2
 80100c4:	009b      	lsls	r3, r3, #2
 80100c6:	440b      	add	r3, r1
 80100c8:	3326      	adds	r3, #38	@ 0x26
 80100ca:	2210      	movs	r2, #16
 80100cc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80100ce:	4b29      	ldr	r3, [pc, #164]	@ (8010174 <USBD_CDC_Init+0x1ec>)
 80100d0:	7819      	ldrb	r1, [r3, #0]
 80100d2:	2308      	movs	r3, #8
 80100d4:	2203      	movs	r2, #3
 80100d6:	6878      	ldr	r0, [r7, #4]
 80100d8:	f002 fa7b 	bl	80125d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80100dc:	4b25      	ldr	r3, [pc, #148]	@ (8010174 <USBD_CDC_Init+0x1ec>)
 80100de:	781b      	ldrb	r3, [r3, #0]
 80100e0:	f003 020f 	and.w	r2, r3, #15
 80100e4:	6879      	ldr	r1, [r7, #4]
 80100e6:	4613      	mov	r3, r2
 80100e8:	009b      	lsls	r3, r3, #2
 80100ea:	4413      	add	r3, r2
 80100ec:	009b      	lsls	r3, r3, #2
 80100ee:	440b      	add	r3, r1
 80100f0:	3324      	adds	r3, #36	@ 0x24
 80100f2:	2201      	movs	r2, #1
 80100f4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	2200      	movs	r2, #0
 80100fa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010104:	687a      	ldr	r2, [r7, #4]
 8010106:	33b0      	adds	r3, #176	@ 0xb0
 8010108:	009b      	lsls	r3, r3, #2
 801010a:	4413      	add	r3, r2
 801010c:	685b      	ldr	r3, [r3, #4]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	2200      	movs	r2, #0
 8010116:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	2200      	movs	r2, #0
 801011e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8010128:	2b00      	cmp	r3, #0
 801012a:	d101      	bne.n	8010130 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 801012c:	2302      	movs	r3, #2
 801012e:	e018      	b.n	8010162 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	7c1b      	ldrb	r3, [r3, #16]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d10a      	bne.n	801014e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010138:	4b0d      	ldr	r3, [pc, #52]	@ (8010170 <USBD_CDC_Init+0x1e8>)
 801013a:	7819      	ldrb	r1, [r3, #0]
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010142:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010146:	6878      	ldr	r0, [r7, #4]
 8010148:	f002 fb32 	bl	80127b0 <USBD_LL_PrepareReceive>
 801014c:	e008      	b.n	8010160 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801014e:	4b08      	ldr	r3, [pc, #32]	@ (8010170 <USBD_CDC_Init+0x1e8>)
 8010150:	7819      	ldrb	r1, [r3, #0]
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010158:	2340      	movs	r3, #64	@ 0x40
 801015a:	6878      	ldr	r0, [r7, #4]
 801015c:	f002 fb28 	bl	80127b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010160:	2300      	movs	r3, #0
}
 8010162:	4618      	mov	r0, r3
 8010164:	3710      	adds	r7, #16
 8010166:	46bd      	mov	sp, r7
 8010168:	bd80      	pop	{r7, pc}
 801016a:	bf00      	nop
 801016c:	200000bf 	.word	0x200000bf
 8010170:	200000c0 	.word	0x200000c0
 8010174:	200000c1 	.word	0x200000c1

08010178 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b082      	sub	sp, #8
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
 8010180:	460b      	mov	r3, r1
 8010182:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8010184:	4b3a      	ldr	r3, [pc, #232]	@ (8010270 <USBD_CDC_DeInit+0xf8>)
 8010186:	781b      	ldrb	r3, [r3, #0]
 8010188:	4619      	mov	r1, r3
 801018a:	6878      	ldr	r0, [r7, #4]
 801018c:	f002 fa47 	bl	801261e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8010190:	4b37      	ldr	r3, [pc, #220]	@ (8010270 <USBD_CDC_DeInit+0xf8>)
 8010192:	781b      	ldrb	r3, [r3, #0]
 8010194:	f003 020f 	and.w	r2, r3, #15
 8010198:	6879      	ldr	r1, [r7, #4]
 801019a:	4613      	mov	r3, r2
 801019c:	009b      	lsls	r3, r3, #2
 801019e:	4413      	add	r3, r2
 80101a0:	009b      	lsls	r3, r3, #2
 80101a2:	440b      	add	r3, r1
 80101a4:	3324      	adds	r3, #36	@ 0x24
 80101a6:	2200      	movs	r2, #0
 80101a8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80101aa:	4b32      	ldr	r3, [pc, #200]	@ (8010274 <USBD_CDC_DeInit+0xfc>)
 80101ac:	781b      	ldrb	r3, [r3, #0]
 80101ae:	4619      	mov	r1, r3
 80101b0:	6878      	ldr	r0, [r7, #4]
 80101b2:	f002 fa34 	bl	801261e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80101b6:	4b2f      	ldr	r3, [pc, #188]	@ (8010274 <USBD_CDC_DeInit+0xfc>)
 80101b8:	781b      	ldrb	r3, [r3, #0]
 80101ba:	f003 020f 	and.w	r2, r3, #15
 80101be:	6879      	ldr	r1, [r7, #4]
 80101c0:	4613      	mov	r3, r2
 80101c2:	009b      	lsls	r3, r3, #2
 80101c4:	4413      	add	r3, r2
 80101c6:	009b      	lsls	r3, r3, #2
 80101c8:	440b      	add	r3, r1
 80101ca:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80101ce:	2200      	movs	r2, #0
 80101d0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80101d2:	4b29      	ldr	r3, [pc, #164]	@ (8010278 <USBD_CDC_DeInit+0x100>)
 80101d4:	781b      	ldrb	r3, [r3, #0]
 80101d6:	4619      	mov	r1, r3
 80101d8:	6878      	ldr	r0, [r7, #4]
 80101da:	f002 fa20 	bl	801261e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80101de:	4b26      	ldr	r3, [pc, #152]	@ (8010278 <USBD_CDC_DeInit+0x100>)
 80101e0:	781b      	ldrb	r3, [r3, #0]
 80101e2:	f003 020f 	and.w	r2, r3, #15
 80101e6:	6879      	ldr	r1, [r7, #4]
 80101e8:	4613      	mov	r3, r2
 80101ea:	009b      	lsls	r3, r3, #2
 80101ec:	4413      	add	r3, r2
 80101ee:	009b      	lsls	r3, r3, #2
 80101f0:	440b      	add	r3, r1
 80101f2:	3324      	adds	r3, #36	@ 0x24
 80101f4:	2200      	movs	r2, #0
 80101f6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80101f8:	4b1f      	ldr	r3, [pc, #124]	@ (8010278 <USBD_CDC_DeInit+0x100>)
 80101fa:	781b      	ldrb	r3, [r3, #0]
 80101fc:	f003 020f 	and.w	r2, r3, #15
 8010200:	6879      	ldr	r1, [r7, #4]
 8010202:	4613      	mov	r3, r2
 8010204:	009b      	lsls	r3, r3, #2
 8010206:	4413      	add	r3, r2
 8010208:	009b      	lsls	r3, r3, #2
 801020a:	440b      	add	r3, r1
 801020c:	3326      	adds	r3, #38	@ 0x26
 801020e:	2200      	movs	r2, #0
 8010210:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	32b0      	adds	r2, #176	@ 0xb0
 801021c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d01f      	beq.n	8010264 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801022a:	687a      	ldr	r2, [r7, #4]
 801022c:	33b0      	adds	r3, #176	@ 0xb0
 801022e:	009b      	lsls	r3, r3, #2
 8010230:	4413      	add	r3, r2
 8010232:	685b      	ldr	r3, [r3, #4]
 8010234:	685b      	ldr	r3, [r3, #4]
 8010236:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	32b0      	adds	r2, #176	@ 0xb0
 8010242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010246:	4618      	mov	r0, r3
 8010248:	f002 fb2a 	bl	80128a0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	32b0      	adds	r2, #176	@ 0xb0
 8010256:	2100      	movs	r1, #0
 8010258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	2200      	movs	r2, #0
 8010260:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8010264:	2300      	movs	r3, #0
}
 8010266:	4618      	mov	r0, r3
 8010268:	3708      	adds	r7, #8
 801026a:	46bd      	mov	sp, r7
 801026c:	bd80      	pop	{r7, pc}
 801026e:	bf00      	nop
 8010270:	200000bf 	.word	0x200000bf
 8010274:	200000c0 	.word	0x200000c0
 8010278:	200000c1 	.word	0x200000c1

0801027c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801027c:	b580      	push	{r7, lr}
 801027e:	b086      	sub	sp, #24
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
 8010284:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	32b0      	adds	r2, #176	@ 0xb0
 8010290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010294:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8010296:	2300      	movs	r3, #0
 8010298:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801029a:	2300      	movs	r3, #0
 801029c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801029e:	2300      	movs	r3, #0
 80102a0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80102a2:	693b      	ldr	r3, [r7, #16]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d101      	bne.n	80102ac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80102a8:	2303      	movs	r3, #3
 80102aa:	e0bf      	b.n	801042c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80102ac:	683b      	ldr	r3, [r7, #0]
 80102ae:	781b      	ldrb	r3, [r3, #0]
 80102b0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d050      	beq.n	801035a <USBD_CDC_Setup+0xde>
 80102b8:	2b20      	cmp	r3, #32
 80102ba:	f040 80af 	bne.w	801041c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80102be:	683b      	ldr	r3, [r7, #0]
 80102c0:	88db      	ldrh	r3, [r3, #6]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d03a      	beq.n	801033c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80102c6:	683b      	ldr	r3, [r7, #0]
 80102c8:	781b      	ldrb	r3, [r3, #0]
 80102ca:	b25b      	sxtb	r3, r3
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	da1b      	bge.n	8010308 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80102d6:	687a      	ldr	r2, [r7, #4]
 80102d8:	33b0      	adds	r3, #176	@ 0xb0
 80102da:	009b      	lsls	r3, r3, #2
 80102dc:	4413      	add	r3, r2
 80102de:	685b      	ldr	r3, [r3, #4]
 80102e0:	689b      	ldr	r3, [r3, #8]
 80102e2:	683a      	ldr	r2, [r7, #0]
 80102e4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80102e6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80102e8:	683a      	ldr	r2, [r7, #0]
 80102ea:	88d2      	ldrh	r2, [r2, #6]
 80102ec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80102ee:	683b      	ldr	r3, [r7, #0]
 80102f0:	88db      	ldrh	r3, [r3, #6]
 80102f2:	2b07      	cmp	r3, #7
 80102f4:	bf28      	it	cs
 80102f6:	2307      	movcs	r3, #7
 80102f8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80102fa:	693b      	ldr	r3, [r7, #16]
 80102fc:	89fa      	ldrh	r2, [r7, #14]
 80102fe:	4619      	mov	r1, r3
 8010300:	6878      	ldr	r0, [r7, #4]
 8010302:	f001 fd47 	bl	8011d94 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8010306:	e090      	b.n	801042a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8010308:	683b      	ldr	r3, [r7, #0]
 801030a:	785a      	ldrb	r2, [r3, #1]
 801030c:	693b      	ldr	r3, [r7, #16]
 801030e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8010312:	683b      	ldr	r3, [r7, #0]
 8010314:	88db      	ldrh	r3, [r3, #6]
 8010316:	2b3f      	cmp	r3, #63	@ 0x3f
 8010318:	d803      	bhi.n	8010322 <USBD_CDC_Setup+0xa6>
 801031a:	683b      	ldr	r3, [r7, #0]
 801031c:	88db      	ldrh	r3, [r3, #6]
 801031e:	b2da      	uxtb	r2, r3
 8010320:	e000      	b.n	8010324 <USBD_CDC_Setup+0xa8>
 8010322:	2240      	movs	r2, #64	@ 0x40
 8010324:	693b      	ldr	r3, [r7, #16]
 8010326:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801032a:	6939      	ldr	r1, [r7, #16]
 801032c:	693b      	ldr	r3, [r7, #16]
 801032e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8010332:	461a      	mov	r2, r3
 8010334:	6878      	ldr	r0, [r7, #4]
 8010336:	f001 fd59 	bl	8011dec <USBD_CtlPrepareRx>
      break;
 801033a:	e076      	b.n	801042a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010342:	687a      	ldr	r2, [r7, #4]
 8010344:	33b0      	adds	r3, #176	@ 0xb0
 8010346:	009b      	lsls	r3, r3, #2
 8010348:	4413      	add	r3, r2
 801034a:	685b      	ldr	r3, [r3, #4]
 801034c:	689b      	ldr	r3, [r3, #8]
 801034e:	683a      	ldr	r2, [r7, #0]
 8010350:	7850      	ldrb	r0, [r2, #1]
 8010352:	2200      	movs	r2, #0
 8010354:	6839      	ldr	r1, [r7, #0]
 8010356:	4798      	blx	r3
      break;
 8010358:	e067      	b.n	801042a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801035a:	683b      	ldr	r3, [r7, #0]
 801035c:	785b      	ldrb	r3, [r3, #1]
 801035e:	2b0b      	cmp	r3, #11
 8010360:	d851      	bhi.n	8010406 <USBD_CDC_Setup+0x18a>
 8010362:	a201      	add	r2, pc, #4	@ (adr r2, 8010368 <USBD_CDC_Setup+0xec>)
 8010364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010368:	08010399 	.word	0x08010399
 801036c:	08010415 	.word	0x08010415
 8010370:	08010407 	.word	0x08010407
 8010374:	08010407 	.word	0x08010407
 8010378:	08010407 	.word	0x08010407
 801037c:	08010407 	.word	0x08010407
 8010380:	08010407 	.word	0x08010407
 8010384:	08010407 	.word	0x08010407
 8010388:	08010407 	.word	0x08010407
 801038c:	08010407 	.word	0x08010407
 8010390:	080103c3 	.word	0x080103c3
 8010394:	080103ed 	.word	0x080103ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801039e:	b2db      	uxtb	r3, r3
 80103a0:	2b03      	cmp	r3, #3
 80103a2:	d107      	bne.n	80103b4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80103a4:	f107 030a 	add.w	r3, r7, #10
 80103a8:	2202      	movs	r2, #2
 80103aa:	4619      	mov	r1, r3
 80103ac:	6878      	ldr	r0, [r7, #4]
 80103ae:	f001 fcf1 	bl	8011d94 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80103b2:	e032      	b.n	801041a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80103b4:	6839      	ldr	r1, [r7, #0]
 80103b6:	6878      	ldr	r0, [r7, #4]
 80103b8:	f001 fc6f 	bl	8011c9a <USBD_CtlError>
            ret = USBD_FAIL;
 80103bc:	2303      	movs	r3, #3
 80103be:	75fb      	strb	r3, [r7, #23]
          break;
 80103c0:	e02b      	b.n	801041a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80103c8:	b2db      	uxtb	r3, r3
 80103ca:	2b03      	cmp	r3, #3
 80103cc:	d107      	bne.n	80103de <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80103ce:	f107 030d 	add.w	r3, r7, #13
 80103d2:	2201      	movs	r2, #1
 80103d4:	4619      	mov	r1, r3
 80103d6:	6878      	ldr	r0, [r7, #4]
 80103d8:	f001 fcdc 	bl	8011d94 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80103dc:	e01d      	b.n	801041a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80103de:	6839      	ldr	r1, [r7, #0]
 80103e0:	6878      	ldr	r0, [r7, #4]
 80103e2:	f001 fc5a 	bl	8011c9a <USBD_CtlError>
            ret = USBD_FAIL;
 80103e6:	2303      	movs	r3, #3
 80103e8:	75fb      	strb	r3, [r7, #23]
          break;
 80103ea:	e016      	b.n	801041a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80103f2:	b2db      	uxtb	r3, r3
 80103f4:	2b03      	cmp	r3, #3
 80103f6:	d00f      	beq.n	8010418 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80103f8:	6839      	ldr	r1, [r7, #0]
 80103fa:	6878      	ldr	r0, [r7, #4]
 80103fc:	f001 fc4d 	bl	8011c9a <USBD_CtlError>
            ret = USBD_FAIL;
 8010400:	2303      	movs	r3, #3
 8010402:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010404:	e008      	b.n	8010418 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8010406:	6839      	ldr	r1, [r7, #0]
 8010408:	6878      	ldr	r0, [r7, #4]
 801040a:	f001 fc46 	bl	8011c9a <USBD_CtlError>
          ret = USBD_FAIL;
 801040e:	2303      	movs	r3, #3
 8010410:	75fb      	strb	r3, [r7, #23]
          break;
 8010412:	e002      	b.n	801041a <USBD_CDC_Setup+0x19e>
          break;
 8010414:	bf00      	nop
 8010416:	e008      	b.n	801042a <USBD_CDC_Setup+0x1ae>
          break;
 8010418:	bf00      	nop
      }
      break;
 801041a:	e006      	b.n	801042a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 801041c:	6839      	ldr	r1, [r7, #0]
 801041e:	6878      	ldr	r0, [r7, #4]
 8010420:	f001 fc3b 	bl	8011c9a <USBD_CtlError>
      ret = USBD_FAIL;
 8010424:	2303      	movs	r3, #3
 8010426:	75fb      	strb	r3, [r7, #23]
      break;
 8010428:	bf00      	nop
  }

  return (uint8_t)ret;
 801042a:	7dfb      	ldrb	r3, [r7, #23]
}
 801042c:	4618      	mov	r0, r3
 801042e:	3718      	adds	r7, #24
 8010430:	46bd      	mov	sp, r7
 8010432:	bd80      	pop	{r7, pc}

08010434 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b084      	sub	sp, #16
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
 801043c:	460b      	mov	r3, r1
 801043e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010446:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	32b0      	adds	r2, #176	@ 0xb0
 8010452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d101      	bne.n	801045e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801045a:	2303      	movs	r3, #3
 801045c:	e065      	b.n	801052a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	32b0      	adds	r2, #176	@ 0xb0
 8010468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801046c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801046e:	78fb      	ldrb	r3, [r7, #3]
 8010470:	f003 020f 	and.w	r2, r3, #15
 8010474:	6879      	ldr	r1, [r7, #4]
 8010476:	4613      	mov	r3, r2
 8010478:	009b      	lsls	r3, r3, #2
 801047a:	4413      	add	r3, r2
 801047c:	009b      	lsls	r3, r3, #2
 801047e:	440b      	add	r3, r1
 8010480:	3318      	adds	r3, #24
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d02f      	beq.n	80104e8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8010488:	78fb      	ldrb	r3, [r7, #3]
 801048a:	f003 020f 	and.w	r2, r3, #15
 801048e:	6879      	ldr	r1, [r7, #4]
 8010490:	4613      	mov	r3, r2
 8010492:	009b      	lsls	r3, r3, #2
 8010494:	4413      	add	r3, r2
 8010496:	009b      	lsls	r3, r3, #2
 8010498:	440b      	add	r3, r1
 801049a:	3318      	adds	r3, #24
 801049c:	681a      	ldr	r2, [r3, #0]
 801049e:	78fb      	ldrb	r3, [r7, #3]
 80104a0:	f003 010f 	and.w	r1, r3, #15
 80104a4:	68f8      	ldr	r0, [r7, #12]
 80104a6:	460b      	mov	r3, r1
 80104a8:	009b      	lsls	r3, r3, #2
 80104aa:	440b      	add	r3, r1
 80104ac:	00db      	lsls	r3, r3, #3
 80104ae:	4403      	add	r3, r0
 80104b0:	3320      	adds	r3, #32
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	fbb2 f1f3 	udiv	r1, r2, r3
 80104b8:	fb01 f303 	mul.w	r3, r1, r3
 80104bc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d112      	bne.n	80104e8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80104c2:	78fb      	ldrb	r3, [r7, #3]
 80104c4:	f003 020f 	and.w	r2, r3, #15
 80104c8:	6879      	ldr	r1, [r7, #4]
 80104ca:	4613      	mov	r3, r2
 80104cc:	009b      	lsls	r3, r3, #2
 80104ce:	4413      	add	r3, r2
 80104d0:	009b      	lsls	r3, r3, #2
 80104d2:	440b      	add	r3, r1
 80104d4:	3318      	adds	r3, #24
 80104d6:	2200      	movs	r2, #0
 80104d8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80104da:	78f9      	ldrb	r1, [r7, #3]
 80104dc:	2300      	movs	r3, #0
 80104de:	2200      	movs	r2, #0
 80104e0:	6878      	ldr	r0, [r7, #4]
 80104e2:	f002 f944 	bl	801276e <USBD_LL_Transmit>
 80104e6:	e01f      	b.n	8010528 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80104e8:	68bb      	ldr	r3, [r7, #8]
 80104ea:	2200      	movs	r2, #0
 80104ec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80104f6:	687a      	ldr	r2, [r7, #4]
 80104f8:	33b0      	adds	r3, #176	@ 0xb0
 80104fa:	009b      	lsls	r3, r3, #2
 80104fc:	4413      	add	r3, r2
 80104fe:	685b      	ldr	r3, [r3, #4]
 8010500:	691b      	ldr	r3, [r3, #16]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d010      	beq.n	8010528 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801050c:	687a      	ldr	r2, [r7, #4]
 801050e:	33b0      	adds	r3, #176	@ 0xb0
 8010510:	009b      	lsls	r3, r3, #2
 8010512:	4413      	add	r3, r2
 8010514:	685b      	ldr	r3, [r3, #4]
 8010516:	691b      	ldr	r3, [r3, #16]
 8010518:	68ba      	ldr	r2, [r7, #8]
 801051a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 801051e:	68ba      	ldr	r2, [r7, #8]
 8010520:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8010524:	78fa      	ldrb	r2, [r7, #3]
 8010526:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8010528:	2300      	movs	r3, #0
}
 801052a:	4618      	mov	r0, r3
 801052c:	3710      	adds	r7, #16
 801052e:	46bd      	mov	sp, r7
 8010530:	bd80      	pop	{r7, pc}

08010532 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010532:	b580      	push	{r7, lr}
 8010534:	b084      	sub	sp, #16
 8010536:	af00      	add	r7, sp, #0
 8010538:	6078      	str	r0, [r7, #4]
 801053a:	460b      	mov	r3, r1
 801053c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	32b0      	adds	r2, #176	@ 0xb0
 8010548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801054c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	32b0      	adds	r2, #176	@ 0xb0
 8010558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d101      	bne.n	8010564 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8010560:	2303      	movs	r3, #3
 8010562:	e01a      	b.n	801059a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010564:	78fb      	ldrb	r3, [r7, #3]
 8010566:	4619      	mov	r1, r3
 8010568:	6878      	ldr	r0, [r7, #4]
 801056a:	f002 f942 	bl	80127f2 <USBD_LL_GetRxDataSize>
 801056e:	4602      	mov	r2, r0
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801057c:	687a      	ldr	r2, [r7, #4]
 801057e:	33b0      	adds	r3, #176	@ 0xb0
 8010580:	009b      	lsls	r3, r3, #2
 8010582:	4413      	add	r3, r2
 8010584:	685b      	ldr	r3, [r3, #4]
 8010586:	68db      	ldr	r3, [r3, #12]
 8010588:	68fa      	ldr	r2, [r7, #12]
 801058a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 801058e:	68fa      	ldr	r2, [r7, #12]
 8010590:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8010594:	4611      	mov	r1, r2
 8010596:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010598:	2300      	movs	r3, #0
}
 801059a:	4618      	mov	r0, r3
 801059c:	3710      	adds	r7, #16
 801059e:	46bd      	mov	sp, r7
 80105a0:	bd80      	pop	{r7, pc}

080105a2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80105a2:	b580      	push	{r7, lr}
 80105a4:	b084      	sub	sp, #16
 80105a6:	af00      	add	r7, sp, #0
 80105a8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	32b0      	adds	r2, #176	@ 0xb0
 80105b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d101      	bne.n	80105c4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80105c0:	2303      	movs	r3, #3
 80105c2:	e024      	b.n	801060e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80105ca:	687a      	ldr	r2, [r7, #4]
 80105cc:	33b0      	adds	r3, #176	@ 0xb0
 80105ce:	009b      	lsls	r3, r3, #2
 80105d0:	4413      	add	r3, r2
 80105d2:	685b      	ldr	r3, [r3, #4]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d019      	beq.n	801060c <USBD_CDC_EP0_RxReady+0x6a>
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80105de:	2bff      	cmp	r3, #255	@ 0xff
 80105e0:	d014      	beq.n	801060c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80105e8:	687a      	ldr	r2, [r7, #4]
 80105ea:	33b0      	adds	r3, #176	@ 0xb0
 80105ec:	009b      	lsls	r3, r3, #2
 80105ee:	4413      	add	r3, r2
 80105f0:	685b      	ldr	r3, [r3, #4]
 80105f2:	689b      	ldr	r3, [r3, #8]
 80105f4:	68fa      	ldr	r2, [r7, #12]
 80105f6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80105fa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80105fc:	68fa      	ldr	r2, [r7, #12]
 80105fe:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010602:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	22ff      	movs	r2, #255	@ 0xff
 8010608:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 801060c:	2300      	movs	r3, #0
}
 801060e:	4618      	mov	r0, r3
 8010610:	3710      	adds	r7, #16
 8010612:	46bd      	mov	sp, r7
 8010614:	bd80      	pop	{r7, pc}
	...

08010618 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b086      	sub	sp, #24
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010620:	2182      	movs	r1, #130	@ 0x82
 8010622:	4818      	ldr	r0, [pc, #96]	@ (8010684 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010624:	f000 fcd9 	bl	8010fda <USBD_GetEpDesc>
 8010628:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801062a:	2101      	movs	r1, #1
 801062c:	4815      	ldr	r0, [pc, #84]	@ (8010684 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801062e:	f000 fcd4 	bl	8010fda <USBD_GetEpDesc>
 8010632:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010634:	2181      	movs	r1, #129	@ 0x81
 8010636:	4813      	ldr	r0, [pc, #76]	@ (8010684 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010638:	f000 fccf 	bl	8010fda <USBD_GetEpDesc>
 801063c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801063e:	697b      	ldr	r3, [r7, #20]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d002      	beq.n	801064a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010644:	697b      	ldr	r3, [r7, #20]
 8010646:	2210      	movs	r2, #16
 8010648:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801064a:	693b      	ldr	r3, [r7, #16]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d006      	beq.n	801065e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010650:	693b      	ldr	r3, [r7, #16]
 8010652:	2200      	movs	r2, #0
 8010654:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010658:	711a      	strb	r2, [r3, #4]
 801065a:	2200      	movs	r2, #0
 801065c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d006      	beq.n	8010672 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	2200      	movs	r2, #0
 8010668:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801066c:	711a      	strb	r2, [r3, #4]
 801066e:	2200      	movs	r2, #0
 8010670:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	2243      	movs	r2, #67	@ 0x43
 8010676:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010678:	4b02      	ldr	r3, [pc, #8]	@ (8010684 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801067a:	4618      	mov	r0, r3
 801067c:	3718      	adds	r7, #24
 801067e:	46bd      	mov	sp, r7
 8010680:	bd80      	pop	{r7, pc}
 8010682:	bf00      	nop
 8010684:	2000007c 	.word	0x2000007c

08010688 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b086      	sub	sp, #24
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010690:	2182      	movs	r1, #130	@ 0x82
 8010692:	4818      	ldr	r0, [pc, #96]	@ (80106f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010694:	f000 fca1 	bl	8010fda <USBD_GetEpDesc>
 8010698:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801069a:	2101      	movs	r1, #1
 801069c:	4815      	ldr	r0, [pc, #84]	@ (80106f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801069e:	f000 fc9c 	bl	8010fda <USBD_GetEpDesc>
 80106a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80106a4:	2181      	movs	r1, #129	@ 0x81
 80106a6:	4813      	ldr	r0, [pc, #76]	@ (80106f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80106a8:	f000 fc97 	bl	8010fda <USBD_GetEpDesc>
 80106ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80106ae:	697b      	ldr	r3, [r7, #20]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d002      	beq.n	80106ba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80106b4:	697b      	ldr	r3, [r7, #20]
 80106b6:	2210      	movs	r2, #16
 80106b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80106ba:	693b      	ldr	r3, [r7, #16]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d006      	beq.n	80106ce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80106c0:	693b      	ldr	r3, [r7, #16]
 80106c2:	2200      	movs	r2, #0
 80106c4:	711a      	strb	r2, [r3, #4]
 80106c6:	2200      	movs	r2, #0
 80106c8:	f042 0202 	orr.w	r2, r2, #2
 80106cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d006      	beq.n	80106e2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	2200      	movs	r2, #0
 80106d8:	711a      	strb	r2, [r3, #4]
 80106da:	2200      	movs	r2, #0
 80106dc:	f042 0202 	orr.w	r2, r2, #2
 80106e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	2243      	movs	r2, #67	@ 0x43
 80106e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80106e8:	4b02      	ldr	r3, [pc, #8]	@ (80106f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80106ea:	4618      	mov	r0, r3
 80106ec:	3718      	adds	r7, #24
 80106ee:	46bd      	mov	sp, r7
 80106f0:	bd80      	pop	{r7, pc}
 80106f2:	bf00      	nop
 80106f4:	2000007c 	.word	0x2000007c

080106f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80106f8:	b580      	push	{r7, lr}
 80106fa:	b086      	sub	sp, #24
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010700:	2182      	movs	r1, #130	@ 0x82
 8010702:	4818      	ldr	r0, [pc, #96]	@ (8010764 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010704:	f000 fc69 	bl	8010fda <USBD_GetEpDesc>
 8010708:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801070a:	2101      	movs	r1, #1
 801070c:	4815      	ldr	r0, [pc, #84]	@ (8010764 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801070e:	f000 fc64 	bl	8010fda <USBD_GetEpDesc>
 8010712:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010714:	2181      	movs	r1, #129	@ 0x81
 8010716:	4813      	ldr	r0, [pc, #76]	@ (8010764 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010718:	f000 fc5f 	bl	8010fda <USBD_GetEpDesc>
 801071c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801071e:	697b      	ldr	r3, [r7, #20]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d002      	beq.n	801072a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010724:	697b      	ldr	r3, [r7, #20]
 8010726:	2210      	movs	r2, #16
 8010728:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801072a:	693b      	ldr	r3, [r7, #16]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d006      	beq.n	801073e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010730:	693b      	ldr	r3, [r7, #16]
 8010732:	2200      	movs	r2, #0
 8010734:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010738:	711a      	strb	r2, [r3, #4]
 801073a:	2200      	movs	r2, #0
 801073c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	2b00      	cmp	r3, #0
 8010742:	d006      	beq.n	8010752 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	2200      	movs	r2, #0
 8010748:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801074c:	711a      	strb	r2, [r3, #4]
 801074e:	2200      	movs	r2, #0
 8010750:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	2243      	movs	r2, #67	@ 0x43
 8010756:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010758:	4b02      	ldr	r3, [pc, #8]	@ (8010764 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801075a:	4618      	mov	r0, r3
 801075c:	3718      	adds	r7, #24
 801075e:	46bd      	mov	sp, r7
 8010760:	bd80      	pop	{r7, pc}
 8010762:	bf00      	nop
 8010764:	2000007c 	.word	0x2000007c

08010768 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010768:	b480      	push	{r7}
 801076a:	b083      	sub	sp, #12
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	220a      	movs	r2, #10
 8010774:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8010776:	4b03      	ldr	r3, [pc, #12]	@ (8010784 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010778:	4618      	mov	r0, r3
 801077a:	370c      	adds	r7, #12
 801077c:	46bd      	mov	sp, r7
 801077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010782:	4770      	bx	lr
 8010784:	20000038 	.word	0x20000038

08010788 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010788:	b480      	push	{r7}
 801078a:	b083      	sub	sp, #12
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
 8010790:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010792:	683b      	ldr	r3, [r7, #0]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d101      	bne.n	801079c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010798:	2303      	movs	r3, #3
 801079a:	e009      	b.n	80107b0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80107a2:	687a      	ldr	r2, [r7, #4]
 80107a4:	33b0      	adds	r3, #176	@ 0xb0
 80107a6:	009b      	lsls	r3, r3, #2
 80107a8:	4413      	add	r3, r2
 80107aa:	683a      	ldr	r2, [r7, #0]
 80107ac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80107ae:	2300      	movs	r3, #0
}
 80107b0:	4618      	mov	r0, r3
 80107b2:	370c      	adds	r7, #12
 80107b4:	46bd      	mov	sp, r7
 80107b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ba:	4770      	bx	lr

080107bc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80107bc:	b480      	push	{r7}
 80107be:	b087      	sub	sp, #28
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	60f8      	str	r0, [r7, #12]
 80107c4:	60b9      	str	r1, [r7, #8]
 80107c6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	32b0      	adds	r2, #176	@ 0xb0
 80107d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107d6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80107d8:	697b      	ldr	r3, [r7, #20]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d101      	bne.n	80107e2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80107de:	2303      	movs	r3, #3
 80107e0:	e008      	b.n	80107f4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80107e2:	697b      	ldr	r3, [r7, #20]
 80107e4:	68ba      	ldr	r2, [r7, #8]
 80107e6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80107ea:	697b      	ldr	r3, [r7, #20]
 80107ec:	687a      	ldr	r2, [r7, #4]
 80107ee:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80107f2:	2300      	movs	r3, #0
}
 80107f4:	4618      	mov	r0, r3
 80107f6:	371c      	adds	r7, #28
 80107f8:	46bd      	mov	sp, r7
 80107fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107fe:	4770      	bx	lr

08010800 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010800:	b480      	push	{r7}
 8010802:	b085      	sub	sp, #20
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
 8010808:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	32b0      	adds	r2, #176	@ 0xb0
 8010814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010818:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d101      	bne.n	8010824 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8010820:	2303      	movs	r3, #3
 8010822:	e004      	b.n	801082e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	683a      	ldr	r2, [r7, #0]
 8010828:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 801082c:	2300      	movs	r3, #0
}
 801082e:	4618      	mov	r0, r3
 8010830:	3714      	adds	r7, #20
 8010832:	46bd      	mov	sp, r7
 8010834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010838:	4770      	bx	lr
	...

0801083c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801083c:	b580      	push	{r7, lr}
 801083e:	b084      	sub	sp, #16
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	32b0      	adds	r2, #176	@ 0xb0
 801084e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010852:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8010854:	2301      	movs	r3, #1
 8010856:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8010858:	68bb      	ldr	r3, [r7, #8]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d101      	bne.n	8010862 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801085e:	2303      	movs	r3, #3
 8010860:	e025      	b.n	80108ae <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8010862:	68bb      	ldr	r3, [r7, #8]
 8010864:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8010868:	2b00      	cmp	r3, #0
 801086a:	d11f      	bne.n	80108ac <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801086c:	68bb      	ldr	r3, [r7, #8]
 801086e:	2201      	movs	r2, #1
 8010870:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8010874:	4b10      	ldr	r3, [pc, #64]	@ (80108b8 <USBD_CDC_TransmitPacket+0x7c>)
 8010876:	781b      	ldrb	r3, [r3, #0]
 8010878:	f003 020f 	and.w	r2, r3, #15
 801087c:	68bb      	ldr	r3, [r7, #8]
 801087e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8010882:	6878      	ldr	r0, [r7, #4]
 8010884:	4613      	mov	r3, r2
 8010886:	009b      	lsls	r3, r3, #2
 8010888:	4413      	add	r3, r2
 801088a:	009b      	lsls	r3, r3, #2
 801088c:	4403      	add	r3, r0
 801088e:	3318      	adds	r3, #24
 8010890:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8010892:	4b09      	ldr	r3, [pc, #36]	@ (80108b8 <USBD_CDC_TransmitPacket+0x7c>)
 8010894:	7819      	ldrb	r1, [r3, #0]
 8010896:	68bb      	ldr	r3, [r7, #8]
 8010898:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 801089c:	68bb      	ldr	r3, [r7, #8]
 801089e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80108a2:	6878      	ldr	r0, [r7, #4]
 80108a4:	f001 ff63 	bl	801276e <USBD_LL_Transmit>

    ret = USBD_OK;
 80108a8:	2300      	movs	r3, #0
 80108aa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80108ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80108ae:	4618      	mov	r0, r3
 80108b0:	3710      	adds	r7, #16
 80108b2:	46bd      	mov	sp, r7
 80108b4:	bd80      	pop	{r7, pc}
 80108b6:	bf00      	nop
 80108b8:	200000bf 	.word	0x200000bf

080108bc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80108bc:	b580      	push	{r7, lr}
 80108be:	b084      	sub	sp, #16
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	32b0      	adds	r2, #176	@ 0xb0
 80108ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108d2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	32b0      	adds	r2, #176	@ 0xb0
 80108de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d101      	bne.n	80108ea <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80108e6:	2303      	movs	r3, #3
 80108e8:	e018      	b.n	801091c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	7c1b      	ldrb	r3, [r3, #16]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d10a      	bne.n	8010908 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80108f2:	4b0c      	ldr	r3, [pc, #48]	@ (8010924 <USBD_CDC_ReceivePacket+0x68>)
 80108f4:	7819      	ldrb	r1, [r3, #0]
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80108fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010900:	6878      	ldr	r0, [r7, #4]
 8010902:	f001 ff55 	bl	80127b0 <USBD_LL_PrepareReceive>
 8010906:	e008      	b.n	801091a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010908:	4b06      	ldr	r3, [pc, #24]	@ (8010924 <USBD_CDC_ReceivePacket+0x68>)
 801090a:	7819      	ldrb	r1, [r3, #0]
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010912:	2340      	movs	r3, #64	@ 0x40
 8010914:	6878      	ldr	r0, [r7, #4]
 8010916:	f001 ff4b 	bl	80127b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801091a:	2300      	movs	r3, #0
}
 801091c:	4618      	mov	r0, r3
 801091e:	3710      	adds	r7, #16
 8010920:	46bd      	mov	sp, r7
 8010922:	bd80      	pop	{r7, pc}
 8010924:	200000c0 	.word	0x200000c0

08010928 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b086      	sub	sp, #24
 801092c:	af00      	add	r7, sp, #0
 801092e:	60f8      	str	r0, [r7, #12]
 8010930:	60b9      	str	r1, [r7, #8]
 8010932:	4613      	mov	r3, r2
 8010934:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d10a      	bne.n	8010952 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 801093c:	4817      	ldr	r0, [pc, #92]	@ (801099c <USBD_Init+0x74>)
 801093e:	f002 fd05 	bl	801334c <iprintf>
 8010942:	4817      	ldr	r0, [pc, #92]	@ (80109a0 <USBD_Init+0x78>)
 8010944:	f002 fd02 	bl	801334c <iprintf>
 8010948:	200a      	movs	r0, #10
 801094a:	f002 fd11 	bl	8013370 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801094e:	2303      	movs	r3, #3
 8010950:	e01f      	b.n	8010992 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	2200      	movs	r2, #0
 8010956:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	2200      	movs	r2, #0
 801095e:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	2200      	movs	r2, #0
 8010966:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801096a:	68bb      	ldr	r3, [r7, #8]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d003      	beq.n	8010978 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	68ba      	ldr	r2, [r7, #8]
 8010974:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	2201      	movs	r2, #1
 801097c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	79fa      	ldrb	r2, [r7, #7]
 8010984:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010986:	68f8      	ldr	r0, [r7, #12]
 8010988:	f001 fda6 	bl	80124d8 <USBD_LL_Init>
 801098c:	4603      	mov	r3, r0
 801098e:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010990:	7dfb      	ldrb	r3, [r7, #23]
}
 8010992:	4618      	mov	r0, r3
 8010994:	3718      	adds	r7, #24
 8010996:	46bd      	mov	sp, r7
 8010998:	bd80      	pop	{r7, pc}
 801099a:	bf00      	nop
 801099c:	08015300 	.word	0x08015300
 80109a0:	08015308 	.word	0x08015308

080109a4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80109a4:	b580      	push	{r7, lr}
 80109a6:	b084      	sub	sp, #16
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	6078      	str	r0, [r7, #4]
 80109ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80109ae:	2300      	movs	r3, #0
 80109b0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80109b2:	683b      	ldr	r3, [r7, #0]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d10a      	bne.n	80109ce <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 80109b8:	481a      	ldr	r0, [pc, #104]	@ (8010a24 <USBD_RegisterClass+0x80>)
 80109ba:	f002 fcc7 	bl	801334c <iprintf>
 80109be:	481a      	ldr	r0, [pc, #104]	@ (8010a28 <USBD_RegisterClass+0x84>)
 80109c0:	f002 fcc4 	bl	801334c <iprintf>
 80109c4:	200a      	movs	r0, #10
 80109c6:	f002 fcd3 	bl	8013370 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80109ca:	2303      	movs	r3, #3
 80109cc:	e025      	b.n	8010a1a <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	683a      	ldr	r2, [r7, #0]
 80109d2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	32ae      	adds	r2, #174	@ 0xae
 80109e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d00f      	beq.n	8010a0a <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	32ae      	adds	r2, #174	@ 0xae
 80109f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109fa:	f107 020e 	add.w	r2, r7, #14
 80109fe:	4610      	mov	r0, r2
 8010a00:	4798      	blx	r3
 8010a02:	4602      	mov	r2, r0
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010a10:	1c5a      	adds	r2, r3, #1
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8010a18:	2300      	movs	r3, #0
}
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	3710      	adds	r7, #16
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	bd80      	pop	{r7, pc}
 8010a22:	bf00      	nop
 8010a24:	08015300 	.word	0x08015300
 8010a28:	08015320 	.word	0x08015320

08010a2c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b082      	sub	sp, #8
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010a34:	6878      	ldr	r0, [r7, #4]
 8010a36:	f001 fdb1 	bl	801259c <USBD_LL_Start>
 8010a3a:	4603      	mov	r3, r0
}
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	3708      	adds	r7, #8
 8010a40:	46bd      	mov	sp, r7
 8010a42:	bd80      	pop	{r7, pc}

08010a44 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8010a44:	b480      	push	{r7}
 8010a46:	b083      	sub	sp, #12
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010a4c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8010a4e:	4618      	mov	r0, r3
 8010a50:	370c      	adds	r7, #12
 8010a52:	46bd      	mov	sp, r7
 8010a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a58:	4770      	bx	lr

08010a5a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010a5a:	b580      	push	{r7, lr}
 8010a5c:	b084      	sub	sp, #16
 8010a5e:	af00      	add	r7, sp, #0
 8010a60:	6078      	str	r0, [r7, #4]
 8010a62:	460b      	mov	r3, r1
 8010a64:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010a66:	2300      	movs	r3, #0
 8010a68:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d009      	beq.n	8010a88 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	78fa      	ldrb	r2, [r7, #3]
 8010a7e:	4611      	mov	r1, r2
 8010a80:	6878      	ldr	r0, [r7, #4]
 8010a82:	4798      	blx	r3
 8010a84:	4603      	mov	r3, r0
 8010a86:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	3710      	adds	r7, #16
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bd80      	pop	{r7, pc}

08010a92 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010a92:	b580      	push	{r7, lr}
 8010a94:	b084      	sub	sp, #16
 8010a96:	af00      	add	r7, sp, #0
 8010a98:	6078      	str	r0, [r7, #4]
 8010a9a:	460b      	mov	r3, r1
 8010a9c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010aa8:	685b      	ldr	r3, [r3, #4]
 8010aaa:	78fa      	ldrb	r2, [r7, #3]
 8010aac:	4611      	mov	r1, r2
 8010aae:	6878      	ldr	r0, [r7, #4]
 8010ab0:	4798      	blx	r3
 8010ab2:	4603      	mov	r3, r0
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d001      	beq.n	8010abc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8010ab8:	2303      	movs	r3, #3
 8010aba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8010abe:	4618      	mov	r0, r3
 8010ac0:	3710      	adds	r7, #16
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	bd80      	pop	{r7, pc}

08010ac6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010ac6:	b580      	push	{r7, lr}
 8010ac8:	b084      	sub	sp, #16
 8010aca:	af00      	add	r7, sp, #0
 8010acc:	6078      	str	r0, [r7, #4]
 8010ace:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010ad6:	6839      	ldr	r1, [r7, #0]
 8010ad8:	4618      	mov	r0, r3
 8010ada:	f001 f8a4 	bl	8011c26 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	2201      	movs	r2, #1
 8010ae2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8010aec:	461a      	mov	r2, r3
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010afa:	f003 031f 	and.w	r3, r3, #31
 8010afe:	2b02      	cmp	r3, #2
 8010b00:	d01a      	beq.n	8010b38 <USBD_LL_SetupStage+0x72>
 8010b02:	2b02      	cmp	r3, #2
 8010b04:	d822      	bhi.n	8010b4c <USBD_LL_SetupStage+0x86>
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d002      	beq.n	8010b10 <USBD_LL_SetupStage+0x4a>
 8010b0a:	2b01      	cmp	r3, #1
 8010b0c:	d00a      	beq.n	8010b24 <USBD_LL_SetupStage+0x5e>
 8010b0e:	e01d      	b.n	8010b4c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010b16:	4619      	mov	r1, r3
 8010b18:	6878      	ldr	r0, [r7, #4]
 8010b1a:	f000 fad1 	bl	80110c0 <USBD_StdDevReq>
 8010b1e:	4603      	mov	r3, r0
 8010b20:	73fb      	strb	r3, [r7, #15]
      break;
 8010b22:	e020      	b.n	8010b66 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010b2a:	4619      	mov	r1, r3
 8010b2c:	6878      	ldr	r0, [r7, #4]
 8010b2e:	f000 fb39 	bl	80111a4 <USBD_StdItfReq>
 8010b32:	4603      	mov	r3, r0
 8010b34:	73fb      	strb	r3, [r7, #15]
      break;
 8010b36:	e016      	b.n	8010b66 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010b3e:	4619      	mov	r1, r3
 8010b40:	6878      	ldr	r0, [r7, #4]
 8010b42:	f000 fb9b 	bl	801127c <USBD_StdEPReq>
 8010b46:	4603      	mov	r3, r0
 8010b48:	73fb      	strb	r3, [r7, #15]
      break;
 8010b4a:	e00c      	b.n	8010b66 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010b52:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8010b56:	b2db      	uxtb	r3, r3
 8010b58:	4619      	mov	r1, r3
 8010b5a:	6878      	ldr	r0, [r7, #4]
 8010b5c:	f001 fd7e 	bl	801265c <USBD_LL_StallEP>
 8010b60:	4603      	mov	r3, r0
 8010b62:	73fb      	strb	r3, [r7, #15]
      break;
 8010b64:	bf00      	nop
  }

  return ret;
 8010b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b68:	4618      	mov	r0, r3
 8010b6a:	3710      	adds	r7, #16
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	bd80      	pop	{r7, pc}

08010b70 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b086      	sub	sp, #24
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	60f8      	str	r0, [r7, #12]
 8010b78:	460b      	mov	r3, r1
 8010b7a:	607a      	str	r2, [r7, #4]
 8010b7c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8010b7e:	2300      	movs	r3, #0
 8010b80:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8010b82:	7afb      	ldrb	r3, [r7, #11]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d16e      	bne.n	8010c66 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8010b8e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8010b96:	2b03      	cmp	r3, #3
 8010b98:	f040 8098 	bne.w	8010ccc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8010b9c:	693b      	ldr	r3, [r7, #16]
 8010b9e:	689a      	ldr	r2, [r3, #8]
 8010ba0:	693b      	ldr	r3, [r7, #16]
 8010ba2:	68db      	ldr	r3, [r3, #12]
 8010ba4:	429a      	cmp	r2, r3
 8010ba6:	d913      	bls.n	8010bd0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8010ba8:	693b      	ldr	r3, [r7, #16]
 8010baa:	689a      	ldr	r2, [r3, #8]
 8010bac:	693b      	ldr	r3, [r7, #16]
 8010bae:	68db      	ldr	r3, [r3, #12]
 8010bb0:	1ad2      	subs	r2, r2, r3
 8010bb2:	693b      	ldr	r3, [r7, #16]
 8010bb4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010bb6:	693b      	ldr	r3, [r7, #16]
 8010bb8:	68da      	ldr	r2, [r3, #12]
 8010bba:	693b      	ldr	r3, [r7, #16]
 8010bbc:	689b      	ldr	r3, [r3, #8]
 8010bbe:	4293      	cmp	r3, r2
 8010bc0:	bf28      	it	cs
 8010bc2:	4613      	movcs	r3, r2
 8010bc4:	461a      	mov	r2, r3
 8010bc6:	6879      	ldr	r1, [r7, #4]
 8010bc8:	68f8      	ldr	r0, [r7, #12]
 8010bca:	f001 f92c 	bl	8011e26 <USBD_CtlContinueRx>
 8010bce:	e07d      	b.n	8010ccc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010bd6:	f003 031f 	and.w	r3, r3, #31
 8010bda:	2b02      	cmp	r3, #2
 8010bdc:	d014      	beq.n	8010c08 <USBD_LL_DataOutStage+0x98>
 8010bde:	2b02      	cmp	r3, #2
 8010be0:	d81d      	bhi.n	8010c1e <USBD_LL_DataOutStage+0xae>
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d002      	beq.n	8010bec <USBD_LL_DataOutStage+0x7c>
 8010be6:	2b01      	cmp	r3, #1
 8010be8:	d003      	beq.n	8010bf2 <USBD_LL_DataOutStage+0x82>
 8010bea:	e018      	b.n	8010c1e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8010bec:	2300      	movs	r3, #0
 8010bee:	75bb      	strb	r3, [r7, #22]
            break;
 8010bf0:	e018      	b.n	8010c24 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8010bf8:	b2db      	uxtb	r3, r3
 8010bfa:	4619      	mov	r1, r3
 8010bfc:	68f8      	ldr	r0, [r7, #12]
 8010bfe:	f000 f9d2 	bl	8010fa6 <USBD_CoreFindIF>
 8010c02:	4603      	mov	r3, r0
 8010c04:	75bb      	strb	r3, [r7, #22]
            break;
 8010c06:	e00d      	b.n	8010c24 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8010c0e:	b2db      	uxtb	r3, r3
 8010c10:	4619      	mov	r1, r3
 8010c12:	68f8      	ldr	r0, [r7, #12]
 8010c14:	f000 f9d4 	bl	8010fc0 <USBD_CoreFindEP>
 8010c18:	4603      	mov	r3, r0
 8010c1a:	75bb      	strb	r3, [r7, #22]
            break;
 8010c1c:	e002      	b.n	8010c24 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8010c1e:	2300      	movs	r3, #0
 8010c20:	75bb      	strb	r3, [r7, #22]
            break;
 8010c22:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8010c24:	7dbb      	ldrb	r3, [r7, #22]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d119      	bne.n	8010c5e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010c30:	b2db      	uxtb	r3, r3
 8010c32:	2b03      	cmp	r3, #3
 8010c34:	d113      	bne.n	8010c5e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8010c36:	7dba      	ldrb	r2, [r7, #22]
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	32ae      	adds	r2, #174	@ 0xae
 8010c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c40:	691b      	ldr	r3, [r3, #16]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d00b      	beq.n	8010c5e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8010c46:	7dba      	ldrb	r2, [r7, #22]
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8010c4e:	7dba      	ldrb	r2, [r7, #22]
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	32ae      	adds	r2, #174	@ 0xae
 8010c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c58:	691b      	ldr	r3, [r3, #16]
 8010c5a:	68f8      	ldr	r0, [r7, #12]
 8010c5c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8010c5e:	68f8      	ldr	r0, [r7, #12]
 8010c60:	f001 f8f2 	bl	8011e48 <USBD_CtlSendStatus>
 8010c64:	e032      	b.n	8010ccc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8010c66:	7afb      	ldrb	r3, [r7, #11]
 8010c68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010c6c:	b2db      	uxtb	r3, r3
 8010c6e:	4619      	mov	r1, r3
 8010c70:	68f8      	ldr	r0, [r7, #12]
 8010c72:	f000 f9a5 	bl	8010fc0 <USBD_CoreFindEP>
 8010c76:	4603      	mov	r3, r0
 8010c78:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010c7a:	7dbb      	ldrb	r3, [r7, #22]
 8010c7c:	2bff      	cmp	r3, #255	@ 0xff
 8010c7e:	d025      	beq.n	8010ccc <USBD_LL_DataOutStage+0x15c>
 8010c80:	7dbb      	ldrb	r3, [r7, #22]
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d122      	bne.n	8010ccc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010c8c:	b2db      	uxtb	r3, r3
 8010c8e:	2b03      	cmp	r3, #3
 8010c90:	d117      	bne.n	8010cc2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8010c92:	7dba      	ldrb	r2, [r7, #22]
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	32ae      	adds	r2, #174	@ 0xae
 8010c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c9c:	699b      	ldr	r3, [r3, #24]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d00f      	beq.n	8010cc2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8010ca2:	7dba      	ldrb	r2, [r7, #22]
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8010caa:	7dba      	ldrb	r2, [r7, #22]
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	32ae      	adds	r2, #174	@ 0xae
 8010cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010cb4:	699b      	ldr	r3, [r3, #24]
 8010cb6:	7afa      	ldrb	r2, [r7, #11]
 8010cb8:	4611      	mov	r1, r2
 8010cba:	68f8      	ldr	r0, [r7, #12]
 8010cbc:	4798      	blx	r3
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8010cc2:	7dfb      	ldrb	r3, [r7, #23]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d001      	beq.n	8010ccc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8010cc8:	7dfb      	ldrb	r3, [r7, #23]
 8010cca:	e000      	b.n	8010cce <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8010ccc:	2300      	movs	r3, #0
}
 8010cce:	4618      	mov	r0, r3
 8010cd0:	3718      	adds	r7, #24
 8010cd2:	46bd      	mov	sp, r7
 8010cd4:	bd80      	pop	{r7, pc}

08010cd6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010cd6:	b580      	push	{r7, lr}
 8010cd8:	b086      	sub	sp, #24
 8010cda:	af00      	add	r7, sp, #0
 8010cdc:	60f8      	str	r0, [r7, #12]
 8010cde:	460b      	mov	r3, r1
 8010ce0:	607a      	str	r2, [r7, #4]
 8010ce2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8010ce4:	7afb      	ldrb	r3, [r7, #11]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d16f      	bne.n	8010dca <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	3314      	adds	r3, #20
 8010cee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8010cf6:	2b02      	cmp	r3, #2
 8010cf8:	d15a      	bne.n	8010db0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8010cfa:	693b      	ldr	r3, [r7, #16]
 8010cfc:	689a      	ldr	r2, [r3, #8]
 8010cfe:	693b      	ldr	r3, [r7, #16]
 8010d00:	68db      	ldr	r3, [r3, #12]
 8010d02:	429a      	cmp	r2, r3
 8010d04:	d914      	bls.n	8010d30 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010d06:	693b      	ldr	r3, [r7, #16]
 8010d08:	689a      	ldr	r2, [r3, #8]
 8010d0a:	693b      	ldr	r3, [r7, #16]
 8010d0c:	68db      	ldr	r3, [r3, #12]
 8010d0e:	1ad2      	subs	r2, r2, r3
 8010d10:	693b      	ldr	r3, [r7, #16]
 8010d12:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010d14:	693b      	ldr	r3, [r7, #16]
 8010d16:	689b      	ldr	r3, [r3, #8]
 8010d18:	461a      	mov	r2, r3
 8010d1a:	6879      	ldr	r1, [r7, #4]
 8010d1c:	68f8      	ldr	r0, [r7, #12]
 8010d1e:	f001 f854 	bl	8011dca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010d22:	2300      	movs	r3, #0
 8010d24:	2200      	movs	r2, #0
 8010d26:	2100      	movs	r1, #0
 8010d28:	68f8      	ldr	r0, [r7, #12]
 8010d2a:	f001 fd41 	bl	80127b0 <USBD_LL_PrepareReceive>
 8010d2e:	e03f      	b.n	8010db0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010d30:	693b      	ldr	r3, [r7, #16]
 8010d32:	68da      	ldr	r2, [r3, #12]
 8010d34:	693b      	ldr	r3, [r7, #16]
 8010d36:	689b      	ldr	r3, [r3, #8]
 8010d38:	429a      	cmp	r2, r3
 8010d3a:	d11c      	bne.n	8010d76 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010d3c:	693b      	ldr	r3, [r7, #16]
 8010d3e:	685a      	ldr	r2, [r3, #4]
 8010d40:	693b      	ldr	r3, [r7, #16]
 8010d42:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010d44:	429a      	cmp	r2, r3
 8010d46:	d316      	bcc.n	8010d76 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010d48:	693b      	ldr	r3, [r7, #16]
 8010d4a:	685a      	ldr	r2, [r3, #4]
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010d52:	429a      	cmp	r2, r3
 8010d54:	d20f      	bcs.n	8010d76 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010d56:	2200      	movs	r2, #0
 8010d58:	2100      	movs	r1, #0
 8010d5a:	68f8      	ldr	r0, [r7, #12]
 8010d5c:	f001 f835 	bl	8011dca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	2200      	movs	r2, #0
 8010d64:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010d68:	2300      	movs	r3, #0
 8010d6a:	2200      	movs	r2, #0
 8010d6c:	2100      	movs	r1, #0
 8010d6e:	68f8      	ldr	r0, [r7, #12]
 8010d70:	f001 fd1e 	bl	80127b0 <USBD_LL_PrepareReceive>
 8010d74:	e01c      	b.n	8010db0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010d7c:	b2db      	uxtb	r3, r3
 8010d7e:	2b03      	cmp	r3, #3
 8010d80:	d10f      	bne.n	8010da2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010d88:	68db      	ldr	r3, [r3, #12]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d009      	beq.n	8010da2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	2200      	movs	r2, #0
 8010d92:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010d9c:	68db      	ldr	r3, [r3, #12]
 8010d9e:	68f8      	ldr	r0, [r7, #12]
 8010da0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010da2:	2180      	movs	r1, #128	@ 0x80
 8010da4:	68f8      	ldr	r0, [r7, #12]
 8010da6:	f001 fc59 	bl	801265c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010daa:	68f8      	ldr	r0, [r7, #12]
 8010dac:	f001 f85f 	bl	8011e6e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d03a      	beq.n	8010e30 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8010dba:	68f8      	ldr	r0, [r7, #12]
 8010dbc:	f7ff fe42 	bl	8010a44 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8010dc8:	e032      	b.n	8010e30 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8010dca:	7afb      	ldrb	r3, [r7, #11]
 8010dcc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010dd0:	b2db      	uxtb	r3, r3
 8010dd2:	4619      	mov	r1, r3
 8010dd4:	68f8      	ldr	r0, [r7, #12]
 8010dd6:	f000 f8f3 	bl	8010fc0 <USBD_CoreFindEP>
 8010dda:	4603      	mov	r3, r0
 8010ddc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010dde:	7dfb      	ldrb	r3, [r7, #23]
 8010de0:	2bff      	cmp	r3, #255	@ 0xff
 8010de2:	d025      	beq.n	8010e30 <USBD_LL_DataInStage+0x15a>
 8010de4:	7dfb      	ldrb	r3, [r7, #23]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d122      	bne.n	8010e30 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010df0:	b2db      	uxtb	r3, r3
 8010df2:	2b03      	cmp	r3, #3
 8010df4:	d11c      	bne.n	8010e30 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8010df6:	7dfa      	ldrb	r2, [r7, #23]
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	32ae      	adds	r2, #174	@ 0xae
 8010dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e00:	695b      	ldr	r3, [r3, #20]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d014      	beq.n	8010e30 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8010e06:	7dfa      	ldrb	r2, [r7, #23]
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8010e0e:	7dfa      	ldrb	r2, [r7, #23]
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	32ae      	adds	r2, #174	@ 0xae
 8010e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e18:	695b      	ldr	r3, [r3, #20]
 8010e1a:	7afa      	ldrb	r2, [r7, #11]
 8010e1c:	4611      	mov	r1, r2
 8010e1e:	68f8      	ldr	r0, [r7, #12]
 8010e20:	4798      	blx	r3
 8010e22:	4603      	mov	r3, r0
 8010e24:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8010e26:	7dbb      	ldrb	r3, [r7, #22]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d001      	beq.n	8010e30 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8010e2c:	7dbb      	ldrb	r3, [r7, #22]
 8010e2e:	e000      	b.n	8010e32 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8010e30:	2300      	movs	r3, #0
}
 8010e32:	4618      	mov	r0, r3
 8010e34:	3718      	adds	r7, #24
 8010e36:	46bd      	mov	sp, r7
 8010e38:	bd80      	pop	{r7, pc}

08010e3a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010e3a:	b580      	push	{r7, lr}
 8010e3c:	b084      	sub	sp, #16
 8010e3e:	af00      	add	r7, sp, #0
 8010e40:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8010e42:	2300      	movs	r3, #0
 8010e44:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	2201      	movs	r2, #1
 8010e4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	2200      	movs	r2, #0
 8010e52:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	2200      	movs	r2, #0
 8010e5a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	2200      	movs	r2, #0
 8010e60:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	2200      	movs	r2, #0
 8010e68:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d014      	beq.n	8010ea0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010e7c:	685b      	ldr	r3, [r3, #4]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d00e      	beq.n	8010ea0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010e88:	685b      	ldr	r3, [r3, #4]
 8010e8a:	687a      	ldr	r2, [r7, #4]
 8010e8c:	6852      	ldr	r2, [r2, #4]
 8010e8e:	b2d2      	uxtb	r2, r2
 8010e90:	4611      	mov	r1, r2
 8010e92:	6878      	ldr	r0, [r7, #4]
 8010e94:	4798      	blx	r3
 8010e96:	4603      	mov	r3, r0
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d001      	beq.n	8010ea0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8010e9c:	2303      	movs	r3, #3
 8010e9e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010ea0:	2340      	movs	r3, #64	@ 0x40
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	2100      	movs	r1, #0
 8010ea6:	6878      	ldr	r0, [r7, #4]
 8010ea8:	f001 fb93 	bl	80125d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	2201      	movs	r2, #1
 8010eb0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	2240      	movs	r2, #64	@ 0x40
 8010eb8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010ebc:	2340      	movs	r3, #64	@ 0x40
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	2180      	movs	r1, #128	@ 0x80
 8010ec2:	6878      	ldr	r0, [r7, #4]
 8010ec4:	f001 fb85 	bl	80125d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	2201      	movs	r2, #1
 8010ecc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	2240      	movs	r2, #64	@ 0x40
 8010ed2:	621a      	str	r2, [r3, #32]

  return ret;
 8010ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	3710      	adds	r7, #16
 8010eda:	46bd      	mov	sp, r7
 8010edc:	bd80      	pop	{r7, pc}

08010ede <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010ede:	b480      	push	{r7}
 8010ee0:	b083      	sub	sp, #12
 8010ee2:	af00      	add	r7, sp, #0
 8010ee4:	6078      	str	r0, [r7, #4]
 8010ee6:	460b      	mov	r3, r1
 8010ee8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	78fa      	ldrb	r2, [r7, #3]
 8010eee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010ef0:	2300      	movs	r3, #0
}
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	370c      	adds	r7, #12
 8010ef6:	46bd      	mov	sp, r7
 8010ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010efc:	4770      	bx	lr

08010efe <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010efe:	b480      	push	{r7}
 8010f00:	b083      	sub	sp, #12
 8010f02:	af00      	add	r7, sp, #0
 8010f04:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010f0c:	b2db      	uxtb	r3, r3
 8010f0e:	2b04      	cmp	r3, #4
 8010f10:	d006      	beq.n	8010f20 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010f18:	b2da      	uxtb	r2, r3
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	2204      	movs	r2, #4
 8010f24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8010f28:	2300      	movs	r3, #0
}
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	370c      	adds	r7, #12
 8010f2e:	46bd      	mov	sp, r7
 8010f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f34:	4770      	bx	lr

08010f36 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010f36:	b480      	push	{r7}
 8010f38:	b083      	sub	sp, #12
 8010f3a:	af00      	add	r7, sp, #0
 8010f3c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010f44:	b2db      	uxtb	r3, r3
 8010f46:	2b04      	cmp	r3, #4
 8010f48:	d106      	bne.n	8010f58 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8010f50:	b2da      	uxtb	r2, r3
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8010f58:	2300      	movs	r3, #0
}
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	370c      	adds	r7, #12
 8010f5e:	46bd      	mov	sp, r7
 8010f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f64:	4770      	bx	lr

08010f66 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010f66:	b580      	push	{r7, lr}
 8010f68:	b082      	sub	sp, #8
 8010f6a:	af00      	add	r7, sp, #0
 8010f6c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010f74:	b2db      	uxtb	r3, r3
 8010f76:	2b03      	cmp	r3, #3
 8010f78:	d110      	bne.n	8010f9c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d00b      	beq.n	8010f9c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010f8a:	69db      	ldr	r3, [r3, #28]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d005      	beq.n	8010f9c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010f96:	69db      	ldr	r3, [r3, #28]
 8010f98:	6878      	ldr	r0, [r7, #4]
 8010f9a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8010f9c:	2300      	movs	r3, #0
}
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	3708      	adds	r7, #8
 8010fa2:	46bd      	mov	sp, r7
 8010fa4:	bd80      	pop	{r7, pc}

08010fa6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010fa6:	b480      	push	{r7}
 8010fa8:	b083      	sub	sp, #12
 8010faa:	af00      	add	r7, sp, #0
 8010fac:	6078      	str	r0, [r7, #4]
 8010fae:	460b      	mov	r3, r1
 8010fb0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010fb2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	370c      	adds	r7, #12
 8010fb8:	46bd      	mov	sp, r7
 8010fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fbe:	4770      	bx	lr

08010fc0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010fc0:	b480      	push	{r7}
 8010fc2:	b083      	sub	sp, #12
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	6078      	str	r0, [r7, #4]
 8010fc8:	460b      	mov	r3, r1
 8010fca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010fcc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010fce:	4618      	mov	r0, r3
 8010fd0:	370c      	adds	r7, #12
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd8:	4770      	bx	lr

08010fda <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8010fda:	b580      	push	{r7, lr}
 8010fdc:	b086      	sub	sp, #24
 8010fde:	af00      	add	r7, sp, #0
 8010fe0:	6078      	str	r0, [r7, #4]
 8010fe2:	460b      	mov	r3, r1
 8010fe4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8010fee:	2300      	movs	r3, #0
 8010ff0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	885b      	ldrh	r3, [r3, #2]
 8010ff6:	b29b      	uxth	r3, r3
 8010ff8:	68fa      	ldr	r2, [r7, #12]
 8010ffa:	7812      	ldrb	r2, [r2, #0]
 8010ffc:	4293      	cmp	r3, r2
 8010ffe:	d91f      	bls.n	8011040 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	781b      	ldrb	r3, [r3, #0]
 8011004:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8011006:	e013      	b.n	8011030 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8011008:	f107 030a 	add.w	r3, r7, #10
 801100c:	4619      	mov	r1, r3
 801100e:	6978      	ldr	r0, [r7, #20]
 8011010:	f000 f81b 	bl	801104a <USBD_GetNextDesc>
 8011014:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8011016:	697b      	ldr	r3, [r7, #20]
 8011018:	785b      	ldrb	r3, [r3, #1]
 801101a:	2b05      	cmp	r3, #5
 801101c:	d108      	bne.n	8011030 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801101e:	697b      	ldr	r3, [r7, #20]
 8011020:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8011022:	693b      	ldr	r3, [r7, #16]
 8011024:	789b      	ldrb	r3, [r3, #2]
 8011026:	78fa      	ldrb	r2, [r7, #3]
 8011028:	429a      	cmp	r2, r3
 801102a:	d008      	beq.n	801103e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801102c:	2300      	movs	r3, #0
 801102e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	885b      	ldrh	r3, [r3, #2]
 8011034:	b29a      	uxth	r2, r3
 8011036:	897b      	ldrh	r3, [r7, #10]
 8011038:	429a      	cmp	r2, r3
 801103a:	d8e5      	bhi.n	8011008 <USBD_GetEpDesc+0x2e>
 801103c:	e000      	b.n	8011040 <USBD_GetEpDesc+0x66>
          break;
 801103e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8011040:	693b      	ldr	r3, [r7, #16]
}
 8011042:	4618      	mov	r0, r3
 8011044:	3718      	adds	r7, #24
 8011046:	46bd      	mov	sp, r7
 8011048:	bd80      	pop	{r7, pc}

0801104a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801104a:	b480      	push	{r7}
 801104c:	b085      	sub	sp, #20
 801104e:	af00      	add	r7, sp, #0
 8011050:	6078      	str	r0, [r7, #4]
 8011052:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8011058:	683b      	ldr	r3, [r7, #0]
 801105a:	881b      	ldrh	r3, [r3, #0]
 801105c:	68fa      	ldr	r2, [r7, #12]
 801105e:	7812      	ldrb	r2, [r2, #0]
 8011060:	4413      	add	r3, r2
 8011062:	b29a      	uxth	r2, r3
 8011064:	683b      	ldr	r3, [r7, #0]
 8011066:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	781b      	ldrb	r3, [r3, #0]
 801106c:	461a      	mov	r2, r3
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	4413      	add	r3, r2
 8011072:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8011074:	68fb      	ldr	r3, [r7, #12]
}
 8011076:	4618      	mov	r0, r3
 8011078:	3714      	adds	r7, #20
 801107a:	46bd      	mov	sp, r7
 801107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011080:	4770      	bx	lr

08011082 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011082:	b480      	push	{r7}
 8011084:	b087      	sub	sp, #28
 8011086:	af00      	add	r7, sp, #0
 8011088:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801108e:	697b      	ldr	r3, [r7, #20]
 8011090:	781b      	ldrb	r3, [r3, #0]
 8011092:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011094:	697b      	ldr	r3, [r7, #20]
 8011096:	3301      	adds	r3, #1
 8011098:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801109a:	697b      	ldr	r3, [r7, #20]
 801109c:	781b      	ldrb	r3, [r3, #0]
 801109e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80110a0:	8a3b      	ldrh	r3, [r7, #16]
 80110a2:	021b      	lsls	r3, r3, #8
 80110a4:	b21a      	sxth	r2, r3
 80110a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80110aa:	4313      	orrs	r3, r2
 80110ac:	b21b      	sxth	r3, r3
 80110ae:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80110b0:	89fb      	ldrh	r3, [r7, #14]
}
 80110b2:	4618      	mov	r0, r3
 80110b4:	371c      	adds	r7, #28
 80110b6:	46bd      	mov	sp, r7
 80110b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110bc:	4770      	bx	lr
	...

080110c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b084      	sub	sp, #16
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
 80110c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80110ca:	2300      	movs	r3, #0
 80110cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80110ce:	683b      	ldr	r3, [r7, #0]
 80110d0:	781b      	ldrb	r3, [r3, #0]
 80110d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80110d6:	2b40      	cmp	r3, #64	@ 0x40
 80110d8:	d005      	beq.n	80110e6 <USBD_StdDevReq+0x26>
 80110da:	2b40      	cmp	r3, #64	@ 0x40
 80110dc:	d857      	bhi.n	801118e <USBD_StdDevReq+0xce>
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d00f      	beq.n	8011102 <USBD_StdDevReq+0x42>
 80110e2:	2b20      	cmp	r3, #32
 80110e4:	d153      	bne.n	801118e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	32ae      	adds	r2, #174	@ 0xae
 80110f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110f4:	689b      	ldr	r3, [r3, #8]
 80110f6:	6839      	ldr	r1, [r7, #0]
 80110f8:	6878      	ldr	r0, [r7, #4]
 80110fa:	4798      	blx	r3
 80110fc:	4603      	mov	r3, r0
 80110fe:	73fb      	strb	r3, [r7, #15]
      break;
 8011100:	e04a      	b.n	8011198 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011102:	683b      	ldr	r3, [r7, #0]
 8011104:	785b      	ldrb	r3, [r3, #1]
 8011106:	2b09      	cmp	r3, #9
 8011108:	d83b      	bhi.n	8011182 <USBD_StdDevReq+0xc2>
 801110a:	a201      	add	r2, pc, #4	@ (adr r2, 8011110 <USBD_StdDevReq+0x50>)
 801110c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011110:	08011165 	.word	0x08011165
 8011114:	08011179 	.word	0x08011179
 8011118:	08011183 	.word	0x08011183
 801111c:	0801116f 	.word	0x0801116f
 8011120:	08011183 	.word	0x08011183
 8011124:	08011143 	.word	0x08011143
 8011128:	08011139 	.word	0x08011139
 801112c:	08011183 	.word	0x08011183
 8011130:	0801115b 	.word	0x0801115b
 8011134:	0801114d 	.word	0x0801114d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011138:	6839      	ldr	r1, [r7, #0]
 801113a:	6878      	ldr	r0, [r7, #4]
 801113c:	f000 fa3c 	bl	80115b8 <USBD_GetDescriptor>
          break;
 8011140:	e024      	b.n	801118c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011142:	6839      	ldr	r1, [r7, #0]
 8011144:	6878      	ldr	r0, [r7, #4]
 8011146:	f000 fbcb 	bl	80118e0 <USBD_SetAddress>
          break;
 801114a:	e01f      	b.n	801118c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801114c:	6839      	ldr	r1, [r7, #0]
 801114e:	6878      	ldr	r0, [r7, #4]
 8011150:	f000 fc0a 	bl	8011968 <USBD_SetConfig>
 8011154:	4603      	mov	r3, r0
 8011156:	73fb      	strb	r3, [r7, #15]
          break;
 8011158:	e018      	b.n	801118c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801115a:	6839      	ldr	r1, [r7, #0]
 801115c:	6878      	ldr	r0, [r7, #4]
 801115e:	f000 fcad 	bl	8011abc <USBD_GetConfig>
          break;
 8011162:	e013      	b.n	801118c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011164:	6839      	ldr	r1, [r7, #0]
 8011166:	6878      	ldr	r0, [r7, #4]
 8011168:	f000 fcde 	bl	8011b28 <USBD_GetStatus>
          break;
 801116c:	e00e      	b.n	801118c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801116e:	6839      	ldr	r1, [r7, #0]
 8011170:	6878      	ldr	r0, [r7, #4]
 8011172:	f000 fd0d 	bl	8011b90 <USBD_SetFeature>
          break;
 8011176:	e009      	b.n	801118c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011178:	6839      	ldr	r1, [r7, #0]
 801117a:	6878      	ldr	r0, [r7, #4]
 801117c:	f000 fd31 	bl	8011be2 <USBD_ClrFeature>
          break;
 8011180:	e004      	b.n	801118c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8011182:	6839      	ldr	r1, [r7, #0]
 8011184:	6878      	ldr	r0, [r7, #4]
 8011186:	f000 fd88 	bl	8011c9a <USBD_CtlError>
          break;
 801118a:	bf00      	nop
      }
      break;
 801118c:	e004      	b.n	8011198 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801118e:	6839      	ldr	r1, [r7, #0]
 8011190:	6878      	ldr	r0, [r7, #4]
 8011192:	f000 fd82 	bl	8011c9a <USBD_CtlError>
      break;
 8011196:	bf00      	nop
  }

  return ret;
 8011198:	7bfb      	ldrb	r3, [r7, #15]
}
 801119a:	4618      	mov	r0, r3
 801119c:	3710      	adds	r7, #16
 801119e:	46bd      	mov	sp, r7
 80111a0:	bd80      	pop	{r7, pc}
 80111a2:	bf00      	nop

080111a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b084      	sub	sp, #16
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]
 80111ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80111ae:	2300      	movs	r3, #0
 80111b0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80111b2:	683b      	ldr	r3, [r7, #0]
 80111b4:	781b      	ldrb	r3, [r3, #0]
 80111b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80111ba:	2b40      	cmp	r3, #64	@ 0x40
 80111bc:	d005      	beq.n	80111ca <USBD_StdItfReq+0x26>
 80111be:	2b40      	cmp	r3, #64	@ 0x40
 80111c0:	d852      	bhi.n	8011268 <USBD_StdItfReq+0xc4>
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d001      	beq.n	80111ca <USBD_StdItfReq+0x26>
 80111c6:	2b20      	cmp	r3, #32
 80111c8:	d14e      	bne.n	8011268 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80111d0:	b2db      	uxtb	r3, r3
 80111d2:	3b01      	subs	r3, #1
 80111d4:	2b02      	cmp	r3, #2
 80111d6:	d840      	bhi.n	801125a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80111d8:	683b      	ldr	r3, [r7, #0]
 80111da:	889b      	ldrh	r3, [r3, #4]
 80111dc:	b2db      	uxtb	r3, r3
 80111de:	2b01      	cmp	r3, #1
 80111e0:	d836      	bhi.n	8011250 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80111e2:	683b      	ldr	r3, [r7, #0]
 80111e4:	889b      	ldrh	r3, [r3, #4]
 80111e6:	b2db      	uxtb	r3, r3
 80111e8:	4619      	mov	r1, r3
 80111ea:	6878      	ldr	r0, [r7, #4]
 80111ec:	f7ff fedb 	bl	8010fa6 <USBD_CoreFindIF>
 80111f0:	4603      	mov	r3, r0
 80111f2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80111f4:	7bbb      	ldrb	r3, [r7, #14]
 80111f6:	2bff      	cmp	r3, #255	@ 0xff
 80111f8:	d01d      	beq.n	8011236 <USBD_StdItfReq+0x92>
 80111fa:	7bbb      	ldrb	r3, [r7, #14]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d11a      	bne.n	8011236 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8011200:	7bba      	ldrb	r2, [r7, #14]
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	32ae      	adds	r2, #174	@ 0xae
 8011206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801120a:	689b      	ldr	r3, [r3, #8]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d00f      	beq.n	8011230 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8011210:	7bba      	ldrb	r2, [r7, #14]
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011218:	7bba      	ldrb	r2, [r7, #14]
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	32ae      	adds	r2, #174	@ 0xae
 801121e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011222:	689b      	ldr	r3, [r3, #8]
 8011224:	6839      	ldr	r1, [r7, #0]
 8011226:	6878      	ldr	r0, [r7, #4]
 8011228:	4798      	blx	r3
 801122a:	4603      	mov	r3, r0
 801122c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801122e:	e004      	b.n	801123a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8011230:	2303      	movs	r3, #3
 8011232:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011234:	e001      	b.n	801123a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8011236:	2303      	movs	r3, #3
 8011238:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801123a:	683b      	ldr	r3, [r7, #0]
 801123c:	88db      	ldrh	r3, [r3, #6]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d110      	bne.n	8011264 <USBD_StdItfReq+0xc0>
 8011242:	7bfb      	ldrb	r3, [r7, #15]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d10d      	bne.n	8011264 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011248:	6878      	ldr	r0, [r7, #4]
 801124a:	f000 fdfd 	bl	8011e48 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801124e:	e009      	b.n	8011264 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8011250:	6839      	ldr	r1, [r7, #0]
 8011252:	6878      	ldr	r0, [r7, #4]
 8011254:	f000 fd21 	bl	8011c9a <USBD_CtlError>
          break;
 8011258:	e004      	b.n	8011264 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801125a:	6839      	ldr	r1, [r7, #0]
 801125c:	6878      	ldr	r0, [r7, #4]
 801125e:	f000 fd1c 	bl	8011c9a <USBD_CtlError>
          break;
 8011262:	e000      	b.n	8011266 <USBD_StdItfReq+0xc2>
          break;
 8011264:	bf00      	nop
      }
      break;
 8011266:	e004      	b.n	8011272 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8011268:	6839      	ldr	r1, [r7, #0]
 801126a:	6878      	ldr	r0, [r7, #4]
 801126c:	f000 fd15 	bl	8011c9a <USBD_CtlError>
      break;
 8011270:	bf00      	nop
  }

  return ret;
 8011272:	7bfb      	ldrb	r3, [r7, #15]
}
 8011274:	4618      	mov	r0, r3
 8011276:	3710      	adds	r7, #16
 8011278:	46bd      	mov	sp, r7
 801127a:	bd80      	pop	{r7, pc}

0801127c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801127c:	b580      	push	{r7, lr}
 801127e:	b084      	sub	sp, #16
 8011280:	af00      	add	r7, sp, #0
 8011282:	6078      	str	r0, [r7, #4]
 8011284:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8011286:	2300      	movs	r3, #0
 8011288:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801128a:	683b      	ldr	r3, [r7, #0]
 801128c:	889b      	ldrh	r3, [r3, #4]
 801128e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011290:	683b      	ldr	r3, [r7, #0]
 8011292:	781b      	ldrb	r3, [r3, #0]
 8011294:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011298:	2b40      	cmp	r3, #64	@ 0x40
 801129a:	d007      	beq.n	80112ac <USBD_StdEPReq+0x30>
 801129c:	2b40      	cmp	r3, #64	@ 0x40
 801129e:	f200 817f 	bhi.w	80115a0 <USBD_StdEPReq+0x324>
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d02a      	beq.n	80112fc <USBD_StdEPReq+0x80>
 80112a6:	2b20      	cmp	r3, #32
 80112a8:	f040 817a 	bne.w	80115a0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80112ac:	7bbb      	ldrb	r3, [r7, #14]
 80112ae:	4619      	mov	r1, r3
 80112b0:	6878      	ldr	r0, [r7, #4]
 80112b2:	f7ff fe85 	bl	8010fc0 <USBD_CoreFindEP>
 80112b6:	4603      	mov	r3, r0
 80112b8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80112ba:	7b7b      	ldrb	r3, [r7, #13]
 80112bc:	2bff      	cmp	r3, #255	@ 0xff
 80112be:	f000 8174 	beq.w	80115aa <USBD_StdEPReq+0x32e>
 80112c2:	7b7b      	ldrb	r3, [r7, #13]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	f040 8170 	bne.w	80115aa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80112ca:	7b7a      	ldrb	r2, [r7, #13]
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80112d2:	7b7a      	ldrb	r2, [r7, #13]
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	32ae      	adds	r2, #174	@ 0xae
 80112d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80112dc:	689b      	ldr	r3, [r3, #8]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	f000 8163 	beq.w	80115aa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80112e4:	7b7a      	ldrb	r2, [r7, #13]
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	32ae      	adds	r2, #174	@ 0xae
 80112ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80112ee:	689b      	ldr	r3, [r3, #8]
 80112f0:	6839      	ldr	r1, [r7, #0]
 80112f2:	6878      	ldr	r0, [r7, #4]
 80112f4:	4798      	blx	r3
 80112f6:	4603      	mov	r3, r0
 80112f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80112fa:	e156      	b.n	80115aa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80112fc:	683b      	ldr	r3, [r7, #0]
 80112fe:	785b      	ldrb	r3, [r3, #1]
 8011300:	2b03      	cmp	r3, #3
 8011302:	d008      	beq.n	8011316 <USBD_StdEPReq+0x9a>
 8011304:	2b03      	cmp	r3, #3
 8011306:	f300 8145 	bgt.w	8011594 <USBD_StdEPReq+0x318>
 801130a:	2b00      	cmp	r3, #0
 801130c:	f000 809b 	beq.w	8011446 <USBD_StdEPReq+0x1ca>
 8011310:	2b01      	cmp	r3, #1
 8011312:	d03c      	beq.n	801138e <USBD_StdEPReq+0x112>
 8011314:	e13e      	b.n	8011594 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801131c:	b2db      	uxtb	r3, r3
 801131e:	2b02      	cmp	r3, #2
 8011320:	d002      	beq.n	8011328 <USBD_StdEPReq+0xac>
 8011322:	2b03      	cmp	r3, #3
 8011324:	d016      	beq.n	8011354 <USBD_StdEPReq+0xd8>
 8011326:	e02c      	b.n	8011382 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011328:	7bbb      	ldrb	r3, [r7, #14]
 801132a:	2b00      	cmp	r3, #0
 801132c:	d00d      	beq.n	801134a <USBD_StdEPReq+0xce>
 801132e:	7bbb      	ldrb	r3, [r7, #14]
 8011330:	2b80      	cmp	r3, #128	@ 0x80
 8011332:	d00a      	beq.n	801134a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011334:	7bbb      	ldrb	r3, [r7, #14]
 8011336:	4619      	mov	r1, r3
 8011338:	6878      	ldr	r0, [r7, #4]
 801133a:	f001 f98f 	bl	801265c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801133e:	2180      	movs	r1, #128	@ 0x80
 8011340:	6878      	ldr	r0, [r7, #4]
 8011342:	f001 f98b 	bl	801265c <USBD_LL_StallEP>
 8011346:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011348:	e020      	b.n	801138c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801134a:	6839      	ldr	r1, [r7, #0]
 801134c:	6878      	ldr	r0, [r7, #4]
 801134e:	f000 fca4 	bl	8011c9a <USBD_CtlError>
              break;
 8011352:	e01b      	b.n	801138c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011354:	683b      	ldr	r3, [r7, #0]
 8011356:	885b      	ldrh	r3, [r3, #2]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d10e      	bne.n	801137a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801135c:	7bbb      	ldrb	r3, [r7, #14]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d00b      	beq.n	801137a <USBD_StdEPReq+0xfe>
 8011362:	7bbb      	ldrb	r3, [r7, #14]
 8011364:	2b80      	cmp	r3, #128	@ 0x80
 8011366:	d008      	beq.n	801137a <USBD_StdEPReq+0xfe>
 8011368:	683b      	ldr	r3, [r7, #0]
 801136a:	88db      	ldrh	r3, [r3, #6]
 801136c:	2b00      	cmp	r3, #0
 801136e:	d104      	bne.n	801137a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011370:	7bbb      	ldrb	r3, [r7, #14]
 8011372:	4619      	mov	r1, r3
 8011374:	6878      	ldr	r0, [r7, #4]
 8011376:	f001 f971 	bl	801265c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801137a:	6878      	ldr	r0, [r7, #4]
 801137c:	f000 fd64 	bl	8011e48 <USBD_CtlSendStatus>

              break;
 8011380:	e004      	b.n	801138c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8011382:	6839      	ldr	r1, [r7, #0]
 8011384:	6878      	ldr	r0, [r7, #4]
 8011386:	f000 fc88 	bl	8011c9a <USBD_CtlError>
              break;
 801138a:	bf00      	nop
          }
          break;
 801138c:	e107      	b.n	801159e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011394:	b2db      	uxtb	r3, r3
 8011396:	2b02      	cmp	r3, #2
 8011398:	d002      	beq.n	80113a0 <USBD_StdEPReq+0x124>
 801139a:	2b03      	cmp	r3, #3
 801139c:	d016      	beq.n	80113cc <USBD_StdEPReq+0x150>
 801139e:	e04b      	b.n	8011438 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80113a0:	7bbb      	ldrb	r3, [r7, #14]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d00d      	beq.n	80113c2 <USBD_StdEPReq+0x146>
 80113a6:	7bbb      	ldrb	r3, [r7, #14]
 80113a8:	2b80      	cmp	r3, #128	@ 0x80
 80113aa:	d00a      	beq.n	80113c2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80113ac:	7bbb      	ldrb	r3, [r7, #14]
 80113ae:	4619      	mov	r1, r3
 80113b0:	6878      	ldr	r0, [r7, #4]
 80113b2:	f001 f953 	bl	801265c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80113b6:	2180      	movs	r1, #128	@ 0x80
 80113b8:	6878      	ldr	r0, [r7, #4]
 80113ba:	f001 f94f 	bl	801265c <USBD_LL_StallEP>
 80113be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80113c0:	e040      	b.n	8011444 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80113c2:	6839      	ldr	r1, [r7, #0]
 80113c4:	6878      	ldr	r0, [r7, #4]
 80113c6:	f000 fc68 	bl	8011c9a <USBD_CtlError>
              break;
 80113ca:	e03b      	b.n	8011444 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80113cc:	683b      	ldr	r3, [r7, #0]
 80113ce:	885b      	ldrh	r3, [r3, #2]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d136      	bne.n	8011442 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80113d4:	7bbb      	ldrb	r3, [r7, #14]
 80113d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d004      	beq.n	80113e8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80113de:	7bbb      	ldrb	r3, [r7, #14]
 80113e0:	4619      	mov	r1, r3
 80113e2:	6878      	ldr	r0, [r7, #4]
 80113e4:	f001 f959 	bl	801269a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80113e8:	6878      	ldr	r0, [r7, #4]
 80113ea:	f000 fd2d 	bl	8011e48 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80113ee:	7bbb      	ldrb	r3, [r7, #14]
 80113f0:	4619      	mov	r1, r3
 80113f2:	6878      	ldr	r0, [r7, #4]
 80113f4:	f7ff fde4 	bl	8010fc0 <USBD_CoreFindEP>
 80113f8:	4603      	mov	r3, r0
 80113fa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80113fc:	7b7b      	ldrb	r3, [r7, #13]
 80113fe:	2bff      	cmp	r3, #255	@ 0xff
 8011400:	d01f      	beq.n	8011442 <USBD_StdEPReq+0x1c6>
 8011402:	7b7b      	ldrb	r3, [r7, #13]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d11c      	bne.n	8011442 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8011408:	7b7a      	ldrb	r2, [r7, #13]
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8011410:	7b7a      	ldrb	r2, [r7, #13]
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	32ae      	adds	r2, #174	@ 0xae
 8011416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801141a:	689b      	ldr	r3, [r3, #8]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d010      	beq.n	8011442 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011420:	7b7a      	ldrb	r2, [r7, #13]
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	32ae      	adds	r2, #174	@ 0xae
 8011426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801142a:	689b      	ldr	r3, [r3, #8]
 801142c:	6839      	ldr	r1, [r7, #0]
 801142e:	6878      	ldr	r0, [r7, #4]
 8011430:	4798      	blx	r3
 8011432:	4603      	mov	r3, r0
 8011434:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8011436:	e004      	b.n	8011442 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8011438:	6839      	ldr	r1, [r7, #0]
 801143a:	6878      	ldr	r0, [r7, #4]
 801143c:	f000 fc2d 	bl	8011c9a <USBD_CtlError>
              break;
 8011440:	e000      	b.n	8011444 <USBD_StdEPReq+0x1c8>
              break;
 8011442:	bf00      	nop
          }
          break;
 8011444:	e0ab      	b.n	801159e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801144c:	b2db      	uxtb	r3, r3
 801144e:	2b02      	cmp	r3, #2
 8011450:	d002      	beq.n	8011458 <USBD_StdEPReq+0x1dc>
 8011452:	2b03      	cmp	r3, #3
 8011454:	d032      	beq.n	80114bc <USBD_StdEPReq+0x240>
 8011456:	e097      	b.n	8011588 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011458:	7bbb      	ldrb	r3, [r7, #14]
 801145a:	2b00      	cmp	r3, #0
 801145c:	d007      	beq.n	801146e <USBD_StdEPReq+0x1f2>
 801145e:	7bbb      	ldrb	r3, [r7, #14]
 8011460:	2b80      	cmp	r3, #128	@ 0x80
 8011462:	d004      	beq.n	801146e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8011464:	6839      	ldr	r1, [r7, #0]
 8011466:	6878      	ldr	r0, [r7, #4]
 8011468:	f000 fc17 	bl	8011c9a <USBD_CtlError>
                break;
 801146c:	e091      	b.n	8011592 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801146e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011472:	2b00      	cmp	r3, #0
 8011474:	da0b      	bge.n	801148e <USBD_StdEPReq+0x212>
 8011476:	7bbb      	ldrb	r3, [r7, #14]
 8011478:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801147c:	4613      	mov	r3, r2
 801147e:	009b      	lsls	r3, r3, #2
 8011480:	4413      	add	r3, r2
 8011482:	009b      	lsls	r3, r3, #2
 8011484:	3310      	adds	r3, #16
 8011486:	687a      	ldr	r2, [r7, #4]
 8011488:	4413      	add	r3, r2
 801148a:	3304      	adds	r3, #4
 801148c:	e00b      	b.n	80114a6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801148e:	7bbb      	ldrb	r3, [r7, #14]
 8011490:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011494:	4613      	mov	r3, r2
 8011496:	009b      	lsls	r3, r3, #2
 8011498:	4413      	add	r3, r2
 801149a:	009b      	lsls	r3, r3, #2
 801149c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80114a0:	687a      	ldr	r2, [r7, #4]
 80114a2:	4413      	add	r3, r2
 80114a4:	3304      	adds	r3, #4
 80114a6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80114a8:	68bb      	ldr	r3, [r7, #8]
 80114aa:	2200      	movs	r2, #0
 80114ac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80114ae:	68bb      	ldr	r3, [r7, #8]
 80114b0:	2202      	movs	r2, #2
 80114b2:	4619      	mov	r1, r3
 80114b4:	6878      	ldr	r0, [r7, #4]
 80114b6:	f000 fc6d 	bl	8011d94 <USBD_CtlSendData>
              break;
 80114ba:	e06a      	b.n	8011592 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80114bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	da11      	bge.n	80114e8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80114c4:	7bbb      	ldrb	r3, [r7, #14]
 80114c6:	f003 020f 	and.w	r2, r3, #15
 80114ca:	6879      	ldr	r1, [r7, #4]
 80114cc:	4613      	mov	r3, r2
 80114ce:	009b      	lsls	r3, r3, #2
 80114d0:	4413      	add	r3, r2
 80114d2:	009b      	lsls	r3, r3, #2
 80114d4:	440b      	add	r3, r1
 80114d6:	3324      	adds	r3, #36	@ 0x24
 80114d8:	881b      	ldrh	r3, [r3, #0]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d117      	bne.n	801150e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80114de:	6839      	ldr	r1, [r7, #0]
 80114e0:	6878      	ldr	r0, [r7, #4]
 80114e2:	f000 fbda 	bl	8011c9a <USBD_CtlError>
                  break;
 80114e6:	e054      	b.n	8011592 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80114e8:	7bbb      	ldrb	r3, [r7, #14]
 80114ea:	f003 020f 	and.w	r2, r3, #15
 80114ee:	6879      	ldr	r1, [r7, #4]
 80114f0:	4613      	mov	r3, r2
 80114f2:	009b      	lsls	r3, r3, #2
 80114f4:	4413      	add	r3, r2
 80114f6:	009b      	lsls	r3, r3, #2
 80114f8:	440b      	add	r3, r1
 80114fa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80114fe:	881b      	ldrh	r3, [r3, #0]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d104      	bne.n	801150e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011504:	6839      	ldr	r1, [r7, #0]
 8011506:	6878      	ldr	r0, [r7, #4]
 8011508:	f000 fbc7 	bl	8011c9a <USBD_CtlError>
                  break;
 801150c:	e041      	b.n	8011592 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801150e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011512:	2b00      	cmp	r3, #0
 8011514:	da0b      	bge.n	801152e <USBD_StdEPReq+0x2b2>
 8011516:	7bbb      	ldrb	r3, [r7, #14]
 8011518:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801151c:	4613      	mov	r3, r2
 801151e:	009b      	lsls	r3, r3, #2
 8011520:	4413      	add	r3, r2
 8011522:	009b      	lsls	r3, r3, #2
 8011524:	3310      	adds	r3, #16
 8011526:	687a      	ldr	r2, [r7, #4]
 8011528:	4413      	add	r3, r2
 801152a:	3304      	adds	r3, #4
 801152c:	e00b      	b.n	8011546 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801152e:	7bbb      	ldrb	r3, [r7, #14]
 8011530:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011534:	4613      	mov	r3, r2
 8011536:	009b      	lsls	r3, r3, #2
 8011538:	4413      	add	r3, r2
 801153a:	009b      	lsls	r3, r3, #2
 801153c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8011540:	687a      	ldr	r2, [r7, #4]
 8011542:	4413      	add	r3, r2
 8011544:	3304      	adds	r3, #4
 8011546:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011548:	7bbb      	ldrb	r3, [r7, #14]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d002      	beq.n	8011554 <USBD_StdEPReq+0x2d8>
 801154e:	7bbb      	ldrb	r3, [r7, #14]
 8011550:	2b80      	cmp	r3, #128	@ 0x80
 8011552:	d103      	bne.n	801155c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8011554:	68bb      	ldr	r3, [r7, #8]
 8011556:	2200      	movs	r2, #0
 8011558:	601a      	str	r2, [r3, #0]
 801155a:	e00e      	b.n	801157a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801155c:	7bbb      	ldrb	r3, [r7, #14]
 801155e:	4619      	mov	r1, r3
 8011560:	6878      	ldr	r0, [r7, #4]
 8011562:	f001 f8b9 	bl	80126d8 <USBD_LL_IsStallEP>
 8011566:	4603      	mov	r3, r0
 8011568:	2b00      	cmp	r3, #0
 801156a:	d003      	beq.n	8011574 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 801156c:	68bb      	ldr	r3, [r7, #8]
 801156e:	2201      	movs	r2, #1
 8011570:	601a      	str	r2, [r3, #0]
 8011572:	e002      	b.n	801157a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8011574:	68bb      	ldr	r3, [r7, #8]
 8011576:	2200      	movs	r2, #0
 8011578:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801157a:	68bb      	ldr	r3, [r7, #8]
 801157c:	2202      	movs	r2, #2
 801157e:	4619      	mov	r1, r3
 8011580:	6878      	ldr	r0, [r7, #4]
 8011582:	f000 fc07 	bl	8011d94 <USBD_CtlSendData>
              break;
 8011586:	e004      	b.n	8011592 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8011588:	6839      	ldr	r1, [r7, #0]
 801158a:	6878      	ldr	r0, [r7, #4]
 801158c:	f000 fb85 	bl	8011c9a <USBD_CtlError>
              break;
 8011590:	bf00      	nop
          }
          break;
 8011592:	e004      	b.n	801159e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8011594:	6839      	ldr	r1, [r7, #0]
 8011596:	6878      	ldr	r0, [r7, #4]
 8011598:	f000 fb7f 	bl	8011c9a <USBD_CtlError>
          break;
 801159c:	bf00      	nop
      }
      break;
 801159e:	e005      	b.n	80115ac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80115a0:	6839      	ldr	r1, [r7, #0]
 80115a2:	6878      	ldr	r0, [r7, #4]
 80115a4:	f000 fb79 	bl	8011c9a <USBD_CtlError>
      break;
 80115a8:	e000      	b.n	80115ac <USBD_StdEPReq+0x330>
      break;
 80115aa:	bf00      	nop
  }

  return ret;
 80115ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80115ae:	4618      	mov	r0, r3
 80115b0:	3710      	adds	r7, #16
 80115b2:	46bd      	mov	sp, r7
 80115b4:	bd80      	pop	{r7, pc}
	...

080115b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b084      	sub	sp, #16
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
 80115c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80115c2:	2300      	movs	r3, #0
 80115c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80115c6:	2300      	movs	r3, #0
 80115c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80115ca:	2300      	movs	r3, #0
 80115cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80115ce:	683b      	ldr	r3, [r7, #0]
 80115d0:	885b      	ldrh	r3, [r3, #2]
 80115d2:	0a1b      	lsrs	r3, r3, #8
 80115d4:	b29b      	uxth	r3, r3
 80115d6:	3b01      	subs	r3, #1
 80115d8:	2b0e      	cmp	r3, #14
 80115da:	f200 8152 	bhi.w	8011882 <USBD_GetDescriptor+0x2ca>
 80115de:	a201      	add	r2, pc, #4	@ (adr r2, 80115e4 <USBD_GetDescriptor+0x2c>)
 80115e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115e4:	08011655 	.word	0x08011655
 80115e8:	0801166d 	.word	0x0801166d
 80115ec:	080116ad 	.word	0x080116ad
 80115f0:	08011883 	.word	0x08011883
 80115f4:	08011883 	.word	0x08011883
 80115f8:	08011823 	.word	0x08011823
 80115fc:	0801184f 	.word	0x0801184f
 8011600:	08011883 	.word	0x08011883
 8011604:	08011883 	.word	0x08011883
 8011608:	08011883 	.word	0x08011883
 801160c:	08011883 	.word	0x08011883
 8011610:	08011883 	.word	0x08011883
 8011614:	08011883 	.word	0x08011883
 8011618:	08011883 	.word	0x08011883
 801161c:	08011621 	.word	0x08011621
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011626:	69db      	ldr	r3, [r3, #28]
 8011628:	2b00      	cmp	r3, #0
 801162a:	d00b      	beq.n	8011644 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011632:	69db      	ldr	r3, [r3, #28]
 8011634:	687a      	ldr	r2, [r7, #4]
 8011636:	7c12      	ldrb	r2, [r2, #16]
 8011638:	f107 0108 	add.w	r1, r7, #8
 801163c:	4610      	mov	r0, r2
 801163e:	4798      	blx	r3
 8011640:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011642:	e126      	b.n	8011892 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011644:	6839      	ldr	r1, [r7, #0]
 8011646:	6878      	ldr	r0, [r7, #4]
 8011648:	f000 fb27 	bl	8011c9a <USBD_CtlError>
        err++;
 801164c:	7afb      	ldrb	r3, [r7, #11]
 801164e:	3301      	adds	r3, #1
 8011650:	72fb      	strb	r3, [r7, #11]
      break;
 8011652:	e11e      	b.n	8011892 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	687a      	ldr	r2, [r7, #4]
 801165e:	7c12      	ldrb	r2, [r2, #16]
 8011660:	f107 0108 	add.w	r1, r7, #8
 8011664:	4610      	mov	r0, r2
 8011666:	4798      	blx	r3
 8011668:	60f8      	str	r0, [r7, #12]
      break;
 801166a:	e112      	b.n	8011892 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	7c1b      	ldrb	r3, [r3, #16]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d10d      	bne.n	8011690 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801167a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801167c:	f107 0208 	add.w	r2, r7, #8
 8011680:	4610      	mov	r0, r2
 8011682:	4798      	blx	r3
 8011684:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	3301      	adds	r3, #1
 801168a:	2202      	movs	r2, #2
 801168c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801168e:	e100      	b.n	8011892 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011698:	f107 0208 	add.w	r2, r7, #8
 801169c:	4610      	mov	r0, r2
 801169e:	4798      	blx	r3
 80116a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	3301      	adds	r3, #1
 80116a6:	2202      	movs	r2, #2
 80116a8:	701a      	strb	r2, [r3, #0]
      break;
 80116aa:	e0f2      	b.n	8011892 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80116ac:	683b      	ldr	r3, [r7, #0]
 80116ae:	885b      	ldrh	r3, [r3, #2]
 80116b0:	b2db      	uxtb	r3, r3
 80116b2:	2b05      	cmp	r3, #5
 80116b4:	f200 80ac 	bhi.w	8011810 <USBD_GetDescriptor+0x258>
 80116b8:	a201      	add	r2, pc, #4	@ (adr r2, 80116c0 <USBD_GetDescriptor+0x108>)
 80116ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116be:	bf00      	nop
 80116c0:	080116d9 	.word	0x080116d9
 80116c4:	0801170d 	.word	0x0801170d
 80116c8:	08011741 	.word	0x08011741
 80116cc:	08011775 	.word	0x08011775
 80116d0:	080117a9 	.word	0x080117a9
 80116d4:	080117dd 	.word	0x080117dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80116de:	685b      	ldr	r3, [r3, #4]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d00b      	beq.n	80116fc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80116ea:	685b      	ldr	r3, [r3, #4]
 80116ec:	687a      	ldr	r2, [r7, #4]
 80116ee:	7c12      	ldrb	r2, [r2, #16]
 80116f0:	f107 0108 	add.w	r1, r7, #8
 80116f4:	4610      	mov	r0, r2
 80116f6:	4798      	blx	r3
 80116f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80116fa:	e091      	b.n	8011820 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80116fc:	6839      	ldr	r1, [r7, #0]
 80116fe:	6878      	ldr	r0, [r7, #4]
 8011700:	f000 facb 	bl	8011c9a <USBD_CtlError>
            err++;
 8011704:	7afb      	ldrb	r3, [r7, #11]
 8011706:	3301      	adds	r3, #1
 8011708:	72fb      	strb	r3, [r7, #11]
          break;
 801170a:	e089      	b.n	8011820 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011712:	689b      	ldr	r3, [r3, #8]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d00b      	beq.n	8011730 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801171e:	689b      	ldr	r3, [r3, #8]
 8011720:	687a      	ldr	r2, [r7, #4]
 8011722:	7c12      	ldrb	r2, [r2, #16]
 8011724:	f107 0108 	add.w	r1, r7, #8
 8011728:	4610      	mov	r0, r2
 801172a:	4798      	blx	r3
 801172c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801172e:	e077      	b.n	8011820 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011730:	6839      	ldr	r1, [r7, #0]
 8011732:	6878      	ldr	r0, [r7, #4]
 8011734:	f000 fab1 	bl	8011c9a <USBD_CtlError>
            err++;
 8011738:	7afb      	ldrb	r3, [r7, #11]
 801173a:	3301      	adds	r3, #1
 801173c:	72fb      	strb	r3, [r7, #11]
          break;
 801173e:	e06f      	b.n	8011820 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011746:	68db      	ldr	r3, [r3, #12]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d00b      	beq.n	8011764 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011752:	68db      	ldr	r3, [r3, #12]
 8011754:	687a      	ldr	r2, [r7, #4]
 8011756:	7c12      	ldrb	r2, [r2, #16]
 8011758:	f107 0108 	add.w	r1, r7, #8
 801175c:	4610      	mov	r0, r2
 801175e:	4798      	blx	r3
 8011760:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011762:	e05d      	b.n	8011820 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011764:	6839      	ldr	r1, [r7, #0]
 8011766:	6878      	ldr	r0, [r7, #4]
 8011768:	f000 fa97 	bl	8011c9a <USBD_CtlError>
            err++;
 801176c:	7afb      	ldrb	r3, [r7, #11]
 801176e:	3301      	adds	r3, #1
 8011770:	72fb      	strb	r3, [r7, #11]
          break;
 8011772:	e055      	b.n	8011820 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801177a:	691b      	ldr	r3, [r3, #16]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d00b      	beq.n	8011798 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011786:	691b      	ldr	r3, [r3, #16]
 8011788:	687a      	ldr	r2, [r7, #4]
 801178a:	7c12      	ldrb	r2, [r2, #16]
 801178c:	f107 0108 	add.w	r1, r7, #8
 8011790:	4610      	mov	r0, r2
 8011792:	4798      	blx	r3
 8011794:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011796:	e043      	b.n	8011820 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011798:	6839      	ldr	r1, [r7, #0]
 801179a:	6878      	ldr	r0, [r7, #4]
 801179c:	f000 fa7d 	bl	8011c9a <USBD_CtlError>
            err++;
 80117a0:	7afb      	ldrb	r3, [r7, #11]
 80117a2:	3301      	adds	r3, #1
 80117a4:	72fb      	strb	r3, [r7, #11]
          break;
 80117a6:	e03b      	b.n	8011820 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80117ae:	695b      	ldr	r3, [r3, #20]
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d00b      	beq.n	80117cc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80117ba:	695b      	ldr	r3, [r3, #20]
 80117bc:	687a      	ldr	r2, [r7, #4]
 80117be:	7c12      	ldrb	r2, [r2, #16]
 80117c0:	f107 0108 	add.w	r1, r7, #8
 80117c4:	4610      	mov	r0, r2
 80117c6:	4798      	blx	r3
 80117c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80117ca:	e029      	b.n	8011820 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80117cc:	6839      	ldr	r1, [r7, #0]
 80117ce:	6878      	ldr	r0, [r7, #4]
 80117d0:	f000 fa63 	bl	8011c9a <USBD_CtlError>
            err++;
 80117d4:	7afb      	ldrb	r3, [r7, #11]
 80117d6:	3301      	adds	r3, #1
 80117d8:	72fb      	strb	r3, [r7, #11]
          break;
 80117da:	e021      	b.n	8011820 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80117e2:	699b      	ldr	r3, [r3, #24]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d00b      	beq.n	8011800 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80117ee:	699b      	ldr	r3, [r3, #24]
 80117f0:	687a      	ldr	r2, [r7, #4]
 80117f2:	7c12      	ldrb	r2, [r2, #16]
 80117f4:	f107 0108 	add.w	r1, r7, #8
 80117f8:	4610      	mov	r0, r2
 80117fa:	4798      	blx	r3
 80117fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80117fe:	e00f      	b.n	8011820 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011800:	6839      	ldr	r1, [r7, #0]
 8011802:	6878      	ldr	r0, [r7, #4]
 8011804:	f000 fa49 	bl	8011c9a <USBD_CtlError>
            err++;
 8011808:	7afb      	ldrb	r3, [r7, #11]
 801180a:	3301      	adds	r3, #1
 801180c:	72fb      	strb	r3, [r7, #11]
          break;
 801180e:	e007      	b.n	8011820 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8011810:	6839      	ldr	r1, [r7, #0]
 8011812:	6878      	ldr	r0, [r7, #4]
 8011814:	f000 fa41 	bl	8011c9a <USBD_CtlError>
          err++;
 8011818:	7afb      	ldrb	r3, [r7, #11]
 801181a:	3301      	adds	r3, #1
 801181c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801181e:	bf00      	nop
      }
      break;
 8011820:	e037      	b.n	8011892 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	7c1b      	ldrb	r3, [r3, #16]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d109      	bne.n	801183e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011832:	f107 0208 	add.w	r2, r7, #8
 8011836:	4610      	mov	r0, r2
 8011838:	4798      	blx	r3
 801183a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801183c:	e029      	b.n	8011892 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801183e:	6839      	ldr	r1, [r7, #0]
 8011840:	6878      	ldr	r0, [r7, #4]
 8011842:	f000 fa2a 	bl	8011c9a <USBD_CtlError>
        err++;
 8011846:	7afb      	ldrb	r3, [r7, #11]
 8011848:	3301      	adds	r3, #1
 801184a:	72fb      	strb	r3, [r7, #11]
      break;
 801184c:	e021      	b.n	8011892 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	7c1b      	ldrb	r3, [r3, #16]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d10d      	bne.n	8011872 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801185e:	f107 0208 	add.w	r2, r7, #8
 8011862:	4610      	mov	r0, r2
 8011864:	4798      	blx	r3
 8011866:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	3301      	adds	r3, #1
 801186c:	2207      	movs	r2, #7
 801186e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011870:	e00f      	b.n	8011892 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011872:	6839      	ldr	r1, [r7, #0]
 8011874:	6878      	ldr	r0, [r7, #4]
 8011876:	f000 fa10 	bl	8011c9a <USBD_CtlError>
        err++;
 801187a:	7afb      	ldrb	r3, [r7, #11]
 801187c:	3301      	adds	r3, #1
 801187e:	72fb      	strb	r3, [r7, #11]
      break;
 8011880:	e007      	b.n	8011892 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8011882:	6839      	ldr	r1, [r7, #0]
 8011884:	6878      	ldr	r0, [r7, #4]
 8011886:	f000 fa08 	bl	8011c9a <USBD_CtlError>
      err++;
 801188a:	7afb      	ldrb	r3, [r7, #11]
 801188c:	3301      	adds	r3, #1
 801188e:	72fb      	strb	r3, [r7, #11]
      break;
 8011890:	bf00      	nop
  }

  if (err != 0U)
 8011892:	7afb      	ldrb	r3, [r7, #11]
 8011894:	2b00      	cmp	r3, #0
 8011896:	d11e      	bne.n	80118d6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8011898:	683b      	ldr	r3, [r7, #0]
 801189a:	88db      	ldrh	r3, [r3, #6]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d016      	beq.n	80118ce <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80118a0:	893b      	ldrh	r3, [r7, #8]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d00e      	beq.n	80118c4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80118a6:	683b      	ldr	r3, [r7, #0]
 80118a8:	88da      	ldrh	r2, [r3, #6]
 80118aa:	893b      	ldrh	r3, [r7, #8]
 80118ac:	4293      	cmp	r3, r2
 80118ae:	bf28      	it	cs
 80118b0:	4613      	movcs	r3, r2
 80118b2:	b29b      	uxth	r3, r3
 80118b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80118b6:	893b      	ldrh	r3, [r7, #8]
 80118b8:	461a      	mov	r2, r3
 80118ba:	68f9      	ldr	r1, [r7, #12]
 80118bc:	6878      	ldr	r0, [r7, #4]
 80118be:	f000 fa69 	bl	8011d94 <USBD_CtlSendData>
 80118c2:	e009      	b.n	80118d8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80118c4:	6839      	ldr	r1, [r7, #0]
 80118c6:	6878      	ldr	r0, [r7, #4]
 80118c8:	f000 f9e7 	bl	8011c9a <USBD_CtlError>
 80118cc:	e004      	b.n	80118d8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80118ce:	6878      	ldr	r0, [r7, #4]
 80118d0:	f000 faba 	bl	8011e48 <USBD_CtlSendStatus>
 80118d4:	e000      	b.n	80118d8 <USBD_GetDescriptor+0x320>
    return;
 80118d6:	bf00      	nop
  }
}
 80118d8:	3710      	adds	r7, #16
 80118da:	46bd      	mov	sp, r7
 80118dc:	bd80      	pop	{r7, pc}
 80118de:	bf00      	nop

080118e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80118e0:	b580      	push	{r7, lr}
 80118e2:	b084      	sub	sp, #16
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	6078      	str	r0, [r7, #4]
 80118e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80118ea:	683b      	ldr	r3, [r7, #0]
 80118ec:	889b      	ldrh	r3, [r3, #4]
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d131      	bne.n	8011956 <USBD_SetAddress+0x76>
 80118f2:	683b      	ldr	r3, [r7, #0]
 80118f4:	88db      	ldrh	r3, [r3, #6]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d12d      	bne.n	8011956 <USBD_SetAddress+0x76>
 80118fa:	683b      	ldr	r3, [r7, #0]
 80118fc:	885b      	ldrh	r3, [r3, #2]
 80118fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8011900:	d829      	bhi.n	8011956 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011902:	683b      	ldr	r3, [r7, #0]
 8011904:	885b      	ldrh	r3, [r3, #2]
 8011906:	b2db      	uxtb	r3, r3
 8011908:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801190c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011914:	b2db      	uxtb	r3, r3
 8011916:	2b03      	cmp	r3, #3
 8011918:	d104      	bne.n	8011924 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801191a:	6839      	ldr	r1, [r7, #0]
 801191c:	6878      	ldr	r0, [r7, #4]
 801191e:	f000 f9bc 	bl	8011c9a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011922:	e01d      	b.n	8011960 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	7bfa      	ldrb	r2, [r7, #15]
 8011928:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801192c:	7bfb      	ldrb	r3, [r7, #15]
 801192e:	4619      	mov	r1, r3
 8011930:	6878      	ldr	r0, [r7, #4]
 8011932:	f000 fefd 	bl	8012730 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011936:	6878      	ldr	r0, [r7, #4]
 8011938:	f000 fa86 	bl	8011e48 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801193c:	7bfb      	ldrb	r3, [r7, #15]
 801193e:	2b00      	cmp	r3, #0
 8011940:	d004      	beq.n	801194c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	2202      	movs	r2, #2
 8011946:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801194a:	e009      	b.n	8011960 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	2201      	movs	r2, #1
 8011950:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011954:	e004      	b.n	8011960 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011956:	6839      	ldr	r1, [r7, #0]
 8011958:	6878      	ldr	r0, [r7, #4]
 801195a:	f000 f99e 	bl	8011c9a <USBD_CtlError>
  }
}
 801195e:	bf00      	nop
 8011960:	bf00      	nop
 8011962:	3710      	adds	r7, #16
 8011964:	46bd      	mov	sp, r7
 8011966:	bd80      	pop	{r7, pc}

08011968 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011968:	b580      	push	{r7, lr}
 801196a:	b084      	sub	sp, #16
 801196c:	af00      	add	r7, sp, #0
 801196e:	6078      	str	r0, [r7, #4]
 8011970:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011972:	2300      	movs	r3, #0
 8011974:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011976:	683b      	ldr	r3, [r7, #0]
 8011978:	885b      	ldrh	r3, [r3, #2]
 801197a:	b2da      	uxtb	r2, r3
 801197c:	4b4e      	ldr	r3, [pc, #312]	@ (8011ab8 <USBD_SetConfig+0x150>)
 801197e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011980:	4b4d      	ldr	r3, [pc, #308]	@ (8011ab8 <USBD_SetConfig+0x150>)
 8011982:	781b      	ldrb	r3, [r3, #0]
 8011984:	2b01      	cmp	r3, #1
 8011986:	d905      	bls.n	8011994 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011988:	6839      	ldr	r1, [r7, #0]
 801198a:	6878      	ldr	r0, [r7, #4]
 801198c:	f000 f985 	bl	8011c9a <USBD_CtlError>
    return USBD_FAIL;
 8011990:	2303      	movs	r3, #3
 8011992:	e08c      	b.n	8011aae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801199a:	b2db      	uxtb	r3, r3
 801199c:	2b02      	cmp	r3, #2
 801199e:	d002      	beq.n	80119a6 <USBD_SetConfig+0x3e>
 80119a0:	2b03      	cmp	r3, #3
 80119a2:	d029      	beq.n	80119f8 <USBD_SetConfig+0x90>
 80119a4:	e075      	b.n	8011a92 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80119a6:	4b44      	ldr	r3, [pc, #272]	@ (8011ab8 <USBD_SetConfig+0x150>)
 80119a8:	781b      	ldrb	r3, [r3, #0]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d020      	beq.n	80119f0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80119ae:	4b42      	ldr	r3, [pc, #264]	@ (8011ab8 <USBD_SetConfig+0x150>)
 80119b0:	781b      	ldrb	r3, [r3, #0]
 80119b2:	461a      	mov	r2, r3
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80119b8:	4b3f      	ldr	r3, [pc, #252]	@ (8011ab8 <USBD_SetConfig+0x150>)
 80119ba:	781b      	ldrb	r3, [r3, #0]
 80119bc:	4619      	mov	r1, r3
 80119be:	6878      	ldr	r0, [r7, #4]
 80119c0:	f7ff f84b 	bl	8010a5a <USBD_SetClassConfig>
 80119c4:	4603      	mov	r3, r0
 80119c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80119c8:	7bfb      	ldrb	r3, [r7, #15]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d008      	beq.n	80119e0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80119ce:	6839      	ldr	r1, [r7, #0]
 80119d0:	6878      	ldr	r0, [r7, #4]
 80119d2:	f000 f962 	bl	8011c9a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	2202      	movs	r2, #2
 80119da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80119de:	e065      	b.n	8011aac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80119e0:	6878      	ldr	r0, [r7, #4]
 80119e2:	f000 fa31 	bl	8011e48 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	2203      	movs	r2, #3
 80119ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80119ee:	e05d      	b.n	8011aac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80119f0:	6878      	ldr	r0, [r7, #4]
 80119f2:	f000 fa29 	bl	8011e48 <USBD_CtlSendStatus>
      break;
 80119f6:	e059      	b.n	8011aac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80119f8:	4b2f      	ldr	r3, [pc, #188]	@ (8011ab8 <USBD_SetConfig+0x150>)
 80119fa:	781b      	ldrb	r3, [r3, #0]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d112      	bne.n	8011a26 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	2202      	movs	r2, #2
 8011a04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8011a08:	4b2b      	ldr	r3, [pc, #172]	@ (8011ab8 <USBD_SetConfig+0x150>)
 8011a0a:	781b      	ldrb	r3, [r3, #0]
 8011a0c:	461a      	mov	r2, r3
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011a12:	4b29      	ldr	r3, [pc, #164]	@ (8011ab8 <USBD_SetConfig+0x150>)
 8011a14:	781b      	ldrb	r3, [r3, #0]
 8011a16:	4619      	mov	r1, r3
 8011a18:	6878      	ldr	r0, [r7, #4]
 8011a1a:	f7ff f83a 	bl	8010a92 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8011a1e:	6878      	ldr	r0, [r7, #4]
 8011a20:	f000 fa12 	bl	8011e48 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011a24:	e042      	b.n	8011aac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8011a26:	4b24      	ldr	r3, [pc, #144]	@ (8011ab8 <USBD_SetConfig+0x150>)
 8011a28:	781b      	ldrb	r3, [r3, #0]
 8011a2a:	461a      	mov	r2, r3
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	685b      	ldr	r3, [r3, #4]
 8011a30:	429a      	cmp	r2, r3
 8011a32:	d02a      	beq.n	8011a8a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	685b      	ldr	r3, [r3, #4]
 8011a38:	b2db      	uxtb	r3, r3
 8011a3a:	4619      	mov	r1, r3
 8011a3c:	6878      	ldr	r0, [r7, #4]
 8011a3e:	f7ff f828 	bl	8010a92 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011a42:	4b1d      	ldr	r3, [pc, #116]	@ (8011ab8 <USBD_SetConfig+0x150>)
 8011a44:	781b      	ldrb	r3, [r3, #0]
 8011a46:	461a      	mov	r2, r3
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011a4c:	4b1a      	ldr	r3, [pc, #104]	@ (8011ab8 <USBD_SetConfig+0x150>)
 8011a4e:	781b      	ldrb	r3, [r3, #0]
 8011a50:	4619      	mov	r1, r3
 8011a52:	6878      	ldr	r0, [r7, #4]
 8011a54:	f7ff f801 	bl	8010a5a <USBD_SetClassConfig>
 8011a58:	4603      	mov	r3, r0
 8011a5a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8011a5c:	7bfb      	ldrb	r3, [r7, #15]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d00f      	beq.n	8011a82 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8011a62:	6839      	ldr	r1, [r7, #0]
 8011a64:	6878      	ldr	r0, [r7, #4]
 8011a66:	f000 f918 	bl	8011c9a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	685b      	ldr	r3, [r3, #4]
 8011a6e:	b2db      	uxtb	r3, r3
 8011a70:	4619      	mov	r1, r3
 8011a72:	6878      	ldr	r0, [r7, #4]
 8011a74:	f7ff f80d 	bl	8010a92 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	2202      	movs	r2, #2
 8011a7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011a80:	e014      	b.n	8011aac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011a82:	6878      	ldr	r0, [r7, #4]
 8011a84:	f000 f9e0 	bl	8011e48 <USBD_CtlSendStatus>
      break;
 8011a88:	e010      	b.n	8011aac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011a8a:	6878      	ldr	r0, [r7, #4]
 8011a8c:	f000 f9dc 	bl	8011e48 <USBD_CtlSendStatus>
      break;
 8011a90:	e00c      	b.n	8011aac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8011a92:	6839      	ldr	r1, [r7, #0]
 8011a94:	6878      	ldr	r0, [r7, #4]
 8011a96:	f000 f900 	bl	8011c9a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011a9a:	4b07      	ldr	r3, [pc, #28]	@ (8011ab8 <USBD_SetConfig+0x150>)
 8011a9c:	781b      	ldrb	r3, [r3, #0]
 8011a9e:	4619      	mov	r1, r3
 8011aa0:	6878      	ldr	r0, [r7, #4]
 8011aa2:	f7fe fff6 	bl	8010a92 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8011aa6:	2303      	movs	r3, #3
 8011aa8:	73fb      	strb	r3, [r7, #15]
      break;
 8011aaa:	bf00      	nop
  }

  return ret;
 8011aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8011aae:	4618      	mov	r0, r3
 8011ab0:	3710      	adds	r7, #16
 8011ab2:	46bd      	mov	sp, r7
 8011ab4:	bd80      	pop	{r7, pc}
 8011ab6:	bf00      	nop
 8011ab8:	200007f4 	.word	0x200007f4

08011abc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011abc:	b580      	push	{r7, lr}
 8011abe:	b082      	sub	sp, #8
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	6078      	str	r0, [r7, #4]
 8011ac4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011ac6:	683b      	ldr	r3, [r7, #0]
 8011ac8:	88db      	ldrh	r3, [r3, #6]
 8011aca:	2b01      	cmp	r3, #1
 8011acc:	d004      	beq.n	8011ad8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011ace:	6839      	ldr	r1, [r7, #0]
 8011ad0:	6878      	ldr	r0, [r7, #4]
 8011ad2:	f000 f8e2 	bl	8011c9a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8011ad6:	e023      	b.n	8011b20 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011ade:	b2db      	uxtb	r3, r3
 8011ae0:	2b02      	cmp	r3, #2
 8011ae2:	dc02      	bgt.n	8011aea <USBD_GetConfig+0x2e>
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	dc03      	bgt.n	8011af0 <USBD_GetConfig+0x34>
 8011ae8:	e015      	b.n	8011b16 <USBD_GetConfig+0x5a>
 8011aea:	2b03      	cmp	r3, #3
 8011aec:	d00b      	beq.n	8011b06 <USBD_GetConfig+0x4a>
 8011aee:	e012      	b.n	8011b16 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	2200      	movs	r2, #0
 8011af4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	3308      	adds	r3, #8
 8011afa:	2201      	movs	r2, #1
 8011afc:	4619      	mov	r1, r3
 8011afe:	6878      	ldr	r0, [r7, #4]
 8011b00:	f000 f948 	bl	8011d94 <USBD_CtlSendData>
        break;
 8011b04:	e00c      	b.n	8011b20 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	3304      	adds	r3, #4
 8011b0a:	2201      	movs	r2, #1
 8011b0c:	4619      	mov	r1, r3
 8011b0e:	6878      	ldr	r0, [r7, #4]
 8011b10:	f000 f940 	bl	8011d94 <USBD_CtlSendData>
        break;
 8011b14:	e004      	b.n	8011b20 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8011b16:	6839      	ldr	r1, [r7, #0]
 8011b18:	6878      	ldr	r0, [r7, #4]
 8011b1a:	f000 f8be 	bl	8011c9a <USBD_CtlError>
        break;
 8011b1e:	bf00      	nop
}
 8011b20:	bf00      	nop
 8011b22:	3708      	adds	r7, #8
 8011b24:	46bd      	mov	sp, r7
 8011b26:	bd80      	pop	{r7, pc}

08011b28 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b082      	sub	sp, #8
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
 8011b30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011b38:	b2db      	uxtb	r3, r3
 8011b3a:	3b01      	subs	r3, #1
 8011b3c:	2b02      	cmp	r3, #2
 8011b3e:	d81e      	bhi.n	8011b7e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011b40:	683b      	ldr	r3, [r7, #0]
 8011b42:	88db      	ldrh	r3, [r3, #6]
 8011b44:	2b02      	cmp	r3, #2
 8011b46:	d004      	beq.n	8011b52 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011b48:	6839      	ldr	r1, [r7, #0]
 8011b4a:	6878      	ldr	r0, [r7, #4]
 8011b4c:	f000 f8a5 	bl	8011c9a <USBD_CtlError>
        break;
 8011b50:	e01a      	b.n	8011b88 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	2201      	movs	r2, #1
 8011b56:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d005      	beq.n	8011b6e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	68db      	ldr	r3, [r3, #12]
 8011b66:	f043 0202 	orr.w	r2, r3, #2
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	330c      	adds	r3, #12
 8011b72:	2202      	movs	r2, #2
 8011b74:	4619      	mov	r1, r3
 8011b76:	6878      	ldr	r0, [r7, #4]
 8011b78:	f000 f90c 	bl	8011d94 <USBD_CtlSendData>
      break;
 8011b7c:	e004      	b.n	8011b88 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8011b7e:	6839      	ldr	r1, [r7, #0]
 8011b80:	6878      	ldr	r0, [r7, #4]
 8011b82:	f000 f88a 	bl	8011c9a <USBD_CtlError>
      break;
 8011b86:	bf00      	nop
  }
}
 8011b88:	bf00      	nop
 8011b8a:	3708      	adds	r7, #8
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	bd80      	pop	{r7, pc}

08011b90 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011b90:	b580      	push	{r7, lr}
 8011b92:	b082      	sub	sp, #8
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	6078      	str	r0, [r7, #4]
 8011b98:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011b9a:	683b      	ldr	r3, [r7, #0]
 8011b9c:	885b      	ldrh	r3, [r3, #2]
 8011b9e:	2b01      	cmp	r3, #1
 8011ba0:	d107      	bne.n	8011bb2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	2201      	movs	r2, #1
 8011ba6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8011baa:	6878      	ldr	r0, [r7, #4]
 8011bac:	f000 f94c 	bl	8011e48 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8011bb0:	e013      	b.n	8011bda <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8011bb2:	683b      	ldr	r3, [r7, #0]
 8011bb4:	885b      	ldrh	r3, [r3, #2]
 8011bb6:	2b02      	cmp	r3, #2
 8011bb8:	d10b      	bne.n	8011bd2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8011bba:	683b      	ldr	r3, [r7, #0]
 8011bbc:	889b      	ldrh	r3, [r3, #4]
 8011bbe:	0a1b      	lsrs	r3, r3, #8
 8011bc0:	b29b      	uxth	r3, r3
 8011bc2:	b2da      	uxtb	r2, r3
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8011bca:	6878      	ldr	r0, [r7, #4]
 8011bcc:	f000 f93c 	bl	8011e48 <USBD_CtlSendStatus>
}
 8011bd0:	e003      	b.n	8011bda <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8011bd2:	6839      	ldr	r1, [r7, #0]
 8011bd4:	6878      	ldr	r0, [r7, #4]
 8011bd6:	f000 f860 	bl	8011c9a <USBD_CtlError>
}
 8011bda:	bf00      	nop
 8011bdc:	3708      	adds	r7, #8
 8011bde:	46bd      	mov	sp, r7
 8011be0:	bd80      	pop	{r7, pc}

08011be2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011be2:	b580      	push	{r7, lr}
 8011be4:	b082      	sub	sp, #8
 8011be6:	af00      	add	r7, sp, #0
 8011be8:	6078      	str	r0, [r7, #4]
 8011bea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011bf2:	b2db      	uxtb	r3, r3
 8011bf4:	3b01      	subs	r3, #1
 8011bf6:	2b02      	cmp	r3, #2
 8011bf8:	d80b      	bhi.n	8011c12 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011bfa:	683b      	ldr	r3, [r7, #0]
 8011bfc:	885b      	ldrh	r3, [r3, #2]
 8011bfe:	2b01      	cmp	r3, #1
 8011c00:	d10c      	bne.n	8011c1c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	2200      	movs	r2, #0
 8011c06:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8011c0a:	6878      	ldr	r0, [r7, #4]
 8011c0c:	f000 f91c 	bl	8011e48 <USBD_CtlSendStatus>
      }
      break;
 8011c10:	e004      	b.n	8011c1c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8011c12:	6839      	ldr	r1, [r7, #0]
 8011c14:	6878      	ldr	r0, [r7, #4]
 8011c16:	f000 f840 	bl	8011c9a <USBD_CtlError>
      break;
 8011c1a:	e000      	b.n	8011c1e <USBD_ClrFeature+0x3c>
      break;
 8011c1c:	bf00      	nop
  }
}
 8011c1e:	bf00      	nop
 8011c20:	3708      	adds	r7, #8
 8011c22:	46bd      	mov	sp, r7
 8011c24:	bd80      	pop	{r7, pc}

08011c26 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011c26:	b580      	push	{r7, lr}
 8011c28:	b084      	sub	sp, #16
 8011c2a:	af00      	add	r7, sp, #0
 8011c2c:	6078      	str	r0, [r7, #4]
 8011c2e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011c30:	683b      	ldr	r3, [r7, #0]
 8011c32:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	781a      	ldrb	r2, [r3, #0]
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	3301      	adds	r3, #1
 8011c40:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	781a      	ldrb	r2, [r3, #0]
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	3301      	adds	r3, #1
 8011c4e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011c50:	68f8      	ldr	r0, [r7, #12]
 8011c52:	f7ff fa16 	bl	8011082 <SWAPBYTE>
 8011c56:	4603      	mov	r3, r0
 8011c58:	461a      	mov	r2, r3
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	3301      	adds	r3, #1
 8011c62:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	3301      	adds	r3, #1
 8011c68:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011c6a:	68f8      	ldr	r0, [r7, #12]
 8011c6c:	f7ff fa09 	bl	8011082 <SWAPBYTE>
 8011c70:	4603      	mov	r3, r0
 8011c72:	461a      	mov	r2, r3
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	3301      	adds	r3, #1
 8011c7c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	3301      	adds	r3, #1
 8011c82:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011c84:	68f8      	ldr	r0, [r7, #12]
 8011c86:	f7ff f9fc 	bl	8011082 <SWAPBYTE>
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	461a      	mov	r2, r3
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	80da      	strh	r2, [r3, #6]
}
 8011c92:	bf00      	nop
 8011c94:	3710      	adds	r7, #16
 8011c96:	46bd      	mov	sp, r7
 8011c98:	bd80      	pop	{r7, pc}

08011c9a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011c9a:	b580      	push	{r7, lr}
 8011c9c:	b082      	sub	sp, #8
 8011c9e:	af00      	add	r7, sp, #0
 8011ca0:	6078      	str	r0, [r7, #4]
 8011ca2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011ca4:	2180      	movs	r1, #128	@ 0x80
 8011ca6:	6878      	ldr	r0, [r7, #4]
 8011ca8:	f000 fcd8 	bl	801265c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011cac:	2100      	movs	r1, #0
 8011cae:	6878      	ldr	r0, [r7, #4]
 8011cb0:	f000 fcd4 	bl	801265c <USBD_LL_StallEP>
}
 8011cb4:	bf00      	nop
 8011cb6:	3708      	adds	r7, #8
 8011cb8:	46bd      	mov	sp, r7
 8011cba:	bd80      	pop	{r7, pc}

08011cbc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011cbc:	b580      	push	{r7, lr}
 8011cbe:	b086      	sub	sp, #24
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	60f8      	str	r0, [r7, #12]
 8011cc4:	60b9      	str	r1, [r7, #8]
 8011cc6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011cc8:	2300      	movs	r3, #0
 8011cca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d042      	beq.n	8011d58 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8011cd6:	6938      	ldr	r0, [r7, #16]
 8011cd8:	f000 f842 	bl	8011d60 <USBD_GetLen>
 8011cdc:	4603      	mov	r3, r0
 8011cde:	3301      	adds	r3, #1
 8011ce0:	005b      	lsls	r3, r3, #1
 8011ce2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011ce6:	d808      	bhi.n	8011cfa <USBD_GetString+0x3e>
 8011ce8:	6938      	ldr	r0, [r7, #16]
 8011cea:	f000 f839 	bl	8011d60 <USBD_GetLen>
 8011cee:	4603      	mov	r3, r0
 8011cf0:	3301      	adds	r3, #1
 8011cf2:	b29b      	uxth	r3, r3
 8011cf4:	005b      	lsls	r3, r3, #1
 8011cf6:	b29a      	uxth	r2, r3
 8011cf8:	e001      	b.n	8011cfe <USBD_GetString+0x42>
 8011cfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011d02:	7dfb      	ldrb	r3, [r7, #23]
 8011d04:	68ba      	ldr	r2, [r7, #8]
 8011d06:	4413      	add	r3, r2
 8011d08:	687a      	ldr	r2, [r7, #4]
 8011d0a:	7812      	ldrb	r2, [r2, #0]
 8011d0c:	701a      	strb	r2, [r3, #0]
  idx++;
 8011d0e:	7dfb      	ldrb	r3, [r7, #23]
 8011d10:	3301      	adds	r3, #1
 8011d12:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011d14:	7dfb      	ldrb	r3, [r7, #23]
 8011d16:	68ba      	ldr	r2, [r7, #8]
 8011d18:	4413      	add	r3, r2
 8011d1a:	2203      	movs	r2, #3
 8011d1c:	701a      	strb	r2, [r3, #0]
  idx++;
 8011d1e:	7dfb      	ldrb	r3, [r7, #23]
 8011d20:	3301      	adds	r3, #1
 8011d22:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011d24:	e013      	b.n	8011d4e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8011d26:	7dfb      	ldrb	r3, [r7, #23]
 8011d28:	68ba      	ldr	r2, [r7, #8]
 8011d2a:	4413      	add	r3, r2
 8011d2c:	693a      	ldr	r2, [r7, #16]
 8011d2e:	7812      	ldrb	r2, [r2, #0]
 8011d30:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011d32:	693b      	ldr	r3, [r7, #16]
 8011d34:	3301      	adds	r3, #1
 8011d36:	613b      	str	r3, [r7, #16]
    idx++;
 8011d38:	7dfb      	ldrb	r3, [r7, #23]
 8011d3a:	3301      	adds	r3, #1
 8011d3c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011d3e:	7dfb      	ldrb	r3, [r7, #23]
 8011d40:	68ba      	ldr	r2, [r7, #8]
 8011d42:	4413      	add	r3, r2
 8011d44:	2200      	movs	r2, #0
 8011d46:	701a      	strb	r2, [r3, #0]
    idx++;
 8011d48:	7dfb      	ldrb	r3, [r7, #23]
 8011d4a:	3301      	adds	r3, #1
 8011d4c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011d4e:	693b      	ldr	r3, [r7, #16]
 8011d50:	781b      	ldrb	r3, [r3, #0]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d1e7      	bne.n	8011d26 <USBD_GetString+0x6a>
 8011d56:	e000      	b.n	8011d5a <USBD_GetString+0x9e>
    return;
 8011d58:	bf00      	nop
  }
}
 8011d5a:	3718      	adds	r7, #24
 8011d5c:	46bd      	mov	sp, r7
 8011d5e:	bd80      	pop	{r7, pc}

08011d60 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011d60:	b480      	push	{r7}
 8011d62:	b085      	sub	sp, #20
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011d68:	2300      	movs	r3, #0
 8011d6a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011d70:	e005      	b.n	8011d7e <USBD_GetLen+0x1e>
  {
    len++;
 8011d72:	7bfb      	ldrb	r3, [r7, #15]
 8011d74:	3301      	adds	r3, #1
 8011d76:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011d78:	68bb      	ldr	r3, [r7, #8]
 8011d7a:	3301      	adds	r3, #1
 8011d7c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011d7e:	68bb      	ldr	r3, [r7, #8]
 8011d80:	781b      	ldrb	r3, [r3, #0]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d1f5      	bne.n	8011d72 <USBD_GetLen+0x12>
  }

  return len;
 8011d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d88:	4618      	mov	r0, r3
 8011d8a:	3714      	adds	r7, #20
 8011d8c:	46bd      	mov	sp, r7
 8011d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d92:	4770      	bx	lr

08011d94 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011d94:	b580      	push	{r7, lr}
 8011d96:	b084      	sub	sp, #16
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	60f8      	str	r0, [r7, #12]
 8011d9c:	60b9      	str	r1, [r7, #8]
 8011d9e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	2202      	movs	r2, #2
 8011da4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	687a      	ldr	r2, [r7, #4]
 8011dac:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	687a      	ldr	r2, [r7, #4]
 8011db2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	68ba      	ldr	r2, [r7, #8]
 8011db8:	2100      	movs	r1, #0
 8011dba:	68f8      	ldr	r0, [r7, #12]
 8011dbc:	f000 fcd7 	bl	801276e <USBD_LL_Transmit>

  return USBD_OK;
 8011dc0:	2300      	movs	r3, #0
}
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	3710      	adds	r7, #16
 8011dc6:	46bd      	mov	sp, r7
 8011dc8:	bd80      	pop	{r7, pc}

08011dca <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011dca:	b580      	push	{r7, lr}
 8011dcc:	b084      	sub	sp, #16
 8011dce:	af00      	add	r7, sp, #0
 8011dd0:	60f8      	str	r0, [r7, #12]
 8011dd2:	60b9      	str	r1, [r7, #8]
 8011dd4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	68ba      	ldr	r2, [r7, #8]
 8011dda:	2100      	movs	r1, #0
 8011ddc:	68f8      	ldr	r0, [r7, #12]
 8011dde:	f000 fcc6 	bl	801276e <USBD_LL_Transmit>

  return USBD_OK;
 8011de2:	2300      	movs	r3, #0
}
 8011de4:	4618      	mov	r0, r3
 8011de6:	3710      	adds	r7, #16
 8011de8:	46bd      	mov	sp, r7
 8011dea:	bd80      	pop	{r7, pc}

08011dec <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b084      	sub	sp, #16
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	60f8      	str	r0, [r7, #12]
 8011df4:	60b9      	str	r1, [r7, #8]
 8011df6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	2203      	movs	r2, #3
 8011dfc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	687a      	ldr	r2, [r7, #4]
 8011e04:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	687a      	ldr	r2, [r7, #4]
 8011e0c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	68ba      	ldr	r2, [r7, #8]
 8011e14:	2100      	movs	r1, #0
 8011e16:	68f8      	ldr	r0, [r7, #12]
 8011e18:	f000 fcca 	bl	80127b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011e1c:	2300      	movs	r3, #0
}
 8011e1e:	4618      	mov	r0, r3
 8011e20:	3710      	adds	r7, #16
 8011e22:	46bd      	mov	sp, r7
 8011e24:	bd80      	pop	{r7, pc}

08011e26 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011e26:	b580      	push	{r7, lr}
 8011e28:	b084      	sub	sp, #16
 8011e2a:	af00      	add	r7, sp, #0
 8011e2c:	60f8      	str	r0, [r7, #12]
 8011e2e:	60b9      	str	r1, [r7, #8]
 8011e30:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	68ba      	ldr	r2, [r7, #8]
 8011e36:	2100      	movs	r1, #0
 8011e38:	68f8      	ldr	r0, [r7, #12]
 8011e3a:	f000 fcb9 	bl	80127b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011e3e:	2300      	movs	r3, #0
}
 8011e40:	4618      	mov	r0, r3
 8011e42:	3710      	adds	r7, #16
 8011e44:	46bd      	mov	sp, r7
 8011e46:	bd80      	pop	{r7, pc}

08011e48 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	b082      	sub	sp, #8
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	2204      	movs	r2, #4
 8011e54:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011e58:	2300      	movs	r3, #0
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	2100      	movs	r1, #0
 8011e5e:	6878      	ldr	r0, [r7, #4]
 8011e60:	f000 fc85 	bl	801276e <USBD_LL_Transmit>

  return USBD_OK;
 8011e64:	2300      	movs	r3, #0
}
 8011e66:	4618      	mov	r0, r3
 8011e68:	3708      	adds	r7, #8
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	bd80      	pop	{r7, pc}

08011e6e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011e6e:	b580      	push	{r7, lr}
 8011e70:	b082      	sub	sp, #8
 8011e72:	af00      	add	r7, sp, #0
 8011e74:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	2205      	movs	r2, #5
 8011e7a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011e7e:	2300      	movs	r3, #0
 8011e80:	2200      	movs	r2, #0
 8011e82:	2100      	movs	r1, #0
 8011e84:	6878      	ldr	r0, [r7, #4]
 8011e86:	f000 fc93 	bl	80127b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011e8a:	2300      	movs	r3, #0
}
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	3708      	adds	r7, #8
 8011e90:	46bd      	mov	sp, r7
 8011e92:	bd80      	pop	{r7, pc}

08011e94 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8011e94:	b580      	push	{r7, lr}
 8011e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8011e98:	2200      	movs	r2, #0
 8011e9a:	4912      	ldr	r1, [pc, #72]	@ (8011ee4 <MX_USB_Device_Init+0x50>)
 8011e9c:	4812      	ldr	r0, [pc, #72]	@ (8011ee8 <MX_USB_Device_Init+0x54>)
 8011e9e:	f7fe fd43 	bl	8010928 <USBD_Init>
 8011ea2:	4603      	mov	r3, r0
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d001      	beq.n	8011eac <MX_USB_Device_Init+0x18>
    Error_Handler();
 8011ea8:	f7f2 ff1e 	bl	8004ce8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8011eac:	490f      	ldr	r1, [pc, #60]	@ (8011eec <MX_USB_Device_Init+0x58>)
 8011eae:	480e      	ldr	r0, [pc, #56]	@ (8011ee8 <MX_USB_Device_Init+0x54>)
 8011eb0:	f7fe fd78 	bl	80109a4 <USBD_RegisterClass>
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d001      	beq.n	8011ebe <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8011eba:	f7f2 ff15 	bl	8004ce8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8011ebe:	490c      	ldr	r1, [pc, #48]	@ (8011ef0 <MX_USB_Device_Init+0x5c>)
 8011ec0:	4809      	ldr	r0, [pc, #36]	@ (8011ee8 <MX_USB_Device_Init+0x54>)
 8011ec2:	f7fe fc61 	bl	8010788 <USBD_CDC_RegisterInterface>
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d001      	beq.n	8011ed0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8011ecc:	f7f2 ff0c 	bl	8004ce8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8011ed0:	4805      	ldr	r0, [pc, #20]	@ (8011ee8 <MX_USB_Device_Init+0x54>)
 8011ed2:	f7fe fdab 	bl	8010a2c <USBD_Start>
 8011ed6:	4603      	mov	r3, r0
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d001      	beq.n	8011ee0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8011edc:	f7f2 ff04 	bl	8004ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8011ee0:	bf00      	nop
 8011ee2:	bd80      	pop	{r7, pc}
 8011ee4:	200000d8 	.word	0x200000d8
 8011ee8:	200007f8 	.word	0x200007f8
 8011eec:	20000044 	.word	0x20000044
 8011ef0:	200000c4 	.word	0x200000c4

08011ef4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011ef4:	b580      	push	{r7, lr}
 8011ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011ef8:	2200      	movs	r2, #0
 8011efa:	4905      	ldr	r1, [pc, #20]	@ (8011f10 <CDC_Init_FS+0x1c>)
 8011efc:	4805      	ldr	r0, [pc, #20]	@ (8011f14 <CDC_Init_FS+0x20>)
 8011efe:	f7fe fc5d 	bl	80107bc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011f02:	4905      	ldr	r1, [pc, #20]	@ (8011f18 <CDC_Init_FS+0x24>)
 8011f04:	4803      	ldr	r0, [pc, #12]	@ (8011f14 <CDC_Init_FS+0x20>)
 8011f06:	f7fe fc7b 	bl	8010800 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011f0a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	bd80      	pop	{r7, pc}
 8011f10:	200012d4 	.word	0x200012d4
 8011f14:	200007f8 	.word	0x200007f8
 8011f18:	20000ad4 	.word	0x20000ad4

08011f1c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011f1c:	b480      	push	{r7}
 8011f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011f20:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011f22:	4618      	mov	r0, r3
 8011f24:	46bd      	mov	sp, r7
 8011f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f2a:	4770      	bx	lr

08011f2c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011f2c:	b480      	push	{r7}
 8011f2e:	b083      	sub	sp, #12
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	4603      	mov	r3, r0
 8011f34:	6039      	str	r1, [r7, #0]
 8011f36:	71fb      	strb	r3, [r7, #7]
 8011f38:	4613      	mov	r3, r2
 8011f3a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011f3c:	79fb      	ldrb	r3, [r7, #7]
 8011f3e:	2b23      	cmp	r3, #35	@ 0x23
 8011f40:	d84a      	bhi.n	8011fd8 <CDC_Control_FS+0xac>
 8011f42:	a201      	add	r2, pc, #4	@ (adr r2, 8011f48 <CDC_Control_FS+0x1c>)
 8011f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f48:	08011fd9 	.word	0x08011fd9
 8011f4c:	08011fd9 	.word	0x08011fd9
 8011f50:	08011fd9 	.word	0x08011fd9
 8011f54:	08011fd9 	.word	0x08011fd9
 8011f58:	08011fd9 	.word	0x08011fd9
 8011f5c:	08011fd9 	.word	0x08011fd9
 8011f60:	08011fd9 	.word	0x08011fd9
 8011f64:	08011fd9 	.word	0x08011fd9
 8011f68:	08011fd9 	.word	0x08011fd9
 8011f6c:	08011fd9 	.word	0x08011fd9
 8011f70:	08011fd9 	.word	0x08011fd9
 8011f74:	08011fd9 	.word	0x08011fd9
 8011f78:	08011fd9 	.word	0x08011fd9
 8011f7c:	08011fd9 	.word	0x08011fd9
 8011f80:	08011fd9 	.word	0x08011fd9
 8011f84:	08011fd9 	.word	0x08011fd9
 8011f88:	08011fd9 	.word	0x08011fd9
 8011f8c:	08011fd9 	.word	0x08011fd9
 8011f90:	08011fd9 	.word	0x08011fd9
 8011f94:	08011fd9 	.word	0x08011fd9
 8011f98:	08011fd9 	.word	0x08011fd9
 8011f9c:	08011fd9 	.word	0x08011fd9
 8011fa0:	08011fd9 	.word	0x08011fd9
 8011fa4:	08011fd9 	.word	0x08011fd9
 8011fa8:	08011fd9 	.word	0x08011fd9
 8011fac:	08011fd9 	.word	0x08011fd9
 8011fb0:	08011fd9 	.word	0x08011fd9
 8011fb4:	08011fd9 	.word	0x08011fd9
 8011fb8:	08011fd9 	.word	0x08011fd9
 8011fbc:	08011fd9 	.word	0x08011fd9
 8011fc0:	08011fd9 	.word	0x08011fd9
 8011fc4:	08011fd9 	.word	0x08011fd9
 8011fc8:	08011fd9 	.word	0x08011fd9
 8011fcc:	08011fd9 	.word	0x08011fd9
 8011fd0:	08011fd9 	.word	0x08011fd9
 8011fd4:	08011fd9 	.word	0x08011fd9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011fd8:	bf00      	nop
  }

  return (USBD_OK);
 8011fda:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011fdc:	4618      	mov	r0, r3
 8011fde:	370c      	adds	r7, #12
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe6:	4770      	bx	lr

08011fe8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b082      	sub	sp, #8
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	6078      	str	r0, [r7, #4]
 8011ff0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011ff2:	6879      	ldr	r1, [r7, #4]
 8011ff4:	4805      	ldr	r0, [pc, #20]	@ (801200c <CDC_Receive_FS+0x24>)
 8011ff6:	f7fe fc03 	bl	8010800 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011ffa:	4804      	ldr	r0, [pc, #16]	@ (801200c <CDC_Receive_FS+0x24>)
 8011ffc:	f7fe fc5e 	bl	80108bc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012000:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012002:	4618      	mov	r0, r3
 8012004:	3708      	adds	r7, #8
 8012006:	46bd      	mov	sp, r7
 8012008:	bd80      	pop	{r7, pc}
 801200a:	bf00      	nop
 801200c:	200007f8 	.word	0x200007f8

08012010 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8012010:	b580      	push	{r7, lr}
 8012012:	b084      	sub	sp, #16
 8012014:	af00      	add	r7, sp, #0
 8012016:	6078      	str	r0, [r7, #4]
 8012018:	460b      	mov	r3, r1
 801201a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801201c:	2300      	movs	r3, #0
 801201e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8012020:	4b0d      	ldr	r3, [pc, #52]	@ (8012058 <CDC_Transmit_FS+0x48>)
 8012022:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8012026:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8012028:	68bb      	ldr	r3, [r7, #8]
 801202a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801202e:	2b00      	cmp	r3, #0
 8012030:	d001      	beq.n	8012036 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8012032:	2301      	movs	r3, #1
 8012034:	e00b      	b.n	801204e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8012036:	887b      	ldrh	r3, [r7, #2]
 8012038:	461a      	mov	r2, r3
 801203a:	6879      	ldr	r1, [r7, #4]
 801203c:	4806      	ldr	r0, [pc, #24]	@ (8012058 <CDC_Transmit_FS+0x48>)
 801203e:	f7fe fbbd 	bl	80107bc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8012042:	4805      	ldr	r0, [pc, #20]	@ (8012058 <CDC_Transmit_FS+0x48>)
 8012044:	f7fe fbfa 	bl	801083c <USBD_CDC_TransmitPacket>
 8012048:	4603      	mov	r3, r0
 801204a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801204c:	7bfb      	ldrb	r3, [r7, #15]
}
 801204e:	4618      	mov	r0, r3
 8012050:	3710      	adds	r7, #16
 8012052:	46bd      	mov	sp, r7
 8012054:	bd80      	pop	{r7, pc}
 8012056:	bf00      	nop
 8012058:	200007f8 	.word	0x200007f8

0801205c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801205c:	b480      	push	{r7}
 801205e:	b087      	sub	sp, #28
 8012060:	af00      	add	r7, sp, #0
 8012062:	60f8      	str	r0, [r7, #12]
 8012064:	60b9      	str	r1, [r7, #8]
 8012066:	4613      	mov	r3, r2
 8012068:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801206a:	2300      	movs	r3, #0
 801206c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801206e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012072:	4618      	mov	r0, r3
 8012074:	371c      	adds	r7, #28
 8012076:	46bd      	mov	sp, r7
 8012078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801207c:	4770      	bx	lr
	...

08012080 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012080:	b480      	push	{r7}
 8012082:	b083      	sub	sp, #12
 8012084:	af00      	add	r7, sp, #0
 8012086:	4603      	mov	r3, r0
 8012088:	6039      	str	r1, [r7, #0]
 801208a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 801208c:	683b      	ldr	r3, [r7, #0]
 801208e:	2212      	movs	r2, #18
 8012090:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8012092:	4b03      	ldr	r3, [pc, #12]	@ (80120a0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8012094:	4618      	mov	r0, r3
 8012096:	370c      	adds	r7, #12
 8012098:	46bd      	mov	sp, r7
 801209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801209e:	4770      	bx	lr
 80120a0:	200000f8 	.word	0x200000f8

080120a4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80120a4:	b480      	push	{r7}
 80120a6:	b083      	sub	sp, #12
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	4603      	mov	r3, r0
 80120ac:	6039      	str	r1, [r7, #0]
 80120ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80120b0:	683b      	ldr	r3, [r7, #0]
 80120b2:	2204      	movs	r2, #4
 80120b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80120b6:	4b03      	ldr	r3, [pc, #12]	@ (80120c4 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80120b8:	4618      	mov	r0, r3
 80120ba:	370c      	adds	r7, #12
 80120bc:	46bd      	mov	sp, r7
 80120be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c2:	4770      	bx	lr
 80120c4:	2000010c 	.word	0x2000010c

080120c8 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80120c8:	b580      	push	{r7, lr}
 80120ca:	b082      	sub	sp, #8
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	4603      	mov	r3, r0
 80120d0:	6039      	str	r1, [r7, #0]
 80120d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80120d4:	79fb      	ldrb	r3, [r7, #7]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d105      	bne.n	80120e6 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80120da:	683a      	ldr	r2, [r7, #0]
 80120dc:	4907      	ldr	r1, [pc, #28]	@ (80120fc <USBD_CDC_ProductStrDescriptor+0x34>)
 80120de:	4808      	ldr	r0, [pc, #32]	@ (8012100 <USBD_CDC_ProductStrDescriptor+0x38>)
 80120e0:	f7ff fdec 	bl	8011cbc <USBD_GetString>
 80120e4:	e004      	b.n	80120f0 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80120e6:	683a      	ldr	r2, [r7, #0]
 80120e8:	4904      	ldr	r1, [pc, #16]	@ (80120fc <USBD_CDC_ProductStrDescriptor+0x34>)
 80120ea:	4805      	ldr	r0, [pc, #20]	@ (8012100 <USBD_CDC_ProductStrDescriptor+0x38>)
 80120ec:	f7ff fde6 	bl	8011cbc <USBD_GetString>
  }
  return USBD_StrDesc;
 80120f0:	4b02      	ldr	r3, [pc, #8]	@ (80120fc <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80120f2:	4618      	mov	r0, r3
 80120f4:	3708      	adds	r7, #8
 80120f6:	46bd      	mov	sp, r7
 80120f8:	bd80      	pop	{r7, pc}
 80120fa:	bf00      	nop
 80120fc:	20001ad4 	.word	0x20001ad4
 8012100:	08015338 	.word	0x08015338

08012104 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012104:	b580      	push	{r7, lr}
 8012106:	b082      	sub	sp, #8
 8012108:	af00      	add	r7, sp, #0
 801210a:	4603      	mov	r3, r0
 801210c:	6039      	str	r1, [r7, #0]
 801210e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012110:	683a      	ldr	r2, [r7, #0]
 8012112:	4904      	ldr	r1, [pc, #16]	@ (8012124 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8012114:	4804      	ldr	r0, [pc, #16]	@ (8012128 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8012116:	f7ff fdd1 	bl	8011cbc <USBD_GetString>
  return USBD_StrDesc;
 801211a:	4b02      	ldr	r3, [pc, #8]	@ (8012124 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 801211c:	4618      	mov	r0, r3
 801211e:	3708      	adds	r7, #8
 8012120:	46bd      	mov	sp, r7
 8012122:	bd80      	pop	{r7, pc}
 8012124:	20001ad4 	.word	0x20001ad4
 8012128:	08015350 	.word	0x08015350

0801212c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801212c:	b580      	push	{r7, lr}
 801212e:	b082      	sub	sp, #8
 8012130:	af00      	add	r7, sp, #0
 8012132:	4603      	mov	r3, r0
 8012134:	6039      	str	r1, [r7, #0]
 8012136:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012138:	683b      	ldr	r3, [r7, #0]
 801213a:	221a      	movs	r2, #26
 801213c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801213e:	f000 f843 	bl	80121c8 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8012142:	4b02      	ldr	r3, [pc, #8]	@ (801214c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8012144:	4618      	mov	r0, r3
 8012146:	3708      	adds	r7, #8
 8012148:	46bd      	mov	sp, r7
 801214a:	bd80      	pop	{r7, pc}
 801214c:	20000110 	.word	0x20000110

08012150 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012150:	b580      	push	{r7, lr}
 8012152:	b082      	sub	sp, #8
 8012154:	af00      	add	r7, sp, #0
 8012156:	4603      	mov	r3, r0
 8012158:	6039      	str	r1, [r7, #0]
 801215a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801215c:	79fb      	ldrb	r3, [r7, #7]
 801215e:	2b00      	cmp	r3, #0
 8012160:	d105      	bne.n	801216e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8012162:	683a      	ldr	r2, [r7, #0]
 8012164:	4907      	ldr	r1, [pc, #28]	@ (8012184 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8012166:	4808      	ldr	r0, [pc, #32]	@ (8012188 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8012168:	f7ff fda8 	bl	8011cbc <USBD_GetString>
 801216c:	e004      	b.n	8012178 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801216e:	683a      	ldr	r2, [r7, #0]
 8012170:	4904      	ldr	r1, [pc, #16]	@ (8012184 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8012172:	4805      	ldr	r0, [pc, #20]	@ (8012188 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8012174:	f7ff fda2 	bl	8011cbc <USBD_GetString>
  }
  return USBD_StrDesc;
 8012178:	4b02      	ldr	r3, [pc, #8]	@ (8012184 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 801217a:	4618      	mov	r0, r3
 801217c:	3708      	adds	r7, #8
 801217e:	46bd      	mov	sp, r7
 8012180:	bd80      	pop	{r7, pc}
 8012182:	bf00      	nop
 8012184:	20001ad4 	.word	0x20001ad4
 8012188:	08015364 	.word	0x08015364

0801218c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801218c:	b580      	push	{r7, lr}
 801218e:	b082      	sub	sp, #8
 8012190:	af00      	add	r7, sp, #0
 8012192:	4603      	mov	r3, r0
 8012194:	6039      	str	r1, [r7, #0]
 8012196:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012198:	79fb      	ldrb	r3, [r7, #7]
 801219a:	2b00      	cmp	r3, #0
 801219c:	d105      	bne.n	80121aa <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801219e:	683a      	ldr	r2, [r7, #0]
 80121a0:	4907      	ldr	r1, [pc, #28]	@ (80121c0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80121a2:	4808      	ldr	r0, [pc, #32]	@ (80121c4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80121a4:	f7ff fd8a 	bl	8011cbc <USBD_GetString>
 80121a8:	e004      	b.n	80121b4 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80121aa:	683a      	ldr	r2, [r7, #0]
 80121ac:	4904      	ldr	r1, [pc, #16]	@ (80121c0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80121ae:	4805      	ldr	r0, [pc, #20]	@ (80121c4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80121b0:	f7ff fd84 	bl	8011cbc <USBD_GetString>
  }
  return USBD_StrDesc;
 80121b4:	4b02      	ldr	r3, [pc, #8]	@ (80121c0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80121b6:	4618      	mov	r0, r3
 80121b8:	3708      	adds	r7, #8
 80121ba:	46bd      	mov	sp, r7
 80121bc:	bd80      	pop	{r7, pc}
 80121be:	bf00      	nop
 80121c0:	20001ad4 	.word	0x20001ad4
 80121c4:	08015370 	.word	0x08015370

080121c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b084      	sub	sp, #16
 80121cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80121ce:	4b0f      	ldr	r3, [pc, #60]	@ (801220c <Get_SerialNum+0x44>)
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80121d4:	4b0e      	ldr	r3, [pc, #56]	@ (8012210 <Get_SerialNum+0x48>)
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80121da:	4b0e      	ldr	r3, [pc, #56]	@ (8012214 <Get_SerialNum+0x4c>)
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80121e0:	68fa      	ldr	r2, [r7, #12]
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	4413      	add	r3, r2
 80121e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d009      	beq.n	8012202 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80121ee:	2208      	movs	r2, #8
 80121f0:	4909      	ldr	r1, [pc, #36]	@ (8012218 <Get_SerialNum+0x50>)
 80121f2:	68f8      	ldr	r0, [r7, #12]
 80121f4:	f000 f814 	bl	8012220 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80121f8:	2204      	movs	r2, #4
 80121fa:	4908      	ldr	r1, [pc, #32]	@ (801221c <Get_SerialNum+0x54>)
 80121fc:	68b8      	ldr	r0, [r7, #8]
 80121fe:	f000 f80f 	bl	8012220 <IntToUnicode>
  }
}
 8012202:	bf00      	nop
 8012204:	3710      	adds	r7, #16
 8012206:	46bd      	mov	sp, r7
 8012208:	bd80      	pop	{r7, pc}
 801220a:	bf00      	nop
 801220c:	1fff7590 	.word	0x1fff7590
 8012210:	1fff7594 	.word	0x1fff7594
 8012214:	1fff7598 	.word	0x1fff7598
 8012218:	20000112 	.word	0x20000112
 801221c:	20000122 	.word	0x20000122

08012220 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012220:	b480      	push	{r7}
 8012222:	b087      	sub	sp, #28
 8012224:	af00      	add	r7, sp, #0
 8012226:	60f8      	str	r0, [r7, #12]
 8012228:	60b9      	str	r1, [r7, #8]
 801222a:	4613      	mov	r3, r2
 801222c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801222e:	2300      	movs	r3, #0
 8012230:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012232:	2300      	movs	r3, #0
 8012234:	75fb      	strb	r3, [r7, #23]
 8012236:	e027      	b.n	8012288 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	0f1b      	lsrs	r3, r3, #28
 801223c:	2b09      	cmp	r3, #9
 801223e:	d80b      	bhi.n	8012258 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	0f1b      	lsrs	r3, r3, #28
 8012244:	b2da      	uxtb	r2, r3
 8012246:	7dfb      	ldrb	r3, [r7, #23]
 8012248:	005b      	lsls	r3, r3, #1
 801224a:	4619      	mov	r1, r3
 801224c:	68bb      	ldr	r3, [r7, #8]
 801224e:	440b      	add	r3, r1
 8012250:	3230      	adds	r2, #48	@ 0x30
 8012252:	b2d2      	uxtb	r2, r2
 8012254:	701a      	strb	r2, [r3, #0]
 8012256:	e00a      	b.n	801226e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	0f1b      	lsrs	r3, r3, #28
 801225c:	b2da      	uxtb	r2, r3
 801225e:	7dfb      	ldrb	r3, [r7, #23]
 8012260:	005b      	lsls	r3, r3, #1
 8012262:	4619      	mov	r1, r3
 8012264:	68bb      	ldr	r3, [r7, #8]
 8012266:	440b      	add	r3, r1
 8012268:	3237      	adds	r2, #55	@ 0x37
 801226a:	b2d2      	uxtb	r2, r2
 801226c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	011b      	lsls	r3, r3, #4
 8012272:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012274:	7dfb      	ldrb	r3, [r7, #23]
 8012276:	005b      	lsls	r3, r3, #1
 8012278:	3301      	adds	r3, #1
 801227a:	68ba      	ldr	r2, [r7, #8]
 801227c:	4413      	add	r3, r2
 801227e:	2200      	movs	r2, #0
 8012280:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012282:	7dfb      	ldrb	r3, [r7, #23]
 8012284:	3301      	adds	r3, #1
 8012286:	75fb      	strb	r3, [r7, #23]
 8012288:	7dfa      	ldrb	r2, [r7, #23]
 801228a:	79fb      	ldrb	r3, [r7, #7]
 801228c:	429a      	cmp	r2, r3
 801228e:	d3d3      	bcc.n	8012238 <IntToUnicode+0x18>
  }
}
 8012290:	bf00      	nop
 8012292:	bf00      	nop
 8012294:	371c      	adds	r7, #28
 8012296:	46bd      	mov	sp, r7
 8012298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801229c:	4770      	bx	lr

0801229e <LL_AHB2_GRP1_EnableClock>:
{
 801229e:	b480      	push	{r7}
 80122a0:	b085      	sub	sp, #20
 80122a2:	af00      	add	r7, sp, #0
 80122a4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80122a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80122aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80122ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	4313      	orrs	r3, r2
 80122b4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80122b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80122ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	4013      	ands	r3, r2
 80122c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80122c2:	68fb      	ldr	r3, [r7, #12]
}
 80122c4:	bf00      	nop
 80122c6:	3714      	adds	r7, #20
 80122c8:	46bd      	mov	sp, r7
 80122ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ce:	4770      	bx	lr

080122d0 <LL_APB1_GRP1_EnableClock>:
{
 80122d0:	b480      	push	{r7}
 80122d2:	b085      	sub	sp, #20
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80122d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80122dc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80122de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	4313      	orrs	r3, r2
 80122e6:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80122e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80122ec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	4013      	ands	r3, r2
 80122f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80122f4:	68fb      	ldr	r3, [r7, #12]
}
 80122f6:	bf00      	nop
 80122f8:	3714      	adds	r7, #20
 80122fa:	46bd      	mov	sp, r7
 80122fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012300:	4770      	bx	lr
	...

08012304 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012304:	b580      	push	{r7, lr}
 8012306:	b088      	sub	sp, #32
 8012308:	af00      	add	r7, sp, #0
 801230a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801230c:	f107 030c 	add.w	r3, r7, #12
 8012310:	2200      	movs	r2, #0
 8012312:	601a      	str	r2, [r3, #0]
 8012314:	605a      	str	r2, [r3, #4]
 8012316:	609a      	str	r2, [r3, #8]
 8012318:	60da      	str	r2, [r3, #12]
 801231a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	4a17      	ldr	r2, [pc, #92]	@ (8012380 <HAL_PCD_MspInit+0x7c>)
 8012322:	4293      	cmp	r3, r2
 8012324:	d128      	bne.n	8012378 <HAL_PCD_MspInit+0x74>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012326:	2001      	movs	r0, #1
 8012328:	f7ff ffb9 	bl	801229e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 801232c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8012330:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012332:	2302      	movs	r3, #2
 8012334:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012336:	2300      	movs	r3, #0
 8012338:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801233a:	2300      	movs	r3, #0
 801233c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 801233e:	230a      	movs	r3, #10
 8012340:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012342:	f107 030c 	add.w	r3, r7, #12
 8012346:	4619      	mov	r1, r3
 8012348:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801234c:	f7f5 f898 	bl	8007480 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8012350:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8012354:	f7ff ffbc 	bl	80122d0 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 8012358:	2200      	movs	r2, #0
 801235a:	2100      	movs	r1, #0
 801235c:	2013      	movs	r0, #19
 801235e:	f7f4 fd78 	bl	8006e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 8012362:	2013      	movs	r0, #19
 8012364:	f7f4 fd8f 	bl	8006e86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8012368:	2200      	movs	r2, #0
 801236a:	2100      	movs	r1, #0
 801236c:	2014      	movs	r0, #20
 801236e:	f7f4 fd70 	bl	8006e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8012372:	2014      	movs	r0, #20
 8012374:	f7f4 fd87 	bl	8006e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8012378:	bf00      	nop
 801237a:	3720      	adds	r7, #32
 801237c:	46bd      	mov	sp, r7
 801237e:	bd80      	pop	{r7, pc}
 8012380:	40006800 	.word	0x40006800

08012384 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012384:	b580      	push	{r7, lr}
 8012386:	b082      	sub	sp, #8
 8012388:	af00      	add	r7, sp, #0
 801238a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8012398:	4619      	mov	r1, r3
 801239a:	4610      	mov	r0, r2
 801239c:	f7fe fb93 	bl	8010ac6 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80123a0:	bf00      	nop
 80123a2:	3708      	adds	r7, #8
 80123a4:	46bd      	mov	sp, r7
 80123a6:	bd80      	pop	{r7, pc}

080123a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80123a8:	b580      	push	{r7, lr}
 80123aa:	b082      	sub	sp, #8
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	6078      	str	r0, [r7, #4]
 80123b0:	460b      	mov	r3, r1
 80123b2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80123ba:	78fa      	ldrb	r2, [r7, #3]
 80123bc:	6879      	ldr	r1, [r7, #4]
 80123be:	4613      	mov	r3, r2
 80123c0:	009b      	lsls	r3, r3, #2
 80123c2:	4413      	add	r3, r2
 80123c4:	00db      	lsls	r3, r3, #3
 80123c6:	440b      	add	r3, r1
 80123c8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80123cc:	681a      	ldr	r2, [r3, #0]
 80123ce:	78fb      	ldrb	r3, [r7, #3]
 80123d0:	4619      	mov	r1, r3
 80123d2:	f7fe fbcd 	bl	8010b70 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80123d6:	bf00      	nop
 80123d8:	3708      	adds	r7, #8
 80123da:	46bd      	mov	sp, r7
 80123dc:	bd80      	pop	{r7, pc}

080123de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80123de:	b580      	push	{r7, lr}
 80123e0:	b082      	sub	sp, #8
 80123e2:	af00      	add	r7, sp, #0
 80123e4:	6078      	str	r0, [r7, #4]
 80123e6:	460b      	mov	r3, r1
 80123e8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80123f0:	78fa      	ldrb	r2, [r7, #3]
 80123f2:	6879      	ldr	r1, [r7, #4]
 80123f4:	4613      	mov	r3, r2
 80123f6:	009b      	lsls	r3, r3, #2
 80123f8:	4413      	add	r3, r2
 80123fa:	00db      	lsls	r3, r3, #3
 80123fc:	440b      	add	r3, r1
 80123fe:	3324      	adds	r3, #36	@ 0x24
 8012400:	681a      	ldr	r2, [r3, #0]
 8012402:	78fb      	ldrb	r3, [r7, #3]
 8012404:	4619      	mov	r1, r3
 8012406:	f7fe fc66 	bl	8010cd6 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801240a:	bf00      	nop
 801240c:	3708      	adds	r7, #8
 801240e:	46bd      	mov	sp, r7
 8012410:	bd80      	pop	{r7, pc}

08012412 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012412:	b580      	push	{r7, lr}
 8012414:	b082      	sub	sp, #8
 8012416:	af00      	add	r7, sp, #0
 8012418:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012420:	4618      	mov	r0, r3
 8012422:	f7fe fda0 	bl	8010f66 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8012426:	bf00      	nop
 8012428:	3708      	adds	r7, #8
 801242a:	46bd      	mov	sp, r7
 801242c:	bd80      	pop	{r7, pc}

0801242e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801242e:	b580      	push	{r7, lr}
 8012430:	b084      	sub	sp, #16
 8012432:	af00      	add	r7, sp, #0
 8012434:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012436:	2301      	movs	r3, #1
 8012438:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	795b      	ldrb	r3, [r3, #5]
 801243e:	2b02      	cmp	r3, #2
 8012440:	d001      	beq.n	8012446 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8012442:	f7f2 fc51 	bl	8004ce8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801244c:	7bfa      	ldrb	r2, [r7, #15]
 801244e:	4611      	mov	r1, r2
 8012450:	4618      	mov	r0, r3
 8012452:	f7fe fd44 	bl	8010ede <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801245c:	4618      	mov	r0, r3
 801245e:	f7fe fcec 	bl	8010e3a <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8012462:	bf00      	nop
 8012464:	3710      	adds	r7, #16
 8012466:	46bd      	mov	sp, r7
 8012468:	bd80      	pop	{r7, pc}
	...

0801246c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801246c:	b580      	push	{r7, lr}
 801246e:	b082      	sub	sp, #8
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801247a:	4618      	mov	r0, r3
 801247c:	f7fe fd3f 	bl	8010efe <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	7a5b      	ldrb	r3, [r3, #9]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d005      	beq.n	8012494 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012488:	4b04      	ldr	r3, [pc, #16]	@ (801249c <HAL_PCD_SuspendCallback+0x30>)
 801248a:	691b      	ldr	r3, [r3, #16]
 801248c:	4a03      	ldr	r2, [pc, #12]	@ (801249c <HAL_PCD_SuspendCallback+0x30>)
 801248e:	f043 0306 	orr.w	r3, r3, #6
 8012492:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8012494:	bf00      	nop
 8012496:	3708      	adds	r7, #8
 8012498:	46bd      	mov	sp, r7
 801249a:	bd80      	pop	{r7, pc}
 801249c:	e000ed00 	.word	0xe000ed00

080124a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80124a0:	b580      	push	{r7, lr}
 80124a2:	b082      	sub	sp, #8
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	7a5b      	ldrb	r3, [r3, #9]
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d007      	beq.n	80124c0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80124b0:	4b08      	ldr	r3, [pc, #32]	@ (80124d4 <HAL_PCD_ResumeCallback+0x34>)
 80124b2:	691b      	ldr	r3, [r3, #16]
 80124b4:	4a07      	ldr	r2, [pc, #28]	@ (80124d4 <HAL_PCD_ResumeCallback+0x34>)
 80124b6:	f023 0306 	bic.w	r3, r3, #6
 80124ba:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80124bc:	f000 f9fa 	bl	80128b4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80124c6:	4618      	mov	r0, r3
 80124c8:	f7fe fd35 	bl	8010f36 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80124cc:	bf00      	nop
 80124ce:	3708      	adds	r7, #8
 80124d0:	46bd      	mov	sp, r7
 80124d2:	bd80      	pop	{r7, pc}
 80124d4:	e000ed00 	.word	0xe000ed00

080124d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80124d8:	b580      	push	{r7, lr}
 80124da:	b082      	sub	sp, #8
 80124dc:	af00      	add	r7, sp, #0
 80124de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80124e0:	4a2c      	ldr	r2, [pc, #176]	@ (8012594 <USBD_LL_Init+0xbc>)
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	4a2a      	ldr	r2, [pc, #168]	@ (8012594 <USBD_LL_Init+0xbc>)
 80124ec:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 80124f0:	f7f8 fa9a 	bl	800aa28 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 80124f4:	4b27      	ldr	r3, [pc, #156]	@ (8012594 <USBD_LL_Init+0xbc>)
 80124f6:	4a28      	ldr	r2, [pc, #160]	@ (8012598 <USBD_LL_Init+0xc0>)
 80124f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80124fa:	4b26      	ldr	r3, [pc, #152]	@ (8012594 <USBD_LL_Init+0xbc>)
 80124fc:	2208      	movs	r2, #8
 80124fe:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8012500:	4b24      	ldr	r3, [pc, #144]	@ (8012594 <USBD_LL_Init+0xbc>)
 8012502:	2202      	movs	r2, #2
 8012504:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012506:	4b23      	ldr	r3, [pc, #140]	@ (8012594 <USBD_LL_Init+0xbc>)
 8012508:	2202      	movs	r2, #2
 801250a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 801250c:	4b21      	ldr	r3, [pc, #132]	@ (8012594 <USBD_LL_Init+0xbc>)
 801250e:	2200      	movs	r2, #0
 8012510:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8012512:	4b20      	ldr	r3, [pc, #128]	@ (8012594 <USBD_LL_Init+0xbc>)
 8012514:	2200      	movs	r2, #0
 8012516:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8012518:	4b1e      	ldr	r3, [pc, #120]	@ (8012594 <USBD_LL_Init+0xbc>)
 801251a:	2200      	movs	r2, #0
 801251c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801251e:	4b1d      	ldr	r3, [pc, #116]	@ (8012594 <USBD_LL_Init+0xbc>)
 8012520:	2200      	movs	r2, #0
 8012522:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8012524:	481b      	ldr	r0, [pc, #108]	@ (8012594 <USBD_LL_Init+0xbc>)
 8012526:	f7f6 fd2e 	bl	8008f86 <HAL_PCD_Init>
 801252a:	4603      	mov	r3, r0
 801252c:	2b00      	cmp	r3, #0
 801252e:	d001      	beq.n	8012534 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8012530:	f7f2 fbda 	bl	8004ce8 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801253a:	2318      	movs	r3, #24
 801253c:	2200      	movs	r2, #0
 801253e:	2100      	movs	r1, #0
 8012540:	f7f8 f9e7 	bl	800a912 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801254a:	2358      	movs	r3, #88	@ 0x58
 801254c:	2200      	movs	r2, #0
 801254e:	2180      	movs	r1, #128	@ 0x80
 8012550:	f7f8 f9df 	bl	800a912 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801255a:	23c0      	movs	r3, #192	@ 0xc0
 801255c:	2200      	movs	r2, #0
 801255e:	2181      	movs	r1, #129	@ 0x81
 8012560:	f7f8 f9d7 	bl	800a912 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801256a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 801256e:	2200      	movs	r2, #0
 8012570:	2101      	movs	r1, #1
 8012572:	f7f8 f9ce 	bl	800a912 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801257c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012580:	2200      	movs	r2, #0
 8012582:	2182      	movs	r1, #130	@ 0x82
 8012584:	f7f8 f9c5 	bl	800a912 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8012588:	2300      	movs	r3, #0
}
 801258a:	4618      	mov	r0, r3
 801258c:	3708      	adds	r7, #8
 801258e:	46bd      	mov	sp, r7
 8012590:	bd80      	pop	{r7, pc}
 8012592:	bf00      	nop
 8012594:	20001cd4 	.word	0x20001cd4
 8012598:	40006800 	.word	0x40006800

0801259c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801259c:	b580      	push	{r7, lr}
 801259e:	b084      	sub	sp, #16
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80125a4:	2300      	movs	r3, #0
 80125a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80125a8:	2300      	movs	r3, #0
 80125aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80125b2:	4618      	mov	r0, r3
 80125b4:	f7f6 fdb5 	bl	8009122 <HAL_PCD_Start>
 80125b8:	4603      	mov	r3, r0
 80125ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80125bc:	7bfb      	ldrb	r3, [r7, #15]
 80125be:	4618      	mov	r0, r3
 80125c0:	f000 f97e 	bl	80128c0 <USBD_Get_USB_Status>
 80125c4:	4603      	mov	r3, r0
 80125c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80125c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80125ca:	4618      	mov	r0, r3
 80125cc:	3710      	adds	r7, #16
 80125ce:	46bd      	mov	sp, r7
 80125d0:	bd80      	pop	{r7, pc}

080125d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80125d2:	b580      	push	{r7, lr}
 80125d4:	b084      	sub	sp, #16
 80125d6:	af00      	add	r7, sp, #0
 80125d8:	6078      	str	r0, [r7, #4]
 80125da:	4608      	mov	r0, r1
 80125dc:	4611      	mov	r1, r2
 80125de:	461a      	mov	r2, r3
 80125e0:	4603      	mov	r3, r0
 80125e2:	70fb      	strb	r3, [r7, #3]
 80125e4:	460b      	mov	r3, r1
 80125e6:	70bb      	strb	r3, [r7, #2]
 80125e8:	4613      	mov	r3, r2
 80125ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80125ec:	2300      	movs	r3, #0
 80125ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80125f0:	2300      	movs	r3, #0
 80125f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80125fa:	78bb      	ldrb	r3, [r7, #2]
 80125fc:	883a      	ldrh	r2, [r7, #0]
 80125fe:	78f9      	ldrb	r1, [r7, #3]
 8012600:	f7f6 fefc 	bl	80093fc <HAL_PCD_EP_Open>
 8012604:	4603      	mov	r3, r0
 8012606:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012608:	7bfb      	ldrb	r3, [r7, #15]
 801260a:	4618      	mov	r0, r3
 801260c:	f000 f958 	bl	80128c0 <USBD_Get_USB_Status>
 8012610:	4603      	mov	r3, r0
 8012612:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012614:	7bbb      	ldrb	r3, [r7, #14]
}
 8012616:	4618      	mov	r0, r3
 8012618:	3710      	adds	r7, #16
 801261a:	46bd      	mov	sp, r7
 801261c:	bd80      	pop	{r7, pc}

0801261e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801261e:	b580      	push	{r7, lr}
 8012620:	b084      	sub	sp, #16
 8012622:	af00      	add	r7, sp, #0
 8012624:	6078      	str	r0, [r7, #4]
 8012626:	460b      	mov	r3, r1
 8012628:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801262a:	2300      	movs	r3, #0
 801262c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801262e:	2300      	movs	r3, #0
 8012630:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012638:	78fa      	ldrb	r2, [r7, #3]
 801263a:	4611      	mov	r1, r2
 801263c:	4618      	mov	r0, r3
 801263e:	f7f6 ff3a 	bl	80094b6 <HAL_PCD_EP_Close>
 8012642:	4603      	mov	r3, r0
 8012644:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012646:	7bfb      	ldrb	r3, [r7, #15]
 8012648:	4618      	mov	r0, r3
 801264a:	f000 f939 	bl	80128c0 <USBD_Get_USB_Status>
 801264e:	4603      	mov	r3, r0
 8012650:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012652:	7bbb      	ldrb	r3, [r7, #14]
}
 8012654:	4618      	mov	r0, r3
 8012656:	3710      	adds	r7, #16
 8012658:	46bd      	mov	sp, r7
 801265a:	bd80      	pop	{r7, pc}

0801265c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801265c:	b580      	push	{r7, lr}
 801265e:	b084      	sub	sp, #16
 8012660:	af00      	add	r7, sp, #0
 8012662:	6078      	str	r0, [r7, #4]
 8012664:	460b      	mov	r3, r1
 8012666:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012668:	2300      	movs	r3, #0
 801266a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801266c:	2300      	movs	r3, #0
 801266e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012676:	78fa      	ldrb	r2, [r7, #3]
 8012678:	4611      	mov	r1, r2
 801267a:	4618      	mov	r0, r3
 801267c:	f7f6 ffe3 	bl	8009646 <HAL_PCD_EP_SetStall>
 8012680:	4603      	mov	r3, r0
 8012682:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012684:	7bfb      	ldrb	r3, [r7, #15]
 8012686:	4618      	mov	r0, r3
 8012688:	f000 f91a 	bl	80128c0 <USBD_Get_USB_Status>
 801268c:	4603      	mov	r3, r0
 801268e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012690:	7bbb      	ldrb	r3, [r7, #14]
}
 8012692:	4618      	mov	r0, r3
 8012694:	3710      	adds	r7, #16
 8012696:	46bd      	mov	sp, r7
 8012698:	bd80      	pop	{r7, pc}

0801269a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801269a:	b580      	push	{r7, lr}
 801269c:	b084      	sub	sp, #16
 801269e:	af00      	add	r7, sp, #0
 80126a0:	6078      	str	r0, [r7, #4]
 80126a2:	460b      	mov	r3, r1
 80126a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80126a6:	2300      	movs	r3, #0
 80126a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80126aa:	2300      	movs	r3, #0
 80126ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80126b4:	78fa      	ldrb	r2, [r7, #3]
 80126b6:	4611      	mov	r1, r2
 80126b8:	4618      	mov	r0, r3
 80126ba:	f7f7 f816 	bl	80096ea <HAL_PCD_EP_ClrStall>
 80126be:	4603      	mov	r3, r0
 80126c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80126c2:	7bfb      	ldrb	r3, [r7, #15]
 80126c4:	4618      	mov	r0, r3
 80126c6:	f000 f8fb 	bl	80128c0 <USBD_Get_USB_Status>
 80126ca:	4603      	mov	r3, r0
 80126cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80126ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80126d0:	4618      	mov	r0, r3
 80126d2:	3710      	adds	r7, #16
 80126d4:	46bd      	mov	sp, r7
 80126d6:	bd80      	pop	{r7, pc}

080126d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80126d8:	b480      	push	{r7}
 80126da:	b085      	sub	sp, #20
 80126dc:	af00      	add	r7, sp, #0
 80126de:	6078      	str	r0, [r7, #4]
 80126e0:	460b      	mov	r3, r1
 80126e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80126ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80126ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	da0b      	bge.n	801270c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80126f4:	78fb      	ldrb	r3, [r7, #3]
 80126f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80126fa:	68f9      	ldr	r1, [r7, #12]
 80126fc:	4613      	mov	r3, r2
 80126fe:	009b      	lsls	r3, r3, #2
 8012700:	4413      	add	r3, r2
 8012702:	00db      	lsls	r3, r3, #3
 8012704:	440b      	add	r3, r1
 8012706:	3312      	adds	r3, #18
 8012708:	781b      	ldrb	r3, [r3, #0]
 801270a:	e00b      	b.n	8012724 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801270c:	78fb      	ldrb	r3, [r7, #3]
 801270e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012712:	68f9      	ldr	r1, [r7, #12]
 8012714:	4613      	mov	r3, r2
 8012716:	009b      	lsls	r3, r3, #2
 8012718:	4413      	add	r3, r2
 801271a:	00db      	lsls	r3, r3, #3
 801271c:	440b      	add	r3, r1
 801271e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8012722:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012724:	4618      	mov	r0, r3
 8012726:	3714      	adds	r7, #20
 8012728:	46bd      	mov	sp, r7
 801272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801272e:	4770      	bx	lr

08012730 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012730:	b580      	push	{r7, lr}
 8012732:	b084      	sub	sp, #16
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]
 8012738:	460b      	mov	r3, r1
 801273a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801273c:	2300      	movs	r3, #0
 801273e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012740:	2300      	movs	r3, #0
 8012742:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801274a:	78fa      	ldrb	r2, [r7, #3]
 801274c:	4611      	mov	r1, r2
 801274e:	4618      	mov	r0, r3
 8012750:	f7f6 fe30 	bl	80093b4 <HAL_PCD_SetAddress>
 8012754:	4603      	mov	r3, r0
 8012756:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012758:	7bfb      	ldrb	r3, [r7, #15]
 801275a:	4618      	mov	r0, r3
 801275c:	f000 f8b0 	bl	80128c0 <USBD_Get_USB_Status>
 8012760:	4603      	mov	r3, r0
 8012762:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012764:	7bbb      	ldrb	r3, [r7, #14]
}
 8012766:	4618      	mov	r0, r3
 8012768:	3710      	adds	r7, #16
 801276a:	46bd      	mov	sp, r7
 801276c:	bd80      	pop	{r7, pc}

0801276e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801276e:	b580      	push	{r7, lr}
 8012770:	b086      	sub	sp, #24
 8012772:	af00      	add	r7, sp, #0
 8012774:	60f8      	str	r0, [r7, #12]
 8012776:	607a      	str	r2, [r7, #4]
 8012778:	603b      	str	r3, [r7, #0]
 801277a:	460b      	mov	r3, r1
 801277c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801277e:	2300      	movs	r3, #0
 8012780:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012782:	2300      	movs	r3, #0
 8012784:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801278c:	7af9      	ldrb	r1, [r7, #11]
 801278e:	683b      	ldr	r3, [r7, #0]
 8012790:	687a      	ldr	r2, [r7, #4]
 8012792:	f7f6 ff21 	bl	80095d8 <HAL_PCD_EP_Transmit>
 8012796:	4603      	mov	r3, r0
 8012798:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801279a:	7dfb      	ldrb	r3, [r7, #23]
 801279c:	4618      	mov	r0, r3
 801279e:	f000 f88f 	bl	80128c0 <USBD_Get_USB_Status>
 80127a2:	4603      	mov	r3, r0
 80127a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80127a6:	7dbb      	ldrb	r3, [r7, #22]
}
 80127a8:	4618      	mov	r0, r3
 80127aa:	3718      	adds	r7, #24
 80127ac:	46bd      	mov	sp, r7
 80127ae:	bd80      	pop	{r7, pc}

080127b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80127b0:	b580      	push	{r7, lr}
 80127b2:	b086      	sub	sp, #24
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	60f8      	str	r0, [r7, #12]
 80127b8:	607a      	str	r2, [r7, #4]
 80127ba:	603b      	str	r3, [r7, #0]
 80127bc:	460b      	mov	r3, r1
 80127be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80127c0:	2300      	movs	r3, #0
 80127c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80127c4:	2300      	movs	r3, #0
 80127c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80127ce:	7af9      	ldrb	r1, [r7, #11]
 80127d0:	683b      	ldr	r3, [r7, #0]
 80127d2:	687a      	ldr	r2, [r7, #4]
 80127d4:	f7f6 feb7 	bl	8009546 <HAL_PCD_EP_Receive>
 80127d8:	4603      	mov	r3, r0
 80127da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80127dc:	7dfb      	ldrb	r3, [r7, #23]
 80127de:	4618      	mov	r0, r3
 80127e0:	f000 f86e 	bl	80128c0 <USBD_Get_USB_Status>
 80127e4:	4603      	mov	r3, r0
 80127e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80127e8:	7dbb      	ldrb	r3, [r7, #22]
}
 80127ea:	4618      	mov	r0, r3
 80127ec:	3718      	adds	r7, #24
 80127ee:	46bd      	mov	sp, r7
 80127f0:	bd80      	pop	{r7, pc}

080127f2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80127f2:	b580      	push	{r7, lr}
 80127f4:	b082      	sub	sp, #8
 80127f6:	af00      	add	r7, sp, #0
 80127f8:	6078      	str	r0, [r7, #4]
 80127fa:	460b      	mov	r3, r1
 80127fc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012804:	78fa      	ldrb	r2, [r7, #3]
 8012806:	4611      	mov	r1, r2
 8012808:	4618      	mov	r0, r3
 801280a:	f7f6 fecd 	bl	80095a8 <HAL_PCD_EP_GetRxCount>
 801280e:	4603      	mov	r3, r0
}
 8012810:	4618      	mov	r0, r3
 8012812:	3708      	adds	r7, #8
 8012814:	46bd      	mov	sp, r7
 8012816:	bd80      	pop	{r7, pc}

08012818 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012818:	b580      	push	{r7, lr}
 801281a:	b082      	sub	sp, #8
 801281c:	af00      	add	r7, sp, #0
 801281e:	6078      	str	r0, [r7, #4]
 8012820:	460b      	mov	r3, r1
 8012822:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8012824:	78fb      	ldrb	r3, [r7, #3]
 8012826:	2b00      	cmp	r3, #0
 8012828:	d002      	beq.n	8012830 <HAL_PCDEx_LPM_Callback+0x18>
 801282a:	2b01      	cmp	r3, #1
 801282c:	d013      	beq.n	8012856 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801282e:	e023      	b.n	8012878 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	7a5b      	ldrb	r3, [r3, #9]
 8012834:	2b00      	cmp	r3, #0
 8012836:	d007      	beq.n	8012848 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8012838:	f000 f83c 	bl	80128b4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801283c:	4b10      	ldr	r3, [pc, #64]	@ (8012880 <HAL_PCDEx_LPM_Callback+0x68>)
 801283e:	691b      	ldr	r3, [r3, #16]
 8012840:	4a0f      	ldr	r2, [pc, #60]	@ (8012880 <HAL_PCDEx_LPM_Callback+0x68>)
 8012842:	f023 0306 	bic.w	r3, r3, #6
 8012846:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801284e:	4618      	mov	r0, r3
 8012850:	f7fe fb71 	bl	8010f36 <USBD_LL_Resume>
    break;
 8012854:	e010      	b.n	8012878 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801285c:	4618      	mov	r0, r3
 801285e:	f7fe fb4e 	bl	8010efe <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	7a5b      	ldrb	r3, [r3, #9]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d005      	beq.n	8012876 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801286a:	4b05      	ldr	r3, [pc, #20]	@ (8012880 <HAL_PCDEx_LPM_Callback+0x68>)
 801286c:	691b      	ldr	r3, [r3, #16]
 801286e:	4a04      	ldr	r2, [pc, #16]	@ (8012880 <HAL_PCDEx_LPM_Callback+0x68>)
 8012870:	f043 0306 	orr.w	r3, r3, #6
 8012874:	6113      	str	r3, [r2, #16]
    break;
 8012876:	bf00      	nop
}
 8012878:	bf00      	nop
 801287a:	3708      	adds	r7, #8
 801287c:	46bd      	mov	sp, r7
 801287e:	bd80      	pop	{r7, pc}
 8012880:	e000ed00 	.word	0xe000ed00

08012884 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012884:	b480      	push	{r7}
 8012886:	b083      	sub	sp, #12
 8012888:	af00      	add	r7, sp, #0
 801288a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801288c:	4b03      	ldr	r3, [pc, #12]	@ (801289c <USBD_static_malloc+0x18>)
}
 801288e:	4618      	mov	r0, r3
 8012890:	370c      	adds	r7, #12
 8012892:	46bd      	mov	sp, r7
 8012894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012898:	4770      	bx	lr
 801289a:	bf00      	nop
 801289c:	20001fb0 	.word	0x20001fb0

080128a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80128a0:	b480      	push	{r7}
 80128a2:	b083      	sub	sp, #12
 80128a4:	af00      	add	r7, sp, #0
 80128a6:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80128a8:	bf00      	nop
 80128aa:	370c      	adds	r7, #12
 80128ac:	46bd      	mov	sp, r7
 80128ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b2:	4770      	bx	lr

080128b4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80128b4:	b580      	push	{r7, lr}
 80128b6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80128b8:	f7f2 f840 	bl	800493c <SystemClock_Config>
}
 80128bc:	bf00      	nop
 80128be:	bd80      	pop	{r7, pc}

080128c0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80128c0:	b480      	push	{r7}
 80128c2:	b085      	sub	sp, #20
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	4603      	mov	r3, r0
 80128c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80128ca:	2300      	movs	r3, #0
 80128cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80128ce:	79fb      	ldrb	r3, [r7, #7]
 80128d0:	2b03      	cmp	r3, #3
 80128d2:	d817      	bhi.n	8012904 <USBD_Get_USB_Status+0x44>
 80128d4:	a201      	add	r2, pc, #4	@ (adr r2, 80128dc <USBD_Get_USB_Status+0x1c>)
 80128d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80128da:	bf00      	nop
 80128dc:	080128ed 	.word	0x080128ed
 80128e0:	080128f3 	.word	0x080128f3
 80128e4:	080128f9 	.word	0x080128f9
 80128e8:	080128ff 	.word	0x080128ff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80128ec:	2300      	movs	r3, #0
 80128ee:	73fb      	strb	r3, [r7, #15]
    break;
 80128f0:	e00b      	b.n	801290a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80128f2:	2303      	movs	r3, #3
 80128f4:	73fb      	strb	r3, [r7, #15]
    break;
 80128f6:	e008      	b.n	801290a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80128f8:	2301      	movs	r3, #1
 80128fa:	73fb      	strb	r3, [r7, #15]
    break;
 80128fc:	e005      	b.n	801290a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80128fe:	2303      	movs	r3, #3
 8012900:	73fb      	strb	r3, [r7, #15]
    break;
 8012902:	e002      	b.n	801290a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012904:	2303      	movs	r3, #3
 8012906:	73fb      	strb	r3, [r7, #15]
    break;
 8012908:	bf00      	nop
  }
  return usb_status;
 801290a:	7bfb      	ldrb	r3, [r7, #15]
}
 801290c:	4618      	mov	r0, r3
 801290e:	3714      	adds	r7, #20
 8012910:	46bd      	mov	sp, r7
 8012912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012916:	4770      	bx	lr

08012918 <__cvt>:
 8012918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801291c:	ec57 6b10 	vmov	r6, r7, d0
 8012920:	2f00      	cmp	r7, #0
 8012922:	460c      	mov	r4, r1
 8012924:	4619      	mov	r1, r3
 8012926:	463b      	mov	r3, r7
 8012928:	bfbb      	ittet	lt
 801292a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801292e:	461f      	movlt	r7, r3
 8012930:	2300      	movge	r3, #0
 8012932:	232d      	movlt	r3, #45	@ 0x2d
 8012934:	700b      	strb	r3, [r1, #0]
 8012936:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012938:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801293c:	4691      	mov	r9, r2
 801293e:	f023 0820 	bic.w	r8, r3, #32
 8012942:	bfbc      	itt	lt
 8012944:	4632      	movlt	r2, r6
 8012946:	4616      	movlt	r6, r2
 8012948:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801294c:	d005      	beq.n	801295a <__cvt+0x42>
 801294e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8012952:	d100      	bne.n	8012956 <__cvt+0x3e>
 8012954:	3401      	adds	r4, #1
 8012956:	2102      	movs	r1, #2
 8012958:	e000      	b.n	801295c <__cvt+0x44>
 801295a:	2103      	movs	r1, #3
 801295c:	ab03      	add	r3, sp, #12
 801295e:	9301      	str	r3, [sp, #4]
 8012960:	ab02      	add	r3, sp, #8
 8012962:	9300      	str	r3, [sp, #0]
 8012964:	ec47 6b10 	vmov	d0, r6, r7
 8012968:	4653      	mov	r3, sl
 801296a:	4622      	mov	r2, r4
 801296c:	f000 fe64 	bl	8013638 <_dtoa_r>
 8012970:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8012974:	4605      	mov	r5, r0
 8012976:	d119      	bne.n	80129ac <__cvt+0x94>
 8012978:	f019 0f01 	tst.w	r9, #1
 801297c:	d00e      	beq.n	801299c <__cvt+0x84>
 801297e:	eb00 0904 	add.w	r9, r0, r4
 8012982:	2200      	movs	r2, #0
 8012984:	2300      	movs	r3, #0
 8012986:	4630      	mov	r0, r6
 8012988:	4639      	mov	r1, r7
 801298a:	f7ee f875 	bl	8000a78 <__aeabi_dcmpeq>
 801298e:	b108      	cbz	r0, 8012994 <__cvt+0x7c>
 8012990:	f8cd 900c 	str.w	r9, [sp, #12]
 8012994:	2230      	movs	r2, #48	@ 0x30
 8012996:	9b03      	ldr	r3, [sp, #12]
 8012998:	454b      	cmp	r3, r9
 801299a:	d31e      	bcc.n	80129da <__cvt+0xc2>
 801299c:	9b03      	ldr	r3, [sp, #12]
 801299e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80129a0:	1b5b      	subs	r3, r3, r5
 80129a2:	4628      	mov	r0, r5
 80129a4:	6013      	str	r3, [r2, #0]
 80129a6:	b004      	add	sp, #16
 80129a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80129b0:	eb00 0904 	add.w	r9, r0, r4
 80129b4:	d1e5      	bne.n	8012982 <__cvt+0x6a>
 80129b6:	7803      	ldrb	r3, [r0, #0]
 80129b8:	2b30      	cmp	r3, #48	@ 0x30
 80129ba:	d10a      	bne.n	80129d2 <__cvt+0xba>
 80129bc:	2200      	movs	r2, #0
 80129be:	2300      	movs	r3, #0
 80129c0:	4630      	mov	r0, r6
 80129c2:	4639      	mov	r1, r7
 80129c4:	f7ee f858 	bl	8000a78 <__aeabi_dcmpeq>
 80129c8:	b918      	cbnz	r0, 80129d2 <__cvt+0xba>
 80129ca:	f1c4 0401 	rsb	r4, r4, #1
 80129ce:	f8ca 4000 	str.w	r4, [sl]
 80129d2:	f8da 3000 	ldr.w	r3, [sl]
 80129d6:	4499      	add	r9, r3
 80129d8:	e7d3      	b.n	8012982 <__cvt+0x6a>
 80129da:	1c59      	adds	r1, r3, #1
 80129dc:	9103      	str	r1, [sp, #12]
 80129de:	701a      	strb	r2, [r3, #0]
 80129e0:	e7d9      	b.n	8012996 <__cvt+0x7e>

080129e2 <__exponent>:
 80129e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80129e4:	2900      	cmp	r1, #0
 80129e6:	bfba      	itte	lt
 80129e8:	4249      	neglt	r1, r1
 80129ea:	232d      	movlt	r3, #45	@ 0x2d
 80129ec:	232b      	movge	r3, #43	@ 0x2b
 80129ee:	2909      	cmp	r1, #9
 80129f0:	7002      	strb	r2, [r0, #0]
 80129f2:	7043      	strb	r3, [r0, #1]
 80129f4:	dd29      	ble.n	8012a4a <__exponent+0x68>
 80129f6:	f10d 0307 	add.w	r3, sp, #7
 80129fa:	461d      	mov	r5, r3
 80129fc:	270a      	movs	r7, #10
 80129fe:	461a      	mov	r2, r3
 8012a00:	fbb1 f6f7 	udiv	r6, r1, r7
 8012a04:	fb07 1416 	mls	r4, r7, r6, r1
 8012a08:	3430      	adds	r4, #48	@ 0x30
 8012a0a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012a0e:	460c      	mov	r4, r1
 8012a10:	2c63      	cmp	r4, #99	@ 0x63
 8012a12:	f103 33ff 	add.w	r3, r3, #4294967295
 8012a16:	4631      	mov	r1, r6
 8012a18:	dcf1      	bgt.n	80129fe <__exponent+0x1c>
 8012a1a:	3130      	adds	r1, #48	@ 0x30
 8012a1c:	1e94      	subs	r4, r2, #2
 8012a1e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012a22:	1c41      	adds	r1, r0, #1
 8012a24:	4623      	mov	r3, r4
 8012a26:	42ab      	cmp	r3, r5
 8012a28:	d30a      	bcc.n	8012a40 <__exponent+0x5e>
 8012a2a:	f10d 0309 	add.w	r3, sp, #9
 8012a2e:	1a9b      	subs	r3, r3, r2
 8012a30:	42ac      	cmp	r4, r5
 8012a32:	bf88      	it	hi
 8012a34:	2300      	movhi	r3, #0
 8012a36:	3302      	adds	r3, #2
 8012a38:	4403      	add	r3, r0
 8012a3a:	1a18      	subs	r0, r3, r0
 8012a3c:	b003      	add	sp, #12
 8012a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a40:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012a44:	f801 6f01 	strb.w	r6, [r1, #1]!
 8012a48:	e7ed      	b.n	8012a26 <__exponent+0x44>
 8012a4a:	2330      	movs	r3, #48	@ 0x30
 8012a4c:	3130      	adds	r1, #48	@ 0x30
 8012a4e:	7083      	strb	r3, [r0, #2]
 8012a50:	70c1      	strb	r1, [r0, #3]
 8012a52:	1d03      	adds	r3, r0, #4
 8012a54:	e7f1      	b.n	8012a3a <__exponent+0x58>
	...

08012a58 <_printf_float>:
 8012a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a5c:	b08d      	sub	sp, #52	@ 0x34
 8012a5e:	460c      	mov	r4, r1
 8012a60:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8012a64:	4616      	mov	r6, r2
 8012a66:	461f      	mov	r7, r3
 8012a68:	4605      	mov	r5, r0
 8012a6a:	f000 fcd5 	bl	8013418 <_localeconv_r>
 8012a6e:	6803      	ldr	r3, [r0, #0]
 8012a70:	9304      	str	r3, [sp, #16]
 8012a72:	4618      	mov	r0, r3
 8012a74:	f7ed fbd4 	bl	8000220 <strlen>
 8012a78:	2300      	movs	r3, #0
 8012a7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8012a7c:	f8d8 3000 	ldr.w	r3, [r8]
 8012a80:	9005      	str	r0, [sp, #20]
 8012a82:	3307      	adds	r3, #7
 8012a84:	f023 0307 	bic.w	r3, r3, #7
 8012a88:	f103 0208 	add.w	r2, r3, #8
 8012a8c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012a90:	f8d4 b000 	ldr.w	fp, [r4]
 8012a94:	f8c8 2000 	str.w	r2, [r8]
 8012a98:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012a9c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8012aa0:	9307      	str	r3, [sp, #28]
 8012aa2:	f8cd 8018 	str.w	r8, [sp, #24]
 8012aa6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8012aaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012aae:	4b9c      	ldr	r3, [pc, #624]	@ (8012d20 <_printf_float+0x2c8>)
 8012ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8012ab4:	f7ee f812 	bl	8000adc <__aeabi_dcmpun>
 8012ab8:	bb70      	cbnz	r0, 8012b18 <_printf_float+0xc0>
 8012aba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012abe:	4b98      	ldr	r3, [pc, #608]	@ (8012d20 <_printf_float+0x2c8>)
 8012ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8012ac4:	f7ed ffec 	bl	8000aa0 <__aeabi_dcmple>
 8012ac8:	bb30      	cbnz	r0, 8012b18 <_printf_float+0xc0>
 8012aca:	2200      	movs	r2, #0
 8012acc:	2300      	movs	r3, #0
 8012ace:	4640      	mov	r0, r8
 8012ad0:	4649      	mov	r1, r9
 8012ad2:	f7ed ffdb 	bl	8000a8c <__aeabi_dcmplt>
 8012ad6:	b110      	cbz	r0, 8012ade <_printf_float+0x86>
 8012ad8:	232d      	movs	r3, #45	@ 0x2d
 8012ada:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012ade:	4a91      	ldr	r2, [pc, #580]	@ (8012d24 <_printf_float+0x2cc>)
 8012ae0:	4b91      	ldr	r3, [pc, #580]	@ (8012d28 <_printf_float+0x2d0>)
 8012ae2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012ae6:	bf94      	ite	ls
 8012ae8:	4690      	movls	r8, r2
 8012aea:	4698      	movhi	r8, r3
 8012aec:	2303      	movs	r3, #3
 8012aee:	6123      	str	r3, [r4, #16]
 8012af0:	f02b 0304 	bic.w	r3, fp, #4
 8012af4:	6023      	str	r3, [r4, #0]
 8012af6:	f04f 0900 	mov.w	r9, #0
 8012afa:	9700      	str	r7, [sp, #0]
 8012afc:	4633      	mov	r3, r6
 8012afe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012b00:	4621      	mov	r1, r4
 8012b02:	4628      	mov	r0, r5
 8012b04:	f000 f9d2 	bl	8012eac <_printf_common>
 8012b08:	3001      	adds	r0, #1
 8012b0a:	f040 808d 	bne.w	8012c28 <_printf_float+0x1d0>
 8012b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8012b12:	b00d      	add	sp, #52	@ 0x34
 8012b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b18:	4642      	mov	r2, r8
 8012b1a:	464b      	mov	r3, r9
 8012b1c:	4640      	mov	r0, r8
 8012b1e:	4649      	mov	r1, r9
 8012b20:	f7ed ffdc 	bl	8000adc <__aeabi_dcmpun>
 8012b24:	b140      	cbz	r0, 8012b38 <_printf_float+0xe0>
 8012b26:	464b      	mov	r3, r9
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	bfbc      	itt	lt
 8012b2c:	232d      	movlt	r3, #45	@ 0x2d
 8012b2e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8012b32:	4a7e      	ldr	r2, [pc, #504]	@ (8012d2c <_printf_float+0x2d4>)
 8012b34:	4b7e      	ldr	r3, [pc, #504]	@ (8012d30 <_printf_float+0x2d8>)
 8012b36:	e7d4      	b.n	8012ae2 <_printf_float+0x8a>
 8012b38:	6863      	ldr	r3, [r4, #4]
 8012b3a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8012b3e:	9206      	str	r2, [sp, #24]
 8012b40:	1c5a      	adds	r2, r3, #1
 8012b42:	d13b      	bne.n	8012bbc <_printf_float+0x164>
 8012b44:	2306      	movs	r3, #6
 8012b46:	6063      	str	r3, [r4, #4]
 8012b48:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8012b4c:	2300      	movs	r3, #0
 8012b4e:	6022      	str	r2, [r4, #0]
 8012b50:	9303      	str	r3, [sp, #12]
 8012b52:	ab0a      	add	r3, sp, #40	@ 0x28
 8012b54:	e9cd a301 	strd	sl, r3, [sp, #4]
 8012b58:	ab09      	add	r3, sp, #36	@ 0x24
 8012b5a:	9300      	str	r3, [sp, #0]
 8012b5c:	6861      	ldr	r1, [r4, #4]
 8012b5e:	ec49 8b10 	vmov	d0, r8, r9
 8012b62:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8012b66:	4628      	mov	r0, r5
 8012b68:	f7ff fed6 	bl	8012918 <__cvt>
 8012b6c:	9b06      	ldr	r3, [sp, #24]
 8012b6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012b70:	2b47      	cmp	r3, #71	@ 0x47
 8012b72:	4680      	mov	r8, r0
 8012b74:	d129      	bne.n	8012bca <_printf_float+0x172>
 8012b76:	1cc8      	adds	r0, r1, #3
 8012b78:	db02      	blt.n	8012b80 <_printf_float+0x128>
 8012b7a:	6863      	ldr	r3, [r4, #4]
 8012b7c:	4299      	cmp	r1, r3
 8012b7e:	dd41      	ble.n	8012c04 <_printf_float+0x1ac>
 8012b80:	f1aa 0a02 	sub.w	sl, sl, #2
 8012b84:	fa5f fa8a 	uxtb.w	sl, sl
 8012b88:	3901      	subs	r1, #1
 8012b8a:	4652      	mov	r2, sl
 8012b8c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012b90:	9109      	str	r1, [sp, #36]	@ 0x24
 8012b92:	f7ff ff26 	bl	80129e2 <__exponent>
 8012b96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012b98:	1813      	adds	r3, r2, r0
 8012b9a:	2a01      	cmp	r2, #1
 8012b9c:	4681      	mov	r9, r0
 8012b9e:	6123      	str	r3, [r4, #16]
 8012ba0:	dc02      	bgt.n	8012ba8 <_printf_float+0x150>
 8012ba2:	6822      	ldr	r2, [r4, #0]
 8012ba4:	07d2      	lsls	r2, r2, #31
 8012ba6:	d501      	bpl.n	8012bac <_printf_float+0x154>
 8012ba8:	3301      	adds	r3, #1
 8012baa:	6123      	str	r3, [r4, #16]
 8012bac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d0a2      	beq.n	8012afa <_printf_float+0xa2>
 8012bb4:	232d      	movs	r3, #45	@ 0x2d
 8012bb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012bba:	e79e      	b.n	8012afa <_printf_float+0xa2>
 8012bbc:	9a06      	ldr	r2, [sp, #24]
 8012bbe:	2a47      	cmp	r2, #71	@ 0x47
 8012bc0:	d1c2      	bne.n	8012b48 <_printf_float+0xf0>
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d1c0      	bne.n	8012b48 <_printf_float+0xf0>
 8012bc6:	2301      	movs	r3, #1
 8012bc8:	e7bd      	b.n	8012b46 <_printf_float+0xee>
 8012bca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012bce:	d9db      	bls.n	8012b88 <_printf_float+0x130>
 8012bd0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8012bd4:	d118      	bne.n	8012c08 <_printf_float+0x1b0>
 8012bd6:	2900      	cmp	r1, #0
 8012bd8:	6863      	ldr	r3, [r4, #4]
 8012bda:	dd0b      	ble.n	8012bf4 <_printf_float+0x19c>
 8012bdc:	6121      	str	r1, [r4, #16]
 8012bde:	b913      	cbnz	r3, 8012be6 <_printf_float+0x18e>
 8012be0:	6822      	ldr	r2, [r4, #0]
 8012be2:	07d0      	lsls	r0, r2, #31
 8012be4:	d502      	bpl.n	8012bec <_printf_float+0x194>
 8012be6:	3301      	adds	r3, #1
 8012be8:	440b      	add	r3, r1
 8012bea:	6123      	str	r3, [r4, #16]
 8012bec:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012bee:	f04f 0900 	mov.w	r9, #0
 8012bf2:	e7db      	b.n	8012bac <_printf_float+0x154>
 8012bf4:	b913      	cbnz	r3, 8012bfc <_printf_float+0x1a4>
 8012bf6:	6822      	ldr	r2, [r4, #0]
 8012bf8:	07d2      	lsls	r2, r2, #31
 8012bfa:	d501      	bpl.n	8012c00 <_printf_float+0x1a8>
 8012bfc:	3302      	adds	r3, #2
 8012bfe:	e7f4      	b.n	8012bea <_printf_float+0x192>
 8012c00:	2301      	movs	r3, #1
 8012c02:	e7f2      	b.n	8012bea <_printf_float+0x192>
 8012c04:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8012c08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012c0a:	4299      	cmp	r1, r3
 8012c0c:	db05      	blt.n	8012c1a <_printf_float+0x1c2>
 8012c0e:	6823      	ldr	r3, [r4, #0]
 8012c10:	6121      	str	r1, [r4, #16]
 8012c12:	07d8      	lsls	r0, r3, #31
 8012c14:	d5ea      	bpl.n	8012bec <_printf_float+0x194>
 8012c16:	1c4b      	adds	r3, r1, #1
 8012c18:	e7e7      	b.n	8012bea <_printf_float+0x192>
 8012c1a:	2900      	cmp	r1, #0
 8012c1c:	bfd4      	ite	le
 8012c1e:	f1c1 0202 	rsble	r2, r1, #2
 8012c22:	2201      	movgt	r2, #1
 8012c24:	4413      	add	r3, r2
 8012c26:	e7e0      	b.n	8012bea <_printf_float+0x192>
 8012c28:	6823      	ldr	r3, [r4, #0]
 8012c2a:	055a      	lsls	r2, r3, #21
 8012c2c:	d407      	bmi.n	8012c3e <_printf_float+0x1e6>
 8012c2e:	6923      	ldr	r3, [r4, #16]
 8012c30:	4642      	mov	r2, r8
 8012c32:	4631      	mov	r1, r6
 8012c34:	4628      	mov	r0, r5
 8012c36:	47b8      	blx	r7
 8012c38:	3001      	adds	r0, #1
 8012c3a:	d12b      	bne.n	8012c94 <_printf_float+0x23c>
 8012c3c:	e767      	b.n	8012b0e <_printf_float+0xb6>
 8012c3e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012c42:	f240 80dd 	bls.w	8012e00 <_printf_float+0x3a8>
 8012c46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012c4a:	2200      	movs	r2, #0
 8012c4c:	2300      	movs	r3, #0
 8012c4e:	f7ed ff13 	bl	8000a78 <__aeabi_dcmpeq>
 8012c52:	2800      	cmp	r0, #0
 8012c54:	d033      	beq.n	8012cbe <_printf_float+0x266>
 8012c56:	4a37      	ldr	r2, [pc, #220]	@ (8012d34 <_printf_float+0x2dc>)
 8012c58:	2301      	movs	r3, #1
 8012c5a:	4631      	mov	r1, r6
 8012c5c:	4628      	mov	r0, r5
 8012c5e:	47b8      	blx	r7
 8012c60:	3001      	adds	r0, #1
 8012c62:	f43f af54 	beq.w	8012b0e <_printf_float+0xb6>
 8012c66:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8012c6a:	4543      	cmp	r3, r8
 8012c6c:	db02      	blt.n	8012c74 <_printf_float+0x21c>
 8012c6e:	6823      	ldr	r3, [r4, #0]
 8012c70:	07d8      	lsls	r0, r3, #31
 8012c72:	d50f      	bpl.n	8012c94 <_printf_float+0x23c>
 8012c74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012c78:	4631      	mov	r1, r6
 8012c7a:	4628      	mov	r0, r5
 8012c7c:	47b8      	blx	r7
 8012c7e:	3001      	adds	r0, #1
 8012c80:	f43f af45 	beq.w	8012b0e <_printf_float+0xb6>
 8012c84:	f04f 0900 	mov.w	r9, #0
 8012c88:	f108 38ff 	add.w	r8, r8, #4294967295
 8012c8c:	f104 0a1a 	add.w	sl, r4, #26
 8012c90:	45c8      	cmp	r8, r9
 8012c92:	dc09      	bgt.n	8012ca8 <_printf_float+0x250>
 8012c94:	6823      	ldr	r3, [r4, #0]
 8012c96:	079b      	lsls	r3, r3, #30
 8012c98:	f100 8103 	bmi.w	8012ea2 <_printf_float+0x44a>
 8012c9c:	68e0      	ldr	r0, [r4, #12]
 8012c9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012ca0:	4298      	cmp	r0, r3
 8012ca2:	bfb8      	it	lt
 8012ca4:	4618      	movlt	r0, r3
 8012ca6:	e734      	b.n	8012b12 <_printf_float+0xba>
 8012ca8:	2301      	movs	r3, #1
 8012caa:	4652      	mov	r2, sl
 8012cac:	4631      	mov	r1, r6
 8012cae:	4628      	mov	r0, r5
 8012cb0:	47b8      	blx	r7
 8012cb2:	3001      	adds	r0, #1
 8012cb4:	f43f af2b 	beq.w	8012b0e <_printf_float+0xb6>
 8012cb8:	f109 0901 	add.w	r9, r9, #1
 8012cbc:	e7e8      	b.n	8012c90 <_printf_float+0x238>
 8012cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	dc39      	bgt.n	8012d38 <_printf_float+0x2e0>
 8012cc4:	4a1b      	ldr	r2, [pc, #108]	@ (8012d34 <_printf_float+0x2dc>)
 8012cc6:	2301      	movs	r3, #1
 8012cc8:	4631      	mov	r1, r6
 8012cca:	4628      	mov	r0, r5
 8012ccc:	47b8      	blx	r7
 8012cce:	3001      	adds	r0, #1
 8012cd0:	f43f af1d 	beq.w	8012b0e <_printf_float+0xb6>
 8012cd4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012cd8:	ea59 0303 	orrs.w	r3, r9, r3
 8012cdc:	d102      	bne.n	8012ce4 <_printf_float+0x28c>
 8012cde:	6823      	ldr	r3, [r4, #0]
 8012ce0:	07d9      	lsls	r1, r3, #31
 8012ce2:	d5d7      	bpl.n	8012c94 <_printf_float+0x23c>
 8012ce4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012ce8:	4631      	mov	r1, r6
 8012cea:	4628      	mov	r0, r5
 8012cec:	47b8      	blx	r7
 8012cee:	3001      	adds	r0, #1
 8012cf0:	f43f af0d 	beq.w	8012b0e <_printf_float+0xb6>
 8012cf4:	f04f 0a00 	mov.w	sl, #0
 8012cf8:	f104 0b1a 	add.w	fp, r4, #26
 8012cfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012cfe:	425b      	negs	r3, r3
 8012d00:	4553      	cmp	r3, sl
 8012d02:	dc01      	bgt.n	8012d08 <_printf_float+0x2b0>
 8012d04:	464b      	mov	r3, r9
 8012d06:	e793      	b.n	8012c30 <_printf_float+0x1d8>
 8012d08:	2301      	movs	r3, #1
 8012d0a:	465a      	mov	r2, fp
 8012d0c:	4631      	mov	r1, r6
 8012d0e:	4628      	mov	r0, r5
 8012d10:	47b8      	blx	r7
 8012d12:	3001      	adds	r0, #1
 8012d14:	f43f aefb 	beq.w	8012b0e <_printf_float+0xb6>
 8012d18:	f10a 0a01 	add.w	sl, sl, #1
 8012d1c:	e7ee      	b.n	8012cfc <_printf_float+0x2a4>
 8012d1e:	bf00      	nop
 8012d20:	7fefffff 	.word	0x7fefffff
 8012d24:	0801545c 	.word	0x0801545c
 8012d28:	08015460 	.word	0x08015460
 8012d2c:	08015464 	.word	0x08015464
 8012d30:	08015468 	.word	0x08015468
 8012d34:	0801546c 	.word	0x0801546c
 8012d38:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012d3a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012d3e:	4553      	cmp	r3, sl
 8012d40:	bfa8      	it	ge
 8012d42:	4653      	movge	r3, sl
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	4699      	mov	r9, r3
 8012d48:	dc36      	bgt.n	8012db8 <_printf_float+0x360>
 8012d4a:	f04f 0b00 	mov.w	fp, #0
 8012d4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012d52:	f104 021a 	add.w	r2, r4, #26
 8012d56:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012d58:	9306      	str	r3, [sp, #24]
 8012d5a:	eba3 0309 	sub.w	r3, r3, r9
 8012d5e:	455b      	cmp	r3, fp
 8012d60:	dc31      	bgt.n	8012dc6 <_printf_float+0x36e>
 8012d62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d64:	459a      	cmp	sl, r3
 8012d66:	dc3a      	bgt.n	8012dde <_printf_float+0x386>
 8012d68:	6823      	ldr	r3, [r4, #0]
 8012d6a:	07da      	lsls	r2, r3, #31
 8012d6c:	d437      	bmi.n	8012dde <_printf_float+0x386>
 8012d6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d70:	ebaa 0903 	sub.w	r9, sl, r3
 8012d74:	9b06      	ldr	r3, [sp, #24]
 8012d76:	ebaa 0303 	sub.w	r3, sl, r3
 8012d7a:	4599      	cmp	r9, r3
 8012d7c:	bfa8      	it	ge
 8012d7e:	4699      	movge	r9, r3
 8012d80:	f1b9 0f00 	cmp.w	r9, #0
 8012d84:	dc33      	bgt.n	8012dee <_printf_float+0x396>
 8012d86:	f04f 0800 	mov.w	r8, #0
 8012d8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012d8e:	f104 0b1a 	add.w	fp, r4, #26
 8012d92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d94:	ebaa 0303 	sub.w	r3, sl, r3
 8012d98:	eba3 0309 	sub.w	r3, r3, r9
 8012d9c:	4543      	cmp	r3, r8
 8012d9e:	f77f af79 	ble.w	8012c94 <_printf_float+0x23c>
 8012da2:	2301      	movs	r3, #1
 8012da4:	465a      	mov	r2, fp
 8012da6:	4631      	mov	r1, r6
 8012da8:	4628      	mov	r0, r5
 8012daa:	47b8      	blx	r7
 8012dac:	3001      	adds	r0, #1
 8012dae:	f43f aeae 	beq.w	8012b0e <_printf_float+0xb6>
 8012db2:	f108 0801 	add.w	r8, r8, #1
 8012db6:	e7ec      	b.n	8012d92 <_printf_float+0x33a>
 8012db8:	4642      	mov	r2, r8
 8012dba:	4631      	mov	r1, r6
 8012dbc:	4628      	mov	r0, r5
 8012dbe:	47b8      	blx	r7
 8012dc0:	3001      	adds	r0, #1
 8012dc2:	d1c2      	bne.n	8012d4a <_printf_float+0x2f2>
 8012dc4:	e6a3      	b.n	8012b0e <_printf_float+0xb6>
 8012dc6:	2301      	movs	r3, #1
 8012dc8:	4631      	mov	r1, r6
 8012dca:	4628      	mov	r0, r5
 8012dcc:	9206      	str	r2, [sp, #24]
 8012dce:	47b8      	blx	r7
 8012dd0:	3001      	adds	r0, #1
 8012dd2:	f43f ae9c 	beq.w	8012b0e <_printf_float+0xb6>
 8012dd6:	9a06      	ldr	r2, [sp, #24]
 8012dd8:	f10b 0b01 	add.w	fp, fp, #1
 8012ddc:	e7bb      	b.n	8012d56 <_printf_float+0x2fe>
 8012dde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012de2:	4631      	mov	r1, r6
 8012de4:	4628      	mov	r0, r5
 8012de6:	47b8      	blx	r7
 8012de8:	3001      	adds	r0, #1
 8012dea:	d1c0      	bne.n	8012d6e <_printf_float+0x316>
 8012dec:	e68f      	b.n	8012b0e <_printf_float+0xb6>
 8012dee:	9a06      	ldr	r2, [sp, #24]
 8012df0:	464b      	mov	r3, r9
 8012df2:	4442      	add	r2, r8
 8012df4:	4631      	mov	r1, r6
 8012df6:	4628      	mov	r0, r5
 8012df8:	47b8      	blx	r7
 8012dfa:	3001      	adds	r0, #1
 8012dfc:	d1c3      	bne.n	8012d86 <_printf_float+0x32e>
 8012dfe:	e686      	b.n	8012b0e <_printf_float+0xb6>
 8012e00:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012e04:	f1ba 0f01 	cmp.w	sl, #1
 8012e08:	dc01      	bgt.n	8012e0e <_printf_float+0x3b6>
 8012e0a:	07db      	lsls	r3, r3, #31
 8012e0c:	d536      	bpl.n	8012e7c <_printf_float+0x424>
 8012e0e:	2301      	movs	r3, #1
 8012e10:	4642      	mov	r2, r8
 8012e12:	4631      	mov	r1, r6
 8012e14:	4628      	mov	r0, r5
 8012e16:	47b8      	blx	r7
 8012e18:	3001      	adds	r0, #1
 8012e1a:	f43f ae78 	beq.w	8012b0e <_printf_float+0xb6>
 8012e1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012e22:	4631      	mov	r1, r6
 8012e24:	4628      	mov	r0, r5
 8012e26:	47b8      	blx	r7
 8012e28:	3001      	adds	r0, #1
 8012e2a:	f43f ae70 	beq.w	8012b0e <_printf_float+0xb6>
 8012e2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012e32:	2200      	movs	r2, #0
 8012e34:	2300      	movs	r3, #0
 8012e36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012e3a:	f7ed fe1d 	bl	8000a78 <__aeabi_dcmpeq>
 8012e3e:	b9c0      	cbnz	r0, 8012e72 <_printf_float+0x41a>
 8012e40:	4653      	mov	r3, sl
 8012e42:	f108 0201 	add.w	r2, r8, #1
 8012e46:	4631      	mov	r1, r6
 8012e48:	4628      	mov	r0, r5
 8012e4a:	47b8      	blx	r7
 8012e4c:	3001      	adds	r0, #1
 8012e4e:	d10c      	bne.n	8012e6a <_printf_float+0x412>
 8012e50:	e65d      	b.n	8012b0e <_printf_float+0xb6>
 8012e52:	2301      	movs	r3, #1
 8012e54:	465a      	mov	r2, fp
 8012e56:	4631      	mov	r1, r6
 8012e58:	4628      	mov	r0, r5
 8012e5a:	47b8      	blx	r7
 8012e5c:	3001      	adds	r0, #1
 8012e5e:	f43f ae56 	beq.w	8012b0e <_printf_float+0xb6>
 8012e62:	f108 0801 	add.w	r8, r8, #1
 8012e66:	45d0      	cmp	r8, sl
 8012e68:	dbf3      	blt.n	8012e52 <_printf_float+0x3fa>
 8012e6a:	464b      	mov	r3, r9
 8012e6c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012e70:	e6df      	b.n	8012c32 <_printf_float+0x1da>
 8012e72:	f04f 0800 	mov.w	r8, #0
 8012e76:	f104 0b1a 	add.w	fp, r4, #26
 8012e7a:	e7f4      	b.n	8012e66 <_printf_float+0x40e>
 8012e7c:	2301      	movs	r3, #1
 8012e7e:	4642      	mov	r2, r8
 8012e80:	e7e1      	b.n	8012e46 <_printf_float+0x3ee>
 8012e82:	2301      	movs	r3, #1
 8012e84:	464a      	mov	r2, r9
 8012e86:	4631      	mov	r1, r6
 8012e88:	4628      	mov	r0, r5
 8012e8a:	47b8      	blx	r7
 8012e8c:	3001      	adds	r0, #1
 8012e8e:	f43f ae3e 	beq.w	8012b0e <_printf_float+0xb6>
 8012e92:	f108 0801 	add.w	r8, r8, #1
 8012e96:	68e3      	ldr	r3, [r4, #12]
 8012e98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012e9a:	1a5b      	subs	r3, r3, r1
 8012e9c:	4543      	cmp	r3, r8
 8012e9e:	dcf0      	bgt.n	8012e82 <_printf_float+0x42a>
 8012ea0:	e6fc      	b.n	8012c9c <_printf_float+0x244>
 8012ea2:	f04f 0800 	mov.w	r8, #0
 8012ea6:	f104 0919 	add.w	r9, r4, #25
 8012eaa:	e7f4      	b.n	8012e96 <_printf_float+0x43e>

08012eac <_printf_common>:
 8012eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012eb0:	4616      	mov	r6, r2
 8012eb2:	4698      	mov	r8, r3
 8012eb4:	688a      	ldr	r2, [r1, #8]
 8012eb6:	690b      	ldr	r3, [r1, #16]
 8012eb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012ebc:	4293      	cmp	r3, r2
 8012ebe:	bfb8      	it	lt
 8012ec0:	4613      	movlt	r3, r2
 8012ec2:	6033      	str	r3, [r6, #0]
 8012ec4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012ec8:	4607      	mov	r7, r0
 8012eca:	460c      	mov	r4, r1
 8012ecc:	b10a      	cbz	r2, 8012ed2 <_printf_common+0x26>
 8012ece:	3301      	adds	r3, #1
 8012ed0:	6033      	str	r3, [r6, #0]
 8012ed2:	6823      	ldr	r3, [r4, #0]
 8012ed4:	0699      	lsls	r1, r3, #26
 8012ed6:	bf42      	ittt	mi
 8012ed8:	6833      	ldrmi	r3, [r6, #0]
 8012eda:	3302      	addmi	r3, #2
 8012edc:	6033      	strmi	r3, [r6, #0]
 8012ede:	6825      	ldr	r5, [r4, #0]
 8012ee0:	f015 0506 	ands.w	r5, r5, #6
 8012ee4:	d106      	bne.n	8012ef4 <_printf_common+0x48>
 8012ee6:	f104 0a19 	add.w	sl, r4, #25
 8012eea:	68e3      	ldr	r3, [r4, #12]
 8012eec:	6832      	ldr	r2, [r6, #0]
 8012eee:	1a9b      	subs	r3, r3, r2
 8012ef0:	42ab      	cmp	r3, r5
 8012ef2:	dc26      	bgt.n	8012f42 <_printf_common+0x96>
 8012ef4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012ef8:	6822      	ldr	r2, [r4, #0]
 8012efa:	3b00      	subs	r3, #0
 8012efc:	bf18      	it	ne
 8012efe:	2301      	movne	r3, #1
 8012f00:	0692      	lsls	r2, r2, #26
 8012f02:	d42b      	bmi.n	8012f5c <_printf_common+0xb0>
 8012f04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012f08:	4641      	mov	r1, r8
 8012f0a:	4638      	mov	r0, r7
 8012f0c:	47c8      	blx	r9
 8012f0e:	3001      	adds	r0, #1
 8012f10:	d01e      	beq.n	8012f50 <_printf_common+0xa4>
 8012f12:	6823      	ldr	r3, [r4, #0]
 8012f14:	6922      	ldr	r2, [r4, #16]
 8012f16:	f003 0306 	and.w	r3, r3, #6
 8012f1a:	2b04      	cmp	r3, #4
 8012f1c:	bf02      	ittt	eq
 8012f1e:	68e5      	ldreq	r5, [r4, #12]
 8012f20:	6833      	ldreq	r3, [r6, #0]
 8012f22:	1aed      	subeq	r5, r5, r3
 8012f24:	68a3      	ldr	r3, [r4, #8]
 8012f26:	bf0c      	ite	eq
 8012f28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012f2c:	2500      	movne	r5, #0
 8012f2e:	4293      	cmp	r3, r2
 8012f30:	bfc4      	itt	gt
 8012f32:	1a9b      	subgt	r3, r3, r2
 8012f34:	18ed      	addgt	r5, r5, r3
 8012f36:	2600      	movs	r6, #0
 8012f38:	341a      	adds	r4, #26
 8012f3a:	42b5      	cmp	r5, r6
 8012f3c:	d11a      	bne.n	8012f74 <_printf_common+0xc8>
 8012f3e:	2000      	movs	r0, #0
 8012f40:	e008      	b.n	8012f54 <_printf_common+0xa8>
 8012f42:	2301      	movs	r3, #1
 8012f44:	4652      	mov	r2, sl
 8012f46:	4641      	mov	r1, r8
 8012f48:	4638      	mov	r0, r7
 8012f4a:	47c8      	blx	r9
 8012f4c:	3001      	adds	r0, #1
 8012f4e:	d103      	bne.n	8012f58 <_printf_common+0xac>
 8012f50:	f04f 30ff 	mov.w	r0, #4294967295
 8012f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f58:	3501      	adds	r5, #1
 8012f5a:	e7c6      	b.n	8012eea <_printf_common+0x3e>
 8012f5c:	18e1      	adds	r1, r4, r3
 8012f5e:	1c5a      	adds	r2, r3, #1
 8012f60:	2030      	movs	r0, #48	@ 0x30
 8012f62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012f66:	4422      	add	r2, r4
 8012f68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012f6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012f70:	3302      	adds	r3, #2
 8012f72:	e7c7      	b.n	8012f04 <_printf_common+0x58>
 8012f74:	2301      	movs	r3, #1
 8012f76:	4622      	mov	r2, r4
 8012f78:	4641      	mov	r1, r8
 8012f7a:	4638      	mov	r0, r7
 8012f7c:	47c8      	blx	r9
 8012f7e:	3001      	adds	r0, #1
 8012f80:	d0e6      	beq.n	8012f50 <_printf_common+0xa4>
 8012f82:	3601      	adds	r6, #1
 8012f84:	e7d9      	b.n	8012f3a <_printf_common+0x8e>
	...

08012f88 <_printf_i>:
 8012f88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012f8c:	7e0f      	ldrb	r7, [r1, #24]
 8012f8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012f90:	2f78      	cmp	r7, #120	@ 0x78
 8012f92:	4691      	mov	r9, r2
 8012f94:	4680      	mov	r8, r0
 8012f96:	460c      	mov	r4, r1
 8012f98:	469a      	mov	sl, r3
 8012f9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012f9e:	d807      	bhi.n	8012fb0 <_printf_i+0x28>
 8012fa0:	2f62      	cmp	r7, #98	@ 0x62
 8012fa2:	d80a      	bhi.n	8012fba <_printf_i+0x32>
 8012fa4:	2f00      	cmp	r7, #0
 8012fa6:	f000 80d2 	beq.w	801314e <_printf_i+0x1c6>
 8012faa:	2f58      	cmp	r7, #88	@ 0x58
 8012fac:	f000 80b9 	beq.w	8013122 <_printf_i+0x19a>
 8012fb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012fb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012fb8:	e03a      	b.n	8013030 <_printf_i+0xa8>
 8012fba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012fbe:	2b15      	cmp	r3, #21
 8012fc0:	d8f6      	bhi.n	8012fb0 <_printf_i+0x28>
 8012fc2:	a101      	add	r1, pc, #4	@ (adr r1, 8012fc8 <_printf_i+0x40>)
 8012fc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012fc8:	08013021 	.word	0x08013021
 8012fcc:	08013035 	.word	0x08013035
 8012fd0:	08012fb1 	.word	0x08012fb1
 8012fd4:	08012fb1 	.word	0x08012fb1
 8012fd8:	08012fb1 	.word	0x08012fb1
 8012fdc:	08012fb1 	.word	0x08012fb1
 8012fe0:	08013035 	.word	0x08013035
 8012fe4:	08012fb1 	.word	0x08012fb1
 8012fe8:	08012fb1 	.word	0x08012fb1
 8012fec:	08012fb1 	.word	0x08012fb1
 8012ff0:	08012fb1 	.word	0x08012fb1
 8012ff4:	08013135 	.word	0x08013135
 8012ff8:	0801305f 	.word	0x0801305f
 8012ffc:	080130ef 	.word	0x080130ef
 8013000:	08012fb1 	.word	0x08012fb1
 8013004:	08012fb1 	.word	0x08012fb1
 8013008:	08013157 	.word	0x08013157
 801300c:	08012fb1 	.word	0x08012fb1
 8013010:	0801305f 	.word	0x0801305f
 8013014:	08012fb1 	.word	0x08012fb1
 8013018:	08012fb1 	.word	0x08012fb1
 801301c:	080130f7 	.word	0x080130f7
 8013020:	6833      	ldr	r3, [r6, #0]
 8013022:	1d1a      	adds	r2, r3, #4
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	6032      	str	r2, [r6, #0]
 8013028:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801302c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013030:	2301      	movs	r3, #1
 8013032:	e09d      	b.n	8013170 <_printf_i+0x1e8>
 8013034:	6833      	ldr	r3, [r6, #0]
 8013036:	6820      	ldr	r0, [r4, #0]
 8013038:	1d19      	adds	r1, r3, #4
 801303a:	6031      	str	r1, [r6, #0]
 801303c:	0606      	lsls	r6, r0, #24
 801303e:	d501      	bpl.n	8013044 <_printf_i+0xbc>
 8013040:	681d      	ldr	r5, [r3, #0]
 8013042:	e003      	b.n	801304c <_printf_i+0xc4>
 8013044:	0645      	lsls	r5, r0, #25
 8013046:	d5fb      	bpl.n	8013040 <_printf_i+0xb8>
 8013048:	f9b3 5000 	ldrsh.w	r5, [r3]
 801304c:	2d00      	cmp	r5, #0
 801304e:	da03      	bge.n	8013058 <_printf_i+0xd0>
 8013050:	232d      	movs	r3, #45	@ 0x2d
 8013052:	426d      	negs	r5, r5
 8013054:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013058:	4859      	ldr	r0, [pc, #356]	@ (80131c0 <_printf_i+0x238>)
 801305a:	230a      	movs	r3, #10
 801305c:	e011      	b.n	8013082 <_printf_i+0xfa>
 801305e:	6821      	ldr	r1, [r4, #0]
 8013060:	6833      	ldr	r3, [r6, #0]
 8013062:	0608      	lsls	r0, r1, #24
 8013064:	f853 5b04 	ldr.w	r5, [r3], #4
 8013068:	d402      	bmi.n	8013070 <_printf_i+0xe8>
 801306a:	0649      	lsls	r1, r1, #25
 801306c:	bf48      	it	mi
 801306e:	b2ad      	uxthmi	r5, r5
 8013070:	2f6f      	cmp	r7, #111	@ 0x6f
 8013072:	4853      	ldr	r0, [pc, #332]	@ (80131c0 <_printf_i+0x238>)
 8013074:	6033      	str	r3, [r6, #0]
 8013076:	bf14      	ite	ne
 8013078:	230a      	movne	r3, #10
 801307a:	2308      	moveq	r3, #8
 801307c:	2100      	movs	r1, #0
 801307e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013082:	6866      	ldr	r6, [r4, #4]
 8013084:	60a6      	str	r6, [r4, #8]
 8013086:	2e00      	cmp	r6, #0
 8013088:	bfa2      	ittt	ge
 801308a:	6821      	ldrge	r1, [r4, #0]
 801308c:	f021 0104 	bicge.w	r1, r1, #4
 8013090:	6021      	strge	r1, [r4, #0]
 8013092:	b90d      	cbnz	r5, 8013098 <_printf_i+0x110>
 8013094:	2e00      	cmp	r6, #0
 8013096:	d04b      	beq.n	8013130 <_printf_i+0x1a8>
 8013098:	4616      	mov	r6, r2
 801309a:	fbb5 f1f3 	udiv	r1, r5, r3
 801309e:	fb03 5711 	mls	r7, r3, r1, r5
 80130a2:	5dc7      	ldrb	r7, [r0, r7]
 80130a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80130a8:	462f      	mov	r7, r5
 80130aa:	42bb      	cmp	r3, r7
 80130ac:	460d      	mov	r5, r1
 80130ae:	d9f4      	bls.n	801309a <_printf_i+0x112>
 80130b0:	2b08      	cmp	r3, #8
 80130b2:	d10b      	bne.n	80130cc <_printf_i+0x144>
 80130b4:	6823      	ldr	r3, [r4, #0]
 80130b6:	07df      	lsls	r7, r3, #31
 80130b8:	d508      	bpl.n	80130cc <_printf_i+0x144>
 80130ba:	6923      	ldr	r3, [r4, #16]
 80130bc:	6861      	ldr	r1, [r4, #4]
 80130be:	4299      	cmp	r1, r3
 80130c0:	bfde      	ittt	le
 80130c2:	2330      	movle	r3, #48	@ 0x30
 80130c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80130c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80130cc:	1b92      	subs	r2, r2, r6
 80130ce:	6122      	str	r2, [r4, #16]
 80130d0:	f8cd a000 	str.w	sl, [sp]
 80130d4:	464b      	mov	r3, r9
 80130d6:	aa03      	add	r2, sp, #12
 80130d8:	4621      	mov	r1, r4
 80130da:	4640      	mov	r0, r8
 80130dc:	f7ff fee6 	bl	8012eac <_printf_common>
 80130e0:	3001      	adds	r0, #1
 80130e2:	d14a      	bne.n	801317a <_printf_i+0x1f2>
 80130e4:	f04f 30ff 	mov.w	r0, #4294967295
 80130e8:	b004      	add	sp, #16
 80130ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130ee:	6823      	ldr	r3, [r4, #0]
 80130f0:	f043 0320 	orr.w	r3, r3, #32
 80130f4:	6023      	str	r3, [r4, #0]
 80130f6:	4833      	ldr	r0, [pc, #204]	@ (80131c4 <_printf_i+0x23c>)
 80130f8:	2778      	movs	r7, #120	@ 0x78
 80130fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80130fe:	6823      	ldr	r3, [r4, #0]
 8013100:	6831      	ldr	r1, [r6, #0]
 8013102:	061f      	lsls	r7, r3, #24
 8013104:	f851 5b04 	ldr.w	r5, [r1], #4
 8013108:	d402      	bmi.n	8013110 <_printf_i+0x188>
 801310a:	065f      	lsls	r7, r3, #25
 801310c:	bf48      	it	mi
 801310e:	b2ad      	uxthmi	r5, r5
 8013110:	6031      	str	r1, [r6, #0]
 8013112:	07d9      	lsls	r1, r3, #31
 8013114:	bf44      	itt	mi
 8013116:	f043 0320 	orrmi.w	r3, r3, #32
 801311a:	6023      	strmi	r3, [r4, #0]
 801311c:	b11d      	cbz	r5, 8013126 <_printf_i+0x19e>
 801311e:	2310      	movs	r3, #16
 8013120:	e7ac      	b.n	801307c <_printf_i+0xf4>
 8013122:	4827      	ldr	r0, [pc, #156]	@ (80131c0 <_printf_i+0x238>)
 8013124:	e7e9      	b.n	80130fa <_printf_i+0x172>
 8013126:	6823      	ldr	r3, [r4, #0]
 8013128:	f023 0320 	bic.w	r3, r3, #32
 801312c:	6023      	str	r3, [r4, #0]
 801312e:	e7f6      	b.n	801311e <_printf_i+0x196>
 8013130:	4616      	mov	r6, r2
 8013132:	e7bd      	b.n	80130b0 <_printf_i+0x128>
 8013134:	6833      	ldr	r3, [r6, #0]
 8013136:	6825      	ldr	r5, [r4, #0]
 8013138:	6961      	ldr	r1, [r4, #20]
 801313a:	1d18      	adds	r0, r3, #4
 801313c:	6030      	str	r0, [r6, #0]
 801313e:	062e      	lsls	r6, r5, #24
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	d501      	bpl.n	8013148 <_printf_i+0x1c0>
 8013144:	6019      	str	r1, [r3, #0]
 8013146:	e002      	b.n	801314e <_printf_i+0x1c6>
 8013148:	0668      	lsls	r0, r5, #25
 801314a:	d5fb      	bpl.n	8013144 <_printf_i+0x1bc>
 801314c:	8019      	strh	r1, [r3, #0]
 801314e:	2300      	movs	r3, #0
 8013150:	6123      	str	r3, [r4, #16]
 8013152:	4616      	mov	r6, r2
 8013154:	e7bc      	b.n	80130d0 <_printf_i+0x148>
 8013156:	6833      	ldr	r3, [r6, #0]
 8013158:	1d1a      	adds	r2, r3, #4
 801315a:	6032      	str	r2, [r6, #0]
 801315c:	681e      	ldr	r6, [r3, #0]
 801315e:	6862      	ldr	r2, [r4, #4]
 8013160:	2100      	movs	r1, #0
 8013162:	4630      	mov	r0, r6
 8013164:	f7ed f80c 	bl	8000180 <memchr>
 8013168:	b108      	cbz	r0, 801316e <_printf_i+0x1e6>
 801316a:	1b80      	subs	r0, r0, r6
 801316c:	6060      	str	r0, [r4, #4]
 801316e:	6863      	ldr	r3, [r4, #4]
 8013170:	6123      	str	r3, [r4, #16]
 8013172:	2300      	movs	r3, #0
 8013174:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013178:	e7aa      	b.n	80130d0 <_printf_i+0x148>
 801317a:	6923      	ldr	r3, [r4, #16]
 801317c:	4632      	mov	r2, r6
 801317e:	4649      	mov	r1, r9
 8013180:	4640      	mov	r0, r8
 8013182:	47d0      	blx	sl
 8013184:	3001      	adds	r0, #1
 8013186:	d0ad      	beq.n	80130e4 <_printf_i+0x15c>
 8013188:	6823      	ldr	r3, [r4, #0]
 801318a:	079b      	lsls	r3, r3, #30
 801318c:	d413      	bmi.n	80131b6 <_printf_i+0x22e>
 801318e:	68e0      	ldr	r0, [r4, #12]
 8013190:	9b03      	ldr	r3, [sp, #12]
 8013192:	4298      	cmp	r0, r3
 8013194:	bfb8      	it	lt
 8013196:	4618      	movlt	r0, r3
 8013198:	e7a6      	b.n	80130e8 <_printf_i+0x160>
 801319a:	2301      	movs	r3, #1
 801319c:	4632      	mov	r2, r6
 801319e:	4649      	mov	r1, r9
 80131a0:	4640      	mov	r0, r8
 80131a2:	47d0      	blx	sl
 80131a4:	3001      	adds	r0, #1
 80131a6:	d09d      	beq.n	80130e4 <_printf_i+0x15c>
 80131a8:	3501      	adds	r5, #1
 80131aa:	68e3      	ldr	r3, [r4, #12]
 80131ac:	9903      	ldr	r1, [sp, #12]
 80131ae:	1a5b      	subs	r3, r3, r1
 80131b0:	42ab      	cmp	r3, r5
 80131b2:	dcf2      	bgt.n	801319a <_printf_i+0x212>
 80131b4:	e7eb      	b.n	801318e <_printf_i+0x206>
 80131b6:	2500      	movs	r5, #0
 80131b8:	f104 0619 	add.w	r6, r4, #25
 80131bc:	e7f5      	b.n	80131aa <_printf_i+0x222>
 80131be:	bf00      	nop
 80131c0:	0801546e 	.word	0x0801546e
 80131c4:	0801547f 	.word	0x0801547f

080131c8 <std>:
 80131c8:	2300      	movs	r3, #0
 80131ca:	b510      	push	{r4, lr}
 80131cc:	4604      	mov	r4, r0
 80131ce:	e9c0 3300 	strd	r3, r3, [r0]
 80131d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80131d6:	6083      	str	r3, [r0, #8]
 80131d8:	8181      	strh	r1, [r0, #12]
 80131da:	6643      	str	r3, [r0, #100]	@ 0x64
 80131dc:	81c2      	strh	r2, [r0, #14]
 80131de:	6183      	str	r3, [r0, #24]
 80131e0:	4619      	mov	r1, r3
 80131e2:	2208      	movs	r2, #8
 80131e4:	305c      	adds	r0, #92	@ 0x5c
 80131e6:	f000 f90e 	bl	8013406 <memset>
 80131ea:	4b0d      	ldr	r3, [pc, #52]	@ (8013220 <std+0x58>)
 80131ec:	6263      	str	r3, [r4, #36]	@ 0x24
 80131ee:	4b0d      	ldr	r3, [pc, #52]	@ (8013224 <std+0x5c>)
 80131f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80131f2:	4b0d      	ldr	r3, [pc, #52]	@ (8013228 <std+0x60>)
 80131f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80131f6:	4b0d      	ldr	r3, [pc, #52]	@ (801322c <std+0x64>)
 80131f8:	6323      	str	r3, [r4, #48]	@ 0x30
 80131fa:	4b0d      	ldr	r3, [pc, #52]	@ (8013230 <std+0x68>)
 80131fc:	6224      	str	r4, [r4, #32]
 80131fe:	429c      	cmp	r4, r3
 8013200:	d006      	beq.n	8013210 <std+0x48>
 8013202:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013206:	4294      	cmp	r4, r2
 8013208:	d002      	beq.n	8013210 <std+0x48>
 801320a:	33d0      	adds	r3, #208	@ 0xd0
 801320c:	429c      	cmp	r4, r3
 801320e:	d105      	bne.n	801321c <std+0x54>
 8013210:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013218:	f000 b972 	b.w	8013500 <__retarget_lock_init_recursive>
 801321c:	bd10      	pop	{r4, pc}
 801321e:	bf00      	nop
 8013220:	08013381 	.word	0x08013381
 8013224:	080133a3 	.word	0x080133a3
 8013228:	080133db 	.word	0x080133db
 801322c:	080133ff 	.word	0x080133ff
 8013230:	200021d0 	.word	0x200021d0

08013234 <stdio_exit_handler>:
 8013234:	4a02      	ldr	r2, [pc, #8]	@ (8013240 <stdio_exit_handler+0xc>)
 8013236:	4903      	ldr	r1, [pc, #12]	@ (8013244 <stdio_exit_handler+0x10>)
 8013238:	4803      	ldr	r0, [pc, #12]	@ (8013248 <stdio_exit_handler+0x14>)
 801323a:	f000 b869 	b.w	8013310 <_fwalk_sglue>
 801323e:	bf00      	nop
 8013240:	2000012c 	.word	0x2000012c
 8013244:	08014e51 	.word	0x08014e51
 8013248:	2000013c 	.word	0x2000013c

0801324c <cleanup_stdio>:
 801324c:	6841      	ldr	r1, [r0, #4]
 801324e:	4b0c      	ldr	r3, [pc, #48]	@ (8013280 <cleanup_stdio+0x34>)
 8013250:	4299      	cmp	r1, r3
 8013252:	b510      	push	{r4, lr}
 8013254:	4604      	mov	r4, r0
 8013256:	d001      	beq.n	801325c <cleanup_stdio+0x10>
 8013258:	f001 fdfa 	bl	8014e50 <_fflush_r>
 801325c:	68a1      	ldr	r1, [r4, #8]
 801325e:	4b09      	ldr	r3, [pc, #36]	@ (8013284 <cleanup_stdio+0x38>)
 8013260:	4299      	cmp	r1, r3
 8013262:	d002      	beq.n	801326a <cleanup_stdio+0x1e>
 8013264:	4620      	mov	r0, r4
 8013266:	f001 fdf3 	bl	8014e50 <_fflush_r>
 801326a:	68e1      	ldr	r1, [r4, #12]
 801326c:	4b06      	ldr	r3, [pc, #24]	@ (8013288 <cleanup_stdio+0x3c>)
 801326e:	4299      	cmp	r1, r3
 8013270:	d004      	beq.n	801327c <cleanup_stdio+0x30>
 8013272:	4620      	mov	r0, r4
 8013274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013278:	f001 bdea 	b.w	8014e50 <_fflush_r>
 801327c:	bd10      	pop	{r4, pc}
 801327e:	bf00      	nop
 8013280:	200021d0 	.word	0x200021d0
 8013284:	20002238 	.word	0x20002238
 8013288:	200022a0 	.word	0x200022a0

0801328c <global_stdio_init.part.0>:
 801328c:	b510      	push	{r4, lr}
 801328e:	4b0b      	ldr	r3, [pc, #44]	@ (80132bc <global_stdio_init.part.0+0x30>)
 8013290:	4c0b      	ldr	r4, [pc, #44]	@ (80132c0 <global_stdio_init.part.0+0x34>)
 8013292:	4a0c      	ldr	r2, [pc, #48]	@ (80132c4 <global_stdio_init.part.0+0x38>)
 8013294:	601a      	str	r2, [r3, #0]
 8013296:	4620      	mov	r0, r4
 8013298:	2200      	movs	r2, #0
 801329a:	2104      	movs	r1, #4
 801329c:	f7ff ff94 	bl	80131c8 <std>
 80132a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80132a4:	2201      	movs	r2, #1
 80132a6:	2109      	movs	r1, #9
 80132a8:	f7ff ff8e 	bl	80131c8 <std>
 80132ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80132b0:	2202      	movs	r2, #2
 80132b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80132b6:	2112      	movs	r1, #18
 80132b8:	f7ff bf86 	b.w	80131c8 <std>
 80132bc:	20002308 	.word	0x20002308
 80132c0:	200021d0 	.word	0x200021d0
 80132c4:	08013235 	.word	0x08013235

080132c8 <__sfp_lock_acquire>:
 80132c8:	4801      	ldr	r0, [pc, #4]	@ (80132d0 <__sfp_lock_acquire+0x8>)
 80132ca:	f000 b91a 	b.w	8013502 <__retarget_lock_acquire_recursive>
 80132ce:	bf00      	nop
 80132d0:	20002311 	.word	0x20002311

080132d4 <__sfp_lock_release>:
 80132d4:	4801      	ldr	r0, [pc, #4]	@ (80132dc <__sfp_lock_release+0x8>)
 80132d6:	f000 b915 	b.w	8013504 <__retarget_lock_release_recursive>
 80132da:	bf00      	nop
 80132dc:	20002311 	.word	0x20002311

080132e0 <__sinit>:
 80132e0:	b510      	push	{r4, lr}
 80132e2:	4604      	mov	r4, r0
 80132e4:	f7ff fff0 	bl	80132c8 <__sfp_lock_acquire>
 80132e8:	6a23      	ldr	r3, [r4, #32]
 80132ea:	b11b      	cbz	r3, 80132f4 <__sinit+0x14>
 80132ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80132f0:	f7ff bff0 	b.w	80132d4 <__sfp_lock_release>
 80132f4:	4b04      	ldr	r3, [pc, #16]	@ (8013308 <__sinit+0x28>)
 80132f6:	6223      	str	r3, [r4, #32]
 80132f8:	4b04      	ldr	r3, [pc, #16]	@ (801330c <__sinit+0x2c>)
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d1f5      	bne.n	80132ec <__sinit+0xc>
 8013300:	f7ff ffc4 	bl	801328c <global_stdio_init.part.0>
 8013304:	e7f2      	b.n	80132ec <__sinit+0xc>
 8013306:	bf00      	nop
 8013308:	0801324d 	.word	0x0801324d
 801330c:	20002308 	.word	0x20002308

08013310 <_fwalk_sglue>:
 8013310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013314:	4607      	mov	r7, r0
 8013316:	4688      	mov	r8, r1
 8013318:	4614      	mov	r4, r2
 801331a:	2600      	movs	r6, #0
 801331c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013320:	f1b9 0901 	subs.w	r9, r9, #1
 8013324:	d505      	bpl.n	8013332 <_fwalk_sglue+0x22>
 8013326:	6824      	ldr	r4, [r4, #0]
 8013328:	2c00      	cmp	r4, #0
 801332a:	d1f7      	bne.n	801331c <_fwalk_sglue+0xc>
 801332c:	4630      	mov	r0, r6
 801332e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013332:	89ab      	ldrh	r3, [r5, #12]
 8013334:	2b01      	cmp	r3, #1
 8013336:	d907      	bls.n	8013348 <_fwalk_sglue+0x38>
 8013338:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801333c:	3301      	adds	r3, #1
 801333e:	d003      	beq.n	8013348 <_fwalk_sglue+0x38>
 8013340:	4629      	mov	r1, r5
 8013342:	4638      	mov	r0, r7
 8013344:	47c0      	blx	r8
 8013346:	4306      	orrs	r6, r0
 8013348:	3568      	adds	r5, #104	@ 0x68
 801334a:	e7e9      	b.n	8013320 <_fwalk_sglue+0x10>

0801334c <iprintf>:
 801334c:	b40f      	push	{r0, r1, r2, r3}
 801334e:	b507      	push	{r0, r1, r2, lr}
 8013350:	4906      	ldr	r1, [pc, #24]	@ (801336c <iprintf+0x20>)
 8013352:	ab04      	add	r3, sp, #16
 8013354:	6808      	ldr	r0, [r1, #0]
 8013356:	f853 2b04 	ldr.w	r2, [r3], #4
 801335a:	6881      	ldr	r1, [r0, #8]
 801335c:	9301      	str	r3, [sp, #4]
 801335e:	f001 fbdb 	bl	8014b18 <_vfiprintf_r>
 8013362:	b003      	add	sp, #12
 8013364:	f85d eb04 	ldr.w	lr, [sp], #4
 8013368:	b004      	add	sp, #16
 801336a:	4770      	bx	lr
 801336c:	20000138 	.word	0x20000138

08013370 <putchar>:
 8013370:	4b02      	ldr	r3, [pc, #8]	@ (801337c <putchar+0xc>)
 8013372:	4601      	mov	r1, r0
 8013374:	6818      	ldr	r0, [r3, #0]
 8013376:	6882      	ldr	r2, [r0, #8]
 8013378:	f001 bd92 	b.w	8014ea0 <_putc_r>
 801337c:	20000138 	.word	0x20000138

08013380 <__sread>:
 8013380:	b510      	push	{r4, lr}
 8013382:	460c      	mov	r4, r1
 8013384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013388:	f000 f86c 	bl	8013464 <_read_r>
 801338c:	2800      	cmp	r0, #0
 801338e:	bfab      	itete	ge
 8013390:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013392:	89a3      	ldrhlt	r3, [r4, #12]
 8013394:	181b      	addge	r3, r3, r0
 8013396:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801339a:	bfac      	ite	ge
 801339c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801339e:	81a3      	strhlt	r3, [r4, #12]
 80133a0:	bd10      	pop	{r4, pc}

080133a2 <__swrite>:
 80133a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133a6:	461f      	mov	r7, r3
 80133a8:	898b      	ldrh	r3, [r1, #12]
 80133aa:	05db      	lsls	r3, r3, #23
 80133ac:	4605      	mov	r5, r0
 80133ae:	460c      	mov	r4, r1
 80133b0:	4616      	mov	r6, r2
 80133b2:	d505      	bpl.n	80133c0 <__swrite+0x1e>
 80133b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133b8:	2302      	movs	r3, #2
 80133ba:	2200      	movs	r2, #0
 80133bc:	f000 f840 	bl	8013440 <_lseek_r>
 80133c0:	89a3      	ldrh	r3, [r4, #12]
 80133c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80133c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80133ca:	81a3      	strh	r3, [r4, #12]
 80133cc:	4632      	mov	r2, r6
 80133ce:	463b      	mov	r3, r7
 80133d0:	4628      	mov	r0, r5
 80133d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80133d6:	f000 b857 	b.w	8013488 <_write_r>

080133da <__sseek>:
 80133da:	b510      	push	{r4, lr}
 80133dc:	460c      	mov	r4, r1
 80133de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133e2:	f000 f82d 	bl	8013440 <_lseek_r>
 80133e6:	1c43      	adds	r3, r0, #1
 80133e8:	89a3      	ldrh	r3, [r4, #12]
 80133ea:	bf15      	itete	ne
 80133ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80133ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80133f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80133f6:	81a3      	strheq	r3, [r4, #12]
 80133f8:	bf18      	it	ne
 80133fa:	81a3      	strhne	r3, [r4, #12]
 80133fc:	bd10      	pop	{r4, pc}

080133fe <__sclose>:
 80133fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013402:	f000 b80d 	b.w	8013420 <_close_r>

08013406 <memset>:
 8013406:	4402      	add	r2, r0
 8013408:	4603      	mov	r3, r0
 801340a:	4293      	cmp	r3, r2
 801340c:	d100      	bne.n	8013410 <memset+0xa>
 801340e:	4770      	bx	lr
 8013410:	f803 1b01 	strb.w	r1, [r3], #1
 8013414:	e7f9      	b.n	801340a <memset+0x4>
	...

08013418 <_localeconv_r>:
 8013418:	4800      	ldr	r0, [pc, #0]	@ (801341c <_localeconv_r+0x4>)
 801341a:	4770      	bx	lr
 801341c:	20000278 	.word	0x20000278

08013420 <_close_r>:
 8013420:	b538      	push	{r3, r4, r5, lr}
 8013422:	4d06      	ldr	r5, [pc, #24]	@ (801343c <_close_r+0x1c>)
 8013424:	2300      	movs	r3, #0
 8013426:	4604      	mov	r4, r0
 8013428:	4608      	mov	r0, r1
 801342a:	602b      	str	r3, [r5, #0]
 801342c:	f7f1 fe56 	bl	80050dc <_close>
 8013430:	1c43      	adds	r3, r0, #1
 8013432:	d102      	bne.n	801343a <_close_r+0x1a>
 8013434:	682b      	ldr	r3, [r5, #0]
 8013436:	b103      	cbz	r3, 801343a <_close_r+0x1a>
 8013438:	6023      	str	r3, [r4, #0]
 801343a:	bd38      	pop	{r3, r4, r5, pc}
 801343c:	2000230c 	.word	0x2000230c

08013440 <_lseek_r>:
 8013440:	b538      	push	{r3, r4, r5, lr}
 8013442:	4d07      	ldr	r5, [pc, #28]	@ (8013460 <_lseek_r+0x20>)
 8013444:	4604      	mov	r4, r0
 8013446:	4608      	mov	r0, r1
 8013448:	4611      	mov	r1, r2
 801344a:	2200      	movs	r2, #0
 801344c:	602a      	str	r2, [r5, #0]
 801344e:	461a      	mov	r2, r3
 8013450:	f7f1 fe6b 	bl	800512a <_lseek>
 8013454:	1c43      	adds	r3, r0, #1
 8013456:	d102      	bne.n	801345e <_lseek_r+0x1e>
 8013458:	682b      	ldr	r3, [r5, #0]
 801345a:	b103      	cbz	r3, 801345e <_lseek_r+0x1e>
 801345c:	6023      	str	r3, [r4, #0]
 801345e:	bd38      	pop	{r3, r4, r5, pc}
 8013460:	2000230c 	.word	0x2000230c

08013464 <_read_r>:
 8013464:	b538      	push	{r3, r4, r5, lr}
 8013466:	4d07      	ldr	r5, [pc, #28]	@ (8013484 <_read_r+0x20>)
 8013468:	4604      	mov	r4, r0
 801346a:	4608      	mov	r0, r1
 801346c:	4611      	mov	r1, r2
 801346e:	2200      	movs	r2, #0
 8013470:	602a      	str	r2, [r5, #0]
 8013472:	461a      	mov	r2, r3
 8013474:	f7f1 fdf9 	bl	800506a <_read>
 8013478:	1c43      	adds	r3, r0, #1
 801347a:	d102      	bne.n	8013482 <_read_r+0x1e>
 801347c:	682b      	ldr	r3, [r5, #0]
 801347e:	b103      	cbz	r3, 8013482 <_read_r+0x1e>
 8013480:	6023      	str	r3, [r4, #0]
 8013482:	bd38      	pop	{r3, r4, r5, pc}
 8013484:	2000230c 	.word	0x2000230c

08013488 <_write_r>:
 8013488:	b538      	push	{r3, r4, r5, lr}
 801348a:	4d07      	ldr	r5, [pc, #28]	@ (80134a8 <_write_r+0x20>)
 801348c:	4604      	mov	r4, r0
 801348e:	4608      	mov	r0, r1
 8013490:	4611      	mov	r1, r2
 8013492:	2200      	movs	r2, #0
 8013494:	602a      	str	r2, [r5, #0]
 8013496:	461a      	mov	r2, r3
 8013498:	f7f1 fe04 	bl	80050a4 <_write>
 801349c:	1c43      	adds	r3, r0, #1
 801349e:	d102      	bne.n	80134a6 <_write_r+0x1e>
 80134a0:	682b      	ldr	r3, [r5, #0]
 80134a2:	b103      	cbz	r3, 80134a6 <_write_r+0x1e>
 80134a4:	6023      	str	r3, [r4, #0]
 80134a6:	bd38      	pop	{r3, r4, r5, pc}
 80134a8:	2000230c 	.word	0x2000230c

080134ac <__errno>:
 80134ac:	4b01      	ldr	r3, [pc, #4]	@ (80134b4 <__errno+0x8>)
 80134ae:	6818      	ldr	r0, [r3, #0]
 80134b0:	4770      	bx	lr
 80134b2:	bf00      	nop
 80134b4:	20000138 	.word	0x20000138

080134b8 <__libc_init_array>:
 80134b8:	b570      	push	{r4, r5, r6, lr}
 80134ba:	4d0d      	ldr	r5, [pc, #52]	@ (80134f0 <__libc_init_array+0x38>)
 80134bc:	4c0d      	ldr	r4, [pc, #52]	@ (80134f4 <__libc_init_array+0x3c>)
 80134be:	1b64      	subs	r4, r4, r5
 80134c0:	10a4      	asrs	r4, r4, #2
 80134c2:	2600      	movs	r6, #0
 80134c4:	42a6      	cmp	r6, r4
 80134c6:	d109      	bne.n	80134dc <__libc_init_array+0x24>
 80134c8:	4d0b      	ldr	r5, [pc, #44]	@ (80134f8 <__libc_init_array+0x40>)
 80134ca:	4c0c      	ldr	r4, [pc, #48]	@ (80134fc <__libc_init_array+0x44>)
 80134cc:	f001 fef4 	bl	80152b8 <_init>
 80134d0:	1b64      	subs	r4, r4, r5
 80134d2:	10a4      	asrs	r4, r4, #2
 80134d4:	2600      	movs	r6, #0
 80134d6:	42a6      	cmp	r6, r4
 80134d8:	d105      	bne.n	80134e6 <__libc_init_array+0x2e>
 80134da:	bd70      	pop	{r4, r5, r6, pc}
 80134dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80134e0:	4798      	blx	r3
 80134e2:	3601      	adds	r6, #1
 80134e4:	e7ee      	b.n	80134c4 <__libc_init_array+0xc>
 80134e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80134ea:	4798      	blx	r3
 80134ec:	3601      	adds	r6, #1
 80134ee:	e7f2      	b.n	80134d6 <__libc_init_array+0x1e>
 80134f0:	080157d8 	.word	0x080157d8
 80134f4:	080157d8 	.word	0x080157d8
 80134f8:	080157d8 	.word	0x080157d8
 80134fc:	080157dc 	.word	0x080157dc

08013500 <__retarget_lock_init_recursive>:
 8013500:	4770      	bx	lr

08013502 <__retarget_lock_acquire_recursive>:
 8013502:	4770      	bx	lr

08013504 <__retarget_lock_release_recursive>:
 8013504:	4770      	bx	lr

08013506 <memcpy>:
 8013506:	440a      	add	r2, r1
 8013508:	4291      	cmp	r1, r2
 801350a:	f100 33ff 	add.w	r3, r0, #4294967295
 801350e:	d100      	bne.n	8013512 <memcpy+0xc>
 8013510:	4770      	bx	lr
 8013512:	b510      	push	{r4, lr}
 8013514:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013518:	f803 4f01 	strb.w	r4, [r3, #1]!
 801351c:	4291      	cmp	r1, r2
 801351e:	d1f9      	bne.n	8013514 <memcpy+0xe>
 8013520:	bd10      	pop	{r4, pc}

08013522 <quorem>:
 8013522:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013526:	6903      	ldr	r3, [r0, #16]
 8013528:	690c      	ldr	r4, [r1, #16]
 801352a:	42a3      	cmp	r3, r4
 801352c:	4607      	mov	r7, r0
 801352e:	db7e      	blt.n	801362e <quorem+0x10c>
 8013530:	3c01      	subs	r4, #1
 8013532:	f101 0814 	add.w	r8, r1, #20
 8013536:	00a3      	lsls	r3, r4, #2
 8013538:	f100 0514 	add.w	r5, r0, #20
 801353c:	9300      	str	r3, [sp, #0]
 801353e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013542:	9301      	str	r3, [sp, #4]
 8013544:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013548:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801354c:	3301      	adds	r3, #1
 801354e:	429a      	cmp	r2, r3
 8013550:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013554:	fbb2 f6f3 	udiv	r6, r2, r3
 8013558:	d32e      	bcc.n	80135b8 <quorem+0x96>
 801355a:	f04f 0a00 	mov.w	sl, #0
 801355e:	46c4      	mov	ip, r8
 8013560:	46ae      	mov	lr, r5
 8013562:	46d3      	mov	fp, sl
 8013564:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013568:	b298      	uxth	r0, r3
 801356a:	fb06 a000 	mla	r0, r6, r0, sl
 801356e:	0c02      	lsrs	r2, r0, #16
 8013570:	0c1b      	lsrs	r3, r3, #16
 8013572:	fb06 2303 	mla	r3, r6, r3, r2
 8013576:	f8de 2000 	ldr.w	r2, [lr]
 801357a:	b280      	uxth	r0, r0
 801357c:	b292      	uxth	r2, r2
 801357e:	1a12      	subs	r2, r2, r0
 8013580:	445a      	add	r2, fp
 8013582:	f8de 0000 	ldr.w	r0, [lr]
 8013586:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801358a:	b29b      	uxth	r3, r3
 801358c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8013590:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8013594:	b292      	uxth	r2, r2
 8013596:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801359a:	45e1      	cmp	r9, ip
 801359c:	f84e 2b04 	str.w	r2, [lr], #4
 80135a0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80135a4:	d2de      	bcs.n	8013564 <quorem+0x42>
 80135a6:	9b00      	ldr	r3, [sp, #0]
 80135a8:	58eb      	ldr	r3, [r5, r3]
 80135aa:	b92b      	cbnz	r3, 80135b8 <quorem+0x96>
 80135ac:	9b01      	ldr	r3, [sp, #4]
 80135ae:	3b04      	subs	r3, #4
 80135b0:	429d      	cmp	r5, r3
 80135b2:	461a      	mov	r2, r3
 80135b4:	d32f      	bcc.n	8013616 <quorem+0xf4>
 80135b6:	613c      	str	r4, [r7, #16]
 80135b8:	4638      	mov	r0, r7
 80135ba:	f001 f97b 	bl	80148b4 <__mcmp>
 80135be:	2800      	cmp	r0, #0
 80135c0:	db25      	blt.n	801360e <quorem+0xec>
 80135c2:	4629      	mov	r1, r5
 80135c4:	2000      	movs	r0, #0
 80135c6:	f858 2b04 	ldr.w	r2, [r8], #4
 80135ca:	f8d1 c000 	ldr.w	ip, [r1]
 80135ce:	fa1f fe82 	uxth.w	lr, r2
 80135d2:	fa1f f38c 	uxth.w	r3, ip
 80135d6:	eba3 030e 	sub.w	r3, r3, lr
 80135da:	4403      	add	r3, r0
 80135dc:	0c12      	lsrs	r2, r2, #16
 80135de:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80135e2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80135e6:	b29b      	uxth	r3, r3
 80135e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80135ec:	45c1      	cmp	r9, r8
 80135ee:	f841 3b04 	str.w	r3, [r1], #4
 80135f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80135f6:	d2e6      	bcs.n	80135c6 <quorem+0xa4>
 80135f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80135fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013600:	b922      	cbnz	r2, 801360c <quorem+0xea>
 8013602:	3b04      	subs	r3, #4
 8013604:	429d      	cmp	r5, r3
 8013606:	461a      	mov	r2, r3
 8013608:	d30b      	bcc.n	8013622 <quorem+0x100>
 801360a:	613c      	str	r4, [r7, #16]
 801360c:	3601      	adds	r6, #1
 801360e:	4630      	mov	r0, r6
 8013610:	b003      	add	sp, #12
 8013612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013616:	6812      	ldr	r2, [r2, #0]
 8013618:	3b04      	subs	r3, #4
 801361a:	2a00      	cmp	r2, #0
 801361c:	d1cb      	bne.n	80135b6 <quorem+0x94>
 801361e:	3c01      	subs	r4, #1
 8013620:	e7c6      	b.n	80135b0 <quorem+0x8e>
 8013622:	6812      	ldr	r2, [r2, #0]
 8013624:	3b04      	subs	r3, #4
 8013626:	2a00      	cmp	r2, #0
 8013628:	d1ef      	bne.n	801360a <quorem+0xe8>
 801362a:	3c01      	subs	r4, #1
 801362c:	e7ea      	b.n	8013604 <quorem+0xe2>
 801362e:	2000      	movs	r0, #0
 8013630:	e7ee      	b.n	8013610 <quorem+0xee>
 8013632:	0000      	movs	r0, r0
 8013634:	0000      	movs	r0, r0
	...

08013638 <_dtoa_r>:
 8013638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801363c:	69c7      	ldr	r7, [r0, #28]
 801363e:	b099      	sub	sp, #100	@ 0x64
 8013640:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013644:	ec55 4b10 	vmov	r4, r5, d0
 8013648:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801364a:	9109      	str	r1, [sp, #36]	@ 0x24
 801364c:	4683      	mov	fp, r0
 801364e:	920e      	str	r2, [sp, #56]	@ 0x38
 8013650:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013652:	b97f      	cbnz	r7, 8013674 <_dtoa_r+0x3c>
 8013654:	2010      	movs	r0, #16
 8013656:	f000 fdfd 	bl	8014254 <malloc>
 801365a:	4602      	mov	r2, r0
 801365c:	f8cb 001c 	str.w	r0, [fp, #28]
 8013660:	b920      	cbnz	r0, 801366c <_dtoa_r+0x34>
 8013662:	4ba7      	ldr	r3, [pc, #668]	@ (8013900 <_dtoa_r+0x2c8>)
 8013664:	21ef      	movs	r1, #239	@ 0xef
 8013666:	48a7      	ldr	r0, [pc, #668]	@ (8013904 <_dtoa_r+0x2cc>)
 8013668:	f001 fcf2 	bl	8015050 <__assert_func>
 801366c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8013670:	6007      	str	r7, [r0, #0]
 8013672:	60c7      	str	r7, [r0, #12]
 8013674:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013678:	6819      	ldr	r1, [r3, #0]
 801367a:	b159      	cbz	r1, 8013694 <_dtoa_r+0x5c>
 801367c:	685a      	ldr	r2, [r3, #4]
 801367e:	604a      	str	r2, [r1, #4]
 8013680:	2301      	movs	r3, #1
 8013682:	4093      	lsls	r3, r2
 8013684:	608b      	str	r3, [r1, #8]
 8013686:	4658      	mov	r0, fp
 8013688:	f000 feda 	bl	8014440 <_Bfree>
 801368c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013690:	2200      	movs	r2, #0
 8013692:	601a      	str	r2, [r3, #0]
 8013694:	1e2b      	subs	r3, r5, #0
 8013696:	bfb9      	ittee	lt
 8013698:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801369c:	9303      	strlt	r3, [sp, #12]
 801369e:	2300      	movge	r3, #0
 80136a0:	6033      	strge	r3, [r6, #0]
 80136a2:	9f03      	ldr	r7, [sp, #12]
 80136a4:	4b98      	ldr	r3, [pc, #608]	@ (8013908 <_dtoa_r+0x2d0>)
 80136a6:	bfbc      	itt	lt
 80136a8:	2201      	movlt	r2, #1
 80136aa:	6032      	strlt	r2, [r6, #0]
 80136ac:	43bb      	bics	r3, r7
 80136ae:	d112      	bne.n	80136d6 <_dtoa_r+0x9e>
 80136b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80136b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80136b6:	6013      	str	r3, [r2, #0]
 80136b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80136bc:	4323      	orrs	r3, r4
 80136be:	f000 854d 	beq.w	801415c <_dtoa_r+0xb24>
 80136c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80136c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801391c <_dtoa_r+0x2e4>
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	f000 854f 	beq.w	801416c <_dtoa_r+0xb34>
 80136ce:	f10a 0303 	add.w	r3, sl, #3
 80136d2:	f000 bd49 	b.w	8014168 <_dtoa_r+0xb30>
 80136d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80136da:	2200      	movs	r2, #0
 80136dc:	ec51 0b17 	vmov	r0, r1, d7
 80136e0:	2300      	movs	r3, #0
 80136e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80136e6:	f7ed f9c7 	bl	8000a78 <__aeabi_dcmpeq>
 80136ea:	4680      	mov	r8, r0
 80136ec:	b158      	cbz	r0, 8013706 <_dtoa_r+0xce>
 80136ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80136f0:	2301      	movs	r3, #1
 80136f2:	6013      	str	r3, [r2, #0]
 80136f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80136f6:	b113      	cbz	r3, 80136fe <_dtoa_r+0xc6>
 80136f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80136fa:	4b84      	ldr	r3, [pc, #528]	@ (801390c <_dtoa_r+0x2d4>)
 80136fc:	6013      	str	r3, [r2, #0]
 80136fe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8013920 <_dtoa_r+0x2e8>
 8013702:	f000 bd33 	b.w	801416c <_dtoa_r+0xb34>
 8013706:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801370a:	aa16      	add	r2, sp, #88	@ 0x58
 801370c:	a917      	add	r1, sp, #92	@ 0x5c
 801370e:	4658      	mov	r0, fp
 8013710:	f001 f980 	bl	8014a14 <__d2b>
 8013714:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8013718:	4681      	mov	r9, r0
 801371a:	2e00      	cmp	r6, #0
 801371c:	d077      	beq.n	801380e <_dtoa_r+0x1d6>
 801371e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013720:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8013724:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013728:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801372c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8013730:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8013734:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8013738:	4619      	mov	r1, r3
 801373a:	2200      	movs	r2, #0
 801373c:	4b74      	ldr	r3, [pc, #464]	@ (8013910 <_dtoa_r+0x2d8>)
 801373e:	f7ec fd7b 	bl	8000238 <__aeabi_dsub>
 8013742:	a369      	add	r3, pc, #420	@ (adr r3, 80138e8 <_dtoa_r+0x2b0>)
 8013744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013748:	f7ec ff2e 	bl	80005a8 <__aeabi_dmul>
 801374c:	a368      	add	r3, pc, #416	@ (adr r3, 80138f0 <_dtoa_r+0x2b8>)
 801374e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013752:	f7ec fd73 	bl	800023c <__adddf3>
 8013756:	4604      	mov	r4, r0
 8013758:	4630      	mov	r0, r6
 801375a:	460d      	mov	r5, r1
 801375c:	f7ec feba 	bl	80004d4 <__aeabi_i2d>
 8013760:	a365      	add	r3, pc, #404	@ (adr r3, 80138f8 <_dtoa_r+0x2c0>)
 8013762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013766:	f7ec ff1f 	bl	80005a8 <__aeabi_dmul>
 801376a:	4602      	mov	r2, r0
 801376c:	460b      	mov	r3, r1
 801376e:	4620      	mov	r0, r4
 8013770:	4629      	mov	r1, r5
 8013772:	f7ec fd63 	bl	800023c <__adddf3>
 8013776:	4604      	mov	r4, r0
 8013778:	460d      	mov	r5, r1
 801377a:	f7ed f9c5 	bl	8000b08 <__aeabi_d2iz>
 801377e:	2200      	movs	r2, #0
 8013780:	4607      	mov	r7, r0
 8013782:	2300      	movs	r3, #0
 8013784:	4620      	mov	r0, r4
 8013786:	4629      	mov	r1, r5
 8013788:	f7ed f980 	bl	8000a8c <__aeabi_dcmplt>
 801378c:	b140      	cbz	r0, 80137a0 <_dtoa_r+0x168>
 801378e:	4638      	mov	r0, r7
 8013790:	f7ec fea0 	bl	80004d4 <__aeabi_i2d>
 8013794:	4622      	mov	r2, r4
 8013796:	462b      	mov	r3, r5
 8013798:	f7ed f96e 	bl	8000a78 <__aeabi_dcmpeq>
 801379c:	b900      	cbnz	r0, 80137a0 <_dtoa_r+0x168>
 801379e:	3f01      	subs	r7, #1
 80137a0:	2f16      	cmp	r7, #22
 80137a2:	d851      	bhi.n	8013848 <_dtoa_r+0x210>
 80137a4:	4b5b      	ldr	r3, [pc, #364]	@ (8013914 <_dtoa_r+0x2dc>)
 80137a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80137aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80137b2:	f7ed f96b 	bl	8000a8c <__aeabi_dcmplt>
 80137b6:	2800      	cmp	r0, #0
 80137b8:	d048      	beq.n	801384c <_dtoa_r+0x214>
 80137ba:	3f01      	subs	r7, #1
 80137bc:	2300      	movs	r3, #0
 80137be:	9312      	str	r3, [sp, #72]	@ 0x48
 80137c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80137c2:	1b9b      	subs	r3, r3, r6
 80137c4:	1e5a      	subs	r2, r3, #1
 80137c6:	bf44      	itt	mi
 80137c8:	f1c3 0801 	rsbmi	r8, r3, #1
 80137cc:	2300      	movmi	r3, #0
 80137ce:	9208      	str	r2, [sp, #32]
 80137d0:	bf54      	ite	pl
 80137d2:	f04f 0800 	movpl.w	r8, #0
 80137d6:	9308      	strmi	r3, [sp, #32]
 80137d8:	2f00      	cmp	r7, #0
 80137da:	db39      	blt.n	8013850 <_dtoa_r+0x218>
 80137dc:	9b08      	ldr	r3, [sp, #32]
 80137de:	970f      	str	r7, [sp, #60]	@ 0x3c
 80137e0:	443b      	add	r3, r7
 80137e2:	9308      	str	r3, [sp, #32]
 80137e4:	2300      	movs	r3, #0
 80137e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80137e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80137ea:	2b09      	cmp	r3, #9
 80137ec:	d864      	bhi.n	80138b8 <_dtoa_r+0x280>
 80137ee:	2b05      	cmp	r3, #5
 80137f0:	bfc4      	itt	gt
 80137f2:	3b04      	subgt	r3, #4
 80137f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80137f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80137f8:	f1a3 0302 	sub.w	r3, r3, #2
 80137fc:	bfcc      	ite	gt
 80137fe:	2400      	movgt	r4, #0
 8013800:	2401      	movle	r4, #1
 8013802:	2b03      	cmp	r3, #3
 8013804:	d863      	bhi.n	80138ce <_dtoa_r+0x296>
 8013806:	e8df f003 	tbb	[pc, r3]
 801380a:	372a      	.short	0x372a
 801380c:	5535      	.short	0x5535
 801380e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8013812:	441e      	add	r6, r3
 8013814:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8013818:	2b20      	cmp	r3, #32
 801381a:	bfc1      	itttt	gt
 801381c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8013820:	409f      	lslgt	r7, r3
 8013822:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8013826:	fa24 f303 	lsrgt.w	r3, r4, r3
 801382a:	bfd6      	itet	le
 801382c:	f1c3 0320 	rsble	r3, r3, #32
 8013830:	ea47 0003 	orrgt.w	r0, r7, r3
 8013834:	fa04 f003 	lslle.w	r0, r4, r3
 8013838:	f7ec fe3c 	bl	80004b4 <__aeabi_ui2d>
 801383c:	2201      	movs	r2, #1
 801383e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8013842:	3e01      	subs	r6, #1
 8013844:	9214      	str	r2, [sp, #80]	@ 0x50
 8013846:	e777      	b.n	8013738 <_dtoa_r+0x100>
 8013848:	2301      	movs	r3, #1
 801384a:	e7b8      	b.n	80137be <_dtoa_r+0x186>
 801384c:	9012      	str	r0, [sp, #72]	@ 0x48
 801384e:	e7b7      	b.n	80137c0 <_dtoa_r+0x188>
 8013850:	427b      	negs	r3, r7
 8013852:	930a      	str	r3, [sp, #40]	@ 0x28
 8013854:	2300      	movs	r3, #0
 8013856:	eba8 0807 	sub.w	r8, r8, r7
 801385a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801385c:	e7c4      	b.n	80137e8 <_dtoa_r+0x1b0>
 801385e:	2300      	movs	r3, #0
 8013860:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013862:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013864:	2b00      	cmp	r3, #0
 8013866:	dc35      	bgt.n	80138d4 <_dtoa_r+0x29c>
 8013868:	2301      	movs	r3, #1
 801386a:	9300      	str	r3, [sp, #0]
 801386c:	9307      	str	r3, [sp, #28]
 801386e:	461a      	mov	r2, r3
 8013870:	920e      	str	r2, [sp, #56]	@ 0x38
 8013872:	e00b      	b.n	801388c <_dtoa_r+0x254>
 8013874:	2301      	movs	r3, #1
 8013876:	e7f3      	b.n	8013860 <_dtoa_r+0x228>
 8013878:	2300      	movs	r3, #0
 801387a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801387c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801387e:	18fb      	adds	r3, r7, r3
 8013880:	9300      	str	r3, [sp, #0]
 8013882:	3301      	adds	r3, #1
 8013884:	2b01      	cmp	r3, #1
 8013886:	9307      	str	r3, [sp, #28]
 8013888:	bfb8      	it	lt
 801388a:	2301      	movlt	r3, #1
 801388c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8013890:	2100      	movs	r1, #0
 8013892:	2204      	movs	r2, #4
 8013894:	f102 0514 	add.w	r5, r2, #20
 8013898:	429d      	cmp	r5, r3
 801389a:	d91f      	bls.n	80138dc <_dtoa_r+0x2a4>
 801389c:	6041      	str	r1, [r0, #4]
 801389e:	4658      	mov	r0, fp
 80138a0:	f000 fd8e 	bl	80143c0 <_Balloc>
 80138a4:	4682      	mov	sl, r0
 80138a6:	2800      	cmp	r0, #0
 80138a8:	d13c      	bne.n	8013924 <_dtoa_r+0x2ec>
 80138aa:	4b1b      	ldr	r3, [pc, #108]	@ (8013918 <_dtoa_r+0x2e0>)
 80138ac:	4602      	mov	r2, r0
 80138ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80138b2:	e6d8      	b.n	8013666 <_dtoa_r+0x2e>
 80138b4:	2301      	movs	r3, #1
 80138b6:	e7e0      	b.n	801387a <_dtoa_r+0x242>
 80138b8:	2401      	movs	r4, #1
 80138ba:	2300      	movs	r3, #0
 80138bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80138be:	940b      	str	r4, [sp, #44]	@ 0x2c
 80138c0:	f04f 33ff 	mov.w	r3, #4294967295
 80138c4:	9300      	str	r3, [sp, #0]
 80138c6:	9307      	str	r3, [sp, #28]
 80138c8:	2200      	movs	r2, #0
 80138ca:	2312      	movs	r3, #18
 80138cc:	e7d0      	b.n	8013870 <_dtoa_r+0x238>
 80138ce:	2301      	movs	r3, #1
 80138d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80138d2:	e7f5      	b.n	80138c0 <_dtoa_r+0x288>
 80138d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80138d6:	9300      	str	r3, [sp, #0]
 80138d8:	9307      	str	r3, [sp, #28]
 80138da:	e7d7      	b.n	801388c <_dtoa_r+0x254>
 80138dc:	3101      	adds	r1, #1
 80138de:	0052      	lsls	r2, r2, #1
 80138e0:	e7d8      	b.n	8013894 <_dtoa_r+0x25c>
 80138e2:	bf00      	nop
 80138e4:	f3af 8000 	nop.w
 80138e8:	636f4361 	.word	0x636f4361
 80138ec:	3fd287a7 	.word	0x3fd287a7
 80138f0:	8b60c8b3 	.word	0x8b60c8b3
 80138f4:	3fc68a28 	.word	0x3fc68a28
 80138f8:	509f79fb 	.word	0x509f79fb
 80138fc:	3fd34413 	.word	0x3fd34413
 8013900:	0801549d 	.word	0x0801549d
 8013904:	080154b4 	.word	0x080154b4
 8013908:	7ff00000 	.word	0x7ff00000
 801390c:	0801546d 	.word	0x0801546d
 8013910:	3ff80000 	.word	0x3ff80000
 8013914:	080155b0 	.word	0x080155b0
 8013918:	0801550c 	.word	0x0801550c
 801391c:	08015499 	.word	0x08015499
 8013920:	0801546c 	.word	0x0801546c
 8013924:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013928:	6018      	str	r0, [r3, #0]
 801392a:	9b07      	ldr	r3, [sp, #28]
 801392c:	2b0e      	cmp	r3, #14
 801392e:	f200 80a4 	bhi.w	8013a7a <_dtoa_r+0x442>
 8013932:	2c00      	cmp	r4, #0
 8013934:	f000 80a1 	beq.w	8013a7a <_dtoa_r+0x442>
 8013938:	2f00      	cmp	r7, #0
 801393a:	dd33      	ble.n	80139a4 <_dtoa_r+0x36c>
 801393c:	4bad      	ldr	r3, [pc, #692]	@ (8013bf4 <_dtoa_r+0x5bc>)
 801393e:	f007 020f 	and.w	r2, r7, #15
 8013942:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013946:	ed93 7b00 	vldr	d7, [r3]
 801394a:	05f8      	lsls	r0, r7, #23
 801394c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013950:	ea4f 1427 	mov.w	r4, r7, asr #4
 8013954:	d516      	bpl.n	8013984 <_dtoa_r+0x34c>
 8013956:	4ba8      	ldr	r3, [pc, #672]	@ (8013bf8 <_dtoa_r+0x5c0>)
 8013958:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801395c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013960:	f7ec ff4c 	bl	80007fc <__aeabi_ddiv>
 8013964:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013968:	f004 040f 	and.w	r4, r4, #15
 801396c:	2603      	movs	r6, #3
 801396e:	4da2      	ldr	r5, [pc, #648]	@ (8013bf8 <_dtoa_r+0x5c0>)
 8013970:	b954      	cbnz	r4, 8013988 <_dtoa_r+0x350>
 8013972:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013976:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801397a:	f7ec ff3f 	bl	80007fc <__aeabi_ddiv>
 801397e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013982:	e028      	b.n	80139d6 <_dtoa_r+0x39e>
 8013984:	2602      	movs	r6, #2
 8013986:	e7f2      	b.n	801396e <_dtoa_r+0x336>
 8013988:	07e1      	lsls	r1, r4, #31
 801398a:	d508      	bpl.n	801399e <_dtoa_r+0x366>
 801398c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013990:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013994:	f7ec fe08 	bl	80005a8 <__aeabi_dmul>
 8013998:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801399c:	3601      	adds	r6, #1
 801399e:	1064      	asrs	r4, r4, #1
 80139a0:	3508      	adds	r5, #8
 80139a2:	e7e5      	b.n	8013970 <_dtoa_r+0x338>
 80139a4:	f000 80d2 	beq.w	8013b4c <_dtoa_r+0x514>
 80139a8:	427c      	negs	r4, r7
 80139aa:	4b92      	ldr	r3, [pc, #584]	@ (8013bf4 <_dtoa_r+0x5bc>)
 80139ac:	4d92      	ldr	r5, [pc, #584]	@ (8013bf8 <_dtoa_r+0x5c0>)
 80139ae:	f004 020f 	and.w	r2, r4, #15
 80139b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80139b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80139be:	f7ec fdf3 	bl	80005a8 <__aeabi_dmul>
 80139c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80139c6:	1124      	asrs	r4, r4, #4
 80139c8:	2300      	movs	r3, #0
 80139ca:	2602      	movs	r6, #2
 80139cc:	2c00      	cmp	r4, #0
 80139ce:	f040 80b2 	bne.w	8013b36 <_dtoa_r+0x4fe>
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d1d3      	bne.n	801397e <_dtoa_r+0x346>
 80139d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80139d8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80139dc:	2b00      	cmp	r3, #0
 80139de:	f000 80b7 	beq.w	8013b50 <_dtoa_r+0x518>
 80139e2:	4b86      	ldr	r3, [pc, #536]	@ (8013bfc <_dtoa_r+0x5c4>)
 80139e4:	2200      	movs	r2, #0
 80139e6:	4620      	mov	r0, r4
 80139e8:	4629      	mov	r1, r5
 80139ea:	f7ed f84f 	bl	8000a8c <__aeabi_dcmplt>
 80139ee:	2800      	cmp	r0, #0
 80139f0:	f000 80ae 	beq.w	8013b50 <_dtoa_r+0x518>
 80139f4:	9b07      	ldr	r3, [sp, #28]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	f000 80aa 	beq.w	8013b50 <_dtoa_r+0x518>
 80139fc:	9b00      	ldr	r3, [sp, #0]
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	dd37      	ble.n	8013a72 <_dtoa_r+0x43a>
 8013a02:	1e7b      	subs	r3, r7, #1
 8013a04:	9304      	str	r3, [sp, #16]
 8013a06:	4620      	mov	r0, r4
 8013a08:	4b7d      	ldr	r3, [pc, #500]	@ (8013c00 <_dtoa_r+0x5c8>)
 8013a0a:	2200      	movs	r2, #0
 8013a0c:	4629      	mov	r1, r5
 8013a0e:	f7ec fdcb 	bl	80005a8 <__aeabi_dmul>
 8013a12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013a16:	9c00      	ldr	r4, [sp, #0]
 8013a18:	3601      	adds	r6, #1
 8013a1a:	4630      	mov	r0, r6
 8013a1c:	f7ec fd5a 	bl	80004d4 <__aeabi_i2d>
 8013a20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013a24:	f7ec fdc0 	bl	80005a8 <__aeabi_dmul>
 8013a28:	4b76      	ldr	r3, [pc, #472]	@ (8013c04 <_dtoa_r+0x5cc>)
 8013a2a:	2200      	movs	r2, #0
 8013a2c:	f7ec fc06 	bl	800023c <__adddf3>
 8013a30:	4605      	mov	r5, r0
 8013a32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8013a36:	2c00      	cmp	r4, #0
 8013a38:	f040 808d 	bne.w	8013b56 <_dtoa_r+0x51e>
 8013a3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013a40:	4b71      	ldr	r3, [pc, #452]	@ (8013c08 <_dtoa_r+0x5d0>)
 8013a42:	2200      	movs	r2, #0
 8013a44:	f7ec fbf8 	bl	8000238 <__aeabi_dsub>
 8013a48:	4602      	mov	r2, r0
 8013a4a:	460b      	mov	r3, r1
 8013a4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013a50:	462a      	mov	r2, r5
 8013a52:	4633      	mov	r3, r6
 8013a54:	f7ed f838 	bl	8000ac8 <__aeabi_dcmpgt>
 8013a58:	2800      	cmp	r0, #0
 8013a5a:	f040 828b 	bne.w	8013f74 <_dtoa_r+0x93c>
 8013a5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013a62:	462a      	mov	r2, r5
 8013a64:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8013a68:	f7ed f810 	bl	8000a8c <__aeabi_dcmplt>
 8013a6c:	2800      	cmp	r0, #0
 8013a6e:	f040 8128 	bne.w	8013cc2 <_dtoa_r+0x68a>
 8013a72:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8013a76:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8013a7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	f2c0 815a 	blt.w	8013d36 <_dtoa_r+0x6fe>
 8013a82:	2f0e      	cmp	r7, #14
 8013a84:	f300 8157 	bgt.w	8013d36 <_dtoa_r+0x6fe>
 8013a88:	4b5a      	ldr	r3, [pc, #360]	@ (8013bf4 <_dtoa_r+0x5bc>)
 8013a8a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013a8e:	ed93 7b00 	vldr	d7, [r3]
 8013a92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	ed8d 7b00 	vstr	d7, [sp]
 8013a9a:	da03      	bge.n	8013aa4 <_dtoa_r+0x46c>
 8013a9c:	9b07      	ldr	r3, [sp, #28]
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	f340 8101 	ble.w	8013ca6 <_dtoa_r+0x66e>
 8013aa4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8013aa8:	4656      	mov	r6, sl
 8013aaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013aae:	4620      	mov	r0, r4
 8013ab0:	4629      	mov	r1, r5
 8013ab2:	f7ec fea3 	bl	80007fc <__aeabi_ddiv>
 8013ab6:	f7ed f827 	bl	8000b08 <__aeabi_d2iz>
 8013aba:	4680      	mov	r8, r0
 8013abc:	f7ec fd0a 	bl	80004d4 <__aeabi_i2d>
 8013ac0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013ac4:	f7ec fd70 	bl	80005a8 <__aeabi_dmul>
 8013ac8:	4602      	mov	r2, r0
 8013aca:	460b      	mov	r3, r1
 8013acc:	4620      	mov	r0, r4
 8013ace:	4629      	mov	r1, r5
 8013ad0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8013ad4:	f7ec fbb0 	bl	8000238 <__aeabi_dsub>
 8013ad8:	f806 4b01 	strb.w	r4, [r6], #1
 8013adc:	9d07      	ldr	r5, [sp, #28]
 8013ade:	eba6 040a 	sub.w	r4, r6, sl
 8013ae2:	42a5      	cmp	r5, r4
 8013ae4:	4602      	mov	r2, r0
 8013ae6:	460b      	mov	r3, r1
 8013ae8:	f040 8117 	bne.w	8013d1a <_dtoa_r+0x6e2>
 8013aec:	f7ec fba6 	bl	800023c <__adddf3>
 8013af0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013af4:	4604      	mov	r4, r0
 8013af6:	460d      	mov	r5, r1
 8013af8:	f7ec ffe6 	bl	8000ac8 <__aeabi_dcmpgt>
 8013afc:	2800      	cmp	r0, #0
 8013afe:	f040 80f9 	bne.w	8013cf4 <_dtoa_r+0x6bc>
 8013b02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013b06:	4620      	mov	r0, r4
 8013b08:	4629      	mov	r1, r5
 8013b0a:	f7ec ffb5 	bl	8000a78 <__aeabi_dcmpeq>
 8013b0e:	b118      	cbz	r0, 8013b18 <_dtoa_r+0x4e0>
 8013b10:	f018 0f01 	tst.w	r8, #1
 8013b14:	f040 80ee 	bne.w	8013cf4 <_dtoa_r+0x6bc>
 8013b18:	4649      	mov	r1, r9
 8013b1a:	4658      	mov	r0, fp
 8013b1c:	f000 fc90 	bl	8014440 <_Bfree>
 8013b20:	2300      	movs	r3, #0
 8013b22:	7033      	strb	r3, [r6, #0]
 8013b24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013b26:	3701      	adds	r7, #1
 8013b28:	601f      	str	r7, [r3, #0]
 8013b2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	f000 831d 	beq.w	801416c <_dtoa_r+0xb34>
 8013b32:	601e      	str	r6, [r3, #0]
 8013b34:	e31a      	b.n	801416c <_dtoa_r+0xb34>
 8013b36:	07e2      	lsls	r2, r4, #31
 8013b38:	d505      	bpl.n	8013b46 <_dtoa_r+0x50e>
 8013b3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013b3e:	f7ec fd33 	bl	80005a8 <__aeabi_dmul>
 8013b42:	3601      	adds	r6, #1
 8013b44:	2301      	movs	r3, #1
 8013b46:	1064      	asrs	r4, r4, #1
 8013b48:	3508      	adds	r5, #8
 8013b4a:	e73f      	b.n	80139cc <_dtoa_r+0x394>
 8013b4c:	2602      	movs	r6, #2
 8013b4e:	e742      	b.n	80139d6 <_dtoa_r+0x39e>
 8013b50:	9c07      	ldr	r4, [sp, #28]
 8013b52:	9704      	str	r7, [sp, #16]
 8013b54:	e761      	b.n	8013a1a <_dtoa_r+0x3e2>
 8013b56:	4b27      	ldr	r3, [pc, #156]	@ (8013bf4 <_dtoa_r+0x5bc>)
 8013b58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013b5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013b5e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013b62:	4454      	add	r4, sl
 8013b64:	2900      	cmp	r1, #0
 8013b66:	d053      	beq.n	8013c10 <_dtoa_r+0x5d8>
 8013b68:	4928      	ldr	r1, [pc, #160]	@ (8013c0c <_dtoa_r+0x5d4>)
 8013b6a:	2000      	movs	r0, #0
 8013b6c:	f7ec fe46 	bl	80007fc <__aeabi_ddiv>
 8013b70:	4633      	mov	r3, r6
 8013b72:	462a      	mov	r2, r5
 8013b74:	f7ec fb60 	bl	8000238 <__aeabi_dsub>
 8013b78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013b7c:	4656      	mov	r6, sl
 8013b7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013b82:	f7ec ffc1 	bl	8000b08 <__aeabi_d2iz>
 8013b86:	4605      	mov	r5, r0
 8013b88:	f7ec fca4 	bl	80004d4 <__aeabi_i2d>
 8013b8c:	4602      	mov	r2, r0
 8013b8e:	460b      	mov	r3, r1
 8013b90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013b94:	f7ec fb50 	bl	8000238 <__aeabi_dsub>
 8013b98:	3530      	adds	r5, #48	@ 0x30
 8013b9a:	4602      	mov	r2, r0
 8013b9c:	460b      	mov	r3, r1
 8013b9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013ba2:	f806 5b01 	strb.w	r5, [r6], #1
 8013ba6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013baa:	f7ec ff6f 	bl	8000a8c <__aeabi_dcmplt>
 8013bae:	2800      	cmp	r0, #0
 8013bb0:	d171      	bne.n	8013c96 <_dtoa_r+0x65e>
 8013bb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013bb6:	4911      	ldr	r1, [pc, #68]	@ (8013bfc <_dtoa_r+0x5c4>)
 8013bb8:	2000      	movs	r0, #0
 8013bba:	f7ec fb3d 	bl	8000238 <__aeabi_dsub>
 8013bbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013bc2:	f7ec ff63 	bl	8000a8c <__aeabi_dcmplt>
 8013bc6:	2800      	cmp	r0, #0
 8013bc8:	f040 8095 	bne.w	8013cf6 <_dtoa_r+0x6be>
 8013bcc:	42a6      	cmp	r6, r4
 8013bce:	f43f af50 	beq.w	8013a72 <_dtoa_r+0x43a>
 8013bd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8013bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8013c00 <_dtoa_r+0x5c8>)
 8013bd8:	2200      	movs	r2, #0
 8013bda:	f7ec fce5 	bl	80005a8 <__aeabi_dmul>
 8013bde:	4b08      	ldr	r3, [pc, #32]	@ (8013c00 <_dtoa_r+0x5c8>)
 8013be0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013be4:	2200      	movs	r2, #0
 8013be6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013bea:	f7ec fcdd 	bl	80005a8 <__aeabi_dmul>
 8013bee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013bf2:	e7c4      	b.n	8013b7e <_dtoa_r+0x546>
 8013bf4:	080155b0 	.word	0x080155b0
 8013bf8:	08015588 	.word	0x08015588
 8013bfc:	3ff00000 	.word	0x3ff00000
 8013c00:	40240000 	.word	0x40240000
 8013c04:	401c0000 	.word	0x401c0000
 8013c08:	40140000 	.word	0x40140000
 8013c0c:	3fe00000 	.word	0x3fe00000
 8013c10:	4631      	mov	r1, r6
 8013c12:	4628      	mov	r0, r5
 8013c14:	f7ec fcc8 	bl	80005a8 <__aeabi_dmul>
 8013c18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013c1c:	9415      	str	r4, [sp, #84]	@ 0x54
 8013c1e:	4656      	mov	r6, sl
 8013c20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013c24:	f7ec ff70 	bl	8000b08 <__aeabi_d2iz>
 8013c28:	4605      	mov	r5, r0
 8013c2a:	f7ec fc53 	bl	80004d4 <__aeabi_i2d>
 8013c2e:	4602      	mov	r2, r0
 8013c30:	460b      	mov	r3, r1
 8013c32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013c36:	f7ec faff 	bl	8000238 <__aeabi_dsub>
 8013c3a:	3530      	adds	r5, #48	@ 0x30
 8013c3c:	f806 5b01 	strb.w	r5, [r6], #1
 8013c40:	4602      	mov	r2, r0
 8013c42:	460b      	mov	r3, r1
 8013c44:	42a6      	cmp	r6, r4
 8013c46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013c4a:	f04f 0200 	mov.w	r2, #0
 8013c4e:	d124      	bne.n	8013c9a <_dtoa_r+0x662>
 8013c50:	4bac      	ldr	r3, [pc, #688]	@ (8013f04 <_dtoa_r+0x8cc>)
 8013c52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8013c56:	f7ec faf1 	bl	800023c <__adddf3>
 8013c5a:	4602      	mov	r2, r0
 8013c5c:	460b      	mov	r3, r1
 8013c5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013c62:	f7ec ff31 	bl	8000ac8 <__aeabi_dcmpgt>
 8013c66:	2800      	cmp	r0, #0
 8013c68:	d145      	bne.n	8013cf6 <_dtoa_r+0x6be>
 8013c6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013c6e:	49a5      	ldr	r1, [pc, #660]	@ (8013f04 <_dtoa_r+0x8cc>)
 8013c70:	2000      	movs	r0, #0
 8013c72:	f7ec fae1 	bl	8000238 <__aeabi_dsub>
 8013c76:	4602      	mov	r2, r0
 8013c78:	460b      	mov	r3, r1
 8013c7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013c7e:	f7ec ff05 	bl	8000a8c <__aeabi_dcmplt>
 8013c82:	2800      	cmp	r0, #0
 8013c84:	f43f aef5 	beq.w	8013a72 <_dtoa_r+0x43a>
 8013c88:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8013c8a:	1e73      	subs	r3, r6, #1
 8013c8c:	9315      	str	r3, [sp, #84]	@ 0x54
 8013c8e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013c92:	2b30      	cmp	r3, #48	@ 0x30
 8013c94:	d0f8      	beq.n	8013c88 <_dtoa_r+0x650>
 8013c96:	9f04      	ldr	r7, [sp, #16]
 8013c98:	e73e      	b.n	8013b18 <_dtoa_r+0x4e0>
 8013c9a:	4b9b      	ldr	r3, [pc, #620]	@ (8013f08 <_dtoa_r+0x8d0>)
 8013c9c:	f7ec fc84 	bl	80005a8 <__aeabi_dmul>
 8013ca0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013ca4:	e7bc      	b.n	8013c20 <_dtoa_r+0x5e8>
 8013ca6:	d10c      	bne.n	8013cc2 <_dtoa_r+0x68a>
 8013ca8:	4b98      	ldr	r3, [pc, #608]	@ (8013f0c <_dtoa_r+0x8d4>)
 8013caa:	2200      	movs	r2, #0
 8013cac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013cb0:	f7ec fc7a 	bl	80005a8 <__aeabi_dmul>
 8013cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013cb8:	f7ec fefc 	bl	8000ab4 <__aeabi_dcmpge>
 8013cbc:	2800      	cmp	r0, #0
 8013cbe:	f000 8157 	beq.w	8013f70 <_dtoa_r+0x938>
 8013cc2:	2400      	movs	r4, #0
 8013cc4:	4625      	mov	r5, r4
 8013cc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013cc8:	43db      	mvns	r3, r3
 8013cca:	9304      	str	r3, [sp, #16]
 8013ccc:	4656      	mov	r6, sl
 8013cce:	2700      	movs	r7, #0
 8013cd0:	4621      	mov	r1, r4
 8013cd2:	4658      	mov	r0, fp
 8013cd4:	f000 fbb4 	bl	8014440 <_Bfree>
 8013cd8:	2d00      	cmp	r5, #0
 8013cda:	d0dc      	beq.n	8013c96 <_dtoa_r+0x65e>
 8013cdc:	b12f      	cbz	r7, 8013cea <_dtoa_r+0x6b2>
 8013cde:	42af      	cmp	r7, r5
 8013ce0:	d003      	beq.n	8013cea <_dtoa_r+0x6b2>
 8013ce2:	4639      	mov	r1, r7
 8013ce4:	4658      	mov	r0, fp
 8013ce6:	f000 fbab 	bl	8014440 <_Bfree>
 8013cea:	4629      	mov	r1, r5
 8013cec:	4658      	mov	r0, fp
 8013cee:	f000 fba7 	bl	8014440 <_Bfree>
 8013cf2:	e7d0      	b.n	8013c96 <_dtoa_r+0x65e>
 8013cf4:	9704      	str	r7, [sp, #16]
 8013cf6:	4633      	mov	r3, r6
 8013cf8:	461e      	mov	r6, r3
 8013cfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013cfe:	2a39      	cmp	r2, #57	@ 0x39
 8013d00:	d107      	bne.n	8013d12 <_dtoa_r+0x6da>
 8013d02:	459a      	cmp	sl, r3
 8013d04:	d1f8      	bne.n	8013cf8 <_dtoa_r+0x6c0>
 8013d06:	9a04      	ldr	r2, [sp, #16]
 8013d08:	3201      	adds	r2, #1
 8013d0a:	9204      	str	r2, [sp, #16]
 8013d0c:	2230      	movs	r2, #48	@ 0x30
 8013d0e:	f88a 2000 	strb.w	r2, [sl]
 8013d12:	781a      	ldrb	r2, [r3, #0]
 8013d14:	3201      	adds	r2, #1
 8013d16:	701a      	strb	r2, [r3, #0]
 8013d18:	e7bd      	b.n	8013c96 <_dtoa_r+0x65e>
 8013d1a:	4b7b      	ldr	r3, [pc, #492]	@ (8013f08 <_dtoa_r+0x8d0>)
 8013d1c:	2200      	movs	r2, #0
 8013d1e:	f7ec fc43 	bl	80005a8 <__aeabi_dmul>
 8013d22:	2200      	movs	r2, #0
 8013d24:	2300      	movs	r3, #0
 8013d26:	4604      	mov	r4, r0
 8013d28:	460d      	mov	r5, r1
 8013d2a:	f7ec fea5 	bl	8000a78 <__aeabi_dcmpeq>
 8013d2e:	2800      	cmp	r0, #0
 8013d30:	f43f aebb 	beq.w	8013aaa <_dtoa_r+0x472>
 8013d34:	e6f0      	b.n	8013b18 <_dtoa_r+0x4e0>
 8013d36:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013d38:	2a00      	cmp	r2, #0
 8013d3a:	f000 80db 	beq.w	8013ef4 <_dtoa_r+0x8bc>
 8013d3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013d40:	2a01      	cmp	r2, #1
 8013d42:	f300 80bf 	bgt.w	8013ec4 <_dtoa_r+0x88c>
 8013d46:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013d48:	2a00      	cmp	r2, #0
 8013d4a:	f000 80b7 	beq.w	8013ebc <_dtoa_r+0x884>
 8013d4e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8013d52:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8013d54:	4646      	mov	r6, r8
 8013d56:	9a08      	ldr	r2, [sp, #32]
 8013d58:	2101      	movs	r1, #1
 8013d5a:	441a      	add	r2, r3
 8013d5c:	4658      	mov	r0, fp
 8013d5e:	4498      	add	r8, r3
 8013d60:	9208      	str	r2, [sp, #32]
 8013d62:	f000 fc21 	bl	80145a8 <__i2b>
 8013d66:	4605      	mov	r5, r0
 8013d68:	b15e      	cbz	r6, 8013d82 <_dtoa_r+0x74a>
 8013d6a:	9b08      	ldr	r3, [sp, #32]
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	dd08      	ble.n	8013d82 <_dtoa_r+0x74a>
 8013d70:	42b3      	cmp	r3, r6
 8013d72:	9a08      	ldr	r2, [sp, #32]
 8013d74:	bfa8      	it	ge
 8013d76:	4633      	movge	r3, r6
 8013d78:	eba8 0803 	sub.w	r8, r8, r3
 8013d7c:	1af6      	subs	r6, r6, r3
 8013d7e:	1ad3      	subs	r3, r2, r3
 8013d80:	9308      	str	r3, [sp, #32]
 8013d82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013d84:	b1f3      	cbz	r3, 8013dc4 <_dtoa_r+0x78c>
 8013d86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	f000 80b7 	beq.w	8013efc <_dtoa_r+0x8c4>
 8013d8e:	b18c      	cbz	r4, 8013db4 <_dtoa_r+0x77c>
 8013d90:	4629      	mov	r1, r5
 8013d92:	4622      	mov	r2, r4
 8013d94:	4658      	mov	r0, fp
 8013d96:	f000 fcc7 	bl	8014728 <__pow5mult>
 8013d9a:	464a      	mov	r2, r9
 8013d9c:	4601      	mov	r1, r0
 8013d9e:	4605      	mov	r5, r0
 8013da0:	4658      	mov	r0, fp
 8013da2:	f000 fc17 	bl	80145d4 <__multiply>
 8013da6:	4649      	mov	r1, r9
 8013da8:	9004      	str	r0, [sp, #16]
 8013daa:	4658      	mov	r0, fp
 8013dac:	f000 fb48 	bl	8014440 <_Bfree>
 8013db0:	9b04      	ldr	r3, [sp, #16]
 8013db2:	4699      	mov	r9, r3
 8013db4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013db6:	1b1a      	subs	r2, r3, r4
 8013db8:	d004      	beq.n	8013dc4 <_dtoa_r+0x78c>
 8013dba:	4649      	mov	r1, r9
 8013dbc:	4658      	mov	r0, fp
 8013dbe:	f000 fcb3 	bl	8014728 <__pow5mult>
 8013dc2:	4681      	mov	r9, r0
 8013dc4:	2101      	movs	r1, #1
 8013dc6:	4658      	mov	r0, fp
 8013dc8:	f000 fbee 	bl	80145a8 <__i2b>
 8013dcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013dce:	4604      	mov	r4, r0
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	f000 81cf 	beq.w	8014174 <_dtoa_r+0xb3c>
 8013dd6:	461a      	mov	r2, r3
 8013dd8:	4601      	mov	r1, r0
 8013dda:	4658      	mov	r0, fp
 8013ddc:	f000 fca4 	bl	8014728 <__pow5mult>
 8013de0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013de2:	2b01      	cmp	r3, #1
 8013de4:	4604      	mov	r4, r0
 8013de6:	f300 8095 	bgt.w	8013f14 <_dtoa_r+0x8dc>
 8013dea:	9b02      	ldr	r3, [sp, #8]
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	f040 8087 	bne.w	8013f00 <_dtoa_r+0x8c8>
 8013df2:	9b03      	ldr	r3, [sp, #12]
 8013df4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	f040 8089 	bne.w	8013f10 <_dtoa_r+0x8d8>
 8013dfe:	9b03      	ldr	r3, [sp, #12]
 8013e00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013e04:	0d1b      	lsrs	r3, r3, #20
 8013e06:	051b      	lsls	r3, r3, #20
 8013e08:	b12b      	cbz	r3, 8013e16 <_dtoa_r+0x7de>
 8013e0a:	9b08      	ldr	r3, [sp, #32]
 8013e0c:	3301      	adds	r3, #1
 8013e0e:	9308      	str	r3, [sp, #32]
 8013e10:	f108 0801 	add.w	r8, r8, #1
 8013e14:	2301      	movs	r3, #1
 8013e16:	930a      	str	r3, [sp, #40]	@ 0x28
 8013e18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	f000 81b0 	beq.w	8014180 <_dtoa_r+0xb48>
 8013e20:	6923      	ldr	r3, [r4, #16]
 8013e22:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013e26:	6918      	ldr	r0, [r3, #16]
 8013e28:	f000 fb72 	bl	8014510 <__hi0bits>
 8013e2c:	f1c0 0020 	rsb	r0, r0, #32
 8013e30:	9b08      	ldr	r3, [sp, #32]
 8013e32:	4418      	add	r0, r3
 8013e34:	f010 001f 	ands.w	r0, r0, #31
 8013e38:	d077      	beq.n	8013f2a <_dtoa_r+0x8f2>
 8013e3a:	f1c0 0320 	rsb	r3, r0, #32
 8013e3e:	2b04      	cmp	r3, #4
 8013e40:	dd6b      	ble.n	8013f1a <_dtoa_r+0x8e2>
 8013e42:	9b08      	ldr	r3, [sp, #32]
 8013e44:	f1c0 001c 	rsb	r0, r0, #28
 8013e48:	4403      	add	r3, r0
 8013e4a:	4480      	add	r8, r0
 8013e4c:	4406      	add	r6, r0
 8013e4e:	9308      	str	r3, [sp, #32]
 8013e50:	f1b8 0f00 	cmp.w	r8, #0
 8013e54:	dd05      	ble.n	8013e62 <_dtoa_r+0x82a>
 8013e56:	4649      	mov	r1, r9
 8013e58:	4642      	mov	r2, r8
 8013e5a:	4658      	mov	r0, fp
 8013e5c:	f000 fcbe 	bl	80147dc <__lshift>
 8013e60:	4681      	mov	r9, r0
 8013e62:	9b08      	ldr	r3, [sp, #32]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	dd05      	ble.n	8013e74 <_dtoa_r+0x83c>
 8013e68:	4621      	mov	r1, r4
 8013e6a:	461a      	mov	r2, r3
 8013e6c:	4658      	mov	r0, fp
 8013e6e:	f000 fcb5 	bl	80147dc <__lshift>
 8013e72:	4604      	mov	r4, r0
 8013e74:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d059      	beq.n	8013f2e <_dtoa_r+0x8f6>
 8013e7a:	4621      	mov	r1, r4
 8013e7c:	4648      	mov	r0, r9
 8013e7e:	f000 fd19 	bl	80148b4 <__mcmp>
 8013e82:	2800      	cmp	r0, #0
 8013e84:	da53      	bge.n	8013f2e <_dtoa_r+0x8f6>
 8013e86:	1e7b      	subs	r3, r7, #1
 8013e88:	9304      	str	r3, [sp, #16]
 8013e8a:	4649      	mov	r1, r9
 8013e8c:	2300      	movs	r3, #0
 8013e8e:	220a      	movs	r2, #10
 8013e90:	4658      	mov	r0, fp
 8013e92:	f000 faf7 	bl	8014484 <__multadd>
 8013e96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013e98:	4681      	mov	r9, r0
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	f000 8172 	beq.w	8014184 <_dtoa_r+0xb4c>
 8013ea0:	2300      	movs	r3, #0
 8013ea2:	4629      	mov	r1, r5
 8013ea4:	220a      	movs	r2, #10
 8013ea6:	4658      	mov	r0, fp
 8013ea8:	f000 faec 	bl	8014484 <__multadd>
 8013eac:	9b00      	ldr	r3, [sp, #0]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	4605      	mov	r5, r0
 8013eb2:	dc67      	bgt.n	8013f84 <_dtoa_r+0x94c>
 8013eb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013eb6:	2b02      	cmp	r3, #2
 8013eb8:	dc41      	bgt.n	8013f3e <_dtoa_r+0x906>
 8013eba:	e063      	b.n	8013f84 <_dtoa_r+0x94c>
 8013ebc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8013ebe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8013ec2:	e746      	b.n	8013d52 <_dtoa_r+0x71a>
 8013ec4:	9b07      	ldr	r3, [sp, #28]
 8013ec6:	1e5c      	subs	r4, r3, #1
 8013ec8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013eca:	42a3      	cmp	r3, r4
 8013ecc:	bfbf      	itttt	lt
 8013ece:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8013ed0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8013ed2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8013ed4:	1ae3      	sublt	r3, r4, r3
 8013ed6:	bfb4      	ite	lt
 8013ed8:	18d2      	addlt	r2, r2, r3
 8013eda:	1b1c      	subge	r4, r3, r4
 8013edc:	9b07      	ldr	r3, [sp, #28]
 8013ede:	bfbc      	itt	lt
 8013ee0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8013ee2:	2400      	movlt	r4, #0
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	bfb5      	itete	lt
 8013ee8:	eba8 0603 	sublt.w	r6, r8, r3
 8013eec:	9b07      	ldrge	r3, [sp, #28]
 8013eee:	2300      	movlt	r3, #0
 8013ef0:	4646      	movge	r6, r8
 8013ef2:	e730      	b.n	8013d56 <_dtoa_r+0x71e>
 8013ef4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8013ef6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8013ef8:	4646      	mov	r6, r8
 8013efa:	e735      	b.n	8013d68 <_dtoa_r+0x730>
 8013efc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013efe:	e75c      	b.n	8013dba <_dtoa_r+0x782>
 8013f00:	2300      	movs	r3, #0
 8013f02:	e788      	b.n	8013e16 <_dtoa_r+0x7de>
 8013f04:	3fe00000 	.word	0x3fe00000
 8013f08:	40240000 	.word	0x40240000
 8013f0c:	40140000 	.word	0x40140000
 8013f10:	9b02      	ldr	r3, [sp, #8]
 8013f12:	e780      	b.n	8013e16 <_dtoa_r+0x7de>
 8013f14:	2300      	movs	r3, #0
 8013f16:	930a      	str	r3, [sp, #40]	@ 0x28
 8013f18:	e782      	b.n	8013e20 <_dtoa_r+0x7e8>
 8013f1a:	d099      	beq.n	8013e50 <_dtoa_r+0x818>
 8013f1c:	9a08      	ldr	r2, [sp, #32]
 8013f1e:	331c      	adds	r3, #28
 8013f20:	441a      	add	r2, r3
 8013f22:	4498      	add	r8, r3
 8013f24:	441e      	add	r6, r3
 8013f26:	9208      	str	r2, [sp, #32]
 8013f28:	e792      	b.n	8013e50 <_dtoa_r+0x818>
 8013f2a:	4603      	mov	r3, r0
 8013f2c:	e7f6      	b.n	8013f1c <_dtoa_r+0x8e4>
 8013f2e:	9b07      	ldr	r3, [sp, #28]
 8013f30:	9704      	str	r7, [sp, #16]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	dc20      	bgt.n	8013f78 <_dtoa_r+0x940>
 8013f36:	9300      	str	r3, [sp, #0]
 8013f38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f3a:	2b02      	cmp	r3, #2
 8013f3c:	dd1e      	ble.n	8013f7c <_dtoa_r+0x944>
 8013f3e:	9b00      	ldr	r3, [sp, #0]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	f47f aec0 	bne.w	8013cc6 <_dtoa_r+0x68e>
 8013f46:	4621      	mov	r1, r4
 8013f48:	2205      	movs	r2, #5
 8013f4a:	4658      	mov	r0, fp
 8013f4c:	f000 fa9a 	bl	8014484 <__multadd>
 8013f50:	4601      	mov	r1, r0
 8013f52:	4604      	mov	r4, r0
 8013f54:	4648      	mov	r0, r9
 8013f56:	f000 fcad 	bl	80148b4 <__mcmp>
 8013f5a:	2800      	cmp	r0, #0
 8013f5c:	f77f aeb3 	ble.w	8013cc6 <_dtoa_r+0x68e>
 8013f60:	4656      	mov	r6, sl
 8013f62:	2331      	movs	r3, #49	@ 0x31
 8013f64:	f806 3b01 	strb.w	r3, [r6], #1
 8013f68:	9b04      	ldr	r3, [sp, #16]
 8013f6a:	3301      	adds	r3, #1
 8013f6c:	9304      	str	r3, [sp, #16]
 8013f6e:	e6ae      	b.n	8013cce <_dtoa_r+0x696>
 8013f70:	9c07      	ldr	r4, [sp, #28]
 8013f72:	9704      	str	r7, [sp, #16]
 8013f74:	4625      	mov	r5, r4
 8013f76:	e7f3      	b.n	8013f60 <_dtoa_r+0x928>
 8013f78:	9b07      	ldr	r3, [sp, #28]
 8013f7a:	9300      	str	r3, [sp, #0]
 8013f7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	f000 8104 	beq.w	801418c <_dtoa_r+0xb54>
 8013f84:	2e00      	cmp	r6, #0
 8013f86:	dd05      	ble.n	8013f94 <_dtoa_r+0x95c>
 8013f88:	4629      	mov	r1, r5
 8013f8a:	4632      	mov	r2, r6
 8013f8c:	4658      	mov	r0, fp
 8013f8e:	f000 fc25 	bl	80147dc <__lshift>
 8013f92:	4605      	mov	r5, r0
 8013f94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d05a      	beq.n	8014050 <_dtoa_r+0xa18>
 8013f9a:	6869      	ldr	r1, [r5, #4]
 8013f9c:	4658      	mov	r0, fp
 8013f9e:	f000 fa0f 	bl	80143c0 <_Balloc>
 8013fa2:	4606      	mov	r6, r0
 8013fa4:	b928      	cbnz	r0, 8013fb2 <_dtoa_r+0x97a>
 8013fa6:	4b84      	ldr	r3, [pc, #528]	@ (80141b8 <_dtoa_r+0xb80>)
 8013fa8:	4602      	mov	r2, r0
 8013faa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013fae:	f7ff bb5a 	b.w	8013666 <_dtoa_r+0x2e>
 8013fb2:	692a      	ldr	r2, [r5, #16]
 8013fb4:	3202      	adds	r2, #2
 8013fb6:	0092      	lsls	r2, r2, #2
 8013fb8:	f105 010c 	add.w	r1, r5, #12
 8013fbc:	300c      	adds	r0, #12
 8013fbe:	f7ff faa2 	bl	8013506 <memcpy>
 8013fc2:	2201      	movs	r2, #1
 8013fc4:	4631      	mov	r1, r6
 8013fc6:	4658      	mov	r0, fp
 8013fc8:	f000 fc08 	bl	80147dc <__lshift>
 8013fcc:	f10a 0301 	add.w	r3, sl, #1
 8013fd0:	9307      	str	r3, [sp, #28]
 8013fd2:	9b00      	ldr	r3, [sp, #0]
 8013fd4:	4453      	add	r3, sl
 8013fd6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013fd8:	9b02      	ldr	r3, [sp, #8]
 8013fda:	f003 0301 	and.w	r3, r3, #1
 8013fde:	462f      	mov	r7, r5
 8013fe0:	930a      	str	r3, [sp, #40]	@ 0x28
 8013fe2:	4605      	mov	r5, r0
 8013fe4:	9b07      	ldr	r3, [sp, #28]
 8013fe6:	4621      	mov	r1, r4
 8013fe8:	3b01      	subs	r3, #1
 8013fea:	4648      	mov	r0, r9
 8013fec:	9300      	str	r3, [sp, #0]
 8013fee:	f7ff fa98 	bl	8013522 <quorem>
 8013ff2:	4639      	mov	r1, r7
 8013ff4:	9002      	str	r0, [sp, #8]
 8013ff6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8013ffa:	4648      	mov	r0, r9
 8013ffc:	f000 fc5a 	bl	80148b4 <__mcmp>
 8014000:	462a      	mov	r2, r5
 8014002:	9008      	str	r0, [sp, #32]
 8014004:	4621      	mov	r1, r4
 8014006:	4658      	mov	r0, fp
 8014008:	f000 fc70 	bl	80148ec <__mdiff>
 801400c:	68c2      	ldr	r2, [r0, #12]
 801400e:	4606      	mov	r6, r0
 8014010:	bb02      	cbnz	r2, 8014054 <_dtoa_r+0xa1c>
 8014012:	4601      	mov	r1, r0
 8014014:	4648      	mov	r0, r9
 8014016:	f000 fc4d 	bl	80148b4 <__mcmp>
 801401a:	4602      	mov	r2, r0
 801401c:	4631      	mov	r1, r6
 801401e:	4658      	mov	r0, fp
 8014020:	920e      	str	r2, [sp, #56]	@ 0x38
 8014022:	f000 fa0d 	bl	8014440 <_Bfree>
 8014026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014028:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801402a:	9e07      	ldr	r6, [sp, #28]
 801402c:	ea43 0102 	orr.w	r1, r3, r2
 8014030:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014032:	4319      	orrs	r1, r3
 8014034:	d110      	bne.n	8014058 <_dtoa_r+0xa20>
 8014036:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801403a:	d029      	beq.n	8014090 <_dtoa_r+0xa58>
 801403c:	9b08      	ldr	r3, [sp, #32]
 801403e:	2b00      	cmp	r3, #0
 8014040:	dd02      	ble.n	8014048 <_dtoa_r+0xa10>
 8014042:	9b02      	ldr	r3, [sp, #8]
 8014044:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8014048:	9b00      	ldr	r3, [sp, #0]
 801404a:	f883 8000 	strb.w	r8, [r3]
 801404e:	e63f      	b.n	8013cd0 <_dtoa_r+0x698>
 8014050:	4628      	mov	r0, r5
 8014052:	e7bb      	b.n	8013fcc <_dtoa_r+0x994>
 8014054:	2201      	movs	r2, #1
 8014056:	e7e1      	b.n	801401c <_dtoa_r+0x9e4>
 8014058:	9b08      	ldr	r3, [sp, #32]
 801405a:	2b00      	cmp	r3, #0
 801405c:	db04      	blt.n	8014068 <_dtoa_r+0xa30>
 801405e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014060:	430b      	orrs	r3, r1
 8014062:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8014064:	430b      	orrs	r3, r1
 8014066:	d120      	bne.n	80140aa <_dtoa_r+0xa72>
 8014068:	2a00      	cmp	r2, #0
 801406a:	dded      	ble.n	8014048 <_dtoa_r+0xa10>
 801406c:	4649      	mov	r1, r9
 801406e:	2201      	movs	r2, #1
 8014070:	4658      	mov	r0, fp
 8014072:	f000 fbb3 	bl	80147dc <__lshift>
 8014076:	4621      	mov	r1, r4
 8014078:	4681      	mov	r9, r0
 801407a:	f000 fc1b 	bl	80148b4 <__mcmp>
 801407e:	2800      	cmp	r0, #0
 8014080:	dc03      	bgt.n	801408a <_dtoa_r+0xa52>
 8014082:	d1e1      	bne.n	8014048 <_dtoa_r+0xa10>
 8014084:	f018 0f01 	tst.w	r8, #1
 8014088:	d0de      	beq.n	8014048 <_dtoa_r+0xa10>
 801408a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801408e:	d1d8      	bne.n	8014042 <_dtoa_r+0xa0a>
 8014090:	9a00      	ldr	r2, [sp, #0]
 8014092:	2339      	movs	r3, #57	@ 0x39
 8014094:	7013      	strb	r3, [r2, #0]
 8014096:	4633      	mov	r3, r6
 8014098:	461e      	mov	r6, r3
 801409a:	3b01      	subs	r3, #1
 801409c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80140a0:	2a39      	cmp	r2, #57	@ 0x39
 80140a2:	d052      	beq.n	801414a <_dtoa_r+0xb12>
 80140a4:	3201      	adds	r2, #1
 80140a6:	701a      	strb	r2, [r3, #0]
 80140a8:	e612      	b.n	8013cd0 <_dtoa_r+0x698>
 80140aa:	2a00      	cmp	r2, #0
 80140ac:	dd07      	ble.n	80140be <_dtoa_r+0xa86>
 80140ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80140b2:	d0ed      	beq.n	8014090 <_dtoa_r+0xa58>
 80140b4:	9a00      	ldr	r2, [sp, #0]
 80140b6:	f108 0301 	add.w	r3, r8, #1
 80140ba:	7013      	strb	r3, [r2, #0]
 80140bc:	e608      	b.n	8013cd0 <_dtoa_r+0x698>
 80140be:	9b07      	ldr	r3, [sp, #28]
 80140c0:	9a07      	ldr	r2, [sp, #28]
 80140c2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80140c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80140c8:	4293      	cmp	r3, r2
 80140ca:	d028      	beq.n	801411e <_dtoa_r+0xae6>
 80140cc:	4649      	mov	r1, r9
 80140ce:	2300      	movs	r3, #0
 80140d0:	220a      	movs	r2, #10
 80140d2:	4658      	mov	r0, fp
 80140d4:	f000 f9d6 	bl	8014484 <__multadd>
 80140d8:	42af      	cmp	r7, r5
 80140da:	4681      	mov	r9, r0
 80140dc:	f04f 0300 	mov.w	r3, #0
 80140e0:	f04f 020a 	mov.w	r2, #10
 80140e4:	4639      	mov	r1, r7
 80140e6:	4658      	mov	r0, fp
 80140e8:	d107      	bne.n	80140fa <_dtoa_r+0xac2>
 80140ea:	f000 f9cb 	bl	8014484 <__multadd>
 80140ee:	4607      	mov	r7, r0
 80140f0:	4605      	mov	r5, r0
 80140f2:	9b07      	ldr	r3, [sp, #28]
 80140f4:	3301      	adds	r3, #1
 80140f6:	9307      	str	r3, [sp, #28]
 80140f8:	e774      	b.n	8013fe4 <_dtoa_r+0x9ac>
 80140fa:	f000 f9c3 	bl	8014484 <__multadd>
 80140fe:	4629      	mov	r1, r5
 8014100:	4607      	mov	r7, r0
 8014102:	2300      	movs	r3, #0
 8014104:	220a      	movs	r2, #10
 8014106:	4658      	mov	r0, fp
 8014108:	f000 f9bc 	bl	8014484 <__multadd>
 801410c:	4605      	mov	r5, r0
 801410e:	e7f0      	b.n	80140f2 <_dtoa_r+0xaba>
 8014110:	9b00      	ldr	r3, [sp, #0]
 8014112:	2b00      	cmp	r3, #0
 8014114:	bfcc      	ite	gt
 8014116:	461e      	movgt	r6, r3
 8014118:	2601      	movle	r6, #1
 801411a:	4456      	add	r6, sl
 801411c:	2700      	movs	r7, #0
 801411e:	4649      	mov	r1, r9
 8014120:	2201      	movs	r2, #1
 8014122:	4658      	mov	r0, fp
 8014124:	f000 fb5a 	bl	80147dc <__lshift>
 8014128:	4621      	mov	r1, r4
 801412a:	4681      	mov	r9, r0
 801412c:	f000 fbc2 	bl	80148b4 <__mcmp>
 8014130:	2800      	cmp	r0, #0
 8014132:	dcb0      	bgt.n	8014096 <_dtoa_r+0xa5e>
 8014134:	d102      	bne.n	801413c <_dtoa_r+0xb04>
 8014136:	f018 0f01 	tst.w	r8, #1
 801413a:	d1ac      	bne.n	8014096 <_dtoa_r+0xa5e>
 801413c:	4633      	mov	r3, r6
 801413e:	461e      	mov	r6, r3
 8014140:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014144:	2a30      	cmp	r2, #48	@ 0x30
 8014146:	d0fa      	beq.n	801413e <_dtoa_r+0xb06>
 8014148:	e5c2      	b.n	8013cd0 <_dtoa_r+0x698>
 801414a:	459a      	cmp	sl, r3
 801414c:	d1a4      	bne.n	8014098 <_dtoa_r+0xa60>
 801414e:	9b04      	ldr	r3, [sp, #16]
 8014150:	3301      	adds	r3, #1
 8014152:	9304      	str	r3, [sp, #16]
 8014154:	2331      	movs	r3, #49	@ 0x31
 8014156:	f88a 3000 	strb.w	r3, [sl]
 801415a:	e5b9      	b.n	8013cd0 <_dtoa_r+0x698>
 801415c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801415e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80141bc <_dtoa_r+0xb84>
 8014162:	b11b      	cbz	r3, 801416c <_dtoa_r+0xb34>
 8014164:	f10a 0308 	add.w	r3, sl, #8
 8014168:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801416a:	6013      	str	r3, [r2, #0]
 801416c:	4650      	mov	r0, sl
 801416e:	b019      	add	sp, #100	@ 0x64
 8014170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014174:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014176:	2b01      	cmp	r3, #1
 8014178:	f77f ae37 	ble.w	8013dea <_dtoa_r+0x7b2>
 801417c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801417e:	930a      	str	r3, [sp, #40]	@ 0x28
 8014180:	2001      	movs	r0, #1
 8014182:	e655      	b.n	8013e30 <_dtoa_r+0x7f8>
 8014184:	9b00      	ldr	r3, [sp, #0]
 8014186:	2b00      	cmp	r3, #0
 8014188:	f77f aed6 	ble.w	8013f38 <_dtoa_r+0x900>
 801418c:	4656      	mov	r6, sl
 801418e:	4621      	mov	r1, r4
 8014190:	4648      	mov	r0, r9
 8014192:	f7ff f9c6 	bl	8013522 <quorem>
 8014196:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801419a:	f806 8b01 	strb.w	r8, [r6], #1
 801419e:	9b00      	ldr	r3, [sp, #0]
 80141a0:	eba6 020a 	sub.w	r2, r6, sl
 80141a4:	4293      	cmp	r3, r2
 80141a6:	ddb3      	ble.n	8014110 <_dtoa_r+0xad8>
 80141a8:	4649      	mov	r1, r9
 80141aa:	2300      	movs	r3, #0
 80141ac:	220a      	movs	r2, #10
 80141ae:	4658      	mov	r0, fp
 80141b0:	f000 f968 	bl	8014484 <__multadd>
 80141b4:	4681      	mov	r9, r0
 80141b6:	e7ea      	b.n	801418e <_dtoa_r+0xb56>
 80141b8:	0801550c 	.word	0x0801550c
 80141bc:	08015490 	.word	0x08015490

080141c0 <_free_r>:
 80141c0:	b538      	push	{r3, r4, r5, lr}
 80141c2:	4605      	mov	r5, r0
 80141c4:	2900      	cmp	r1, #0
 80141c6:	d041      	beq.n	801424c <_free_r+0x8c>
 80141c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80141cc:	1f0c      	subs	r4, r1, #4
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	bfb8      	it	lt
 80141d2:	18e4      	addlt	r4, r4, r3
 80141d4:	f000 f8e8 	bl	80143a8 <__malloc_lock>
 80141d8:	4a1d      	ldr	r2, [pc, #116]	@ (8014250 <_free_r+0x90>)
 80141da:	6813      	ldr	r3, [r2, #0]
 80141dc:	b933      	cbnz	r3, 80141ec <_free_r+0x2c>
 80141de:	6063      	str	r3, [r4, #4]
 80141e0:	6014      	str	r4, [r2, #0]
 80141e2:	4628      	mov	r0, r5
 80141e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80141e8:	f000 b8e4 	b.w	80143b4 <__malloc_unlock>
 80141ec:	42a3      	cmp	r3, r4
 80141ee:	d908      	bls.n	8014202 <_free_r+0x42>
 80141f0:	6820      	ldr	r0, [r4, #0]
 80141f2:	1821      	adds	r1, r4, r0
 80141f4:	428b      	cmp	r3, r1
 80141f6:	bf01      	itttt	eq
 80141f8:	6819      	ldreq	r1, [r3, #0]
 80141fa:	685b      	ldreq	r3, [r3, #4]
 80141fc:	1809      	addeq	r1, r1, r0
 80141fe:	6021      	streq	r1, [r4, #0]
 8014200:	e7ed      	b.n	80141de <_free_r+0x1e>
 8014202:	461a      	mov	r2, r3
 8014204:	685b      	ldr	r3, [r3, #4]
 8014206:	b10b      	cbz	r3, 801420c <_free_r+0x4c>
 8014208:	42a3      	cmp	r3, r4
 801420a:	d9fa      	bls.n	8014202 <_free_r+0x42>
 801420c:	6811      	ldr	r1, [r2, #0]
 801420e:	1850      	adds	r0, r2, r1
 8014210:	42a0      	cmp	r0, r4
 8014212:	d10b      	bne.n	801422c <_free_r+0x6c>
 8014214:	6820      	ldr	r0, [r4, #0]
 8014216:	4401      	add	r1, r0
 8014218:	1850      	adds	r0, r2, r1
 801421a:	4283      	cmp	r3, r0
 801421c:	6011      	str	r1, [r2, #0]
 801421e:	d1e0      	bne.n	80141e2 <_free_r+0x22>
 8014220:	6818      	ldr	r0, [r3, #0]
 8014222:	685b      	ldr	r3, [r3, #4]
 8014224:	6053      	str	r3, [r2, #4]
 8014226:	4408      	add	r0, r1
 8014228:	6010      	str	r0, [r2, #0]
 801422a:	e7da      	b.n	80141e2 <_free_r+0x22>
 801422c:	d902      	bls.n	8014234 <_free_r+0x74>
 801422e:	230c      	movs	r3, #12
 8014230:	602b      	str	r3, [r5, #0]
 8014232:	e7d6      	b.n	80141e2 <_free_r+0x22>
 8014234:	6820      	ldr	r0, [r4, #0]
 8014236:	1821      	adds	r1, r4, r0
 8014238:	428b      	cmp	r3, r1
 801423a:	bf04      	itt	eq
 801423c:	6819      	ldreq	r1, [r3, #0]
 801423e:	685b      	ldreq	r3, [r3, #4]
 8014240:	6063      	str	r3, [r4, #4]
 8014242:	bf04      	itt	eq
 8014244:	1809      	addeq	r1, r1, r0
 8014246:	6021      	streq	r1, [r4, #0]
 8014248:	6054      	str	r4, [r2, #4]
 801424a:	e7ca      	b.n	80141e2 <_free_r+0x22>
 801424c:	bd38      	pop	{r3, r4, r5, pc}
 801424e:	bf00      	nop
 8014250:	20002318 	.word	0x20002318

08014254 <malloc>:
 8014254:	4b02      	ldr	r3, [pc, #8]	@ (8014260 <malloc+0xc>)
 8014256:	4601      	mov	r1, r0
 8014258:	6818      	ldr	r0, [r3, #0]
 801425a:	f000 b825 	b.w	80142a8 <_malloc_r>
 801425e:	bf00      	nop
 8014260:	20000138 	.word	0x20000138

08014264 <sbrk_aligned>:
 8014264:	b570      	push	{r4, r5, r6, lr}
 8014266:	4e0f      	ldr	r6, [pc, #60]	@ (80142a4 <sbrk_aligned+0x40>)
 8014268:	460c      	mov	r4, r1
 801426a:	6831      	ldr	r1, [r6, #0]
 801426c:	4605      	mov	r5, r0
 801426e:	b911      	cbnz	r1, 8014276 <sbrk_aligned+0x12>
 8014270:	f000 fede 	bl	8015030 <_sbrk_r>
 8014274:	6030      	str	r0, [r6, #0]
 8014276:	4621      	mov	r1, r4
 8014278:	4628      	mov	r0, r5
 801427a:	f000 fed9 	bl	8015030 <_sbrk_r>
 801427e:	1c43      	adds	r3, r0, #1
 8014280:	d103      	bne.n	801428a <sbrk_aligned+0x26>
 8014282:	f04f 34ff 	mov.w	r4, #4294967295
 8014286:	4620      	mov	r0, r4
 8014288:	bd70      	pop	{r4, r5, r6, pc}
 801428a:	1cc4      	adds	r4, r0, #3
 801428c:	f024 0403 	bic.w	r4, r4, #3
 8014290:	42a0      	cmp	r0, r4
 8014292:	d0f8      	beq.n	8014286 <sbrk_aligned+0x22>
 8014294:	1a21      	subs	r1, r4, r0
 8014296:	4628      	mov	r0, r5
 8014298:	f000 feca 	bl	8015030 <_sbrk_r>
 801429c:	3001      	adds	r0, #1
 801429e:	d1f2      	bne.n	8014286 <sbrk_aligned+0x22>
 80142a0:	e7ef      	b.n	8014282 <sbrk_aligned+0x1e>
 80142a2:	bf00      	nop
 80142a4:	20002314 	.word	0x20002314

080142a8 <_malloc_r>:
 80142a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80142ac:	1ccd      	adds	r5, r1, #3
 80142ae:	f025 0503 	bic.w	r5, r5, #3
 80142b2:	3508      	adds	r5, #8
 80142b4:	2d0c      	cmp	r5, #12
 80142b6:	bf38      	it	cc
 80142b8:	250c      	movcc	r5, #12
 80142ba:	2d00      	cmp	r5, #0
 80142bc:	4606      	mov	r6, r0
 80142be:	db01      	blt.n	80142c4 <_malloc_r+0x1c>
 80142c0:	42a9      	cmp	r1, r5
 80142c2:	d904      	bls.n	80142ce <_malloc_r+0x26>
 80142c4:	230c      	movs	r3, #12
 80142c6:	6033      	str	r3, [r6, #0]
 80142c8:	2000      	movs	r0, #0
 80142ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80142ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80143a4 <_malloc_r+0xfc>
 80142d2:	f000 f869 	bl	80143a8 <__malloc_lock>
 80142d6:	f8d8 3000 	ldr.w	r3, [r8]
 80142da:	461c      	mov	r4, r3
 80142dc:	bb44      	cbnz	r4, 8014330 <_malloc_r+0x88>
 80142de:	4629      	mov	r1, r5
 80142e0:	4630      	mov	r0, r6
 80142e2:	f7ff ffbf 	bl	8014264 <sbrk_aligned>
 80142e6:	1c43      	adds	r3, r0, #1
 80142e8:	4604      	mov	r4, r0
 80142ea:	d158      	bne.n	801439e <_malloc_r+0xf6>
 80142ec:	f8d8 4000 	ldr.w	r4, [r8]
 80142f0:	4627      	mov	r7, r4
 80142f2:	2f00      	cmp	r7, #0
 80142f4:	d143      	bne.n	801437e <_malloc_r+0xd6>
 80142f6:	2c00      	cmp	r4, #0
 80142f8:	d04b      	beq.n	8014392 <_malloc_r+0xea>
 80142fa:	6823      	ldr	r3, [r4, #0]
 80142fc:	4639      	mov	r1, r7
 80142fe:	4630      	mov	r0, r6
 8014300:	eb04 0903 	add.w	r9, r4, r3
 8014304:	f000 fe94 	bl	8015030 <_sbrk_r>
 8014308:	4581      	cmp	r9, r0
 801430a:	d142      	bne.n	8014392 <_malloc_r+0xea>
 801430c:	6821      	ldr	r1, [r4, #0]
 801430e:	1a6d      	subs	r5, r5, r1
 8014310:	4629      	mov	r1, r5
 8014312:	4630      	mov	r0, r6
 8014314:	f7ff ffa6 	bl	8014264 <sbrk_aligned>
 8014318:	3001      	adds	r0, #1
 801431a:	d03a      	beq.n	8014392 <_malloc_r+0xea>
 801431c:	6823      	ldr	r3, [r4, #0]
 801431e:	442b      	add	r3, r5
 8014320:	6023      	str	r3, [r4, #0]
 8014322:	f8d8 3000 	ldr.w	r3, [r8]
 8014326:	685a      	ldr	r2, [r3, #4]
 8014328:	bb62      	cbnz	r2, 8014384 <_malloc_r+0xdc>
 801432a:	f8c8 7000 	str.w	r7, [r8]
 801432e:	e00f      	b.n	8014350 <_malloc_r+0xa8>
 8014330:	6822      	ldr	r2, [r4, #0]
 8014332:	1b52      	subs	r2, r2, r5
 8014334:	d420      	bmi.n	8014378 <_malloc_r+0xd0>
 8014336:	2a0b      	cmp	r2, #11
 8014338:	d917      	bls.n	801436a <_malloc_r+0xc2>
 801433a:	1961      	adds	r1, r4, r5
 801433c:	42a3      	cmp	r3, r4
 801433e:	6025      	str	r5, [r4, #0]
 8014340:	bf18      	it	ne
 8014342:	6059      	strne	r1, [r3, #4]
 8014344:	6863      	ldr	r3, [r4, #4]
 8014346:	bf08      	it	eq
 8014348:	f8c8 1000 	streq.w	r1, [r8]
 801434c:	5162      	str	r2, [r4, r5]
 801434e:	604b      	str	r3, [r1, #4]
 8014350:	4630      	mov	r0, r6
 8014352:	f000 f82f 	bl	80143b4 <__malloc_unlock>
 8014356:	f104 000b 	add.w	r0, r4, #11
 801435a:	1d23      	adds	r3, r4, #4
 801435c:	f020 0007 	bic.w	r0, r0, #7
 8014360:	1ac2      	subs	r2, r0, r3
 8014362:	bf1c      	itt	ne
 8014364:	1a1b      	subne	r3, r3, r0
 8014366:	50a3      	strne	r3, [r4, r2]
 8014368:	e7af      	b.n	80142ca <_malloc_r+0x22>
 801436a:	6862      	ldr	r2, [r4, #4]
 801436c:	42a3      	cmp	r3, r4
 801436e:	bf0c      	ite	eq
 8014370:	f8c8 2000 	streq.w	r2, [r8]
 8014374:	605a      	strne	r2, [r3, #4]
 8014376:	e7eb      	b.n	8014350 <_malloc_r+0xa8>
 8014378:	4623      	mov	r3, r4
 801437a:	6864      	ldr	r4, [r4, #4]
 801437c:	e7ae      	b.n	80142dc <_malloc_r+0x34>
 801437e:	463c      	mov	r4, r7
 8014380:	687f      	ldr	r7, [r7, #4]
 8014382:	e7b6      	b.n	80142f2 <_malloc_r+0x4a>
 8014384:	461a      	mov	r2, r3
 8014386:	685b      	ldr	r3, [r3, #4]
 8014388:	42a3      	cmp	r3, r4
 801438a:	d1fb      	bne.n	8014384 <_malloc_r+0xdc>
 801438c:	2300      	movs	r3, #0
 801438e:	6053      	str	r3, [r2, #4]
 8014390:	e7de      	b.n	8014350 <_malloc_r+0xa8>
 8014392:	230c      	movs	r3, #12
 8014394:	6033      	str	r3, [r6, #0]
 8014396:	4630      	mov	r0, r6
 8014398:	f000 f80c 	bl	80143b4 <__malloc_unlock>
 801439c:	e794      	b.n	80142c8 <_malloc_r+0x20>
 801439e:	6005      	str	r5, [r0, #0]
 80143a0:	e7d6      	b.n	8014350 <_malloc_r+0xa8>
 80143a2:	bf00      	nop
 80143a4:	20002318 	.word	0x20002318

080143a8 <__malloc_lock>:
 80143a8:	4801      	ldr	r0, [pc, #4]	@ (80143b0 <__malloc_lock+0x8>)
 80143aa:	f7ff b8aa 	b.w	8013502 <__retarget_lock_acquire_recursive>
 80143ae:	bf00      	nop
 80143b0:	20002310 	.word	0x20002310

080143b4 <__malloc_unlock>:
 80143b4:	4801      	ldr	r0, [pc, #4]	@ (80143bc <__malloc_unlock+0x8>)
 80143b6:	f7ff b8a5 	b.w	8013504 <__retarget_lock_release_recursive>
 80143ba:	bf00      	nop
 80143bc:	20002310 	.word	0x20002310

080143c0 <_Balloc>:
 80143c0:	b570      	push	{r4, r5, r6, lr}
 80143c2:	69c6      	ldr	r6, [r0, #28]
 80143c4:	4604      	mov	r4, r0
 80143c6:	460d      	mov	r5, r1
 80143c8:	b976      	cbnz	r6, 80143e8 <_Balloc+0x28>
 80143ca:	2010      	movs	r0, #16
 80143cc:	f7ff ff42 	bl	8014254 <malloc>
 80143d0:	4602      	mov	r2, r0
 80143d2:	61e0      	str	r0, [r4, #28]
 80143d4:	b920      	cbnz	r0, 80143e0 <_Balloc+0x20>
 80143d6:	4b18      	ldr	r3, [pc, #96]	@ (8014438 <_Balloc+0x78>)
 80143d8:	4818      	ldr	r0, [pc, #96]	@ (801443c <_Balloc+0x7c>)
 80143da:	216b      	movs	r1, #107	@ 0x6b
 80143dc:	f000 fe38 	bl	8015050 <__assert_func>
 80143e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80143e4:	6006      	str	r6, [r0, #0]
 80143e6:	60c6      	str	r6, [r0, #12]
 80143e8:	69e6      	ldr	r6, [r4, #28]
 80143ea:	68f3      	ldr	r3, [r6, #12]
 80143ec:	b183      	cbz	r3, 8014410 <_Balloc+0x50>
 80143ee:	69e3      	ldr	r3, [r4, #28]
 80143f0:	68db      	ldr	r3, [r3, #12]
 80143f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80143f6:	b9b8      	cbnz	r0, 8014428 <_Balloc+0x68>
 80143f8:	2101      	movs	r1, #1
 80143fa:	fa01 f605 	lsl.w	r6, r1, r5
 80143fe:	1d72      	adds	r2, r6, #5
 8014400:	0092      	lsls	r2, r2, #2
 8014402:	4620      	mov	r0, r4
 8014404:	f000 fe42 	bl	801508c <_calloc_r>
 8014408:	b160      	cbz	r0, 8014424 <_Balloc+0x64>
 801440a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801440e:	e00e      	b.n	801442e <_Balloc+0x6e>
 8014410:	2221      	movs	r2, #33	@ 0x21
 8014412:	2104      	movs	r1, #4
 8014414:	4620      	mov	r0, r4
 8014416:	f000 fe39 	bl	801508c <_calloc_r>
 801441a:	69e3      	ldr	r3, [r4, #28]
 801441c:	60f0      	str	r0, [r6, #12]
 801441e:	68db      	ldr	r3, [r3, #12]
 8014420:	2b00      	cmp	r3, #0
 8014422:	d1e4      	bne.n	80143ee <_Balloc+0x2e>
 8014424:	2000      	movs	r0, #0
 8014426:	bd70      	pop	{r4, r5, r6, pc}
 8014428:	6802      	ldr	r2, [r0, #0]
 801442a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801442e:	2300      	movs	r3, #0
 8014430:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014434:	e7f7      	b.n	8014426 <_Balloc+0x66>
 8014436:	bf00      	nop
 8014438:	0801549d 	.word	0x0801549d
 801443c:	0801551d 	.word	0x0801551d

08014440 <_Bfree>:
 8014440:	b570      	push	{r4, r5, r6, lr}
 8014442:	69c6      	ldr	r6, [r0, #28]
 8014444:	4605      	mov	r5, r0
 8014446:	460c      	mov	r4, r1
 8014448:	b976      	cbnz	r6, 8014468 <_Bfree+0x28>
 801444a:	2010      	movs	r0, #16
 801444c:	f7ff ff02 	bl	8014254 <malloc>
 8014450:	4602      	mov	r2, r0
 8014452:	61e8      	str	r0, [r5, #28]
 8014454:	b920      	cbnz	r0, 8014460 <_Bfree+0x20>
 8014456:	4b09      	ldr	r3, [pc, #36]	@ (801447c <_Bfree+0x3c>)
 8014458:	4809      	ldr	r0, [pc, #36]	@ (8014480 <_Bfree+0x40>)
 801445a:	218f      	movs	r1, #143	@ 0x8f
 801445c:	f000 fdf8 	bl	8015050 <__assert_func>
 8014460:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014464:	6006      	str	r6, [r0, #0]
 8014466:	60c6      	str	r6, [r0, #12]
 8014468:	b13c      	cbz	r4, 801447a <_Bfree+0x3a>
 801446a:	69eb      	ldr	r3, [r5, #28]
 801446c:	6862      	ldr	r2, [r4, #4]
 801446e:	68db      	ldr	r3, [r3, #12]
 8014470:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014474:	6021      	str	r1, [r4, #0]
 8014476:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801447a:	bd70      	pop	{r4, r5, r6, pc}
 801447c:	0801549d 	.word	0x0801549d
 8014480:	0801551d 	.word	0x0801551d

08014484 <__multadd>:
 8014484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014488:	690d      	ldr	r5, [r1, #16]
 801448a:	4607      	mov	r7, r0
 801448c:	460c      	mov	r4, r1
 801448e:	461e      	mov	r6, r3
 8014490:	f101 0c14 	add.w	ip, r1, #20
 8014494:	2000      	movs	r0, #0
 8014496:	f8dc 3000 	ldr.w	r3, [ip]
 801449a:	b299      	uxth	r1, r3
 801449c:	fb02 6101 	mla	r1, r2, r1, r6
 80144a0:	0c1e      	lsrs	r6, r3, #16
 80144a2:	0c0b      	lsrs	r3, r1, #16
 80144a4:	fb02 3306 	mla	r3, r2, r6, r3
 80144a8:	b289      	uxth	r1, r1
 80144aa:	3001      	adds	r0, #1
 80144ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80144b0:	4285      	cmp	r5, r0
 80144b2:	f84c 1b04 	str.w	r1, [ip], #4
 80144b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80144ba:	dcec      	bgt.n	8014496 <__multadd+0x12>
 80144bc:	b30e      	cbz	r6, 8014502 <__multadd+0x7e>
 80144be:	68a3      	ldr	r3, [r4, #8]
 80144c0:	42ab      	cmp	r3, r5
 80144c2:	dc19      	bgt.n	80144f8 <__multadd+0x74>
 80144c4:	6861      	ldr	r1, [r4, #4]
 80144c6:	4638      	mov	r0, r7
 80144c8:	3101      	adds	r1, #1
 80144ca:	f7ff ff79 	bl	80143c0 <_Balloc>
 80144ce:	4680      	mov	r8, r0
 80144d0:	b928      	cbnz	r0, 80144de <__multadd+0x5a>
 80144d2:	4602      	mov	r2, r0
 80144d4:	4b0c      	ldr	r3, [pc, #48]	@ (8014508 <__multadd+0x84>)
 80144d6:	480d      	ldr	r0, [pc, #52]	@ (801450c <__multadd+0x88>)
 80144d8:	21ba      	movs	r1, #186	@ 0xba
 80144da:	f000 fdb9 	bl	8015050 <__assert_func>
 80144de:	6922      	ldr	r2, [r4, #16]
 80144e0:	3202      	adds	r2, #2
 80144e2:	f104 010c 	add.w	r1, r4, #12
 80144e6:	0092      	lsls	r2, r2, #2
 80144e8:	300c      	adds	r0, #12
 80144ea:	f7ff f80c 	bl	8013506 <memcpy>
 80144ee:	4621      	mov	r1, r4
 80144f0:	4638      	mov	r0, r7
 80144f2:	f7ff ffa5 	bl	8014440 <_Bfree>
 80144f6:	4644      	mov	r4, r8
 80144f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80144fc:	3501      	adds	r5, #1
 80144fe:	615e      	str	r6, [r3, #20]
 8014500:	6125      	str	r5, [r4, #16]
 8014502:	4620      	mov	r0, r4
 8014504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014508:	0801550c 	.word	0x0801550c
 801450c:	0801551d 	.word	0x0801551d

08014510 <__hi0bits>:
 8014510:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8014514:	4603      	mov	r3, r0
 8014516:	bf36      	itet	cc
 8014518:	0403      	lslcc	r3, r0, #16
 801451a:	2000      	movcs	r0, #0
 801451c:	2010      	movcc	r0, #16
 801451e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014522:	bf3c      	itt	cc
 8014524:	021b      	lslcc	r3, r3, #8
 8014526:	3008      	addcc	r0, #8
 8014528:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801452c:	bf3c      	itt	cc
 801452e:	011b      	lslcc	r3, r3, #4
 8014530:	3004      	addcc	r0, #4
 8014532:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014536:	bf3c      	itt	cc
 8014538:	009b      	lslcc	r3, r3, #2
 801453a:	3002      	addcc	r0, #2
 801453c:	2b00      	cmp	r3, #0
 801453e:	db05      	blt.n	801454c <__hi0bits+0x3c>
 8014540:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8014544:	f100 0001 	add.w	r0, r0, #1
 8014548:	bf08      	it	eq
 801454a:	2020      	moveq	r0, #32
 801454c:	4770      	bx	lr

0801454e <__lo0bits>:
 801454e:	6803      	ldr	r3, [r0, #0]
 8014550:	4602      	mov	r2, r0
 8014552:	f013 0007 	ands.w	r0, r3, #7
 8014556:	d00b      	beq.n	8014570 <__lo0bits+0x22>
 8014558:	07d9      	lsls	r1, r3, #31
 801455a:	d421      	bmi.n	80145a0 <__lo0bits+0x52>
 801455c:	0798      	lsls	r0, r3, #30
 801455e:	bf49      	itett	mi
 8014560:	085b      	lsrmi	r3, r3, #1
 8014562:	089b      	lsrpl	r3, r3, #2
 8014564:	2001      	movmi	r0, #1
 8014566:	6013      	strmi	r3, [r2, #0]
 8014568:	bf5c      	itt	pl
 801456a:	6013      	strpl	r3, [r2, #0]
 801456c:	2002      	movpl	r0, #2
 801456e:	4770      	bx	lr
 8014570:	b299      	uxth	r1, r3
 8014572:	b909      	cbnz	r1, 8014578 <__lo0bits+0x2a>
 8014574:	0c1b      	lsrs	r3, r3, #16
 8014576:	2010      	movs	r0, #16
 8014578:	b2d9      	uxtb	r1, r3
 801457a:	b909      	cbnz	r1, 8014580 <__lo0bits+0x32>
 801457c:	3008      	adds	r0, #8
 801457e:	0a1b      	lsrs	r3, r3, #8
 8014580:	0719      	lsls	r1, r3, #28
 8014582:	bf04      	itt	eq
 8014584:	091b      	lsreq	r3, r3, #4
 8014586:	3004      	addeq	r0, #4
 8014588:	0799      	lsls	r1, r3, #30
 801458a:	bf04      	itt	eq
 801458c:	089b      	lsreq	r3, r3, #2
 801458e:	3002      	addeq	r0, #2
 8014590:	07d9      	lsls	r1, r3, #31
 8014592:	d403      	bmi.n	801459c <__lo0bits+0x4e>
 8014594:	085b      	lsrs	r3, r3, #1
 8014596:	f100 0001 	add.w	r0, r0, #1
 801459a:	d003      	beq.n	80145a4 <__lo0bits+0x56>
 801459c:	6013      	str	r3, [r2, #0]
 801459e:	4770      	bx	lr
 80145a0:	2000      	movs	r0, #0
 80145a2:	4770      	bx	lr
 80145a4:	2020      	movs	r0, #32
 80145a6:	4770      	bx	lr

080145a8 <__i2b>:
 80145a8:	b510      	push	{r4, lr}
 80145aa:	460c      	mov	r4, r1
 80145ac:	2101      	movs	r1, #1
 80145ae:	f7ff ff07 	bl	80143c0 <_Balloc>
 80145b2:	4602      	mov	r2, r0
 80145b4:	b928      	cbnz	r0, 80145c2 <__i2b+0x1a>
 80145b6:	4b05      	ldr	r3, [pc, #20]	@ (80145cc <__i2b+0x24>)
 80145b8:	4805      	ldr	r0, [pc, #20]	@ (80145d0 <__i2b+0x28>)
 80145ba:	f240 1145 	movw	r1, #325	@ 0x145
 80145be:	f000 fd47 	bl	8015050 <__assert_func>
 80145c2:	2301      	movs	r3, #1
 80145c4:	6144      	str	r4, [r0, #20]
 80145c6:	6103      	str	r3, [r0, #16]
 80145c8:	bd10      	pop	{r4, pc}
 80145ca:	bf00      	nop
 80145cc:	0801550c 	.word	0x0801550c
 80145d0:	0801551d 	.word	0x0801551d

080145d4 <__multiply>:
 80145d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145d8:	4614      	mov	r4, r2
 80145da:	690a      	ldr	r2, [r1, #16]
 80145dc:	6923      	ldr	r3, [r4, #16]
 80145de:	429a      	cmp	r2, r3
 80145e0:	bfa8      	it	ge
 80145e2:	4623      	movge	r3, r4
 80145e4:	460f      	mov	r7, r1
 80145e6:	bfa4      	itt	ge
 80145e8:	460c      	movge	r4, r1
 80145ea:	461f      	movge	r7, r3
 80145ec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80145f0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80145f4:	68a3      	ldr	r3, [r4, #8]
 80145f6:	6861      	ldr	r1, [r4, #4]
 80145f8:	eb0a 0609 	add.w	r6, sl, r9
 80145fc:	42b3      	cmp	r3, r6
 80145fe:	b085      	sub	sp, #20
 8014600:	bfb8      	it	lt
 8014602:	3101      	addlt	r1, #1
 8014604:	f7ff fedc 	bl	80143c0 <_Balloc>
 8014608:	b930      	cbnz	r0, 8014618 <__multiply+0x44>
 801460a:	4602      	mov	r2, r0
 801460c:	4b44      	ldr	r3, [pc, #272]	@ (8014720 <__multiply+0x14c>)
 801460e:	4845      	ldr	r0, [pc, #276]	@ (8014724 <__multiply+0x150>)
 8014610:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8014614:	f000 fd1c 	bl	8015050 <__assert_func>
 8014618:	f100 0514 	add.w	r5, r0, #20
 801461c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014620:	462b      	mov	r3, r5
 8014622:	2200      	movs	r2, #0
 8014624:	4543      	cmp	r3, r8
 8014626:	d321      	bcc.n	801466c <__multiply+0x98>
 8014628:	f107 0114 	add.w	r1, r7, #20
 801462c:	f104 0214 	add.w	r2, r4, #20
 8014630:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8014634:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8014638:	9302      	str	r3, [sp, #8]
 801463a:	1b13      	subs	r3, r2, r4
 801463c:	3b15      	subs	r3, #21
 801463e:	f023 0303 	bic.w	r3, r3, #3
 8014642:	3304      	adds	r3, #4
 8014644:	f104 0715 	add.w	r7, r4, #21
 8014648:	42ba      	cmp	r2, r7
 801464a:	bf38      	it	cc
 801464c:	2304      	movcc	r3, #4
 801464e:	9301      	str	r3, [sp, #4]
 8014650:	9b02      	ldr	r3, [sp, #8]
 8014652:	9103      	str	r1, [sp, #12]
 8014654:	428b      	cmp	r3, r1
 8014656:	d80c      	bhi.n	8014672 <__multiply+0x9e>
 8014658:	2e00      	cmp	r6, #0
 801465a:	dd03      	ble.n	8014664 <__multiply+0x90>
 801465c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014660:	2b00      	cmp	r3, #0
 8014662:	d05b      	beq.n	801471c <__multiply+0x148>
 8014664:	6106      	str	r6, [r0, #16]
 8014666:	b005      	add	sp, #20
 8014668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801466c:	f843 2b04 	str.w	r2, [r3], #4
 8014670:	e7d8      	b.n	8014624 <__multiply+0x50>
 8014672:	f8b1 a000 	ldrh.w	sl, [r1]
 8014676:	f1ba 0f00 	cmp.w	sl, #0
 801467a:	d024      	beq.n	80146c6 <__multiply+0xf2>
 801467c:	f104 0e14 	add.w	lr, r4, #20
 8014680:	46a9      	mov	r9, r5
 8014682:	f04f 0c00 	mov.w	ip, #0
 8014686:	f85e 7b04 	ldr.w	r7, [lr], #4
 801468a:	f8d9 3000 	ldr.w	r3, [r9]
 801468e:	fa1f fb87 	uxth.w	fp, r7
 8014692:	b29b      	uxth	r3, r3
 8014694:	fb0a 330b 	mla	r3, sl, fp, r3
 8014698:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801469c:	f8d9 7000 	ldr.w	r7, [r9]
 80146a0:	4463      	add	r3, ip
 80146a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80146a6:	fb0a c70b 	mla	r7, sl, fp, ip
 80146aa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80146ae:	b29b      	uxth	r3, r3
 80146b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80146b4:	4572      	cmp	r2, lr
 80146b6:	f849 3b04 	str.w	r3, [r9], #4
 80146ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80146be:	d8e2      	bhi.n	8014686 <__multiply+0xb2>
 80146c0:	9b01      	ldr	r3, [sp, #4]
 80146c2:	f845 c003 	str.w	ip, [r5, r3]
 80146c6:	9b03      	ldr	r3, [sp, #12]
 80146c8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80146cc:	3104      	adds	r1, #4
 80146ce:	f1b9 0f00 	cmp.w	r9, #0
 80146d2:	d021      	beq.n	8014718 <__multiply+0x144>
 80146d4:	682b      	ldr	r3, [r5, #0]
 80146d6:	f104 0c14 	add.w	ip, r4, #20
 80146da:	46ae      	mov	lr, r5
 80146dc:	f04f 0a00 	mov.w	sl, #0
 80146e0:	f8bc b000 	ldrh.w	fp, [ip]
 80146e4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80146e8:	fb09 770b 	mla	r7, r9, fp, r7
 80146ec:	4457      	add	r7, sl
 80146ee:	b29b      	uxth	r3, r3
 80146f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80146f4:	f84e 3b04 	str.w	r3, [lr], #4
 80146f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80146fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014700:	f8be 3000 	ldrh.w	r3, [lr]
 8014704:	fb09 330a 	mla	r3, r9, sl, r3
 8014708:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801470c:	4562      	cmp	r2, ip
 801470e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014712:	d8e5      	bhi.n	80146e0 <__multiply+0x10c>
 8014714:	9f01      	ldr	r7, [sp, #4]
 8014716:	51eb      	str	r3, [r5, r7]
 8014718:	3504      	adds	r5, #4
 801471a:	e799      	b.n	8014650 <__multiply+0x7c>
 801471c:	3e01      	subs	r6, #1
 801471e:	e79b      	b.n	8014658 <__multiply+0x84>
 8014720:	0801550c 	.word	0x0801550c
 8014724:	0801551d 	.word	0x0801551d

08014728 <__pow5mult>:
 8014728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801472c:	4615      	mov	r5, r2
 801472e:	f012 0203 	ands.w	r2, r2, #3
 8014732:	4607      	mov	r7, r0
 8014734:	460e      	mov	r6, r1
 8014736:	d007      	beq.n	8014748 <__pow5mult+0x20>
 8014738:	4c25      	ldr	r4, [pc, #148]	@ (80147d0 <__pow5mult+0xa8>)
 801473a:	3a01      	subs	r2, #1
 801473c:	2300      	movs	r3, #0
 801473e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014742:	f7ff fe9f 	bl	8014484 <__multadd>
 8014746:	4606      	mov	r6, r0
 8014748:	10ad      	asrs	r5, r5, #2
 801474a:	d03d      	beq.n	80147c8 <__pow5mult+0xa0>
 801474c:	69fc      	ldr	r4, [r7, #28]
 801474e:	b97c      	cbnz	r4, 8014770 <__pow5mult+0x48>
 8014750:	2010      	movs	r0, #16
 8014752:	f7ff fd7f 	bl	8014254 <malloc>
 8014756:	4602      	mov	r2, r0
 8014758:	61f8      	str	r0, [r7, #28]
 801475a:	b928      	cbnz	r0, 8014768 <__pow5mult+0x40>
 801475c:	4b1d      	ldr	r3, [pc, #116]	@ (80147d4 <__pow5mult+0xac>)
 801475e:	481e      	ldr	r0, [pc, #120]	@ (80147d8 <__pow5mult+0xb0>)
 8014760:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8014764:	f000 fc74 	bl	8015050 <__assert_func>
 8014768:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801476c:	6004      	str	r4, [r0, #0]
 801476e:	60c4      	str	r4, [r0, #12]
 8014770:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8014774:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014778:	b94c      	cbnz	r4, 801478e <__pow5mult+0x66>
 801477a:	f240 2171 	movw	r1, #625	@ 0x271
 801477e:	4638      	mov	r0, r7
 8014780:	f7ff ff12 	bl	80145a8 <__i2b>
 8014784:	2300      	movs	r3, #0
 8014786:	f8c8 0008 	str.w	r0, [r8, #8]
 801478a:	4604      	mov	r4, r0
 801478c:	6003      	str	r3, [r0, #0]
 801478e:	f04f 0900 	mov.w	r9, #0
 8014792:	07eb      	lsls	r3, r5, #31
 8014794:	d50a      	bpl.n	80147ac <__pow5mult+0x84>
 8014796:	4631      	mov	r1, r6
 8014798:	4622      	mov	r2, r4
 801479a:	4638      	mov	r0, r7
 801479c:	f7ff ff1a 	bl	80145d4 <__multiply>
 80147a0:	4631      	mov	r1, r6
 80147a2:	4680      	mov	r8, r0
 80147a4:	4638      	mov	r0, r7
 80147a6:	f7ff fe4b 	bl	8014440 <_Bfree>
 80147aa:	4646      	mov	r6, r8
 80147ac:	106d      	asrs	r5, r5, #1
 80147ae:	d00b      	beq.n	80147c8 <__pow5mult+0xa0>
 80147b0:	6820      	ldr	r0, [r4, #0]
 80147b2:	b938      	cbnz	r0, 80147c4 <__pow5mult+0x9c>
 80147b4:	4622      	mov	r2, r4
 80147b6:	4621      	mov	r1, r4
 80147b8:	4638      	mov	r0, r7
 80147ba:	f7ff ff0b 	bl	80145d4 <__multiply>
 80147be:	6020      	str	r0, [r4, #0]
 80147c0:	f8c0 9000 	str.w	r9, [r0]
 80147c4:	4604      	mov	r4, r0
 80147c6:	e7e4      	b.n	8014792 <__pow5mult+0x6a>
 80147c8:	4630      	mov	r0, r6
 80147ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80147ce:	bf00      	nop
 80147d0:	08015578 	.word	0x08015578
 80147d4:	0801549d 	.word	0x0801549d
 80147d8:	0801551d 	.word	0x0801551d

080147dc <__lshift>:
 80147dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80147e0:	460c      	mov	r4, r1
 80147e2:	6849      	ldr	r1, [r1, #4]
 80147e4:	6923      	ldr	r3, [r4, #16]
 80147e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80147ea:	68a3      	ldr	r3, [r4, #8]
 80147ec:	4607      	mov	r7, r0
 80147ee:	4691      	mov	r9, r2
 80147f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80147f4:	f108 0601 	add.w	r6, r8, #1
 80147f8:	42b3      	cmp	r3, r6
 80147fa:	db0b      	blt.n	8014814 <__lshift+0x38>
 80147fc:	4638      	mov	r0, r7
 80147fe:	f7ff fddf 	bl	80143c0 <_Balloc>
 8014802:	4605      	mov	r5, r0
 8014804:	b948      	cbnz	r0, 801481a <__lshift+0x3e>
 8014806:	4602      	mov	r2, r0
 8014808:	4b28      	ldr	r3, [pc, #160]	@ (80148ac <__lshift+0xd0>)
 801480a:	4829      	ldr	r0, [pc, #164]	@ (80148b0 <__lshift+0xd4>)
 801480c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8014810:	f000 fc1e 	bl	8015050 <__assert_func>
 8014814:	3101      	adds	r1, #1
 8014816:	005b      	lsls	r3, r3, #1
 8014818:	e7ee      	b.n	80147f8 <__lshift+0x1c>
 801481a:	2300      	movs	r3, #0
 801481c:	f100 0114 	add.w	r1, r0, #20
 8014820:	f100 0210 	add.w	r2, r0, #16
 8014824:	4618      	mov	r0, r3
 8014826:	4553      	cmp	r3, sl
 8014828:	db33      	blt.n	8014892 <__lshift+0xb6>
 801482a:	6920      	ldr	r0, [r4, #16]
 801482c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014830:	f104 0314 	add.w	r3, r4, #20
 8014834:	f019 091f 	ands.w	r9, r9, #31
 8014838:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801483c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014840:	d02b      	beq.n	801489a <__lshift+0xbe>
 8014842:	f1c9 0e20 	rsb	lr, r9, #32
 8014846:	468a      	mov	sl, r1
 8014848:	2200      	movs	r2, #0
 801484a:	6818      	ldr	r0, [r3, #0]
 801484c:	fa00 f009 	lsl.w	r0, r0, r9
 8014850:	4310      	orrs	r0, r2
 8014852:	f84a 0b04 	str.w	r0, [sl], #4
 8014856:	f853 2b04 	ldr.w	r2, [r3], #4
 801485a:	459c      	cmp	ip, r3
 801485c:	fa22 f20e 	lsr.w	r2, r2, lr
 8014860:	d8f3      	bhi.n	801484a <__lshift+0x6e>
 8014862:	ebac 0304 	sub.w	r3, ip, r4
 8014866:	3b15      	subs	r3, #21
 8014868:	f023 0303 	bic.w	r3, r3, #3
 801486c:	3304      	adds	r3, #4
 801486e:	f104 0015 	add.w	r0, r4, #21
 8014872:	4584      	cmp	ip, r0
 8014874:	bf38      	it	cc
 8014876:	2304      	movcc	r3, #4
 8014878:	50ca      	str	r2, [r1, r3]
 801487a:	b10a      	cbz	r2, 8014880 <__lshift+0xa4>
 801487c:	f108 0602 	add.w	r6, r8, #2
 8014880:	3e01      	subs	r6, #1
 8014882:	4638      	mov	r0, r7
 8014884:	612e      	str	r6, [r5, #16]
 8014886:	4621      	mov	r1, r4
 8014888:	f7ff fdda 	bl	8014440 <_Bfree>
 801488c:	4628      	mov	r0, r5
 801488e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014892:	f842 0f04 	str.w	r0, [r2, #4]!
 8014896:	3301      	adds	r3, #1
 8014898:	e7c5      	b.n	8014826 <__lshift+0x4a>
 801489a:	3904      	subs	r1, #4
 801489c:	f853 2b04 	ldr.w	r2, [r3], #4
 80148a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80148a4:	459c      	cmp	ip, r3
 80148a6:	d8f9      	bhi.n	801489c <__lshift+0xc0>
 80148a8:	e7ea      	b.n	8014880 <__lshift+0xa4>
 80148aa:	bf00      	nop
 80148ac:	0801550c 	.word	0x0801550c
 80148b0:	0801551d 	.word	0x0801551d

080148b4 <__mcmp>:
 80148b4:	690a      	ldr	r2, [r1, #16]
 80148b6:	4603      	mov	r3, r0
 80148b8:	6900      	ldr	r0, [r0, #16]
 80148ba:	1a80      	subs	r0, r0, r2
 80148bc:	b530      	push	{r4, r5, lr}
 80148be:	d10e      	bne.n	80148de <__mcmp+0x2a>
 80148c0:	3314      	adds	r3, #20
 80148c2:	3114      	adds	r1, #20
 80148c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80148c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80148cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80148d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80148d4:	4295      	cmp	r5, r2
 80148d6:	d003      	beq.n	80148e0 <__mcmp+0x2c>
 80148d8:	d205      	bcs.n	80148e6 <__mcmp+0x32>
 80148da:	f04f 30ff 	mov.w	r0, #4294967295
 80148de:	bd30      	pop	{r4, r5, pc}
 80148e0:	42a3      	cmp	r3, r4
 80148e2:	d3f3      	bcc.n	80148cc <__mcmp+0x18>
 80148e4:	e7fb      	b.n	80148de <__mcmp+0x2a>
 80148e6:	2001      	movs	r0, #1
 80148e8:	e7f9      	b.n	80148de <__mcmp+0x2a>
	...

080148ec <__mdiff>:
 80148ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148f0:	4689      	mov	r9, r1
 80148f2:	4606      	mov	r6, r0
 80148f4:	4611      	mov	r1, r2
 80148f6:	4648      	mov	r0, r9
 80148f8:	4614      	mov	r4, r2
 80148fa:	f7ff ffdb 	bl	80148b4 <__mcmp>
 80148fe:	1e05      	subs	r5, r0, #0
 8014900:	d112      	bne.n	8014928 <__mdiff+0x3c>
 8014902:	4629      	mov	r1, r5
 8014904:	4630      	mov	r0, r6
 8014906:	f7ff fd5b 	bl	80143c0 <_Balloc>
 801490a:	4602      	mov	r2, r0
 801490c:	b928      	cbnz	r0, 801491a <__mdiff+0x2e>
 801490e:	4b3f      	ldr	r3, [pc, #252]	@ (8014a0c <__mdiff+0x120>)
 8014910:	f240 2137 	movw	r1, #567	@ 0x237
 8014914:	483e      	ldr	r0, [pc, #248]	@ (8014a10 <__mdiff+0x124>)
 8014916:	f000 fb9b 	bl	8015050 <__assert_func>
 801491a:	2301      	movs	r3, #1
 801491c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014920:	4610      	mov	r0, r2
 8014922:	b003      	add	sp, #12
 8014924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014928:	bfbc      	itt	lt
 801492a:	464b      	movlt	r3, r9
 801492c:	46a1      	movlt	r9, r4
 801492e:	4630      	mov	r0, r6
 8014930:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014934:	bfba      	itte	lt
 8014936:	461c      	movlt	r4, r3
 8014938:	2501      	movlt	r5, #1
 801493a:	2500      	movge	r5, #0
 801493c:	f7ff fd40 	bl	80143c0 <_Balloc>
 8014940:	4602      	mov	r2, r0
 8014942:	b918      	cbnz	r0, 801494c <__mdiff+0x60>
 8014944:	4b31      	ldr	r3, [pc, #196]	@ (8014a0c <__mdiff+0x120>)
 8014946:	f240 2145 	movw	r1, #581	@ 0x245
 801494a:	e7e3      	b.n	8014914 <__mdiff+0x28>
 801494c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014950:	6926      	ldr	r6, [r4, #16]
 8014952:	60c5      	str	r5, [r0, #12]
 8014954:	f109 0310 	add.w	r3, r9, #16
 8014958:	f109 0514 	add.w	r5, r9, #20
 801495c:	f104 0e14 	add.w	lr, r4, #20
 8014960:	f100 0b14 	add.w	fp, r0, #20
 8014964:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014968:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801496c:	9301      	str	r3, [sp, #4]
 801496e:	46d9      	mov	r9, fp
 8014970:	f04f 0c00 	mov.w	ip, #0
 8014974:	9b01      	ldr	r3, [sp, #4]
 8014976:	f85e 0b04 	ldr.w	r0, [lr], #4
 801497a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801497e:	9301      	str	r3, [sp, #4]
 8014980:	fa1f f38a 	uxth.w	r3, sl
 8014984:	4619      	mov	r1, r3
 8014986:	b283      	uxth	r3, r0
 8014988:	1acb      	subs	r3, r1, r3
 801498a:	0c00      	lsrs	r0, r0, #16
 801498c:	4463      	add	r3, ip
 801498e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8014992:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8014996:	b29b      	uxth	r3, r3
 8014998:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801499c:	4576      	cmp	r6, lr
 801499e:	f849 3b04 	str.w	r3, [r9], #4
 80149a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80149a6:	d8e5      	bhi.n	8014974 <__mdiff+0x88>
 80149a8:	1b33      	subs	r3, r6, r4
 80149aa:	3b15      	subs	r3, #21
 80149ac:	f023 0303 	bic.w	r3, r3, #3
 80149b0:	3415      	adds	r4, #21
 80149b2:	3304      	adds	r3, #4
 80149b4:	42a6      	cmp	r6, r4
 80149b6:	bf38      	it	cc
 80149b8:	2304      	movcc	r3, #4
 80149ba:	441d      	add	r5, r3
 80149bc:	445b      	add	r3, fp
 80149be:	461e      	mov	r6, r3
 80149c0:	462c      	mov	r4, r5
 80149c2:	4544      	cmp	r4, r8
 80149c4:	d30e      	bcc.n	80149e4 <__mdiff+0xf8>
 80149c6:	f108 0103 	add.w	r1, r8, #3
 80149ca:	1b49      	subs	r1, r1, r5
 80149cc:	f021 0103 	bic.w	r1, r1, #3
 80149d0:	3d03      	subs	r5, #3
 80149d2:	45a8      	cmp	r8, r5
 80149d4:	bf38      	it	cc
 80149d6:	2100      	movcc	r1, #0
 80149d8:	440b      	add	r3, r1
 80149da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80149de:	b191      	cbz	r1, 8014a06 <__mdiff+0x11a>
 80149e0:	6117      	str	r7, [r2, #16]
 80149e2:	e79d      	b.n	8014920 <__mdiff+0x34>
 80149e4:	f854 1b04 	ldr.w	r1, [r4], #4
 80149e8:	46e6      	mov	lr, ip
 80149ea:	0c08      	lsrs	r0, r1, #16
 80149ec:	fa1c fc81 	uxtah	ip, ip, r1
 80149f0:	4471      	add	r1, lr
 80149f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80149f6:	b289      	uxth	r1, r1
 80149f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80149fc:	f846 1b04 	str.w	r1, [r6], #4
 8014a00:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014a04:	e7dd      	b.n	80149c2 <__mdiff+0xd6>
 8014a06:	3f01      	subs	r7, #1
 8014a08:	e7e7      	b.n	80149da <__mdiff+0xee>
 8014a0a:	bf00      	nop
 8014a0c:	0801550c 	.word	0x0801550c
 8014a10:	0801551d 	.word	0x0801551d

08014a14 <__d2b>:
 8014a14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014a18:	460f      	mov	r7, r1
 8014a1a:	2101      	movs	r1, #1
 8014a1c:	ec59 8b10 	vmov	r8, r9, d0
 8014a20:	4616      	mov	r6, r2
 8014a22:	f7ff fccd 	bl	80143c0 <_Balloc>
 8014a26:	4604      	mov	r4, r0
 8014a28:	b930      	cbnz	r0, 8014a38 <__d2b+0x24>
 8014a2a:	4602      	mov	r2, r0
 8014a2c:	4b23      	ldr	r3, [pc, #140]	@ (8014abc <__d2b+0xa8>)
 8014a2e:	4824      	ldr	r0, [pc, #144]	@ (8014ac0 <__d2b+0xac>)
 8014a30:	f240 310f 	movw	r1, #783	@ 0x30f
 8014a34:	f000 fb0c 	bl	8015050 <__assert_func>
 8014a38:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014a3c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014a40:	b10d      	cbz	r5, 8014a46 <__d2b+0x32>
 8014a42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014a46:	9301      	str	r3, [sp, #4]
 8014a48:	f1b8 0300 	subs.w	r3, r8, #0
 8014a4c:	d023      	beq.n	8014a96 <__d2b+0x82>
 8014a4e:	4668      	mov	r0, sp
 8014a50:	9300      	str	r3, [sp, #0]
 8014a52:	f7ff fd7c 	bl	801454e <__lo0bits>
 8014a56:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014a5a:	b1d0      	cbz	r0, 8014a92 <__d2b+0x7e>
 8014a5c:	f1c0 0320 	rsb	r3, r0, #32
 8014a60:	fa02 f303 	lsl.w	r3, r2, r3
 8014a64:	430b      	orrs	r3, r1
 8014a66:	40c2      	lsrs	r2, r0
 8014a68:	6163      	str	r3, [r4, #20]
 8014a6a:	9201      	str	r2, [sp, #4]
 8014a6c:	9b01      	ldr	r3, [sp, #4]
 8014a6e:	61a3      	str	r3, [r4, #24]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	bf0c      	ite	eq
 8014a74:	2201      	moveq	r2, #1
 8014a76:	2202      	movne	r2, #2
 8014a78:	6122      	str	r2, [r4, #16]
 8014a7a:	b1a5      	cbz	r5, 8014aa6 <__d2b+0x92>
 8014a7c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8014a80:	4405      	add	r5, r0
 8014a82:	603d      	str	r5, [r7, #0]
 8014a84:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014a88:	6030      	str	r0, [r6, #0]
 8014a8a:	4620      	mov	r0, r4
 8014a8c:	b003      	add	sp, #12
 8014a8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a92:	6161      	str	r1, [r4, #20]
 8014a94:	e7ea      	b.n	8014a6c <__d2b+0x58>
 8014a96:	a801      	add	r0, sp, #4
 8014a98:	f7ff fd59 	bl	801454e <__lo0bits>
 8014a9c:	9b01      	ldr	r3, [sp, #4]
 8014a9e:	6163      	str	r3, [r4, #20]
 8014aa0:	3020      	adds	r0, #32
 8014aa2:	2201      	movs	r2, #1
 8014aa4:	e7e8      	b.n	8014a78 <__d2b+0x64>
 8014aa6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014aaa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8014aae:	6038      	str	r0, [r7, #0]
 8014ab0:	6918      	ldr	r0, [r3, #16]
 8014ab2:	f7ff fd2d 	bl	8014510 <__hi0bits>
 8014ab6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014aba:	e7e5      	b.n	8014a88 <__d2b+0x74>
 8014abc:	0801550c 	.word	0x0801550c
 8014ac0:	0801551d 	.word	0x0801551d

08014ac4 <__sfputc_r>:
 8014ac4:	6893      	ldr	r3, [r2, #8]
 8014ac6:	3b01      	subs	r3, #1
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	b410      	push	{r4}
 8014acc:	6093      	str	r3, [r2, #8]
 8014ace:	da08      	bge.n	8014ae2 <__sfputc_r+0x1e>
 8014ad0:	6994      	ldr	r4, [r2, #24]
 8014ad2:	42a3      	cmp	r3, r4
 8014ad4:	db01      	blt.n	8014ada <__sfputc_r+0x16>
 8014ad6:	290a      	cmp	r1, #10
 8014ad8:	d103      	bne.n	8014ae2 <__sfputc_r+0x1e>
 8014ada:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014ade:	f000 ba13 	b.w	8014f08 <__swbuf_r>
 8014ae2:	6813      	ldr	r3, [r2, #0]
 8014ae4:	1c58      	adds	r0, r3, #1
 8014ae6:	6010      	str	r0, [r2, #0]
 8014ae8:	7019      	strb	r1, [r3, #0]
 8014aea:	4608      	mov	r0, r1
 8014aec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014af0:	4770      	bx	lr

08014af2 <__sfputs_r>:
 8014af2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014af4:	4606      	mov	r6, r0
 8014af6:	460f      	mov	r7, r1
 8014af8:	4614      	mov	r4, r2
 8014afa:	18d5      	adds	r5, r2, r3
 8014afc:	42ac      	cmp	r4, r5
 8014afe:	d101      	bne.n	8014b04 <__sfputs_r+0x12>
 8014b00:	2000      	movs	r0, #0
 8014b02:	e007      	b.n	8014b14 <__sfputs_r+0x22>
 8014b04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b08:	463a      	mov	r2, r7
 8014b0a:	4630      	mov	r0, r6
 8014b0c:	f7ff ffda 	bl	8014ac4 <__sfputc_r>
 8014b10:	1c43      	adds	r3, r0, #1
 8014b12:	d1f3      	bne.n	8014afc <__sfputs_r+0xa>
 8014b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014b18 <_vfiprintf_r>:
 8014b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b1c:	460d      	mov	r5, r1
 8014b1e:	b09d      	sub	sp, #116	@ 0x74
 8014b20:	4614      	mov	r4, r2
 8014b22:	4698      	mov	r8, r3
 8014b24:	4606      	mov	r6, r0
 8014b26:	b118      	cbz	r0, 8014b30 <_vfiprintf_r+0x18>
 8014b28:	6a03      	ldr	r3, [r0, #32]
 8014b2a:	b90b      	cbnz	r3, 8014b30 <_vfiprintf_r+0x18>
 8014b2c:	f7fe fbd8 	bl	80132e0 <__sinit>
 8014b30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014b32:	07d9      	lsls	r1, r3, #31
 8014b34:	d405      	bmi.n	8014b42 <_vfiprintf_r+0x2a>
 8014b36:	89ab      	ldrh	r3, [r5, #12]
 8014b38:	059a      	lsls	r2, r3, #22
 8014b3a:	d402      	bmi.n	8014b42 <_vfiprintf_r+0x2a>
 8014b3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014b3e:	f7fe fce0 	bl	8013502 <__retarget_lock_acquire_recursive>
 8014b42:	89ab      	ldrh	r3, [r5, #12]
 8014b44:	071b      	lsls	r3, r3, #28
 8014b46:	d501      	bpl.n	8014b4c <_vfiprintf_r+0x34>
 8014b48:	692b      	ldr	r3, [r5, #16]
 8014b4a:	b99b      	cbnz	r3, 8014b74 <_vfiprintf_r+0x5c>
 8014b4c:	4629      	mov	r1, r5
 8014b4e:	4630      	mov	r0, r6
 8014b50:	f000 fa18 	bl	8014f84 <__swsetup_r>
 8014b54:	b170      	cbz	r0, 8014b74 <_vfiprintf_r+0x5c>
 8014b56:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014b58:	07dc      	lsls	r4, r3, #31
 8014b5a:	d504      	bpl.n	8014b66 <_vfiprintf_r+0x4e>
 8014b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8014b60:	b01d      	add	sp, #116	@ 0x74
 8014b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b66:	89ab      	ldrh	r3, [r5, #12]
 8014b68:	0598      	lsls	r0, r3, #22
 8014b6a:	d4f7      	bmi.n	8014b5c <_vfiprintf_r+0x44>
 8014b6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014b6e:	f7fe fcc9 	bl	8013504 <__retarget_lock_release_recursive>
 8014b72:	e7f3      	b.n	8014b5c <_vfiprintf_r+0x44>
 8014b74:	2300      	movs	r3, #0
 8014b76:	9309      	str	r3, [sp, #36]	@ 0x24
 8014b78:	2320      	movs	r3, #32
 8014b7a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014b7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014b82:	2330      	movs	r3, #48	@ 0x30
 8014b84:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014d34 <_vfiprintf_r+0x21c>
 8014b88:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014b8c:	f04f 0901 	mov.w	r9, #1
 8014b90:	4623      	mov	r3, r4
 8014b92:	469a      	mov	sl, r3
 8014b94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014b98:	b10a      	cbz	r2, 8014b9e <_vfiprintf_r+0x86>
 8014b9a:	2a25      	cmp	r2, #37	@ 0x25
 8014b9c:	d1f9      	bne.n	8014b92 <_vfiprintf_r+0x7a>
 8014b9e:	ebba 0b04 	subs.w	fp, sl, r4
 8014ba2:	d00b      	beq.n	8014bbc <_vfiprintf_r+0xa4>
 8014ba4:	465b      	mov	r3, fp
 8014ba6:	4622      	mov	r2, r4
 8014ba8:	4629      	mov	r1, r5
 8014baa:	4630      	mov	r0, r6
 8014bac:	f7ff ffa1 	bl	8014af2 <__sfputs_r>
 8014bb0:	3001      	adds	r0, #1
 8014bb2:	f000 80a7 	beq.w	8014d04 <_vfiprintf_r+0x1ec>
 8014bb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014bb8:	445a      	add	r2, fp
 8014bba:	9209      	str	r2, [sp, #36]	@ 0x24
 8014bbc:	f89a 3000 	ldrb.w	r3, [sl]
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	f000 809f 	beq.w	8014d04 <_vfiprintf_r+0x1ec>
 8014bc6:	2300      	movs	r3, #0
 8014bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8014bcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014bd0:	f10a 0a01 	add.w	sl, sl, #1
 8014bd4:	9304      	str	r3, [sp, #16]
 8014bd6:	9307      	str	r3, [sp, #28]
 8014bd8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014bdc:	931a      	str	r3, [sp, #104]	@ 0x68
 8014bde:	4654      	mov	r4, sl
 8014be0:	2205      	movs	r2, #5
 8014be2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014be6:	4853      	ldr	r0, [pc, #332]	@ (8014d34 <_vfiprintf_r+0x21c>)
 8014be8:	f7eb faca 	bl	8000180 <memchr>
 8014bec:	9a04      	ldr	r2, [sp, #16]
 8014bee:	b9d8      	cbnz	r0, 8014c28 <_vfiprintf_r+0x110>
 8014bf0:	06d1      	lsls	r1, r2, #27
 8014bf2:	bf44      	itt	mi
 8014bf4:	2320      	movmi	r3, #32
 8014bf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014bfa:	0713      	lsls	r3, r2, #28
 8014bfc:	bf44      	itt	mi
 8014bfe:	232b      	movmi	r3, #43	@ 0x2b
 8014c00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014c04:	f89a 3000 	ldrb.w	r3, [sl]
 8014c08:	2b2a      	cmp	r3, #42	@ 0x2a
 8014c0a:	d015      	beq.n	8014c38 <_vfiprintf_r+0x120>
 8014c0c:	9a07      	ldr	r2, [sp, #28]
 8014c0e:	4654      	mov	r4, sl
 8014c10:	2000      	movs	r0, #0
 8014c12:	f04f 0c0a 	mov.w	ip, #10
 8014c16:	4621      	mov	r1, r4
 8014c18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014c1c:	3b30      	subs	r3, #48	@ 0x30
 8014c1e:	2b09      	cmp	r3, #9
 8014c20:	d94b      	bls.n	8014cba <_vfiprintf_r+0x1a2>
 8014c22:	b1b0      	cbz	r0, 8014c52 <_vfiprintf_r+0x13a>
 8014c24:	9207      	str	r2, [sp, #28]
 8014c26:	e014      	b.n	8014c52 <_vfiprintf_r+0x13a>
 8014c28:	eba0 0308 	sub.w	r3, r0, r8
 8014c2c:	fa09 f303 	lsl.w	r3, r9, r3
 8014c30:	4313      	orrs	r3, r2
 8014c32:	9304      	str	r3, [sp, #16]
 8014c34:	46a2      	mov	sl, r4
 8014c36:	e7d2      	b.n	8014bde <_vfiprintf_r+0xc6>
 8014c38:	9b03      	ldr	r3, [sp, #12]
 8014c3a:	1d19      	adds	r1, r3, #4
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	9103      	str	r1, [sp, #12]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	bfbb      	ittet	lt
 8014c44:	425b      	neglt	r3, r3
 8014c46:	f042 0202 	orrlt.w	r2, r2, #2
 8014c4a:	9307      	strge	r3, [sp, #28]
 8014c4c:	9307      	strlt	r3, [sp, #28]
 8014c4e:	bfb8      	it	lt
 8014c50:	9204      	strlt	r2, [sp, #16]
 8014c52:	7823      	ldrb	r3, [r4, #0]
 8014c54:	2b2e      	cmp	r3, #46	@ 0x2e
 8014c56:	d10a      	bne.n	8014c6e <_vfiprintf_r+0x156>
 8014c58:	7863      	ldrb	r3, [r4, #1]
 8014c5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8014c5c:	d132      	bne.n	8014cc4 <_vfiprintf_r+0x1ac>
 8014c5e:	9b03      	ldr	r3, [sp, #12]
 8014c60:	1d1a      	adds	r2, r3, #4
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	9203      	str	r2, [sp, #12]
 8014c66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014c6a:	3402      	adds	r4, #2
 8014c6c:	9305      	str	r3, [sp, #20]
 8014c6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014d44 <_vfiprintf_r+0x22c>
 8014c72:	7821      	ldrb	r1, [r4, #0]
 8014c74:	2203      	movs	r2, #3
 8014c76:	4650      	mov	r0, sl
 8014c78:	f7eb fa82 	bl	8000180 <memchr>
 8014c7c:	b138      	cbz	r0, 8014c8e <_vfiprintf_r+0x176>
 8014c7e:	9b04      	ldr	r3, [sp, #16]
 8014c80:	eba0 000a 	sub.w	r0, r0, sl
 8014c84:	2240      	movs	r2, #64	@ 0x40
 8014c86:	4082      	lsls	r2, r0
 8014c88:	4313      	orrs	r3, r2
 8014c8a:	3401      	adds	r4, #1
 8014c8c:	9304      	str	r3, [sp, #16]
 8014c8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c92:	4829      	ldr	r0, [pc, #164]	@ (8014d38 <_vfiprintf_r+0x220>)
 8014c94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014c98:	2206      	movs	r2, #6
 8014c9a:	f7eb fa71 	bl	8000180 <memchr>
 8014c9e:	2800      	cmp	r0, #0
 8014ca0:	d03f      	beq.n	8014d22 <_vfiprintf_r+0x20a>
 8014ca2:	4b26      	ldr	r3, [pc, #152]	@ (8014d3c <_vfiprintf_r+0x224>)
 8014ca4:	bb1b      	cbnz	r3, 8014cee <_vfiprintf_r+0x1d6>
 8014ca6:	9b03      	ldr	r3, [sp, #12]
 8014ca8:	3307      	adds	r3, #7
 8014caa:	f023 0307 	bic.w	r3, r3, #7
 8014cae:	3308      	adds	r3, #8
 8014cb0:	9303      	str	r3, [sp, #12]
 8014cb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014cb4:	443b      	add	r3, r7
 8014cb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8014cb8:	e76a      	b.n	8014b90 <_vfiprintf_r+0x78>
 8014cba:	fb0c 3202 	mla	r2, ip, r2, r3
 8014cbe:	460c      	mov	r4, r1
 8014cc0:	2001      	movs	r0, #1
 8014cc2:	e7a8      	b.n	8014c16 <_vfiprintf_r+0xfe>
 8014cc4:	2300      	movs	r3, #0
 8014cc6:	3401      	adds	r4, #1
 8014cc8:	9305      	str	r3, [sp, #20]
 8014cca:	4619      	mov	r1, r3
 8014ccc:	f04f 0c0a 	mov.w	ip, #10
 8014cd0:	4620      	mov	r0, r4
 8014cd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014cd6:	3a30      	subs	r2, #48	@ 0x30
 8014cd8:	2a09      	cmp	r2, #9
 8014cda:	d903      	bls.n	8014ce4 <_vfiprintf_r+0x1cc>
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d0c6      	beq.n	8014c6e <_vfiprintf_r+0x156>
 8014ce0:	9105      	str	r1, [sp, #20]
 8014ce2:	e7c4      	b.n	8014c6e <_vfiprintf_r+0x156>
 8014ce4:	fb0c 2101 	mla	r1, ip, r1, r2
 8014ce8:	4604      	mov	r4, r0
 8014cea:	2301      	movs	r3, #1
 8014cec:	e7f0      	b.n	8014cd0 <_vfiprintf_r+0x1b8>
 8014cee:	ab03      	add	r3, sp, #12
 8014cf0:	9300      	str	r3, [sp, #0]
 8014cf2:	462a      	mov	r2, r5
 8014cf4:	4b12      	ldr	r3, [pc, #72]	@ (8014d40 <_vfiprintf_r+0x228>)
 8014cf6:	a904      	add	r1, sp, #16
 8014cf8:	4630      	mov	r0, r6
 8014cfa:	f7fd fead 	bl	8012a58 <_printf_float>
 8014cfe:	4607      	mov	r7, r0
 8014d00:	1c78      	adds	r0, r7, #1
 8014d02:	d1d6      	bne.n	8014cb2 <_vfiprintf_r+0x19a>
 8014d04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014d06:	07d9      	lsls	r1, r3, #31
 8014d08:	d405      	bmi.n	8014d16 <_vfiprintf_r+0x1fe>
 8014d0a:	89ab      	ldrh	r3, [r5, #12]
 8014d0c:	059a      	lsls	r2, r3, #22
 8014d0e:	d402      	bmi.n	8014d16 <_vfiprintf_r+0x1fe>
 8014d10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014d12:	f7fe fbf7 	bl	8013504 <__retarget_lock_release_recursive>
 8014d16:	89ab      	ldrh	r3, [r5, #12]
 8014d18:	065b      	lsls	r3, r3, #25
 8014d1a:	f53f af1f 	bmi.w	8014b5c <_vfiprintf_r+0x44>
 8014d1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014d20:	e71e      	b.n	8014b60 <_vfiprintf_r+0x48>
 8014d22:	ab03      	add	r3, sp, #12
 8014d24:	9300      	str	r3, [sp, #0]
 8014d26:	462a      	mov	r2, r5
 8014d28:	4b05      	ldr	r3, [pc, #20]	@ (8014d40 <_vfiprintf_r+0x228>)
 8014d2a:	a904      	add	r1, sp, #16
 8014d2c:	4630      	mov	r0, r6
 8014d2e:	f7fe f92b 	bl	8012f88 <_printf_i>
 8014d32:	e7e4      	b.n	8014cfe <_vfiprintf_r+0x1e6>
 8014d34:	08015678 	.word	0x08015678
 8014d38:	08015682 	.word	0x08015682
 8014d3c:	08012a59 	.word	0x08012a59
 8014d40:	08014af3 	.word	0x08014af3
 8014d44:	0801567e 	.word	0x0801567e

08014d48 <__sflush_r>:
 8014d48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d50:	0716      	lsls	r6, r2, #28
 8014d52:	4605      	mov	r5, r0
 8014d54:	460c      	mov	r4, r1
 8014d56:	d454      	bmi.n	8014e02 <__sflush_r+0xba>
 8014d58:	684b      	ldr	r3, [r1, #4]
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	dc02      	bgt.n	8014d64 <__sflush_r+0x1c>
 8014d5e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	dd48      	ble.n	8014df6 <__sflush_r+0xae>
 8014d64:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014d66:	2e00      	cmp	r6, #0
 8014d68:	d045      	beq.n	8014df6 <__sflush_r+0xae>
 8014d6a:	2300      	movs	r3, #0
 8014d6c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014d70:	682f      	ldr	r7, [r5, #0]
 8014d72:	6a21      	ldr	r1, [r4, #32]
 8014d74:	602b      	str	r3, [r5, #0]
 8014d76:	d030      	beq.n	8014dda <__sflush_r+0x92>
 8014d78:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014d7a:	89a3      	ldrh	r3, [r4, #12]
 8014d7c:	0759      	lsls	r1, r3, #29
 8014d7e:	d505      	bpl.n	8014d8c <__sflush_r+0x44>
 8014d80:	6863      	ldr	r3, [r4, #4]
 8014d82:	1ad2      	subs	r2, r2, r3
 8014d84:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014d86:	b10b      	cbz	r3, 8014d8c <__sflush_r+0x44>
 8014d88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014d8a:	1ad2      	subs	r2, r2, r3
 8014d8c:	2300      	movs	r3, #0
 8014d8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014d90:	6a21      	ldr	r1, [r4, #32]
 8014d92:	4628      	mov	r0, r5
 8014d94:	47b0      	blx	r6
 8014d96:	1c43      	adds	r3, r0, #1
 8014d98:	89a3      	ldrh	r3, [r4, #12]
 8014d9a:	d106      	bne.n	8014daa <__sflush_r+0x62>
 8014d9c:	6829      	ldr	r1, [r5, #0]
 8014d9e:	291d      	cmp	r1, #29
 8014da0:	d82b      	bhi.n	8014dfa <__sflush_r+0xb2>
 8014da2:	4a2a      	ldr	r2, [pc, #168]	@ (8014e4c <__sflush_r+0x104>)
 8014da4:	410a      	asrs	r2, r1
 8014da6:	07d6      	lsls	r6, r2, #31
 8014da8:	d427      	bmi.n	8014dfa <__sflush_r+0xb2>
 8014daa:	2200      	movs	r2, #0
 8014dac:	6062      	str	r2, [r4, #4]
 8014dae:	04d9      	lsls	r1, r3, #19
 8014db0:	6922      	ldr	r2, [r4, #16]
 8014db2:	6022      	str	r2, [r4, #0]
 8014db4:	d504      	bpl.n	8014dc0 <__sflush_r+0x78>
 8014db6:	1c42      	adds	r2, r0, #1
 8014db8:	d101      	bne.n	8014dbe <__sflush_r+0x76>
 8014dba:	682b      	ldr	r3, [r5, #0]
 8014dbc:	b903      	cbnz	r3, 8014dc0 <__sflush_r+0x78>
 8014dbe:	6560      	str	r0, [r4, #84]	@ 0x54
 8014dc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014dc2:	602f      	str	r7, [r5, #0]
 8014dc4:	b1b9      	cbz	r1, 8014df6 <__sflush_r+0xae>
 8014dc6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014dca:	4299      	cmp	r1, r3
 8014dcc:	d002      	beq.n	8014dd4 <__sflush_r+0x8c>
 8014dce:	4628      	mov	r0, r5
 8014dd0:	f7ff f9f6 	bl	80141c0 <_free_r>
 8014dd4:	2300      	movs	r3, #0
 8014dd6:	6363      	str	r3, [r4, #52]	@ 0x34
 8014dd8:	e00d      	b.n	8014df6 <__sflush_r+0xae>
 8014dda:	2301      	movs	r3, #1
 8014ddc:	4628      	mov	r0, r5
 8014dde:	47b0      	blx	r6
 8014de0:	4602      	mov	r2, r0
 8014de2:	1c50      	adds	r0, r2, #1
 8014de4:	d1c9      	bne.n	8014d7a <__sflush_r+0x32>
 8014de6:	682b      	ldr	r3, [r5, #0]
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d0c6      	beq.n	8014d7a <__sflush_r+0x32>
 8014dec:	2b1d      	cmp	r3, #29
 8014dee:	d001      	beq.n	8014df4 <__sflush_r+0xac>
 8014df0:	2b16      	cmp	r3, #22
 8014df2:	d11e      	bne.n	8014e32 <__sflush_r+0xea>
 8014df4:	602f      	str	r7, [r5, #0]
 8014df6:	2000      	movs	r0, #0
 8014df8:	e022      	b.n	8014e40 <__sflush_r+0xf8>
 8014dfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014dfe:	b21b      	sxth	r3, r3
 8014e00:	e01b      	b.n	8014e3a <__sflush_r+0xf2>
 8014e02:	690f      	ldr	r7, [r1, #16]
 8014e04:	2f00      	cmp	r7, #0
 8014e06:	d0f6      	beq.n	8014df6 <__sflush_r+0xae>
 8014e08:	0793      	lsls	r3, r2, #30
 8014e0a:	680e      	ldr	r6, [r1, #0]
 8014e0c:	bf08      	it	eq
 8014e0e:	694b      	ldreq	r3, [r1, #20]
 8014e10:	600f      	str	r7, [r1, #0]
 8014e12:	bf18      	it	ne
 8014e14:	2300      	movne	r3, #0
 8014e16:	eba6 0807 	sub.w	r8, r6, r7
 8014e1a:	608b      	str	r3, [r1, #8]
 8014e1c:	f1b8 0f00 	cmp.w	r8, #0
 8014e20:	dde9      	ble.n	8014df6 <__sflush_r+0xae>
 8014e22:	6a21      	ldr	r1, [r4, #32]
 8014e24:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014e26:	4643      	mov	r3, r8
 8014e28:	463a      	mov	r2, r7
 8014e2a:	4628      	mov	r0, r5
 8014e2c:	47b0      	blx	r6
 8014e2e:	2800      	cmp	r0, #0
 8014e30:	dc08      	bgt.n	8014e44 <__sflush_r+0xfc>
 8014e32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014e3a:	81a3      	strh	r3, [r4, #12]
 8014e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8014e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e44:	4407      	add	r7, r0
 8014e46:	eba8 0800 	sub.w	r8, r8, r0
 8014e4a:	e7e7      	b.n	8014e1c <__sflush_r+0xd4>
 8014e4c:	dfbffffe 	.word	0xdfbffffe

08014e50 <_fflush_r>:
 8014e50:	b538      	push	{r3, r4, r5, lr}
 8014e52:	690b      	ldr	r3, [r1, #16]
 8014e54:	4605      	mov	r5, r0
 8014e56:	460c      	mov	r4, r1
 8014e58:	b913      	cbnz	r3, 8014e60 <_fflush_r+0x10>
 8014e5a:	2500      	movs	r5, #0
 8014e5c:	4628      	mov	r0, r5
 8014e5e:	bd38      	pop	{r3, r4, r5, pc}
 8014e60:	b118      	cbz	r0, 8014e6a <_fflush_r+0x1a>
 8014e62:	6a03      	ldr	r3, [r0, #32]
 8014e64:	b90b      	cbnz	r3, 8014e6a <_fflush_r+0x1a>
 8014e66:	f7fe fa3b 	bl	80132e0 <__sinit>
 8014e6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d0f3      	beq.n	8014e5a <_fflush_r+0xa>
 8014e72:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014e74:	07d0      	lsls	r0, r2, #31
 8014e76:	d404      	bmi.n	8014e82 <_fflush_r+0x32>
 8014e78:	0599      	lsls	r1, r3, #22
 8014e7a:	d402      	bmi.n	8014e82 <_fflush_r+0x32>
 8014e7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014e7e:	f7fe fb40 	bl	8013502 <__retarget_lock_acquire_recursive>
 8014e82:	4628      	mov	r0, r5
 8014e84:	4621      	mov	r1, r4
 8014e86:	f7ff ff5f 	bl	8014d48 <__sflush_r>
 8014e8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014e8c:	07da      	lsls	r2, r3, #31
 8014e8e:	4605      	mov	r5, r0
 8014e90:	d4e4      	bmi.n	8014e5c <_fflush_r+0xc>
 8014e92:	89a3      	ldrh	r3, [r4, #12]
 8014e94:	059b      	lsls	r3, r3, #22
 8014e96:	d4e1      	bmi.n	8014e5c <_fflush_r+0xc>
 8014e98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014e9a:	f7fe fb33 	bl	8013504 <__retarget_lock_release_recursive>
 8014e9e:	e7dd      	b.n	8014e5c <_fflush_r+0xc>

08014ea0 <_putc_r>:
 8014ea0:	b570      	push	{r4, r5, r6, lr}
 8014ea2:	460d      	mov	r5, r1
 8014ea4:	4614      	mov	r4, r2
 8014ea6:	4606      	mov	r6, r0
 8014ea8:	b118      	cbz	r0, 8014eb2 <_putc_r+0x12>
 8014eaa:	6a03      	ldr	r3, [r0, #32]
 8014eac:	b90b      	cbnz	r3, 8014eb2 <_putc_r+0x12>
 8014eae:	f7fe fa17 	bl	80132e0 <__sinit>
 8014eb2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014eb4:	07d8      	lsls	r0, r3, #31
 8014eb6:	d405      	bmi.n	8014ec4 <_putc_r+0x24>
 8014eb8:	89a3      	ldrh	r3, [r4, #12]
 8014eba:	0599      	lsls	r1, r3, #22
 8014ebc:	d402      	bmi.n	8014ec4 <_putc_r+0x24>
 8014ebe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014ec0:	f7fe fb1f 	bl	8013502 <__retarget_lock_acquire_recursive>
 8014ec4:	68a3      	ldr	r3, [r4, #8]
 8014ec6:	3b01      	subs	r3, #1
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	60a3      	str	r3, [r4, #8]
 8014ecc:	da05      	bge.n	8014eda <_putc_r+0x3a>
 8014ece:	69a2      	ldr	r2, [r4, #24]
 8014ed0:	4293      	cmp	r3, r2
 8014ed2:	db12      	blt.n	8014efa <_putc_r+0x5a>
 8014ed4:	b2eb      	uxtb	r3, r5
 8014ed6:	2b0a      	cmp	r3, #10
 8014ed8:	d00f      	beq.n	8014efa <_putc_r+0x5a>
 8014eda:	6823      	ldr	r3, [r4, #0]
 8014edc:	1c5a      	adds	r2, r3, #1
 8014ede:	6022      	str	r2, [r4, #0]
 8014ee0:	701d      	strb	r5, [r3, #0]
 8014ee2:	b2ed      	uxtb	r5, r5
 8014ee4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014ee6:	07da      	lsls	r2, r3, #31
 8014ee8:	d405      	bmi.n	8014ef6 <_putc_r+0x56>
 8014eea:	89a3      	ldrh	r3, [r4, #12]
 8014eec:	059b      	lsls	r3, r3, #22
 8014eee:	d402      	bmi.n	8014ef6 <_putc_r+0x56>
 8014ef0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014ef2:	f7fe fb07 	bl	8013504 <__retarget_lock_release_recursive>
 8014ef6:	4628      	mov	r0, r5
 8014ef8:	bd70      	pop	{r4, r5, r6, pc}
 8014efa:	4629      	mov	r1, r5
 8014efc:	4622      	mov	r2, r4
 8014efe:	4630      	mov	r0, r6
 8014f00:	f000 f802 	bl	8014f08 <__swbuf_r>
 8014f04:	4605      	mov	r5, r0
 8014f06:	e7ed      	b.n	8014ee4 <_putc_r+0x44>

08014f08 <__swbuf_r>:
 8014f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f0a:	460e      	mov	r6, r1
 8014f0c:	4614      	mov	r4, r2
 8014f0e:	4605      	mov	r5, r0
 8014f10:	b118      	cbz	r0, 8014f1a <__swbuf_r+0x12>
 8014f12:	6a03      	ldr	r3, [r0, #32]
 8014f14:	b90b      	cbnz	r3, 8014f1a <__swbuf_r+0x12>
 8014f16:	f7fe f9e3 	bl	80132e0 <__sinit>
 8014f1a:	69a3      	ldr	r3, [r4, #24]
 8014f1c:	60a3      	str	r3, [r4, #8]
 8014f1e:	89a3      	ldrh	r3, [r4, #12]
 8014f20:	071a      	lsls	r2, r3, #28
 8014f22:	d501      	bpl.n	8014f28 <__swbuf_r+0x20>
 8014f24:	6923      	ldr	r3, [r4, #16]
 8014f26:	b943      	cbnz	r3, 8014f3a <__swbuf_r+0x32>
 8014f28:	4621      	mov	r1, r4
 8014f2a:	4628      	mov	r0, r5
 8014f2c:	f000 f82a 	bl	8014f84 <__swsetup_r>
 8014f30:	b118      	cbz	r0, 8014f3a <__swbuf_r+0x32>
 8014f32:	f04f 37ff 	mov.w	r7, #4294967295
 8014f36:	4638      	mov	r0, r7
 8014f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f3a:	6823      	ldr	r3, [r4, #0]
 8014f3c:	6922      	ldr	r2, [r4, #16]
 8014f3e:	1a98      	subs	r0, r3, r2
 8014f40:	6963      	ldr	r3, [r4, #20]
 8014f42:	b2f6      	uxtb	r6, r6
 8014f44:	4283      	cmp	r3, r0
 8014f46:	4637      	mov	r7, r6
 8014f48:	dc05      	bgt.n	8014f56 <__swbuf_r+0x4e>
 8014f4a:	4621      	mov	r1, r4
 8014f4c:	4628      	mov	r0, r5
 8014f4e:	f7ff ff7f 	bl	8014e50 <_fflush_r>
 8014f52:	2800      	cmp	r0, #0
 8014f54:	d1ed      	bne.n	8014f32 <__swbuf_r+0x2a>
 8014f56:	68a3      	ldr	r3, [r4, #8]
 8014f58:	3b01      	subs	r3, #1
 8014f5a:	60a3      	str	r3, [r4, #8]
 8014f5c:	6823      	ldr	r3, [r4, #0]
 8014f5e:	1c5a      	adds	r2, r3, #1
 8014f60:	6022      	str	r2, [r4, #0]
 8014f62:	701e      	strb	r6, [r3, #0]
 8014f64:	6962      	ldr	r2, [r4, #20]
 8014f66:	1c43      	adds	r3, r0, #1
 8014f68:	429a      	cmp	r2, r3
 8014f6a:	d004      	beq.n	8014f76 <__swbuf_r+0x6e>
 8014f6c:	89a3      	ldrh	r3, [r4, #12]
 8014f6e:	07db      	lsls	r3, r3, #31
 8014f70:	d5e1      	bpl.n	8014f36 <__swbuf_r+0x2e>
 8014f72:	2e0a      	cmp	r6, #10
 8014f74:	d1df      	bne.n	8014f36 <__swbuf_r+0x2e>
 8014f76:	4621      	mov	r1, r4
 8014f78:	4628      	mov	r0, r5
 8014f7a:	f7ff ff69 	bl	8014e50 <_fflush_r>
 8014f7e:	2800      	cmp	r0, #0
 8014f80:	d0d9      	beq.n	8014f36 <__swbuf_r+0x2e>
 8014f82:	e7d6      	b.n	8014f32 <__swbuf_r+0x2a>

08014f84 <__swsetup_r>:
 8014f84:	b538      	push	{r3, r4, r5, lr}
 8014f86:	4b29      	ldr	r3, [pc, #164]	@ (801502c <__swsetup_r+0xa8>)
 8014f88:	4605      	mov	r5, r0
 8014f8a:	6818      	ldr	r0, [r3, #0]
 8014f8c:	460c      	mov	r4, r1
 8014f8e:	b118      	cbz	r0, 8014f98 <__swsetup_r+0x14>
 8014f90:	6a03      	ldr	r3, [r0, #32]
 8014f92:	b90b      	cbnz	r3, 8014f98 <__swsetup_r+0x14>
 8014f94:	f7fe f9a4 	bl	80132e0 <__sinit>
 8014f98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f9c:	0719      	lsls	r1, r3, #28
 8014f9e:	d422      	bmi.n	8014fe6 <__swsetup_r+0x62>
 8014fa0:	06da      	lsls	r2, r3, #27
 8014fa2:	d407      	bmi.n	8014fb4 <__swsetup_r+0x30>
 8014fa4:	2209      	movs	r2, #9
 8014fa6:	602a      	str	r2, [r5, #0]
 8014fa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014fac:	81a3      	strh	r3, [r4, #12]
 8014fae:	f04f 30ff 	mov.w	r0, #4294967295
 8014fb2:	e033      	b.n	801501c <__swsetup_r+0x98>
 8014fb4:	0758      	lsls	r0, r3, #29
 8014fb6:	d512      	bpl.n	8014fde <__swsetup_r+0x5a>
 8014fb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014fba:	b141      	cbz	r1, 8014fce <__swsetup_r+0x4a>
 8014fbc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014fc0:	4299      	cmp	r1, r3
 8014fc2:	d002      	beq.n	8014fca <__swsetup_r+0x46>
 8014fc4:	4628      	mov	r0, r5
 8014fc6:	f7ff f8fb 	bl	80141c0 <_free_r>
 8014fca:	2300      	movs	r3, #0
 8014fcc:	6363      	str	r3, [r4, #52]	@ 0x34
 8014fce:	89a3      	ldrh	r3, [r4, #12]
 8014fd0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014fd4:	81a3      	strh	r3, [r4, #12]
 8014fd6:	2300      	movs	r3, #0
 8014fd8:	6063      	str	r3, [r4, #4]
 8014fda:	6923      	ldr	r3, [r4, #16]
 8014fdc:	6023      	str	r3, [r4, #0]
 8014fde:	89a3      	ldrh	r3, [r4, #12]
 8014fe0:	f043 0308 	orr.w	r3, r3, #8
 8014fe4:	81a3      	strh	r3, [r4, #12]
 8014fe6:	6923      	ldr	r3, [r4, #16]
 8014fe8:	b94b      	cbnz	r3, 8014ffe <__swsetup_r+0x7a>
 8014fea:	89a3      	ldrh	r3, [r4, #12]
 8014fec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014ff0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014ff4:	d003      	beq.n	8014ffe <__swsetup_r+0x7a>
 8014ff6:	4621      	mov	r1, r4
 8014ff8:	4628      	mov	r0, r5
 8014ffa:	f000 f8b3 	bl	8015164 <__smakebuf_r>
 8014ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015002:	f013 0201 	ands.w	r2, r3, #1
 8015006:	d00a      	beq.n	801501e <__swsetup_r+0x9a>
 8015008:	2200      	movs	r2, #0
 801500a:	60a2      	str	r2, [r4, #8]
 801500c:	6962      	ldr	r2, [r4, #20]
 801500e:	4252      	negs	r2, r2
 8015010:	61a2      	str	r2, [r4, #24]
 8015012:	6922      	ldr	r2, [r4, #16]
 8015014:	b942      	cbnz	r2, 8015028 <__swsetup_r+0xa4>
 8015016:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801501a:	d1c5      	bne.n	8014fa8 <__swsetup_r+0x24>
 801501c:	bd38      	pop	{r3, r4, r5, pc}
 801501e:	0799      	lsls	r1, r3, #30
 8015020:	bf58      	it	pl
 8015022:	6962      	ldrpl	r2, [r4, #20]
 8015024:	60a2      	str	r2, [r4, #8]
 8015026:	e7f4      	b.n	8015012 <__swsetup_r+0x8e>
 8015028:	2000      	movs	r0, #0
 801502a:	e7f7      	b.n	801501c <__swsetup_r+0x98>
 801502c:	20000138 	.word	0x20000138

08015030 <_sbrk_r>:
 8015030:	b538      	push	{r3, r4, r5, lr}
 8015032:	4d06      	ldr	r5, [pc, #24]	@ (801504c <_sbrk_r+0x1c>)
 8015034:	2300      	movs	r3, #0
 8015036:	4604      	mov	r4, r0
 8015038:	4608      	mov	r0, r1
 801503a:	602b      	str	r3, [r5, #0]
 801503c:	f7f0 f882 	bl	8005144 <_sbrk>
 8015040:	1c43      	adds	r3, r0, #1
 8015042:	d102      	bne.n	801504a <_sbrk_r+0x1a>
 8015044:	682b      	ldr	r3, [r5, #0]
 8015046:	b103      	cbz	r3, 801504a <_sbrk_r+0x1a>
 8015048:	6023      	str	r3, [r4, #0]
 801504a:	bd38      	pop	{r3, r4, r5, pc}
 801504c:	2000230c 	.word	0x2000230c

08015050 <__assert_func>:
 8015050:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015052:	4614      	mov	r4, r2
 8015054:	461a      	mov	r2, r3
 8015056:	4b09      	ldr	r3, [pc, #36]	@ (801507c <__assert_func+0x2c>)
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	4605      	mov	r5, r0
 801505c:	68d8      	ldr	r0, [r3, #12]
 801505e:	b954      	cbnz	r4, 8015076 <__assert_func+0x26>
 8015060:	4b07      	ldr	r3, [pc, #28]	@ (8015080 <__assert_func+0x30>)
 8015062:	461c      	mov	r4, r3
 8015064:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015068:	9100      	str	r1, [sp, #0]
 801506a:	462b      	mov	r3, r5
 801506c:	4905      	ldr	r1, [pc, #20]	@ (8015084 <__assert_func+0x34>)
 801506e:	f000 f841 	bl	80150f4 <fiprintf>
 8015072:	f000 f8d5 	bl	8015220 <abort>
 8015076:	4b04      	ldr	r3, [pc, #16]	@ (8015088 <__assert_func+0x38>)
 8015078:	e7f4      	b.n	8015064 <__assert_func+0x14>
 801507a:	bf00      	nop
 801507c:	20000138 	.word	0x20000138
 8015080:	080156ce 	.word	0x080156ce
 8015084:	080156a0 	.word	0x080156a0
 8015088:	08015693 	.word	0x08015693

0801508c <_calloc_r>:
 801508c:	b570      	push	{r4, r5, r6, lr}
 801508e:	fba1 5402 	umull	r5, r4, r1, r2
 8015092:	b93c      	cbnz	r4, 80150a4 <_calloc_r+0x18>
 8015094:	4629      	mov	r1, r5
 8015096:	f7ff f907 	bl	80142a8 <_malloc_r>
 801509a:	4606      	mov	r6, r0
 801509c:	b928      	cbnz	r0, 80150aa <_calloc_r+0x1e>
 801509e:	2600      	movs	r6, #0
 80150a0:	4630      	mov	r0, r6
 80150a2:	bd70      	pop	{r4, r5, r6, pc}
 80150a4:	220c      	movs	r2, #12
 80150a6:	6002      	str	r2, [r0, #0]
 80150a8:	e7f9      	b.n	801509e <_calloc_r+0x12>
 80150aa:	462a      	mov	r2, r5
 80150ac:	4621      	mov	r1, r4
 80150ae:	f7fe f9aa 	bl	8013406 <memset>
 80150b2:	e7f5      	b.n	80150a0 <_calloc_r+0x14>

080150b4 <__ascii_mbtowc>:
 80150b4:	b082      	sub	sp, #8
 80150b6:	b901      	cbnz	r1, 80150ba <__ascii_mbtowc+0x6>
 80150b8:	a901      	add	r1, sp, #4
 80150ba:	b142      	cbz	r2, 80150ce <__ascii_mbtowc+0x1a>
 80150bc:	b14b      	cbz	r3, 80150d2 <__ascii_mbtowc+0x1e>
 80150be:	7813      	ldrb	r3, [r2, #0]
 80150c0:	600b      	str	r3, [r1, #0]
 80150c2:	7812      	ldrb	r2, [r2, #0]
 80150c4:	1e10      	subs	r0, r2, #0
 80150c6:	bf18      	it	ne
 80150c8:	2001      	movne	r0, #1
 80150ca:	b002      	add	sp, #8
 80150cc:	4770      	bx	lr
 80150ce:	4610      	mov	r0, r2
 80150d0:	e7fb      	b.n	80150ca <__ascii_mbtowc+0x16>
 80150d2:	f06f 0001 	mvn.w	r0, #1
 80150d6:	e7f8      	b.n	80150ca <__ascii_mbtowc+0x16>

080150d8 <__ascii_wctomb>:
 80150d8:	4603      	mov	r3, r0
 80150da:	4608      	mov	r0, r1
 80150dc:	b141      	cbz	r1, 80150f0 <__ascii_wctomb+0x18>
 80150de:	2aff      	cmp	r2, #255	@ 0xff
 80150e0:	d904      	bls.n	80150ec <__ascii_wctomb+0x14>
 80150e2:	228a      	movs	r2, #138	@ 0x8a
 80150e4:	601a      	str	r2, [r3, #0]
 80150e6:	f04f 30ff 	mov.w	r0, #4294967295
 80150ea:	4770      	bx	lr
 80150ec:	700a      	strb	r2, [r1, #0]
 80150ee:	2001      	movs	r0, #1
 80150f0:	4770      	bx	lr
	...

080150f4 <fiprintf>:
 80150f4:	b40e      	push	{r1, r2, r3}
 80150f6:	b503      	push	{r0, r1, lr}
 80150f8:	4601      	mov	r1, r0
 80150fa:	ab03      	add	r3, sp, #12
 80150fc:	4805      	ldr	r0, [pc, #20]	@ (8015114 <fiprintf+0x20>)
 80150fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8015102:	6800      	ldr	r0, [r0, #0]
 8015104:	9301      	str	r3, [sp, #4]
 8015106:	f7ff fd07 	bl	8014b18 <_vfiprintf_r>
 801510a:	b002      	add	sp, #8
 801510c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015110:	b003      	add	sp, #12
 8015112:	4770      	bx	lr
 8015114:	20000138 	.word	0x20000138

08015118 <__swhatbuf_r>:
 8015118:	b570      	push	{r4, r5, r6, lr}
 801511a:	460c      	mov	r4, r1
 801511c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015120:	2900      	cmp	r1, #0
 8015122:	b096      	sub	sp, #88	@ 0x58
 8015124:	4615      	mov	r5, r2
 8015126:	461e      	mov	r6, r3
 8015128:	da0d      	bge.n	8015146 <__swhatbuf_r+0x2e>
 801512a:	89a3      	ldrh	r3, [r4, #12]
 801512c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015130:	f04f 0100 	mov.w	r1, #0
 8015134:	bf14      	ite	ne
 8015136:	2340      	movne	r3, #64	@ 0x40
 8015138:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801513c:	2000      	movs	r0, #0
 801513e:	6031      	str	r1, [r6, #0]
 8015140:	602b      	str	r3, [r5, #0]
 8015142:	b016      	add	sp, #88	@ 0x58
 8015144:	bd70      	pop	{r4, r5, r6, pc}
 8015146:	466a      	mov	r2, sp
 8015148:	f000 f848 	bl	80151dc <_fstat_r>
 801514c:	2800      	cmp	r0, #0
 801514e:	dbec      	blt.n	801512a <__swhatbuf_r+0x12>
 8015150:	9901      	ldr	r1, [sp, #4]
 8015152:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015156:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801515a:	4259      	negs	r1, r3
 801515c:	4159      	adcs	r1, r3
 801515e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015162:	e7eb      	b.n	801513c <__swhatbuf_r+0x24>

08015164 <__smakebuf_r>:
 8015164:	898b      	ldrh	r3, [r1, #12]
 8015166:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015168:	079d      	lsls	r5, r3, #30
 801516a:	4606      	mov	r6, r0
 801516c:	460c      	mov	r4, r1
 801516e:	d507      	bpl.n	8015180 <__smakebuf_r+0x1c>
 8015170:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015174:	6023      	str	r3, [r4, #0]
 8015176:	6123      	str	r3, [r4, #16]
 8015178:	2301      	movs	r3, #1
 801517a:	6163      	str	r3, [r4, #20]
 801517c:	b003      	add	sp, #12
 801517e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015180:	ab01      	add	r3, sp, #4
 8015182:	466a      	mov	r2, sp
 8015184:	f7ff ffc8 	bl	8015118 <__swhatbuf_r>
 8015188:	9f00      	ldr	r7, [sp, #0]
 801518a:	4605      	mov	r5, r0
 801518c:	4639      	mov	r1, r7
 801518e:	4630      	mov	r0, r6
 8015190:	f7ff f88a 	bl	80142a8 <_malloc_r>
 8015194:	b948      	cbnz	r0, 80151aa <__smakebuf_r+0x46>
 8015196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801519a:	059a      	lsls	r2, r3, #22
 801519c:	d4ee      	bmi.n	801517c <__smakebuf_r+0x18>
 801519e:	f023 0303 	bic.w	r3, r3, #3
 80151a2:	f043 0302 	orr.w	r3, r3, #2
 80151a6:	81a3      	strh	r3, [r4, #12]
 80151a8:	e7e2      	b.n	8015170 <__smakebuf_r+0xc>
 80151aa:	89a3      	ldrh	r3, [r4, #12]
 80151ac:	6020      	str	r0, [r4, #0]
 80151ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80151b2:	81a3      	strh	r3, [r4, #12]
 80151b4:	9b01      	ldr	r3, [sp, #4]
 80151b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80151ba:	b15b      	cbz	r3, 80151d4 <__smakebuf_r+0x70>
 80151bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80151c0:	4630      	mov	r0, r6
 80151c2:	f000 f81d 	bl	8015200 <_isatty_r>
 80151c6:	b128      	cbz	r0, 80151d4 <__smakebuf_r+0x70>
 80151c8:	89a3      	ldrh	r3, [r4, #12]
 80151ca:	f023 0303 	bic.w	r3, r3, #3
 80151ce:	f043 0301 	orr.w	r3, r3, #1
 80151d2:	81a3      	strh	r3, [r4, #12]
 80151d4:	89a3      	ldrh	r3, [r4, #12]
 80151d6:	431d      	orrs	r5, r3
 80151d8:	81a5      	strh	r5, [r4, #12]
 80151da:	e7cf      	b.n	801517c <__smakebuf_r+0x18>

080151dc <_fstat_r>:
 80151dc:	b538      	push	{r3, r4, r5, lr}
 80151de:	4d07      	ldr	r5, [pc, #28]	@ (80151fc <_fstat_r+0x20>)
 80151e0:	2300      	movs	r3, #0
 80151e2:	4604      	mov	r4, r0
 80151e4:	4608      	mov	r0, r1
 80151e6:	4611      	mov	r1, r2
 80151e8:	602b      	str	r3, [r5, #0]
 80151ea:	f7ef ff83 	bl	80050f4 <_fstat>
 80151ee:	1c43      	adds	r3, r0, #1
 80151f0:	d102      	bne.n	80151f8 <_fstat_r+0x1c>
 80151f2:	682b      	ldr	r3, [r5, #0]
 80151f4:	b103      	cbz	r3, 80151f8 <_fstat_r+0x1c>
 80151f6:	6023      	str	r3, [r4, #0]
 80151f8:	bd38      	pop	{r3, r4, r5, pc}
 80151fa:	bf00      	nop
 80151fc:	2000230c 	.word	0x2000230c

08015200 <_isatty_r>:
 8015200:	b538      	push	{r3, r4, r5, lr}
 8015202:	4d06      	ldr	r5, [pc, #24]	@ (801521c <_isatty_r+0x1c>)
 8015204:	2300      	movs	r3, #0
 8015206:	4604      	mov	r4, r0
 8015208:	4608      	mov	r0, r1
 801520a:	602b      	str	r3, [r5, #0]
 801520c:	f7ef ff82 	bl	8005114 <_isatty>
 8015210:	1c43      	adds	r3, r0, #1
 8015212:	d102      	bne.n	801521a <_isatty_r+0x1a>
 8015214:	682b      	ldr	r3, [r5, #0]
 8015216:	b103      	cbz	r3, 801521a <_isatty_r+0x1a>
 8015218:	6023      	str	r3, [r4, #0]
 801521a:	bd38      	pop	{r3, r4, r5, pc}
 801521c:	2000230c 	.word	0x2000230c

08015220 <abort>:
 8015220:	b508      	push	{r3, lr}
 8015222:	2006      	movs	r0, #6
 8015224:	f000 f82c 	bl	8015280 <raise>
 8015228:	2001      	movs	r0, #1
 801522a:	f7ef ff13 	bl	8005054 <_exit>

0801522e <_raise_r>:
 801522e:	291f      	cmp	r1, #31
 8015230:	b538      	push	{r3, r4, r5, lr}
 8015232:	4605      	mov	r5, r0
 8015234:	460c      	mov	r4, r1
 8015236:	d904      	bls.n	8015242 <_raise_r+0x14>
 8015238:	2316      	movs	r3, #22
 801523a:	6003      	str	r3, [r0, #0]
 801523c:	f04f 30ff 	mov.w	r0, #4294967295
 8015240:	bd38      	pop	{r3, r4, r5, pc}
 8015242:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015244:	b112      	cbz	r2, 801524c <_raise_r+0x1e>
 8015246:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801524a:	b94b      	cbnz	r3, 8015260 <_raise_r+0x32>
 801524c:	4628      	mov	r0, r5
 801524e:	f000 f831 	bl	80152b4 <_getpid_r>
 8015252:	4622      	mov	r2, r4
 8015254:	4601      	mov	r1, r0
 8015256:	4628      	mov	r0, r5
 8015258:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801525c:	f000 b818 	b.w	8015290 <_kill_r>
 8015260:	2b01      	cmp	r3, #1
 8015262:	d00a      	beq.n	801527a <_raise_r+0x4c>
 8015264:	1c59      	adds	r1, r3, #1
 8015266:	d103      	bne.n	8015270 <_raise_r+0x42>
 8015268:	2316      	movs	r3, #22
 801526a:	6003      	str	r3, [r0, #0]
 801526c:	2001      	movs	r0, #1
 801526e:	e7e7      	b.n	8015240 <_raise_r+0x12>
 8015270:	2100      	movs	r1, #0
 8015272:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015276:	4620      	mov	r0, r4
 8015278:	4798      	blx	r3
 801527a:	2000      	movs	r0, #0
 801527c:	e7e0      	b.n	8015240 <_raise_r+0x12>
	...

08015280 <raise>:
 8015280:	4b02      	ldr	r3, [pc, #8]	@ (801528c <raise+0xc>)
 8015282:	4601      	mov	r1, r0
 8015284:	6818      	ldr	r0, [r3, #0]
 8015286:	f7ff bfd2 	b.w	801522e <_raise_r>
 801528a:	bf00      	nop
 801528c:	20000138 	.word	0x20000138

08015290 <_kill_r>:
 8015290:	b538      	push	{r3, r4, r5, lr}
 8015292:	4d07      	ldr	r5, [pc, #28]	@ (80152b0 <_kill_r+0x20>)
 8015294:	2300      	movs	r3, #0
 8015296:	4604      	mov	r4, r0
 8015298:	4608      	mov	r0, r1
 801529a:	4611      	mov	r1, r2
 801529c:	602b      	str	r3, [r5, #0]
 801529e:	f7ef fec9 	bl	8005034 <_kill>
 80152a2:	1c43      	adds	r3, r0, #1
 80152a4:	d102      	bne.n	80152ac <_kill_r+0x1c>
 80152a6:	682b      	ldr	r3, [r5, #0]
 80152a8:	b103      	cbz	r3, 80152ac <_kill_r+0x1c>
 80152aa:	6023      	str	r3, [r4, #0]
 80152ac:	bd38      	pop	{r3, r4, r5, pc}
 80152ae:	bf00      	nop
 80152b0:	2000230c 	.word	0x2000230c

080152b4 <_getpid_r>:
 80152b4:	f7ef beb6 	b.w	8005024 <_getpid>

080152b8 <_init>:
 80152b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152ba:	bf00      	nop
 80152bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80152be:	bc08      	pop	{r3}
 80152c0:	469e      	mov	lr, r3
 80152c2:	4770      	bx	lr

080152c4 <_fini>:
 80152c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152c6:	bf00      	nop
 80152c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80152ca:	bc08      	pop	{r3}
 80152cc:	469e      	mov	lr, r3
 80152ce:	4770      	bx	lr
