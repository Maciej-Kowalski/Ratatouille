
ratatouille_transfer_audio_buffered.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000148a0  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000500  080149e0  080149e0  000159e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014ee0  08014ee0  00015ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014ee8  08014ee8  00015ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08014eec  08014eec  00015eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002e8  20000008  08014ef0  00016008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000021dc  200002f0  080151d8  000162f0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200024cc  080151d8  000164cc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000162f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002dcf1  00000000  00000000  00016320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000057a2  00000000  00000000  00044011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002b50  00000000  00000000  000497b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00002167  00000000  00000000  0004c308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002ab7d  00000000  00000000  0004e46f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002f358  00000000  00000000  00078fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00100a3b  00000000  00000000  000a8344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a8d7f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ca30  00000000  00000000  001a8dc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000094  00000000  00000000  001b57f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002f0 	.word	0x200002f0
 800015c:	00000000 	.word	0x00000000
 8000160:	080149c8 	.word	0x080149c8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002f4 	.word	0x200002f4
 800017c:	080149c8 	.word	0x080149c8

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b96a 	b.w	8000e44 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	460c      	mov	r4, r1
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d14e      	bne.n	8000c32 <__udivmoddi4+0xaa>
 8000b94:	4694      	mov	ip, r2
 8000b96:	458c      	cmp	ip, r1
 8000b98:	4686      	mov	lr, r0
 8000b9a:	fab2 f282 	clz	r2, r2
 8000b9e:	d962      	bls.n	8000c66 <__udivmoddi4+0xde>
 8000ba0:	b14a      	cbz	r2, 8000bb6 <__udivmoddi4+0x2e>
 8000ba2:	f1c2 0320 	rsb	r3, r2, #32
 8000ba6:	4091      	lsls	r1, r2
 8000ba8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb0:	4319      	orrs	r1, r3
 8000bb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bba:	fa1f f68c 	uxth.w	r6, ip
 8000bbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000bca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bce:	fb04 f106 	mul.w	r1, r4, r6
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	d90a      	bls.n	8000bec <__udivmoddi4+0x64>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bde:	f080 8112 	bcs.w	8000e06 <__udivmoddi4+0x27e>
 8000be2:	4299      	cmp	r1, r3
 8000be4:	f240 810f 	bls.w	8000e06 <__udivmoddi4+0x27e>
 8000be8:	3c02      	subs	r4, #2
 8000bea:	4463      	add	r3, ip
 8000bec:	1a59      	subs	r1, r3, r1
 8000bee:	fa1f f38e 	uxth.w	r3, lr
 8000bf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000bfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfe:	fb00 f606 	mul.w	r6, r0, r6
 8000c02:	429e      	cmp	r6, r3
 8000c04:	d90a      	bls.n	8000c1c <__udivmoddi4+0x94>
 8000c06:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c0e:	f080 80fc 	bcs.w	8000e0a <__udivmoddi4+0x282>
 8000c12:	429e      	cmp	r6, r3
 8000c14:	f240 80f9 	bls.w	8000e0a <__udivmoddi4+0x282>
 8000c18:	4463      	add	r3, ip
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	1b9b      	subs	r3, r3, r6
 8000c1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11d      	cbz	r5, 8000c2e <__udivmoddi4+0xa6>
 8000c26:	40d3      	lsrs	r3, r2
 8000c28:	2200      	movs	r2, #0
 8000c2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d905      	bls.n	8000c42 <__udivmoddi4+0xba>
 8000c36:	b10d      	cbz	r5, 8000c3c <__udivmoddi4+0xb4>
 8000c38:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4608      	mov	r0, r1
 8000c40:	e7f5      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000c42:	fab3 f183 	clz	r1, r3
 8000c46:	2900      	cmp	r1, #0
 8000c48:	d146      	bne.n	8000cd8 <__udivmoddi4+0x150>
 8000c4a:	42a3      	cmp	r3, r4
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xcc>
 8000c4e:	4290      	cmp	r0, r2
 8000c50:	f0c0 80f0 	bcc.w	8000e34 <__udivmoddi4+0x2ac>
 8000c54:	1a86      	subs	r6, r0, r2
 8000c56:	eb64 0303 	sbc.w	r3, r4, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	2d00      	cmp	r5, #0
 8000c5e:	d0e6      	beq.n	8000c2e <__udivmoddi4+0xa6>
 8000c60:	e9c5 6300 	strd	r6, r3, [r5]
 8000c64:	e7e3      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	f040 8090 	bne.w	8000d8c <__udivmoddi4+0x204>
 8000c6c:	eba1 040c 	sub.w	r4, r1, ip
 8000c70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c74:	fa1f f78c 	uxth.w	r7, ip
 8000c78:	2101      	movs	r1, #1
 8000c7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c82:	fb08 4416 	mls	r4, r8, r6, r4
 8000c86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c8a:	fb07 f006 	mul.w	r0, r7, r6
 8000c8e:	4298      	cmp	r0, r3
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x11c>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x11a>
 8000c9c:	4298      	cmp	r0, r3
 8000c9e:	f200 80cd 	bhi.w	8000e3c <__udivmoddi4+0x2b4>
 8000ca2:	4626      	mov	r6, r4
 8000ca4:	1a1c      	subs	r4, r3, r0
 8000ca6:	fa1f f38e 	uxth.w	r3, lr
 8000caa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cae:	fb08 4410 	mls	r4, r8, r0, r4
 8000cb2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cb6:	fb00 f707 	mul.w	r7, r0, r7
 8000cba:	429f      	cmp	r7, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x148>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x146>
 8000cc8:	429f      	cmp	r7, r3
 8000cca:	f200 80b0 	bhi.w	8000e2e <__udivmoddi4+0x2a6>
 8000cce:	4620      	mov	r0, r4
 8000cd0:	1bdb      	subs	r3, r3, r7
 8000cd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd6:	e7a5      	b.n	8000c24 <__udivmoddi4+0x9c>
 8000cd8:	f1c1 0620 	rsb	r6, r1, #32
 8000cdc:	408b      	lsls	r3, r1
 8000cde:	fa22 f706 	lsr.w	r7, r2, r6
 8000ce2:	431f      	orrs	r7, r3
 8000ce4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ce8:	fa04 f301 	lsl.w	r3, r4, r1
 8000cec:	ea43 030c 	orr.w	r3, r3, ip
 8000cf0:	40f4      	lsrs	r4, r6
 8000cf2:	fa00 f801 	lsl.w	r8, r0, r1
 8000cf6:	0c38      	lsrs	r0, r7, #16
 8000cf8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000d00:	fa1f fc87 	uxth.w	ip, r7
 8000d04:	fb00 441e 	mls	r4, r0, lr, r4
 8000d08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d10:	45a1      	cmp	r9, r4
 8000d12:	fa02 f201 	lsl.w	r2, r2, r1
 8000d16:	d90a      	bls.n	8000d2e <__udivmoddi4+0x1a6>
 8000d18:	193c      	adds	r4, r7, r4
 8000d1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d1e:	f080 8084 	bcs.w	8000e2a <__udivmoddi4+0x2a2>
 8000d22:	45a1      	cmp	r9, r4
 8000d24:	f240 8081 	bls.w	8000e2a <__udivmoddi4+0x2a2>
 8000d28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d2c:	443c      	add	r4, r7
 8000d2e:	eba4 0409 	sub.w	r4, r4, r9
 8000d32:	fa1f f983 	uxth.w	r9, r3
 8000d36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d46:	45a4      	cmp	ip, r4
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x1d2>
 8000d4a:	193c      	adds	r4, r7, r4
 8000d4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d50:	d267      	bcs.n	8000e22 <__udivmoddi4+0x29a>
 8000d52:	45a4      	cmp	ip, r4
 8000d54:	d965      	bls.n	8000e22 <__udivmoddi4+0x29a>
 8000d56:	3b02      	subs	r3, #2
 8000d58:	443c      	add	r4, r7
 8000d5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000d62:	eba4 040c 	sub.w	r4, r4, ip
 8000d66:	429c      	cmp	r4, r3
 8000d68:	46ce      	mov	lr, r9
 8000d6a:	469c      	mov	ip, r3
 8000d6c:	d351      	bcc.n	8000e12 <__udivmoddi4+0x28a>
 8000d6e:	d04e      	beq.n	8000e0e <__udivmoddi4+0x286>
 8000d70:	b155      	cbz	r5, 8000d88 <__udivmoddi4+0x200>
 8000d72:	ebb8 030e 	subs.w	r3, r8, lr
 8000d76:	eb64 040c 	sbc.w	r4, r4, ip
 8000d7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d7e:	40cb      	lsrs	r3, r1
 8000d80:	431e      	orrs	r6, r3
 8000d82:	40cc      	lsrs	r4, r1
 8000d84:	e9c5 6400 	strd	r6, r4, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	e750      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000d8c:	f1c2 0320 	rsb	r3, r2, #32
 8000d90:	fa20 f103 	lsr.w	r1, r0, r3
 8000d94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d98:	fa24 f303 	lsr.w	r3, r4, r3
 8000d9c:	4094      	lsls	r4, r2
 8000d9e:	430c      	orrs	r4, r1
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da8:	fa1f f78c 	uxth.w	r7, ip
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3110 	mls	r1, r8, r0, r3
 8000db4:	0c23      	lsrs	r3, r4, #16
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f107 	mul.w	r1, r0, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x24c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dca:	d22c      	bcs.n	8000e26 <__udivmoddi4+0x29e>
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	d92a      	bls.n	8000e26 <__udivmoddi4+0x29e>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ddc:	fb08 3311 	mls	r3, r8, r1, r3
 8000de0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de4:	fb01 f307 	mul.w	r3, r1, r7
 8000de8:	42a3      	cmp	r3, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x276>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000df4:	d213      	bcs.n	8000e1e <__udivmoddi4+0x296>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d911      	bls.n	8000e1e <__udivmoddi4+0x296>
 8000dfa:	3902      	subs	r1, #2
 8000dfc:	4464      	add	r4, ip
 8000dfe:	1ae4      	subs	r4, r4, r3
 8000e00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e04:	e739      	b.n	8000c7a <__udivmoddi4+0xf2>
 8000e06:	4604      	mov	r4, r0
 8000e08:	e6f0      	b.n	8000bec <__udivmoddi4+0x64>
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e706      	b.n	8000c1c <__udivmoddi4+0x94>
 8000e0e:	45c8      	cmp	r8, r9
 8000e10:	d2ae      	bcs.n	8000d70 <__udivmoddi4+0x1e8>
 8000e12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e1a:	3801      	subs	r0, #1
 8000e1c:	e7a8      	b.n	8000d70 <__udivmoddi4+0x1e8>
 8000e1e:	4631      	mov	r1, r6
 8000e20:	e7ed      	b.n	8000dfe <__udivmoddi4+0x276>
 8000e22:	4603      	mov	r3, r0
 8000e24:	e799      	b.n	8000d5a <__udivmoddi4+0x1d2>
 8000e26:	4630      	mov	r0, r6
 8000e28:	e7d4      	b.n	8000dd4 <__udivmoddi4+0x24c>
 8000e2a:	46d6      	mov	lr, sl
 8000e2c:	e77f      	b.n	8000d2e <__udivmoddi4+0x1a6>
 8000e2e:	4463      	add	r3, ip
 8000e30:	3802      	subs	r0, #2
 8000e32:	e74d      	b.n	8000cd0 <__udivmoddi4+0x148>
 8000e34:	4606      	mov	r6, r0
 8000e36:	4623      	mov	r3, r4
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e70f      	b.n	8000c5c <__udivmoddi4+0xd4>
 8000e3c:	3e02      	subs	r6, #2
 8000e3e:	4463      	add	r3, ip
 8000e40:	e730      	b.n	8000ca4 <__udivmoddi4+0x11c>
 8000e42:	bf00      	nop

08000e44 <__aeabi_idiv0>:
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop

08000e48 <bmi160_get_regs>:
/*!
 * @brief This API reads the data from the given register address
 * of sensor.
 */
int8_t bmi160_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b087      	sub	sp, #28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60b9      	str	r1, [r7, #8]
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	4603      	mov	r3, r0
 8000e54:	73fb      	strb	r3, [r7, #15]
 8000e56:	4613      	mov	r3, r2
 8000e58:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	75fb      	strb	r3, [r7, #23]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->read == NULL))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d003      	beq.n	8000e6c <bmi160_get_regs+0x24>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	69db      	ldr	r3, [r3, #28]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d102      	bne.n	8000e72 <bmi160_get_regs+0x2a>
    {
        rslt = BMI160_E_NULL_PTR;
 8000e6c:	23ff      	movs	r3, #255	@ 0xff
 8000e6e:	75fb      	strb	r3, [r7, #23]
 8000e70:	e017      	b.n	8000ea2 <bmi160_get_regs+0x5a>
    }
    else if (len == 0)
 8000e72:	89bb      	ldrh	r3, [r7, #12]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d102      	bne.n	8000e7e <bmi160_get_regs+0x36>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 8000e78:	23f4      	movs	r3, #244	@ 0xf4
 8000e7a:	75fb      	strb	r3, [r7, #23]
 8000e7c:	e011      	b.n	8000ea2 <bmi160_get_regs+0x5a>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	789b      	ldrb	r3, [r3, #2]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d103      	bne.n	8000e8e <bmi160_get_regs+0x46>
        {
            reg_addr = (reg_addr | BMI160_SPI_RD_MASK);
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e8c:	73fb      	strb	r3, [r7, #15]
        }

        rslt = dev->read(dev->id, reg_addr, data, len);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	69dc      	ldr	r4, [r3, #28]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	7858      	ldrb	r0, [r3, #1]
 8000e96:	89bb      	ldrh	r3, [r7, #12]
 8000e98:	7bf9      	ldrb	r1, [r7, #15]
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	47a0      	blx	r4
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000ea2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	371c      	adds	r7, #28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd90      	pop	{r4, r7, pc}

08000eae <bmi160_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of sensor.
 */
int8_t bmi160_set_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 8000eae:	b590      	push	{r4, r7, lr}
 8000eb0:	b087      	sub	sp, #28
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	4603      	mov	r3, r0
 8000eba:	73fb      	strb	r3, [r7, #15]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	75fb      	strb	r3, [r7, #23]
    uint8_t count = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	75bb      	strb	r3, [r7, #22]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->write == NULL))
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <bmi160_set_regs+0x28>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6a1b      	ldr	r3, [r3, #32]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d102      	bne.n	8000edc <bmi160_set_regs+0x2e>
    {
        rslt = BMI160_E_NULL_PTR;
 8000ed6:	23ff      	movs	r3, #255	@ 0xff
 8000ed8:	75fb      	strb	r3, [r7, #23]
 8000eda:	e045      	b.n	8000f68 <bmi160_set_regs+0xba>
    }
    else if (len == 0)
 8000edc:	89bb      	ldrh	r3, [r7, #12]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d102      	bne.n	8000ee8 <bmi160_set_regs+0x3a>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 8000ee2:	23f4      	movs	r3, #244	@ 0xf4
 8000ee4:	75fb      	strb	r3, [r7, #23]
 8000ee6:	e03f      	b.n	8000f68 <bmi160_set_regs+0xba>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	789b      	ldrb	r3, [r3, #2]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d103      	bne.n	8000ef8 <bmi160_set_regs+0x4a>
        {
            reg_addr = (reg_addr & BMI160_SPI_WR_MASK);
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000ef6:	73fb      	strb	r3, [r7, #15]
        }

        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	7a1b      	ldrb	r3, [r3, #8]
 8000efc:	2b11      	cmp	r3, #17
 8000efe:	d003      	beq.n	8000f08 <bmi160_set_regs+0x5a>
            (dev->prev_gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	7c1b      	ldrb	r3, [r3, #16]
        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 8000f04:	2b15      	cmp	r3, #21
 8000f06:	d124      	bne.n	8000f52 <bmi160_set_regs+0xa4>
        {
            rslt = dev->write(dev->id, reg_addr, data, len);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6a1c      	ldr	r4, [r3, #32]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	7858      	ldrb	r0, [r3, #1]
 8000f10:	89bb      	ldrh	r3, [r7, #12]
 8000f12:	7bf9      	ldrb	r1, [r7, #15]
 8000f14:	68ba      	ldr	r2, [r7, #8]
 8000f16:	47a0      	blx	r4
 8000f18:	4603      	mov	r3, r0
 8000f1a:	75fb      	strb	r3, [r7, #23]

            /* Kindly refer bmi160 data sheet section 3.2.4 */
            dev->delay_ms(1);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f20:	2001      	movs	r0, #1
 8000f22:	4798      	blx	r3
 8000f24:	e01a      	b.n	8000f5c <bmi160_set_regs+0xae>
        {
            /*Burst write is not allowed in
             * suspend & low power mode */
            for (; count < len; count++)
            {
                rslt = dev->write(dev->id, reg_addr, &data[count], 1);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6a1c      	ldr	r4, [r3, #32]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	7858      	ldrb	r0, [r3, #1]
 8000f2e:	7dbb      	ldrb	r3, [r7, #22]
 8000f30:	68ba      	ldr	r2, [r7, #8]
 8000f32:	441a      	add	r2, r3
 8000f34:	7bf9      	ldrb	r1, [r7, #15]
 8000f36:	2301      	movs	r3, #1
 8000f38:	47a0      	blx	r4
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	75fb      	strb	r3, [r7, #23]
                reg_addr++;
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	3301      	adds	r3, #1
 8000f42:	73fb      	strb	r3, [r7, #15]

                /* Kindly refer bmi160 data sheet section 3.2.4 */
                dev->delay_ms(1);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f48:	2001      	movs	r0, #1
 8000f4a:	4798      	blx	r3
            for (; count < len; count++)
 8000f4c:	7dbb      	ldrb	r3, [r7, #22]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	75bb      	strb	r3, [r7, #22]
 8000f52:	7dbb      	ldrb	r3, [r7, #22]
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	89ba      	ldrh	r2, [r7, #12]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d8e4      	bhi.n	8000f26 <bmi160_set_regs+0x78>

            }
        }

        if (rslt != BMI160_OK)
 8000f5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <bmi160_set_regs+0xba>
        {
            rslt = BMI160_E_COM_FAIL;
 8000f64:	23fe      	movs	r3, #254	@ 0xfe
 8000f66:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8000f68:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	371c      	adds	r7, #28
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd90      	pop	{r4, r7, pc}

08000f74 <bmi160_init>:
 *  @brief This API is the entry point for sensor.It performs
 *  the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of bmi160 sensor.
 */
int8_t bmi160_init(struct bmi160_dev *dev)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;
    uint8_t try = 3;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f000 fccd 	bl	8001920 <null_ptr_check>
 8000f86:	4603      	mov	r3, r0
 8000f88:	73fb      	strb	r3, [r7, #15]

    /* Dummy read of 0x7F register to enable SPI Interface
     * if SPI is used */
    if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 8000f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d10c      	bne.n	8000fac <bmi160_init+0x38>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	789b      	ldrb	r3, [r3, #2]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d108      	bne.n	8000fac <bmi160_init+0x38>
    {
        rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 8000f9a:	f107 010d 	add.w	r1, r7, #13
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	207f      	movs	r0, #127	@ 0x7f
 8000fa4:	f7ff ff50 	bl	8000e48 <bmi160_get_regs>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	73fb      	strb	r3, [r7, #15]
    }

    if (rslt == BMI160_OK)
 8000fac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d127      	bne.n	8001004 <bmi160_init+0x90>
    {
        /* Assign chip id as zero */
        dev->chip_id = 0;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]

        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 8000fba:	e007      	b.n	8000fcc <bmi160_init+0x58>
        {
            /* Read chip_id */
            rslt = bmi160_get_regs(BMI160_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8000fbc:	6879      	ldr	r1, [r7, #4]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	f7ff ff40 	bl	8000e48 <bmi160_get_regs>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	73fb      	strb	r3, [r7, #15]
        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 8000fcc:	7bbb      	ldrb	r3, [r7, #14]
 8000fce:	1e5a      	subs	r2, r3, #1
 8000fd0:	73ba      	strb	r2, [r7, #14]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <bmi160_init+0x6a>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2bd1      	cmp	r3, #209	@ 0xd1
 8000fdc:	d1ee      	bne.n	8000fbc <bmi160_init+0x48>
        }

        if ((rslt == BMI160_OK) && (dev->chip_id == BMI160_CHIP_ID))
 8000fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d10c      	bne.n	8001000 <bmi160_init+0x8c>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2bd1      	cmp	r3, #209	@ 0xd1
 8000fec:	d108      	bne.n	8001000 <bmi160_init+0x8c>
        {
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	22ff      	movs	r2, #255	@ 0xff
 8000ff2:	70da      	strb	r2, [r3, #3]

            /* Soft reset */
            rslt = bmi160_soft_reset(dev);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f000 f80b 	bl	8001010 <bmi160_soft_reset>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	73fb      	strb	r3, [r7, #15]
 8000ffe:	e001      	b.n	8001004 <bmi160_init+0x90>
        }
        else
        {
            rslt = BMI160_E_DEV_NOT_FOUND;
 8001000:	23fd      	movs	r3, #253	@ 0xfd
 8001002:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001004:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <bmi160_soft_reset>:
/*!
 * @brief This API resets and restarts the device.
 * All register values are overwritten with default parameters.
 */
int8_t bmi160_soft_reset(struct bmi160_dev *dev)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = BMI160_SOFT_RESET_CMD;
 8001018:	23b6      	movs	r3, #182	@ 0xb6
 800101a:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <bmi160_soft_reset+0x1a>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001026:	2b00      	cmp	r3, #0
 8001028:	d102      	bne.n	8001030 <bmi160_soft_reset+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 800102a:	23ff      	movs	r3, #255	@ 0xff
 800102c:	73fb      	strb	r3, [r7, #15]
 800102e:	e024      	b.n	800107a <bmi160_soft_reset+0x6a>
    }
    else
    {
        /* Reset the device */
        rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &data, 1, dev);
 8001030:	f107 010e 	add.w	r1, r7, #14
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2201      	movs	r2, #1
 8001038:	207e      	movs	r0, #126	@ 0x7e
 800103a:	f7ff ff38 	bl	8000eae <bmi160_set_regs>
 800103e:	4603      	mov	r3, r0
 8001040:	73fb      	strb	r3, [r7, #15]
        dev->delay_ms(BMI160_SOFT_RESET_DELAY_MS);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001046:	2001      	movs	r0, #1
 8001048:	4798      	blx	r3
        if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 800104a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d10c      	bne.n	800106c <bmi160_soft_reset+0x5c>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	789b      	ldrb	r3, [r3, #2]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d108      	bne.n	800106c <bmi160_soft_reset+0x5c>
        {
            /* Dummy read of 0x7F register to enable SPI Interface
             * if SPI is used */
            rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 800105a:	f107 010e 	add.w	r1, r7, #14
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2201      	movs	r2, #1
 8001062:	207f      	movs	r0, #127	@ 0x7f
 8001064:	f7ff fef0 	bl	8000e48 <bmi160_get_regs>
 8001068:	4603      	mov	r3, r0
 800106a:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI160_OK)
 800106c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d102      	bne.n	800107a <bmi160_soft_reset+0x6a>
        {
            /* Update the default parameters */
            default_param_settg(dev);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f000 fc73 	bl	8001960 <default_param_settg>
        }
    }

    return rslt;
 800107a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <bmi160_set_sens_conf>:
/*!
 * @brief This API configures the power mode, range and bandwidth
 * of sensor.
 */
int8_t bmi160_set_sens_conf(struct bmi160_dev *dev)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b084      	sub	sp, #16
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMI160_OK;
 800108e:	2300      	movs	r3, #0
 8001090:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <bmi160_set_sens_conf+0x1a>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800109c:	2b00      	cmp	r3, #0
 800109e:	d102      	bne.n	80010a6 <bmi160_set_sens_conf+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 80010a0:	23ff      	movs	r3, #255	@ 0xff
 80010a2:	73fb      	strb	r3, [r7, #15]
 80010a4:	e01f      	b.n	80010e6 <bmi160_set_sens_conf+0x60>
    }
    else
    {
        rslt = set_accel_conf(dev);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f000 fc84 	bl	80019b4 <set_accel_conf>
 80010ac:	4603      	mov	r3, r0
 80010ae:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80010b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d116      	bne.n	80010e6 <bmi160_set_sens_conf+0x60>
        {
            rslt = set_gyro_conf(dev);
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f000 fdbf 	bl	8001c3c <set_gyro_conf>
 80010be:	4603      	mov	r3, r0
 80010c0:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80010c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d10d      	bne.n	80010e6 <bmi160_set_sens_conf+0x60>
            {
                /* write power mode for accel and gyro */
                rslt = bmi160_set_power_mode(dev);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f000 f811 	bl	80010f2 <bmi160_set_power_mode>
 80010d0:	4603      	mov	r3, r0
 80010d2:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 80010d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d104      	bne.n	80010e6 <bmi160_set_sens_conf+0x60>
                {
                    rslt = check_invalid_settg(dev);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f000 fd78 	bl	8001bd2 <check_invalid_settg>
 80010e2:	4603      	mov	r3, r0
 80010e4:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80010e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <bmi160_set_power_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmi160_set_power_mode(struct bmi160_dev *dev)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b084      	sub	sp, #16
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <bmi160_set_power_mode+0x1a>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001108:	2b00      	cmp	r3, #0
 800110a:	d102      	bne.n	8001112 <bmi160_set_power_mode+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 800110c:	23ff      	movs	r3, #255	@ 0xff
 800110e:	73fb      	strb	r3, [r7, #15]
 8001110:	e00d      	b.n	800112e <bmi160_set_power_mode+0x3c>
    }
    else
    {
        rslt = set_accel_pwr(dev);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f000 fe9b 	bl	8001e4e <set_accel_pwr>
 8001118:	4603      	mov	r3, r0
 800111a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800111c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d104      	bne.n	800112e <bmi160_set_power_mode+0x3c>
        {
            rslt = set_gyro_pwr(dev);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f000 ff29 	bl	8001f7c <set_gyro_pwr>
 800112a:	4603      	mov	r3, r0
 800112c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800112e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <bmi160_set_int_config>:
/*!
 * @brief This API configures the necessary interrupt based on
 *  the user settings in the bmi160_int_settg structure instance.
 */
int8_t bmi160_set_int_config(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	73fb      	strb	r3, [r7, #15]

    switch (int_config->int_type)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	785b      	ldrb	r3, [r3, #1]
 800114e:	2b0d      	cmp	r3, #13
 8001150:	d879      	bhi.n	8001246 <bmi160_set_int_config+0x10a>
 8001152:	a201      	add	r2, pc, #4	@ (adr r2, 8001158 <bmi160_set_int_config+0x1c>)
 8001154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001158:	08001191 	.word	0x08001191
 800115c:	0800119f 	.word	0x0800119f
 8001160:	080011c9 	.word	0x080011c9
 8001164:	080011bb 	.word	0x080011bb
 8001168:	080011bb 	.word	0x080011bb
 800116c:	080011d7 	.word	0x080011d7
 8001170:	080011e5 	.word	0x080011e5
 8001174:	08001201 	.word	0x08001201
 8001178:	080011f3 	.word	0x080011f3
 800117c:	080011ad 	.word	0x080011ad
 8001180:	0800120f 	.word	0x0800120f
 8001184:	0800121d 	.word	0x0800121d
 8001188:	0800122b 	.word	0x0800122b
 800118c:	08001239 	.word	0x08001239
    {
        case BMI160_ACC_ANY_MOTION_INT:

            /*Any-motion  interrupt*/
            rslt = set_accel_any_motion_int(int_config, dev);
 8001190:	6839      	ldr	r1, [r7, #0]
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f000 f95a 	bl	800144c <set_accel_any_motion_int>
 8001198:	4603      	mov	r3, r0
 800119a:	73fb      	strb	r3, [r7, #15]
            break;
 800119c:	e054      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_SIG_MOTION_INT:

            /* Significant motion interrupt */
            rslt = set_accel_sig_motion_int(int_config, dev);
 800119e:	6839      	ldr	r1, [r7, #0]
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 f9ed 	bl	8001580 <set_accel_sig_motion_int>
 80011a6:	4603      	mov	r3, r0
 80011a8:	73fb      	strb	r3, [r7, #15]
            break;
 80011aa:	e04d      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_SLOW_NO_MOTION_INT:

            /* Slow or no motion interrupt */
            rslt = set_accel_no_motion_int(int_config, dev);
 80011ac:	6839      	ldr	r1, [r7, #0]
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f000 fa14 	bl	80015dc <set_accel_no_motion_int>
 80011b4:	4603      	mov	r3, r0
 80011b6:	73fb      	strb	r3, [r7, #15]
            break;
 80011b8:	e046      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_DOUBLE_TAP_INT:
        case BMI160_ACC_SINGLE_TAP_INT:

            /* Double tap and single tap Interrupt */
            rslt = set_accel_tap_int(int_config, dev);
 80011ba:	6839      	ldr	r1, [r7, #0]
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f000 f973 	bl	80014a8 <set_accel_tap_int>
 80011c2:	4603      	mov	r3, r0
 80011c4:	73fb      	strb	r3, [r7, #15]
            break;
 80011c6:	e03f      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_STEP_DETECT_INT:

            /* Step detector interrupt */
            rslt = set_accel_step_detect_int(int_config, dev);
 80011c8:	6839      	ldr	r1, [r7, #0]
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f000 fa34 	bl	8001638 <set_accel_step_detect_int>
 80011d0:	4603      	mov	r3, r0
 80011d2:	73fb      	strb	r3, [r7, #15]
            break;
 80011d4:	e038      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_ORIENT_INT:

            /* Orientation interrupt */
            rslt = set_accel_orientation_int(int_config, dev);
 80011d6:	6839      	ldr	r1, [r7, #0]
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f000 fa6e 	bl	80016ba <set_accel_orientation_int>
 80011de:	4603      	mov	r3, r0
 80011e0:	73fb      	strb	r3, [r7, #15]
            break;
 80011e2:	e031      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_FLAT_INT:

            /* Flat detection interrupt */
            rslt = set_accel_flat_detect_int(int_config, dev);
 80011e4:	6839      	ldr	r1, [r7, #0]
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f000 faa8 	bl	800173c <set_accel_flat_detect_int>
 80011ec:	4603      	mov	r3, r0
 80011ee:	73fb      	strb	r3, [r7, #15]
            break;
 80011f0:	e02a      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_LOW_G_INT:

            /* Low-g interrupt */
            rslt = set_accel_low_g_int(int_config, dev);
 80011f2:	6839      	ldr	r1, [r7, #0]
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f000 fae2 	bl	80017be <set_accel_low_g_int>
 80011fa:	4603      	mov	r3, r0
 80011fc:	73fb      	strb	r3, [r7, #15]
            break;
 80011fe:	e023      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_HIGH_G_INT:

            /* High-g interrupt */
            rslt = set_accel_high_g_int(int_config, dev);
 8001200:	6839      	ldr	r1, [r7, #0]
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f000 fb26 	bl	8001854 <set_accel_high_g_int>
 8001208:	4603      	mov	r3, r0
 800120a:	73fb      	strb	r3, [r7, #15]
            break;
 800120c:	e01c      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_DATA_RDY_INT:

            /* Data ready interrupt */
            rslt = set_accel_gyro_data_ready_int(int_config, dev);
 800120e:	6839      	ldr	r1, [r7, #0]
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f000 f982 	bl	800151a <set_accel_gyro_data_ready_int>
 8001216:	4603      	mov	r3, r0
 8001218:	73fb      	strb	r3, [r7, #15]
            break;
 800121a:	e015      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_FIFO_FULL_INT:

            /* Fifo full interrupt */
            rslt = set_fifo_full_int(int_config, dev);
 800121c:	6839      	ldr	r1, [r7, #0]
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f002 fa00 	bl	8003624 <set_fifo_full_int>
 8001224:	4603      	mov	r3, r0
 8001226:	73fb      	strb	r3, [r7, #15]
            break;
 8001228:	e00e      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_FIFO_WATERMARK_INT:

            /* Fifo water-mark interrupt */
            rslt = set_fifo_watermark_int(int_config, dev);
 800122a:	6839      	ldr	r1, [r7, #0]
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f002 fa60 	bl	80036f2 <set_fifo_watermark_int>
 8001232:	4603      	mov	r3, r0
 8001234:	73fb      	strb	r3, [r7, #15]
            break;
 8001236:	e007      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_FIFO_TAG_INT_PIN:

            /* Fifo tagging feature support */
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8001238:	6839      	ldr	r1, [r7, #0]
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f000 fb55 	bl	80018ea <set_intr_pin_config>
 8001240:	4603      	mov	r3, r0
 8001242:	73fb      	strb	r3, [r7, #15]
            break;
 8001244:	e000      	b.n	8001248 <bmi160_set_int_config+0x10c>
        default:
            break;
 8001246:	bf00      	nop
    }

    return rslt;
 8001248:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <bmi160_start_foc>:
 *  Gyro FOC always targets value of 0 dps
 */
int8_t bmi160_start_foc(const struct bmi160_foc_conf *foc_conf,
                        struct bmi160_offsets *offset,
                        struct bmi160_dev const *dev)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f000 fb5d 	bl	8001920 <null_ptr_check>
 8001266:	4603      	mov	r3, r0
 8001268:	75fb      	strb	r3, [r7, #23]
    if (rslt != BMI160_OK)
 800126a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d002      	beq.n	8001278 <bmi160_start_foc+0x24>
    {
        rslt = BMI160_E_NULL_PTR;
 8001272:	23ff      	movs	r3, #255	@ 0xff
 8001274:	75fb      	strb	r3, [r7, #23]
 8001276:	e068      	b.n	800134a <bmi160_start_foc+0xf6>
    }
    else
    {
        /* Set the offset enable bits */
        rslt = configure_offset_enable(foc_conf, dev);
 8001278:	6879      	ldr	r1, [r7, #4]
 800127a:	68f8      	ldr	r0, [r7, #12]
 800127c:	f002 fac0 	bl	8003800 <configure_offset_enable>
 8001280:	4603      	mov	r3, r0
 8001282:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8001284:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d15e      	bne.n	800134a <bmi160_start_foc+0xf6>
        {
            /* Read the FOC config from the sensor */
            rslt = bmi160_get_regs(BMI160_FOC_CONF_ADDR, &data, 1, dev);
 800128c:	f107 0116 	add.w	r1, r7, #22
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2201      	movs	r2, #1
 8001294:	2069      	movs	r0, #105	@ 0x69
 8001296:	f7ff fdd7 	bl	8000e48 <bmi160_get_regs>
 800129a:	4603      	mov	r3, r0
 800129c:	75fb      	strb	r3, [r7, #23]

            /* Set the FOC config for gyro */
            data = BMI160_SET_BITS(data, BMI160_GYRO_FOC_EN, foc_conf->foc_gyr_en);
 800129e:	7dbb      	ldrb	r3, [r7, #22]
 80012a0:	b25b      	sxtb	r3, r3
 80012a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80012a6:	b25a      	sxtb	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	019b      	lsls	r3, r3, #6
 80012ae:	b25b      	sxtb	r3, r3
 80012b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012b4:	b25b      	sxtb	r3, r3
 80012b6:	4313      	orrs	r3, r2
 80012b8:	b25b      	sxtb	r3, r3
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	75bb      	strb	r3, [r7, #22]

            /* Set the FOC config for accel xyz axes */
            data = BMI160_SET_BITS(data, BMI160_ACCEL_FOC_X_CONF, foc_conf->foc_acc_x);
 80012be:	7dbb      	ldrb	r3, [r7, #22]
 80012c0:	b25b      	sxtb	r3, r3
 80012c2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80012c6:	b25a      	sxtb	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	785b      	ldrb	r3, [r3, #1]
 80012cc:	011b      	lsls	r3, r3, #4
 80012ce:	b25b      	sxtb	r3, r3
 80012d0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80012d4:	b25b      	sxtb	r3, r3
 80012d6:	4313      	orrs	r3, r2
 80012d8:	b25b      	sxtb	r3, r3
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	75bb      	strb	r3, [r7, #22]
            data = BMI160_SET_BITS(data, BMI160_ACCEL_FOC_Y_CONF, foc_conf->foc_acc_y);
 80012de:	7dbb      	ldrb	r3, [r7, #22]
 80012e0:	b25b      	sxtb	r3, r3
 80012e2:	f023 030c 	bic.w	r3, r3, #12
 80012e6:	b25a      	sxtb	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	789b      	ldrb	r3, [r3, #2]
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	b25b      	sxtb	r3, r3
 80012f0:	f003 030c 	and.w	r3, r3, #12
 80012f4:	b25b      	sxtb	r3, r3
 80012f6:	4313      	orrs	r3, r2
 80012f8:	b25b      	sxtb	r3, r3
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	75bb      	strb	r3, [r7, #22]
            data = BMI160_SET_BITS_POS_0(data, BMI160_ACCEL_FOC_Z_CONF, foc_conf->foc_acc_z);
 80012fe:	7dbb      	ldrb	r3, [r7, #22]
 8001300:	b25b      	sxtb	r3, r3
 8001302:	f023 0303 	bic.w	r3, r3, #3
 8001306:	b25a      	sxtb	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	78db      	ldrb	r3, [r3, #3]
 800130c:	b25b      	sxtb	r3, r3
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	b25b      	sxtb	r3, r3
 8001314:	4313      	orrs	r3, r2
 8001316:	b25b      	sxtb	r3, r3
 8001318:	b2db      	uxtb	r3, r3
 800131a:	75bb      	strb	r3, [r7, #22]
            if (rslt == BMI160_OK)
 800131c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d112      	bne.n	800134a <bmi160_start_foc+0xf6>
            {
                /* Set the FOC config in the sensor */
                rslt = bmi160_set_regs(BMI160_FOC_CONF_ADDR, &data, 1, dev);
 8001324:	f107 0116 	add.w	r1, r7, #22
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2201      	movs	r2, #1
 800132c:	2069      	movs	r0, #105	@ 0x69
 800132e:	f7ff fdbe 	bl	8000eae <bmi160_set_regs>
 8001332:	4603      	mov	r3, r0
 8001334:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMI160_OK)
 8001336:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d105      	bne.n	800134a <bmi160_start_foc+0xf6>
                {
                    /* Procedure to trigger
                     * FOC and check status */
                    rslt = trigger_foc(offset, dev);
 800133e:	6879      	ldr	r1, [r7, #4]
 8001340:	68b8      	ldr	r0, [r7, #8]
 8001342:	f002 faa7 	bl	8003894 <trigger_foc>
 8001346:	4603      	mov	r3, r0
 8001348:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    }

    return rslt;
 800134a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800134e:	4618      	mov	r0, r3
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <bmi160_get_offsets>:

/*!
 *  @brief This API reads and stores the offset values of accel and gyro
 */
int8_t bmi160_get_offsets(struct bmi160_offsets *offset, const struct bmi160_dev *dev)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b088      	sub	sp, #32
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	6039      	str	r1, [r7, #0]
    uint8_t lsb, msb;
    int16_t offset_msb, offset_lsb;
    int16_t offset_data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001360:	6838      	ldr	r0, [r7, #0]
 8001362:	f000 fadd 	bl	8001920 <null_ptr_check>
 8001366:	4603      	mov	r3, r0
 8001368:	77fb      	strb	r3, [r7, #31]
    if (rslt != BMI160_OK)
 800136a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d002      	beq.n	8001378 <bmi160_get_offsets+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8001372:	23ff      	movs	r3, #255	@ 0xff
 8001374:	77fb      	strb	r3, [r7, #31]
 8001376:	e063      	b.n	8001440 <bmi160_get_offsets+0xea>
    }
    else
    {
        /* Read the FOC config from the sensor */
        rslt = bmi160_get_regs(BMI160_OFFSET_ADDR, data, 7, dev);
 8001378:	f107 010c 	add.w	r1, r7, #12
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	2207      	movs	r2, #7
 8001380:	2071      	movs	r0, #113	@ 0x71
 8001382:	f7ff fd61 	bl	8000e48 <bmi160_get_regs>
 8001386:	4603      	mov	r3, r0
 8001388:	77fb      	strb	r3, [r7, #31]

        /* Accel offsets */
        offset->off_acc_x = (int8_t)data[0];
 800138a:	7b3b      	ldrb	r3, [r7, #12]
 800138c:	b25a      	sxtb	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	701a      	strb	r2, [r3, #0]
        offset->off_acc_y = (int8_t)data[1];
 8001392:	7b7b      	ldrb	r3, [r7, #13]
 8001394:	b25a      	sxtb	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	705a      	strb	r2, [r3, #1]
        offset->off_acc_z = (int8_t)data[2];
 800139a:	7bbb      	ldrb	r3, [r7, #14]
 800139c:	b25a      	sxtb	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	709a      	strb	r2, [r3, #2]

        /* Gyro x-axis offset */
        lsb = data[3];
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS_POS_0(data[6], BMI160_GYRO_OFFSET_X);
 80013a6:	7cbb      	ldrb	r3, [r7, #18]
 80013a8:	f003 0303 	and.w	r3, r3, #3
 80013ac:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 80013ae:	7f7b      	ldrb	r3, [r7, #29]
 80013b0:	039b      	lsls	r3, r3, #14
 80013b2:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 80013b4:	7fbb      	ldrb	r3, [r7, #30]
 80013b6:	019b      	lsls	r3, r3, #6
 80013b8:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 80013ba:	8b7a      	ldrh	r2, [r7, #26]
 80013bc:	8b3b      	ldrh	r3, [r7, #24]
 80013be:	4313      	orrs	r3, r2
 80013c0:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_x = (int16_t)(offset_data / 64);
 80013c2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	da00      	bge.n	80013cc <bmi160_get_offsets+0x76>
 80013ca:	333f      	adds	r3, #63	@ 0x3f
 80013cc:	119b      	asrs	r3, r3, #6
 80013ce:	b21a      	sxth	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	809a      	strh	r2, [r3, #4]

        /* Gyro y-axis offset */
        lsb = data[4];
 80013d4:	7c3b      	ldrb	r3, [r7, #16]
 80013d6:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Y);
 80013d8:	7cbb      	ldrb	r3, [r7, #18]
 80013da:	109b      	asrs	r3, r3, #2
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 80013e4:	7f7b      	ldrb	r3, [r7, #29]
 80013e6:	039b      	lsls	r3, r3, #14
 80013e8:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 80013ea:	7fbb      	ldrb	r3, [r7, #30]
 80013ec:	019b      	lsls	r3, r3, #6
 80013ee:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 80013f0:	8b7a      	ldrh	r2, [r7, #26]
 80013f2:	8b3b      	ldrh	r3, [r7, #24]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_y = (int16_t)(offset_data / 64);
 80013f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	da00      	bge.n	8001402 <bmi160_get_offsets+0xac>
 8001400:	333f      	adds	r3, #63	@ 0x3f
 8001402:	119b      	asrs	r3, r3, #6
 8001404:	b21a      	sxth	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	80da      	strh	r2, [r3, #6]

        /* Gyro z-axis offset */
        lsb = data[5];
 800140a:	7c7b      	ldrb	r3, [r7, #17]
 800140c:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Z);
 800140e:	7cbb      	ldrb	r3, [r7, #18]
 8001410:	111b      	asrs	r3, r3, #4
 8001412:	b2db      	uxtb	r3, r3
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 800141a:	7f7b      	ldrb	r3, [r7, #29]
 800141c:	039b      	lsls	r3, r3, #14
 800141e:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 8001420:	7fbb      	ldrb	r3, [r7, #30]
 8001422:	019b      	lsls	r3, r3, #6
 8001424:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 8001426:	8b7a      	ldrh	r2, [r7, #26]
 8001428:	8b3b      	ldrh	r3, [r7, #24]
 800142a:	4313      	orrs	r3, r2
 800142c:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_z = (int16_t)(offset_data / 64);
 800142e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001432:	2b00      	cmp	r3, #0
 8001434:	da00      	bge.n	8001438 <bmi160_get_offsets+0xe2>
 8001436:	333f      	adds	r3, #63	@ 0x3f
 8001438:	119b      	asrs	r3, r3, #6
 800143a:	b21a      	sxth	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	811a      	strh	r2, [r3, #8]
    }

    return rslt;
 8001440:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3720      	adds	r7, #32
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <set_accel_any_motion_int>:
 * @brief This API sets the any-motion interrupt of the sensor.
 * This interrupt occurs when accel values exceeds preset threshold
 * for a certain period of time.
 */
static int8_t set_accel_any_motion_int(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001456:	6838      	ldr	r0, [r7, #0]
 8001458:	f000 fa62 	bl	8001920 <null_ptr_check>
 800145c:	4603      	mov	r3, r0
 800145e:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8001460:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d102      	bne.n	800146e <set_accel_any_motion_int+0x22>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d102      	bne.n	8001474 <set_accel_any_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 800146e:	23ff      	movs	r3, #255	@ 0xff
 8001470:	73fb      	strb	r3, [r7, #15]
 8001472:	e013      	b.n	800149c <set_accel_any_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg = &(int_config->int_type_cfg.acc_any_motion_int);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3304      	adds	r3, #4
 8001478:	60bb      	str	r3, [r7, #8]
        rslt = enable_accel_any_motion_int(any_motion_int_cfg, dev);
 800147a:	6839      	ldr	r1, [r7, #0]
 800147c:	68b8      	ldr	r0, [r7, #8]
 800147e:	f000 fdc1 	bl	8002004 <enable_accel_any_motion_int>
 8001482:	4603      	mov	r3, r0
 8001484:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d106      	bne.n	800149c <set_accel_any_motion_int+0x50>
        {
            rslt = config_any_motion_int_settg(int_config, any_motion_int_cfg, dev);
 800148e:	683a      	ldr	r2, [r7, #0]
 8001490:	68b9      	ldr	r1, [r7, #8]
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 ffef 	bl	8002476 <config_any_motion_int_settg>
 8001498:	4603      	mov	r3, r0
 800149a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800149c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <set_accel_tap_int>:
/*!
 * @brief This API sets tap interrupts.Interrupt is fired when
 * tap movements happen.
 */
static int8_t set_accel_tap_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80014b2:	6838      	ldr	r0, [r7, #0]
 80014b4:	f000 fa34 	bl	8001920 <null_ptr_check>
 80014b8:	4603      	mov	r3, r0
 80014ba:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80014bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d102      	bne.n	80014ca <set_accel_tap_int+0x22>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d102      	bne.n	80014d0 <set_accel_tap_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80014ca:	23ff      	movs	r3, #255	@ 0xff
 80014cc:	73fb      	strb	r3, [r7, #15]
 80014ce:	e01e      	b.n	800150e <set_accel_tap_int+0x66>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_tap_int_cfg *tap_int_cfg = &(int_config->int_type_cfg.acc_tap_int);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3304      	adds	r3, #4
 80014d4:	60bb      	str	r3, [r7, #8]
        rslt = enable_tap_int(int_config, tap_int_cfg, dev);
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	68b9      	ldr	r1, [r7, #8]
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f001 fb29 	bl	8002b32 <enable_tap_int>
 80014e0:	4603      	mov	r3, r0
 80014e2:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80014e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d110      	bne.n	800150e <set_accel_tap_int+0x66>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 80014ec:	6839      	ldr	r1, [r7, #0]
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 f9fb 	bl	80018ea <set_intr_pin_config>
 80014f4:	4603      	mov	r3, r0
 80014f6:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80014f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d106      	bne.n	800150e <set_accel_tap_int+0x66>
            {
                rslt = config_tap_int_settg(int_config, tap_int_cfg, dev);
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	68b9      	ldr	r1, [r7, #8]
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f001 fb67 	bl	8002bd8 <config_tap_int_settg>
 800150a:	4603      	mov	r3, r0
 800150c:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800150e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <set_accel_gyro_data_ready_int>:
/*!
 * @brief This API sets the data ready interrupt for both accel and gyro.
 * This interrupt occurs when new accel and gyro data comes.
 */
static int8_t set_accel_gyro_data_ready_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001524:	6838      	ldr	r0, [r7, #0]
 8001526:	f000 f9fb 	bl	8001920 <null_ptr_check>
 800152a:	4603      	mov	r3, r0
 800152c:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 800152e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d102      	bne.n	800153c <set_accel_gyro_data_ready_int+0x22>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d102      	bne.n	8001542 <set_accel_gyro_data_ready_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 800153c:	23ff      	movs	r3, #255	@ 0xff
 800153e:	73fb      	strb	r3, [r7, #15]
 8001540:	e018      	b.n	8001574 <set_accel_gyro_data_ready_int+0x5a>
    }
    else
    {
        rslt = enable_data_ready_int(dev);
 8001542:	6838      	ldr	r0, [r7, #0]
 8001544:	f000 ffd0 	bl	80024e8 <enable_data_ready_int>
 8001548:	4603      	mov	r3, r0
 800154a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800154c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d10f      	bne.n	8001574 <set_accel_gyro_data_ready_int+0x5a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8001554:	6839      	ldr	r1, [r7, #0]
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f000 f9c7 	bl	80018ea <set_intr_pin_config>
 800155c:	4603      	mov	r3, r0
 800155e:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001560:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d105      	bne.n	8001574 <set_accel_gyro_data_ready_int+0x5a>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 8001568:	6839      	ldr	r1, [r7, #0]
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 fe84 	bl	8002278 <map_hardware_interrupt>
 8001570:	4603      	mov	r3, r0
 8001572:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001574:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <set_accel_sig_motion_int>:
/*!
 * @brief This API sets the significant motion interrupt of the sensor.This
 * interrupt occurs when there is change in user location.
 */
static int8_t set_accel_sig_motion_int(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800158a:	6838      	ldr	r0, [r7, #0]
 800158c:	f000 f9c8 	bl	8001920 <null_ptr_check>
 8001590:	4603      	mov	r3, r0
 8001592:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8001594:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d102      	bne.n	80015a2 <set_accel_sig_motion_int+0x22>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d102      	bne.n	80015a8 <set_accel_sig_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80015a2:	23ff      	movs	r3, #255	@ 0xff
 80015a4:	73fb      	strb	r3, [r7, #15]
 80015a6:	e013      	b.n	80015d0 <set_accel_sig_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg = &(int_config->int_type_cfg.acc_sig_motion_int);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3304      	adds	r3, #4
 80015ac:	60bb      	str	r3, [r7, #8]
        rslt = enable_sig_motion_int(sig_mot_int_cfg, dev);
 80015ae:	6839      	ldr	r1, [r7, #0]
 80015b0:	68b8      	ldr	r0, [r7, #8]
 80015b2:	f001 f8ef 	bl	8002794 <enable_sig_motion_int>
 80015b6:	4603      	mov	r3, r0
 80015b8:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80015ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d106      	bne.n	80015d0 <set_accel_sig_motion_int+0x50>
        {
            rslt = config_sig_motion_int_settg(int_config, sig_mot_int_cfg, dev);
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	68b9      	ldr	r1, [r7, #8]
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f001 f925 	bl	8002816 <config_sig_motion_int_settg>
 80015cc:	4603      	mov	r3, r0
 80015ce:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80015d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <set_accel_no_motion_int>:
 * Slow motion is similar to any motion interrupt.No motion interrupt
 * occurs when slope bet. two accel values falls below preset threshold
 * for preset duration.
 */
static int8_t set_accel_no_motion_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80015e6:	6838      	ldr	r0, [r7, #0]
 80015e8:	f000 f99a 	bl	8001920 <null_ptr_check>
 80015ec:	4603      	mov	r3, r0
 80015ee:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80015f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d102      	bne.n	80015fe <set_accel_no_motion_int+0x22>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d102      	bne.n	8001604 <set_accel_no_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80015fe:	23ff      	movs	r3, #255	@ 0xff
 8001600:	73fb      	strb	r3, [r7, #15]
 8001602:	e013      	b.n	800162c <set_accel_no_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg = &(int_config->int_type_cfg.acc_no_motion_int);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3304      	adds	r3, #4
 8001608:	60bb      	str	r3, [r7, #8]
        rslt = enable_no_motion_int(no_mot_int_cfg, dev);
 800160a:	6839      	ldr	r1, [r7, #0]
 800160c:	68b8      	ldr	r0, [r7, #8]
 800160e:	f000 ff98 	bl	8002542 <enable_no_motion_int>
 8001612:	4603      	mov	r3, r0
 8001614:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d106      	bne.n	800162c <set_accel_no_motion_int+0x50>
        {
            /* Configure the INT PIN settings*/
            rslt = config_no_motion_int_settg(int_config, no_mot_int_cfg, dev);
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	68b9      	ldr	r1, [r7, #8]
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f000 ffe2 	bl	80025ec <config_no_motion_int_settg>
 8001628:	4603      	mov	r3, r0
 800162a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800162c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <set_accel_step_detect_int>:
 * @brief This API sets the step detection interrupt.This interrupt
 * occurs when the single step causes accel values to go above
 * preset threshold.
 */
static int8_t set_accel_step_detect_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001642:	6838      	ldr	r0, [r7, #0]
 8001644:	f000 f96c 	bl	8001920 <null_ptr_check>
 8001648:	4603      	mov	r3, r0
 800164a:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 800164c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d102      	bne.n	800165a <set_accel_step_detect_int+0x22>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d102      	bne.n	8001660 <set_accel_step_detect_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 800165a:	23ff      	movs	r3, #255	@ 0xff
 800165c:	73fb      	strb	r3, [r7, #15]
 800165e:	e026      	b.n	80016ae <set_accel_step_detect_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg = &(int_config->int_type_cfg.acc_step_detect_int);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3304      	adds	r3, #4
 8001664:	60bb      	str	r3, [r7, #8]
        rslt = enable_step_detect_int(step_detect_int_cfg, dev);
 8001666:	6839      	ldr	r1, [r7, #0]
 8001668:	68b8      	ldr	r0, [r7, #8]
 800166a:	f001 f9a9 	bl	80029c0 <enable_step_detect_int>
 800166e:	4603      	mov	r3, r0
 8001670:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d119      	bne.n	80016ae <set_accel_step_detect_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 800167a:	6839      	ldr	r1, [r7, #0]
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f000 f934 	bl	80018ea <set_intr_pin_config>
 8001682:	4603      	mov	r3, r0
 8001684:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10f      	bne.n	80016ae <set_accel_step_detect_int+0x76>
            {
                rslt = map_feature_interrupt(int_config, dev);
 800168e:	6839      	ldr	r1, [r7, #0]
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f000 fd57 	bl	8002144 <map_feature_interrupt>
 8001696:	4603      	mov	r3, r0
 8001698:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 800169a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d105      	bne.n	80016ae <set_accel_step_detect_int+0x76>
                {
                    rslt = config_step_detect(step_detect_int_cfg, dev);
 80016a2:	6839      	ldr	r1, [r7, #0]
 80016a4:	68b8      	ldr	r0, [r7, #8]
 80016a6:	f001 f9c4 	bl	8002a32 <config_step_detect>
 80016aa:	4603      	mov	r3, r0
 80016ac:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80016ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <set_accel_orientation_int>:
 * @brief This API sets the orientation interrupt of the sensor.This
 * interrupt occurs when there is orientation change in the sensor
 * with respect to gravitational field vector g.
 */
static int8_t set_accel_orientation_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b084      	sub	sp, #16
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
 80016c2:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80016c4:	6838      	ldr	r0, [r7, #0]
 80016c6:	f000 f92b 	bl	8001920 <null_ptr_check>
 80016ca:	4603      	mov	r3, r0
 80016cc:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80016ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d102      	bne.n	80016dc <set_accel_orientation_int+0x22>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d102      	bne.n	80016e2 <set_accel_orientation_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80016dc:	23ff      	movs	r3, #255	@ 0xff
 80016de:	73fb      	strb	r3, [r7, #15]
 80016e0:	e026      	b.n	8001730 <set_accel_orientation_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_orient_int_cfg *orient_int_cfg = &(int_config->int_type_cfg.acc_orient_int);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3304      	adds	r3, #4
 80016e6:	60bb      	str	r3, [r7, #8]
        rslt = enable_orient_int(orient_int_cfg, dev);
 80016e8:	6839      	ldr	r1, [r7, #0]
 80016ea:	68b8      	ldr	r0, [r7, #8]
 80016ec:	f001 fb78 	bl	8002de0 <enable_orient_int>
 80016f0:	4603      	mov	r3, r0
 80016f2:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80016f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d119      	bne.n	8001730 <set_accel_orientation_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 80016fc:	6839      	ldr	r1, [r7, #0]
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 f8f3 	bl	80018ea <set_intr_pin_config>
 8001704:	4603      	mov	r3, r0
 8001706:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001708:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d10f      	bne.n	8001730 <set_accel_orientation_int+0x76>
            {
                /* map INT pin to orient interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 8001710:	6839      	ldr	r1, [r7, #0]
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 fd16 	bl	8002144 <map_feature_interrupt>
 8001718:	4603      	mov	r3, r0
 800171a:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 800171c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d105      	bne.n	8001730 <set_accel_orientation_int+0x76>
                {
                    /* configure the
                     * orientation setting*/
                    rslt = config_orient_int_settg(orient_int_cfg, dev);
 8001724:	6839      	ldr	r1, [r7, #0]
 8001726:	68b8      	ldr	r0, [r7, #8]
 8001728:	f001 fb93 	bl	8002e52 <config_orient_int_settg>
 800172c:	4603      	mov	r3, r0
 800172e:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001730:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <set_accel_flat_detect_int>:
/*!
 * @brief This API sets the flat interrupt of the sensor.This interrupt
 * occurs in case of flat orientation
 */
static int8_t set_accel_flat_detect_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001746:	6838      	ldr	r0, [r7, #0]
 8001748:	f000 f8ea 	bl	8001920 <null_ptr_check>
 800174c:	4603      	mov	r3, r0
 800174e:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8001750:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d102      	bne.n	800175e <set_accel_flat_detect_int+0x22>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d102      	bne.n	8001764 <set_accel_flat_detect_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 800175e:	23ff      	movs	r3, #255	@ 0xff
 8001760:	73fb      	strb	r3, [r7, #15]
 8001762:	e026      	b.n	80017b2 <set_accel_flat_detect_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_flat_detect_int_cfg *flat_detect_int = &(int_config->int_type_cfg.acc_flat_int);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3304      	adds	r3, #4
 8001768:	60bb      	str	r3, [r7, #8]

        /* enable the flat interrupt */
        rslt = enable_flat_int(flat_detect_int, dev);
 800176a:	6839      	ldr	r1, [r7, #0]
 800176c:	68b8      	ldr	r0, [r7, #8]
 800176e:	f001 fbff 	bl	8002f70 <enable_flat_int>
 8001772:	4603      	mov	r3, r0
 8001774:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d119      	bne.n	80017b2 <set_accel_flat_detect_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 800177e:	6839      	ldr	r1, [r7, #0]
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f000 f8b2 	bl	80018ea <set_intr_pin_config>
 8001786:	4603      	mov	r3, r0
 8001788:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800178a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10f      	bne.n	80017b2 <set_accel_flat_detect_int+0x76>
            {
                /* map INT pin to flat interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 8001792:	6839      	ldr	r1, [r7, #0]
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f000 fcd5 	bl	8002144 <map_feature_interrupt>
 800179a:	4603      	mov	r3, r0
 800179c:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 800179e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d105      	bne.n	80017b2 <set_accel_flat_detect_int+0x76>
                {
                    /* configure the flat setting*/
                    rslt = config_flat_int_settg(flat_detect_int, dev);
 80017a6:	6839      	ldr	r1, [r7, #0]
 80017a8:	68b8      	ldr	r0, [r7, #8]
 80017aa:	f001 fc17 	bl	8002fdc <config_flat_int_settg>
 80017ae:	4603      	mov	r3, r0
 80017b0:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80017b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <set_accel_low_g_int>:
/*!
 * @brief This API sets the low-g interrupt of the sensor.This interrupt
 * occurs during free-fall.
 */
static int8_t set_accel_low_g_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b084      	sub	sp, #16
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80017c8:	6838      	ldr	r0, [r7, #0]
 80017ca:	f000 f8a9 	bl	8001920 <null_ptr_check>
 80017ce:	4603      	mov	r3, r0
 80017d0:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80017d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d102      	bne.n	80017e0 <set_accel_low_g_int+0x22>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d102      	bne.n	80017e6 <set_accel_low_g_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80017e0:	23ff      	movs	r3, #255	@ 0xff
 80017e2:	73fb      	strb	r3, [r7, #15]
 80017e4:	e030      	b.n	8001848 <set_accel_low_g_int+0x8a>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_low_g_int_cfg *low_g_int = &(int_config->int_type_cfg.acc_low_g_int);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	3304      	adds	r3, #4
 80017ea:	60bb      	str	r3, [r7, #8]

        /* Enable the low-g interrupt*/
        rslt = enable_low_g_int(low_g_int, dev);
 80017ec:	6839      	ldr	r1, [r7, #0]
 80017ee:	68b8      	ldr	r0, [r7, #8]
 80017f0:	f001 fc50 	bl	8003094 <enable_low_g_int>
 80017f4:	4603      	mov	r3, r0
 80017f6:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80017f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d123      	bne.n	8001848 <set_accel_low_g_int+0x8a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8001800:	6839      	ldr	r1, [r7, #0]
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 f871 	bl	80018ea <set_intr_pin_config>
 8001808:	4603      	mov	r3, r0
 800180a:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800180c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d119      	bne.n	8001848 <set_accel_low_g_int+0x8a>
            {
                /* Map INT pin to low-g interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 8001814:	6839      	ldr	r1, [r7, #0]
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 fc94 	bl	8002144 <map_feature_interrupt>
 800181c:	4603      	mov	r3, r0
 800181e:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8001820:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d10f      	bne.n	8001848 <set_accel_low_g_int+0x8a>
                {
                    /* configure the data source
                     * for low-g interrupt*/
                    rslt = config_low_g_data_src(low_g_int, dev);
 8001828:	6839      	ldr	r1, [r7, #0]
 800182a:	68b8      	ldr	r0, [r7, #8]
 800182c:	f001 fc6b 	bl	8003106 <config_low_g_data_src>
 8001830:	4603      	mov	r3, r0
 8001832:	73fb      	strb	r3, [r7, #15]
                    if (rslt == BMI160_OK)
 8001834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d105      	bne.n	8001848 <set_accel_low_g_int+0x8a>
                    {
                        rslt = config_low_g_int_settg(low_g_int, dev);
 800183c:	6839      	ldr	r1, [r7, #0]
 800183e:	68b8      	ldr	r0, [r7, #8]
 8001840:	f001 fc98 	bl	8003174 <config_low_g_int_settg>
 8001844:	4603      	mov	r3, r0
 8001846:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001848:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <set_accel_high_g_int>:
 * occurs if the absolute value of acceleration data of any enabled axis
 * exceeds the programmed threshold and the sign of the value does not
 * change for a preset duration.
 */
static int8_t set_accel_high_g_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800185e:	6838      	ldr	r0, [r7, #0]
 8001860:	f000 f85e 	bl	8001920 <null_ptr_check>
 8001864:	4603      	mov	r3, r0
 8001866:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8001868:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d102      	bne.n	8001876 <set_accel_high_g_int+0x22>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d102      	bne.n	800187c <set_accel_high_g_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8001876:	23ff      	movs	r3, #255	@ 0xff
 8001878:	73fb      	strb	r3, [r7, #15]
 800187a:	e030      	b.n	80018de <set_accel_high_g_int+0x8a>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_high_g_int_cfg *high_g_int_cfg = &(int_config->int_type_cfg.acc_high_g_int);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3304      	adds	r3, #4
 8001880:	60bb      	str	r3, [r7, #8]

        /* Enable the high-g interrupt */
        rslt = enable_high_g_int(high_g_int_cfg, dev);
 8001882:	6839      	ldr	r1, [r7, #0]
 8001884:	68b8      	ldr	r0, [r7, #8]
 8001886:	f001 fccd 	bl	8003224 <enable_high_g_int>
 800188a:	4603      	mov	r3, r0
 800188c:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800188e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d123      	bne.n	80018de <set_accel_high_g_int+0x8a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8001896:	6839      	ldr	r1, [r7, #0]
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 f826 	bl	80018ea <set_intr_pin_config>
 800189e:	4603      	mov	r3, r0
 80018a0:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80018a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d119      	bne.n	80018de <set_accel_high_g_int+0x8a>
            {
                /* Map INT pin to high-g interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 80018aa:	6839      	ldr	r1, [r7, #0]
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f000 fc49 	bl	8002144 <map_feature_interrupt>
 80018b2:	4603      	mov	r3, r0
 80018b4:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 80018b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10f      	bne.n	80018de <set_accel_high_g_int+0x8a>
                {
                    /* configure the data source
                     * for high-g interrupt*/
                    rslt = config_high_g_data_src(high_g_int_cfg, dev);
 80018be:	6839      	ldr	r1, [r7, #0]
 80018c0:	68b8      	ldr	r0, [r7, #8]
 80018c2:	f001 fd0a 	bl	80032da <config_high_g_data_src>
 80018c6:	4603      	mov	r3, r0
 80018c8:	73fb      	strb	r3, [r7, #15]
                    if (rslt == BMI160_OK)
 80018ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d105      	bne.n	80018de <set_accel_high_g_int+0x8a>
                    {
                        rslt = config_high_g_int_settg(high_g_int_cfg, dev);
 80018d2:	6839      	ldr	r1, [r7, #0]
 80018d4:	68b8      	ldr	r0, [r7, #8]
 80018d6:	f001 fd37 	bl	8003348 <config_high_g_int_settg>
 80018da:	4603      	mov	r3, r0
 80018dc:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80018de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <set_intr_pin_config>:
/*!
 * @brief This API configures the pins to fire the
 * interrupt signal when it occurs.
 */
static int8_t set_intr_pin_config(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b084      	sub	sp, #16
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
 80018f2:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* configure the behavioural settings of interrupt pin */
    rslt = config_int_out_ctrl(int_config, dev);
 80018f4:	6839      	ldr	r1, [r7, #0]
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f001 fd6c 	bl	80033d4 <config_int_out_ctrl>
 80018fc:	4603      	mov	r3, r0
 80018fe:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001900:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d105      	bne.n	8001914 <set_intr_pin_config+0x2a>
    {
        rslt = config_int_latch(int_config, dev);
 8001908:	6839      	ldr	r1, [r7, #0]
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f001 fe27 	bl	800355e <config_int_latch>
 8001910:	4603      	mov	r3, r0
 8001912:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001914:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi160_dev *dev)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00b      	beq.n	8001946 <null_ptr_check+0x26>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d007      	beq.n	8001946 <null_ptr_check+0x26>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a1b      	ldr	r3, [r3, #32]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <null_ptr_check+0x26>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001942:	2b00      	cmp	r3, #0
 8001944:	d102      	bne.n	800194c <null_ptr_check+0x2c>
    {
        rslt = BMI160_E_NULL_PTR;
 8001946:	23ff      	movs	r3, #255	@ 0xff
 8001948:	73fb      	strb	r3, [r7, #15]
 800194a:	e001      	b.n	8001950 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI160_OK;
 800194c:	2300      	movs	r3, #0
 800194e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001950:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <default_param_settg>:
/*!
 * @brief This API sets the default configuration parameters of accel & gyro.
 * Also maintain the previous state of configurations.
 */
static void default_param_settg(struct bmi160_dev *dev)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
    /* Initializing accel and gyro params with
     * default values */
    dev->accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2202      	movs	r2, #2
 800196c:	71da      	strb	r2, [r3, #7]
    dev->accel_cfg.odr = BMI160_ACCEL_ODR_100HZ;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2208      	movs	r2, #8
 8001972:	715a      	strb	r2, [r3, #5]
    dev->accel_cfg.power = BMI160_ACCEL_SUSPEND_MODE;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2210      	movs	r2, #16
 8001978:	711a      	strb	r2, [r3, #4]
    dev->accel_cfg.range = BMI160_ACCEL_RANGE_2G;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2203      	movs	r2, #3
 800197e:	719a      	strb	r2, [r3, #6]
    dev->gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2202      	movs	r2, #2
 8001984:	73da      	strb	r2, [r3, #15]
    dev->gyro_cfg.odr = BMI160_GYRO_ODR_100HZ;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2208      	movs	r2, #8
 800198a:	735a      	strb	r2, [r3, #13]
    dev->gyro_cfg.power = BMI160_GYRO_SUSPEND_MODE;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2214      	movs	r2, #20
 8001990:	731a      	strb	r2, [r3, #12]
    dev->gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	739a      	strb	r2, [r3, #14]

    /* To maintain the previous state of accel configuration */
    dev->prev_accel_cfg = dev->accel_cfg;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6852      	ldr	r2, [r2, #4]
 800199e:	609a      	str	r2, [r3, #8]

    /* To maintain the previous state of gyro configuration */
    dev->prev_gyro_cfg = dev->gyro_cfg;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68d2      	ldr	r2, [r2, #12]
 80019a6:	611a      	str	r2, [r3, #16]
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <set_accel_conf>:

/*!
 * @brief This API set the accel configuration.
 */
static int8_t set_accel_conf(struct bmi160_dev *dev)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 80019bc:	2300      	movs	r3, #0
 80019be:	81bb      	strh	r3, [r7, #12]

    rslt = check_accel_config(data, dev);
 80019c0:	f107 030c 	add.w	r3, r7, #12
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 f833 	bl	8001a32 <check_accel_config>
 80019cc:	4603      	mov	r3, r0
 80019ce:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80019d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d126      	bne.n	8001a26 <set_accel_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, &data[0], 1, dev);
 80019d8:	f107 010c 	add.w	r1, r7, #12
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	2040      	movs	r0, #64	@ 0x40
 80019e2:	f7ff fa64 	bl	8000eae <bmi160_set_regs>
 80019e6:	4603      	mov	r3, r0
 80019e8:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80019ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d119      	bne.n	8001a26 <set_accel_conf+0x72>
        {
            dev->prev_accel_cfg.odr = dev->accel_cfg.odr;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	795a      	ldrb	r2, [r3, #5]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	725a      	strb	r2, [r3, #9]
            dev->prev_accel_cfg.bw = dev->accel_cfg.bw;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	79da      	ldrb	r2, [r3, #7]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	72da      	strb	r2, [r3, #11]

            /* write accel range */
            rslt = bmi160_set_regs(BMI160_ACCEL_RANGE_ADDR, &data[1], 1, dev);
 8001a02:	f107 030c 	add.w	r3, r7, #12
 8001a06:	1c59      	adds	r1, r3, #1
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	2041      	movs	r0, #65	@ 0x41
 8001a0e:	f7ff fa4e 	bl	8000eae <bmi160_set_regs>
 8001a12:	4603      	mov	r3, r0
 8001a14:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d103      	bne.n	8001a26 <set_accel_conf+0x72>
            {
                dev->prev_accel_cfg.range = dev->accel_cfg.range;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	799a      	ldrb	r2, [r3, #6]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	729a      	strb	r2, [r3, #10]
            }
        }
    }

    return rslt;
 8001a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <check_accel_config>:

/*!
 * @brief This API check the accel configuration.
 */
static int8_t check_accel_config(uint8_t *data, const struct bmi160_dev *dev)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b084      	sub	sp, #16
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read accel Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 2, dev);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	2202      	movs	r2, #2
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	2040      	movs	r0, #64	@ 0x40
 8001a44:	f7ff fa00 	bl	8000e48 <bmi160_get_regs>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d11b      	bne.n	8001a8c <check_accel_config+0x5a>
    {
        rslt = process_accel_odr(&data[0], dev);
 8001a54:	6839      	ldr	r1, [r7, #0]
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 f81e 	bl	8001a98 <process_accel_odr>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001a60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d111      	bne.n	8001a8c <check_accel_config+0x5a>
        {
            rslt = process_accel_bw(&data[0], dev);
 8001a68:	6839      	ldr	r1, [r7, #0]
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f848 	bl	8001b00 <process_accel_bw>
 8001a70:	4603      	mov	r3, r0
 8001a72:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001a74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d107      	bne.n	8001a8c <check_accel_config+0x5a>
            {
                rslt = process_accel_range(&data[1], dev);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	6839      	ldr	r1, [r7, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 f871 	bl	8001b6a <process_accel_range>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <process_accel_odr>:

/*!
 * @brief This API process the accel odr.
 */
static int8_t process_accel_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.odr <= BMI160_ACCEL_ODR_1600HZ)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	795b      	ldrb	r3, [r3, #5]
 8001ab2:	2b0c      	cmp	r3, #12
 8001ab4:	d81a      	bhi.n	8001aec <process_accel_odr+0x54>
    {
        if (dev->accel_cfg.odr != dev->prev_accel_cfg.odr)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	795a      	ldrb	r2, [r3, #5]
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	7a5b      	ldrb	r3, [r3, #9]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d016      	beq.n	8001af0 <process_accel_odr+0x58>
        {
            odr = (uint8_t)dev->accel_cfg.odr;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	795b      	ldrb	r3, [r3, #5]
 8001ac6:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_ODR_MASK;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	f023 030f 	bic.w	r3, r3, #15
 8001ad0:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_ACCEL_ODR_MASK);
 8001ad2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	b25a      	sxtb	r2, r3
 8001adc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	b25b      	sxtb	r3, r3
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	701a      	strb	r2, [r3, #0]
 8001aea:	e001      	b.n	8001af0 <process_accel_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001aec:	23fc      	movs	r3, #252	@ 0xfc
 8001aee:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <process_accel_bw>:

/*!
 * @brief This API process the accel bandwidth.
 */
static int8_t process_accel_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.bw <= BMI160_ACCEL_BW_RES_AVG128)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	79db      	ldrb	r3, [r3, #7]
 8001b1a:	2b07      	cmp	r3, #7
 8001b1c:	d81b      	bhi.n	8001b56 <process_accel_bw+0x56>
    {
        if (dev->accel_cfg.bw != dev->prev_accel_cfg.bw)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	79da      	ldrb	r2, [r3, #7]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	7adb      	ldrb	r3, [r3, #11]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d017      	beq.n	8001b5a <process_accel_bw+0x5a>
        {
            bw = (uint8_t)dev->accel_cfg.bw;
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	79db      	ldrb	r3, [r3, #7]
 8001b2e:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_BW_MASK;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b38:	73bb      	strb	r3, [r7, #14]

            /* Adding bandwidth */
            *data = temp | ((bw << 4) & BMI160_ACCEL_BW_MASK);
 8001b3a:	7b7b      	ldrb	r3, [r7, #13]
 8001b3c:	011b      	lsls	r3, r3, #4
 8001b3e:	b25b      	sxtb	r3, r3
 8001b40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b44:	b25a      	sxtb	r2, r3
 8001b46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	b25b      	sxtb	r3, r3
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	701a      	strb	r2, [r3, #0]
 8001b54:	e001      	b.n	8001b5a <process_accel_bw+0x5a>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001b56:	23fc      	movs	r3, #252	@ 0xfc
 8001b58:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <process_accel_range>:

/*!
 * @brief This API process the accel range.
 */
static int8_t process_accel_range(uint8_t *data, const struct bmi160_dev *dev)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b085      	sub	sp, #20
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.range <= BMI160_ACCEL_RANGE_16G)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	799b      	ldrb	r3, [r3, #6]
 8001b84:	2b0c      	cmp	r3, #12
 8001b86:	d81a      	bhi.n	8001bbe <process_accel_range+0x54>
    {
        if (dev->accel_cfg.range != dev->prev_accel_cfg.range)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	799a      	ldrb	r2, [r3, #6]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	7a9b      	ldrb	r3, [r3, #10]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d016      	beq.n	8001bc2 <process_accel_range+0x58>
        {
            range = (uint8_t)dev->accel_cfg.range;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	799b      	ldrb	r3, [r3, #6]
 8001b98:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_RANGE_MASK;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	f023 030f 	bic.w	r3, r3, #15
 8001ba2:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_ACCEL_RANGE_MASK);
 8001ba4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001ba8:	f003 030f 	and.w	r3, r3, #15
 8001bac:	b25a      	sxtb	r2, r3
 8001bae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	b25b      	sxtb	r3, r3
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	701a      	strb	r2, [r3, #0]
 8001bbc:	e001      	b.n	8001bc2 <process_accel_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001bbe:	23fc      	movs	r3, #252	@ 0xfc
 8001bc0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <check_invalid_settg>:
/*!
 * @brief This API checks the invalid settings for ODR & Bw for
 * Accel and Gyro.
 */
static int8_t check_invalid_settg(const struct bmi160_dev *dev)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b084      	sub	sp, #16
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	73bb      	strb	r3, [r7, #14]

    /* read the error reg */
    rslt = bmi160_get_regs(BMI160_ERROR_REG_ADDR, &data, 1, dev);
 8001bde:	f107 010e 	add.w	r1, r7, #14
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	2002      	movs	r0, #2
 8001be8:	f7ff f92e 	bl	8000e48 <bmi160_get_regs>
 8001bec:	4603      	mov	r3, r0
 8001bee:	73fb      	strb	r3, [r7, #15]
    data = data >> 1;
 8001bf0:	7bbb      	ldrb	r3, [r7, #14]
 8001bf2:	085b      	lsrs	r3, r3, #1
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	73bb      	strb	r3, [r7, #14]
    data = data & BMI160_ERR_REG_MASK;
 8001bf8:	7bbb      	ldrb	r3, [r7, #14]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	73bb      	strb	r3, [r7, #14]
    if (data == 1)
 8001c02:	7bbb      	ldrb	r3, [r7, #14]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d102      	bne.n	8001c0e <check_invalid_settg+0x3c>
    {
        rslt = BMI160_E_ACCEL_ODR_BW_INVALID;
 8001c08:	23fa      	movs	r3, #250	@ 0xfa
 8001c0a:	73fb      	strb	r3, [r7, #15]
 8001c0c:	e010      	b.n	8001c30 <check_invalid_settg+0x5e>
    }
    else if (data == 2)
 8001c0e:	7bbb      	ldrb	r3, [r7, #14]
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d102      	bne.n	8001c1a <check_invalid_settg+0x48>
    {
        rslt = BMI160_E_GYRO_ODR_BW_INVALID;
 8001c14:	23f9      	movs	r3, #249	@ 0xf9
 8001c16:	73fb      	strb	r3, [r7, #15]
 8001c18:	e00a      	b.n	8001c30 <check_invalid_settg+0x5e>
    }
    else if (data == 3)
 8001c1a:	7bbb      	ldrb	r3, [r7, #14]
 8001c1c:	2b03      	cmp	r3, #3
 8001c1e:	d102      	bne.n	8001c26 <check_invalid_settg+0x54>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INT_INVALID;
 8001c20:	23f8      	movs	r3, #248	@ 0xf8
 8001c22:	73fb      	strb	r3, [r7, #15]
 8001c24:	e004      	b.n	8001c30 <check_invalid_settg+0x5e>
    }
    else if (data == 7)
 8001c26:	7bbb      	ldrb	r3, [r7, #14]
 8001c28:	2b07      	cmp	r3, #7
 8001c2a:	d101      	bne.n	8001c30 <check_invalid_settg+0x5e>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INVALID;
 8001c2c:	23f7      	movs	r3, #247	@ 0xf7
 8001c2e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <set_gyro_conf>:
static int8_t set_gyro_conf(struct bmi160_dev *dev)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 8001c44:	2300      	movs	r3, #0
 8001c46:	81bb      	strh	r3, [r7, #12]

    rslt = check_gyro_config(data, dev);
 8001c48:	f107 030c 	add.w	r3, r7, #12
 8001c4c:	6879      	ldr	r1, [r7, #4]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 f833 	bl	8001cba <check_gyro_config>
 8001c54:	4603      	mov	r3, r0
 8001c56:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001c58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d126      	bne.n	8001cae <set_gyro_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_GYRO_CONFIG_ADDR, &data[0], 1, dev);
 8001c60:	f107 010c 	add.w	r1, r7, #12
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	2042      	movs	r0, #66	@ 0x42
 8001c6a:	f7ff f920 	bl	8000eae <bmi160_set_regs>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d119      	bne.n	8001cae <set_gyro_conf+0x72>
        {
            dev->prev_gyro_cfg.odr = dev->gyro_cfg.odr;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	7b5a      	ldrb	r2, [r3, #13]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	745a      	strb	r2, [r3, #17]
            dev->prev_gyro_cfg.bw = dev->gyro_cfg.bw;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	7bda      	ldrb	r2, [r3, #15]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	74da      	strb	r2, [r3, #19]

            /* Write gyro range */
            rslt = bmi160_set_regs(BMI160_GYRO_RANGE_ADDR, &data[1], 1, dev);
 8001c8a:	f107 030c 	add.w	r3, r7, #12
 8001c8e:	1c59      	adds	r1, r3, #1
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	2043      	movs	r0, #67	@ 0x43
 8001c96:	f7ff f90a 	bl	8000eae <bmi160_set_regs>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d103      	bne.n	8001cae <set_gyro_conf+0x72>
            {
                dev->prev_gyro_cfg.range = dev->gyro_cfg.range;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	7b9a      	ldrb	r2, [r3, #14]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	749a      	strb	r2, [r3, #18]
            }
        }
    }

    return rslt;
 8001cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <check_gyro_config>:

/*!
 * @brief This API check the gyro configuration.
 */
static int8_t check_gyro_config(uint8_t *data, const struct bmi160_dev *dev)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b084      	sub	sp, #16
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read gyro Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_GYRO_CONFIG_ADDR, data, 2, dev);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	2042      	movs	r0, #66	@ 0x42
 8001ccc:	f7ff f8bc 	bl	8000e48 <bmi160_get_regs>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001cd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d11b      	bne.n	8001d14 <check_gyro_config+0x5a>
    {
        rslt = process_gyro_odr(&data[0], dev);
 8001cdc:	6839      	ldr	r1, [r7, #0]
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f81e 	bl	8001d20 <process_gyro_odr>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001ce8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d111      	bne.n	8001d14 <check_gyro_config+0x5a>
        {
            rslt = process_gyro_bw(&data[0], dev);
 8001cf0:	6839      	ldr	r1, [r7, #0]
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f848 	bl	8001d88 <process_gyro_bw>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001cfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d107      	bne.n	8001d14 <check_gyro_config+0x5a>
            {
                rslt = process_gyro_range(&data[1], dev);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3301      	adds	r3, #1
 8001d08:	6839      	ldr	r1, [r7, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 f86b 	bl	8001de6 <process_gyro_range>
 8001d10:	4603      	mov	r3, r0
 8001d12:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001d14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <process_gyro_odr>:

/*!
 * @brief This API process the gyro odr.
 */
static int8_t process_gyro_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.odr <= BMI160_GYRO_ODR_3200HZ)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	7b5b      	ldrb	r3, [r3, #13]
 8001d3a:	2b0d      	cmp	r3, #13
 8001d3c:	d81a      	bhi.n	8001d74 <process_gyro_odr+0x54>
    {
        if (dev->gyro_cfg.odr != dev->prev_gyro_cfg.odr)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	7b5a      	ldrb	r2, [r3, #13]
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	7c5b      	ldrb	r3, [r3, #17]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d016      	beq.n	8001d78 <process_gyro_odr+0x58>
        {
            odr = (uint8_t)dev->gyro_cfg.odr;
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	7b5b      	ldrb	r3, [r3, #13]
 8001d4e:	737b      	strb	r3, [r7, #13]
            temp = (*data & ~BMI160_GYRO_ODR_MASK);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	f023 030f 	bic.w	r3, r3, #15
 8001d58:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_GYRO_ODR_MASK);
 8001d5a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	b25a      	sxtb	r2, r3
 8001d64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	b25b      	sxtb	r3, r3
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	701a      	strb	r2, [r3, #0]
 8001d72:	e001      	b.n	8001d78 <process_gyro_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001d74:	23fc      	movs	r3, #252	@ 0xfc
 8001d76:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001d78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <process_gyro_bw>:

/*!
 * @brief This API process the gyro bandwidth.
 */
static int8_t process_gyro_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.bw <= BMI160_GYRO_BW_NORMAL_MODE)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	7bdb      	ldrb	r3, [r3, #15]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d815      	bhi.n	8001dd2 <process_gyro_bw+0x4a>
    {
        bw = (uint8_t)dev->gyro_cfg.bw;
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	7bdb      	ldrb	r3, [r3, #15]
 8001daa:	737b      	strb	r3, [r7, #13]
        temp = *data & ~BMI160_GYRO_BW_MASK;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001db4:	73bb      	strb	r3, [r7, #14]

        /* Adding bandwidth */
        *data = temp | ((bw << 4) & BMI160_GYRO_BW_MASK);
 8001db6:	7b7b      	ldrb	r3, [r7, #13]
 8001db8:	011b      	lsls	r3, r3, #4
 8001dba:	b25b      	sxtb	r3, r3
 8001dbc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001dc0:	b25a      	sxtb	r2, r3
 8001dc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	b25b      	sxtb	r3, r3
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	701a      	strb	r2, [r3, #0]
 8001dd0:	e001      	b.n	8001dd6 <process_gyro_bw+0x4e>
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001dd2:	23fc      	movs	r3, #252	@ 0xfc
 8001dd4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <process_gyro_range>:

/*!
 * @brief This API process the gyro range.
 */
static int8_t process_gyro_range(uint8_t *data, const struct bmi160_dev *dev)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b085      	sub	sp, #20
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
 8001dee:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.range <= BMI160_GYRO_RANGE_125_DPS)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	7b9b      	ldrb	r3, [r3, #14]
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d81a      	bhi.n	8001e3a <process_gyro_range+0x54>
    {
        if (dev->gyro_cfg.range != dev->prev_gyro_cfg.range)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	7b9a      	ldrb	r2, [r3, #14]
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	7c9b      	ldrb	r3, [r3, #18]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d016      	beq.n	8001e3e <process_gyro_range+0x58>
        {
            range = (uint8_t)dev->gyro_cfg.range;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	7b9b      	ldrb	r3, [r3, #14]
 8001e14:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_GYRO_RANGE_MASK;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	f023 0307 	bic.w	r3, r3, #7
 8001e1e:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_GYRO_RANGE_MASK);
 8001e20:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	b25a      	sxtb	r2, r3
 8001e2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	b25b      	sxtb	r3, r3
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	701a      	strb	r2, [r3, #0]
 8001e38:	e001      	b.n	8001e3e <process_gyro_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001e3a:	23fc      	movs	r3, #252	@ 0xfc
 8001e3c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <set_accel_pwr>:

/*!
 * @brief This API sets the accel power.
 */
static int8_t set_accel_pwr(struct bmi160_dev *dev)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b084      	sub	sp, #16
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	73fb      	strb	r3, [r7, #15]
    uint8_t data = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	73bb      	strb	r3, [r7, #14]

    if ((dev->accel_cfg.power >= BMI160_ACCEL_SUSPEND_MODE) && (dev->accel_cfg.power <= BMI160_ACCEL_LOWPOWER_MODE))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	791b      	ldrb	r3, [r3, #4]
 8001e62:	2b0f      	cmp	r3, #15
 8001e64:	d92b      	bls.n	8001ebe <set_accel_pwr+0x70>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	791b      	ldrb	r3, [r3, #4]
 8001e6a:	2b12      	cmp	r3, #18
 8001e6c:	d827      	bhi.n	8001ebe <set_accel_pwr+0x70>
    {
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	791a      	ldrb	r2, [r3, #4]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	7a1b      	ldrb	r3, [r3, #8]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d024      	beq.n	8001ec4 <set_accel_pwr+0x76>
        {
            rslt = process_under_sampling(&data, dev);
 8001e7a:	f107 030e 	add.w	r3, r7, #14
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 f826 	bl	8001ed2 <process_under_sampling>
 8001e86:	4603      	mov	r3, r0
 8001e88:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d118      	bne.n	8001ec4 <set_accel_pwr+0x76>
            {
                /* Write accel power */
                rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->accel_cfg.power, 1, dev);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	1d19      	adds	r1, r3, #4
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	207e      	movs	r0, #126	@ 0x7e
 8001e9c:	f7ff f807 	bl	8000eae <bmi160_set_regs>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	73fb      	strb	r3, [r7, #15]

                /* Add delay of 3.8 ms - refer data sheet table 24*/
                if (dev->prev_accel_cfg.power == BMI160_ACCEL_SUSPEND_MODE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	7a1b      	ldrb	r3, [r3, #8]
 8001ea8:	2b10      	cmp	r3, #16
 8001eaa:	d103      	bne.n	8001eb4 <set_accel_pwr+0x66>
                {
                    dev->delay_ms(BMI160_ACCEL_DELAY_MS);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb0:	2005      	movs	r0, #5
 8001eb2:	4798      	blx	r3
                }

                dev->prev_accel_cfg.power = dev->accel_cfg.power;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	791a      	ldrb	r2, [r3, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	721a      	strb	r2, [r3, #8]
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8001ebc:	e002      	b.n	8001ec4 <set_accel_pwr+0x76>
            }
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 8001ebe:	23f3      	movs	r3, #243	@ 0xf3
 8001ec0:	73fb      	strb	r3, [r7, #15]
 8001ec2:	e000      	b.n	8001ec6 <set_accel_pwr+0x78>
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8001ec4:	bf00      	nop
    }

    return rslt;
 8001ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <process_under_sampling>:

/*!
 * @brief This API process the undersampling setting of Accel.
 */
static int8_t process_under_sampling(uint8_t *data, const struct bmi160_dev *dev)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b084      	sub	sp, #16
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
 8001eda:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	73bb      	strb	r3, [r7, #14]
    uint8_t pre_filter[2] = { 0 };
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	81bb      	strh	r3, [r7, #12]

    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	2040      	movs	r0, #64	@ 0x40
 8001eec:	f7fe ffac 	bl	8000e48 <bmi160_get_regs>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d139      	bne.n	8001f70 <process_under_sampling+0x9e>
    {
        if (dev->accel_cfg.power == BMI160_ACCEL_LOWPOWER_MODE)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	791b      	ldrb	r3, [r3, #4]
 8001f00:	2b12      	cmp	r3, #18
 8001f02:	d120      	bne.n	8001f46 <process_under_sampling+0x74>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f0c:	73bb      	strb	r3, [r7, #14]

            /* Set under-sampling parameter */
            *data = temp | ((1 << 7) & BMI160_ACCEL_UNDERSAMPLING_MASK);
 8001f0e:	7bbb      	ldrb	r3, [r7, #14]
 8001f10:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	2040      	movs	r0, #64	@ 0x40
 8001f22:	f7fe ffc4 	bl	8000eae <bmi160_set_regs>
 8001f26:	4603      	mov	r3, r0
 8001f28:	73fb      	strb	r3, [r7, #15]

            /* Disable the pre-filter data in low power mode */
            if (rslt == BMI160_OK)
 8001f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d11e      	bne.n	8001f70 <process_under_sampling+0x9e>
            {
                /* Disable the Pre-filter data*/
                rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, pre_filter, 2, dev);
 8001f32:	f107 010c 	add.w	r1, r7, #12
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	2202      	movs	r2, #2
 8001f3a:	2058      	movs	r0, #88	@ 0x58
 8001f3c:	f7fe ffb7 	bl	8000eae <bmi160_set_regs>
 8001f40:	4603      	mov	r3, r0
 8001f42:	73fb      	strb	r3, [r7, #15]
 8001f44:	e014      	b.n	8001f70 <process_under_sampling+0x9e>
            }
        }
        else if (*data & BMI160_ACCEL_UNDERSAMPLING_MASK)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	b25b      	sxtb	r3, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	da0f      	bge.n	8001f70 <process_under_sampling+0x9e>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f58:	73bb      	strb	r3, [r7, #14]

            /* Disable under-sampling parameter if already enabled */
            *data = temp;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	7bba      	ldrb	r2, [r7, #14]
 8001f5e:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	2201      	movs	r2, #1
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	2040      	movs	r0, #64	@ 0x40
 8001f68:	f7fe ffa1 	bl	8000eae <bmi160_set_regs>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <set_gyro_pwr>:

/*!
 * @brief This API sets the gyro power mode.
 */
static int8_t set_gyro_pwr(struct bmi160_dev *dev)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	73fb      	strb	r3, [r7, #15]

    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	7b1b      	ldrb	r3, [r3, #12]
 8001f8c:	2b14      	cmp	r3, #20
 8001f8e:	d007      	beq.n	8001fa0 <set_gyro_pwr+0x24>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	7b1b      	ldrb	r3, [r3, #12]
 8001f94:	2b15      	cmp	r3, #21
 8001f96:	d003      	beq.n	8001fa0 <set_gyro_pwr+0x24>
        (dev->gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	7b1b      	ldrb	r3, [r3, #12]
    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 8001f9c:	2b17      	cmp	r3, #23
 8001f9e:	d129      	bne.n	8001ff4 <set_gyro_pwr+0x78>
    {
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	7b1a      	ldrb	r2, [r3, #12]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	7c1b      	ldrb	r3, [r3, #16]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d025      	beq.n	8001ff8 <set_gyro_pwr+0x7c>
        {
            /* Write gyro power */
            rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->gyro_cfg.power, 1, dev);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f103 010c 	add.w	r1, r3, #12
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	207e      	movs	r0, #126	@ 0x7e
 8001fb8:	f7fe ff79 	bl	8000eae <bmi160_set_regs>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	73fb      	strb	r3, [r7, #15]
            if (dev->prev_gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	7c1b      	ldrb	r3, [r3, #16]
 8001fc4:	2b14      	cmp	r3, #20
 8001fc6:	d104      	bne.n	8001fd2 <set_gyro_pwr+0x56>
            {
                /* Delay of 80 ms - datasheet Table 24 */
                dev->delay_ms(BMI160_GYRO_DELAY_MS);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fcc:	2050      	movs	r0, #80	@ 0x50
 8001fce:	4798      	blx	r3
 8001fd0:	e00b      	b.n	8001fea <set_gyro_pwr+0x6e>
            }
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	7c1b      	ldrb	r3, [r3, #16]
 8001fd6:	2b17      	cmp	r3, #23
 8001fd8:	d107      	bne.n	8001fea <set_gyro_pwr+0x6e>
                     (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	7b1b      	ldrb	r3, [r3, #12]
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 8001fde:	2b15      	cmp	r3, #21
 8001fe0:	d103      	bne.n	8001fea <set_gyro_pwr+0x6e>
            {
                /* This delay is required for transition from
                 * fast-startup mode to normal mode - datasheet Table 3 */
                dev->delay_ms(10);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe6:	200a      	movs	r0, #10
 8001fe8:	4798      	blx	r3
            else
            {
                /* do nothing */
            }

            dev->prev_gyro_cfg.power = dev->gyro_cfg.power;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	7b1a      	ldrb	r2, [r3, #12]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	741a      	strb	r2, [r3, #16]
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 8001ff2:	e001      	b.n	8001ff8 <set_gyro_pwr+0x7c>
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 8001ff4:	23f3      	movs	r3, #243	@ 0xf3
 8001ff6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <enable_accel_any_motion_int>:
/*!
 * @brief This API enables the any-motion interrupt for accel.
 */
static int8_t enable_accel_any_motion_int(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                          struct bmi160_dev *dev)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800200e:	2300      	movs	r3, #0
 8002010:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002012:	2300      	movs	r3, #0
 8002014:	73bb      	strb	r3, [r7, #14]

    /* Enable any motion x, any motion y, any motion z
     * in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8002016:	f107 010d 	add.w	r1, r7, #13
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	2201      	movs	r2, #1
 800201e:	2050      	movs	r0, #80	@ 0x50
 8002020:	f7fe ff12 	bl	8000e48 <bmi160_get_regs>
 8002024:	4603      	mov	r3, r0
 8002026:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002028:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d151      	bne.n	80020d4 <enable_accel_any_motion_int+0xd0>
    {
        if (any_motion_int_cfg->anymotion_en == BMI160_ENABLE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d039      	beq.n	80020b2 <enable_accel_any_motion_int+0xae>
        {
            temp = data & ~BMI160_ANY_MOTION_X_INT_EN_MASK;
 800203e:	7b7b      	ldrb	r3, [r7, #13]
 8002040:	f023 0301 	bic.w	r3, r3, #1
 8002044:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion x axis */
            data = temp | (any_motion_int_cfg->anymotion_x & BMI160_ANY_MOTION_X_INT_EN_MASK);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800204e:	b2db      	uxtb	r3, r3
 8002050:	461a      	mov	r2, r3
 8002052:	7bbb      	ldrb	r3, [r7, #14]
 8002054:	4313      	orrs	r3, r2
 8002056:	b2db      	uxtb	r3, r3
 8002058:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_ANY_MOTION_Y_INT_EN_MASK;
 800205a:	7b7b      	ldrb	r3, [r7, #13]
 800205c:	f023 0302 	bic.w	r3, r3, #2
 8002060:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion y axis */
            data = temp | ((any_motion_int_cfg->anymotion_y << 1) & BMI160_ANY_MOTION_Y_INT_EN_MASK);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800206a:	b2db      	uxtb	r3, r3
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	b25b      	sxtb	r3, r3
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	b25a      	sxtb	r2, r3
 8002076:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800207a:	4313      	orrs	r3, r2
 800207c:	b25b      	sxtb	r3, r3
 800207e:	b2db      	uxtb	r3, r3
 8002080:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_ANY_MOTION_Z_INT_EN_MASK;
 8002082:	7b7b      	ldrb	r3, [r7, #13]
 8002084:	f023 0304 	bic.w	r3, r3, #4
 8002088:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion z axis */
            data = temp | ((any_motion_int_cfg->anymotion_z << 2) & BMI160_ANY_MOTION_Z_INT_EN_MASK);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002092:	b2db      	uxtb	r3, r3
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	b25b      	sxtb	r3, r3
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	b25a      	sxtb	r2, r3
 800209e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	b25b      	sxtb	r3, r3
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	737b      	strb	r3, [r7, #13]

            /* any-motion feature selected*/
            dev->any_sig_sel = BMI160_ANY_MOTION_ENABLED;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	2200      	movs	r2, #0
 80020ae:	70da      	strb	r2, [r3, #3]
 80020b0:	e007      	b.n	80020c2 <enable_accel_any_motion_int+0xbe>
        }
        else
        {
            data = data & ~BMI160_ANY_MOTION_ALL_INT_EN_MASK;
 80020b2:	7b7b      	ldrb	r3, [r7, #13]
 80020b4:	f023 0307 	bic.w	r3, r3, #7
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	737b      	strb	r3, [r7, #13]

            /* neither any-motion feature nor sig-motion selected */
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	22ff      	movs	r2, #255	@ 0xff
 80020c0:	70da      	strb	r2, [r3, #3]
        }

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 80020c2:	f107 010d 	add.w	r1, r7, #13
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	2201      	movs	r2, #1
 80020ca:	2050      	movs	r0, #80	@ 0x50
 80020cc:	f7fe feef 	bl	8000eae <bmi160_set_regs>
 80020d0:	4603      	mov	r3, r0
 80020d2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80020d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <disable_sig_motion_int>:

/*!
 * @brief This API disable the sig-motion interrupt.
 */
static int8_t disable_sig_motion_int(const struct bmi160_dev *dev)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 80020e8:	2300      	movs	r3, #0
 80020ea:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	73bb      	strb	r3, [r7, #14]

    /* Disabling Significant motion interrupt if enabled */
    rslt = bmi160_get_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 80020f0:	f107 010d 	add.w	r1, r7, #13
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	2062      	movs	r0, #98	@ 0x62
 80020fa:	f7fe fea5 	bl	8000e48 <bmi160_get_regs>
 80020fe:	4603      	mov	r3, r0
 8002100:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d115      	bne.n	8002136 <disable_sig_motion_int+0x56>
    {
        temp = (data & BMI160_SIG_MOTION_SEL_MASK);
 800210a:	7b7b      	ldrb	r3, [r7, #13]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	73bb      	strb	r3, [r7, #14]
        if (temp)
 8002112:	7bbb      	ldrb	r3, [r7, #14]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00e      	beq.n	8002136 <disable_sig_motion_int+0x56>
        {
            temp = data & ~BMI160_SIG_MOTION_SEL_MASK;
 8002118:	7b7b      	ldrb	r3, [r7, #13]
 800211a:	f023 0302 	bic.w	r3, r3, #2
 800211e:	73bb      	strb	r3, [r7, #14]
            data = temp;
 8002120:	7bbb      	ldrb	r3, [r7, #14]
 8002122:	737b      	strb	r3, [r7, #13]

            /* Write data to register */
            rslt = bmi160_set_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 8002124:	f107 010d 	add.w	r1, r7, #13
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	2062      	movs	r0, #98	@ 0x62
 800212e:	f7fe febe 	bl	8000eae <bmi160_set_regs>
 8002132:	4603      	mov	r3, r0
 8002134:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8002136:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
	...

08002144 <map_feature_interrupt>:
/*!
 *  @brief This API is used to map/unmap the Any/Sig motion, Step det/Low-g,
 *  Double tap, Single tap, Orientation, Flat, High-G, Nomotion interrupt pins.
 */
static int8_t map_feature_interrupt(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data[3] = { 0, 0, 0 };
 800214e:	4a48      	ldr	r2, [pc, #288]	@ (8002270 <map_feature_interrupt+0x12c>)
 8002150:	f107 030c 	add.w	r3, r7, #12
 8002154:	6812      	ldr	r2, [r2, #0]
 8002156:	4611      	mov	r1, r2
 8002158:	8019      	strh	r1, [r3, #0]
 800215a:	3302      	adds	r3, #2
 800215c:	0c12      	lsrs	r2, r2, #16
 800215e:	701a      	strb	r2, [r3, #0]
    uint8_t temp[3] = { 0, 0, 0 };
 8002160:	4a43      	ldr	r2, [pc, #268]	@ (8002270 <map_feature_interrupt+0x12c>)
 8002162:	f107 0308 	add.w	r3, r7, #8
 8002166:	6812      	ldr	r2, [r2, #0]
 8002168:	4611      	mov	r1, r2
 800216a:	8019      	strh	r1, [r3, #0]
 800216c:	3302      	adds	r3, #2
 800216e:	0c12      	lsrs	r2, r2, #16
 8002170:	701a      	strb	r2, [r3, #0]

    rslt = bmi160_get_regs(BMI160_INT_MAP_0_ADDR, data, 3, dev);
 8002172:	f107 010c 	add.w	r1, r7, #12
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	2203      	movs	r2, #3
 800217a:	2055      	movs	r0, #85	@ 0x55
 800217c:	f7fe fe64 	bl	8000e48 <bmi160_get_regs>
 8002180:	4603      	mov	r3, r0
 8002182:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d16a      	bne.n	8002262 <map_feature_interrupt+0x11e>
    {
        temp[0] = data[0] & ~int_mask_lookup_table[int_config->int_type];
 800218c:	7b3b      	ldrb	r3, [r7, #12]
 800218e:	b25a      	sxtb	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	785b      	ldrb	r3, [r3, #1]
 8002194:	4619      	mov	r1, r3
 8002196:	4b37      	ldr	r3, [pc, #220]	@ (8002274 <map_feature_interrupt+0x130>)
 8002198:	5c5b      	ldrb	r3, [r3, r1]
 800219a:	b25b      	sxtb	r3, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	b25b      	sxtb	r3, r3
 80021a0:	4013      	ands	r3, r2
 80021a2:	b25b      	sxtb	r3, r3
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	723b      	strb	r3, [r7, #8]
        temp[2] = data[2] & ~int_mask_lookup_table[int_config->int_type];
 80021a8:	7bbb      	ldrb	r3, [r7, #14]
 80021aa:	b25a      	sxtb	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	785b      	ldrb	r3, [r3, #1]
 80021b0:	4619      	mov	r1, r3
 80021b2:	4b30      	ldr	r3, [pc, #192]	@ (8002274 <map_feature_interrupt+0x130>)
 80021b4:	5c5b      	ldrb	r3, [r3, r1]
 80021b6:	b25b      	sxtb	r3, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	b25b      	sxtb	r3, r3
 80021bc:	4013      	ands	r3, r2
 80021be:	b25b      	sxtb	r3, r3
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	72bb      	strb	r3, [r7, #10]
        switch (int_config->int_channel)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b03      	cmp	r3, #3
 80021ca:	d83b      	bhi.n	8002244 <map_feature_interrupt+0x100>
 80021cc:	a201      	add	r2, pc, #4	@ (adr r2, 80021d4 <map_feature_interrupt+0x90>)
 80021ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d2:	bf00      	nop
 80021d4:	080021e5 	.word	0x080021e5
 80021d8:	080021ef 	.word	0x080021ef
 80021dc:	08002207 	.word	0x08002207
 80021e0:	0800221f 	.word	0x0800221f
        {
            case BMI160_INT_CHANNEL_NONE:
                data[0] = temp[0];
 80021e4:	7a3b      	ldrb	r3, [r7, #8]
 80021e6:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2];
 80021e8:	7abb      	ldrb	r3, [r7, #10]
 80021ea:	73bb      	strb	r3, [r7, #14]
                break;
 80021ec:	e02c      	b.n	8002248 <map_feature_interrupt+0x104>
            case BMI160_INT_CHANNEL_1:
                data[0] = temp[0] | int_mask_lookup_table[int_config->int_type];
 80021ee:	7a3a      	ldrb	r2, [r7, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	785b      	ldrb	r3, [r3, #1]
 80021f4:	4619      	mov	r1, r3
 80021f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002274 <map_feature_interrupt+0x130>)
 80021f8:	5c5b      	ldrb	r3, [r3, r1]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2];
 8002200:	7abb      	ldrb	r3, [r7, #10]
 8002202:	73bb      	strb	r3, [r7, #14]
                break;
 8002204:	e020      	b.n	8002248 <map_feature_interrupt+0x104>
            case BMI160_INT_CHANNEL_2:
                data[2] = temp[2] | int_mask_lookup_table[int_config->int_type];
 8002206:	7aba      	ldrb	r2, [r7, #10]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	785b      	ldrb	r3, [r3, #1]
 800220c:	4619      	mov	r1, r3
 800220e:	4b19      	ldr	r3, [pc, #100]	@ (8002274 <map_feature_interrupt+0x130>)
 8002210:	5c5b      	ldrb	r3, [r3, r1]
 8002212:	4313      	orrs	r3, r2
 8002214:	b2db      	uxtb	r3, r3
 8002216:	73bb      	strb	r3, [r7, #14]
                data[0] = temp[0];
 8002218:	7a3b      	ldrb	r3, [r7, #8]
 800221a:	733b      	strb	r3, [r7, #12]
                break;
 800221c:	e014      	b.n	8002248 <map_feature_interrupt+0x104>
            case BMI160_INT_CHANNEL_BOTH:
                data[0] = temp[0] | int_mask_lookup_table[int_config->int_type];
 800221e:	7a3a      	ldrb	r2, [r7, #8]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	785b      	ldrb	r3, [r3, #1]
 8002224:	4619      	mov	r1, r3
 8002226:	4b13      	ldr	r3, [pc, #76]	@ (8002274 <map_feature_interrupt+0x130>)
 8002228:	5c5b      	ldrb	r3, [r3, r1]
 800222a:	4313      	orrs	r3, r2
 800222c:	b2db      	uxtb	r3, r3
 800222e:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2] | int_mask_lookup_table[int_config->int_type];
 8002230:	7aba      	ldrb	r2, [r7, #10]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	785b      	ldrb	r3, [r3, #1]
 8002236:	4619      	mov	r1, r3
 8002238:	4b0e      	ldr	r3, [pc, #56]	@ (8002274 <map_feature_interrupt+0x130>)
 800223a:	5c5b      	ldrb	r3, [r3, r1]
 800223c:	4313      	orrs	r3, r2
 800223e:	b2db      	uxtb	r3, r3
 8002240:	73bb      	strb	r3, [r7, #14]
                break;
 8002242:	e001      	b.n	8002248 <map_feature_interrupt+0x104>
            default:
                rslt = BMI160_E_OUT_OF_RANGE;
 8002244:	23fc      	movs	r3, #252	@ 0xfc
 8002246:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMI160_OK)
 8002248:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d108      	bne.n	8002262 <map_feature_interrupt+0x11e>
        {
            rslt = bmi160_set_regs(BMI160_INT_MAP_0_ADDR, data, 3, dev);
 8002250:	f107 010c 	add.w	r1, r7, #12
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	2203      	movs	r2, #3
 8002258:	2055      	movs	r0, #85	@ 0x55
 800225a:	f7fe fe28 	bl	8000eae <bmi160_set_regs>
 800225e:	4603      	mov	r3, r0
 8002260:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8002262:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	080149e0 	.word	0x080149e0
 8002274:	08014a90 	.word	0x08014a90

08002278 <map_hardware_interrupt>:
/*!
 *  @brief This API is used to map/unmap the Dataready(Accel & Gyro), FIFO full
 *  and FIFO watermark interrupt.
 */
static int8_t map_hardware_interrupt(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002282:	2300      	movs	r3, #0
 8002284:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_MAP_1_ADDR, &data, 1, dev);
 800228a:	f107 010d 	add.w	r1, r7, #13
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	2201      	movs	r2, #1
 8002292:	2056      	movs	r0, #86	@ 0x56
 8002294:	f7fe fdd8 	bl	8000e48 <bmi160_get_regs>
 8002298:	4603      	mov	r3, r0
 800229a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800229c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d168      	bne.n	8002376 <map_hardware_interrupt+0xfe>
    {
        temp = data & ~int_mask_lookup_table[int_config->int_type];
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	785b      	ldrb	r3, [r3, #1]
 80022a8:	461a      	mov	r2, r3
 80022aa:	4b36      	ldr	r3, [pc, #216]	@ (8002384 <map_hardware_interrupt+0x10c>)
 80022ac:	5c9b      	ldrb	r3, [r3, r2]
 80022ae:	b25b      	sxtb	r3, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	b25a      	sxtb	r2, r3
 80022b4:	7b7b      	ldrb	r3, [r7, #13]
 80022b6:	b25b      	sxtb	r3, r3
 80022b8:	4013      	ands	r3, r2
 80022ba:	b25b      	sxtb	r3, r3
 80022bc:	73bb      	strb	r3, [r7, #14]
        temp = temp & ~((uint8_t)(int_mask_lookup_table[int_config->int_type] << 4));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	785b      	ldrb	r3, [r3, #1]
 80022c2:	461a      	mov	r2, r3
 80022c4:	4b2f      	ldr	r3, [pc, #188]	@ (8002384 <map_hardware_interrupt+0x10c>)
 80022c6:	5c9b      	ldrb	r3, [r3, r2]
 80022c8:	011b      	lsls	r3, r3, #4
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	b25a      	sxtb	r2, r3
 80022d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80022d6:	4013      	ands	r3, r2
 80022d8:	b25b      	sxtb	r3, r3
 80022da:	73bb      	strb	r3, [r7, #14]
        switch (int_config->int_channel)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d839      	bhi.n	8002358 <map_hardware_interrupt+0xe0>
 80022e4:	a201      	add	r2, pc, #4	@ (adr r2, 80022ec <map_hardware_interrupt+0x74>)
 80022e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ea:	bf00      	nop
 80022ec:	080022fd 	.word	0x080022fd
 80022f0:	08002303 	.word	0x08002303
 80022f4:	0800231b 	.word	0x0800231b
 80022f8:	0800232f 	.word	0x0800232f
        {
            case BMI160_INT_CHANNEL_NONE:
                data = temp;
 80022fc:	7bbb      	ldrb	r3, [r7, #14]
 80022fe:	737b      	strb	r3, [r7, #13]
                break;
 8002300:	e02c      	b.n	800235c <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_1:
                data = temp | (uint8_t)((int_mask_lookup_table[int_config->int_type]) << 4);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	785b      	ldrb	r3, [r3, #1]
 8002306:	461a      	mov	r2, r3
 8002308:	4b1e      	ldr	r3, [pc, #120]	@ (8002384 <map_hardware_interrupt+0x10c>)
 800230a:	5c9b      	ldrb	r3, [r3, r2]
 800230c:	011b      	lsls	r3, r3, #4
 800230e:	b2da      	uxtb	r2, r3
 8002310:	7bbb      	ldrb	r3, [r7, #14]
 8002312:	4313      	orrs	r3, r2
 8002314:	b2db      	uxtb	r3, r3
 8002316:	737b      	strb	r3, [r7, #13]
                break;
 8002318:	e020      	b.n	800235c <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_2:
                data = temp | int_mask_lookup_table[int_config->int_type];
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	785b      	ldrb	r3, [r3, #1]
 800231e:	461a      	mov	r2, r3
 8002320:	4b18      	ldr	r3, [pc, #96]	@ (8002384 <map_hardware_interrupt+0x10c>)
 8002322:	5c9a      	ldrb	r2, [r3, r2]
 8002324:	7bbb      	ldrb	r3, [r7, #14]
 8002326:	4313      	orrs	r3, r2
 8002328:	b2db      	uxtb	r3, r3
 800232a:	737b      	strb	r3, [r7, #13]
                break;
 800232c:	e016      	b.n	800235c <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_BOTH:
                data = temp | int_mask_lookup_table[int_config->int_type];
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	785b      	ldrb	r3, [r3, #1]
 8002332:	461a      	mov	r2, r3
 8002334:	4b13      	ldr	r3, [pc, #76]	@ (8002384 <map_hardware_interrupt+0x10c>)
 8002336:	5c9a      	ldrb	r2, [r3, r2]
 8002338:	7bbb      	ldrb	r3, [r7, #14]
 800233a:	4313      	orrs	r3, r2
 800233c:	b2db      	uxtb	r3, r3
 800233e:	737b      	strb	r3, [r7, #13]
                data = data | (uint8_t)((int_mask_lookup_table[int_config->int_type]) << 4);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	785b      	ldrb	r3, [r3, #1]
 8002344:	461a      	mov	r2, r3
 8002346:	4b0f      	ldr	r3, [pc, #60]	@ (8002384 <map_hardware_interrupt+0x10c>)
 8002348:	5c9b      	ldrb	r3, [r3, r2]
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	b2da      	uxtb	r2, r3
 800234e:	7b7b      	ldrb	r3, [r7, #13]
 8002350:	4313      	orrs	r3, r2
 8002352:	b2db      	uxtb	r3, r3
 8002354:	737b      	strb	r3, [r7, #13]
                break;
 8002356:	e001      	b.n	800235c <map_hardware_interrupt+0xe4>
            default:
                rslt = BMI160_E_OUT_OF_RANGE;
 8002358:	23fc      	movs	r3, #252	@ 0xfc
 800235a:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMI160_OK)
 800235c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d108      	bne.n	8002376 <map_hardware_interrupt+0xfe>
        {
            rslt = bmi160_set_regs(BMI160_INT_MAP_1_ADDR, &data, 1, dev);
 8002364:	f107 010d 	add.w	r1, r7, #13
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	2201      	movs	r2, #1
 800236c:	2056      	movs	r0, #86	@ 0x56
 800236e:	f7fe fd9e 	bl	8000eae <bmi160_set_regs>
 8002372:	4603      	mov	r3, r0
 8002374:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8002376:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	08014a90 	.word	0x08014a90

08002388 <config_any_motion_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for any-motion interrupt.
 */
static int8_t config_any_motion_src(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                    const struct bmi160_dev *dev)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002392:	2300      	movs	r3, #0
 8002394:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 800239a:	f107 010d 	add.w	r1, r7, #13
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	2201      	movs	r2, #1
 80023a2:	2059      	movs	r0, #89	@ 0x59
 80023a4:	f7fe fd50 	bl	8000e48 <bmi160_get_regs>
 80023a8:	4603      	mov	r3, r0
 80023aa:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80023ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d119      	bne.n	80023e8 <config_any_motion_src+0x60>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 80023b4:	7b7b      	ldrb	r3, [r7, #13]
 80023b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80023ba:	73bb      	strb	r3, [r7, #14]
        data = temp | ((any_motion_int_cfg->anymotion_data_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	01db      	lsls	r3, r3, #7
 80023c8:	b25a      	sxtb	r2, r3
 80023ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	b25b      	sxtb	r3, r3
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 80023d6:	f107 010d 	add.w	r1, r7, #13
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	2201      	movs	r2, #1
 80023de:	2059      	movs	r0, #89	@ 0x59
 80023e0:	f7fe fd65 	bl	8000eae <bmi160_set_regs>
 80023e4:	4603      	mov	r3, r0
 80023e6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80023e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <config_any_dur_threshold>:
 * @brief This API configure the duration and threshold of
 * any-motion interrupt.
 */
static int8_t config_any_dur_threshold(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                       const struct bmi160_dev *dev)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	733b      	strb	r3, [r7, #12]
    uint8_t temp = 0;
 8002402:	2300      	movs	r3, #0
 8002404:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[2] = { 0 };
 8002406:	2300      	movs	r3, #0
 8002408:	813b      	strh	r3, [r7, #8]
    uint8_t dur;

    /* Configure Int Motion 0 register */
    rslt = bmi160_get_regs(BMI160_INT_MOTION_0_ADDR, &data, 1, dev);
 800240a:	f107 010c 	add.w	r1, r7, #12
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	2201      	movs	r2, #1
 8002412:	205f      	movs	r0, #95	@ 0x5f
 8002414:	f7fe fd18 	bl	8000e48 <bmi160_get_regs>
 8002418:	4603      	mov	r3, r0
 800241a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800241c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d122      	bne.n	800246a <config_any_dur_threshold+0x76>
    {
        /* slope duration */
        dur = (uint8_t)any_motion_int_cfg->anymotion_dur;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800242c:	b2db      	uxtb	r3, r3
 800242e:	737b      	strb	r3, [r7, #13]
        temp = data & ~BMI160_SLOPE_INT_DUR_MASK;
 8002430:	7b3b      	ldrb	r3, [r7, #12]
 8002432:	f023 0303 	bic.w	r3, r3, #3
 8002436:	73bb      	strb	r3, [r7, #14]
        data = temp | (dur & BMI160_MOTION_SRC_INT_MASK);
 8002438:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800243c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002440:	b25a      	sxtb	r2, r3
 8002442:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002446:	4313      	orrs	r3, r2
 8002448:	b25b      	sxtb	r3, r3
 800244a:	b2db      	uxtb	r3, r3
 800244c:	733b      	strb	r3, [r7, #12]
        data_array[0] = data;
 800244e:	7b3b      	ldrb	r3, [r7, #12]
 8002450:	723b      	strb	r3, [r7, #8]

        /* add slope threshold */
        data_array[1] = any_motion_int_cfg->anymotion_thr;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	785b      	ldrb	r3, [r3, #1]
 8002456:	727b      	strb	r3, [r7, #9]
        /* INT MOTION 0 and INT MOTION 1 address lie consecutively,
         * hence writing data to respective registers at one go */

        /* Writing to Int_motion 0 and
         * Int_motion 1 Address simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_MOTION_0_ADDR, data_array, 2, dev);
 8002458:	f107 0108 	add.w	r1, r7, #8
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	2202      	movs	r2, #2
 8002460:	205f      	movs	r0, #95	@ 0x5f
 8002462:	f7fe fd24 	bl	8000eae <bmi160_set_regs>
 8002466:	4603      	mov	r3, r0
 8002468:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800246a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <config_any_motion_int_settg>:
 * @brief This API configure necessary setting of any-motion interrupt.
 */
static int8_t config_any_motion_int_settg(const struct bmi160_int_settg *int_config,
                                          const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                          const struct bmi160_dev *dev)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b086      	sub	sp, #24
 800247a:	af00      	add	r7, sp, #0
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f7ff fa30 	bl	80018ea <set_intr_pin_config>
 800248a:	4603      	mov	r3, r0
 800248c:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 800248e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d122      	bne.n	80024dc <config_any_motion_int_settg+0x66>
    {
        rslt = disable_sig_motion_int(dev);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff fe22 	bl	80020e0 <disable_sig_motion_int>
 800249c:	4603      	mov	r3, r0
 800249e:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 80024a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d119      	bne.n	80024dc <config_any_motion_int_settg+0x66>
        {
            rslt = map_feature_interrupt(int_config, dev);
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f7ff fe4a 	bl	8002144 <map_feature_interrupt>
 80024b0:	4603      	mov	r3, r0
 80024b2:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 80024b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10f      	bne.n	80024dc <config_any_motion_int_settg+0x66>
            {
                rslt = config_any_motion_src(any_motion_int_cfg, dev);
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	68b8      	ldr	r0, [r7, #8]
 80024c0:	f7ff ff62 	bl	8002388 <config_any_motion_src>
 80024c4:	4603      	mov	r3, r0
 80024c6:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMI160_OK)
 80024c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d105      	bne.n	80024dc <config_any_motion_int_settg+0x66>
                {
                    rslt = config_any_dur_threshold(any_motion_int_cfg, dev);
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	68b8      	ldr	r0, [r7, #8]
 80024d4:	f7ff ff8e 	bl	80023f4 <config_any_dur_threshold>
 80024d8:	4603      	mov	r3, r0
 80024da:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    }

    return rslt;
 80024dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <enable_data_ready_int>:

/*!
 * @brief This API enable the data ready interrupt.
 */
static int8_t enable_data_ready_int(const struct bmi160_dev *dev)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80024f8:	f107 010d 	add.w	r1, r7, #13
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	2051      	movs	r0, #81	@ 0x51
 8002502:	f7fe fca1 	bl	8000e48 <bmi160_get_regs>
 8002506:	4603      	mov	r3, r0
 8002508:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800250a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d111      	bne.n	8002536 <enable_data_ready_int+0x4e>
    {
        temp = data & ~BMI160_DATA_RDY_INT_EN_MASK;
 8002512:	7b7b      	ldrb	r3, [r7, #13]
 8002514:	f023 0310 	bic.w	r3, r3, #16
 8002518:	73bb      	strb	r3, [r7, #14]
        data = temp | ((1 << 4) & BMI160_DATA_RDY_INT_EN_MASK);
 800251a:	7bbb      	ldrb	r3, [r7, #14]
 800251c:	f043 0310 	orr.w	r3, r3, #16
 8002520:	b2db      	uxtb	r3, r3
 8002522:	737b      	strb	r3, [r7, #13]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8002524:	f107 010d 	add.w	r1, r7, #13
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	2051      	movs	r0, #81	@ 0x51
 800252e:	f7fe fcbe 	bl	8000eae <bmi160_set_regs>
 8002532:	4603      	mov	r3, r0
 8002534:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002536:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <enable_no_motion_int>:
/*!
 * @brief This API enables the no motion/slow motion interrupt.
 */
static int8_t enable_no_motion_int(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                   const struct bmi160_dev *dev)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b084      	sub	sp, #16
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
 800254a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800254c:	2300      	movs	r3, #0
 800254e:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002550:	2300      	movs	r3, #0
 8002552:	73bb      	strb	r3, [r7, #14]

    /* Enable no motion x, no motion y, no motion z
     * in Int Enable 2 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 8002554:	f107 010d 	add.w	r1, r7, #13
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	2201      	movs	r2, #1
 800255c:	2052      	movs	r0, #82	@ 0x52
 800255e:	f7fe fc73 	bl	8000e48 <bmi160_get_regs>
 8002562:	4603      	mov	r3, r0
 8002564:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d138      	bne.n	80025e0 <enable_no_motion_int+0x9e>
    {
        if (no_mot_int_cfg->no_motion_x == 1)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	d008      	beq.n	800258e <enable_no_motion_int+0x4c>
        {
            temp = data & ~BMI160_NO_MOTION_X_INT_EN_MASK;
 800257c:	7b7b      	ldrb	r3, [r7, #13]
 800257e:	f023 0301 	bic.w	r3, r3, #1
 8002582:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | (1 & BMI160_NO_MOTION_X_INT_EN_MASK);
 8002584:	7bbb      	ldrb	r3, [r7, #14]
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	b2db      	uxtb	r3, r3
 800258c:	737b      	strb	r3, [r7, #13]
        }

        if (no_mot_int_cfg->no_motion_y == 1)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b00      	cmp	r3, #0
 800259a:	d008      	beq.n	80025ae <enable_no_motion_int+0x6c>
        {
            temp = data & ~BMI160_NO_MOTION_Y_INT_EN_MASK;
 800259c:	7b7b      	ldrb	r3, [r7, #13]
 800259e:	f023 0302 	bic.w	r3, r3, #2
 80025a2:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | ((1 << 1) & BMI160_NO_MOTION_Y_INT_EN_MASK);
 80025a4:	7bbb      	ldrb	r3, [r7, #14]
 80025a6:	f043 0302 	orr.w	r3, r3, #2
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	737b      	strb	r3, [r7, #13]
        }

        if (no_mot_int_cfg->no_motion_z == 1)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	f003 0304 	and.w	r3, r3, #4
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d008      	beq.n	80025ce <enable_no_motion_int+0x8c>
        {
            temp = data & ~BMI160_NO_MOTION_Z_INT_EN_MASK;
 80025bc:	7b7b      	ldrb	r3, [r7, #13]
 80025be:	f023 0304 	bic.w	r3, r3, #4
 80025c2:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | ((1 << 2) & BMI160_NO_MOTION_Z_INT_EN_MASK);
 80025c4:	7bbb      	ldrb	r3, [r7, #14]
 80025c6:	f043 0304 	orr.w	r3, r3, #4
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	737b      	strb	r3, [r7, #13]
        }

        /* write data to Int Enable 2 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 80025ce:	f107 010d 	add.w	r1, r7, #13
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	2201      	movs	r2, #1
 80025d6:	2052      	movs	r0, #82	@ 0x52
 80025d8:	f7fe fc69 	bl	8000eae <bmi160_set_regs>
 80025dc:	4603      	mov	r3, r0
 80025de:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80025e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <config_no_motion_int_settg>:
 * no motion/slow motion interrupt.
 */
static int8_t config_no_motion_int_settg(const struct bmi160_int_settg *int_config,
                                         const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                         const struct bmi160_dev *dev)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f7ff f975 	bl	80018ea <set_intr_pin_config>
 8002600:	4603      	mov	r3, r0
 8002602:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8002604:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d119      	bne.n	8002640 <config_no_motion_int_settg+0x54>
    {
        rslt = map_feature_interrupt(int_config, dev);
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f7ff fd98 	bl	8002144 <map_feature_interrupt>
 8002614:	4603      	mov	r3, r0
 8002616:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8002618:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d10f      	bne.n	8002640 <config_no_motion_int_settg+0x54>
        {
            rslt = config_no_motion_data_src(no_mot_int_cfg, dev);
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	68b8      	ldr	r0, [r7, #8]
 8002624:	f000 f812 	bl	800264c <config_no_motion_data_src>
 8002628:	4603      	mov	r3, r0
 800262a:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 800262c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d105      	bne.n	8002640 <config_no_motion_int_settg+0x54>
            {
                rslt = config_no_motion_dur_thr(no_mot_int_cfg, dev);
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	68b8      	ldr	r0, [r7, #8]
 8002638:	f000 f83e 	bl	80026b8 <config_no_motion_dur_thr>
 800263c:	4603      	mov	r3, r0
 800263e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8002640:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <config_no_motion_data_src>:
/*!
 * @brief This API configure the source of interrupt for no motion.
 */
static int8_t config_no_motion_data_src(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                        const struct bmi160_dev *dev)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002656:	2300      	movs	r3, #0
 8002658:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 800265a:	2300      	movs	r3, #0
 800265c:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 800265e:	f107 010d 	add.w	r1, r7, #13
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	2201      	movs	r2, #1
 8002666:	2059      	movs	r0, #89	@ 0x59
 8002668:	f7fe fbee 	bl	8000e48 <bmi160_get_regs>
 800266c:	4603      	mov	r3, r0
 800266e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002670:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d119      	bne.n	80026ac <config_no_motion_data_src+0x60>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 8002678:	7b7b      	ldrb	r3, [r7, #13]
 800267a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800267e:	73bb      	strb	r3, [r7, #14]
        data = temp | ((no_mot_int_cfg->no_motion_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	785b      	ldrb	r3, [r3, #1]
 8002684:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002688:	b2db      	uxtb	r3, r3
 800268a:	01db      	lsls	r3, r3, #7
 800268c:	b25a      	sxtb	r2, r3
 800268e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002692:	4313      	orrs	r3, r2
 8002694:	b25b      	sxtb	r3, r3
 8002696:	b2db      	uxtb	r3, r3
 8002698:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 800269a:	f107 010d 	add.w	r1, r7, #13
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2201      	movs	r2, #1
 80026a2:	2059      	movs	r0, #89	@ 0x59
 80026a4:	f7fe fc03 	bl	8000eae <bmi160_set_regs>
 80026a8:	4603      	mov	r3, r0
 80026aa:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80026ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <config_no_motion_dur_thr>:
 * @brief This API configure the duration and threshold of
 * no motion/slow motion interrupt along with selection of no/slow motion.
 */
static int8_t config_no_motion_dur_thr(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                       const struct bmi160_dev *dev)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80026c2:	2300      	movs	r3, #0
 80026c4:	72fb      	strb	r3, [r7, #11]
    uint8_t temp = 0;
 80026c6:	2300      	movs	r3, #0
 80026c8:	73bb      	strb	r3, [r7, #14]
    uint8_t temp_1 = 0;
 80026ca:	2300      	movs	r3, #0
 80026cc:	737b      	strb	r3, [r7, #13]
    uint8_t reg_addr;
    uint8_t data_array[2] = { 0 };
 80026ce:	2300      	movs	r3, #0
 80026d0:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_MOTION register */
    reg_addr = BMI160_INT_MOTION_0_ADDR;
 80026d2:	235f      	movs	r3, #95	@ 0x5f
 80026d4:	733b      	strb	r3, [r7, #12]
    rslt = bmi160_get_regs(reg_addr, &data, 1, dev);
 80026d6:	f107 010b 	add.w	r1, r7, #11
 80026da:	7b38      	ldrb	r0, [r7, #12]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	2201      	movs	r2, #1
 80026e0:	f7fe fbb2 	bl	8000e48 <bmi160_get_regs>
 80026e4:	4603      	mov	r3, r0
 80026e6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80026e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d14b      	bne.n	8002788 <config_no_motion_dur_thr+0xd0>
    {
        temp = data & ~BMI160_NO_MOTION_INT_DUR_MASK;
 80026f0:	7afb      	ldrb	r3, [r7, #11]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	73bb      	strb	r3, [r7, #14]

        /* Adding no_motion duration */
        data = temp | ((no_mot_int_cfg->no_motion_dur << 2) & BMI160_NO_MOTION_INT_DUR_MASK);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8002700:	b2db      	uxtb	r3, r3
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	b25a      	sxtb	r2, r3
 8002706:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800270a:	4313      	orrs	r3, r2
 800270c:	b25b      	sxtb	r3, r3
 800270e:	b2db      	uxtb	r3, r3
 8002710:	72fb      	strb	r3, [r7, #11]

        /* Write data to NO_MOTION 0 address */
        rslt = bmi160_set_regs(reg_addr, &data, 1, dev);
 8002712:	f107 010b 	add.w	r1, r7, #11
 8002716:	7b38      	ldrb	r0, [r7, #12]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	2201      	movs	r2, #1
 800271c:	f7fe fbc7 	bl	8000eae <bmi160_set_regs>
 8002720:	4603      	mov	r3, r0
 8002722:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8002724:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d12d      	bne.n	8002788 <config_no_motion_dur_thr+0xd0>
        {
            reg_addr = BMI160_INT_MOTION_3_ADDR;
 800272c:	2362      	movs	r3, #98	@ 0x62
 800272e:	733b      	strb	r3, [r7, #12]
            rslt = bmi160_get_regs(reg_addr, &data, 1, dev);
 8002730:	f107 010b 	add.w	r1, r7, #11
 8002734:	7b38      	ldrb	r0, [r7, #12]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2201      	movs	r2, #1
 800273a:	f7fe fb85 	bl	8000e48 <bmi160_get_regs>
 800273e:	4603      	mov	r3, r0
 8002740:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8002742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d11e      	bne.n	8002788 <config_no_motion_dur_thr+0xd0>
            {
                temp = data & ~BMI160_NO_MOTION_SEL_BIT_MASK;
 800274a:	7afb      	ldrb	r3, [r7, #11]
 800274c:	f023 0301 	bic.w	r3, r3, #1
 8002750:	73bb      	strb	r3, [r7, #14]

                /* Adding no_motion_sel bit */
                temp_1 = (no_mot_int_cfg->no_motion_sel & BMI160_NO_MOTION_SEL_BIT_MASK);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	785b      	ldrb	r3, [r3, #1]
 8002756:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800275a:	b2db      	uxtb	r3, r3
 800275c:	737b      	strb	r3, [r7, #13]
                data = (temp | temp_1);
 800275e:	7bba      	ldrb	r2, [r7, #14]
 8002760:	7b7b      	ldrb	r3, [r7, #13]
 8002762:	4313      	orrs	r3, r2
 8002764:	b2db      	uxtb	r3, r3
 8002766:	72fb      	strb	r3, [r7, #11]
                data_array[1] = data;
 8002768:	7afb      	ldrb	r3, [r7, #11]
 800276a:	727b      	strb	r3, [r7, #9]

                /* Adding no motion threshold */
                data_array[0] = no_mot_int_cfg->no_motion_thres;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	789b      	ldrb	r3, [r3, #2]
 8002770:	723b      	strb	r3, [r7, #8]
                reg_addr = BMI160_INT_MOTION_2_ADDR;
 8002772:	2361      	movs	r3, #97	@ 0x61
 8002774:	733b      	strb	r3, [r7, #12]

                /* writing data to INT_MOTION 2 and INT_MOTION 3
                 * address simultaneously */
                rslt = bmi160_set_regs(reg_addr, data_array, 2, dev);
 8002776:	f107 0108 	add.w	r1, r7, #8
 800277a:	7b38      	ldrb	r0, [r7, #12]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	2202      	movs	r2, #2
 8002780:	f7fe fb95 	bl	8000eae <bmi160_set_regs>
 8002784:	4603      	mov	r3, r0
 8002786:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8002788:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <enable_sig_motion_int>:

/*!
 * @brief This API enables the sig-motion motion interrupt.
 */
static int8_t enable_sig_motion_int(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg, struct bmi160_dev *dev)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800279e:	2300      	movs	r3, #0
 80027a0:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80027a2:	2300      	movs	r3, #0
 80027a4:	73bb      	strb	r3, [r7, #14]

    /* For significant motion,enable any motion x,any motion y,
     * any motion z in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 80027a6:	f107 010d 	add.w	r1, r7, #13
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2201      	movs	r2, #1
 80027ae:	2050      	movs	r0, #80	@ 0x50
 80027b0:	f7fe fb4a 	bl	8000e48 <bmi160_get_regs>
 80027b4:	4603      	mov	r3, r0
 80027b6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80027b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d124      	bne.n	800280a <enable_sig_motion_int+0x76>
    {
        if (sig_mot_int_cfg->sig_en == BMI160_ENABLE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	f003 0320 	and.w	r3, r3, #32
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00c      	beq.n	80027e8 <enable_sig_motion_int+0x54>
        {
            temp = data & ~BMI160_SIG_MOTION_INT_EN_MASK;
 80027ce:	7b7b      	ldrb	r3, [r7, #13]
 80027d0:	f023 0307 	bic.w	r3, r3, #7
 80027d4:	73bb      	strb	r3, [r7, #14]
            data = temp | (7 & BMI160_SIG_MOTION_INT_EN_MASK);
 80027d6:	7bbb      	ldrb	r3, [r7, #14]
 80027d8:	f043 0307 	orr.w	r3, r3, #7
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	737b      	strb	r3, [r7, #13]

            /* sig-motion feature selected*/
            dev->any_sig_sel = BMI160_SIG_MOTION_ENABLED;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	2201      	movs	r2, #1
 80027e4:	70da      	strb	r2, [r3, #3]
 80027e6:	e007      	b.n	80027f8 <enable_sig_motion_int+0x64>
        }
        else
        {
            data = data & ~BMI160_SIG_MOTION_INT_EN_MASK;
 80027e8:	7b7b      	ldrb	r3, [r7, #13]
 80027ea:	f023 0307 	bic.w	r3, r3, #7
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	737b      	strb	r3, [r7, #13]

            /* neither any-motion feature nor sig-motion selected */
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	22ff      	movs	r2, #255	@ 0xff
 80027f6:	70da      	strb	r2, [r3, #3]
        }

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 80027f8:	f107 010d 	add.w	r1, r7, #13
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	2201      	movs	r2, #1
 8002800:	2050      	movs	r0, #80	@ 0x50
 8002802:	f7fe fb54 	bl	8000eae <bmi160_set_regs>
 8002806:	4603      	mov	r3, r0
 8002808:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800280a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <config_sig_motion_int_settg>:
 * significant motion interrupt.
 */
static int8_t config_sig_motion_int_settg(const struct bmi160_int_settg *int_config,
                                          const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                          const struct bmi160_dev *dev)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b086      	sub	sp, #24
 800281a:	af00      	add	r7, sp, #0
 800281c:	60f8      	str	r0, [r7, #12]
 800281e:	60b9      	str	r1, [r7, #8]
 8002820:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f7ff f860 	bl	80018ea <set_intr_pin_config>
 800282a:	4603      	mov	r3, r0
 800282c:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 800282e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d119      	bne.n	800286a <config_sig_motion_int_settg+0x54>
    {
        rslt = map_feature_interrupt(int_config, dev);
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f7ff fc83 	bl	8002144 <map_feature_interrupt>
 800283e:	4603      	mov	r3, r0
 8002840:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8002842:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10f      	bne.n	800286a <config_sig_motion_int_settg+0x54>
        {
            rslt = config_sig_motion_data_src(sig_mot_int_cfg, dev);
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	68b8      	ldr	r0, [r7, #8]
 800284e:	f000 f812 	bl	8002876 <config_sig_motion_data_src>
 8002852:	4603      	mov	r3, r0
 8002854:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 8002856:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d105      	bne.n	800286a <config_sig_motion_int_settg+0x54>
            {
                rslt = config_sig_dur_threshold(sig_mot_int_cfg, dev);
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	68b8      	ldr	r0, [r7, #8]
 8002862:	f000 f83e 	bl	80028e2 <config_sig_dur_threshold>
 8002866:	4603      	mov	r3, r0
 8002868:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 800286a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <config_sig_motion_data_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for sig motion interrupt.
 */
static int8_t config_sig_motion_data_src(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                         const struct bmi160_dev *dev)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b084      	sub	sp, #16
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002880:	2300      	movs	r3, #0
 8002882:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002884:	2300      	movs	r3, #0
 8002886:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8002888:	f107 010d 	add.w	r1, r7, #13
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	2201      	movs	r2, #1
 8002890:	2059      	movs	r0, #89	@ 0x59
 8002892:	f7fe fad9 	bl	8000e48 <bmi160_get_regs>
 8002896:	4603      	mov	r3, r0
 8002898:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800289a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d119      	bne.n	80028d6 <config_sig_motion_data_src+0x60>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 80028a2:	7b7b      	ldrb	r3, [r7, #13]
 80028a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028a8:	73bb      	strb	r3, [r7, #14]
        data = temp | ((sig_mot_int_cfg->sig_data_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	01db      	lsls	r3, r3, #7
 80028b6:	b25a      	sxtb	r2, r3
 80028b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80028bc:	4313      	orrs	r3, r2
 80028be:	b25b      	sxtb	r3, r3
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 80028c4:	f107 010d 	add.w	r1, r7, #13
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	2201      	movs	r2, #1
 80028cc:	2059      	movs	r0, #89	@ 0x59
 80028ce:	f7fe faee 	bl	8000eae <bmi160_set_regs>
 80028d2:	4603      	mov	r3, r0
 80028d4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80028d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <config_sig_dur_threshold>:
 * @brief This API configure the threshold, skip and proof time of
 * sig motion interrupt.
 */
static int8_t config_sig_dur_threshold(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                       const struct bmi160_dev *dev)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b084      	sub	sp, #16
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;
    uint8_t temp = 0;
 80028ec:	2300      	movs	r3, #0
 80028ee:	73bb      	strb	r3, [r7, #14]

    /* Configuring INT_MOTION registers */

    /* Write significant motion threshold.
     * This threshold is same as any motion threshold */
    data = sig_mot_int_cfg->sig_mot_thres;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	785b      	ldrb	r3, [r3, #1]
 80028f4:	737b      	strb	r3, [r7, #13]

    /* Write data to INT_MOTION 1 address */
    rslt = bmi160_set_regs(BMI160_INT_MOTION_1_ADDR, &data, 1, dev);
 80028f6:	f107 010d 	add.w	r1, r7, #13
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	2201      	movs	r2, #1
 80028fe:	2060      	movs	r0, #96	@ 0x60
 8002900:	f7fe fad5 	bl	8000eae <bmi160_set_regs>
 8002904:	4603      	mov	r3, r0
 8002906:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d151      	bne.n	80029b4 <config_sig_dur_threshold+0xd2>
    {
        rslt = bmi160_get_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 8002910:	f107 010d 	add.w	r1, r7, #13
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	2201      	movs	r2, #1
 8002918:	2062      	movs	r0, #98	@ 0x62
 800291a:	f7fe fa95 	bl	8000e48 <bmi160_get_regs>
 800291e:	4603      	mov	r3, r0
 8002920:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8002922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d144      	bne.n	80029b4 <config_sig_dur_threshold+0xd2>
        {
            temp = data & ~BMI160_SIG_MOTION_SKIP_MASK;
 800292a:	7b7b      	ldrb	r3, [r7, #13]
 800292c:	f023 030c 	bic.w	r3, r3, #12
 8002930:	73bb      	strb	r3, [r7, #14]

            /* adding skip time of sig_motion interrupt*/
            data = temp | ((sig_mot_int_cfg->sig_mot_skip << 2) & BMI160_SIG_MOTION_SKIP_MASK);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800293a:	b2db      	uxtb	r3, r3
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	b25b      	sxtb	r3, r3
 8002940:	f003 030c 	and.w	r3, r3, #12
 8002944:	b25a      	sxtb	r2, r3
 8002946:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800294a:	4313      	orrs	r3, r2
 800294c:	b25b      	sxtb	r3, r3
 800294e:	b2db      	uxtb	r3, r3
 8002950:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_SIG_MOTION_PROOF_MASK;
 8002952:	7b7b      	ldrb	r3, [r7, #13]
 8002954:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002958:	73bb      	strb	r3, [r7, #14]

            /* adding proof time of sig_motion interrupt */
            data = temp | ((sig_mot_int_cfg->sig_mot_proof << 4) & BMI160_SIG_MOTION_PROOF_MASK);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002962:	b2db      	uxtb	r3, r3
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	b25b      	sxtb	r3, r3
 8002968:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800296c:	b25a      	sxtb	r2, r3
 800296e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002972:	4313      	orrs	r3, r2
 8002974:	b25b      	sxtb	r3, r3
 8002976:	b2db      	uxtb	r3, r3
 8002978:	737b      	strb	r3, [r7, #13]

            /* configure the int_sig_mot_sel bit to select
             * significant motion interrupt */
            temp = data & ~BMI160_SIG_MOTION_SEL_MASK;
 800297a:	7b7b      	ldrb	r3, [r7, #13]
 800297c:	f023 0302 	bic.w	r3, r3, #2
 8002980:	73bb      	strb	r3, [r7, #14]
            data = temp | ((sig_mot_int_cfg->sig_en << 1) & BMI160_SIG_MOTION_SEL_MASK);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800298a:	b2db      	uxtb	r3, r3
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	b25b      	sxtb	r3, r3
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	b25a      	sxtb	r2, r3
 8002996:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800299a:	4313      	orrs	r3, r2
 800299c:	b25b      	sxtb	r3, r3
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	737b      	strb	r3, [r7, #13]
            rslt = bmi160_set_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 80029a2:	f107 010d 	add.w	r1, r7, #13
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2201      	movs	r2, #1
 80029aa:	2062      	movs	r0, #98	@ 0x62
 80029ac:	f7fe fa7f 	bl	8000eae <bmi160_set_regs>
 80029b0:	4603      	mov	r3, r0
 80029b2:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80029b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <enable_step_detect_int>:
/*!
 * @brief This API enables the step detector interrupt.
 */
static int8_t enable_step_detect_int(const struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg,
                                     const struct bmi160_dev *dev)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 2 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 80029d2:	f107 010d 	add.w	r1, r7, #13
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	2201      	movs	r2, #1
 80029da:	2052      	movs	r0, #82	@ 0x52
 80029dc:	f7fe fa34 	bl	8000e48 <bmi160_get_regs>
 80029e0:	4603      	mov	r3, r0
 80029e2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80029e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d11c      	bne.n	8002a26 <enable_step_detect_int+0x66>
    {
        temp = data & ~BMI160_STEP_DETECT_INT_EN_MASK;
 80029ec:	7b7b      	ldrb	r3, [r7, #13]
 80029ee:	f023 0308 	bic.w	r3, r3, #8
 80029f2:	73bb      	strb	r3, [r7, #14]
        data = temp | ((step_detect_int_cfg->step_detector_en << 3) & BMI160_STEP_DETECT_INT_EN_MASK);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	b25b      	sxtb	r3, r3
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	b25a      	sxtb	r2, r3
 8002a08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	b25b      	sxtb	r3, r3
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	737b      	strb	r3, [r7, #13]

        /* Writing data to INT ENABLE 2 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 8002a14:	f107 010d 	add.w	r1, r7, #13
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	2052      	movs	r0, #82	@ 0x52
 8002a1e:	f7fe fa46 	bl	8000eae <bmi160_set_regs>
 8002a22:	4603      	mov	r3, r0
 8002a24:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <config_step_detect>:
/*!
 * @brief This API configure the step detector parameter.
 */
static int8_t config_step_detect(const struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg,
                                 const struct bmi160_dev *dev)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b084      	sub	sp, #16
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
 8002a3a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	73fb      	strb	r3, [r7, #15]
    uint8_t data_array[2] = { 0 };
 8002a40:	2300      	movs	r3, #0
 8002a42:	81bb      	strh	r3, [r7, #12]

    if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_NORMAL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d104      	bne.n	8002a5c <config_step_detect+0x2a>
    {
        /* Normal mode setting */
        data_array[0] = 0x15;
 8002a52:	2315      	movs	r3, #21
 8002a54:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x03;
 8002a56:	2303      	movs	r3, #3
 8002a58:	737b      	strb	r3, [r7, #13]
 8002a5a:	e05b      	b.n	8002b14 <config_step_detect+0xe2>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_SENSITIVE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b40      	cmp	r3, #64	@ 0x40
 8002a68:	d104      	bne.n	8002a74 <config_step_detect+0x42>
    {
        /* Sensitive mode setting */
        data_array[0] = 0x2D;
 8002a6a:	232d      	movs	r3, #45	@ 0x2d
 8002a6c:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x00;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	737b      	strb	r3, [r7, #13]
 8002a72:	e04f      	b.n	8002b14 <config_step_detect+0xe2>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_ROBUST)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b80      	cmp	r3, #128	@ 0x80
 8002a80:	d104      	bne.n	8002a8c <config_step_detect+0x5a>
    {
        /* Robust mode setting */
        data_array[0] = 0x1D;
 8002a82:	231d      	movs	r3, #29
 8002a84:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x07;
 8002a86:	2307      	movs	r3, #7
 8002a88:	737b      	strb	r3, [r7, #13]
 8002a8a:	e043      	b.n	8002b14 <config_step_detect+0xe2>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_USER_DEFINE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a98:	d13c      	bne.n	8002b14 <config_step_detect+0xe2>
    {
        /* Non recommended User defined setting */
        /* Configuring STEP_CONFIG register */
        rslt = bmi160_get_regs(BMI160_INT_STEP_CONFIG_0_ADDR, &data_array[0], 2, dev);
 8002a9a:	f107 010c 	add.w	r1, r7, #12
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	207a      	movs	r0, #122	@ 0x7a
 8002aa4:	f7fe f9d0 	bl	8000e48 <bmi160_get_regs>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	73bb      	strb	r3, [r7, #14]
        if (rslt == BMI160_OK)
 8002aac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d12f      	bne.n	8002b14 <config_step_detect+0xe2>
        {
            temp = data_array[0] & ~BMI160_STEP_DETECT_MIN_THRES_MASK;
 8002ab4:	7b3b      	ldrb	r3, [r7, #12]
 8002ab6:	f023 0318 	bic.w	r3, r3, #24
 8002aba:	73fb      	strb	r3, [r7, #15]

            /* Adding min_threshold */
            data_array[0] = temp | ((step_detect_int_cfg->min_threshold << 3) & BMI160_STEP_DETECT_MIN_THRES_MASK);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	b25b      	sxtb	r3, r3
 8002aca:	f003 0318 	and.w	r3, r3, #24
 8002ace:	b25a      	sxtb	r2, r3
 8002ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	b25b      	sxtb	r3, r3
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	733b      	strb	r3, [r7, #12]
            temp = data_array[0] & ~BMI160_STEP_DETECT_STEPTIME_MIN_MASK;
 8002adc:	7b3b      	ldrb	r3, [r7, #12]
 8002ade:	f023 0307 	bic.w	r3, r3, #7
 8002ae2:	73fb      	strb	r3, [r7, #15]

            /* Adding steptime_min */
            data_array[0] = temp | ((step_detect_int_cfg->steptime_min) & BMI160_STEP_DETECT_STEPTIME_MIN_MASK);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	461a      	mov	r2, r3
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	733b      	strb	r3, [r7, #12]
            temp = data_array[1] & ~BMI160_STEP_MIN_BUF_MASK;
 8002af8:	7b7b      	ldrb	r3, [r7, #13]
 8002afa:	f023 0307 	bic.w	r3, r3, #7
 8002afe:	73fb      	strb	r3, [r7, #15]

            /* Adding steptime_min */
            data_array[1] = temp | ((step_detect_int_cfg->step_min_buf) & BMI160_STEP_MIN_BUF_MASK);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	785b      	ldrb	r3, [r3, #1]
 8002b04:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	737b      	strb	r3, [r7, #13]
        }
    }

    /* Write data to STEP_CONFIG register */
    rslt = bmi160_set_regs(BMI160_INT_STEP_CONFIG_0_ADDR, data_array, 2, dev);
 8002b14:	f107 010c 	add.w	r1, r7, #12
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	207a      	movs	r0, #122	@ 0x7a
 8002b1e:	f7fe f9c6 	bl	8000eae <bmi160_set_regs>
 8002b22:	4603      	mov	r3, r0
 8002b24:	73bb      	strb	r3, [r7, #14]

    return rslt;
 8002b26:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <enable_tap_int>:
 * @brief This API enables the single/double tap interrupt.
 */
static int8_t enable_tap_int(const struct bmi160_int_settg *int_config,
                             const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                             const struct bmi160_dev *dev)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b086      	sub	sp, #24
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	60f8      	str	r0, [r7, #12]
 8002b3a:	60b9      	str	r1, [r7, #8]
 8002b3c:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	757b      	strb	r3, [r7, #21]
    uint8_t temp = 0;
 8002b42:	2300      	movs	r3, #0
 8002b44:	75bb      	strb	r3, [r7, #22]

    /* Enable single tap or double tap interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8002b46:	f107 0115 	add.w	r1, r7, #21
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	2050      	movs	r0, #80	@ 0x50
 8002b50:	f7fe f97a 	bl	8000e48 <bmi160_get_regs>
 8002b54:	4603      	mov	r3, r0
 8002b56:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8002b58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d135      	bne.n	8002bcc <enable_tap_int+0x9a>
    {
        if (int_config->int_type == BMI160_ACC_SINGLE_TAP_INT)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	785b      	ldrb	r3, [r3, #1]
 8002b64:	2b04      	cmp	r3, #4
 8002b66:	d114      	bne.n	8002b92 <enable_tap_int+0x60>
        {
            temp = data & ~BMI160_SINGLE_TAP_INT_EN_MASK;
 8002b68:	7d7b      	ldrb	r3, [r7, #21]
 8002b6a:	f023 0320 	bic.w	r3, r3, #32
 8002b6e:	75bb      	strb	r3, [r7, #22]
            data = temp | ((tap_int_cfg->tap_en << 5) & BMI160_SINGLE_TAP_INT_EN_MASK);
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	785b      	ldrb	r3, [r3, #1]
 8002b74:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	015b      	lsls	r3, r3, #5
 8002b7c:	b25b      	sxtb	r3, r3
 8002b7e:	f003 0320 	and.w	r3, r3, #32
 8002b82:	b25a      	sxtb	r2, r3
 8002b84:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	b25b      	sxtb	r3, r3
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	757b      	strb	r3, [r7, #21]
 8002b90:	e013      	b.n	8002bba <enable_tap_int+0x88>
        }
        else
        {
            temp = data & ~BMI160_DOUBLE_TAP_INT_EN_MASK;
 8002b92:	7d7b      	ldrb	r3, [r7, #21]
 8002b94:	f023 0310 	bic.w	r3, r3, #16
 8002b98:	75bb      	strb	r3, [r7, #22]
            data = temp | ((tap_int_cfg->tap_en << 4) & BMI160_DOUBLE_TAP_INT_EN_MASK);
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	785b      	ldrb	r3, [r3, #1]
 8002b9e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	011b      	lsls	r3, r3, #4
 8002ba6:	b25b      	sxtb	r3, r3
 8002ba8:	f003 0310 	and.w	r3, r3, #16
 8002bac:	b25a      	sxtb	r2, r3
 8002bae:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	b25b      	sxtb	r3, r3
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	757b      	strb	r3, [r7, #21]
        }

        /* Write to Enable 0 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8002bba:	f107 0115 	add.w	r1, r7, #21
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	2050      	movs	r0, #80	@ 0x50
 8002bc4:	f7fe f973 	bl	8000eae <bmi160_set_regs>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002bcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3718      	adds	r7, #24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <config_tap_int_settg>:
 * tap interrupt.
 */
static int8_t config_tap_int_settg(const struct bmi160_int_settg *int_config,
                                   const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                                   const struct bmi160_dev *dev)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f7fe fe7f 	bl	80018ea <set_intr_pin_config>
 8002bec:	4603      	mov	r3, r0
 8002bee:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8002bf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d11a      	bne.n	8002c2e <config_tap_int_settg+0x56>
    {
        rslt = map_feature_interrupt(int_config, dev);
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f7ff faa2 	bl	8002144 <map_feature_interrupt>
 8002c00:	4603      	mov	r3, r0
 8002c02:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8002c04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d110      	bne.n	8002c2e <config_tap_int_settg+0x56>
        {
            rslt = config_tap_data_src(tap_int_cfg, dev);
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	68b8      	ldr	r0, [r7, #8]
 8002c10:	f000 f813 	bl	8002c3a <config_tap_data_src>
 8002c14:	4603      	mov	r3, r0
 8002c16:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 8002c18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d106      	bne.n	8002c2e <config_tap_int_settg+0x56>
            {
                rslt = config_tap_param(int_config, tap_int_cfg, dev);
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	68b9      	ldr	r1, [r7, #8]
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f000 f841 	bl	8002cac <config_tap_param>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8002c2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3718      	adds	r7, #24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <config_tap_data_src>:
/*!
 * @brief This API configure the source of data(filter & pre-filter)
 * for tap interrupt.
 */
static int8_t config_tap_data_src(const struct bmi160_acc_tap_int_cfg *tap_int_cfg, const struct bmi160_dev *dev)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b084      	sub	sp, #16
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
 8002c42:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002c44:	2300      	movs	r3, #0
 8002c46:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8002c4c:	f107 010d 	add.w	r1, r7, #13
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	2201      	movs	r2, #1
 8002c54:	2058      	movs	r0, #88	@ 0x58
 8002c56:	f7fe f8f7 	bl	8000e48 <bmi160_get_regs>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d11c      	bne.n	8002ca0 <config_tap_data_src+0x66>
    {
        temp = data & ~BMI160_TAP_SRC_INT_MASK;
 8002c66:	7b7b      	ldrb	r3, [r7, #13]
 8002c68:	f023 0308 	bic.w	r3, r3, #8
 8002c6c:	73bb      	strb	r3, [r7, #14]
        data = temp | ((tap_int_cfg->tap_data_src << 3) & BMI160_TAP_SRC_INT_MASK);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	785b      	ldrb	r3, [r3, #1]
 8002c72:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	b25b      	sxtb	r3, r3
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	b25a      	sxtb	r2, r3
 8002c82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	b25b      	sxtb	r3, r3
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8002c8e:	f107 010d 	add.w	r1, r7, #13
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	2201      	movs	r2, #1
 8002c96:	2058      	movs	r0, #88	@ 0x58
 8002c98:	f7fe f909 	bl	8000eae <bmi160_set_regs>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002ca0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <config_tap_param>:
 * Threshold, quite, shock, and duration.
 */
static int8_t config_tap_param(const struct bmi160_int_settg *int_config,
                               const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                               const struct bmi160_dev *dev)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t temp = 0;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	777b      	strb	r3, [r7, #29]
    uint8_t data = 0;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	77bb      	strb	r3, [r7, #30]
    uint8_t data_array[2] = { 0 };
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	82bb      	strh	r3, [r7, #20]
    uint8_t count = 0;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	773b      	strb	r3, [r7, #28]
    uint8_t dur, shock, quiet, thres;

    /* Configure tap 0 register for tap shock,tap quiet duration
     * in case of single tap interrupt */
    rslt = bmi160_get_regs(BMI160_INT_TAP_0_ADDR, data_array, 2, dev);
 8002cc8:	f107 0114 	add.w	r1, r7, #20
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	2063      	movs	r0, #99	@ 0x63
 8002cd2:	f7fe f8b9 	bl	8000e48 <bmi160_get_regs>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMI160_OK)
 8002cda:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d178      	bne.n	8002dd4 <config_tap_param+0x128>
    {
        data = data_array[count];
 8002ce2:	7f3b      	ldrb	r3, [r7, #28]
 8002ce4:	3320      	adds	r3, #32
 8002ce6:	443b      	add	r3, r7
 8002ce8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002cec:	77bb      	strb	r3, [r7, #30]
        if (int_config->int_type == BMI160_ACC_DOUBLE_TAP_INT)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	785b      	ldrb	r3, [r3, #1]
 8002cf2:	2b03      	cmp	r3, #3
 8002cf4:	d113      	bne.n	8002d1e <config_tap_param+0x72>
        {
            dur = (uint8_t)tap_int_cfg->tap_dur;
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	f3c3 13c2 	ubfx	r3, r3, #7, #3
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	76fb      	strb	r3, [r7, #27]
            temp = (data & ~BMI160_TAP_DUR_MASK);
 8002d02:	7fbb      	ldrb	r3, [r7, #30]
 8002d04:	f023 0307 	bic.w	r3, r3, #7
 8002d08:	777b      	strb	r3, [r7, #29]

            /* Add tap duration data in case of
             * double tap interrupt */
            data = temp | (dur & BMI160_TAP_DUR_MASK);
 8002d0a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	b25a      	sxtb	r2, r3
 8002d14:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	b25b      	sxtb	r3, r3
 8002d1c:	77bb      	strb	r3, [r7, #30]
        }

        shock = (uint8_t)tap_int_cfg->tap_shock;
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	76bb      	strb	r3, [r7, #26]
        temp = data & ~BMI160_TAP_SHOCK_DUR_MASK;
 8002d2a:	7fbb      	ldrb	r3, [r7, #30]
 8002d2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d30:	777b      	strb	r3, [r7, #29]
        data = temp | ((shock << 6) & BMI160_TAP_SHOCK_DUR_MASK);
 8002d32:	7ebb      	ldrb	r3, [r7, #26]
 8002d34:	019b      	lsls	r3, r3, #6
 8002d36:	b25b      	sxtb	r3, r3
 8002d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d3c:	b25a      	sxtb	r2, r3
 8002d3e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	b25b      	sxtb	r3, r3
 8002d46:	77bb      	strb	r3, [r7, #30]
        quiet = (uint8_t)tap_int_cfg->tap_quiet;
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	767b      	strb	r3, [r7, #25]
        temp = data & ~BMI160_TAP_QUIET_DUR_MASK;
 8002d54:	7fbb      	ldrb	r3, [r7, #30]
 8002d56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d5a:	777b      	strb	r3, [r7, #29]
        data = temp | ((quiet << 7) & BMI160_TAP_QUIET_DUR_MASK);
 8002d5c:	7e7b      	ldrb	r3, [r7, #25]
 8002d5e:	01db      	lsls	r3, r3, #7
 8002d60:	b25a      	sxtb	r2, r3
 8002d62:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	b25b      	sxtb	r3, r3
 8002d6a:	77bb      	strb	r3, [r7, #30]
        data_array[count++] = data;
 8002d6c:	7f3b      	ldrb	r3, [r7, #28]
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	773a      	strb	r2, [r7, #28]
 8002d72:	3320      	adds	r3, #32
 8002d74:	443b      	add	r3, r7
 8002d76:	7fba      	ldrb	r2, [r7, #30]
 8002d78:	f803 2c0c 	strb.w	r2, [r3, #-12]
        data = data_array[count];
 8002d7c:	7f3b      	ldrb	r3, [r7, #28]
 8002d7e:	3320      	adds	r3, #32
 8002d80:	443b      	add	r3, r7
 8002d82:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002d86:	77bb      	strb	r3, [r7, #30]
        thres = (uint8_t)tap_int_cfg->tap_thr;
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	763b      	strb	r3, [r7, #24]
        temp = data & ~BMI160_TAP_THRES_MASK;
 8002d94:	7fbb      	ldrb	r3, [r7, #30]
 8002d96:	f023 031f 	bic.w	r3, r3, #31
 8002d9a:	777b      	strb	r3, [r7, #29]
        data = temp | (thres & BMI160_TAP_THRES_MASK);
 8002d9c:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002da0:	f003 031f 	and.w	r3, r3, #31
 8002da4:	b25a      	sxtb	r2, r3
 8002da6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	b25b      	sxtb	r3, r3
 8002dae:	77bb      	strb	r3, [r7, #30]
        data_array[count++] = data;
 8002db0:	7f3b      	ldrb	r3, [r7, #28]
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	773a      	strb	r2, [r7, #28]
 8002db6:	3320      	adds	r3, #32
 8002db8:	443b      	add	r3, r7
 8002dba:	7fba      	ldrb	r2, [r7, #30]
 8002dbc:	f803 2c0c 	strb.w	r2, [r3, #-12]

        /* TAP 0 and TAP 1 address lie consecutively,
         * hence writing data to respective registers at one go */

        /* Writing to Tap 0 and Tap 1 Address simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_TAP_0_ADDR, data_array, count, dev);
 8002dc0:	7f3b      	ldrb	r3, [r7, #28]
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	f107 0114 	add.w	r1, r7, #20
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2063      	movs	r0, #99	@ 0x63
 8002dcc:	f7fe f86f 	bl	8000eae <bmi160_set_regs>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8002dd4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3720      	adds	r7, #32
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <enable_orient_int>:

/*!
 * @brief This API enables the orient interrupt.
 */
static int8_t enable_orient_int(const struct bmi160_acc_orient_int_cfg *orient_int_cfg, const struct bmi160_dev *dev)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002dea:	2300      	movs	r3, #0
 8002dec:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8002df2:	f107 010d 	add.w	r1, r7, #13
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	2050      	movs	r0, #80	@ 0x50
 8002dfc:	f7fe f824 	bl	8000e48 <bmi160_get_regs>
 8002e00:	4603      	mov	r3, r0
 8002e02:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002e04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d11c      	bne.n	8002e46 <enable_orient_int+0x66>
    {
        temp = data & ~BMI160_ORIENT_INT_EN_MASK;
 8002e0c:	7b7b      	ldrb	r3, [r7, #13]
 8002e0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e12:	73bb      	strb	r3, [r7, #14]
        data = temp | ((orient_int_cfg->orient_en << 6) & BMI160_ORIENT_INT_EN_MASK);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	789b      	ldrb	r3, [r3, #2]
 8002e18:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	019b      	lsls	r3, r3, #6
 8002e20:	b25b      	sxtb	r3, r3
 8002e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e26:	b25a      	sxtb	r2, r3
 8002e28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	b25b      	sxtb	r3, r3
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8002e34:	f107 010d 	add.w	r1, r7, #13
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	2050      	movs	r0, #80	@ 0x50
 8002e3e:	f7fe f836 	bl	8000eae <bmi160_set_regs>
 8002e42:	4603      	mov	r3, r0
 8002e44:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <config_orient_int_settg>:
/*!
 * @brief This API configure the necessary setting of orientation interrupt.
 */
static int8_t config_orient_int_settg(const struct bmi160_acc_orient_int_cfg *orient_int_cfg,
                                      const struct bmi160_dev *dev)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b084      	sub	sp, #16
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
 8002e5a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	73bb      	strb	r3, [r7, #14]
    uint8_t temp = 0;
 8002e60:	2300      	movs	r3, #0
 8002e62:	737b      	strb	r3, [r7, #13]
    uint8_t data_array[2] = { 0, 0 };
 8002e64:	2300      	movs	r3, #0
 8002e66:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_ORIENT registers */
    rslt = bmi160_get_regs(BMI160_INT_ORIENT_0_ADDR, data_array, 2, dev);
 8002e68:	f107 0108 	add.w	r1, r7, #8
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	2065      	movs	r0, #101	@ 0x65
 8002e72:	f7fd ffe9 	bl	8000e48 <bmi160_get_regs>
 8002e76:	4603      	mov	r3, r0
 8002e78:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d170      	bne.n	8002f64 <config_orient_int_settg+0x112>
    {
        data = data_array[0];
 8002e82:	7a3b      	ldrb	r3, [r7, #8]
 8002e84:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_MODE_MASK;
 8002e86:	7bbb      	ldrb	r3, [r7, #14]
 8002e88:	f023 0303 	bic.w	r3, r3, #3
 8002e8c:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation mode */
        data = temp | ((orient_int_cfg->orient_mode) & BMI160_ORIENT_MODE_MASK);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	461a      	mov	r2, r3
 8002e9a:	7b7b      	ldrb	r3, [r7, #13]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_BLOCK_MASK;
 8002ea0:	7bbb      	ldrb	r3, [r7, #14]
 8002ea2:	f023 030c 	bic.w	r3, r3, #12
 8002ea6:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation blocking */
        data = temp | ((orient_int_cfg->orient_blocking << 2) & BMI160_ORIENT_BLOCK_MASK);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	b25b      	sxtb	r3, r3
 8002eb6:	f003 030c 	and.w	r3, r3, #12
 8002eba:	b25a      	sxtb	r2, r3
 8002ebc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	b25b      	sxtb	r3, r3
 8002ec4:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_HYST_MASK;
 8002ec6:	7bbb      	ldrb	r3, [r7, #14]
 8002ec8:	f003 030f 	and.w	r3, r3, #15
 8002ecc:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation hysteresis */
        data = temp | ((orient_int_cfg->orient_hyst << 4) & BMI160_ORIENT_HYST_MASK);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	011b      	lsls	r3, r3, #4
 8002eda:	b25a      	sxtb	r2, r3
 8002edc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	b25b      	sxtb	r3, r3
 8002ee4:	73bb      	strb	r3, [r7, #14]
        data_array[0] = data;
 8002ee6:	7bbb      	ldrb	r3, [r7, #14]
 8002ee8:	723b      	strb	r3, [r7, #8]
        data = data_array[1];
 8002eea:	7a7b      	ldrb	r3, [r7, #9]
 8002eec:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_THETA_MASK;
 8002eee:	7bbb      	ldrb	r3, [r7, #14]
 8002ef0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ef4:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation threshold */
        data = temp | ((orient_int_cfg->orient_theta) & BMI160_ORIENT_THETA_MASK);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	785b      	ldrb	r3, [r3, #1]
 8002efa:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	461a      	mov	r2, r3
 8002f02:	7b7b      	ldrb	r3, [r7, #13]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_UD_ENABLE;
 8002f08:	7bbb      	ldrb	r3, [r7, #14]
 8002f0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f0e:	737b      	strb	r3, [r7, #13]

        /* Adding Orient_ud_en */
        data = temp | ((orient_int_cfg->orient_ud_en << 6) & BMI160_ORIENT_UD_ENABLE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	785b      	ldrb	r3, [r3, #1]
 8002f14:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	019b      	lsls	r3, r3, #6
 8002f1c:	b25b      	sxtb	r3, r3
 8002f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f22:	b25a      	sxtb	r2, r3
 8002f24:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	b25b      	sxtb	r3, r3
 8002f2c:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_AXES_EN_MASK;
 8002f2e:	7bbb      	ldrb	r3, [r7, #14]
 8002f30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f34:	737b      	strb	r3, [r7, #13]

        /* Adding axes_en */
        data = temp | ((orient_int_cfg->axes_ex << 7) & BMI160_AXES_EN_MASK);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	785b      	ldrb	r3, [r3, #1]
 8002f3a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	01db      	lsls	r3, r3, #7
 8002f42:	b25a      	sxtb	r2, r3
 8002f44:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	b25b      	sxtb	r3, r3
 8002f4c:	73bb      	strb	r3, [r7, #14]
        data_array[1] = data;
 8002f4e:	7bbb      	ldrb	r3, [r7, #14]
 8002f50:	727b      	strb	r3, [r7, #9]

        /* Writing data to INT_ORIENT 0 and INT_ORIENT 1
         * registers simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_ORIENT_0_ADDR, data_array, 2, dev);
 8002f52:	f107 0108 	add.w	r1, r7, #8
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2202      	movs	r2, #2
 8002f5a:	2065      	movs	r0, #101	@ 0x65
 8002f5c:	f7fd ffa7 	bl	8000eae <bmi160_set_regs>
 8002f60:	4603      	mov	r3, r0
 8002f62:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <enable_flat_int>:

/*!
 * @brief This API enables the flat interrupt.
 */
static int8_t enable_flat_int(const struct bmi160_acc_flat_detect_int_cfg *flat_int, const struct bmi160_dev *dev)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	73bb      	strb	r3, [r7, #14]

    /* Enable flat interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8002f82:	f107 010d 	add.w	r1, r7, #13
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	2050      	movs	r0, #80	@ 0x50
 8002f8c:	f7fd ff5c 	bl	8000e48 <bmi160_get_regs>
 8002f90:	4603      	mov	r3, r0
 8002f92:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002f94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d119      	bne.n	8002fd0 <enable_flat_int+0x60>
    {
        temp = data & ~BMI160_FLAT_INT_EN_MASK;
 8002f9c:	7b7b      	ldrb	r3, [r7, #13]
 8002f9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002fa2:	73bb      	strb	r3, [r7, #14]
        data = temp | ((flat_int->flat_en << 7) & BMI160_FLAT_INT_EN_MASK);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	785b      	ldrb	r3, [r3, #1]
 8002fa8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	01db      	lsls	r3, r3, #7
 8002fb0:	b25a      	sxtb	r2, r3
 8002fb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	b25b      	sxtb	r3, r3
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8002fbe:	f107 010d 	add.w	r1, r7, #13
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	2050      	movs	r0, #80	@ 0x50
 8002fc8:	f7fd ff71 	bl	8000eae <bmi160_set_regs>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002fd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <config_flat_int_settg>:

/*!
 * @brief This API configure the necessary setting of flat interrupt.
 */
static int8_t config_flat_int_settg(const struct bmi160_acc_flat_detect_int_cfg *flat_int, const struct bmi160_dev *dev)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	73bb      	strb	r3, [r7, #14]
    uint8_t temp = 0;
 8002fea:	2300      	movs	r3, #0
 8002fec:	737b      	strb	r3, [r7, #13]
    uint8_t data_array[2] = { 0, 0 };
 8002fee:	2300      	movs	r3, #0
 8002ff0:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_FLAT register */
    rslt = bmi160_get_regs(BMI160_INT_FLAT_0_ADDR, data_array, 2, dev);
 8002ff2:	f107 0108 	add.w	r1, r7, #8
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	2067      	movs	r0, #103	@ 0x67
 8002ffc:	f7fd ff24 	bl	8000e48 <bmi160_get_regs>
 8003000:	4603      	mov	r3, r0
 8003002:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003004:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d13d      	bne.n	8003088 <config_flat_int_settg+0xac>
    {
        data = data_array[0];
 800300c:	7a3b      	ldrb	r3, [r7, #8]
 800300e:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_THRES_MASK;
 8003010:	7bbb      	ldrb	r3, [r7, #14]
 8003012:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003016:	737b      	strb	r3, [r7, #13]

        /* Adding flat theta */
        data = temp | ((flat_int->flat_theta) & BMI160_FLAT_THRES_MASK);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003020:	b2db      	uxtb	r3, r3
 8003022:	461a      	mov	r2, r3
 8003024:	7b7b      	ldrb	r3, [r7, #13]
 8003026:	4313      	orrs	r3, r2
 8003028:	73bb      	strb	r3, [r7, #14]
        data_array[0] = data;
 800302a:	7bbb      	ldrb	r3, [r7, #14]
 800302c:	723b      	strb	r3, [r7, #8]
        data = data_array[1];
 800302e:	7a7b      	ldrb	r3, [r7, #9]
 8003030:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_HOLD_TIME_MASK;
 8003032:	7bbb      	ldrb	r3, [r7, #14]
 8003034:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003038:	737b      	strb	r3, [r7, #13]

        /* Adding flat hold time */
        data = temp | ((flat_int->flat_hold_time << 4) & BMI160_FLAT_HOLD_TIME_MASK);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	785b      	ldrb	r3, [r3, #1]
 800303e:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8003042:	b2db      	uxtb	r3, r3
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	b25b      	sxtb	r3, r3
 8003048:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800304c:	b25a      	sxtb	r2, r3
 800304e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003052:	4313      	orrs	r3, r2
 8003054:	b25b      	sxtb	r3, r3
 8003056:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_HYST_MASK;
 8003058:	7bbb      	ldrb	r3, [r7, #14]
 800305a:	f023 0307 	bic.w	r3, r3, #7
 800305e:	737b      	strb	r3, [r7, #13]

        /* Adding flat hysteresis */
        data = temp | ((flat_int->flat_hy) & BMI160_FLAT_HYST_MASK);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	f3c3 1382 	ubfx	r3, r3, #6, #3
 8003068:	b2db      	uxtb	r3, r3
 800306a:	461a      	mov	r2, r3
 800306c:	7b7b      	ldrb	r3, [r7, #13]
 800306e:	4313      	orrs	r3, r2
 8003070:	73bb      	strb	r3, [r7, #14]
        data_array[1] = data;
 8003072:	7bbb      	ldrb	r3, [r7, #14]
 8003074:	727b      	strb	r3, [r7, #9]

        /* Writing data to INT_FLAT 0 and INT_FLAT 1
         * registers simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_FLAT_0_ADDR, data_array, 2, dev);
 8003076:	f107 0108 	add.w	r1, r7, #8
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	2202      	movs	r2, #2
 800307e:	2067      	movs	r0, #103	@ 0x67
 8003080:	f7fd ff15 	bl	8000eae <bmi160_set_regs>
 8003084:	4603      	mov	r3, r0
 8003086:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003088:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <enable_low_g_int>:

/*!
 * @brief This API enables the Low-g interrupt.
 */
static int8_t enable_low_g_int(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800309e:	2300      	movs	r3, #0
 80030a0:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80030a2:	2300      	movs	r3, #0
 80030a4:	73bb      	strb	r3, [r7, #14]

    /* Enable low-g interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80030a6:	f107 010d 	add.w	r1, r7, #13
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2201      	movs	r2, #1
 80030ae:	2051      	movs	r0, #81	@ 0x51
 80030b0:	f7fd feca 	bl	8000e48 <bmi160_get_regs>
 80030b4:	4603      	mov	r3, r0
 80030b6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80030b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d11c      	bne.n	80030fa <enable_low_g_int+0x66>
    {
        temp = data & ~BMI160_LOW_G_INT_EN_MASK;
 80030c0:	7b7b      	ldrb	r3, [r7, #13]
 80030c2:	f023 0308 	bic.w	r3, r3, #8
 80030c6:	73bb      	strb	r3, [r7, #14]
        data = temp | ((low_g_int->low_en << 3) & BMI160_LOW_G_INT_EN_MASK);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	789b      	ldrb	r3, [r3, #2]
 80030cc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	b25b      	sxtb	r3, r3
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	b25a      	sxtb	r2, r3
 80030dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	b25b      	sxtb	r3, r3
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80030e8:	f107 010d 	add.w	r1, r7, #13
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	2201      	movs	r2, #1
 80030f0:	2051      	movs	r0, #81	@ 0x51
 80030f2:	f7fd fedc 	bl	8000eae <bmi160_set_regs>
 80030f6:	4603      	mov	r3, r0
 80030f8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80030fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <config_low_g_data_src>:
/*!
 * @brief This API configure the source of data(filter & pre-filter)
 * for low-g interrupt.
 */
static int8_t config_low_g_data_src(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b084      	sub	sp, #16
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
 800310e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8003110:	2300      	movs	r3, #0
 8003112:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8003114:	2300      	movs	r3, #0
 8003116:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8003118:	f107 010d 	add.w	r1, r7, #13
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	2201      	movs	r2, #1
 8003120:	2058      	movs	r0, #88	@ 0x58
 8003122:	f7fd fe91 	bl	8000e48 <bmi160_get_regs>
 8003126:	4603      	mov	r3, r0
 8003128:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800312a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d119      	bne.n	8003166 <config_low_g_data_src+0x60>
    {
        temp = data & ~BMI160_LOW_HIGH_SRC_INT_MASK;
 8003132:	7b7b      	ldrb	r3, [r7, #13]
 8003134:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003138:	73bb      	strb	r3, [r7, #14]
        data = temp | ((low_g_int->low_data_src << 7) & BMI160_LOW_HIGH_SRC_INT_MASK);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	789b      	ldrb	r3, [r3, #2]
 800313e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003142:	b2db      	uxtb	r3, r3
 8003144:	01db      	lsls	r3, r3, #7
 8003146:	b25a      	sxtb	r2, r3
 8003148:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800314c:	4313      	orrs	r3, r2
 800314e:	b25b      	sxtb	r3, r3
 8003150:	b2db      	uxtb	r3, r3
 8003152:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8003154:	f107 010d 	add.w	r1, r7, #13
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	2201      	movs	r2, #1
 800315c:	2058      	movs	r0, #88	@ 0x58
 800315e:	f7fd fea6 	bl	8000eae <bmi160_set_regs>
 8003162:	4603      	mov	r3, r0
 8003164:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003166:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
	...

08003174 <config_low_g_int_settg>:

/*!
 * @brief This API configure the necessary setting of low-g interrupt.
 */
static int8_t config_low_g_int_settg(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 800317e:	2300      	movs	r3, #0
 8003180:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[3] = { 0, 0, 0 };
 8003182:	4a27      	ldr	r2, [pc, #156]	@ (8003220 <config_low_g_int_settg+0xac>)
 8003184:	f107 0308 	add.w	r3, r7, #8
 8003188:	6812      	ldr	r2, [r2, #0]
 800318a:	4611      	mov	r1, r2
 800318c:	8019      	strh	r1, [r3, #0]
 800318e:	3302      	adds	r3, #2
 8003190:	0c12      	lsrs	r2, r2, #16
 8003192:	701a      	strb	r2, [r3, #0]

    /* Configuring INT_LOWHIGH register for low-g interrupt */
    rslt = bmi160_get_regs(BMI160_INT_LOWHIGH_2_ADDR, &data_array[2], 1, dev);
 8003194:	f107 0308 	add.w	r3, r7, #8
 8003198:	1c99      	adds	r1, r3, #2
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	2201      	movs	r2, #1
 800319e:	205c      	movs	r0, #92	@ 0x5c
 80031a0:	f7fd fe52 	bl	8000e48 <bmi160_get_regs>
 80031a4:	4603      	mov	r3, r0
 80031a6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80031a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d130      	bne.n	8003212 <config_low_g_int_settg+0x9e>
    {
        temp = data_array[2] & ~BMI160_LOW_G_HYST_MASK;
 80031b0:	7abb      	ldrb	r3, [r7, #10]
 80031b2:	f023 0303 	bic.w	r3, r3, #3
 80031b6:	73bb      	strb	r3, [r7, #14]

        /* Adding low-g hysteresis */
        data_array[2] = temp | (low_g_int->low_hyst & BMI160_LOW_G_HYST_MASK);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	789b      	ldrb	r3, [r3, #2]
 80031bc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	461a      	mov	r2, r3
 80031c4:	7bbb      	ldrb	r3, [r7, #14]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	72bb      	strb	r3, [r7, #10]
        temp = data_array[2] & ~BMI160_LOW_G_LOW_MODE_MASK;
 80031cc:	7abb      	ldrb	r3, [r7, #10]
 80031ce:	f023 0304 	bic.w	r3, r3, #4
 80031d2:	73bb      	strb	r3, [r7, #14]

        /* Adding low-mode */
        data_array[2] = temp | ((low_g_int->low_mode << 2) & BMI160_LOW_G_LOW_MODE_MASK);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	789b      	ldrb	r3, [r3, #2]
 80031d8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	b25b      	sxtb	r3, r3
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	b25a      	sxtb	r2, r3
 80031e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	b25b      	sxtb	r3, r3
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	72bb      	strb	r3, [r7, #10]

        /* Adding low-g threshold */
        data_array[1] = low_g_int->low_thres;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	785b      	ldrb	r3, [r3, #1]
 80031f8:	727b      	strb	r3, [r7, #9]

        /* Adding low-g interrupt delay */
        data_array[0] = low_g_int->low_dur;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	723b      	strb	r3, [r7, #8]

        /* Writing data to INT_LOWHIGH 0,1,2 registers simultaneously*/
        rslt = bmi160_set_regs(BMI160_INT_LOWHIGH_0_ADDR, data_array, 3, dev);
 8003200:	f107 0108 	add.w	r1, r7, #8
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	2203      	movs	r2, #3
 8003208:	205a      	movs	r0, #90	@ 0x5a
 800320a:	f7fd fe50 	bl	8000eae <bmi160_set_regs>
 800320e:	4603      	mov	r3, r0
 8003210:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003212:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	080149e0 	.word	0x080149e0

08003224 <enable_high_g_int>:

/*!
 * @brief This API enables the high-g interrupt.
 */
static int8_t enable_high_g_int(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg, const struct bmi160_dev *dev)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800322e:	2300      	movs	r3, #0
 8003230:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8003232:	2300      	movs	r3, #0
 8003234:	73bb      	strb	r3, [r7, #14]

    /* Enable low-g interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8003236:	f107 010d 	add.w	r1, r7, #13
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2201      	movs	r2, #1
 800323e:	2051      	movs	r0, #81	@ 0x51
 8003240:	f7fd fe02 	bl	8000e48 <bmi160_get_regs>
 8003244:	4603      	mov	r3, r0
 8003246:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003248:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d13e      	bne.n	80032ce <enable_high_g_int+0xaa>
    {
        /* Adding high-g X-axis */
        temp = data & ~BMI160_HIGH_G_X_INT_EN_MASK;
 8003250:	7b7b      	ldrb	r3, [r7, #13]
 8003252:	f023 0301 	bic.w	r3, r3, #1
 8003256:	73bb      	strb	r3, [r7, #14]
        data = temp | (high_g_int_cfg->high_g_x & BMI160_HIGH_G_X_INT_EN_MASK);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003260:	b2db      	uxtb	r3, r3
 8003262:	461a      	mov	r2, r3
 8003264:	7bbb      	ldrb	r3, [r7, #14]
 8003266:	4313      	orrs	r3, r2
 8003268:	b2db      	uxtb	r3, r3
 800326a:	737b      	strb	r3, [r7, #13]

        /* Adding high-g Y-axis */
        temp = data & ~BMI160_HIGH_G_Y_INT_EN_MASK;
 800326c:	7b7b      	ldrb	r3, [r7, #13]
 800326e:	f023 0302 	bic.w	r3, r3, #2
 8003272:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_g_y << 1) & BMI160_HIGH_G_Y_INT_EN_MASK);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800327c:	b2db      	uxtb	r3, r3
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	b25b      	sxtb	r3, r3
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	b25a      	sxtb	r2, r3
 8003288:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800328c:	4313      	orrs	r3, r2
 800328e:	b25b      	sxtb	r3, r3
 8003290:	b2db      	uxtb	r3, r3
 8003292:	737b      	strb	r3, [r7, #13]

        /* Adding high-g Z-axis */
        temp = data & ~BMI160_HIGH_G_Z_INT_EN_MASK;
 8003294:	7b7b      	ldrb	r3, [r7, #13]
 8003296:	f023 0304 	bic.w	r3, r3, #4
 800329a:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_g_z << 2) & BMI160_HIGH_G_Z_INT_EN_MASK);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	b25b      	sxtb	r3, r3
 80032aa:	f003 0304 	and.w	r3, r3, #4
 80032ae:	b25a      	sxtb	r2, r3
 80032b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	b25b      	sxtb	r3, r3
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80032bc:	f107 010d 	add.w	r1, r7, #13
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	2201      	movs	r2, #1
 80032c4:	2051      	movs	r0, #81	@ 0x51
 80032c6:	f7fd fdf2 	bl	8000eae <bmi160_set_regs>
 80032ca:	4603      	mov	r3, r0
 80032cc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80032ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <config_high_g_data_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for high-g interrupt.
 */
static int8_t config_high_g_data_src(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg,
                                     const struct bmi160_dev *dev)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b084      	sub	sp, #16
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80032e4:	2300      	movs	r3, #0
 80032e6:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 80032ec:	f107 010d 	add.w	r1, r7, #13
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	2201      	movs	r2, #1
 80032f4:	2058      	movs	r0, #88	@ 0x58
 80032f6:	f7fd fda7 	bl	8000e48 <bmi160_get_regs>
 80032fa:	4603      	mov	r3, r0
 80032fc:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80032fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d119      	bne.n	800333a <config_high_g_data_src+0x60>
    {
        temp = data & ~BMI160_LOW_HIGH_SRC_INT_MASK;
 8003306:	7b7b      	ldrb	r3, [r7, #13]
 8003308:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800330c:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_data_src << 7) & BMI160_LOW_HIGH_SRC_INT_MASK);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003316:	b2db      	uxtb	r3, r3
 8003318:	01db      	lsls	r3, r3, #7
 800331a:	b25a      	sxtb	r2, r3
 800331c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003320:	4313      	orrs	r3, r2
 8003322:	b25b      	sxtb	r3, r3
 8003324:	b2db      	uxtb	r3, r3
 8003326:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8003328:	f107 010d 	add.w	r1, r7, #13
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	2201      	movs	r2, #1
 8003330:	2058      	movs	r0, #88	@ 0x58
 8003332:	f7fd fdbc 	bl	8000eae <bmi160_set_regs>
 8003336:	4603      	mov	r3, r0
 8003338:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800333a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <config_high_g_int_settg>:
/*!
 * @brief This API configure the necessary setting of high-g interrupt.
 */
static int8_t config_high_g_int_settg(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg,
                                      const struct bmi160_dev *dev)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[3] = { 0, 0, 0 };
 8003356:	4a1e      	ldr	r2, [pc, #120]	@ (80033d0 <config_high_g_int_settg+0x88>)
 8003358:	f107 0308 	add.w	r3, r7, #8
 800335c:	6812      	ldr	r2, [r2, #0]
 800335e:	4611      	mov	r1, r2
 8003360:	8019      	strh	r1, [r3, #0]
 8003362:	3302      	adds	r3, #2
 8003364:	0c12      	lsrs	r2, r2, #16
 8003366:	701a      	strb	r2, [r3, #0]

    rslt = bmi160_get_regs(BMI160_INT_LOWHIGH_2_ADDR, &data_array[0], 1, dev);
 8003368:	f107 0108 	add.w	r1, r7, #8
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	2201      	movs	r2, #1
 8003370:	205c      	movs	r0, #92	@ 0x5c
 8003372:	f7fd fd69 	bl	8000e48 <bmi160_get_regs>
 8003376:	4603      	mov	r3, r0
 8003378:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800337a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d11f      	bne.n	80033c2 <config_high_g_int_settg+0x7a>
    {
        temp = data_array[0] & ~BMI160_HIGH_G_HYST_MASK;
 8003382:	7a3b      	ldrb	r3, [r7, #8]
 8003384:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003388:	73bb      	strb	r3, [r7, #14]

        /* Adding high-g hysteresis */
        data_array[0] = temp | ((high_g_int_cfg->high_hy << 6) & BMI160_HIGH_G_HYST_MASK);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003392:	b2db      	uxtb	r3, r3
 8003394:	019b      	lsls	r3, r3, #6
 8003396:	b25a      	sxtb	r2, r3
 8003398:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800339c:	4313      	orrs	r3, r2
 800339e:	b25b      	sxtb	r3, r3
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	723b      	strb	r3, [r7, #8]

        /* Adding high-g duration */
        data_array[1] = high_g_int_cfg->high_dur;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	789b      	ldrb	r3, [r3, #2]
 80033a8:	727b      	strb	r3, [r7, #9]

        /* Adding high-g threshold */
        data_array[2] = high_g_int_cfg->high_thres;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	785b      	ldrb	r3, [r3, #1]
 80033ae:	72bb      	strb	r3, [r7, #10]
        rslt = bmi160_set_regs(BMI160_INT_LOWHIGH_2_ADDR, data_array, 3, dev);
 80033b0:	f107 0108 	add.w	r1, r7, #8
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	2203      	movs	r2, #3
 80033b8:	205c      	movs	r0, #92	@ 0x5c
 80033ba:	f7fd fd78 	bl	8000eae <bmi160_set_regs>
 80033be:	4603      	mov	r3, r0
 80033c0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80033c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	080149e0 	.word	0x080149e0

080033d4 <config_int_out_ctrl>:

/*!
 * @brief This API configure the behavioural setting of interrupt pin.
 */
static int8_t config_int_out_ctrl(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 80033de:	2300      	movs	r3, #0
 80033e0:	75bb      	strb	r3, [r7, #22]
    uint8_t data = 0;
 80033e2:	2300      	movs	r3, #0
 80033e4:	73fb      	strb	r3, [r7, #15]

    /* Configuration of output interrupt signals on pins INT1 and INT2 are
     * done in BMI160_INT_OUT_CTRL_ADDR register*/
    rslt = bmi160_get_regs(BMI160_INT_OUT_CTRL_ADDR, &data, 1, dev);
 80033e6:	f107 010f 	add.w	r1, r7, #15
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2201      	movs	r2, #1
 80033ee:	2053      	movs	r0, #83	@ 0x53
 80033f0:	f7fd fd2a 	bl	8000e48 <bmi160_get_regs>
 80033f4:	4603      	mov	r3, r0
 80033f6:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 80033f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f040 80a8 	bne.w	8003552 <config_int_out_ctrl+0x17e>
    {
        /* updating the interrupt pin structure to local structure */
        const struct bmi160_int_pin_settg *intr_pin_sett = &(int_config->int_pin_settg);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	3302      	adds	r3, #2
 8003406:	613b      	str	r3, [r7, #16]

        /* Configuring channel 1 */
        if (int_config->int_channel == BMI160_INT_CHANNEL_1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d14a      	bne.n	80034a6 <config_int_out_ctrl+0xd2>
        {
            /* Output enable */
            temp = data & ~BMI160_INT1_OUTPUT_EN_MASK;
 8003410:	7bfb      	ldrb	r3, [r7, #15]
 8003412:	f023 0308 	bic.w	r3, r3, #8
 8003416:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_en << 3) & BMI160_INT1_OUTPUT_EN_MASK);
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003420:	b2db      	uxtb	r3, r3
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	b25b      	sxtb	r3, r3
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	b25a      	sxtb	r2, r3
 800342c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003430:	4313      	orrs	r3, r2
 8003432:	b25b      	sxtb	r3, r3
 8003434:	b2db      	uxtb	r3, r3
 8003436:	73fb      	strb	r3, [r7, #15]

            /* Output mode */
            temp = data & ~BMI160_INT1_OUTPUT_MODE_MASK;
 8003438:	7bfb      	ldrb	r3, [r7, #15]
 800343a:	f023 0304 	bic.w	r3, r3, #4
 800343e:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_mode << 2) & BMI160_INT1_OUTPUT_MODE_MASK);
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003448:	b2db      	uxtb	r3, r3
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	b25b      	sxtb	r3, r3
 800344e:	f003 0304 	and.w	r3, r3, #4
 8003452:	b25a      	sxtb	r2, r3
 8003454:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003458:	4313      	orrs	r3, r2
 800345a:	b25b      	sxtb	r3, r3
 800345c:	b2db      	uxtb	r3, r3
 800345e:	73fb      	strb	r3, [r7, #15]

            /* Output type */
            temp = data & ~BMI160_INT1_OUTPUT_TYPE_MASK;
 8003460:	7bfb      	ldrb	r3, [r7, #15]
 8003462:	f023 0302 	bic.w	r3, r3, #2
 8003466:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_type << 1) & BMI160_INT1_OUTPUT_TYPE_MASK);
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003470:	b2db      	uxtb	r3, r3
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	b25b      	sxtb	r3, r3
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	b25a      	sxtb	r2, r3
 800347c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003480:	4313      	orrs	r3, r2
 8003482:	b25b      	sxtb	r3, r3
 8003484:	b2db      	uxtb	r3, r3
 8003486:	73fb      	strb	r3, [r7, #15]

            /* edge control */
            temp = data & ~BMI160_INT1_EDGE_CTRL_MASK;
 8003488:	7bfb      	ldrb	r3, [r7, #15]
 800348a:	f023 0301 	bic.w	r3, r3, #1
 800348e:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->edge_ctrl) & BMI160_INT1_EDGE_CTRL_MASK);
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003498:	b2db      	uxtb	r3, r3
 800349a:	461a      	mov	r2, r3
 800349c:	7dbb      	ldrb	r3, [r7, #22]
 800349e:	4313      	orrs	r3, r2
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	73fb      	strb	r3, [r7, #15]
 80034a4:	e04c      	b.n	8003540 <config_int_out_ctrl+0x16c>
        }
        else
        {
            /* Configuring channel 2 */
            /* Output enable */
            temp = data & ~BMI160_INT2_OUTPUT_EN_MASK;
 80034a6:	7bfb      	ldrb	r3, [r7, #15]
 80034a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034ac:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_en << 7) & BMI160_INT2_OUTPUT_EN_MASK);
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	01db      	lsls	r3, r3, #7
 80034ba:	b25a      	sxtb	r2, r3
 80034bc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	b25b      	sxtb	r3, r3
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	73fb      	strb	r3, [r7, #15]

            /* Output mode */
            temp = data & ~BMI160_INT2_OUTPUT_MODE_MASK;
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
 80034ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034ce:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_mode << 6) & BMI160_INT2_OUTPUT_MODE_MASK);
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	019b      	lsls	r3, r3, #6
 80034dc:	b25b      	sxtb	r3, r3
 80034de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034e2:	b25a      	sxtb	r2, r3
 80034e4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	b25b      	sxtb	r3, r3
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	73fb      	strb	r3, [r7, #15]

            /* Output type */
            temp = data & ~BMI160_INT2_OUTPUT_TYPE_MASK;
 80034f0:	7bfb      	ldrb	r3, [r7, #15]
 80034f2:	f023 0320 	bic.w	r3, r3, #32
 80034f6:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_type << 5) & BMI160_INT2_OUTPUT_TYPE_MASK);
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003500:	b2db      	uxtb	r3, r3
 8003502:	015b      	lsls	r3, r3, #5
 8003504:	b25b      	sxtb	r3, r3
 8003506:	f003 0320 	and.w	r3, r3, #32
 800350a:	b25a      	sxtb	r2, r3
 800350c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003510:	4313      	orrs	r3, r2
 8003512:	b25b      	sxtb	r3, r3
 8003514:	b2db      	uxtb	r3, r3
 8003516:	73fb      	strb	r3, [r7, #15]

            /* edge control */
            temp = data & ~BMI160_INT2_EDGE_CTRL_MASK;
 8003518:	7bfb      	ldrb	r3, [r7, #15]
 800351a:	f023 0310 	bic.w	r3, r3, #16
 800351e:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->edge_ctrl << 4) & BMI160_INT2_EDGE_CTRL_MASK);
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003528:	b2db      	uxtb	r3, r3
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	b25b      	sxtb	r3, r3
 800352e:	f003 0310 	and.w	r3, r3, #16
 8003532:	b25a      	sxtb	r2, r3
 8003534:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003538:	4313      	orrs	r3, r2
 800353a:	b25b      	sxtb	r3, r3
 800353c:	b2db      	uxtb	r3, r3
 800353e:	73fb      	strb	r3, [r7, #15]
        }

        rslt = bmi160_set_regs(BMI160_INT_OUT_CTRL_ADDR, &data, 1, dev);
 8003540:	f107 010f 	add.w	r1, r7, #15
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	2201      	movs	r2, #1
 8003548:	2053      	movs	r0, #83	@ 0x53
 800354a:	f7fd fcb0 	bl	8000eae <bmi160_set_regs>
 800354e:	4603      	mov	r3, r0
 8003550:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003552:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <config_int_latch>:

/*!
 * @brief This API configure the mode(input enable, latch or non-latch) of interrupt pin.
 */
static int8_t config_int_latch(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b086      	sub	sp, #24
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
 8003566:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8003568:	2300      	movs	r3, #0
 800356a:	75bb      	strb	r3, [r7, #22]
    uint8_t data = 0;
 800356c:	2300      	movs	r3, #0
 800356e:	73fb      	strb	r3, [r7, #15]

    /* Configuration of latch on pins INT1 and INT2 are done in
     * BMI160_INT_LATCH_ADDR register*/
    rslt = bmi160_get_regs(BMI160_INT_LATCH_ADDR, &data, 1, dev);
 8003570:	f107 010f 	add.w	r1, r7, #15
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	2201      	movs	r2, #1
 8003578:	2054      	movs	r0, #84	@ 0x54
 800357a:	f7fd fc65 	bl	8000e48 <bmi160_get_regs>
 800357e:	4603      	mov	r3, r0
 8003580:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8003582:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d146      	bne.n	8003618 <config_int_latch+0xba>
    {
        /* updating the interrupt pin structure to local structure */
        const struct bmi160_int_pin_settg *intr_pin_sett = &(int_config->int_pin_settg);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	3302      	adds	r3, #2
 800358e:	613b      	str	r3, [r7, #16]
        if (int_config->int_channel == BMI160_INT_CHANNEL_1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d114      	bne.n	80035c2 <config_int_latch+0x64>
        {
            /* Configuring channel 1 */
            /* Input enable */
            temp = data & ~BMI160_INT1_INPUT_EN_MASK;
 8003598:	7bfb      	ldrb	r3, [r7, #15]
 800359a:	f023 0310 	bic.w	r3, r3, #16
 800359e:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->input_en << 4) & BMI160_INT1_INPUT_EN_MASK);
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	b25b      	sxtb	r3, r3
 80035ae:	f003 0310 	and.w	r3, r3, #16
 80035b2:	b25a      	sxtb	r2, r3
 80035b4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	b25b      	sxtb	r3, r3
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	73fb      	strb	r3, [r7, #15]
 80035c0:	e013      	b.n	80035ea <config_int_latch+0x8c>
        }
        else
        {
            /* Configuring channel 2 */
            /* Input enable */
            temp = data & ~BMI160_INT2_INPUT_EN_MASK;
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
 80035c4:	f023 0320 	bic.w	r3, r3, #32
 80035c8:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->input_en << 5) & BMI160_INT2_INPUT_EN_MASK);
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	015b      	lsls	r3, r3, #5
 80035d6:	b25b      	sxtb	r3, r3
 80035d8:	f003 0320 	and.w	r3, r3, #32
 80035dc:	b25a      	sxtb	r2, r3
 80035de:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	b25b      	sxtb	r3, r3
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	73fb      	strb	r3, [r7, #15]

        /* In case of latch interrupt,update the latch duration */

        /* Latching holds the interrupt for the amount of latch
         * duration time */
        temp = data & ~BMI160_INT_LATCH_MASK;
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	f023 030f 	bic.w	r3, r3, #15
 80035f0:	75bb      	strb	r3, [r7, #22]
        data = temp | (intr_pin_sett->latch_dur & BMI160_INT_LATCH_MASK);
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	f3c3 1343 	ubfx	r3, r3, #5, #4
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	461a      	mov	r2, r3
 80035fe:	7dbb      	ldrb	r3, [r7, #22]
 8003600:	4313      	orrs	r3, r2
 8003602:	b2db      	uxtb	r3, r3
 8003604:	73fb      	strb	r3, [r7, #15]

        /* OUT_CTRL_INT and LATCH_INT address lie consecutively,
         * hence writing data to respective registers at one go */
        rslt = bmi160_set_regs(BMI160_INT_LATCH_ADDR, &data, 1, dev);
 8003606:	f107 010f 	add.w	r1, r7, #15
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2201      	movs	r2, #1
 800360e:	2054      	movs	r0, #84	@ 0x54
 8003610:	f7fd fc4d 	bl	8000eae <bmi160_set_regs>
 8003614:	4603      	mov	r3, r0
 8003616:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003618:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800361c:	4618      	mov	r0, r3
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <set_fifo_full_int>:
 *  @brief This API sets FIFO full interrupt of the sensor.This interrupt
 *  occurs when the FIFO is full and the next full data sample would cause
 *  a FIFO overflow, which may delete the old samples.
 */
static int8_t set_fifo_full_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 800362e:	2300      	movs	r3, #0
 8003630:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <set_fifo_full_int+0x1c>
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363c:	2b00      	cmp	r3, #0
 800363e:	d102      	bne.n	8003646 <set_fifo_full_int+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8003640:	23ff      	movs	r3, #255	@ 0xff
 8003642:	73fb      	strb	r3, [r7, #15]
 8003644:	e019      	b.n	800367a <set_fifo_full_int+0x56>
    }
    else
    {
        /*enable the fifo full interrupt */
        rslt = enable_fifo_full_int(int_config, dev);
 8003646:	6839      	ldr	r1, [r7, #0]
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f81c 	bl	8003686 <enable_fifo_full_int>
 800364e:	4603      	mov	r3, r0
 8003650:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8003652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10f      	bne.n	800367a <set_fifo_full_int+0x56>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 800365a:	6839      	ldr	r1, [r7, #0]
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7fe f944 	bl	80018ea <set_intr_pin_config>
 8003662:	4603      	mov	r3, r0
 8003664:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8003666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d105      	bne.n	800367a <set_fifo_full_int+0x56>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 800366e:	6839      	ldr	r1, [r7, #0]
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f7fe fe01 	bl	8002278 <map_hardware_interrupt>
 8003676:	4603      	mov	r3, r0
 8003678:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800367a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <enable_fifo_full_int>:

/*!
 * @brief This enable the FIFO full interrupt engine.
 */
static int8_t enable_fifo_full_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b084      	sub	sp, #16
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8003690:	2300      	movs	r3, #0
 8003692:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8003694:	f107 010e 	add.w	r1, r7, #14
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	2201      	movs	r2, #1
 800369c:	2051      	movs	r0, #81	@ 0x51
 800369e:	f7fd fbd3 	bl	8000e48 <bmi160_get_regs>
 80036a2:	4603      	mov	r3, r0
 80036a4:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80036a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d11b      	bne.n	80036e6 <enable_fifo_full_int+0x60>
    {
        data = BMI160_SET_BITS(data, BMI160_FIFO_FULL_INT, int_config->fifo_full_int_en);
 80036ae:	7bbb      	ldrb	r3, [r7, #14]
 80036b0:	b25b      	sxtb	r3, r3
 80036b2:	f023 0320 	bic.w	r3, r3, #32
 80036b6:	b25a      	sxtb	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	7a1b      	ldrb	r3, [r3, #8]
 80036bc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	015b      	lsls	r3, r3, #5
 80036c4:	b25b      	sxtb	r3, r3
 80036c6:	f003 0320 	and.w	r3, r3, #32
 80036ca:	b25b      	sxtb	r3, r3
 80036cc:	4313      	orrs	r3, r2
 80036ce:	b25b      	sxtb	r3, r3
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	73bb      	strb	r3, [r7, #14]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80036d4:	f107 010e 	add.w	r1, r7, #14
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	2201      	movs	r2, #1
 80036dc:	2051      	movs	r0, #81	@ 0x51
 80036de:	f7fd fbe6 	bl	8000eae <bmi160_set_regs>
 80036e2:	4603      	mov	r3, r0
 80036e4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80036e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <set_fifo_watermark_int>:
 *  @brief This API sets FIFO watermark interrupt of the sensor.The FIFO
 *  watermark interrupt is fired, when the FIFO fill level is above a fifo
 *  watermark.
 */
static int8_t set_fifo_watermark_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b084      	sub	sp, #16
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->delay_ms == NULL))
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <set_fifo_watermark_int+0x1c>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370a:	2b00      	cmp	r3, #0
 800370c:	d102      	bne.n	8003714 <set_fifo_watermark_int+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 800370e:	23ff      	movs	r3, #255	@ 0xff
 8003710:	73fb      	strb	r3, [r7, #15]
 8003712:	e019      	b.n	8003748 <set_fifo_watermark_int+0x56>
    }
    else
    {
        /* Enable fifo-watermark interrupt in Int Enable 1 register */
        rslt = enable_fifo_wtm_int(int_config, dev);
 8003714:	6839      	ldr	r1, [r7, #0]
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f81c 	bl	8003754 <enable_fifo_wtm_int>
 800371c:	4603      	mov	r3, r0
 800371e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8003720:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10f      	bne.n	8003748 <set_fifo_watermark_int+0x56>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8003728:	6839      	ldr	r1, [r7, #0]
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7fe f8dd 	bl	80018ea <set_intr_pin_config>
 8003730:	4603      	mov	r3, r0
 8003732:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8003734:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d105      	bne.n	8003748 <set_fifo_watermark_int+0x56>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 800373c:	6839      	ldr	r1, [r7, #0]
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7fe fd9a 	bl	8002278 <map_hardware_interrupt>
 8003744:	4603      	mov	r3, r0
 8003746:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8003748:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <enable_fifo_wtm_int>:

/*!
 * @brief This enable the FIFO watermark interrupt engine.
 */
static int8_t enable_fifo_wtm_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800375e:	2300      	movs	r3, #0
 8003760:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8003762:	f107 010e 	add.w	r1, r7, #14
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	2201      	movs	r2, #1
 800376a:	2051      	movs	r0, #81	@ 0x51
 800376c:	f7fd fb6c 	bl	8000e48 <bmi160_get_regs>
 8003770:	4603      	mov	r3, r0
 8003772:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003774:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d11b      	bne.n	80037b4 <enable_fifo_wtm_int+0x60>
    {
        data = BMI160_SET_BITS(data, BMI160_FIFO_WTM_INT, int_config->fifo_wtm_int_en);
 800377c:	7bbb      	ldrb	r3, [r7, #14]
 800377e:	b25b      	sxtb	r3, r3
 8003780:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003784:	b25a      	sxtb	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	7a1b      	ldrb	r3, [r3, #8]
 800378a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800378e:	b2db      	uxtb	r3, r3
 8003790:	019b      	lsls	r3, r3, #6
 8003792:	b25b      	sxtb	r3, r3
 8003794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003798:	b25b      	sxtb	r3, r3
 800379a:	4313      	orrs	r3, r2
 800379c:	b25b      	sxtb	r3, r3
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	73bb      	strb	r3, [r7, #14]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80037a2:	f107 010e 	add.w	r1, r7, #14
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	2201      	movs	r2, #1
 80037aa:	2051      	movs	r0, #81	@ 0x51
 80037ac:	f7fd fb7f 	bl	8000eae <bmi160_set_regs>
 80037b0:	4603      	mov	r3, r0
 80037b2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80037b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <get_foc_status>:

/*!
 *  @brief This API is used to get the FOC status from the sensor
 */
static int8_t get_foc_status(uint8_t *foc_status, struct bmi160_dev const *dev)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;

    /* Read the FOC status from sensor */
    rslt = bmi160_get_regs(BMI160_STATUS_ADDR, &data, 1, dev);
 80037ca:	f107 010e 	add.w	r1, r7, #14
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	2201      	movs	r2, #1
 80037d2:	201b      	movs	r0, #27
 80037d4:	f7fd fb38 	bl	8000e48 <bmi160_get_regs>
 80037d8:	4603      	mov	r3, r0
 80037da:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80037dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d107      	bne.n	80037f4 <get_foc_status+0x34>
    {
        /* Get the foc_status bit */
        *foc_status = BMI160_GET_BITS(data, BMI160_FOC_STATUS);
 80037e4:	7bbb      	ldrb	r3, [r7, #14]
 80037e6:	10db      	asrs	r3, r3, #3
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80037f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <configure_offset_enable>:

/*!
 *  @brief This API is used to configure the offset enable bits in the sensor
 */
static int8_t configure_offset_enable(const struct bmi160_foc_conf *foc_conf, struct bmi160_dev const *dev)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800380a:	6838      	ldr	r0, [r7, #0]
 800380c:	f7fe f888 	bl	8001920 <null_ptr_check>
 8003810:	4603      	mov	r3, r0
 8003812:	73fb      	strb	r3, [r7, #15]
    if (rslt != BMI160_OK)
 8003814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d002      	beq.n	8003822 <configure_offset_enable+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 800381c:	23ff      	movs	r3, #255	@ 0xff
 800381e:	73fb      	strb	r3, [r7, #15]
 8003820:	e032      	b.n	8003888 <configure_offset_enable+0x88>
    }
    else
    {
        /* Read the FOC config from the sensor */
        rslt = bmi160_get_regs(BMI160_OFFSET_CONF_ADDR, &data, 1, dev);
 8003822:	f107 010e 	add.w	r1, r7, #14
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2201      	movs	r2, #1
 800382a:	2077      	movs	r0, #119	@ 0x77
 800382c:	f7fd fb0c 	bl	8000e48 <bmi160_get_regs>
 8003830:	4603      	mov	r3, r0
 8003832:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8003834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d125      	bne.n	8003888 <configure_offset_enable+0x88>
        {
            /* Set the offset enable/disable for gyro */
            data = BMI160_SET_BITS(data, BMI160_GYRO_OFFSET_EN, foc_conf->gyro_off_en);
 800383c:	7bbb      	ldrb	r3, [r7, #14]
 800383e:	b25b      	sxtb	r3, r3
 8003840:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003844:	b25a      	sxtb	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	795b      	ldrb	r3, [r3, #5]
 800384a:	01db      	lsls	r3, r3, #7
 800384c:	b25b      	sxtb	r3, r3
 800384e:	4313      	orrs	r3, r2
 8003850:	b25b      	sxtb	r3, r3
 8003852:	b2db      	uxtb	r3, r3
 8003854:	73bb      	strb	r3, [r7, #14]

            /* Set the offset enable/disable for accel */
            data = BMI160_SET_BITS(data, BMI160_ACCEL_OFFSET_EN, foc_conf->acc_off_en);
 8003856:	7bbb      	ldrb	r3, [r7, #14]
 8003858:	b25b      	sxtb	r3, r3
 800385a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800385e:	b25a      	sxtb	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	791b      	ldrb	r3, [r3, #4]
 8003864:	019b      	lsls	r3, r3, #6
 8003866:	b25b      	sxtb	r3, r3
 8003868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800386c:	b25b      	sxtb	r3, r3
 800386e:	4313      	orrs	r3, r2
 8003870:	b25b      	sxtb	r3, r3
 8003872:	b2db      	uxtb	r3, r3
 8003874:	73bb      	strb	r3, [r7, #14]

            /* Set the offset config in the sensor */
            rslt = bmi160_set_regs(BMI160_OFFSET_CONF_ADDR, &data, 1, dev);
 8003876:	f107 010e 	add.w	r1, r7, #14
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2201      	movs	r2, #1
 800387e:	2077      	movs	r0, #119	@ 0x77
 8003880:	f7fd fb15 	bl	8000eae <bmi160_set_regs>
 8003884:	4603      	mov	r3, r0
 8003886:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8003888:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <trigger_foc>:

static int8_t trigger_foc(struct bmi160_offsets *offset, struct bmi160_dev const *dev)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b088      	sub	sp, #32
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t foc_status = BMI160_ENABLE;
 800389e:	2301      	movs	r3, #1
 80038a0:	777b      	strb	r3, [r7, #29]
    uint8_t cmd = BMI160_START_FOC_CMD;
 80038a2:	2303      	movs	r3, #3
 80038a4:	773b      	strb	r3, [r7, #28]
    uint8_t timeout = 0;
 80038a6:	2300      	movs	r3, #0
 80038a8:	77bb      	strb	r3, [r7, #30]
    uint8_t data_array[20];

    /* Start the FOC process */
    rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &cmd, 1, dev);
 80038aa:	f107 011c 	add.w	r1, r7, #28
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2201      	movs	r2, #1
 80038b2:	207e      	movs	r0, #126	@ 0x7e
 80038b4:	f7fd fafb 	bl	8000eae <bmi160_set_regs>
 80038b8:	4603      	mov	r3, r0
 80038ba:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMI160_OK)
 80038bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d141      	bne.n	8003948 <trigger_foc+0xb4>
    {
        /* Check the FOC status*/
        rslt = get_foc_status(&foc_status, dev);
 80038c4:	f107 031d 	add.w	r3, r7, #29
 80038c8:	6839      	ldr	r1, [r7, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff ff78 	bl	80037c0 <get_foc_status>
 80038d0:	4603      	mov	r3, r0
 80038d2:	77fb      	strb	r3, [r7, #31]

        if ((rslt != BMI160_OK) || (foc_status != BMI160_ENABLE))
 80038d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d112      	bne.n	8003902 <trigger_foc+0x6e>
 80038dc:	7f7b      	ldrb	r3, [r7, #29]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d025      	beq.n	800392e <trigger_foc+0x9a>
        {
            while ((foc_status != BMI160_ENABLE) && (timeout < 32))
 80038e2:	e00e      	b.n	8003902 <trigger_foc+0x6e>
            {
                /* Maximum time of 250ms is given in 10
                 * steps of 25ms each - 250ms refer datasheet 2.9.1 */
                dev->delay_ms(25);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e8:	2019      	movs	r0, #25
 80038ea:	4798      	blx	r3

                /* Check the FOC status*/
                rslt = get_foc_status(&foc_status, dev);
 80038ec:	f107 031d 	add.w	r3, r7, #29
 80038f0:	6839      	ldr	r1, [r7, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff ff64 	bl	80037c0 <get_foc_status>
 80038f8:	4603      	mov	r3, r0
 80038fa:	77fb      	strb	r3, [r7, #31]
                timeout++;
 80038fc:	7fbb      	ldrb	r3, [r7, #30]
 80038fe:	3301      	adds	r3, #1
 8003900:	77bb      	strb	r3, [r7, #30]
            while ((foc_status != BMI160_ENABLE) && (timeout < 32))
 8003902:	7f7b      	ldrb	r3, [r7, #29]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d002      	beq.n	800390e <trigger_foc+0x7a>
 8003908:	7fbb      	ldrb	r3, [r7, #30]
 800390a:	2b1f      	cmp	r3, #31
 800390c:	d9ea      	bls.n	80038e4 <trigger_foc+0x50>
            }

            if ((rslt == BMI160_OK) && (foc_status == BMI160_ENABLE))
 800390e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d109      	bne.n	800392a <trigger_foc+0x96>
 8003916:	7f7b      	ldrb	r3, [r7, #29]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d106      	bne.n	800392a <trigger_foc+0x96>
            {
                /* Get offset values from sensor */
                rslt = bmi160_get_offsets(offset, dev);
 800391c:	6839      	ldr	r1, [r7, #0]
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7fd fd19 	bl	8001356 <bmi160_get_offsets>
 8003924:	4603      	mov	r3, r0
 8003926:	77fb      	strb	r3, [r7, #31]
 8003928:	e001      	b.n	800392e <trigger_foc+0x9a>
            }
            else
            {
                /* FOC failure case */
                rslt = BMI160_E_FOC_FAILURE;
 800392a:	23f5      	movs	r3, #245	@ 0xf5
 800392c:	77fb      	strb	r3, [r7, #31]
            }
        }

        if (rslt == BMI160_OK)
 800392e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d108      	bne.n	8003948 <trigger_foc+0xb4>
        {
            /* Read registers 0x04-0x17 */
            rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 20, dev);
 8003936:	f107 0108 	add.w	r1, r7, #8
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2214      	movs	r2, #20
 800393e:	200c      	movs	r0, #12
 8003940:	f7fd fa82 	bl	8000e48 <bmi160_get_regs>
 8003944:	4603      	mov	r3, r0
 8003946:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 8003948:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3720      	adds	r7, #32
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <BMI160_init>:
uint8_t BMI160_Ascale_bit, BMI160_Gscale_bit;

float bmi160_aRes, bmi160_gRes;

int8_t BMI160_init(BMI160_t *DataStruct)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]

	int8_t rslt;

	set_bmi160_Ares();
 800395c:	f000 f8ec 	bl	8003b38 <set_bmi160_Ares>
	set_bmi160_Gres();
 8003960:	f000 f916 	bl	8003b90 <set_bmi160_Gres>
	get_bmi160_Ares();
 8003964:	f000 f946 	bl	8003bf4 <get_bmi160_Ares>
	get_bmi160_Gres();
 8003968:	f000 f97a 	bl	8003c60 <get_bmi160_Gres>

    sensor.id = 0;
 800396c:	4b52      	ldr	r3, [pc, #328]	@ (8003ab8 <BMI160_init+0x164>)
 800396e:	2200      	movs	r2, #0
 8003970:	705a      	strb	r2, [r3, #1]
    sensor.intf = BMI160_I2C_INTF;
 8003972:	4b51      	ldr	r3, [pc, #324]	@ (8003ab8 <BMI160_init+0x164>)
 8003974:	2200      	movs	r2, #0
 8003976:	709a      	strb	r2, [r3, #2]
    sensor.read = SensorAPI_I2Cx_Read;
 8003978:	4b4f      	ldr	r3, [pc, #316]	@ (8003ab8 <BMI160_init+0x164>)
 800397a:	4a50      	ldr	r2, [pc, #320]	@ (8003abc <BMI160_init+0x168>)
 800397c:	61da      	str	r2, [r3, #28]
    sensor.write = SensorAPI_I2Cx_Write;
 800397e:	4b4e      	ldr	r3, [pc, #312]	@ (8003ab8 <BMI160_init+0x164>)
 8003980:	4a4f      	ldr	r2, [pc, #316]	@ (8003ac0 <BMI160_init+0x16c>)
 8003982:	621a      	str	r2, [r3, #32]
    sensor.delay_ms = HAL_Delay;
 8003984:	4b4c      	ldr	r3, [pc, #304]	@ (8003ab8 <BMI160_init+0x164>)
 8003986:	4a4f      	ldr	r2, [pc, #316]	@ (8003ac4 <BMI160_init+0x170>)
 8003988:	625a      	str	r2, [r3, #36]	@ 0x24
    sensor.read_write_len = 32;
 800398a:	4b4b      	ldr	r3, [pc, #300]	@ (8003ab8 <BMI160_init+0x164>)
 800398c:	2220      	movs	r2, #32
 800398e:	851a      	strh	r2, [r3, #40]	@ 0x28

    rslt = bmi160_soft_reset(&sensor);
 8003990:	4849      	ldr	r0, [pc, #292]	@ (8003ab8 <BMI160_init+0x164>)
 8003992:	f7fd fb3d 	bl	8001010 <bmi160_soft_reset>
 8003996:	4603      	mov	r3, r0
 8003998:	73fb      	strb	r3, [r7, #15]
    sensor.delay_ms(200);
 800399a:	4b47      	ldr	r3, [pc, #284]	@ (8003ab8 <BMI160_init+0x164>)
 800399c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800399e:	20c8      	movs	r0, #200	@ 0xc8
 80039a0:	4798      	blx	r3
    rslt = bmi160_init(&sensor);
 80039a2:	4845      	ldr	r0, [pc, #276]	@ (8003ab8 <BMI160_init+0x164>)
 80039a4:	f7fd fae6 	bl	8000f74 <bmi160_init>
 80039a8:	4603      	mov	r3, r0
 80039aa:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    uint8_t reg_addr = BMI160_CHIP_ID_ADDR;
 80039ac:	2300      	movs	r3, #0
 80039ae:	73bb      	strb	r3, [r7, #14]
    uint8_t chipID = 0;
 80039b0:	2300      	movs	r3, #0
 80039b2:	72fb      	strb	r3, [r7, #11]
    uint16_t len = 1;
 80039b4:	2301      	movs	r3, #1
 80039b6:	81bb      	strh	r3, [r7, #12]
    rslt = bmi160_get_regs(reg_addr, &chipID, len, &sensor);
 80039b8:	89ba      	ldrh	r2, [r7, #12]
 80039ba:	f107 010b 	add.w	r1, r7, #11
 80039be:	7bb8      	ldrb	r0, [r7, #14]
 80039c0:	4b3d      	ldr	r3, [pc, #244]	@ (8003ab8 <BMI160_init+0x164>)
 80039c2:	f7fd fa41 	bl	8000e48 <bmi160_get_regs>
 80039c6:	4603      	mov	r3, r0
 80039c8:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    /* Select the Output data rate, range of accelerometer sensor */
    sensor.accel_cfg.odr = BMI160_ACCEL_ODR_800HZ; //BMI160_ACCEL_ODR_400HZ
 80039ca:	4b3b      	ldr	r3, [pc, #236]	@ (8003ab8 <BMI160_init+0x164>)
 80039cc:	220b      	movs	r2, #11
 80039ce:	715a      	strb	r2, [r3, #5]
    sensor.delay_ms(100);
 80039d0:	4b39      	ldr	r3, [pc, #228]	@ (8003ab8 <BMI160_init+0x164>)
 80039d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d4:	2064      	movs	r0, #100	@ 0x64
 80039d6:	4798      	blx	r3
    sensor.accel_cfg.range = BMI160_Ascale_bit;
 80039d8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ac8 <BMI160_init+0x174>)
 80039da:	781a      	ldrb	r2, [r3, #0]
 80039dc:	4b36      	ldr	r3, [pc, #216]	@ (8003ab8 <BMI160_init+0x164>)
 80039de:	719a      	strb	r2, [r3, #6]
    sensor.delay_ms(100);
 80039e0:	4b35      	ldr	r3, [pc, #212]	@ (8003ab8 <BMI160_init+0x164>)
 80039e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e4:	2064      	movs	r0, #100	@ 0x64
 80039e6:	4798      	blx	r3

    /* Select the power mode of accelerometer sensor */
    sensor.accel_cfg.power = BMI160_ACCEL_NORMAL_MODE;
 80039e8:	4b33      	ldr	r3, [pc, #204]	@ (8003ab8 <BMI160_init+0x164>)
 80039ea:	2211      	movs	r2, #17
 80039ec:	711a      	strb	r2, [r3, #4]
    sensor.delay_ms(100);
 80039ee:	4b32      	ldr	r3, [pc, #200]	@ (8003ab8 <BMI160_init+0x164>)
 80039f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f2:	2064      	movs	r0, #100	@ 0x64
 80039f4:	4798      	blx	r3
    sensor.accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4; //BMI160_ACCEL_BW_OSR2_AVG2
 80039f6:	4b30      	ldr	r3, [pc, #192]	@ (8003ab8 <BMI160_init+0x164>)
 80039f8:	2202      	movs	r2, #2
 80039fa:	71da      	strb	r2, [r3, #7]
    sensor.delay_ms(100);
 80039fc:	4b2e      	ldr	r3, [pc, #184]	@ (8003ab8 <BMI160_init+0x164>)
 80039fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a00:	2064      	movs	r0, #100	@ 0x64
 8003a02:	4798      	blx	r3


    /* Select the Output data rate, range of Gyroscope sensor */
    sensor.gyro_cfg.odr = BMI160_GYRO_ODR_800HZ; //BMI160_GYRO_ODR_400HZ
 8003a04:	4b2c      	ldr	r3, [pc, #176]	@ (8003ab8 <BMI160_init+0x164>)
 8003a06:	220b      	movs	r2, #11
 8003a08:	735a      	strb	r2, [r3, #13]
    sensor.delay_ms(100);
 8003a0a:	4b2b      	ldr	r3, [pc, #172]	@ (8003ab8 <BMI160_init+0x164>)
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0e:	2064      	movs	r0, #100	@ 0x64
 8003a10:	4798      	blx	r3
    sensor.gyro_cfg.range = BMI160_Gscale_bit; // BMI160_GYRO_RANGE_250_DPS
 8003a12:	4b2e      	ldr	r3, [pc, #184]	@ (8003acc <BMI160_init+0x178>)
 8003a14:	781a      	ldrb	r2, [r3, #0]
 8003a16:	4b28      	ldr	r3, [pc, #160]	@ (8003ab8 <BMI160_init+0x164>)
 8003a18:	739a      	strb	r2, [r3, #14]
    sensor.delay_ms(100);
 8003a1a:	4b27      	ldr	r3, [pc, #156]	@ (8003ab8 <BMI160_init+0x164>)
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1e:	2064      	movs	r0, #100	@ 0x64
 8003a20:	4798      	blx	r3

    /* Select the power mode of Gyroscope sensor */
    sensor.gyro_cfg.power = BMI160_GYRO_NORMAL_MODE;
 8003a22:	4b25      	ldr	r3, [pc, #148]	@ (8003ab8 <BMI160_init+0x164>)
 8003a24:	2215      	movs	r2, #21
 8003a26:	731a      	strb	r2, [r3, #12]
    sensor.delay_ms(100);
 8003a28:	4b23      	ldr	r3, [pc, #140]	@ (8003ab8 <BMI160_init+0x164>)
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2c:	2064      	movs	r0, #100	@ 0x64
 8003a2e:	4798      	blx	r3
    sensor.gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE; //BMI160_GYRO_BW_NORMAL_MODE
 8003a30:	4b21      	ldr	r3, [pc, #132]	@ (8003ab8 <BMI160_init+0x164>)
 8003a32:	2202      	movs	r2, #2
 8003a34:	73da      	strb	r2, [r3, #15]
    sensor.delay_ms(100);
 8003a36:	4b20      	ldr	r3, [pc, #128]	@ (8003ab8 <BMI160_init+0x164>)
 8003a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3a:	2064      	movs	r0, #100	@ 0x64
 8003a3c:	4798      	blx	r3

    /* Set the sensor configuration */
    rslt = bmi160_set_sens_conf(&sensor);
 8003a3e:	481e      	ldr	r0, [pc, #120]	@ (8003ab8 <BMI160_init+0x164>)
 8003a40:	f7fd fb21 	bl	8001086 <bmi160_set_sens_conf>
 8003a44:	4603      	mov	r3, r0
 8003a46:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    rslt = start_foc();
 8003a48:	f000 f844 	bl	8003ad4 <start_foc>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	73fb      	strb	r3, [r7, #15]

	/********************************************************************/

    /* Select the Interrupt channel/pin */
    int_config.int_channel = BMI160_INT_CHANNEL_1;// Interrupt channel/pin 1
 8003a50:	4b1f      	ldr	r3, [pc, #124]	@ (8003ad0 <BMI160_init+0x17c>)
 8003a52:	2201      	movs	r2, #1
 8003a54:	701a      	strb	r2, [r3, #0]

    /* Select the Interrupt type */
    int_config.int_type = BMI160_ACC_GYRO_DATA_RDY_INT;// Choosing Any motion interrupt
 8003a56:	4b1e      	ldr	r3, [pc, #120]	@ (8003ad0 <BMI160_init+0x17c>)
 8003a58:	220a      	movs	r2, #10
 8003a5a:	705a      	strb	r2, [r3, #1]
    /* Select the interrupt channel/pin settings */
    int_config.int_pin_settg.output_en = BMI160_ENABLE;// Enabling interrupt pins to act as output pin
 8003a5c:	4a1c      	ldr	r2, [pc, #112]	@ (8003ad0 <BMI160_init+0x17c>)
 8003a5e:	7893      	ldrb	r3, [r2, #2]
 8003a60:	f043 0301 	orr.w	r3, r3, #1
 8003a64:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.output_mode = BMI160_DISABLE;// Choosing push-pull mode for interrupt pin
 8003a66:	4a1a      	ldr	r2, [pc, #104]	@ (8003ad0 <BMI160_init+0x17c>)
 8003a68:	7893      	ldrb	r3, [r2, #2]
 8003a6a:	f36f 0341 	bfc	r3, #1, #1
 8003a6e:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.output_type = BMI160_DISABLE;// Choosing active low output
 8003a70:	4a17      	ldr	r2, [pc, #92]	@ (8003ad0 <BMI160_init+0x17c>)
 8003a72:	7893      	ldrb	r3, [r2, #2]
 8003a74:	f36f 0382 	bfc	r3, #2, #1
 8003a78:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.edge_ctrl = BMI160_ENABLE;// Choosing edge triggered output
 8003a7a:	4a15      	ldr	r2, [pc, #84]	@ (8003ad0 <BMI160_init+0x17c>)
 8003a7c:	7893      	ldrb	r3, [r2, #2]
 8003a7e:	f043 0308 	orr.w	r3, r3, #8
 8003a82:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.input_en = BMI160_DISABLE;// Disabling interrupt pin to act as input
 8003a84:	4a12      	ldr	r2, [pc, #72]	@ (8003ad0 <BMI160_init+0x17c>)
 8003a86:	7893      	ldrb	r3, [r2, #2]
 8003a88:	f36f 1304 	bfc	r3, #4, #1
 8003a8c:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.latch_dur = BMI160_LATCH_DUR_NONE;// non-latched output
 8003a8e:	4a10      	ldr	r2, [pc, #64]	@ (8003ad0 <BMI160_init+0x17c>)
 8003a90:	8853      	ldrh	r3, [r2, #2]
 8003a92:	f36f 1348 	bfc	r3, #5, #4
 8003a96:	8053      	strh	r3, [r2, #2]

    /* Set the Any-motion interrupt */
    rslt = bmi160_set_int_config(&int_config, &sensor); /* sensor is an instance of the structure bmi160_dev  */
 8003a98:	4907      	ldr	r1, [pc, #28]	@ (8003ab8 <BMI160_init+0x164>)
 8003a9a:	480d      	ldr	r0, [pc, #52]	@ (8003ad0 <BMI160_init+0x17c>)
 8003a9c:	f7fd fb4e 	bl	800113c <bmi160_set_int_config>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	73fb      	strb	r3, [r7, #15]

    DataStruct->INIT_OK_i8 = rslt;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	7bfa      	ldrb	r2, [r7, #15]
 8003aa8:	761a      	strb	r2, [r3, #24]
    return rslt;
 8003aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	2000030c 	.word	0x2000030c
 8003abc:	08003ce9 	.word	0x08003ce9
 8003ac0:	08003d2d 	.word	0x08003d2d
 8003ac4:	08004e2d 	.word	0x08004e2d
 8003ac8:	20000356 	.word	0x20000356
 8003acc:	20000357 	.word	0x20000357
 8003ad0:	2000034c 	.word	0x2000034c

08003ad4 <start_foc>:

int8_t start_foc()
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
	int8_t rslt = 0;
 8003ada:	2300      	movs	r3, #0
 8003adc:	71fb      	strb	r3, [r7, #7]

	/* Enable FOC for accel with target values of z = 1g ; x,y as 0g */
	foc_conf.acc_off_en = BMI160_ENABLE;
 8003ade:	4b13      	ldr	r3, [pc, #76]	@ (8003b2c <start_foc+0x58>)
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	711a      	strb	r2, [r3, #4]
	foc_conf.foc_acc_x  = BMI160_FOC_ACCEL_0G;
 8003ae4:	4b11      	ldr	r3, [pc, #68]	@ (8003b2c <start_foc+0x58>)
 8003ae6:	2203      	movs	r2, #3
 8003ae8:	705a      	strb	r2, [r3, #1]
	foc_conf.foc_acc_y  = BMI160_FOC_ACCEL_0G;
 8003aea:	4b10      	ldr	r3, [pc, #64]	@ (8003b2c <start_foc+0x58>)
 8003aec:	2203      	movs	r2, #3
 8003aee:	709a      	strb	r2, [r3, #2]
	foc_conf.foc_acc_z  = BMI160_FOC_ACCEL_POSITIVE_G;
 8003af0:	4b0e      	ldr	r3, [pc, #56]	@ (8003b2c <start_foc+0x58>)
 8003af2:	2201      	movs	r2, #1
 8003af4:	70da      	strb	r2, [r3, #3]
	sensor.delay_ms(100);
 8003af6:	4b0e      	ldr	r3, [pc, #56]	@ (8003b30 <start_foc+0x5c>)
 8003af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afa:	2064      	movs	r0, #100	@ 0x64
 8003afc:	4798      	blx	r3

	/* Enable FOC for gyro */
	foc_conf.foc_gyr_en = BMI160_ENABLE;
 8003afe:	4b0b      	ldr	r3, [pc, #44]	@ (8003b2c <start_foc+0x58>)
 8003b00:	2201      	movs	r2, #1
 8003b02:	701a      	strb	r2, [r3, #0]
	foc_conf.gyro_off_en = BMI160_ENABLE;
 8003b04:	4b09      	ldr	r3, [pc, #36]	@ (8003b2c <start_foc+0x58>)
 8003b06:	2201      	movs	r2, #1
 8003b08:	715a      	strb	r2, [r3, #5]
	sensor.delay_ms(100);
 8003b0a:	4b09      	ldr	r3, [pc, #36]	@ (8003b30 <start_foc+0x5c>)
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0e:	2064      	movs	r0, #100	@ 0x64
 8003b10:	4798      	blx	r3

	rslt = bmi160_start_foc(&foc_conf, &offsets, &sensor);
 8003b12:	4a07      	ldr	r2, [pc, #28]	@ (8003b30 <start_foc+0x5c>)
 8003b14:	4907      	ldr	r1, [pc, #28]	@ (8003b34 <start_foc+0x60>)
 8003b16:	4805      	ldr	r0, [pc, #20]	@ (8003b2c <start_foc+0x58>)
 8003b18:	f7fd fb9c 	bl	8001254 <bmi160_start_foc>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	71fb      	strb	r3, [r7, #7]

	return rslt;
 8003b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	20000338 	.word	0x20000338
 8003b30:	2000030c 	.word	0x2000030c
 8003b34:	20000340 	.word	0x20000340

08003b38 <set_bmi160_Ares>:

	return rslt;
}

void set_bmi160_Ares()
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
	switch (BMI160_Asens)
 8003b3c:	4b12      	ldr	r3, [pc, #72]	@ (8003b88 <set_bmi160_Ares+0x50>)
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	3b01      	subs	r3, #1
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	d81a      	bhi.n	8003b7c <set_bmi160_Ares+0x44>
 8003b46:	a201      	add	r2, pc, #4	@ (adr r2, 8003b4c <set_bmi160_Ares+0x14>)
 8003b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4c:	08003b5d 	.word	0x08003b5d
 8003b50:	08003b65 	.word	0x08003b65
 8003b54:	08003b6d 	.word	0x08003b6d
 8003b58:	08003b75 	.word	0x08003b75
	{
		case AFS_2G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_2G;
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b8c <set_bmi160_Ares+0x54>)
 8003b5e:	2203      	movs	r2, #3
 8003b60:	701a      	strb	r2, [r3, #0]
			break;
 8003b62:	e00b      	b.n	8003b7c <set_bmi160_Ares+0x44>
		case AFS_4G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_4G;
 8003b64:	4b09      	ldr	r3, [pc, #36]	@ (8003b8c <set_bmi160_Ares+0x54>)
 8003b66:	2205      	movs	r2, #5
 8003b68:	701a      	strb	r2, [r3, #0]
			break;
 8003b6a:	e007      	b.n	8003b7c <set_bmi160_Ares+0x44>
		case AFS_8G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_8G;
 8003b6c:	4b07      	ldr	r3, [pc, #28]	@ (8003b8c <set_bmi160_Ares+0x54>)
 8003b6e:	2208      	movs	r2, #8
 8003b70:	701a      	strb	r2, [r3, #0]
			break;
 8003b72:	e003      	b.n	8003b7c <set_bmi160_Ares+0x44>
		case AFS_16G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_16G;
 8003b74:	4b05      	ldr	r3, [pc, #20]	@ (8003b8c <set_bmi160_Ares+0x54>)
 8003b76:	220c      	movs	r2, #12
 8003b78:	701a      	strb	r2, [r3, #0]
			break;
 8003b7a:	bf00      	nop
	}
}
 8003b7c:	bf00      	nop
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	20000008 	.word	0x20000008
 8003b8c:	20000356 	.word	0x20000356

08003b90 <set_bmi160_Gres>:

void set_bmi160_Gres()
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
	switch (BMI160_Gsens)
 8003b94:	4b15      	ldr	r3, [pc, #84]	@ (8003bec <set_bmi160_Gres+0x5c>)
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d820      	bhi.n	8003be0 <set_bmi160_Gres+0x50>
 8003b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8003ba4 <set_bmi160_Gres+0x14>)
 8003ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba4:	08003bb9 	.word	0x08003bb9
 8003ba8:	08003bc1 	.word	0x08003bc1
 8003bac:	08003bc9 	.word	0x08003bc9
 8003bb0:	08003bd1 	.word	0x08003bd1
 8003bb4:	08003bd9 	.word	0x08003bd9
	{
		case GFS_125DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_125_DPS;
 8003bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8003bf0 <set_bmi160_Gres+0x60>)
 8003bba:	2204      	movs	r2, #4
 8003bbc:	701a      	strb	r2, [r3, #0]
			break;
 8003bbe:	e00f      	b.n	8003be0 <set_bmi160_Gres+0x50>
		case GFS_250DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_250_DPS;
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf0 <set_bmi160_Gres+0x60>)
 8003bc2:	2203      	movs	r2, #3
 8003bc4:	701a      	strb	r2, [r3, #0]
			break;
 8003bc6:	e00b      	b.n	8003be0 <set_bmi160_Gres+0x50>
		case GFS_500DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_500_DPS;
 8003bc8:	4b09      	ldr	r3, [pc, #36]	@ (8003bf0 <set_bmi160_Gres+0x60>)
 8003bca:	2202      	movs	r2, #2
 8003bcc:	701a      	strb	r2, [r3, #0]
			break;
 8003bce:	e007      	b.n	8003be0 <set_bmi160_Gres+0x50>
		case GFS_1000DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_1000_DPS;
 8003bd0:	4b07      	ldr	r3, [pc, #28]	@ (8003bf0 <set_bmi160_Gres+0x60>)
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	701a      	strb	r2, [r3, #0]
			break;
 8003bd6:	e003      	b.n	8003be0 <set_bmi160_Gres+0x50>
		case GFS_2000DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_2000_DPS;
 8003bd8:	4b05      	ldr	r3, [pc, #20]	@ (8003bf0 <set_bmi160_Gres+0x60>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	701a      	strb	r2, [r3, #0]
			break;
 8003bde:	bf00      	nop
	}
}
 8003be0:	bf00      	nop
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	20000009 	.word	0x20000009
 8003bf0:	20000357 	.word	0x20000357

08003bf4 <get_bmi160_Ares>:

void get_bmi160_Ares()
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
	switch (BMI160_Ascale)
 8003bf8:	4b17      	ldr	r3, [pc, #92]	@ (8003c58 <get_bmi160_Ares+0x64>)
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d826      	bhi.n	8003c4e <get_bmi160_Ares+0x5a>
 8003c00:	a201      	add	r2, pc, #4	@ (adr r2, 8003c08 <get_bmi160_Ares+0x14>)
 8003c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c06:	bf00      	nop
 8003c08:	08003c1d 	.word	0x08003c1d
 8003c0c:	08003c27 	.word	0x08003c27
 8003c10:	08003c31 	.word	0x08003c31
 8003c14:	08003c3b 	.word	0x08003c3b
 8003c18:	08003c45 	.word	0x08003c45
	{
		case AFS_RAW:
			bmi160_aRes = 1.0f;
 8003c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8003c5c <get_bmi160_Ares+0x68>)
 8003c1e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003c22:	601a      	str	r2, [r3, #0]
			break;
 8003c24:	e013      	b.n	8003c4e <get_bmi160_Ares+0x5a>
		case AFS_2G:
			bmi160_aRes = 16384.0f;
 8003c26:	4b0d      	ldr	r3, [pc, #52]	@ (8003c5c <get_bmi160_Ares+0x68>)
 8003c28:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8003c2c:	601a      	str	r2, [r3, #0]
			break;
 8003c2e:	e00e      	b.n	8003c4e <get_bmi160_Ares+0x5a>
		case AFS_4G:
			bmi160_aRes = 8192.0f;
 8003c30:	4b0a      	ldr	r3, [pc, #40]	@ (8003c5c <get_bmi160_Ares+0x68>)
 8003c32:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8003c36:	601a      	str	r2, [r3, #0]
			break;
 8003c38:	e009      	b.n	8003c4e <get_bmi160_Ares+0x5a>
		case AFS_8G:
			bmi160_aRes = 4096.0f;
 8003c3a:	4b08      	ldr	r3, [pc, #32]	@ (8003c5c <get_bmi160_Ares+0x68>)
 8003c3c:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 8003c40:	601a      	str	r2, [r3, #0]
			break;
 8003c42:	e004      	b.n	8003c4e <get_bmi160_Ares+0x5a>
		case AFS_16G:
			bmi160_aRes = 2048.0f;
 8003c44:	4b05      	ldr	r3, [pc, #20]	@ (8003c5c <get_bmi160_Ares+0x68>)
 8003c46:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 8003c4a:	601a      	str	r2, [r3, #0]
			break;
 8003c4c:	bf00      	nop
	}
}
 8003c4e:	bf00      	nop
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	2000000a 	.word	0x2000000a
 8003c5c:	20000358 	.word	0x20000358

08003c60 <get_bmi160_Gres>:

void get_bmi160_Gres()
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
	switch (BMI160_Gscale)
 8003c64:	4b18      	ldr	r3, [pc, #96]	@ (8003cc8 <get_bmi160_Gres+0x68>)
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	2b05      	cmp	r3, #5
 8003c6a:	d828      	bhi.n	8003cbe <get_bmi160_Gres+0x5e>
 8003c6c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c74 <get_bmi160_Gres+0x14>)
 8003c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c72:	bf00      	nop
 8003c74:	08003c8d 	.word	0x08003c8d
 8003c78:	08003c97 	.word	0x08003c97
 8003c7c:	08003c9f 	.word	0x08003c9f
 8003c80:	08003ca7 	.word	0x08003ca7
 8003c84:	08003caf 	.word	0x08003caf
 8003c88:	08003cb7 	.word	0x08003cb7
	{
		case GFS_RAW:
			bmi160_aRes = 1.0f;
 8003c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8003ccc <get_bmi160_Gres+0x6c>)
 8003c8e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003c92:	601a      	str	r2, [r3, #0]
			break;
 8003c94:	e013      	b.n	8003cbe <get_bmi160_Gres+0x5e>
		case GFS_125DPS:
			bmi160_gRes = 262.4f;
 8003c96:	4b0e      	ldr	r3, [pc, #56]	@ (8003cd0 <get_bmi160_Gres+0x70>)
 8003c98:	4a0e      	ldr	r2, [pc, #56]	@ (8003cd4 <get_bmi160_Gres+0x74>)
 8003c9a:	601a      	str	r2, [r3, #0]
			break;
 8003c9c:	e00f      	b.n	8003cbe <get_bmi160_Gres+0x5e>
		case GFS_250DPS:
			bmi160_gRes = 131.2f;
 8003c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd0 <get_bmi160_Gres+0x70>)
 8003ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8003cd8 <get_bmi160_Gres+0x78>)
 8003ca2:	601a      	str	r2, [r3, #0]
			break;
 8003ca4:	e00b      	b.n	8003cbe <get_bmi160_Gres+0x5e>
		case GFS_500DPS:
			bmi160_gRes = 65.6f;
 8003ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd0 <get_bmi160_Gres+0x70>)
 8003ca8:	4a0c      	ldr	r2, [pc, #48]	@ (8003cdc <get_bmi160_Gres+0x7c>)
 8003caa:	601a      	str	r2, [r3, #0]
			break;
 8003cac:	e007      	b.n	8003cbe <get_bmi160_Gres+0x5e>
		case GFS_1000DPS:
			bmi160_gRes = 32.8f;
 8003cae:	4b08      	ldr	r3, [pc, #32]	@ (8003cd0 <get_bmi160_Gres+0x70>)
 8003cb0:	4a0b      	ldr	r2, [pc, #44]	@ (8003ce0 <get_bmi160_Gres+0x80>)
 8003cb2:	601a      	str	r2, [r3, #0]
			break;
 8003cb4:	e003      	b.n	8003cbe <get_bmi160_Gres+0x5e>
		case GFS_2000DPS:
			bmi160_gRes = 16.4f;
 8003cb6:	4b06      	ldr	r3, [pc, #24]	@ (8003cd0 <get_bmi160_Gres+0x70>)
 8003cb8:	4a0a      	ldr	r2, [pc, #40]	@ (8003ce4 <get_bmi160_Gres+0x84>)
 8003cba:	601a      	str	r2, [r3, #0]
			break;
 8003cbc:	bf00      	nop
	}
}
 8003cbe:	bf00      	nop
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	2000000b 	.word	0x2000000b
 8003ccc:	20000358 	.word	0x20000358
 8003cd0:	2000035c 	.word	0x2000035c
 8003cd4:	43833333 	.word	0x43833333
 8003cd8:	43033333 	.word	0x43033333
 8003cdc:	42833333 	.word	0x42833333
 8003ce0:	42033333 	.word	0x42033333
 8003ce4:	41833333 	.word	0x41833333

08003ce8 <SensorAPI_I2Cx_Read>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af02      	add	r7, sp, #8
 8003cee:	603a      	str	r2, [r7, #0]
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	71fb      	strb	r3, [r7, #7]
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	71bb      	strb	r3, [r7, #6]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, &reg_addr, 1, I2CTIMEOUT);
 8003cfe:	1dba      	adds	r2, r7, #6
 8003d00:	2364      	movs	r3, #100	@ 0x64
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	2301      	movs	r3, #1
 8003d06:	21d2      	movs	r1, #210	@ 0xd2
 8003d08:	4807      	ldr	r0, [pc, #28]	@ (8003d28 <SensorAPI_I2Cx_Read+0x40>)
 8003d0a:	f003 f9a1 	bl	8007050 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&I2C_HANDLE, BMI160_ADDR, data, len, I2CTIMEOUT);
 8003d0e:	88bb      	ldrh	r3, [r7, #4]
 8003d10:	2264      	movs	r2, #100	@ 0x64
 8003d12:	9200      	str	r2, [sp, #0]
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	21d2      	movs	r1, #210	@ 0xd2
 8003d18:	4803      	ldr	r0, [pc, #12]	@ (8003d28 <SensorAPI_I2Cx_Read+0x40>)
 8003d1a:	f003 fab1 	bl	8007280 <HAL_I2C_Master_Receive>
	return 0;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	20000650 	.word	0x20000650

08003d2c <SensorAPI_I2Cx_Write>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af02      	add	r7, sp, #8
 8003d32:	603a      	str	r2, [r7, #0]
 8003d34:	461a      	mov	r2, r3
 8003d36:	4603      	mov	r3, r0
 8003d38:	71fb      	strb	r3, [r7, #7]
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	71bb      	strb	r3, [r7, #6]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	80bb      	strh	r3, [r7, #4]
	GTXBuffer[0] = reg_addr;
 8003d42:	4a0c      	ldr	r2, [pc, #48]	@ (8003d74 <SensorAPI_I2Cx_Write+0x48>)
 8003d44:	79bb      	ldrb	r3, [r7, #6]
 8003d46:	7013      	strb	r3, [r2, #0]
	memcpy(&GTXBuffer[1], data, len);
 8003d48:	88bb      	ldrh	r3, [r7, #4]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	6839      	ldr	r1, [r7, #0]
 8003d4e:	480a      	ldr	r0, [pc, #40]	@ (8003d78 <SensorAPI_I2Cx_Write+0x4c>)
 8003d50:	f00e ff61 	bl	8012c16 <memcpy>

	HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, GTXBuffer, len+1, I2CTIMEOUT);
 8003d54:	88bb      	ldrh	r3, [r7, #4]
 8003d56:	3301      	adds	r3, #1
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	2264      	movs	r2, #100	@ 0x64
 8003d5c:	9200      	str	r2, [sp, #0]
 8003d5e:	4a05      	ldr	r2, [pc, #20]	@ (8003d74 <SensorAPI_I2Cx_Write+0x48>)
 8003d60:	21d2      	movs	r1, #210	@ 0xd2
 8003d62:	4806      	ldr	r0, [pc, #24]	@ (8003d7c <SensorAPI_I2Cx_Write+0x50>)
 8003d64:	f003 f974 	bl	8007050 <HAL_I2C_Master_Transmit>
	return 0;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	20000360 	.word	0x20000360
 8003d78:	20000361 	.word	0x20000361
 8003d7c:	20000650 	.word	0x20000650

08003d80 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003d88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d8c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003d98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d9c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4013      	ands	r3, r2
 8003da2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003da4:	68fb      	ldr	r3, [r7, #12]
}
 8003da6:	bf00      	nop
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b085      	sub	sp, #20
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003dba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dbe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003dc0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003dca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
}
 8003dd8:	bf00      	nop
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2)
  {
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(TIMING_GPIO_Port, TIMING_Pin);
 8003dec:	2101      	movs	r1, #1
 8003dee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003df2:	f003 f855 	bl	8006ea0 <HAL_GPIO_TogglePin>
	////this updates the X and Y axes of my joystick
	  for(uint8_t i = 0; i<hadc1.Init.NbrOfConversion; i++){
 8003df6:	2300      	movs	r3, #0
 8003df8:	73fb      	strb	r3, [r7, #15]
 8003dfa:	e00a      	b.n	8003e12 <HAL_TIM_PeriodElapsedCallback+0x2e>
		  mic = (uint16_t) rawValues[0];
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8003e2c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003dfe:	881a      	ldrh	r2, [r3, #0]
 8003e00:	4b0b      	ldr	r3, [pc, #44]	@ (8003e30 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003e02:	801a      	strh	r2, [r3, #0]
		  mic2 = mic;
 8003e04:	4b0a      	ldr	r3, [pc, #40]	@ (8003e30 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003e06:	881a      	ldrh	r2, [r3, #0]
 8003e08:	4b0a      	ldr	r3, [pc, #40]	@ (8003e34 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003e0a:	801a      	strh	r2, [r3, #0]
	  for(uint8_t i = 0; i<hadc1.Init.NbrOfConversion; i++){
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	73fb      	strb	r3, [r7, #15]
 8003e12:	7bfa      	ldrb	r2, [r7, #15]
 8003e14:	4b08      	ldr	r3, [pc, #32]	@ (8003e38 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d3ef      	bcc.n	8003dfc <HAL_TIM_PeriodElapsedCallback+0x18>
	  }
	  flag = 1;
 8003e1c:	4b07      	ldr	r3, [pc, #28]	@ (8003e3c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003e1e:	2201      	movs	r2, #1
 8003e20:	701a      	strb	r2, [r3, #0]
	  sprintf(msg, "X axis: %hu, Y axis: %hu \r\n", Xaxis, Yaxis);
	  status = CDC_Transmit_FS(msg, strlen((char*)msg));
	  if (status == USBD_OK) {
	  	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin); // Example: Toggle LED on success
	  }*/
  }
 8003e22:	bf00      	nop
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	200006f8 	.word	0x200006f8
 8003e30:	200006f2 	.word	0x200006f2
 8003e34:	200006f4 	.word	0x200006f4
 8003e38:	2000058c 	.word	0x2000058c
 8003e3c:	200006fc 	.word	0x200006fc

08003e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e40:	b590      	push	{r4, r7, lr}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e46:	f000 ff6b 	bl	8004d20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e4a:	f000 f8ab 	bl	8003fa4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003e4e:	f000 f90d 	bl	800406c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e52:	f000 fa51 	bl	80042f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003e56:	f000 fa3d 	bl	80042d4 <MX_DMA_Init>
  MX_ADC1_Init();
 8003e5a:	f000 f939 	bl	80040d0 <MX_ADC1_Init>
  MX_TIM2_Init();
 8003e5e:	f000 f9eb 	bl	8004238 <MX_TIM2_Init>
  MX_USB_Device_Init();
 8003e62:	f00d fb9f 	bl	80115a4 <MX_USB_Device_Init>
  MX_I2C1_Init();
 8003e66:	f000 f9a7 	bl	80041b8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ////This begins the process of storing our ADC readings into the DMA. The DMA can be thought of a temporary storage location.
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) rawValues, 2);
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	4941      	ldr	r1, [pc, #260]	@ (8003f74 <main+0x134>)
 8003e6e:	4842      	ldr	r0, [pc, #264]	@ (8003f78 <main+0x138>)
 8003e70:	f001 fb34 	bl	80054dc <HAL_ADC_Start_DMA>
    ////This begins our timer 2
  HAL_TIM_Base_Start_IT(&htim2);
 8003e74:	4841      	ldr	r0, [pc, #260]	@ (8003f7c <main+0x13c>)
 8003e76:	f007 ff75 	bl	800bd64 <HAL_TIM_Base_Start_IT>

  while (BMI160_init(imu_t) == 1); // waits for IMU to be ready
 8003e7a:	bf00      	nop
 8003e7c:	4b40      	ldr	r3, [pc, #256]	@ (8003f80 <main+0x140>)
 8003e7e:	466c      	mov	r4, sp
 8003e80:	f103 0210 	add.w	r2, r3, #16
 8003e84:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003e8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e8c:	f7ff fd62 	bl	8003954 <BMI160_init>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d0f2      	beq.n	8003e7c <main+0x3c>

  if (imu_t.INIT_OK_i8 == TRUE){
 8003e96:	4b3a      	ldr	r3, [pc, #232]	@ (8003f80 <main+0x140>)
 8003e98:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d102      	bne.n	8003ea6 <main+0x66>
	  BSP_LED_On(LED_RED);
 8003ea0:	2002      	movs	r0, #2
 8003ea2:	f000 fdeb 	bl	8004a7c <BSP_LED_On>
  }

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 8003ea6:	2000      	movs	r0, #0
 8003ea8:	f000 fdae 	bl	8004a08 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8003eac:	2001      	movs	r0, #1
 8003eae:	f000 fdab 	bl	8004a08 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8003eb2:	2002      	movs	r0, #2
 8003eb4:	f000 fda8 	bl	8004a08 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8003eb8:	2101      	movs	r1, #1
 8003eba:	2000      	movs	r0, #0
 8003ebc:	f000 fe12 	bl	8004ae4 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	2001      	movs	r0, #1
 8003ec4:	f000 fe0e 	bl	8004ae4 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 8003ec8:	2101      	movs	r1, #1
 8003eca:	2002      	movs	r0, #2
 8003ecc:	f000 fe0a 	bl	8004ae4 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8003ed0:	4b2c      	ldr	r3, [pc, #176]	@ (8003f84 <main+0x144>)
 8003ed2:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003ed6:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8003ed8:	4b2a      	ldr	r3, [pc, #168]	@ (8003f84 <main+0x144>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8003ede:	4b29      	ldr	r3, [pc, #164]	@ (8003f84 <main+0x144>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8003ee4:	4b27      	ldr	r3, [pc, #156]	@ (8003f84 <main+0x144>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8003eea:	4b26      	ldr	r3, [pc, #152]	@ (8003f84 <main+0x144>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8003ef0:	4924      	ldr	r1, [pc, #144]	@ (8003f84 <main+0x144>)
 8003ef2:	2000      	movs	r0, #0
 8003ef4:	f000 fe66 	bl	8004bc4 <BSP_COM_Init>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <main+0xc2>
  {
    Error_Handler();
 8003efe:	f000 fa61 	bl	80043c4 <Error_Handler>
  /*                                                                          ********************************************************************* */
  while (1)
  {
	  //bmi160ReadAccelGyro(&imu_t);

	  if (flag==1){
 8003f02:	4b21      	ldr	r3, [pc, #132]	@ (8003f88 <main+0x148>)
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d1fb      	bne.n	8003f02 <main+0xc2>

		  //HAL_GPIO_TogglePin(SIGNAL_GPIO_Port, SIGNAL_Pin);
		  //HAL_GPIO_WritePin(SIGNAL_GPIO_Port, SIGNAL_Pin,GPIO_PIN_SET);
		  if (counter == 32000){
 8003f0a:	4b20      	ldr	r3, [pc, #128]	@ (8003f8c <main+0x14c>)
 8003f0c:	881b      	ldrh	r3, [r3, #0]
 8003f0e:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8003f12:	d103      	bne.n	8003f1c <main+0xdc>
			  counter = 0;
 8003f14:	4b1d      	ldr	r3, [pc, #116]	@ (8003f8c <main+0x14c>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	801a      	strh	r2, [r3, #0]
 8003f1a:	e005      	b.n	8003f28 <main+0xe8>
		  }
		  else{
			  counter++;
 8003f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8003f8c <main+0x14c>)
 8003f1e:	881b      	ldrh	r3, [r3, #0]
 8003f20:	3301      	adds	r3, #1
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	4b19      	ldr	r3, [pc, #100]	@ (8003f8c <main+0x14c>)
 8003f26:	801a      	strh	r2, [r3, #0]
		  }
		  update_data_packet_audio_buffered(mic, mic2, USB_buffer, &packet_length);
 8003f28:	4b19      	ldr	r3, [pc, #100]	@ (8003f90 <main+0x150>)
 8003f2a:	8818      	ldrh	r0, [r3, #0]
 8003f2c:	4b19      	ldr	r3, [pc, #100]	@ (8003f94 <main+0x154>)
 8003f2e:	8819      	ldrh	r1, [r3, #0]
 8003f30:	4b19      	ldr	r3, [pc, #100]	@ (8003f98 <main+0x158>)
 8003f32:	4a1a      	ldr	r2, [pc, #104]	@ (8003f9c <main+0x15c>)
 8003f34:	f000 fa19 	bl	800436a <update_data_packet_audio_buffered>
		  //prepare_data_packet_audio(counter, counter,USB_buffer,&packet_length);
		  //prepare_data_packet_audio(mic, mic2,USB_buffer,&packet_length);
		  //HAL_GPIO_WritePin(TIMING_GPIO_Port, TIMING_Pin,GPIO_PIN_RESET);
		  if (counter % 100 == 0){
 8003f38:	4b14      	ldr	r3, [pc, #80]	@ (8003f8c <main+0x14c>)
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	4a18      	ldr	r2, [pc, #96]	@ (8003fa0 <main+0x160>)
 8003f3e:	fba2 1203 	umull	r1, r2, r2, r3
 8003f42:	0952      	lsrs	r2, r2, #5
 8003f44:	2164      	movs	r1, #100	@ 0x64
 8003f46:	fb01 f202 	mul.w	r2, r1, r2
 8003f4a:	1a9b      	subs	r3, r3, r2
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10c      	bne.n	8003f6c <main+0x12c>
			  CDC_Transmit_FS(USB_buffer, packet_length);
 8003f52:	4b11      	ldr	r3, [pc, #68]	@ (8003f98 <main+0x158>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	4619      	mov	r1, r3
 8003f5a:	4810      	ldr	r0, [pc, #64]	@ (8003f9c <main+0x15c>)
 8003f5c:	f00d fbe0 	bl	8011720 <CDC_Transmit_FS>
			  packet_length = 0;
 8003f60:	4b0d      	ldr	r3, [pc, #52]	@ (8003f98 <main+0x158>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	601a      	str	r2, [r3, #0]
			  BSP_LED_Toggle(LED_GREEN);
 8003f66:	2001      	movs	r0, #1
 8003f68:	f000 fda2 	bl	8004ab0 <BSP_LED_Toggle>

		  //HAL_GPIO_TogglePin(LED_GREEN_Port,LED_GREEN_Pin);
		  //snprintf(msg, sizeof(msg), "a: %.2f, g: %.2f", a_f32[0], g_f32[0]);
		  //CDC_Transmit_FS((uint8_t *)msg, strlen(msg));

		  flag = 0;
 8003f6c:	4b06      	ldr	r3, [pc, #24]	@ (8003f88 <main+0x148>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	701a      	strb	r2, [r3, #0]
	  if (flag==1){
 8003f72:	e7c6      	b.n	8003f02 <main+0xc2>
 8003f74:	200006f8 	.word	0x200006f8
 8003f78:	2000058c 	.word	0x2000058c
 8003f7c:	200006a4 	.word	0x200006a4
 8003f80:	20000560 	.word	0x20000560
 8003f84:	2000057c 	.word	0x2000057c
 8003f88:	200006fc 	.word	0x200006fc
 8003f8c:	200006f0 	.word	0x200006f0
 8003f90:	200006f2 	.word	0x200006f2
 8003f94:	200006f4 	.word	0x200006f4
 8003f98:	20000900 	.word	0x20000900
 8003f9c:	20000700 	.word	0x20000700
 8003fa0:	51eb851f 	.word	0x51eb851f

08003fa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b09a      	sub	sp, #104	@ 0x68
 8003fa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003faa:	f107 0320 	add.w	r3, r7, #32
 8003fae:	2248      	movs	r2, #72	@ 0x48
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f00e fdaf 	bl	8012b16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003fb8:	1d3b      	adds	r3, r7, #4
 8003fba:	2200      	movs	r2, #0
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	605a      	str	r2, [r3, #4]
 8003fc0:	609a      	str	r2, [r3, #8]
 8003fc2:	60da      	str	r2, [r3, #12]
 8003fc4:	611a      	str	r2, [r3, #16]
 8003fc6:	615a      	str	r2, [r3, #20]
 8003fc8:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fca:	4b27      	ldr	r3, [pc, #156]	@ (8004068 <SystemClock_Config+0xc4>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003fd2:	4a25      	ldr	r2, [pc, #148]	@ (8004068 <SystemClock_Config+0xc4>)
 8003fd4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	4b23      	ldr	r3, [pc, #140]	@ (8004068 <SystemClock_Config+0xc4>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003fe2:	603b      	str	r3, [r7, #0]
 8003fe4:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003fea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003fee:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ff0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003ff6:	2340      	movs	r3, #64	@ 0x40
 8003ff8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003ffe:	2303      	movs	r3, #3
 8004000:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8004002:	2310      	movs	r3, #16
 8004004:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8004006:	2308      	movs	r3, #8
 8004008:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800400a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800400e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004010:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004014:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004016:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800401a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800401c:	f107 0320 	add.w	r3, r7, #32
 8004020:	4618      	mov	r0, r3
 8004022:	f006 fc0f 	bl	800a844 <HAL_RCC_OscConfig>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d001      	beq.n	8004030 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800402c:	f000 f9ca 	bl	80043c4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8004030:	236f      	movs	r3, #111	@ 0x6f
 8004032:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004034:	2303      	movs	r3, #3
 8004036:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004038:	2300      	movs	r3, #0
 800403a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800403c:	2300      	movs	r3, #0
 800403e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004040:	2300      	movs	r3, #0
 8004042:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8004044:	2380      	movs	r3, #128	@ 0x80
 8004046:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8004048:	2300      	movs	r3, #0
 800404a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800404c:	1d3b      	adds	r3, r7, #4
 800404e:	2103      	movs	r1, #3
 8004050:	4618      	mov	r0, r3
 8004052:	f006 ff6b 	bl	800af2c <HAL_RCC_ClockConfig>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800405c:	f000 f9b2 	bl	80043c4 <Error_Handler>
  }
}
 8004060:	bf00      	nop
 8004062:	3768      	adds	r7, #104	@ 0x68
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	58000400 	.word	0x58000400

0800406c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b094      	sub	sp, #80	@ 0x50
 8004070:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004072:	463b      	mov	r3, r7
 8004074:	2250      	movs	r2, #80	@ 0x50
 8004076:	2100      	movs	r1, #0
 8004078:	4618      	mov	r0, r3
 800407a:	f00e fd4c 	bl	8012b16 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 800407e:	f44f 5314 	mov.w	r3, #9472	@ 0x2500
 8004082:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8004084:	2306      	movs	r3, #6
 8004086:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8004088:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800408c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800408e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004092:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8004094:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004098:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 800409a:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 800409e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80040a0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80040a4:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80040a6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80040aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80040ac:	2300      	movs	r3, #0
 80040ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80040b0:	2300      	movs	r3, #0
 80040b2:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80040b4:	463b      	mov	r3, r7
 80040b6:	4618      	mov	r0, r3
 80040b8:	f007 fb75 	bl	800b7a6 <HAL_RCCEx_PeriphCLKConfig>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 80040c2:	f000 f97f 	bl	80043c4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80040c6:	bf00      	nop
 80040c8:	3750      	adds	r7, #80	@ 0x50
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
	...

080040d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80040d6:	463b      	mov	r3, r7
 80040d8:	2200      	movs	r2, #0
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	605a      	str	r2, [r3, #4]
 80040de:	609a      	str	r2, [r3, #8]
 80040e0:	60da      	str	r2, [r3, #12]
 80040e2:	611a      	str	r2, [r3, #16]
 80040e4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80040e6:	4b30      	ldr	r3, [pc, #192]	@ (80041a8 <MX_ADC1_Init+0xd8>)
 80040e8:	4a30      	ldr	r2, [pc, #192]	@ (80041ac <MX_ADC1_Init+0xdc>)
 80040ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80040ec:	4b2e      	ldr	r3, [pc, #184]	@ (80041a8 <MX_ADC1_Init+0xd8>)
 80040ee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80040f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80040f4:	4b2c      	ldr	r3, [pc, #176]	@ (80041a8 <MX_ADC1_Init+0xd8>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80040fa:	4b2b      	ldr	r3, [pc, #172]	@ (80041a8 <MX_ADC1_Init+0xd8>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004100:	4b29      	ldr	r3, [pc, #164]	@ (80041a8 <MX_ADC1_Init+0xd8>)
 8004102:	2201      	movs	r2, #1
 8004104:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004106:	4b28      	ldr	r3, [pc, #160]	@ (80041a8 <MX_ADC1_Init+0xd8>)
 8004108:	2204      	movs	r2, #4
 800410a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800410c:	4b26      	ldr	r3, [pc, #152]	@ (80041a8 <MX_ADC1_Init+0xd8>)
 800410e:	2200      	movs	r2, #0
 8004110:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004112:	4b25      	ldr	r3, [pc, #148]	@ (80041a8 <MX_ADC1_Init+0xd8>)
 8004114:	2201      	movs	r2, #1
 8004116:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8004118:	4b23      	ldr	r3, [pc, #140]	@ (80041a8 <MX_ADC1_Init+0xd8>)
 800411a:	2202      	movs	r2, #2
 800411c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800411e:	4b22      	ldr	r3, [pc, #136]	@ (80041a8 <MX_ADC1_Init+0xd8>)
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004126:	4b20      	ldr	r3, [pc, #128]	@ (80041a8 <MX_ADC1_Init+0xd8>)
 8004128:	2200      	movs	r2, #0
 800412a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800412c:	4b1e      	ldr	r3, [pc, #120]	@ (80041a8 <MX_ADC1_Init+0xd8>)
 800412e:	2200      	movs	r2, #0
 8004130:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004132:	4b1d      	ldr	r3, [pc, #116]	@ (80041a8 <MX_ADC1_Init+0xd8>)
 8004134:	2201      	movs	r2, #1
 8004136:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800413a:	4b1b      	ldr	r3, [pc, #108]	@ (80041a8 <MX_ADC1_Init+0xd8>)
 800413c:	2200      	movs	r2, #0
 800413e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8004140:	4b19      	ldr	r3, [pc, #100]	@ (80041a8 <MX_ADC1_Init+0xd8>)
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004148:	4817      	ldr	r0, [pc, #92]	@ (80041a8 <MX_ADC1_Init+0xd8>)
 800414a:	f001 f87b 	bl	8005244 <HAL_ADC_Init>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8004154:	f000 f936 	bl	80043c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004158:	4b15      	ldr	r3, [pc, #84]	@ (80041b0 <MX_ADC1_Init+0xe0>)
 800415a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800415c:	2306      	movs	r3, #6
 800415e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8004160:	2306      	movs	r3, #6
 8004162:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004164:	237f      	movs	r3, #127	@ 0x7f
 8004166:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004168:	2304      	movs	r3, #4
 800416a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800416c:	2300      	movs	r3, #0
 800416e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004170:	463b      	mov	r3, r7
 8004172:	4619      	mov	r1, r3
 8004174:	480c      	ldr	r0, [pc, #48]	@ (80041a8 <MX_ADC1_Init+0xd8>)
 8004176:	f001 fc13 	bl	80059a0 <HAL_ADC_ConfigChannel>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8004180:	f000 f920 	bl	80043c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004184:	4b0b      	ldr	r3, [pc, #44]	@ (80041b4 <MX_ADC1_Init+0xe4>)
 8004186:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004188:	230c      	movs	r3, #12
 800418a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800418c:	463b      	mov	r3, r7
 800418e:	4619      	mov	r1, r3
 8004190:	4805      	ldr	r0, [pc, #20]	@ (80041a8 <MX_ADC1_Init+0xd8>)
 8004192:	f001 fc05 	bl	80059a0 <HAL_ADC_ConfigChannel>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 800419c:	f000 f912 	bl	80043c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80041a0:	bf00      	nop
 80041a2:	3718      	adds	r7, #24
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	2000058c 	.word	0x2000058c
 80041ac:	50040000 	.word	0x50040000
 80041b0:	04300002 	.word	0x04300002
 80041b4:	08600004 	.word	0x08600004

080041b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80041bc:	4b1b      	ldr	r3, [pc, #108]	@ (800422c <MX_I2C1_Init+0x74>)
 80041be:	4a1c      	ldr	r2, [pc, #112]	@ (8004230 <MX_I2C1_Init+0x78>)
 80041c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 80041c2:	4b1a      	ldr	r3, [pc, #104]	@ (800422c <MX_I2C1_Init+0x74>)
 80041c4:	4a1b      	ldr	r2, [pc, #108]	@ (8004234 <MX_I2C1_Init+0x7c>)
 80041c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80041c8:	4b18      	ldr	r3, [pc, #96]	@ (800422c <MX_I2C1_Init+0x74>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80041ce:	4b17      	ldr	r3, [pc, #92]	@ (800422c <MX_I2C1_Init+0x74>)
 80041d0:	2201      	movs	r2, #1
 80041d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80041d4:	4b15      	ldr	r3, [pc, #84]	@ (800422c <MX_I2C1_Init+0x74>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80041da:	4b14      	ldr	r3, [pc, #80]	@ (800422c <MX_I2C1_Init+0x74>)
 80041dc:	2200      	movs	r2, #0
 80041de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80041e0:	4b12      	ldr	r3, [pc, #72]	@ (800422c <MX_I2C1_Init+0x74>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80041e6:	4b11      	ldr	r3, [pc, #68]	@ (800422c <MX_I2C1_Init+0x74>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80041ec:	4b0f      	ldr	r3, [pc, #60]	@ (800422c <MX_I2C1_Init+0x74>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80041f2:	480e      	ldr	r0, [pc, #56]	@ (800422c <MX_I2C1_Init+0x74>)
 80041f4:	f002 fe91 	bl	8006f1a <HAL_I2C_Init>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80041fe:	f000 f8e1 	bl	80043c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004202:	2100      	movs	r1, #0
 8004204:	4809      	ldr	r0, [pc, #36]	@ (800422c <MX_I2C1_Init+0x74>)
 8004206:	f004 f9af 	bl	8008568 <HAL_I2CEx_ConfigAnalogFilter>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004210:	f000 f8d8 	bl	80043c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004214:	2100      	movs	r1, #0
 8004216:	4805      	ldr	r0, [pc, #20]	@ (800422c <MX_I2C1_Init+0x74>)
 8004218:	f004 f9f1 	bl	80085fe <HAL_I2CEx_ConfigDigitalFilter>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004222:	f000 f8cf 	bl	80043c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004226:	bf00      	nop
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	20000650 	.word	0x20000650
 8004230:	40005400 	.word	0x40005400
 8004234:	10b17db5 	.word	0x10b17db5

08004238 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b088      	sub	sp, #32
 800423c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800423e:	f107 0310 	add.w	r3, r7, #16
 8004242:	2200      	movs	r2, #0
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	605a      	str	r2, [r3, #4]
 8004248:	609a      	str	r2, [r3, #8]
 800424a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800424c:	1d3b      	adds	r3, r7, #4
 800424e:	2200      	movs	r2, #0
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	605a      	str	r2, [r3, #4]
 8004254:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004256:	4b1e      	ldr	r3, [pc, #120]	@ (80042d0 <MX_TIM2_Init+0x98>)
 8004258:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800425c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 800425e:	4b1c      	ldr	r3, [pc, #112]	@ (80042d0 <MX_TIM2_Init+0x98>)
 8004260:	2201      	movs	r2, #1
 8004262:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004264:	4b1a      	ldr	r3, [pc, #104]	@ (80042d0 <MX_TIM2_Init+0x98>)
 8004266:	2200      	movs	r2, #0
 8004268:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 800-1;
 800426a:	4b19      	ldr	r3, [pc, #100]	@ (80042d0 <MX_TIM2_Init+0x98>)
 800426c:	f240 321f 	movw	r2, #799	@ 0x31f
 8004270:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004272:	4b17      	ldr	r3, [pc, #92]	@ (80042d0 <MX_TIM2_Init+0x98>)
 8004274:	2200      	movs	r2, #0
 8004276:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004278:	4b15      	ldr	r3, [pc, #84]	@ (80042d0 <MX_TIM2_Init+0x98>)
 800427a:	2280      	movs	r2, #128	@ 0x80
 800427c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800427e:	4814      	ldr	r0, [pc, #80]	@ (80042d0 <MX_TIM2_Init+0x98>)
 8004280:	f007 fd18 	bl	800bcb4 <HAL_TIM_Base_Init>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800428a:	f000 f89b 	bl	80043c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800428e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004292:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004294:	f107 0310 	add.w	r3, r7, #16
 8004298:	4619      	mov	r1, r3
 800429a:	480d      	ldr	r0, [pc, #52]	@ (80042d0 <MX_TIM2_Init+0x98>)
 800429c:	f007 feb7 	bl	800c00e <HAL_TIM_ConfigClockSource>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80042a6:	f000 f88d 	bl	80043c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80042aa:	2320      	movs	r3, #32
 80042ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042ae:	2300      	movs	r3, #0
 80042b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80042b2:	1d3b      	adds	r3, r7, #4
 80042b4:	4619      	mov	r1, r3
 80042b6:	4806      	ldr	r0, [pc, #24]	@ (80042d0 <MX_TIM2_Init+0x98>)
 80042b8:	f008 f8a6 	bl	800c408 <HAL_TIMEx_MasterConfigSynchronization>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80042c2:	f000 f87f 	bl	80043c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80042c6:	bf00      	nop
 80042c8:	3720      	adds	r7, #32
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	200006a4 	.word	0x200006a4

080042d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80042d8:	2004      	movs	r0, #4
 80042da:	f7ff fd51 	bl	8003d80 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80042de:	2001      	movs	r0, #1
 80042e0:	f7ff fd4e 	bl	8003d80 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80042e4:	2200      	movs	r2, #0
 80042e6:	2100      	movs	r1, #0
 80042e8:	200b      	movs	r0, #11
 80042ea:	f002 f93a 	bl	8006562 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80042ee:	200b      	movs	r0, #11
 80042f0:	f002 f951 	bl	8006596 <HAL_NVIC_EnableIRQ>

}
 80042f4:	bf00      	nop
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042fe:	1d3b      	adds	r3, r7, #4
 8004300:	2200      	movs	r2, #0
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	605a      	str	r2, [r3, #4]
 8004306:	609a      	str	r2, [r3, #8]
 8004308:	60da      	str	r2, [r3, #12]
 800430a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800430c:	2004      	movs	r0, #4
 800430e:	f7ff fd50 	bl	8003db2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004312:	2002      	movs	r0, #2
 8004314:	f7ff fd4d 	bl	8003db2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004318:	2001      	movs	r0, #1
 800431a:	f7ff fd4a 	bl	8003db2 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TIMING_Pin|SIGNAL_Pin, GPIO_PIN_RESET);
 800431e:	2200      	movs	r2, #0
 8004320:	2103      	movs	r1, #3
 8004322:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004326:	f002 fda3 	bl	8006e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TIMING_Pin */
  GPIO_InitStruct.Pin = TIMING_Pin;
 800432a:	2301      	movs	r3, #1
 800432c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800432e:	2301      	movs	r3, #1
 8004330:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004332:	2300      	movs	r3, #0
 8004334:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004336:	2301      	movs	r3, #1
 8004338:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(TIMING_GPIO_Port, &GPIO_InitStruct);
 800433a:	1d3b      	adds	r3, r7, #4
 800433c:	4619      	mov	r1, r3
 800433e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004342:	f002 fc25 	bl	8006b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIGNAL_Pin */
  GPIO_InitStruct.Pin = SIGNAL_Pin;
 8004346:	2302      	movs	r3, #2
 8004348:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800434a:	2301      	movs	r3, #1
 800434c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800434e:	2300      	movs	r3, #0
 8004350:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004352:	2300      	movs	r3, #0
 8004354:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8004356:	1d3b      	adds	r3, r7, #4
 8004358:	4619      	mov	r1, r3
 800435a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800435e:	f002 fc17 	bl	8006b90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004362:	bf00      	nop
 8004364:	3718      	adds	r7, #24
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <update_data_packet_audio_buffered>:
    memcpy(&buffer[1 + sizeof(uint16_t)], &var2, sizeof(uint16_t));

    // Set the total length of the packet
    *length = 1 + 2*sizeof(uint16_t);
}
void update_data_packet_audio_buffered(uint16_t var1, uint16_t var2, uint8_t *buffer, size_t *length) {
 800436a:	b480      	push	{r7}
 800436c:	b085      	sub	sp, #20
 800436e:	af00      	add	r7, sp, #0
 8004370:	60ba      	str	r2, [r7, #8]
 8004372:	607b      	str	r3, [r7, #4]
 8004374:	4603      	mov	r3, r0
 8004376:	81fb      	strh	r3, [r7, #14]
 8004378:	460b      	mov	r3, r1
 800437a:	81bb      	strh	r3, [r7, #12]
    // Define the start byte
	if (*length == 0){
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d107      	bne.n	8004394 <update_data_packet_audio_buffered+0x2a>
		buffer[0] = (uint8_t)-128;
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	2280      	movs	r2, #128	@ 0x80
 8004388:	701a      	strb	r2, [r3, #0]
		(*length)++;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	1c5a      	adds	r2, r3, #1
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	601a      	str	r2, [r3, #0]
	}
    memcpy(&buffer[*length], &var1, sizeof(uint16_t));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	4413      	add	r3, r2
 800439c:	89fa      	ldrh	r2, [r7, #14]
 800439e:	801a      	strh	r2, [r3, #0]
    memcpy(&buffer[*length + sizeof(uint16_t)], &var2, sizeof(uint16_t));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	3302      	adds	r3, #2
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	4413      	add	r3, r2
 80043aa:	89ba      	ldrh	r2, [r7, #12]
 80043ac:	801a      	strh	r2, [r3, #0]

    // Set the total length of the packet
    (*length) += 2*sizeof(uint16_t);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	1d1a      	adds	r2, r3, #4
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	601a      	str	r2, [r3, #0]
}
 80043b8:	bf00      	nop
 80043ba:	3714      	adds	r7, #20
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80043c8:	b672      	cpsid	i
}
 80043ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80043cc:	bf00      	nop
 80043ce:	e7fd      	b.n	80043cc <Error_Handler+0x8>

080043d0 <LL_AHB2_GRP1_EnableClock>:
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80043d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043dc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80043de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80043e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043ec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4013      	ands	r3, r2
 80043f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80043f4:	68fb      	ldr	r3, [r7, #12]
}
 80043f6:	bf00      	nop
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004402:	b480      	push	{r7}
 8004404:	b085      	sub	sp, #20
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800440a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800440e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004410:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4313      	orrs	r3, r2
 8004418:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800441a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800441e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4013      	ands	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004426:	68fb      	ldr	r3, [r7, #12]
}
 8004428:	bf00      	nop
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004438:	bf00      	nop
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
	...

08004444 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b088      	sub	sp, #32
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800444c:	f107 030c 	add.w	r3, r7, #12
 8004450:	2200      	movs	r2, #0
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	605a      	str	r2, [r3, #4]
 8004456:	609a      	str	r2, [r3, #8]
 8004458:	60da      	str	r2, [r3, #12]
 800445a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a26      	ldr	r2, [pc, #152]	@ (80044fc <HAL_ADC_MspInit+0xb8>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d145      	bne.n	80044f2 <HAL_ADC_MspInit+0xae>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004466:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800446a:	f7ff ffb1 	bl	80043d0 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800446e:	2004      	movs	r0, #4
 8004470:	f7ff ffae 	bl	80043d0 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004474:	2303      	movs	r3, #3
 8004476:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004478:	2303      	movs	r3, #3
 800447a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800447c:	2300      	movs	r3, #0
 800447e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004480:	f107 030c 	add.w	r3, r7, #12
 8004484:	4619      	mov	r1, r3
 8004486:	481e      	ldr	r0, [pc, #120]	@ (8004500 <HAL_ADC_MspInit+0xbc>)
 8004488:	f002 fb82 	bl	8006b90 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800448c:	4b1d      	ldr	r3, [pc, #116]	@ (8004504 <HAL_ADC_MspInit+0xc0>)
 800448e:	4a1e      	ldr	r2, [pc, #120]	@ (8004508 <HAL_ADC_MspInit+0xc4>)
 8004490:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004492:	4b1c      	ldr	r3, [pc, #112]	@ (8004504 <HAL_ADC_MspInit+0xc0>)
 8004494:	2205      	movs	r2, #5
 8004496:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004498:	4b1a      	ldr	r3, [pc, #104]	@ (8004504 <HAL_ADC_MspInit+0xc0>)
 800449a:	2200      	movs	r2, #0
 800449c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800449e:	4b19      	ldr	r3, [pc, #100]	@ (8004504 <HAL_ADC_MspInit+0xc0>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80044a4:	4b17      	ldr	r3, [pc, #92]	@ (8004504 <HAL_ADC_MspInit+0xc0>)
 80044a6:	2280      	movs	r2, #128	@ 0x80
 80044a8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80044aa:	4b16      	ldr	r3, [pc, #88]	@ (8004504 <HAL_ADC_MspInit+0xc0>)
 80044ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80044b0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80044b2:	4b14      	ldr	r3, [pc, #80]	@ (8004504 <HAL_ADC_MspInit+0xc0>)
 80044b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80044b8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80044ba:	4b12      	ldr	r3, [pc, #72]	@ (8004504 <HAL_ADC_MspInit+0xc0>)
 80044bc:	2220      	movs	r2, #32
 80044be:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80044c0:	4b10      	ldr	r3, [pc, #64]	@ (8004504 <HAL_ADC_MspInit+0xc0>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80044c6:	480f      	ldr	r0, [pc, #60]	@ (8004504 <HAL_ADC_MspInit+0xc0>)
 80044c8:	f002 f880 	bl	80065cc <HAL_DMA_Init>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <HAL_ADC_MspInit+0x92>
    {
      Error_Handler();
 80044d2:	f7ff ff77 	bl	80043c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a0a      	ldr	r2, [pc, #40]	@ (8004504 <HAL_ADC_MspInit+0xc0>)
 80044da:	64da      	str	r2, [r3, #76]	@ 0x4c
 80044dc:	4a09      	ldr	r2, [pc, #36]	@ (8004504 <HAL_ADC_MspInit+0xc0>)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 2, 0);
 80044e2:	2200      	movs	r2, #0
 80044e4:	2102      	movs	r1, #2
 80044e6:	2012      	movs	r0, #18
 80044e8:	f002 f83b 	bl	8006562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80044ec:	2012      	movs	r0, #18
 80044ee:	f002 f852 	bl	8006596 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80044f2:	bf00      	nop
 80044f4:	3720      	adds	r7, #32
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	50040000 	.word	0x50040000
 8004500:	48000800 	.word	0x48000800
 8004504:	200005f0 	.word	0x200005f0
 8004508:	40020008 	.word	0x40020008

0800450c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b09c      	sub	sp, #112	@ 0x70
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004514:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004518:	2200      	movs	r2, #0
 800451a:	601a      	str	r2, [r3, #0]
 800451c:	605a      	str	r2, [r3, #4]
 800451e:	609a      	str	r2, [r3, #8]
 8004520:	60da      	str	r2, [r3, #12]
 8004522:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004524:	f107 030c 	add.w	r3, r7, #12
 8004528:	2250      	movs	r2, #80	@ 0x50
 800452a:	2100      	movs	r1, #0
 800452c:	4618      	mov	r0, r3
 800452e:	f00e faf2 	bl	8012b16 <memset>
  if(hi2c->Instance==I2C1)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a1f      	ldr	r2, [pc, #124]	@ (80045b4 <HAL_I2C_MspInit+0xa8>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d136      	bne.n	80045aa <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800453c:	2304      	movs	r3, #4
 800453e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004540:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8004544:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004546:	f107 030c 	add.w	r3, r7, #12
 800454a:	4618      	mov	r0, r3
 800454c:	f007 f92b 	bl	800b7a6 <HAL_RCCEx_PeriphCLKConfig>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004556:	f7ff ff35 	bl	80043c4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800455a:	2002      	movs	r0, #2
 800455c:	f7ff ff38 	bl	80043d0 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004560:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004564:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004566:	2312      	movs	r3, #18
 8004568:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800456a:	2300      	movs	r3, #0
 800456c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800456e:	2300      	movs	r3, #0
 8004570:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004572:	2304      	movs	r3, #4
 8004574:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004576:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800457a:	4619      	mov	r1, r3
 800457c:	480e      	ldr	r0, [pc, #56]	@ (80045b8 <HAL_I2C_MspInit+0xac>)
 800457e:	f002 fb07 	bl	8006b90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004582:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8004586:	f7ff ff3c 	bl	8004402 <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800458a:	2200      	movs	r2, #0
 800458c:	2100      	movs	r1, #0
 800458e:	201e      	movs	r0, #30
 8004590:	f001 ffe7 	bl	8006562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004594:	201e      	movs	r0, #30
 8004596:	f001 fffe 	bl	8006596 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800459a:	2200      	movs	r2, #0
 800459c:	2100      	movs	r1, #0
 800459e:	201f      	movs	r0, #31
 80045a0:	f001 ffdf 	bl	8006562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80045a4:	201f      	movs	r0, #31
 80045a6:	f001 fff6 	bl	8006596 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80045aa:	bf00      	nop
 80045ac:	3770      	adds	r7, #112	@ 0x70
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	40005400 	.word	0x40005400
 80045b8:	48000400 	.word	0x48000400

080045bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045cc:	d10a      	bne.n	80045e4 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80045ce:	2001      	movs	r0, #1
 80045d0:	f7ff ff17 	bl	8004402 <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80045d4:	2200      	movs	r2, #0
 80045d6:	2100      	movs	r1, #0
 80045d8:	201c      	movs	r0, #28
 80045da:	f001 ffc2 	bl	8006562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80045de:	201c      	movs	r0, #28
 80045e0:	f001 ffd9 	bl	8006596 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80045e4:	bf00      	nop
 80045e6:	3708      	adds	r7, #8
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80045f0:	bf00      	nop
 80045f2:	e7fd      	b.n	80045f0 <NMI_Handler+0x4>

080045f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045f4:	b480      	push	{r7}
 80045f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045f8:	bf00      	nop
 80045fa:	e7fd      	b.n	80045f8 <HardFault_Handler+0x4>

080045fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004600:	bf00      	nop
 8004602:	e7fd      	b.n	8004600 <MemManage_Handler+0x4>

08004604 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004604:	b480      	push	{r7}
 8004606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004608:	bf00      	nop
 800460a:	e7fd      	b.n	8004608 <BusFault_Handler+0x4>

0800460c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004610:	bf00      	nop
 8004612:	e7fd      	b.n	8004610 <UsageFault_Handler+0x4>

08004614 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004614:	b480      	push	{r7}
 8004616:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004618:	bf00      	nop
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004622:	b480      	push	{r7}
 8004624:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004626:	bf00      	nop
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004634:	bf00      	nop
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004642:	f000 fbc7 	bl	8004dd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004646:	bf00      	nop
 8004648:	bd80      	pop	{r7, pc}

0800464a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 800464e:	2001      	movs	r0, #1
 8004650:	f002 fc40 	bl	8006ed4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004654:	bf00      	nop
 8004656:	bd80      	pop	{r7, pc}

08004658 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 800465c:	2002      	movs	r0, #2
 800465e:	f002 fc39 	bl	8006ed4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004662:	bf00      	nop
 8004664:	bd80      	pop	{r7, pc}

08004666 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 800466a:	2010      	movs	r0, #16
 800466c:	f002 fc32 	bl	8006ed4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004670:	bf00      	nop
 8004672:	bd80      	pop	{r7, pc}

08004674 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004678:	4802      	ldr	r0, [pc, #8]	@ (8004684 <DMA1_Channel1_IRQHandler+0x10>)
 800467a:	f002 f929 	bl	80068d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800467e:	bf00      	nop
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	200005f0 	.word	0x200005f0

08004688 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800468c:	4802      	ldr	r0, [pc, #8]	@ (8004698 <ADC1_IRQHandler+0x10>)
 800468e:	f000 ffa9 	bl	80055e4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8004692:	bf00      	nop
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	2000058c 	.word	0x2000058c

0800469c <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt.
  */
void USB_HP_IRQHandler(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80046a0:	4802      	ldr	r0, [pc, #8]	@ (80046ac <USB_HP_IRQHandler+0x10>)
 80046a2:	f004 f8e8 	bl	8008876 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 80046a6:	bf00      	nop
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	20001e84 	.word	0x20001e84

080046b0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80046b4:	4802      	ldr	r0, [pc, #8]	@ (80046c0 <USB_LP_IRQHandler+0x10>)
 80046b6:	f004 f8de 	bl	8008876 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80046ba:	bf00      	nop
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	20001e84 	.word	0x20001e84

080046c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80046c8:	4802      	ldr	r0, [pc, #8]	@ (80046d4 <TIM2_IRQHandler+0x10>)
 80046ca:	f007 fb99 	bl	800be00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80046ce:	bf00      	nop
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	200006a4 	.word	0x200006a4

080046d8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80046dc:	4802      	ldr	r0, [pc, #8]	@ (80046e8 <I2C1_EV_IRQHandler+0x10>)
 80046de:	f002 fec5 	bl	800746c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80046e2:	bf00      	nop
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	20000650 	.word	0x20000650

080046ec <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80046f0:	4802      	ldr	r0, [pc, #8]	@ (80046fc <I2C1_ER_IRQHandler+0x10>)
 80046f2:	f002 fed5 	bl	80074a0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80046f6:	bf00      	nop
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	20000650 	.word	0x20000650

08004700 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004700:	b480      	push	{r7}
 8004702:	af00      	add	r7, sp, #0
  return 1;
 8004704:	2301      	movs	r3, #1
}
 8004706:	4618      	mov	r0, r3
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <_kill>:

int _kill(int pid, int sig)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800471a:	f00e fa4f 	bl	8012bbc <__errno>
 800471e:	4603      	mov	r3, r0
 8004720:	2216      	movs	r2, #22
 8004722:	601a      	str	r2, [r3, #0]
  return -1;
 8004724:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004728:	4618      	mov	r0, r3
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <_exit>:

void _exit (int status)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004738:	f04f 31ff 	mov.w	r1, #4294967295
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f7ff ffe7 	bl	8004710 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004742:	bf00      	nop
 8004744:	e7fd      	b.n	8004742 <_exit+0x12>

08004746 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b086      	sub	sp, #24
 800474a:	af00      	add	r7, sp, #0
 800474c:	60f8      	str	r0, [r7, #12]
 800474e:	60b9      	str	r1, [r7, #8]
 8004750:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004752:	2300      	movs	r3, #0
 8004754:	617b      	str	r3, [r7, #20]
 8004756:	e00a      	b.n	800476e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004758:	f3af 8000 	nop.w
 800475c:	4601      	mov	r1, r0
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	1c5a      	adds	r2, r3, #1
 8004762:	60ba      	str	r2, [r7, #8]
 8004764:	b2ca      	uxtb	r2, r1
 8004766:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	3301      	adds	r3, #1
 800476c:	617b      	str	r3, [r7, #20]
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	429a      	cmp	r2, r3
 8004774:	dbf0      	blt.n	8004758 <_read+0x12>
  }

  return len;
 8004776:	687b      	ldr	r3, [r7, #4]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3718      	adds	r7, #24
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800478c:	2300      	movs	r3, #0
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	e009      	b.n	80047a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	1c5a      	adds	r2, r3, #1
 8004796:	60ba      	str	r2, [r7, #8]
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	4618      	mov	r0, r3
 800479c:	f000 fa74 	bl	8004c88 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	3301      	adds	r3, #1
 80047a4:	617b      	str	r3, [r7, #20]
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	dbf1      	blt.n	8004792 <_write+0x12>
  }
  return len;
 80047ae:	687b      	ldr	r3, [r7, #4]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3718      	adds	r7, #24
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <_close>:

int _close(int file)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80047c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80047e0:	605a      	str	r2, [r3, #4]
  return 0;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <_isatty>:

int _isatty(int file)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80047f8:	2301      	movs	r3, #1
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr

08004806 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004806:	b480      	push	{r7}
 8004808:	b085      	sub	sp, #20
 800480a:	af00      	add	r7, sp, #0
 800480c:	60f8      	str	r0, [r7, #12]
 800480e:	60b9      	str	r1, [r7, #8]
 8004810:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004828:	4a14      	ldr	r2, [pc, #80]	@ (800487c <_sbrk+0x5c>)
 800482a:	4b15      	ldr	r3, [pc, #84]	@ (8004880 <_sbrk+0x60>)
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004834:	4b13      	ldr	r3, [pc, #76]	@ (8004884 <_sbrk+0x64>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d102      	bne.n	8004842 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800483c:	4b11      	ldr	r3, [pc, #68]	@ (8004884 <_sbrk+0x64>)
 800483e:	4a12      	ldr	r2, [pc, #72]	@ (8004888 <_sbrk+0x68>)
 8004840:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004842:	4b10      	ldr	r3, [pc, #64]	@ (8004884 <_sbrk+0x64>)
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4413      	add	r3, r2
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	429a      	cmp	r2, r3
 800484e:	d207      	bcs.n	8004860 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004850:	f00e f9b4 	bl	8012bbc <__errno>
 8004854:	4603      	mov	r3, r0
 8004856:	220c      	movs	r2, #12
 8004858:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800485a:	f04f 33ff 	mov.w	r3, #4294967295
 800485e:	e009      	b.n	8004874 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004860:	4b08      	ldr	r3, [pc, #32]	@ (8004884 <_sbrk+0x64>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004866:	4b07      	ldr	r3, [pc, #28]	@ (8004884 <_sbrk+0x64>)
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4413      	add	r3, r2
 800486e:	4a05      	ldr	r2, [pc, #20]	@ (8004884 <_sbrk+0x64>)
 8004870:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004872:	68fb      	ldr	r3, [r7, #12]
}
 8004874:	4618      	mov	r0, r3
 8004876:	3718      	adds	r7, #24
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	20030000 	.word	0x20030000
 8004880:	00000400 	.word	0x00000400
 8004884:	20000904 	.word	0x20000904
 8004888:	200024d0 	.word	0x200024d0

0800488c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8004890:	4b24      	ldr	r3, [pc, #144]	@ (8004924 <SystemInit+0x98>)
 8004892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004896:	4a23      	ldr	r2, [pc, #140]	@ (8004924 <SystemInit+0x98>)
 8004898:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800489c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80048a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80048aa:	f043 0301 	orr.w	r3, r3, #1
 80048ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80048b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048b4:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80048b8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80048ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80048c4:	4b18      	ldr	r3, [pc, #96]	@ (8004928 <SystemInit+0x9c>)
 80048c6:	4013      	ands	r3, r2
 80048c8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80048ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80048d6:	f023 0305 	bic.w	r3, r3, #5
 80048da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80048de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80048ea:	f023 0301 	bic.w	r3, r3, #1
 80048ee:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80048f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048f6:	4a0d      	ldr	r2, [pc, #52]	@ (800492c <SystemInit+0xa0>)
 80048f8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80048fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048fe:	4a0b      	ldr	r2, [pc, #44]	@ (800492c <SystemInit+0xa0>)
 8004900:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004902:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800490c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004910:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004912:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004916:	2200      	movs	r2, #0
 8004918:	619a      	str	r2, [r3, #24]
}
 800491a:	bf00      	nop
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr
 8004924:	e000ed00 	.word	0xe000ed00
 8004928:	faf6fefb 	.word	0xfaf6fefb
 800492c:	22041000 	.word	0x22041000

08004930 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8004930:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004932:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004934:	3304      	adds	r3, #4

08004936 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004936:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004938:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800493a:	d3f9      	bcc.n	8004930 <CopyDataInit>
  bx lr
 800493c:	4770      	bx	lr

0800493e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800493e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8004940:	3004      	adds	r0, #4

08004942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8004942:	4288      	cmp	r0, r1
  bcc FillZerobss
 8004944:	d3fb      	bcc.n	800493e <FillZerobss>
  bx lr
 8004946:	4770      	bx	lr

08004948 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004948:	480c      	ldr	r0, [pc, #48]	@ (800497c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800494a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800494c:	f7ff ff9e 	bl	800488c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8004950:	480b      	ldr	r0, [pc, #44]	@ (8004980 <LoopForever+0x6>)
 8004952:	490c      	ldr	r1, [pc, #48]	@ (8004984 <LoopForever+0xa>)
 8004954:	4a0c      	ldr	r2, [pc, #48]	@ (8004988 <LoopForever+0xe>)
 8004956:	2300      	movs	r3, #0
 8004958:	f7ff ffed 	bl	8004936 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800495c:	480b      	ldr	r0, [pc, #44]	@ (800498c <LoopForever+0x12>)
 800495e:	490c      	ldr	r1, [pc, #48]	@ (8004990 <LoopForever+0x16>)
 8004960:	4a0c      	ldr	r2, [pc, #48]	@ (8004994 <LoopForever+0x1a>)
 8004962:	2300      	movs	r3, #0
 8004964:	f7ff ffe7 	bl	8004936 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8004968:	480b      	ldr	r0, [pc, #44]	@ (8004998 <LoopForever+0x1e>)
 800496a:	490c      	ldr	r1, [pc, #48]	@ (800499c <LoopForever+0x22>)
 800496c:	2300      	movs	r3, #0
 800496e:	f7ff ffe8 	bl	8004942 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004972:	f00e f929 	bl	8012bc8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004976:	f7ff fa63 	bl	8003e40 <main>

0800497a <LoopForever>:

LoopForever:
  b LoopForever
 800497a:	e7fe      	b.n	800497a <LoopForever>
  ldr   r0, =_estack
 800497c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8004980:	20000008 	.word	0x20000008
 8004984:	200002f0 	.word	0x200002f0
 8004988:	08014ef0 	.word	0x08014ef0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800498c:	20030000 	.word	0x20030000
 8004990:	20030000 	.word	0x20030000
 8004994:	080151d8 	.word	0x080151d8
  INIT_BSS _sbss, _ebss
 8004998:	200002f0 	.word	0x200002f0
 800499c:	200024cc 	.word	0x200024cc

080049a0 <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80049a0:	e7fe      	b.n	80049a0 <AES1_IRQHandler>

080049a2 <LL_AHB2_GRP1_EnableClock>:
{
 80049a2:	b480      	push	{r7}
 80049a4:	b085      	sub	sp, #20
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80049aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80049b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80049ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4013      	ands	r3, r2
 80049c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80049c6:	68fb      	ldr	r3, [r7, #12]
}
 80049c8:	bf00      	nop
 80049ca:	3714      	adds	r7, #20
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80049dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049e0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80049e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80049ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049f0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4013      	ands	r3, r2
 80049f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80049f8:	68fb      	ldr	r3, [r7, #12]
}
 80049fa:	bf00      	nop
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
	...

08004a08 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b088      	sub	sp, #32
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	4603      	mov	r3, r0
 8004a10:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8004a12:	f107 030c 	add.w	r3, r7, #12
 8004a16:	2200      	movs	r2, #0
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	605a      	str	r2, [r3, #4]
 8004a1c:	609a      	str	r2, [r3, #8]
 8004a1e:	60da      	str	r2, [r3, #12]
 8004a20:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8004a22:	2002      	movs	r0, #2
 8004a24:	f7ff ffbd 	bl	80049a2 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8004a28:	79fb      	ldrb	r3, [r7, #7]
 8004a2a:	4a12      	ldr	r2, [pc, #72]	@ (8004a74 <BSP_LED_Init+0x6c>)
 8004a2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a30:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a32:	2301      	movs	r3, #1
 8004a34:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8004a36:	2300      	movs	r3, #0
 8004a38:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8004a3e:	79fb      	ldrb	r3, [r7, #7]
 8004a40:	4a0d      	ldr	r2, [pc, #52]	@ (8004a78 <BSP_LED_Init+0x70>)
 8004a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a46:	f107 020c 	add.w	r2, r7, #12
 8004a4a:	4611      	mov	r1, r2
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f002 f89f 	bl	8006b90 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8004a52:	79fb      	ldrb	r3, [r7, #7]
 8004a54:	4a08      	ldr	r2, [pc, #32]	@ (8004a78 <BSP_LED_Init+0x70>)
 8004a56:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004a5a:	79fb      	ldrb	r3, [r7, #7]
 8004a5c:	4a05      	ldr	r2, [pc, #20]	@ (8004a74 <BSP_LED_Init+0x6c>)
 8004a5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a62:	2200      	movs	r2, #0
 8004a64:	4619      	mov	r1, r3
 8004a66:	f002 fa03 	bl	8006e70 <HAL_GPIO_WritePin>
}
 8004a6a:	bf00      	nop
 8004a6c:	3720      	adds	r7, #32
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	08014b40 	.word	0x08014b40
 8004a78:	20000010 	.word	0x20000010

08004a7c <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	4603      	mov	r3, r0
 8004a84:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8004a86:	79fb      	ldrb	r3, [r7, #7]
 8004a88:	4a07      	ldr	r2, [pc, #28]	@ (8004aa8 <BSP_LED_On+0x2c>)
 8004a8a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004a8e:	79fb      	ldrb	r3, [r7, #7]
 8004a90:	4a06      	ldr	r2, [pc, #24]	@ (8004aac <BSP_LED_On+0x30>)
 8004a92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a96:	2201      	movs	r2, #1
 8004a98:	4619      	mov	r1, r3
 8004a9a:	f002 f9e9 	bl	8006e70 <HAL_GPIO_WritePin>
}
 8004a9e:	bf00      	nop
 8004aa0:	3708      	adds	r7, #8
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	20000010 	.word	0x20000010
 8004aac:	08014b40 	.word	0x08014b40

08004ab0 <BSP_LED_Toggle>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8004aba:	79fb      	ldrb	r3, [r7, #7]
 8004abc:	4a07      	ldr	r2, [pc, #28]	@ (8004adc <BSP_LED_Toggle+0x2c>)
 8004abe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004ac2:	79fb      	ldrb	r3, [r7, #7]
 8004ac4:	4906      	ldr	r1, [pc, #24]	@ (8004ae0 <BSP_LED_Toggle+0x30>)
 8004ac6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004aca:	4619      	mov	r1, r3
 8004acc:	4610      	mov	r0, r2
 8004ace:	f002 f9e7 	bl	8006ea0 <HAL_GPIO_TogglePin>
}
 8004ad2:	bf00      	nop
 8004ad4:	3708      	adds	r7, #8
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	20000010 	.word	0x20000010
 8004ae0:	08014b40 	.word	0x08014b40

08004ae4 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b088      	sub	sp, #32
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	4603      	mov	r3, r0
 8004aec:	460a      	mov	r2, r1
 8004aee:	71fb      	strb	r3, [r7, #7]
 8004af0:	4613      	mov	r3, r2
 8004af2:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8004af4:	f107 030c 	add.w	r3, r7, #12
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	605a      	str	r2, [r3, #4]
 8004afe:	609a      	str	r2, [r3, #8]
 8004b00:	60da      	str	r2, [r3, #12]
 8004b02:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8004b04:	79fb      	ldrb	r3, [r7, #7]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d103      	bne.n	8004b12 <BSP_PB_Init+0x2e>
 8004b0a:	2004      	movs	r0, #4
 8004b0c:	f7ff ff49 	bl	80049a2 <LL_AHB2_GRP1_EnableClock>
 8004b10:	e00c      	b.n	8004b2c <BSP_PB_Init+0x48>
 8004b12:	79fb      	ldrb	r3, [r7, #7]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d103      	bne.n	8004b20 <BSP_PB_Init+0x3c>
 8004b18:	2008      	movs	r0, #8
 8004b1a:	f7ff ff42 	bl	80049a2 <LL_AHB2_GRP1_EnableClock>
 8004b1e:	e005      	b.n	8004b2c <BSP_PB_Init+0x48>
 8004b20:	79fb      	ldrb	r3, [r7, #7]
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d102      	bne.n	8004b2c <BSP_PB_Init+0x48>
 8004b26:	2008      	movs	r0, #8
 8004b28:	f7ff ff3b 	bl	80049a2 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8004b2c:	79bb      	ldrb	r3, [r7, #6]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d117      	bne.n	8004b62 <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8004b32:	79fb      	ldrb	r3, [r7, #7]
 8004b34:	4a20      	ldr	r2, [pc, #128]	@ (8004bb8 <BSP_PB_Init+0xd4>)
 8004b36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b3a:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8004b40:	2301      	movs	r3, #1
 8004b42:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004b44:	2302      	movs	r3, #2
 8004b46:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8004b48:	79fb      	ldrb	r3, [r7, #7]
 8004b4a:	4a1c      	ldr	r2, [pc, #112]	@ (8004bbc <BSP_PB_Init+0xd8>)
 8004b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b50:	f107 020c 	add.w	r2, r7, #12
 8004b54:	4611      	mov	r1, r2
 8004b56:	4618      	mov	r0, r3
 8004b58:	f002 f81a 	bl	8006b90 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8004b5c:	2001      	movs	r0, #1
 8004b5e:	f000 f965 	bl	8004e2c <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8004b62:	79bb      	ldrb	r3, [r7, #6]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d123      	bne.n	8004bb0 <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8004b68:	79fb      	ldrb	r3, [r7, #7]
 8004b6a:	4a13      	ldr	r2, [pc, #76]	@ (8004bb8 <BSP_PB_Init+0xd4>)
 8004b6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b70:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8004b72:	2301      	movs	r3, #1
 8004b74:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8004b76:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004b7a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8004b7c:	79fb      	ldrb	r3, [r7, #7]
 8004b7e:	4a0f      	ldr	r2, [pc, #60]	@ (8004bbc <BSP_PB_Init+0xd8>)
 8004b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b84:	f107 020c 	add.w	r2, r7, #12
 8004b88:	4611      	mov	r1, r2
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f002 f800 	bl	8006b90 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8004b90:	79fb      	ldrb	r3, [r7, #7]
 8004b92:	4a0b      	ldr	r2, [pc, #44]	@ (8004bc0 <BSP_PB_Init+0xdc>)
 8004b94:	5cd3      	ldrb	r3, [r2, r3]
 8004b96:	b25b      	sxtb	r3, r3
 8004b98:	2200      	movs	r2, #0
 8004b9a:	210f      	movs	r1, #15
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f001 fce0 	bl	8006562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8004ba2:	79fb      	ldrb	r3, [r7, #7]
 8004ba4:	4a06      	ldr	r2, [pc, #24]	@ (8004bc0 <BSP_PB_Init+0xdc>)
 8004ba6:	5cd3      	ldrb	r3, [r2, r3]
 8004ba8:	b25b      	sxtb	r3, r3
 8004baa:	4618      	mov	r0, r3
 8004bac:	f001 fcf3 	bl	8006596 <HAL_NVIC_EnableIRQ>
  }
}
 8004bb0:	bf00      	nop
 8004bb2:	3720      	adds	r7, #32
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	08014b48 	.word	0x08014b48
 8004bbc:	2000001c 	.word	0x2000001c
 8004bc0:	08014b50 	.word	0x08014b50

08004bc4 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	4603      	mov	r3, r0
 8004bcc:	6039      	str	r1, [r7, #0]
 8004bce:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8004bd4:	79fb      	ldrb	r3, [r7, #7]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d903      	bls.n	8004be2 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004bda:	f06f 0301 	mvn.w	r3, #1
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	e018      	b.n	8004c14 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8004be2:	79fb      	ldrb	r3, [r7, #7]
 8004be4:	2294      	movs	r2, #148	@ 0x94
 8004be6:	fb02 f303 	mul.w	r3, r2, r3
 8004bea:	4a0d      	ldr	r2, [pc, #52]	@ (8004c20 <BSP_COM_Init+0x5c>)
 8004bec:	4413      	add	r3, r2
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 f866 	bl	8004cc0 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8004bf4:	79fb      	ldrb	r3, [r7, #7]
 8004bf6:	2294      	movs	r2, #148	@ 0x94
 8004bf8:	fb02 f303 	mul.w	r3, r2, r3
 8004bfc:	4a08      	ldr	r2, [pc, #32]	@ (8004c20 <BSP_COM_Init+0x5c>)
 8004bfe:	4413      	add	r3, r2
 8004c00:	6839      	ldr	r1, [r7, #0]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f000 f80e 	bl	8004c24 <MX_LPUART1_Init>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d002      	beq.n	8004c14 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8004c0e:	f06f 0303 	mvn.w	r3, #3
 8004c12:	e000      	b.n	8004c16 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8004c14:	68fb      	ldr	r3, [r7, #12]
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	20000908 	.word	0x20000908

08004c24 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8004c2e:	4b15      	ldr	r3, [pc, #84]	@ (8004c84 <MX_LPUART1_Init+0x60>)
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	220c      	movs	r2, #12
 8004c42:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	895b      	ldrh	r3, [r3, #10]
 8004c48:	461a      	mov	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	891b      	ldrh	r3, [r3, #8]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	899b      	ldrh	r3, [r3, #12]
 8004c64:	461a      	mov	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004c70:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f007 fc66 	bl	800c544 <HAL_UART_Init>
 8004c78:	4603      	mov	r3, r0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3708      	adds	r7, #8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	20000028 	.word	0x20000028

08004c88 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8004c90:	4b09      	ldr	r3, [pc, #36]	@ (8004cb8 <__io_putchar+0x30>)
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	461a      	mov	r2, r3
 8004c96:	2394      	movs	r3, #148	@ 0x94
 8004c98:	fb02 f303 	mul.w	r3, r2, r3
 8004c9c:	4a07      	ldr	r2, [pc, #28]	@ (8004cbc <__io_putchar+0x34>)
 8004c9e:	1898      	adds	r0, r3, r2
 8004ca0:	1d39      	adds	r1, r7, #4
 8004ca2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f007 fca6 	bl	800c5f8 <HAL_UART_Transmit>
  return ch;
 8004cac:	687b      	ldr	r3, [r7, #4]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3708      	adds	r7, #8
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	2000099c 	.word	0x2000099c
 8004cbc:	20000908 	.word	0x20000908

08004cc0 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b088      	sub	sp, #32
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8004cc8:	2002      	movs	r0, #2
 8004cca:	f7ff fe6a 	bl	80049a2 <LL_AHB2_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
 8004cce:	2002      	movs	r0, #2
 8004cd0:	f7ff fe67 	bl	80049a2 <LL_AHB2_GRP1_EnableClock>

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8004cd4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004cd8:	f7ff fe7c 	bl	80049d4 <LL_APB2_GRP1_EnableClock>

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8004cdc:	2340      	movs	r3, #64	@ 0x40
 8004cde:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8004cec:	2307      	movs	r3, #7
 8004cee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8004cf0:	f107 030c 	add.w	r3, r7, #12
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4809      	ldr	r0, [pc, #36]	@ (8004d1c <COM1_MspInit+0x5c>)
 8004cf8:	f001 ff4a 	bl	8006b90 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8004cfc:	2380      	movs	r3, #128	@ 0x80
 8004cfe:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004d00:	2302      	movs	r3, #2
 8004d02:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8004d04:	2307      	movs	r3, #7
 8004d06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8004d08:	f107 030c 	add.w	r3, r7, #12
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	4803      	ldr	r0, [pc, #12]	@ (8004d1c <COM1_MspInit+0x5c>)
 8004d10:	f001 ff3e 	bl	8006b90 <HAL_GPIO_Init>
}
 8004d14:	bf00      	nop
 8004d16:	3720      	adds	r7, #32
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	48000400 	.word	0x48000400

08004d20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004d26:	2300      	movs	r3, #0
 8004d28:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8004d5c <HAL_Init+0x3c>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a0b      	ldr	r2, [pc, #44]	@ (8004d5c <HAL_Init+0x3c>)
 8004d30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d34:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d36:	2003      	movs	r0, #3
 8004d38:	f001 fc08 	bl	800654c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004d3c:	2000      	movs	r0, #0
 8004d3e:	f000 f80f 	bl	8004d60 <HAL_InitTick>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d002      	beq.n	8004d4e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	71fb      	strb	r3, [r7, #7]
 8004d4c:	e001      	b.n	8004d52 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004d4e:	f7ff fb71 	bl	8004434 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004d52:	79fb      	ldrb	r3, [r7, #7]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	58004000 	.word	0x58004000

08004d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8004d6c:	4b17      	ldr	r3, [pc, #92]	@ (8004dcc <HAL_InitTick+0x6c>)
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d024      	beq.n	8004dbe <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004d74:	f006 fa86 	bl	800b284 <HAL_RCC_GetHCLKFreq>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	4b14      	ldr	r3, [pc, #80]	@ (8004dcc <HAL_InitTick+0x6c>)
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	4619      	mov	r1, r3
 8004d80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004d84:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f001 fc10 	bl	80065b2 <HAL_SYSTICK_Config>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10f      	bne.n	8004db8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b0f      	cmp	r3, #15
 8004d9c:	d809      	bhi.n	8004db2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d9e:	2200      	movs	r2, #0
 8004da0:	6879      	ldr	r1, [r7, #4]
 8004da2:	f04f 30ff 	mov.w	r0, #4294967295
 8004da6:	f001 fbdc 	bl	8006562 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004daa:	4a09      	ldr	r2, [pc, #36]	@ (8004dd0 <HAL_InitTick+0x70>)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6013      	str	r3, [r2, #0]
 8004db0:	e007      	b.n	8004dc2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	73fb      	strb	r3, [r7, #15]
 8004db6:	e004      	b.n	8004dc2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	73fb      	strb	r3, [r7, #15]
 8004dbc:	e001      	b.n	8004dc2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3710      	adds	r7, #16
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	20000030 	.word	0x20000030
 8004dd0:	2000002c 	.word	0x2000002c

08004dd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004dd8:	4b06      	ldr	r3, [pc, #24]	@ (8004df4 <HAL_IncTick+0x20>)
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	461a      	mov	r2, r3
 8004dde:	4b06      	ldr	r3, [pc, #24]	@ (8004df8 <HAL_IncTick+0x24>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4413      	add	r3, r2
 8004de4:	4a04      	ldr	r2, [pc, #16]	@ (8004df8 <HAL_IncTick+0x24>)
 8004de6:	6013      	str	r3, [r2, #0]
}
 8004de8:	bf00      	nop
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	20000030 	.word	0x20000030
 8004df8:	200009a0 	.word	0x200009a0

08004dfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8004e00:	4b03      	ldr	r3, [pc, #12]	@ (8004e10 <HAL_GetTick+0x14>)
 8004e02:	681b      	ldr	r3, [r3, #0]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	200009a0 	.word	0x200009a0

08004e14 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004e14:	b480      	push	{r7}
 8004e16:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8004e18:	4b03      	ldr	r3, [pc, #12]	@ (8004e28 <HAL_GetTickPrio+0x14>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	2000002c 	.word	0x2000002c

08004e2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e34:	f7ff ffe2 	bl	8004dfc <HAL_GetTick>
 8004e38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e44:	d005      	beq.n	8004e52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e46:	4b0a      	ldr	r3, [pc, #40]	@ (8004e70 <HAL_Delay+0x44>)
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4413      	add	r3, r2
 8004e50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004e52:	bf00      	nop
 8004e54:	f7ff ffd2 	bl	8004dfc <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d8f7      	bhi.n	8004e54 <HAL_Delay+0x28>
  {
  }
}
 8004e64:	bf00      	nop
 8004e66:	bf00      	nop
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	20000030 	.word	0x20000030

08004e74 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	431a      	orrs	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8004e8e:	bf00      	nop
 8004e90:	370c      	adds	r7, #12
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b083      	sub	sp, #12
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
 8004ea2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	609a      	str	r2, [r3, #8]
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
 8004ee8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	3360      	adds	r3, #96	@ 0x60
 8004eee:	461a      	mov	r2, r3
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	4b08      	ldr	r3, [pc, #32]	@ (8004f20 <LL_ADC_SetOffset+0x44>)
 8004efe:	4013      	ands	r3, r2
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004f14:	bf00      	nop
 8004f16:	371c      	adds	r7, #28
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	03fff000 	.word	0x03fff000

08004f24 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	3360      	adds	r3, #96	@ 0x60
 8004f32:	461a      	mov	r2, r3
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3714      	adds	r7, #20
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b087      	sub	sp, #28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	3360      	adds	r3, #96	@ 0x60
 8004f60:	461a      	mov	r2, r3
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4413      	add	r3, r2
 8004f68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	431a      	orrs	r2, r3
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004f7a:	bf00      	nop
 8004f7c:	371c      	adds	r7, #28
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b083      	sub	sp, #12
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e000      	b.n	8004fa0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004f9e:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b087      	sub	sp, #28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	3330      	adds	r3, #48	@ 0x30
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	0a1b      	lsrs	r3, r3, #8
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	f003 030c 	and.w	r3, r3, #12
 8004fc8:	4413      	add	r3, r2
 8004fca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	f003 031f 	and.w	r3, r3, #31
 8004fd6:	211f      	movs	r1, #31
 8004fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004fdc:	43db      	mvns	r3, r3
 8004fde:	401a      	ands	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	0e9b      	lsrs	r3, r3, #26
 8004fe4:	f003 011f 	and.w	r1, r3, #31
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	f003 031f 	and.w	r3, r3, #31
 8004fee:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8004ff8:	bf00      	nop
 8004ffa:	371c      	adds	r7, #28
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	f003 0303 	and.w	r3, r3, #3
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8005014:	4618      	mov	r0, r3
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800502c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d101      	bne.n	8005038 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8005034:	2301      	movs	r3, #1
 8005036:	e000      	b.n	800503a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005046:	b480      	push	{r7}
 8005048:	b087      	sub	sp, #28
 800504a:	af00      	add	r7, sp, #0
 800504c:	60f8      	str	r0, [r7, #12]
 800504e:	60b9      	str	r1, [r7, #8]
 8005050:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	3314      	adds	r3, #20
 8005056:	461a      	mov	r2, r3
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	0e5b      	lsrs	r3, r3, #25
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	f003 0304 	and.w	r3, r3, #4
 8005062:	4413      	add	r3, r2
 8005064:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	0d1b      	lsrs	r3, r3, #20
 800506e:	f003 031f 	and.w	r3, r3, #31
 8005072:	2107      	movs	r1, #7
 8005074:	fa01 f303 	lsl.w	r3, r1, r3
 8005078:	43db      	mvns	r3, r3
 800507a:	401a      	ands	r2, r3
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	0d1b      	lsrs	r3, r3, #20
 8005080:	f003 031f 	and.w	r3, r3, #31
 8005084:	6879      	ldr	r1, [r7, #4]
 8005086:	fa01 f303 	lsl.w	r3, r1, r3
 800508a:	431a      	orrs	r2, r3
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8005090:	bf00      	nop
 8005092:	371c      	adds	r7, #28
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050b4:	43db      	mvns	r3, r3
 80050b6:	401a      	ands	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f003 0318 	and.w	r3, r3, #24
 80050be:	4908      	ldr	r1, [pc, #32]	@ (80050e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80050c0:	40d9      	lsrs	r1, r3
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	400b      	ands	r3, r1
 80050c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050ca:	431a      	orrs	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80050d2:	bf00      	nop
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	0007ffff 	.word	0x0007ffff

080050e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80050f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	6093      	str	r3, [r2, #8]
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005118:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800511c:	d101      	bne.n	8005122 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800511e:	2301      	movs	r3, #1
 8005120:	e000      	b.n	8005124 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8005140:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005144:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005168:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800516c:	d101      	bne.n	8005172 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800516e:	2301      	movs	r3, #1
 8005170:	e000      	b.n	8005174 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005190:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005194:	f043 0201 	orr.w	r2, r3, #1
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f003 0301 	and.w	r3, r3, #1
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d101      	bne.n	80051c0 <LL_ADC_IsEnabled+0x18>
 80051bc:	2301      	movs	r3, #1
 80051be:	e000      	b.n	80051c2 <LL_ADC_IsEnabled+0x1a>
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b083      	sub	sp, #12
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80051de:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80051e2:	f043 0204 	orr.w	r2, r3, #4
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80051ea:	bf00      	nop
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b083      	sub	sp, #12
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f003 0304 	and.w	r3, r3, #4
 8005206:	2b04      	cmp	r3, #4
 8005208:	d101      	bne.n	800520e <LL_ADC_REG_IsConversionOngoing+0x18>
 800520a:	2301      	movs	r3, #1
 800520c:	e000      	b.n	8005210 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f003 0308 	and.w	r3, r3, #8
 800522c:	2b08      	cmp	r3, #8
 800522e:	d101      	bne.n	8005234 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005230:	2301      	movs	r3, #1
 8005232:	e000      	b.n	8005236 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
	...

08005244 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b088      	sub	sp, #32
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800524c:	2300      	movs	r3, #0
 800524e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8005250:	2300      	movs	r3, #0
 8005252:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005254:	2300      	movs	r3, #0
 8005256:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e12e      	b.n	80054c0 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800526c:	2b00      	cmp	r3, #0
 800526e:	d109      	bne.n	8005284 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f7ff f8e7 	bl	8004444 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4618      	mov	r0, r3
 800528a:	f7ff ff3d 	bl	8005108 <LL_ADC_IsDeepPowerDownEnabled>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d004      	beq.n	800529e <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4618      	mov	r0, r3
 800529a:	f7ff ff23 	bl	80050e4 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7ff ff58 	bl	8005158 <LL_ADC_IsInternalRegulatorEnabled>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d115      	bne.n	80052da <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7ff ff3c 	bl	8005130 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80052b8:	4b83      	ldr	r3, [pc, #524]	@ (80054c8 <HAL_ADC_Init+0x284>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	099b      	lsrs	r3, r3, #6
 80052be:	4a83      	ldr	r2, [pc, #524]	@ (80054cc <HAL_ADC_Init+0x288>)
 80052c0:	fba2 2303 	umull	r2, r3, r2, r3
 80052c4:	099b      	lsrs	r3, r3, #6
 80052c6:	3301      	adds	r3, #1
 80052c8:	005b      	lsls	r3, r3, #1
 80052ca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80052cc:	e002      	b.n	80052d4 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	3b01      	subs	r3, #1
 80052d2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1f9      	bne.n	80052ce <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4618      	mov	r0, r3
 80052e0:	f7ff ff3a 	bl	8005158 <LL_ADC_IsInternalRegulatorEnabled>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10d      	bne.n	8005306 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ee:	f043 0210 	orr.w	r2, r3, #16
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052fa:	f043 0201 	orr.w	r2, r3, #1
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4618      	mov	r0, r3
 800530c:	f7ff ff73 	bl	80051f6 <LL_ADC_REG_IsConversionOngoing>
 8005310:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005316:	f003 0310 	and.w	r3, r3, #16
 800531a:	2b00      	cmp	r3, #0
 800531c:	f040 80c7 	bne.w	80054ae <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	2b00      	cmp	r3, #0
 8005324:	f040 80c3 	bne.w	80054ae <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800532c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005330:	f043 0202 	orr.w	r2, r3, #2
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4618      	mov	r0, r3
 800533e:	f7ff ff33 	bl	80051a8 <LL_ADC_IsEnabled>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d10b      	bne.n	8005360 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005348:	4861      	ldr	r0, [pc, #388]	@ (80054d0 <HAL_ADC_Init+0x28c>)
 800534a:	f7ff ff2d 	bl	80051a8 <LL_ADC_IsEnabled>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d105      	bne.n	8005360 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	4619      	mov	r1, r3
 800535a:	485e      	ldr	r0, [pc, #376]	@ (80054d4 <HAL_ADC_Init+0x290>)
 800535c:	f7ff fd8a 	bl	8004e74 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	7e5b      	ldrb	r3, [r3, #25]
 8005364:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800536a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005370:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005376:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800537e:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8005380:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	4313      	orrs	r3, r2
 8005386:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d106      	bne.n	80053a0 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005396:	3b01      	subs	r3, #1
 8005398:	045b      	lsls	r3, r3, #17
 800539a:	69ba      	ldr	r2, [r7, #24]
 800539c:	4313      	orrs	r3, r2
 800539e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d009      	beq.n	80053bc <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ac:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80053b6:	69ba      	ldr	r2, [r7, #24]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68da      	ldr	r2, [r3, #12]
 80053c2:	4b45      	ldr	r3, [pc, #276]	@ (80054d8 <HAL_ADC_Init+0x294>)
 80053c4:	4013      	ands	r3, r2
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	6812      	ldr	r2, [r2, #0]
 80053ca:	69b9      	ldr	r1, [r7, #24]
 80053cc:	430b      	orrs	r3, r1
 80053ce:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7ff ff0e 	bl	80051f6 <LL_ADC_REG_IsConversionOngoing>
 80053da:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7ff ff1b 	bl	800521c <LL_ADC_INJ_IsConversionOngoing>
 80053e6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d13d      	bne.n	800546a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d13a      	bne.n	800546a <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80053f8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005400:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005402:	4313      	orrs	r3, r2
 8005404:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005410:	f023 0302 	bic.w	r3, r3, #2
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	6812      	ldr	r2, [r2, #0]
 8005418:	69b9      	ldr	r1, [r7, #24]
 800541a:	430b      	orrs	r3, r1
 800541c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005424:	2b01      	cmp	r3, #1
 8005426:	d118      	bne.n	800545a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005432:	f023 0304 	bic.w	r3, r3, #4
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800543e:	4311      	orrs	r1, r2
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005444:	4311      	orrs	r1, r2
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800544a:	430a      	orrs	r2, r1
 800544c:	431a      	orrs	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f042 0201 	orr.w	r2, r2, #1
 8005456:	611a      	str	r2, [r3, #16]
 8005458:	e007      	b.n	800546a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	691a      	ldr	r2, [r3, #16]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f022 0201 	bic.w	r2, r2, #1
 8005468:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d10c      	bne.n	800548c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005478:	f023 010f 	bic.w	r1, r3, #15
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	1e5a      	subs	r2, r3, #1
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	430a      	orrs	r2, r1
 8005488:	631a      	str	r2, [r3, #48]	@ 0x30
 800548a:	e007      	b.n	800549c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 020f 	bic.w	r2, r2, #15
 800549a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054a0:	f023 0303 	bic.w	r3, r3, #3
 80054a4:	f043 0201 	orr.w	r2, r3, #1
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	655a      	str	r2, [r3, #84]	@ 0x54
 80054ac:	e007      	b.n	80054be <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054b2:	f043 0210 	orr.w	r2, r3, #16
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80054be:	7ffb      	ldrb	r3, [r7, #31]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3720      	adds	r7, #32
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	2000000c 	.word	0x2000000c
 80054cc:	053e2d63 	.word	0x053e2d63
 80054d0:	50040000 	.word	0x50040000
 80054d4:	50040300 	.word	0x50040300
 80054d8:	fff0c007 	.word	0xfff0c007

080054dc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7ff fe82 	bl	80051f6 <LL_ADC_REG_IsConversionOngoing>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d167      	bne.n	80055c8 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d101      	bne.n	8005506 <HAL_ADC_Start_DMA+0x2a>
 8005502:	2302      	movs	r3, #2
 8005504:	e063      	b.n	80055ce <HAL_ADC_Start_DMA+0xf2>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	f000 fe0c 	bl	800612c <ADC_Enable>
 8005514:	4603      	mov	r3, r0
 8005516:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005518:	7dfb      	ldrb	r3, [r7, #23]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d14f      	bne.n	80055be <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005522:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005526:	f023 0301 	bic.w	r3, r3, #1
 800552a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005536:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d006      	beq.n	800554c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005542:	f023 0206 	bic.w	r2, r3, #6
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	659a      	str	r2, [r3, #88]	@ 0x58
 800554a:	e002      	b.n	8005552 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005556:	4a20      	ldr	r2, [pc, #128]	@ (80055d8 <HAL_ADC_Start_DMA+0xfc>)
 8005558:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800555e:	4a1f      	ldr	r2, [pc, #124]	@ (80055dc <HAL_ADC_Start_DMA+0x100>)
 8005560:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005566:	4a1e      	ldr	r2, [pc, #120]	@ (80055e0 <HAL_ADC_Start_DMA+0x104>)
 8005568:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	221c      	movs	r2, #28
 8005570:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f042 0210 	orr.w	r2, r2, #16
 8005588:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68da      	ldr	r2, [r3, #12]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f042 0201 	orr.w	r2, r2, #1
 8005598:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	3340      	adds	r3, #64	@ 0x40
 80055a4:	4619      	mov	r1, r3
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f001 f8b7 	bl	800671c <HAL_DMA_Start_IT>
 80055ae:	4603      	mov	r3, r0
 80055b0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7ff fe09 	bl	80051ce <LL_ADC_REG_StartConversion>
 80055bc:	e006      	b.n	80055cc <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80055c6:	e001      	b.n	80055cc <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80055c8:	2302      	movs	r3, #2
 80055ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80055cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3718      	adds	r7, #24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	08006221 	.word	0x08006221
 80055dc:	080062f9 	.word	0x080062f9
 80055e0:	08006315 	.word	0x08006315

080055e4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b088      	sub	sp, #32
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80055ec:	2300      	movs	r3, #0
 80055ee:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d017      	beq.n	800563a <HAL_ADC_IRQHandler+0x56>
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b00      	cmp	r3, #0
 8005612:	d012      	beq.n	800563a <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005618:	f003 0310 	and.w	r3, r3, #16
 800561c:	2b00      	cmp	r3, #0
 800561e:	d105      	bne.n	800562c <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005624:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 feb3 	bl	8006398 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2202      	movs	r2, #2
 8005638:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	f003 0304 	and.w	r3, r3, #4
 8005640:	2b00      	cmp	r3, #0
 8005642:	d004      	beq.n	800564e <HAL_ADC_IRQHandler+0x6a>
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f003 0304 	and.w	r3, r3, #4
 800564a:	2b00      	cmp	r3, #0
 800564c:	d109      	bne.n	8005662 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005654:	2b00      	cmp	r3, #0
 8005656:	d05d      	beq.n	8005714 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f003 0308 	and.w	r3, r3, #8
 800565e:	2b00      	cmp	r3, #0
 8005660:	d058      	beq.n	8005714 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005666:	f003 0310 	and.w	r3, r3, #16
 800566a:	2b00      	cmp	r3, #0
 800566c:	d105      	bne.n	800567a <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005672:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4618      	mov	r0, r3
 8005680:	f7ff fc81 	bl	8004f86 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d03d      	beq.n	8005706 <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005694:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005698:	d035      	beq.n	8005706 <HAL_ADC_IRQHandler+0x122>
#endif /* ADC_SUPPORT_2_5_MSPS */
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0308 	and.w	r3, r3, #8
 80056a4:	2b08      	cmp	r3, #8
 80056a6:	d12e      	bne.n	8005706 <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4618      	mov	r0, r3
 80056ae:	f7ff fda2 	bl	80051f6 <LL_ADC_REG_IsConversionOngoing>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d11a      	bne.n	80056ee <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	685a      	ldr	r2, [r3, #4]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f022 020c 	bic.w	r2, r2, #12
 80056c6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d112      	bne.n	8005706 <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056e4:	f043 0201 	orr.w	r2, r3, #1
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	655a      	str	r2, [r3, #84]	@ 0x54
 80056ec:	e00b      	b.n	8005706 <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056f2:	f043 0210 	orr.w	r2, r3, #16
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056fe:	f043 0201 	orr.w	r2, r3, #1
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f922 	bl	8005950 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	220c      	movs	r2, #12
 8005712:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	f003 0320 	and.w	r3, r3, #32
 800571a:	2b00      	cmp	r3, #0
 800571c:	d004      	beq.n	8005728 <HAL_ADC_IRQHandler+0x144>
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f003 0320 	and.w	r3, r3, #32
 8005724:	2b00      	cmp	r3, #0
 8005726:	d109      	bne.n	800573c <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800572e:	2b00      	cmp	r3, #0
 8005730:	d074      	beq.n	800581c <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005738:	2b00      	cmp	r3, #0
 800573a:	d06f      	beq.n	800581c <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005740:	f003 0310 	and.w	r3, r3, #16
 8005744:	2b00      	cmp	r3, #0
 8005746:	d105      	bne.n	8005754 <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800574c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4618      	mov	r0, r3
 800575a:	f7ff fc61 	bl	8005020 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800575e:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4618      	mov	r0, r3
 8005766:	f7ff fc0e 	bl	8004f86 <LL_ADC_REG_IsTriggerSourceSWStart>
 800576a:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d049      	beq.n	800580e <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d007      	beq.n	8005794 <HAL_ADC_IRQHandler+0x1b0>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d041      	beq.n	800580e <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005790:	2b00      	cmp	r3, #0
 8005792:	d13c      	bne.n	800580e <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800579e:	2b40      	cmp	r3, #64	@ 0x40
 80057a0:	d135      	bne.n	800580e <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d12e      	bne.n	800580e <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7ff fd31 	bl	800521c <LL_ADC_INJ_IsConversionOngoing>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d11a      	bne.n	80057f6 <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	685a      	ldr	r2, [r3, #4]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80057ce:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d112      	bne.n	800580e <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ec:	f043 0201 	orr.w	r2, r3, #1
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	655a      	str	r2, [r3, #84]	@ 0x54
 80057f4:	e00b      	b.n	800580e <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057fa:	f043 0210 	orr.w	r2, r3, #16
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005806:	f043 0201 	orr.w	r2, r3, #1
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 fd9a 	bl	8006348 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2260      	movs	r2, #96	@ 0x60
 800581a:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005822:	2b00      	cmp	r3, #0
 8005824:	d011      	beq.n	800584a <HAL_ADC_IRQHandler+0x266>
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00c      	beq.n	800584a <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005834:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 f89b 	bl	8005978 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2280      	movs	r2, #128	@ 0x80
 8005848:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005850:	2b00      	cmp	r3, #0
 8005852:	d012      	beq.n	800587a <HAL_ADC_IRQHandler+0x296>
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00d      	beq.n	800587a <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005862:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 fd80 	bl	8006370 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005878:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005880:	2b00      	cmp	r3, #0
 8005882:	d012      	beq.n	80058aa <HAL_ADC_IRQHandler+0x2c6>
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00d      	beq.n	80058aa <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005892:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 fd72 	bl	8006384 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058a8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	f003 0310 	and.w	r3, r3, #16
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d02b      	beq.n	800590c <HAL_ADC_IRQHandler+0x328>
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	f003 0310 	and.w	r3, r3, #16
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d026      	beq.n	800590c <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d102      	bne.n	80058cc <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 80058c6:	2301      	movs	r3, #1
 80058c8:	61fb      	str	r3, [r7, #28]
 80058ca:	e009      	b.n	80058e0 <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7ff fb97 	bl	8005004 <LL_ADC_REG_GetDMATransfer>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d001      	beq.n	80058e0 <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 80058dc:	2301      	movs	r3, #1
 80058de:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d10e      	bne.n	8005904 <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ea:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058f6:	f043 0202 	orr.w	r2, r3, #2
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f844 	bl	800598c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2210      	movs	r2, #16
 800590a:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005912:	2b00      	cmp	r3, #0
 8005914:	d018      	beq.n	8005948 <HAL_ADC_IRQHandler+0x364>
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800591c:	2b00      	cmp	r3, #0
 800591e:	d013      	beq.n	8005948 <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005924:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005930:	f043 0208 	orr.w	r2, r3, #8
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005940:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 fd0a 	bl	800635c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 8005948:	bf00      	nop
 800594a:	3720      	adds	r7, #32
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b0b6      	sub	sp, #216	@ 0xd8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059aa:	2300      	movs	r3, #0
 80059ac:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80059b0:	2300      	movs	r3, #0
 80059b2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d101      	bne.n	80059c2 <HAL_ADC_ConfigChannel+0x22>
 80059be:	2302      	movs	r3, #2
 80059c0:	e39f      	b.n	8006102 <HAL_ADC_ConfigChannel+0x762>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7ff fc11 	bl	80051f6 <LL_ADC_REG_IsConversionOngoing>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f040 8384 	bne.w	80060e4 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6818      	ldr	r0, [r3, #0]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	6859      	ldr	r1, [r3, #4]
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	461a      	mov	r2, r3
 80059ea:	f7ff fadf 	bl	8004fac <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7ff fbff 	bl	80051f6 <LL_ADC_REG_IsConversionOngoing>
 80059f8:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7ff fc0b 	bl	800521c <LL_ADC_INJ_IsConversionOngoing>
 8005a06:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005a0a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f040 81a6 	bne.w	8005d60 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005a14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f040 81a1 	bne.w	8005d60 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6818      	ldr	r0, [r3, #0]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	6819      	ldr	r1, [r3, #0]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	f7ff fb0b 	bl	8005046 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	695a      	ldr	r2, [r3, #20]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	08db      	lsrs	r3, r3, #3
 8005a3c:	f003 0303 	and.w	r3, r3, #3
 8005a40:	005b      	lsls	r3, r3, #1
 8005a42:	fa02 f303 	lsl.w	r3, r2, r3
 8005a46:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	2b04      	cmp	r3, #4
 8005a50:	d00a      	beq.n	8005a68 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6818      	ldr	r0, [r3, #0]
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	6919      	ldr	r1, [r3, #16]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005a62:	f7ff fa3b 	bl	8004edc <LL_ADC_SetOffset>
 8005a66:	e17b      	b.n	8005d60 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7ff fa58 	bl	8004f24 <LL_ADC_GetOffsetChannel>
 8005a74:	4603      	mov	r3, r0
 8005a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10a      	bne.n	8005a94 <HAL_ADC_ConfigChannel+0xf4>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2100      	movs	r1, #0
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7ff fa4d 	bl	8004f24 <LL_ADC_GetOffsetChannel>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	0e9b      	lsrs	r3, r3, #26
 8005a8e:	f003 021f 	and.w	r2, r3, #31
 8005a92:	e01e      	b.n	8005ad2 <HAL_ADC_ConfigChannel+0x132>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2100      	movs	r1, #0
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7ff fa42 	bl	8004f24 <LL_ADC_GetOffsetChannel>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aa6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005aaa:	fa93 f3a3 	rbit	r3, r3
 8005aae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005ab2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005ab6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005aba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8005ac2:	2320      	movs	r3, #32
 8005ac4:	e004      	b.n	8005ad0 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8005ac6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005aca:	fab3 f383 	clz	r3, r3
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d105      	bne.n	8005aea <HAL_ADC_ConfigChannel+0x14a>
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	0e9b      	lsrs	r3, r3, #26
 8005ae4:	f003 031f 	and.w	r3, r3, #31
 8005ae8:	e018      	b.n	8005b1c <HAL_ADC_ConfigChannel+0x17c>
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005af2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005af6:	fa93 f3a3 	rbit	r3, r3
 8005afa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8005afe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8005b06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d101      	bne.n	8005b12 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8005b0e:	2320      	movs	r3, #32
 8005b10:	e004      	b.n	8005b1c <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8005b12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005b16:	fab3 f383 	clz	r3, r3
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d106      	bne.n	8005b2e <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2200      	movs	r2, #0
 8005b26:	2100      	movs	r1, #0
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7ff fa11 	bl	8004f50 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2101      	movs	r1, #1
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7ff f9f5 	bl	8004f24 <LL_ADC_GetOffsetChannel>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d10a      	bne.n	8005b5a <HAL_ADC_ConfigChannel+0x1ba>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2101      	movs	r1, #1
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f7ff f9ea 	bl	8004f24 <LL_ADC_GetOffsetChannel>
 8005b50:	4603      	mov	r3, r0
 8005b52:	0e9b      	lsrs	r3, r3, #26
 8005b54:	f003 021f 	and.w	r2, r3, #31
 8005b58:	e01e      	b.n	8005b98 <HAL_ADC_ConfigChannel+0x1f8>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2101      	movs	r1, #1
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7ff f9df 	bl	8004f24 <LL_ADC_GetOffsetChannel>
 8005b66:	4603      	mov	r3, r0
 8005b68:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005b70:	fa93 f3a3 	rbit	r3, r3
 8005b74:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8005b78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005b7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8005b80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d101      	bne.n	8005b8c <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8005b88:	2320      	movs	r3, #32
 8005b8a:	e004      	b.n	8005b96 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8005b8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005b90:	fab3 f383 	clz	r3, r3
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	461a      	mov	r2, r3
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d105      	bne.n	8005bb0 <HAL_ADC_ConfigChannel+0x210>
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	0e9b      	lsrs	r3, r3, #26
 8005baa:	f003 031f 	and.w	r3, r3, #31
 8005bae:	e018      	b.n	8005be2 <HAL_ADC_ConfigChannel+0x242>
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005bbc:	fa93 f3a3 	rbit	r3, r3
 8005bc0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8005bc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005bc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8005bcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8005bd4:	2320      	movs	r3, #32
 8005bd6:	e004      	b.n	8005be2 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8005bd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005bdc:	fab3 f383 	clz	r3, r3
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d106      	bne.n	8005bf4 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2200      	movs	r2, #0
 8005bec:	2101      	movs	r1, #1
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7ff f9ae 	bl	8004f50 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2102      	movs	r1, #2
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7ff f992 	bl	8004f24 <LL_ADC_GetOffsetChannel>
 8005c00:	4603      	mov	r3, r0
 8005c02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10a      	bne.n	8005c20 <HAL_ADC_ConfigChannel+0x280>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2102      	movs	r1, #2
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7ff f987 	bl	8004f24 <LL_ADC_GetOffsetChannel>
 8005c16:	4603      	mov	r3, r0
 8005c18:	0e9b      	lsrs	r3, r3, #26
 8005c1a:	f003 021f 	and.w	r2, r3, #31
 8005c1e:	e01e      	b.n	8005c5e <HAL_ADC_ConfigChannel+0x2be>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2102      	movs	r1, #2
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7ff f97c 	bl	8004f24 <LL_ADC_GetOffsetChannel>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c36:	fa93 f3a3 	rbit	r3, r3
 8005c3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8005c3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005c42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8005c46:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d101      	bne.n	8005c52 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8005c4e:	2320      	movs	r3, #32
 8005c50:	e004      	b.n	8005c5c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8005c52:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005c56:	fab3 f383 	clz	r3, r3
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d105      	bne.n	8005c76 <HAL_ADC_ConfigChannel+0x2d6>
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	0e9b      	lsrs	r3, r3, #26
 8005c70:	f003 031f 	and.w	r3, r3, #31
 8005c74:	e016      	b.n	8005ca4 <HAL_ADC_ConfigChannel+0x304>
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005c82:	fa93 f3a3 	rbit	r3, r3
 8005c86:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8005c88:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005c8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8005c8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d101      	bne.n	8005c9a <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8005c96:	2320      	movs	r3, #32
 8005c98:	e004      	b.n	8005ca4 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8005c9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c9e:	fab3 f383 	clz	r3, r3
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d106      	bne.n	8005cb6 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2200      	movs	r2, #0
 8005cae:	2102      	movs	r1, #2
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7ff f94d 	bl	8004f50 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2103      	movs	r1, #3
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7ff f931 	bl	8004f24 <LL_ADC_GetOffsetChannel>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10a      	bne.n	8005ce2 <HAL_ADC_ConfigChannel+0x342>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2103      	movs	r1, #3
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7ff f926 	bl	8004f24 <LL_ADC_GetOffsetChannel>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	0e9b      	lsrs	r3, r3, #26
 8005cdc:	f003 021f 	and.w	r2, r3, #31
 8005ce0:	e017      	b.n	8005d12 <HAL_ADC_ConfigChannel+0x372>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2103      	movs	r1, #3
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7ff f91b 	bl	8004f24 <LL_ADC_GetOffsetChannel>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cf2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005cf4:	fa93 f3a3 	rbit	r3, r3
 8005cf8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8005cfa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005cfc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8005cfe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d101      	bne.n	8005d08 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8005d04:	2320      	movs	r3, #32
 8005d06:	e003      	b.n	8005d10 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8005d08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d0a:	fab3 f383 	clz	r3, r3
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	461a      	mov	r2, r3
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d105      	bne.n	8005d2a <HAL_ADC_ConfigChannel+0x38a>
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	0e9b      	lsrs	r3, r3, #26
 8005d24:	f003 031f 	and.w	r3, r3, #31
 8005d28:	e011      	b.n	8005d4e <HAL_ADC_ConfigChannel+0x3ae>
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d32:	fa93 f3a3 	rbit	r3, r3
 8005d36:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8005d38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005d3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8005d42:	2320      	movs	r3, #32
 8005d44:	e003      	b.n	8005d4e <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8005d46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d48:	fab3 f383 	clz	r3, r3
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d106      	bne.n	8005d60 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2200      	movs	r2, #0
 8005d58:	2103      	movs	r1, #3
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7ff f8f8 	bl	8004f50 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4618      	mov	r0, r3
 8005d66:	f7ff fa1f 	bl	80051a8 <LL_ADC_IsEnabled>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f040 81c2 	bne.w	80060f6 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6818      	ldr	r0, [r3, #0]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	6819      	ldr	r1, [r3, #0]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	f7ff f98c 	bl	800509c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	4a8e      	ldr	r2, [pc, #568]	@ (8005fc4 <HAL_ADC_ConfigChannel+0x624>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	f040 8130 	bne.w	8005ff0 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10b      	bne.n	8005db8 <HAL_ADC_ConfigChannel+0x418>
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	0e9b      	lsrs	r3, r3, #26
 8005da6:	3301      	adds	r3, #1
 8005da8:	f003 031f 	and.w	r3, r3, #31
 8005dac:	2b09      	cmp	r3, #9
 8005dae:	bf94      	ite	ls
 8005db0:	2301      	movls	r3, #1
 8005db2:	2300      	movhi	r3, #0
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	e019      	b.n	8005dec <HAL_ADC_ConfigChannel+0x44c>
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005dc0:	fa93 f3a3 	rbit	r3, r3
 8005dc4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8005dc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005dc8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8005dca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d101      	bne.n	8005dd4 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8005dd0:	2320      	movs	r3, #32
 8005dd2:	e003      	b.n	8005ddc <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8005dd4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005dd6:	fab3 f383 	clz	r3, r3
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	3301      	adds	r3, #1
 8005dde:	f003 031f 	and.w	r3, r3, #31
 8005de2:	2b09      	cmp	r3, #9
 8005de4:	bf94      	ite	ls
 8005de6:	2301      	movls	r3, #1
 8005de8:	2300      	movhi	r3, #0
 8005dea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d079      	beq.n	8005ee4 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d107      	bne.n	8005e0c <HAL_ADC_ConfigChannel+0x46c>
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	0e9b      	lsrs	r3, r3, #26
 8005e02:	3301      	adds	r3, #1
 8005e04:	069b      	lsls	r3, r3, #26
 8005e06:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005e0a:	e015      	b.n	8005e38 <HAL_ADC_ConfigChannel+0x498>
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e14:	fa93 f3a3 	rbit	r3, r3
 8005e18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005e1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e1c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8005e1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d101      	bne.n	8005e28 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8005e24:	2320      	movs	r3, #32
 8005e26:	e003      	b.n	8005e30 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8005e28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e2a:	fab3 f383 	clz	r3, r3
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	3301      	adds	r3, #1
 8005e32:	069b      	lsls	r3, r3, #26
 8005e34:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d109      	bne.n	8005e58 <HAL_ADC_ConfigChannel+0x4b8>
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	0e9b      	lsrs	r3, r3, #26
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	f003 031f 	and.w	r3, r3, #31
 8005e50:	2101      	movs	r1, #1
 8005e52:	fa01 f303 	lsl.w	r3, r1, r3
 8005e56:	e017      	b.n	8005e88 <HAL_ADC_ConfigChannel+0x4e8>
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e60:	fa93 f3a3 	rbit	r3, r3
 8005e64:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8005e66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e68:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8005e6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d101      	bne.n	8005e74 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8005e70:	2320      	movs	r3, #32
 8005e72:	e003      	b.n	8005e7c <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8005e74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e76:	fab3 f383 	clz	r3, r3
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	f003 031f 	and.w	r3, r3, #31
 8005e82:	2101      	movs	r1, #1
 8005e84:	fa01 f303 	lsl.w	r3, r1, r3
 8005e88:	ea42 0103 	orr.w	r1, r2, r3
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10a      	bne.n	8005eae <HAL_ADC_ConfigChannel+0x50e>
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	0e9b      	lsrs	r3, r3, #26
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	f003 021f 	and.w	r2, r3, #31
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	005b      	lsls	r3, r3, #1
 8005ea8:	4413      	add	r3, r2
 8005eaa:	051b      	lsls	r3, r3, #20
 8005eac:	e018      	b.n	8005ee0 <HAL_ADC_ConfigChannel+0x540>
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eb6:	fa93 f3a3 	rbit	r3, r3
 8005eba:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005ebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005ec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8005ec6:	2320      	movs	r3, #32
 8005ec8:	e003      	b.n	8005ed2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8005eca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ecc:	fab3 f383 	clz	r3, r3
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	f003 021f 	and.w	r2, r3, #31
 8005ed8:	4613      	mov	r3, r2
 8005eda:	005b      	lsls	r3, r3, #1
 8005edc:	4413      	add	r3, r2
 8005ede:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005ee0:	430b      	orrs	r3, r1
 8005ee2:	e080      	b.n	8005fe6 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d107      	bne.n	8005f00 <HAL_ADC_ConfigChannel+0x560>
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	0e9b      	lsrs	r3, r3, #26
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	069b      	lsls	r3, r3, #26
 8005efa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005efe:	e015      	b.n	8005f2c <HAL_ADC_ConfigChannel+0x58c>
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f08:	fa93 f3a3 	rbit	r3, r3
 8005f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f10:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d101      	bne.n	8005f1c <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8005f18:	2320      	movs	r3, #32
 8005f1a:	e003      	b.n	8005f24 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8005f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f1e:	fab3 f383 	clz	r3, r3
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	3301      	adds	r3, #1
 8005f26:	069b      	lsls	r3, r3, #26
 8005f28:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d109      	bne.n	8005f4c <HAL_ADC_ConfigChannel+0x5ac>
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	0e9b      	lsrs	r3, r3, #26
 8005f3e:	3301      	adds	r3, #1
 8005f40:	f003 031f 	and.w	r3, r3, #31
 8005f44:	2101      	movs	r1, #1
 8005f46:	fa01 f303 	lsl.w	r3, r1, r3
 8005f4a:	e017      	b.n	8005f7c <HAL_ADC_ConfigChannel+0x5dc>
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f52:	6a3b      	ldr	r3, [r7, #32]
 8005f54:	fa93 f3a3 	rbit	r3, r3
 8005f58:	61fb      	str	r3, [r7, #28]
  return result;
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d101      	bne.n	8005f68 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8005f64:	2320      	movs	r3, #32
 8005f66:	e003      	b.n	8005f70 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8005f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6a:	fab3 f383 	clz	r3, r3
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	3301      	adds	r3, #1
 8005f72:	f003 031f 	and.w	r3, r3, #31
 8005f76:	2101      	movs	r1, #1
 8005f78:	fa01 f303 	lsl.w	r3, r1, r3
 8005f7c:	ea42 0103 	orr.w	r1, r2, r3
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d10d      	bne.n	8005fa8 <HAL_ADC_ConfigChannel+0x608>
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	0e9b      	lsrs	r3, r3, #26
 8005f92:	3301      	adds	r3, #1
 8005f94:	f003 021f 	and.w	r2, r3, #31
 8005f98:	4613      	mov	r3, r2
 8005f9a:	005b      	lsls	r3, r3, #1
 8005f9c:	4413      	add	r3, r2
 8005f9e:	3b1e      	subs	r3, #30
 8005fa0:	051b      	lsls	r3, r3, #20
 8005fa2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005fa6:	e01d      	b.n	8005fe4 <HAL_ADC_ConfigChannel+0x644>
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	fa93 f3a3 	rbit	r3, r3
 8005fb4:	613b      	str	r3, [r7, #16]
  return result;
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d103      	bne.n	8005fc8 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8005fc0:	2320      	movs	r3, #32
 8005fc2:	e005      	b.n	8005fd0 <HAL_ADC_ConfigChannel+0x630>
 8005fc4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	fab3 f383 	clz	r3, r3
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	f003 021f 	and.w	r2, r3, #31
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	005b      	lsls	r3, r3, #1
 8005fda:	4413      	add	r3, r2
 8005fdc:	3b1e      	subs	r3, #30
 8005fde:	051b      	lsls	r3, r3, #20
 8005fe0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005fe4:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005fea:	4619      	mov	r1, r3
 8005fec:	f7ff f82b 	bl	8005046 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	4b45      	ldr	r3, [pc, #276]	@ (800610c <HAL_ADC_ConfigChannel+0x76c>)
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d07c      	beq.n	80060f6 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005ffc:	4844      	ldr	r0, [pc, #272]	@ (8006110 <HAL_ADC_ConfigChannel+0x770>)
 8005ffe:	f7fe ff5f 	bl	8004ec0 <LL_ADC_GetCommonPathInternalCh>
 8006002:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006006:	4843      	ldr	r0, [pc, #268]	@ (8006114 <HAL_ADC_ConfigChannel+0x774>)
 8006008:	f7ff f8ce 	bl	80051a8 <LL_ADC_IsEnabled>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d15e      	bne.n	80060d0 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a40      	ldr	r2, [pc, #256]	@ (8006118 <HAL_ADC_ConfigChannel+0x778>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d127      	bne.n	800606c <HAL_ADC_ConfigChannel+0x6cc>
 800601c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006020:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d121      	bne.n	800606c <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a39      	ldr	r2, [pc, #228]	@ (8006114 <HAL_ADC_ConfigChannel+0x774>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d161      	bne.n	80060f6 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006032:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006036:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800603a:	4619      	mov	r1, r3
 800603c:	4834      	ldr	r0, [pc, #208]	@ (8006110 <HAL_ADC_ConfigChannel+0x770>)
 800603e:	f7fe ff2c 	bl	8004e9a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006042:	4b36      	ldr	r3, [pc, #216]	@ (800611c <HAL_ADC_ConfigChannel+0x77c>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	099b      	lsrs	r3, r3, #6
 8006048:	4a35      	ldr	r2, [pc, #212]	@ (8006120 <HAL_ADC_ConfigChannel+0x780>)
 800604a:	fba2 2303 	umull	r2, r3, r2, r3
 800604e:	099b      	lsrs	r3, r3, #6
 8006050:	1c5a      	adds	r2, r3, #1
 8006052:	4613      	mov	r3, r2
 8006054:	005b      	lsls	r3, r3, #1
 8006056:	4413      	add	r3, r2
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800605c:	e002      	b.n	8006064 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	3b01      	subs	r3, #1
 8006062:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1f9      	bne.n	800605e <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800606a:	e044      	b.n	80060f6 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a2c      	ldr	r2, [pc, #176]	@ (8006124 <HAL_ADC_ConfigChannel+0x784>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d113      	bne.n	800609e <HAL_ADC_ConfigChannel+0x6fe>
 8006076:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800607a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10d      	bne.n	800609e <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a23      	ldr	r2, [pc, #140]	@ (8006114 <HAL_ADC_ConfigChannel+0x774>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d134      	bne.n	80060f6 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800608c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006090:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006094:	4619      	mov	r1, r3
 8006096:	481e      	ldr	r0, [pc, #120]	@ (8006110 <HAL_ADC_ConfigChannel+0x770>)
 8006098:	f7fe feff 	bl	8004e9a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800609c:	e02b      	b.n	80060f6 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a21      	ldr	r2, [pc, #132]	@ (8006128 <HAL_ADC_ConfigChannel+0x788>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d126      	bne.n	80060f6 <HAL_ADC_ConfigChannel+0x756>
 80060a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80060ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d120      	bne.n	80060f6 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a16      	ldr	r2, [pc, #88]	@ (8006114 <HAL_ADC_ConfigChannel+0x774>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d11b      	bne.n	80060f6 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80060be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80060c2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80060c6:	4619      	mov	r1, r3
 80060c8:	4811      	ldr	r0, [pc, #68]	@ (8006110 <HAL_ADC_ConfigChannel+0x770>)
 80060ca:	f7fe fee6 	bl	8004e9a <LL_ADC_SetCommonPathInternalCh>
 80060ce:	e012      	b.n	80060f6 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060d4:	f043 0220 	orr.w	r2, r3, #32
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80060e2:	e008      	b.n	80060f6 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060e8:	f043 0220 	orr.w	r2, r3, #32
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 80060fe:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8006102:	4618      	mov	r0, r3
 8006104:	37d8      	adds	r7, #216	@ 0xd8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	80080000 	.word	0x80080000
 8006110:	50040300 	.word	0x50040300
 8006114:	50040000 	.word	0x50040000
 8006118:	c7520000 	.word	0xc7520000
 800611c:	2000000c 	.word	0x2000000c
 8006120:	053e2d63 	.word	0x053e2d63
 8006124:	cb840000 	.word	0xcb840000
 8006128:	80000001 	.word	0x80000001

0800612c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006134:	2300      	movs	r3, #0
 8006136:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4618      	mov	r0, r3
 800613e:	f7ff f833 	bl	80051a8 <LL_ADC_IsEnabled>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d15e      	bne.n	8006206 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	689a      	ldr	r2, [r3, #8]
 800614e:	4b30      	ldr	r3, [pc, #192]	@ (8006210 <ADC_Enable+0xe4>)
 8006150:	4013      	ands	r3, r2
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00d      	beq.n	8006172 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800615a:	f043 0210 	orr.w	r2, r3, #16
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006166:	f043 0201 	orr.w	r2, r3, #1
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e04a      	b.n	8006208 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4618      	mov	r0, r3
 8006178:	f7ff f802 	bl	8005180 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800617c:	4825      	ldr	r0, [pc, #148]	@ (8006214 <ADC_Enable+0xe8>)
 800617e:	f7fe fe9f 	bl	8004ec0 <LL_ADC_GetCommonPathInternalCh>
 8006182:	4603      	mov	r3, r0
 8006184:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00f      	beq.n	80061ac <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800618c:	4b22      	ldr	r3, [pc, #136]	@ (8006218 <ADC_Enable+0xec>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	099b      	lsrs	r3, r3, #6
 8006192:	4a22      	ldr	r2, [pc, #136]	@ (800621c <ADC_Enable+0xf0>)
 8006194:	fba2 2303 	umull	r2, r3, r2, r3
 8006198:	099b      	lsrs	r3, r3, #6
 800619a:	3301      	adds	r3, #1
 800619c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800619e:	e002      	b.n	80061a6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	3b01      	subs	r3, #1
 80061a4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d1f9      	bne.n	80061a0 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80061ac:	f7fe fe26 	bl	8004dfc <HAL_GetTick>
 80061b0:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80061b2:	e021      	b.n	80061f8 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7fe fff5 	bl	80051a8 <LL_ADC_IsEnabled>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d104      	bne.n	80061ce <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7fe ffd9 	bl	8005180 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80061ce:	f7fe fe15 	bl	8004dfc <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d90d      	bls.n	80061f8 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061e0:	f043 0210 	orr.w	r2, r3, #16
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061ec:	f043 0201 	orr.w	r2, r3, #1
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e007      	b.n	8006208 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 0301 	and.w	r3, r3, #1
 8006202:	2b01      	cmp	r3, #1
 8006204:	d1d6      	bne.n	80061b4 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	3710      	adds	r7, #16
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	8000003f 	.word	0x8000003f
 8006214:	50040300 	.word	0x50040300
 8006218:	2000000c 	.word	0x2000000c
 800621c:	053e2d63 	.word	0x053e2d63

08006220 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800622c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006232:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006236:	2b00      	cmp	r3, #0
 8006238:	d14b      	bne.n	80062d2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800623e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 0308 	and.w	r3, r3, #8
 8006250:	2b00      	cmp	r3, #0
 8006252:	d021      	beq.n	8006298 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4618      	mov	r0, r3
 800625a:	f7fe fe94 	bl	8004f86 <LL_ADC_REG_IsTriggerSourceSWStart>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d032      	beq.n	80062ca <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800626e:	2b00      	cmp	r3, #0
 8006270:	d12b      	bne.n	80062ca <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006276:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006282:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d11f      	bne.n	80062ca <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800628e:	f043 0201 	orr.w	r2, r3, #1
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	655a      	str	r2, [r3, #84]	@ 0x54
 8006296:	e018      	b.n	80062ca <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	f003 0302 	and.w	r3, r3, #2
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d111      	bne.n	80062ca <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062aa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d105      	bne.n	80062ca <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062c2:	f043 0201 	orr.w	r2, r3, #1
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f7ff fb40 	bl	8005950 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80062d0:	e00e      	b.n	80062f0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062d6:	f003 0310 	and.w	r3, r3, #16
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d003      	beq.n	80062e6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f7ff fb54 	bl	800598c <HAL_ADC_ErrorCallback>
}
 80062e4:	e004      	b.n	80062f0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	4798      	blx	r3
}
 80062f0:	bf00      	nop
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006304:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f7ff fb2c 	bl	8005964 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800630c:	bf00      	nop
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006320:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006326:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006332:	f043 0204 	orr.w	r2, r3, #4
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f7ff fb26 	bl	800598c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006340:	bf00      	nop
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f003 0307 	and.w	r3, r3, #7
 80063ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80063bc:	4b0c      	ldr	r3, [pc, #48]	@ (80063f0 <__NVIC_SetPriorityGrouping+0x44>)
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80063c8:	4013      	ands	r3, r2
 80063ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80063d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80063d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80063de:	4a04      	ldr	r2, [pc, #16]	@ (80063f0 <__NVIC_SetPriorityGrouping+0x44>)
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	60d3      	str	r3, [r2, #12]
}
 80063e4:	bf00      	nop
 80063e6:	3714      	adds	r7, #20
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr
 80063f0:	e000ed00 	.word	0xe000ed00

080063f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80063f4:	b480      	push	{r7}
 80063f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80063f8:	4b04      	ldr	r3, [pc, #16]	@ (800640c <__NVIC_GetPriorityGrouping+0x18>)
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	0a1b      	lsrs	r3, r3, #8
 80063fe:	f003 0307 	and.w	r3, r3, #7
}
 8006402:	4618      	mov	r0, r3
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr
 800640c:	e000ed00 	.word	0xe000ed00

08006410 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	4603      	mov	r3, r0
 8006418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800641a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800641e:	2b00      	cmp	r3, #0
 8006420:	db0b      	blt.n	800643a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006422:	79fb      	ldrb	r3, [r7, #7]
 8006424:	f003 021f 	and.w	r2, r3, #31
 8006428:	4907      	ldr	r1, [pc, #28]	@ (8006448 <__NVIC_EnableIRQ+0x38>)
 800642a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800642e:	095b      	lsrs	r3, r3, #5
 8006430:	2001      	movs	r0, #1
 8006432:	fa00 f202 	lsl.w	r2, r0, r2
 8006436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800643a:	bf00      	nop
 800643c:	370c      	adds	r7, #12
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	e000e100 	.word	0xe000e100

0800644c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	4603      	mov	r3, r0
 8006454:	6039      	str	r1, [r7, #0]
 8006456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800645c:	2b00      	cmp	r3, #0
 800645e:	db0a      	blt.n	8006476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	b2da      	uxtb	r2, r3
 8006464:	490c      	ldr	r1, [pc, #48]	@ (8006498 <__NVIC_SetPriority+0x4c>)
 8006466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800646a:	0112      	lsls	r2, r2, #4
 800646c:	b2d2      	uxtb	r2, r2
 800646e:	440b      	add	r3, r1
 8006470:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006474:	e00a      	b.n	800648c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	b2da      	uxtb	r2, r3
 800647a:	4908      	ldr	r1, [pc, #32]	@ (800649c <__NVIC_SetPriority+0x50>)
 800647c:	79fb      	ldrb	r3, [r7, #7]
 800647e:	f003 030f 	and.w	r3, r3, #15
 8006482:	3b04      	subs	r3, #4
 8006484:	0112      	lsls	r2, r2, #4
 8006486:	b2d2      	uxtb	r2, r2
 8006488:	440b      	add	r3, r1
 800648a:	761a      	strb	r2, [r3, #24]
}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr
 8006498:	e000e100 	.word	0xe000e100
 800649c:	e000ed00 	.word	0xe000ed00

080064a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b089      	sub	sp, #36	@ 0x24
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f003 0307 	and.w	r3, r3, #7
 80064b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	f1c3 0307 	rsb	r3, r3, #7
 80064ba:	2b04      	cmp	r3, #4
 80064bc:	bf28      	it	cs
 80064be:	2304      	movcs	r3, #4
 80064c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	3304      	adds	r3, #4
 80064c6:	2b06      	cmp	r3, #6
 80064c8:	d902      	bls.n	80064d0 <NVIC_EncodePriority+0x30>
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	3b03      	subs	r3, #3
 80064ce:	e000      	b.n	80064d2 <NVIC_EncodePriority+0x32>
 80064d0:	2300      	movs	r3, #0
 80064d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064d4:	f04f 32ff 	mov.w	r2, #4294967295
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	fa02 f303 	lsl.w	r3, r2, r3
 80064de:	43da      	mvns	r2, r3
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	401a      	ands	r2, r3
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80064e8:	f04f 31ff 	mov.w	r1, #4294967295
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	fa01 f303 	lsl.w	r3, r1, r3
 80064f2:	43d9      	mvns	r1, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064f8:	4313      	orrs	r3, r2
         );
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3724      	adds	r7, #36	@ 0x24
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
	...

08006508 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	3b01      	subs	r3, #1
 8006514:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006518:	d301      	bcc.n	800651e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800651a:	2301      	movs	r3, #1
 800651c:	e00f      	b.n	800653e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800651e:	4a0a      	ldr	r2, [pc, #40]	@ (8006548 <SysTick_Config+0x40>)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	3b01      	subs	r3, #1
 8006524:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006526:	210f      	movs	r1, #15
 8006528:	f04f 30ff 	mov.w	r0, #4294967295
 800652c:	f7ff ff8e 	bl	800644c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006530:	4b05      	ldr	r3, [pc, #20]	@ (8006548 <SysTick_Config+0x40>)
 8006532:	2200      	movs	r2, #0
 8006534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006536:	4b04      	ldr	r3, [pc, #16]	@ (8006548 <SysTick_Config+0x40>)
 8006538:	2207      	movs	r2, #7
 800653a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3708      	adds	r7, #8
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	e000e010 	.word	0xe000e010

0800654c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f7ff ff29 	bl	80063ac <__NVIC_SetPriorityGrouping>
}
 800655a:	bf00      	nop
 800655c:	3708      	adds	r7, #8
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b086      	sub	sp, #24
 8006566:	af00      	add	r7, sp, #0
 8006568:	4603      	mov	r3, r0
 800656a:	60b9      	str	r1, [r7, #8]
 800656c:	607a      	str	r2, [r7, #4]
 800656e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006570:	f7ff ff40 	bl	80063f4 <__NVIC_GetPriorityGrouping>
 8006574:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	68b9      	ldr	r1, [r7, #8]
 800657a:	6978      	ldr	r0, [r7, #20]
 800657c:	f7ff ff90 	bl	80064a0 <NVIC_EncodePriority>
 8006580:	4602      	mov	r2, r0
 8006582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006586:	4611      	mov	r1, r2
 8006588:	4618      	mov	r0, r3
 800658a:	f7ff ff5f 	bl	800644c <__NVIC_SetPriority>
}
 800658e:	bf00      	nop
 8006590:	3718      	adds	r7, #24
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b082      	sub	sp, #8
 800659a:	af00      	add	r7, sp, #0
 800659c:	4603      	mov	r3, r0
 800659e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80065a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7ff ff33 	bl	8006410 <__NVIC_EnableIRQ>
}
 80065aa:	bf00      	nop
 80065ac:	3708      	adds	r7, #8
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b082      	sub	sp, #8
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f7ff ffa4 	bl	8006508 <SysTick_Config>
 80065c0:	4603      	mov	r3, r0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3708      	adds	r7, #8
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
	...

080065cc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d101      	bne.n	80065de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e08e      	b.n	80066fc <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	461a      	mov	r2, r3
 80065e4:	4b47      	ldr	r3, [pc, #284]	@ (8006704 <HAL_DMA_Init+0x138>)
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d80f      	bhi.n	800660a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	461a      	mov	r2, r3
 80065f0:	4b45      	ldr	r3, [pc, #276]	@ (8006708 <HAL_DMA_Init+0x13c>)
 80065f2:	4413      	add	r3, r2
 80065f4:	4a45      	ldr	r2, [pc, #276]	@ (800670c <HAL_DMA_Init+0x140>)
 80065f6:	fba2 2303 	umull	r2, r3, r2, r3
 80065fa:	091b      	lsrs	r3, r3, #4
 80065fc:	009a      	lsls	r2, r3, #2
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a42      	ldr	r2, [pc, #264]	@ (8006710 <HAL_DMA_Init+0x144>)
 8006606:	641a      	str	r2, [r3, #64]	@ 0x40
 8006608:	e00e      	b.n	8006628 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	461a      	mov	r2, r3
 8006610:	4b40      	ldr	r3, [pc, #256]	@ (8006714 <HAL_DMA_Init+0x148>)
 8006612:	4413      	add	r3, r2
 8006614:	4a3d      	ldr	r2, [pc, #244]	@ (800670c <HAL_DMA_Init+0x140>)
 8006616:	fba2 2303 	umull	r2, r3, r2, r3
 800661a:	091b      	lsrs	r3, r3, #4
 800661c:	009a      	lsls	r2, r3, #2
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a3c      	ldr	r2, [pc, #240]	@ (8006718 <HAL_DMA_Init+0x14c>)
 8006626:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2202      	movs	r2, #2
 800662c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800663e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006642:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800664c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006658:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006664:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a1b      	ldr	r3, [r3, #32]
 800666a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	4313      	orrs	r3, r2
 8006670:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 fa24 	bl	8006ac8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006688:	d102      	bne.n	8006690 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685a      	ldr	r2, [r3, #4]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006698:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800669c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80066a6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d010      	beq.n	80066d2 <HAL_DMA_Init+0x106>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	2b04      	cmp	r3, #4
 80066b6:	d80c      	bhi.n	80066d2 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 fa43 	bl	8006b44 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066c2:	2200      	movs	r2, #0
 80066c4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80066ce:	605a      	str	r2, [r3, #4]
 80066d0:	e008      	b.n	80066e4 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	40020407 	.word	0x40020407
 8006708:	bffdfff8 	.word	0xbffdfff8
 800670c:	cccccccd 	.word	0xcccccccd
 8006710:	40020000 	.word	0x40020000
 8006714:	bffdfbf8 	.word	0xbffdfbf8
 8006718:	40020400 	.word	0x40020400

0800671c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b086      	sub	sp, #24
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
 8006728:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800672a:	2300      	movs	r3, #0
 800672c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006734:	2b01      	cmp	r3, #1
 8006736:	d101      	bne.n	800673c <HAL_DMA_Start_IT+0x20>
 8006738:	2302      	movs	r3, #2
 800673a:	e066      	b.n	800680a <HAL_DMA_Start_IT+0xee>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800674a:	b2db      	uxtb	r3, r3
 800674c:	2b01      	cmp	r3, #1
 800674e:	d155      	bne.n	80067fc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2202      	movs	r2, #2
 8006754:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f022 0201 	bic.w	r2, r2, #1
 800676c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	68b9      	ldr	r1, [r7, #8]
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f000 f968 	bl	8006a4a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800677e:	2b00      	cmp	r3, #0
 8006780:	d008      	beq.n	8006794 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f042 020e 	orr.w	r2, r2, #14
 8006790:	601a      	str	r2, [r3, #0]
 8006792:	e00f      	b.n	80067b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f022 0204 	bic.w	r2, r2, #4
 80067a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f042 020a 	orr.w	r2, r2, #10
 80067b2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d007      	beq.n	80067d2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80067d0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d007      	beq.n	80067ea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80067e8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f042 0201 	orr.w	r2, r2, #1
 80067f8:	601a      	str	r2, [r3, #0]
 80067fa:	e005      	b.n	8006808 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006804:	2302      	movs	r3, #2
 8006806:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006808:	7dfb      	ldrb	r3, [r7, #23]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3718      	adds	r7, #24
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b084      	sub	sp, #16
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800681a:	2300      	movs	r3, #0
 800681c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b02      	cmp	r3, #2
 8006828:	d005      	beq.n	8006836 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2204      	movs	r2, #4
 800682e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	73fb      	strb	r3, [r7, #15]
 8006834:	e047      	b.n	80068c6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f022 020e 	bic.w	r2, r2, #14
 8006844:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f022 0201 	bic.w	r2, r2, #1
 8006854:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006860:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006864:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800686a:	f003 021c 	and.w	r2, r3, #28
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006872:	2101      	movs	r1, #1
 8006874:	fa01 f202 	lsl.w	r2, r1, r2
 8006878:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006882:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00c      	beq.n	80068a6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006896:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800689a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80068a4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d003      	beq.n	80068c6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	4798      	blx	r3
    }
  }
  return status;
 80068c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3710      	adds	r7, #16
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ec:	f003 031c 	and.w	r3, r3, #28
 80068f0:	2204      	movs	r2, #4
 80068f2:	409a      	lsls	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	4013      	ands	r3, r2
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d026      	beq.n	800694a <HAL_DMA_IRQHandler+0x7a>
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	f003 0304 	and.w	r3, r3, #4
 8006902:	2b00      	cmp	r3, #0
 8006904:	d021      	beq.n	800694a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0320 	and.w	r3, r3, #32
 8006910:	2b00      	cmp	r3, #0
 8006912:	d107      	bne.n	8006924 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f022 0204 	bic.w	r2, r2, #4
 8006922:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006928:	f003 021c 	and.w	r2, r3, #28
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006930:	2104      	movs	r1, #4
 8006932:	fa01 f202 	lsl.w	r2, r1, r2
 8006936:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800693c:	2b00      	cmp	r3, #0
 800693e:	d071      	beq.n	8006a24 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006948:	e06c      	b.n	8006a24 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800694e:	f003 031c 	and.w	r3, r3, #28
 8006952:	2202      	movs	r2, #2
 8006954:	409a      	lsls	r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	4013      	ands	r3, r2
 800695a:	2b00      	cmp	r3, #0
 800695c:	d02e      	beq.n	80069bc <HAL_DMA_IRQHandler+0xec>
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	f003 0302 	and.w	r3, r3, #2
 8006964:	2b00      	cmp	r3, #0
 8006966:	d029      	beq.n	80069bc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 0320 	and.w	r3, r3, #32
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10b      	bne.n	800698e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f022 020a 	bic.w	r2, r2, #10
 8006984:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006992:	f003 021c 	and.w	r2, r3, #28
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800699a:	2102      	movs	r1, #2
 800699c:	fa01 f202 	lsl.w	r2, r1, r2
 80069a0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d038      	beq.n	8006a24 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80069ba:	e033      	b.n	8006a24 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069c0:	f003 031c 	and.w	r3, r3, #28
 80069c4:	2208      	movs	r2, #8
 80069c6:	409a      	lsls	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	4013      	ands	r3, r2
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d02a      	beq.n	8006a26 <HAL_DMA_IRQHandler+0x156>
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	f003 0308 	and.w	r3, r3, #8
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d025      	beq.n	8006a26 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f022 020e 	bic.w	r2, r2, #14
 80069e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ee:	f003 021c 	and.w	r2, r3, #28
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069f6:	2101      	movs	r1, #1
 80069f8:	fa01 f202 	lsl.w	r2, r1, r2
 80069fc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2201      	movs	r2, #1
 8006a02:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d004      	beq.n	8006a26 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006a24:	bf00      	nop
 8006a26:	bf00      	nop
}
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b083      	sub	sp, #12
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006a3c:	b2db      	uxtb	r3, r3
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr

08006a4a <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b085      	sub	sp, #20
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	60f8      	str	r0, [r7, #12]
 8006a52:	60b9      	str	r1, [r7, #8]
 8006a54:	607a      	str	r2, [r7, #4]
 8006a56:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006a60:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d004      	beq.n	8006a74 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006a72:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a78:	f003 021c 	and.w	r2, r3, #28
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a80:	2101      	movs	r1, #1
 8006a82:	fa01 f202 	lsl.w	r2, r1, r2
 8006a86:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	683a      	ldr	r2, [r7, #0]
 8006a8e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	2b10      	cmp	r3, #16
 8006a96:	d108      	bne.n	8006aaa <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68ba      	ldr	r2, [r7, #8]
 8006aa6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006aa8:	e007      	b.n	8006aba <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68ba      	ldr	r2, [r7, #8]
 8006ab0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	60da      	str	r2, [r3, #12]
}
 8006aba:	bf00      	nop
 8006abc:	3714      	adds	r7, #20
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
	...

08006ac8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	4b17      	ldr	r3, [pc, #92]	@ (8006b34 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d80a      	bhi.n	8006af2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ae0:	089b      	lsrs	r3, r3, #2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ae8:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	6493      	str	r3, [r2, #72]	@ 0x48
 8006af0:	e007      	b.n	8006b02 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006af6:	089b      	lsrs	r3, r3, #2
 8006af8:	009a      	lsls	r2, r3, #2
 8006afa:	4b0f      	ldr	r3, [pc, #60]	@ (8006b38 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006afc:	4413      	add	r3, r2
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	3b08      	subs	r3, #8
 8006b0a:	4a0c      	ldr	r2, [pc, #48]	@ (8006b3c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b10:	091b      	lsrs	r3, r3, #4
 8006b12:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a0a      	ldr	r2, [pc, #40]	@ (8006b40 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006b18:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f003 031f 	and.w	r3, r3, #31
 8006b20:	2201      	movs	r2, #1
 8006b22:	409a      	lsls	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006b28:	bf00      	nop
 8006b2a:	3714      	adds	r7, #20
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr
 8006b34:	40020407 	.word	0x40020407
 8006b38:	4002081c 	.word	0x4002081c
 8006b3c:	cccccccd 	.word	0xcccccccd
 8006b40:	40020880 	.word	0x40020880

08006b44 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b54:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	4b0b      	ldr	r3, [pc, #44]	@ (8006b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006b5a:	4413      	add	r3, r2
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	461a      	mov	r2, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a09      	ldr	r2, [pc, #36]	@ (8006b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8006b68:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	3b01      	subs	r3, #1
 8006b6e:	f003 0303 	and.w	r3, r3, #3
 8006b72:	2201      	movs	r2, #1
 8006b74:	409a      	lsls	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006b7a:	bf00      	nop
 8006b7c:	3714      	adds	r7, #20
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop
 8006b88:	1000823f 	.word	0x1000823f
 8006b8c:	40020940 	.word	0x40020940

08006b90 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b087      	sub	sp, #28
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006b9e:	e14c      	b.n	8006e3a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	2101      	movs	r1, #1
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8006bac:	4013      	ands	r3, r2
 8006bae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	f000 813e 	beq.w	8006e34 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	f003 0303 	and.w	r3, r3, #3
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d005      	beq.n	8006bd0 <HAL_GPIO_Init+0x40>
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	f003 0303 	and.w	r3, r3, #3
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d130      	bne.n	8006c32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	005b      	lsls	r3, r3, #1
 8006bda:	2203      	movs	r2, #3
 8006bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8006be0:	43db      	mvns	r3, r3
 8006be2:	693a      	ldr	r2, [r7, #16]
 8006be4:	4013      	ands	r3, r2
 8006be6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	68da      	ldr	r2, [r3, #12]
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	005b      	lsls	r3, r3, #1
 8006bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	693a      	ldr	r2, [r7, #16]
 8006bfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006c06:	2201      	movs	r2, #1
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c0e:	43db      	mvns	r3, r3
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	4013      	ands	r3, r2
 8006c14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	091b      	lsrs	r3, r3, #4
 8006c1c:	f003 0201 	and.w	r2, r3, #1
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	fa02 f303 	lsl.w	r3, r2, r3
 8006c26:	693a      	ldr	r2, [r7, #16]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	693a      	ldr	r2, [r7, #16]
 8006c30:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	f003 0303 	and.w	r3, r3, #3
 8006c3a:	2b03      	cmp	r3, #3
 8006c3c:	d017      	beq.n	8006c6e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	005b      	lsls	r3, r3, #1
 8006c48:	2203      	movs	r2, #3
 8006c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c4e:	43db      	mvns	r3, r3
 8006c50:	693a      	ldr	r2, [r7, #16]
 8006c52:	4013      	ands	r3, r2
 8006c54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	689a      	ldr	r2, [r3, #8]
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	005b      	lsls	r3, r3, #1
 8006c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c62:	693a      	ldr	r2, [r7, #16]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	693a      	ldr	r2, [r7, #16]
 8006c6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	f003 0303 	and.w	r3, r3, #3
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	d123      	bne.n	8006cc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	08da      	lsrs	r2, r3, #3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	3208      	adds	r2, #8
 8006c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f003 0307 	and.w	r3, r3, #7
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	220f      	movs	r2, #15
 8006c92:	fa02 f303 	lsl.w	r3, r2, r3
 8006c96:	43db      	mvns	r3, r3
 8006c98:	693a      	ldr	r2, [r7, #16]
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	691a      	ldr	r2, [r3, #16]
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	f003 0307 	and.w	r3, r3, #7
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	fa02 f303 	lsl.w	r3, r2, r3
 8006cae:	693a      	ldr	r2, [r7, #16]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	08da      	lsrs	r2, r3, #3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	3208      	adds	r2, #8
 8006cbc:	6939      	ldr	r1, [r7, #16]
 8006cbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	005b      	lsls	r3, r3, #1
 8006ccc:	2203      	movs	r2, #3
 8006cce:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd2:	43db      	mvns	r3, r3
 8006cd4:	693a      	ldr	r2, [r7, #16]
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	f003 0203 	and.w	r2, r3, #3
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	005b      	lsls	r3, r3, #1
 8006ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cea:	693a      	ldr	r2, [r7, #16]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	693a      	ldr	r2, [r7, #16]
 8006cf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	f000 8098 	beq.w	8006e34 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8006d04:	4a54      	ldr	r2, [pc, #336]	@ (8006e58 <HAL_GPIO_Init+0x2c8>)
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	089b      	lsrs	r3, r3, #2
 8006d0a:	3302      	adds	r3, #2
 8006d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	f003 0303 	and.w	r3, r3, #3
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	220f      	movs	r2, #15
 8006d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d20:	43db      	mvns	r3, r3
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	4013      	ands	r3, r2
 8006d26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006d2e:	d019      	beq.n	8006d64 <HAL_GPIO_Init+0x1d4>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a4a      	ldr	r2, [pc, #296]	@ (8006e5c <HAL_GPIO_Init+0x2cc>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d013      	beq.n	8006d60 <HAL_GPIO_Init+0x1d0>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a49      	ldr	r2, [pc, #292]	@ (8006e60 <HAL_GPIO_Init+0x2d0>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d00d      	beq.n	8006d5c <HAL_GPIO_Init+0x1cc>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a48      	ldr	r2, [pc, #288]	@ (8006e64 <HAL_GPIO_Init+0x2d4>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d007      	beq.n	8006d58 <HAL_GPIO_Init+0x1c8>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a47      	ldr	r2, [pc, #284]	@ (8006e68 <HAL_GPIO_Init+0x2d8>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d101      	bne.n	8006d54 <HAL_GPIO_Init+0x1c4>
 8006d50:	2304      	movs	r3, #4
 8006d52:	e008      	b.n	8006d66 <HAL_GPIO_Init+0x1d6>
 8006d54:	2307      	movs	r3, #7
 8006d56:	e006      	b.n	8006d66 <HAL_GPIO_Init+0x1d6>
 8006d58:	2303      	movs	r3, #3
 8006d5a:	e004      	b.n	8006d66 <HAL_GPIO_Init+0x1d6>
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	e002      	b.n	8006d66 <HAL_GPIO_Init+0x1d6>
 8006d60:	2301      	movs	r3, #1
 8006d62:	e000      	b.n	8006d66 <HAL_GPIO_Init+0x1d6>
 8006d64:	2300      	movs	r3, #0
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	f002 0203 	and.w	r2, r2, #3
 8006d6c:	0092      	lsls	r2, r2, #2
 8006d6e:	4093      	lsls	r3, r2
 8006d70:	693a      	ldr	r2, [r7, #16]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006d76:	4938      	ldr	r1, [pc, #224]	@ (8006e58 <HAL_GPIO_Init+0x2c8>)
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	089b      	lsrs	r3, r3, #2
 8006d7c:	3302      	adds	r3, #2
 8006d7e:	693a      	ldr	r2, [r7, #16]
 8006d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006d84:	4b39      	ldr	r3, [pc, #228]	@ (8006e6c <HAL_GPIO_Init+0x2dc>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	43db      	mvns	r3, r3
 8006d8e:	693a      	ldr	r2, [r7, #16]
 8006d90:	4013      	ands	r3, r2
 8006d92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d003      	beq.n	8006da8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006da8:	4a30      	ldr	r2, [pc, #192]	@ (8006e6c <HAL_GPIO_Init+0x2dc>)
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006dae:	4b2f      	ldr	r3, [pc, #188]	@ (8006e6c <HAL_GPIO_Init+0x2dc>)
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	43db      	mvns	r3, r3
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	4013      	ands	r3, r2
 8006dbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d003      	beq.n	8006dd2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8006dca:	693a      	ldr	r2, [r7, #16]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006dd2:	4a26      	ldr	r2, [pc, #152]	@ (8006e6c <HAL_GPIO_Init+0x2dc>)
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006dd8:	4b24      	ldr	r3, [pc, #144]	@ (8006e6c <HAL_GPIO_Init+0x2dc>)
 8006dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	43db      	mvns	r3, r3
 8006de4:	693a      	ldr	r2, [r7, #16]
 8006de6:	4013      	ands	r3, r2
 8006de8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d003      	beq.n	8006dfe <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006dfe:	4a1b      	ldr	r2, [pc, #108]	@ (8006e6c <HAL_GPIO_Init+0x2dc>)
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8006e06:	4b19      	ldr	r3, [pc, #100]	@ (8006e6c <HAL_GPIO_Init+0x2dc>)
 8006e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	43db      	mvns	r3, r3
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	4013      	ands	r3, r2
 8006e16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d003      	beq.n	8006e2c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8006e24:	693a      	ldr	r2, [r7, #16]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006e2c:	4a0f      	ldr	r2, [pc, #60]	@ (8006e6c <HAL_GPIO_Init+0x2dc>)
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	3301      	adds	r3, #1
 8006e38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	fa22 f303 	lsr.w	r3, r2, r3
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f47f aeab 	bne.w	8006ba0 <HAL_GPIO_Init+0x10>
  }
}
 8006e4a:	bf00      	nop
 8006e4c:	bf00      	nop
 8006e4e:	371c      	adds	r7, #28
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr
 8006e58:	40010000 	.word	0x40010000
 8006e5c:	48000400 	.word	0x48000400
 8006e60:	48000800 	.word	0x48000800
 8006e64:	48000c00 	.word	0x48000c00
 8006e68:	48001000 	.word	0x48001000
 8006e6c:	58000800 	.word	0x58000800

08006e70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	460b      	mov	r3, r1
 8006e7a:	807b      	strh	r3, [r7, #2]
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006e80:	787b      	ldrb	r3, [r7, #1]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d003      	beq.n	8006e8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006e86:	887a      	ldrh	r2, [r7, #2]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006e8c:	e002      	b.n	8006e94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006e8e:	887a      	ldrh	r2, [r7, #2]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006e94:	bf00      	nop
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	695b      	ldr	r3, [r3, #20]
 8006eb0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006eb2:	887a      	ldrh	r2, [r7, #2]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	041a      	lsls	r2, r3, #16
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	43d9      	mvns	r1, r3
 8006ebe:	887b      	ldrh	r3, [r7, #2]
 8006ec0:	400b      	ands	r3, r1
 8006ec2:	431a      	orrs	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	619a      	str	r2, [r3, #24]
}
 8006ec8:	bf00      	nop
 8006eca:	3714      	adds	r7, #20
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	4603      	mov	r3, r0
 8006edc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006ede:	4b08      	ldr	r3, [pc, #32]	@ (8006f00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006ee0:	68da      	ldr	r2, [r3, #12]
 8006ee2:	88fb      	ldrh	r3, [r7, #6]
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d006      	beq.n	8006ef8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006eea:	4a05      	ldr	r2, [pc, #20]	@ (8006f00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006eec:	88fb      	ldrh	r3, [r7, #6]
 8006eee:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006ef0:	88fb      	ldrh	r3, [r7, #6]
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f000 f806 	bl	8006f04 <HAL_GPIO_EXTI_Callback>
  }
}
 8006ef8:	bf00      	nop
 8006efa:	3708      	adds	r7, #8
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	58000800 	.word	0x58000800

08006f04 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006f0e:	bf00      	nop
 8006f10:	370c      	adds	r7, #12
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr

08006f1a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006f1a:	b580      	push	{r7, lr}
 8006f1c:	b082      	sub	sp, #8
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d101      	bne.n	8006f2c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e08d      	b.n	8007048 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d106      	bne.n	8006f46 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f7fd fae3 	bl	800450c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2224      	movs	r2, #36	@ 0x24
 8006f4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f022 0201 	bic.w	r2, r2, #1
 8006f5c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685a      	ldr	r2, [r3, #4]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006f6a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	689a      	ldr	r2, [r3, #8]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006f7a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d107      	bne.n	8006f94 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	689a      	ldr	r2, [r3, #8]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006f90:	609a      	str	r2, [r3, #8]
 8006f92:	e006      	b.n	8006fa2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	689a      	ldr	r2, [r3, #8]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006fa0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	2b02      	cmp	r3, #2
 8006fa8:	d108      	bne.n	8006fbc <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	685a      	ldr	r2, [r3, #4]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006fb8:	605a      	str	r2, [r3, #4]
 8006fba:	e007      	b.n	8006fcc <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	685a      	ldr	r2, [r3, #4]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006fca:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	6812      	ldr	r2, [r2, #0]
 8006fd6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006fda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fde:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68da      	ldr	r2, [r3, #12]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006fee:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	691a      	ldr	r2, [r3, #16]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	695b      	ldr	r3, [r3, #20]
 8006ff8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	699b      	ldr	r3, [r3, #24]
 8007000:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	430a      	orrs	r2, r1
 8007008:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	69d9      	ldr	r1, [r3, #28]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a1a      	ldr	r2, [r3, #32]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	430a      	orrs	r2, r1
 8007018:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f042 0201 	orr.w	r2, r2, #1
 8007028:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2220      	movs	r2, #32
 8007034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	3708      	adds	r7, #8
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b088      	sub	sp, #32
 8007054:	af02      	add	r7, sp, #8
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	607a      	str	r2, [r7, #4]
 800705a:	461a      	mov	r2, r3
 800705c:	460b      	mov	r3, r1
 800705e:	817b      	strh	r3, [r7, #10]
 8007060:	4613      	mov	r3, r2
 8007062:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800706a:	b2db      	uxtb	r3, r3
 800706c:	2b20      	cmp	r3, #32
 800706e:	f040 80fd 	bne.w	800726c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007078:	2b01      	cmp	r3, #1
 800707a:	d101      	bne.n	8007080 <HAL_I2C_Master_Transmit+0x30>
 800707c:	2302      	movs	r3, #2
 800707e:	e0f6      	b.n	800726e <HAL_I2C_Master_Transmit+0x21e>
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007088:	f7fd feb8 	bl	8004dfc <HAL_GetTick>
 800708c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	9300      	str	r3, [sp, #0]
 8007092:	2319      	movs	r3, #25
 8007094:	2201      	movs	r2, #1
 8007096:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f000 ff85 	bl	8007faa <I2C_WaitOnFlagUntilTimeout>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d001      	beq.n	80070aa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e0e1      	b.n	800726e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2221      	movs	r2, #33	@ 0x21
 80070ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2210      	movs	r2, #16
 80070b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2200      	movs	r2, #0
 80070be:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	893a      	ldrh	r2, [r7, #8]
 80070ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2200      	movs	r2, #0
 80070d0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	2bff      	cmp	r3, #255	@ 0xff
 80070da:	d906      	bls.n	80070ea <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	22ff      	movs	r2, #255	@ 0xff
 80070e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80070e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80070e6:	617b      	str	r3, [r7, #20]
 80070e8:	e007      	b.n	80070fa <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070ee:	b29a      	uxth	r2, r3
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80070f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80070f8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d024      	beq.n	800714c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007106:	781a      	ldrb	r2, [r3, #0]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007112:	1c5a      	adds	r2, r3, #1
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800711c:	b29b      	uxth	r3, r3
 800711e:	3b01      	subs	r3, #1
 8007120:	b29a      	uxth	r2, r3
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800712a:	3b01      	subs	r3, #1
 800712c:	b29a      	uxth	r2, r3
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007136:	b2db      	uxtb	r3, r3
 8007138:	3301      	adds	r3, #1
 800713a:	b2da      	uxtb	r2, r3
 800713c:	8979      	ldrh	r1, [r7, #10]
 800713e:	4b4e      	ldr	r3, [pc, #312]	@ (8007278 <HAL_I2C_Master_Transmit+0x228>)
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	68f8      	ldr	r0, [r7, #12]
 8007146:	f001 f97f 	bl	8008448 <I2C_TransferConfig>
 800714a:	e066      	b.n	800721a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007150:	b2da      	uxtb	r2, r3
 8007152:	8979      	ldrh	r1, [r7, #10]
 8007154:	4b48      	ldr	r3, [pc, #288]	@ (8007278 <HAL_I2C_Master_Transmit+0x228>)
 8007156:	9300      	str	r3, [sp, #0]
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f001 f974 	bl	8008448 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007160:	e05b      	b.n	800721a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007162:	693a      	ldr	r2, [r7, #16]
 8007164:	6a39      	ldr	r1, [r7, #32]
 8007166:	68f8      	ldr	r0, [r7, #12]
 8007168:	f000 ff78 	bl	800805c <I2C_WaitOnTXISFlagUntilTimeout>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d001      	beq.n	8007176 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e07b      	b.n	800726e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800717a:	781a      	ldrb	r2, [r3, #0]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007186:	1c5a      	adds	r2, r3, #1
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007190:	b29b      	uxth	r3, r3
 8007192:	3b01      	subs	r3, #1
 8007194:	b29a      	uxth	r2, r3
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800719e:	3b01      	subs	r3, #1
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d034      	beq.n	800721a <HAL_I2C_Master_Transmit+0x1ca>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d130      	bne.n	800721a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	9300      	str	r3, [sp, #0]
 80071bc:	6a3b      	ldr	r3, [r7, #32]
 80071be:	2200      	movs	r2, #0
 80071c0:	2180      	movs	r1, #128	@ 0x80
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f000 fef1 	bl	8007faa <I2C_WaitOnFlagUntilTimeout>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d001      	beq.n	80071d2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e04d      	b.n	800726e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	2bff      	cmp	r3, #255	@ 0xff
 80071da:	d90e      	bls.n	80071fa <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	22ff      	movs	r2, #255	@ 0xff
 80071e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071e6:	b2da      	uxtb	r2, r3
 80071e8:	8979      	ldrh	r1, [r7, #10]
 80071ea:	2300      	movs	r3, #0
 80071ec:	9300      	str	r3, [sp, #0]
 80071ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	f001 f928 	bl	8008448 <I2C_TransferConfig>
 80071f8:	e00f      	b.n	800721a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071fe:	b29a      	uxth	r2, r3
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007208:	b2da      	uxtb	r2, r3
 800720a:	8979      	ldrh	r1, [r7, #10]
 800720c:	2300      	movs	r3, #0
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	f001 f917 	bl	8008448 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800721e:	b29b      	uxth	r3, r3
 8007220:	2b00      	cmp	r3, #0
 8007222:	d19e      	bne.n	8007162 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	6a39      	ldr	r1, [r7, #32]
 8007228:	68f8      	ldr	r0, [r7, #12]
 800722a:	f000 ff5e 	bl	80080ea <I2C_WaitOnSTOPFlagUntilTimeout>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d001      	beq.n	8007238 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	e01a      	b.n	800726e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2220      	movs	r2, #32
 800723e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	6859      	ldr	r1, [r3, #4]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	4b0c      	ldr	r3, [pc, #48]	@ (800727c <HAL_I2C_Master_Transmit+0x22c>)
 800724c:	400b      	ands	r3, r1
 800724e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2220      	movs	r2, #32
 8007254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007268:	2300      	movs	r3, #0
 800726a:	e000      	b.n	800726e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800726c:	2302      	movs	r3, #2
  }
}
 800726e:	4618      	mov	r0, r3
 8007270:	3718      	adds	r7, #24
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	80002000 	.word	0x80002000
 800727c:	fe00e800 	.word	0xfe00e800

08007280 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b088      	sub	sp, #32
 8007284:	af02      	add	r7, sp, #8
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	607a      	str	r2, [r7, #4]
 800728a:	461a      	mov	r2, r3
 800728c:	460b      	mov	r3, r1
 800728e:	817b      	strh	r3, [r7, #10]
 8007290:	4613      	mov	r3, r2
 8007292:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800729a:	b2db      	uxtb	r3, r3
 800729c:	2b20      	cmp	r3, #32
 800729e:	f040 80db 	bne.w	8007458 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d101      	bne.n	80072b0 <HAL_I2C_Master_Receive+0x30>
 80072ac:	2302      	movs	r3, #2
 80072ae:	e0d4      	b.n	800745a <HAL_I2C_Master_Receive+0x1da>
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80072b8:	f7fd fda0 	bl	8004dfc <HAL_GetTick>
 80072bc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	9300      	str	r3, [sp, #0]
 80072c2:	2319      	movs	r3, #25
 80072c4:	2201      	movs	r2, #1
 80072c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	f000 fe6d 	bl	8007faa <I2C_WaitOnFlagUntilTimeout>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d001      	beq.n	80072da <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e0bf      	b.n	800745a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2222      	movs	r2, #34	@ 0x22
 80072de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2210      	movs	r2, #16
 80072e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2200      	movs	r2, #0
 80072ee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	893a      	ldrh	r2, [r7, #8]
 80072fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2200      	movs	r2, #0
 8007300:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007306:	b29b      	uxth	r3, r3
 8007308:	2bff      	cmp	r3, #255	@ 0xff
 800730a:	d90e      	bls.n	800732a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	22ff      	movs	r2, #255	@ 0xff
 8007310:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007316:	b2da      	uxtb	r2, r3
 8007318:	8979      	ldrh	r1, [r7, #10]
 800731a:	4b52      	ldr	r3, [pc, #328]	@ (8007464 <HAL_I2C_Master_Receive+0x1e4>)
 800731c:	9300      	str	r3, [sp, #0]
 800731e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007322:	68f8      	ldr	r0, [r7, #12]
 8007324:	f001 f890 	bl	8008448 <I2C_TransferConfig>
 8007328:	e06d      	b.n	8007406 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800732e:	b29a      	uxth	r2, r3
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007338:	b2da      	uxtb	r2, r3
 800733a:	8979      	ldrh	r1, [r7, #10]
 800733c:	4b49      	ldr	r3, [pc, #292]	@ (8007464 <HAL_I2C_Master_Receive+0x1e4>)
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f001 f87f 	bl	8008448 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800734a:	e05c      	b.n	8007406 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800734c:	697a      	ldr	r2, [r7, #20]
 800734e:	6a39      	ldr	r1, [r7, #32]
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f000 ff0d 	bl	8008170 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d001      	beq.n	8007360 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	e07c      	b.n	800745a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800736a:	b2d2      	uxtb	r2, r2
 800736c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007372:	1c5a      	adds	r2, r3, #1
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800737c:	3b01      	subs	r3, #1
 800737e:	b29a      	uxth	r2, r3
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007388:	b29b      	uxth	r3, r3
 800738a:	3b01      	subs	r3, #1
 800738c:	b29a      	uxth	r2, r3
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007396:	b29b      	uxth	r3, r3
 8007398:	2b00      	cmp	r3, #0
 800739a:	d034      	beq.n	8007406 <HAL_I2C_Master_Receive+0x186>
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d130      	bne.n	8007406 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	9300      	str	r3, [sp, #0]
 80073a8:	6a3b      	ldr	r3, [r7, #32]
 80073aa:	2200      	movs	r2, #0
 80073ac:	2180      	movs	r1, #128	@ 0x80
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	f000 fdfb 	bl	8007faa <I2C_WaitOnFlagUntilTimeout>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d001      	beq.n	80073be <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	e04d      	b.n	800745a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	2bff      	cmp	r3, #255	@ 0xff
 80073c6:	d90e      	bls.n	80073e6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	22ff      	movs	r2, #255	@ 0xff
 80073cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073d2:	b2da      	uxtb	r2, r3
 80073d4:	8979      	ldrh	r1, [r7, #10]
 80073d6:	2300      	movs	r3, #0
 80073d8:	9300      	str	r3, [sp, #0]
 80073da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	f001 f832 	bl	8008448 <I2C_TransferConfig>
 80073e4:	e00f      	b.n	8007406 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073f4:	b2da      	uxtb	r2, r3
 80073f6:	8979      	ldrh	r1, [r7, #10]
 80073f8:	2300      	movs	r3, #0
 80073fa:	9300      	str	r3, [sp, #0]
 80073fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007400:	68f8      	ldr	r0, [r7, #12]
 8007402:	f001 f821 	bl	8008448 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800740a:	b29b      	uxth	r3, r3
 800740c:	2b00      	cmp	r3, #0
 800740e:	d19d      	bne.n	800734c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007410:	697a      	ldr	r2, [r7, #20]
 8007412:	6a39      	ldr	r1, [r7, #32]
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f000 fe68 	bl	80080ea <I2C_WaitOnSTOPFlagUntilTimeout>
 800741a:	4603      	mov	r3, r0
 800741c:	2b00      	cmp	r3, #0
 800741e:	d001      	beq.n	8007424 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	e01a      	b.n	800745a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2220      	movs	r2, #32
 800742a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	6859      	ldr	r1, [r3, #4]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	4b0c      	ldr	r3, [pc, #48]	@ (8007468 <HAL_I2C_Master_Receive+0x1e8>)
 8007438:	400b      	ands	r3, r1
 800743a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2220      	movs	r2, #32
 8007440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2200      	movs	r2, #0
 8007448:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2200      	movs	r2, #0
 8007450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007454:	2300      	movs	r3, #0
 8007456:	e000      	b.n	800745a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007458:	2302      	movs	r3, #2
  }
}
 800745a:	4618      	mov	r0, r3
 800745c:	3718      	adds	r7, #24
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	80002400 	.word	0x80002400
 8007468:	fe00e800 	.word	0xfe00e800

0800746c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007488:	2b00      	cmp	r3, #0
 800748a:	d005      	beq.n	8007498 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007490:	68ba      	ldr	r2, [r7, #8]
 8007492:	68f9      	ldr	r1, [r7, #12]
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	4798      	blx	r3
  }
}
 8007498:	bf00      	nop
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b086      	sub	sp, #24
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	699b      	ldr	r3, [r3, #24]
 80074ae:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00f      	beq.n	80074e2 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d00a      	beq.n	80074e2 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074d0:	f043 0201 	orr.w	r2, r3, #1
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80074e0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00f      	beq.n	800750c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00a      	beq.n	800750c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074fa:	f043 0208 	orr.w	r2, r3, #8
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800750a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00f      	beq.n	8007536 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00a      	beq.n	8007536 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007524:	f043 0202 	orr.w	r2, r3, #2
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007534:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800753a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f003 030b 	and.w	r3, r3, #11
 8007542:	2b00      	cmp	r3, #0
 8007544:	d003      	beq.n	800754e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8007546:	68f9      	ldr	r1, [r7, #12]
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 fbd5 	bl	8007cf8 <I2C_ITError>
  }
}
 800754e:	bf00      	nop
 8007550:	3718      	adds	r7, #24
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007556:	b480      	push	{r7}
 8007558:	b083      	sub	sp, #12
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800755e:	bf00      	nop
 8007560:	370c      	adds	r7, #12
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr

0800756a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800756a:	b480      	push	{r7}
 800756c:	b083      	sub	sp, #12
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007572:	bf00      	nop
 8007574:	370c      	adds	r7, #12
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr

0800757e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800757e:	b480      	push	{r7}
 8007580:	b083      	sub	sp, #12
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
 8007586:	460b      	mov	r3, r1
 8007588:	70fb      	strb	r3, [r7, #3]
 800758a:	4613      	mov	r3, r2
 800758c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800758e:	bf00      	nop
 8007590:	370c      	adds	r7, #12
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr

0800759a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800759a:	b480      	push	{r7}
 800759c:	b083      	sub	sp, #12
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80075a2:	bf00      	nop
 80075a4:	370c      	adds	r7, #12
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr

080075ae <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80075ae:	b480      	push	{r7}
 80075b0:	b083      	sub	sp, #12
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80075b6:	bf00      	nop
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80075c2:	b480      	push	{r7}
 80075c4:	b083      	sub	sp, #12
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80075ca:	bf00      	nop
 80075cc:	370c      	adds	r7, #12
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr

080075d6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b086      	sub	sp, #24
 80075da:	af00      	add	r7, sp, #0
 80075dc:	60f8      	str	r0, [r7, #12]
 80075de:	60b9      	str	r1, [r7, #8]
 80075e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d101      	bne.n	80075fa <I2C_Slave_ISR_IT+0x24>
 80075f6:	2302      	movs	r3, #2
 80075f8:	e0e2      	b.n	80077c0 <I2C_Slave_ISR_IT+0x1ea>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2201      	movs	r2, #1
 80075fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	f003 0320 	and.w	r3, r3, #32
 8007608:	2b00      	cmp	r3, #0
 800760a:	d009      	beq.n	8007620 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007612:	2b00      	cmp	r3, #0
 8007614:	d004      	beq.n	8007620 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007616:	6939      	ldr	r1, [r7, #16]
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f000 f9b5 	bl	8007988 <I2C_ITSlaveCplt>
 800761e:	e0ca      	b.n	80077b6 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	f003 0310 	and.w	r3, r3, #16
 8007626:	2b00      	cmp	r3, #0
 8007628:	d04b      	beq.n	80076c2 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007630:	2b00      	cmp	r3, #0
 8007632:	d046      	beq.n	80076c2 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007638:	b29b      	uxth	r3, r3
 800763a:	2b00      	cmp	r3, #0
 800763c:	d128      	bne.n	8007690 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007644:	b2db      	uxtb	r3, r3
 8007646:	2b28      	cmp	r3, #40	@ 0x28
 8007648:	d108      	bne.n	800765c <I2C_Slave_ISR_IT+0x86>
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007650:	d104      	bne.n	800765c <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007652:	6939      	ldr	r1, [r7, #16]
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f000 fafb 	bl	8007c50 <I2C_ITListenCplt>
 800765a:	e031      	b.n	80076c0 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007662:	b2db      	uxtb	r3, r3
 8007664:	2b29      	cmp	r3, #41	@ 0x29
 8007666:	d10e      	bne.n	8007686 <I2C_Slave_ISR_IT+0xb0>
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800766e:	d00a      	beq.n	8007686 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2210      	movs	r2, #16
 8007676:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f000 fc54 	bl	8007f26 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f000 f926 	bl	80078d0 <I2C_ITSlaveSeqCplt>
 8007684:	e01c      	b.n	80076c0 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2210      	movs	r2, #16
 800768c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800768e:	e08f      	b.n	80077b0 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2210      	movs	r2, #16
 8007696:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800769c:	f043 0204 	orr.w	r2, r3, #4
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d003      	beq.n	80076b2 <I2C_Slave_ISR_IT+0xdc>
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80076b0:	d17e      	bne.n	80077b0 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076b6:	4619      	mov	r1, r3
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	f000 fb1d 	bl	8007cf8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80076be:	e077      	b.n	80077b0 <I2C_Slave_ISR_IT+0x1da>
 80076c0:	e076      	b.n	80077b0 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	f003 0304 	and.w	r3, r3, #4
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d02f      	beq.n	800772c <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d02a      	beq.n	800772c <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076da:	b29b      	uxth	r3, r3
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d018      	beq.n	8007712 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ea:	b2d2      	uxtb	r2, r2
 80076ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076f2:	1c5a      	adds	r2, r3, #1
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076fc:	3b01      	subs	r3, #1
 80076fe:	b29a      	uxth	r2, r3
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007708:	b29b      	uxth	r3, r3
 800770a:	3b01      	subs	r3, #1
 800770c:	b29a      	uxth	r2, r3
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007716:	b29b      	uxth	r3, r3
 8007718:	2b00      	cmp	r3, #0
 800771a:	d14b      	bne.n	80077b4 <I2C_Slave_ISR_IT+0x1de>
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007722:	d047      	beq.n	80077b4 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007724:	68f8      	ldr	r0, [r7, #12]
 8007726:	f000 f8d3 	bl	80078d0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800772a:	e043      	b.n	80077b4 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	f003 0308 	and.w	r3, r3, #8
 8007732:	2b00      	cmp	r3, #0
 8007734:	d009      	beq.n	800774a <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800773c:	2b00      	cmp	r3, #0
 800773e:	d004      	beq.n	800774a <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007740:	6939      	ldr	r1, [r7, #16]
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f000 f840 	bl	80077c8 <I2C_ITAddrCplt>
 8007748:	e035      	b.n	80077b6 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	f003 0302 	and.w	r3, r3, #2
 8007750:	2b00      	cmp	r3, #0
 8007752:	d030      	beq.n	80077b6 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800775a:	2b00      	cmp	r3, #0
 800775c:	d02b      	beq.n	80077b6 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007762:	b29b      	uxth	r3, r3
 8007764:	2b00      	cmp	r3, #0
 8007766:	d018      	beq.n	800779a <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800776c:	781a      	ldrb	r2, [r3, #0]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007778:	1c5a      	adds	r2, r3, #1
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007782:	b29b      	uxth	r3, r3
 8007784:	3b01      	subs	r3, #1
 8007786:	b29a      	uxth	r2, r3
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007790:	3b01      	subs	r3, #1
 8007792:	b29a      	uxth	r2, r3
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007798:	e00d      	b.n	80077b6 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80077a0:	d002      	beq.n	80077a8 <I2C_Slave_ISR_IT+0x1d2>
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d106      	bne.n	80077b6 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f000 f891 	bl	80078d0 <I2C_ITSlaveSeqCplt>
 80077ae:	e002      	b.n	80077b6 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80077b0:	bf00      	nop
 80077b2:	e000      	b.n	80077b6 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80077b4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3718      	adds	r7, #24
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80077de:	2b28      	cmp	r3, #40	@ 0x28
 80077e0:	d16a      	bne.n	80078b8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	699b      	ldr	r3, [r3, #24]
 80077e8:	0c1b      	lsrs	r3, r3, #16
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	f003 0301 	and.w	r3, r3, #1
 80077f0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	699b      	ldr	r3, [r3, #24]
 80077f8:	0c1b      	lsrs	r3, r3, #16
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007800:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	b29b      	uxth	r3, r3
 800780a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800780e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	b29b      	uxth	r3, r3
 8007818:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800781c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	2b02      	cmp	r3, #2
 8007824:	d138      	bne.n	8007898 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007826:	897b      	ldrh	r3, [r7, #10]
 8007828:	09db      	lsrs	r3, r3, #7
 800782a:	b29a      	uxth	r2, r3
 800782c:	89bb      	ldrh	r3, [r7, #12]
 800782e:	4053      	eors	r3, r2
 8007830:	b29b      	uxth	r3, r3
 8007832:	f003 0306 	and.w	r3, r3, #6
 8007836:	2b00      	cmp	r3, #0
 8007838:	d11c      	bne.n	8007874 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800783a:	897b      	ldrh	r3, [r7, #10]
 800783c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007842:	1c5a      	adds	r2, r3, #1
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800784c:	2b02      	cmp	r3, #2
 800784e:	d13b      	bne.n	80078c8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2208      	movs	r2, #8
 800785c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007866:	89ba      	ldrh	r2, [r7, #12]
 8007868:	7bfb      	ldrb	r3, [r7, #15]
 800786a:	4619      	mov	r1, r3
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f7ff fe86 	bl	800757e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007872:	e029      	b.n	80078c8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8007874:	893b      	ldrh	r3, [r7, #8]
 8007876:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007878:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 fe15 	bl	80084ac <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800788a:	89ba      	ldrh	r2, [r7, #12]
 800788c:	7bfb      	ldrb	r3, [r7, #15]
 800788e:	4619      	mov	r1, r3
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f7ff fe74 	bl	800757e <HAL_I2C_AddrCallback>
}
 8007896:	e017      	b.n	80078c8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007898:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 fe05 	bl	80084ac <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80078aa:	89ba      	ldrh	r2, [r7, #12]
 80078ac:	7bfb      	ldrb	r3, [r7, #15]
 80078ae:	4619      	mov	r1, r3
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f7ff fe64 	bl	800757e <HAL_I2C_AddrCallback>
}
 80078b6:	e007      	b.n	80078c8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2208      	movs	r2, #8
 80078be:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80078c8:	bf00      	nop
 80078ca:	3710      	adds	r7, #16
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d008      	beq.n	8007904 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007900:	601a      	str	r2, [r3, #0]
 8007902:	e00c      	b.n	800791e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800790a:	2b00      	cmp	r3, #0
 800790c:	d007      	beq.n	800791e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800791c:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2b29      	cmp	r3, #41	@ 0x29
 8007928:	d112      	bne.n	8007950 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2228      	movs	r2, #40	@ 0x28
 800792e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2221      	movs	r2, #33	@ 0x21
 8007936:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007938:	2101      	movs	r1, #1
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 fdb6 	bl	80084ac <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f7ff fe04 	bl	8007556 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800794e:	e017      	b.n	8007980 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007956:	b2db      	uxtb	r3, r3
 8007958:	2b2a      	cmp	r3, #42	@ 0x2a
 800795a:	d111      	bne.n	8007980 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2228      	movs	r2, #40	@ 0x28
 8007960:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2222      	movs	r2, #34	@ 0x22
 8007968:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800796a:	2102      	movs	r1, #2
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 fd9d 	bl	80084ac <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f7ff fdf5 	bl	800756a <HAL_I2C_SlaveRxCpltCallback>
}
 8007980:	bf00      	nop
 8007982:	3710      	adds	r7, #16
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b086      	sub	sp, #24
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079a2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079aa:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2220      	movs	r2, #32
 80079b2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80079b4:	7afb      	ldrb	r3, [r7, #11]
 80079b6:	2b21      	cmp	r3, #33	@ 0x21
 80079b8:	d002      	beq.n	80079c0 <I2C_ITSlaveCplt+0x38>
 80079ba:	7afb      	ldrb	r3, [r7, #11]
 80079bc:	2b29      	cmp	r3, #41	@ 0x29
 80079be:	d108      	bne.n	80079d2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80079c0:	f248 0101 	movw	r1, #32769	@ 0x8001
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 fd71 	bl	80084ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2221      	movs	r2, #33	@ 0x21
 80079ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80079d0:	e019      	b.n	8007a06 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80079d2:	7afb      	ldrb	r3, [r7, #11]
 80079d4:	2b22      	cmp	r3, #34	@ 0x22
 80079d6:	d002      	beq.n	80079de <I2C_ITSlaveCplt+0x56>
 80079d8:	7afb      	ldrb	r3, [r7, #11]
 80079da:	2b2a      	cmp	r3, #42	@ 0x2a
 80079dc:	d108      	bne.n	80079f0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80079de:	f248 0102 	movw	r1, #32770	@ 0x8002
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 fd62 	bl	80084ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2222      	movs	r2, #34	@ 0x22
 80079ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80079ee:	e00a      	b.n	8007a06 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80079f0:	7afb      	ldrb	r3, [r7, #11]
 80079f2:	2b28      	cmp	r3, #40	@ 0x28
 80079f4:	d107      	bne.n	8007a06 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80079f6:	f248 0103 	movw	r1, #32771	@ 0x8003
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 fd56 	bl	80084ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	685a      	ldr	r2, [r3, #4]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007a14:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	6859      	ldr	r1, [r3, #4]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	4b89      	ldr	r3, [pc, #548]	@ (8007c48 <I2C_ITSlaveCplt+0x2c0>)
 8007a22:	400b      	ands	r3, r1
 8007a24:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fa7d 	bl	8007f26 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d013      	beq.n	8007a5e <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007a44:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d01f      	beq.n	8007a8e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007a5c:	e017      	b.n	8007a8e <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d012      	beq.n	8007a8e <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007a76:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d006      	beq.n	8007a8e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	f003 0304 	and.w	r3, r3, #4
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d020      	beq.n	8007ada <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	f023 0304 	bic.w	r3, r3, #4
 8007a9e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aaa:	b2d2      	uxtb	r2, r2
 8007aac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ab2:	1c5a      	adds	r2, r3, #1
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00c      	beq.n	8007ada <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	b29a      	uxth	r2, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	3b01      	subs	r3, #1
 8007ad4:	b29a      	uxth	r2, r3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d005      	beq.n	8007af0 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ae8:	f043 0204 	orr.w	r2, r3, #4
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	f003 0310 	and.w	r3, r3, #16
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d049      	beq.n	8007b8e <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d044      	beq.n	8007b8e <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d128      	bne.n	8007b60 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	2b28      	cmp	r3, #40	@ 0x28
 8007b18:	d108      	bne.n	8007b2c <I2C_ITSlaveCplt+0x1a4>
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b20:	d104      	bne.n	8007b2c <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007b22:	6979      	ldr	r1, [r7, #20]
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 f893 	bl	8007c50 <I2C_ITListenCplt>
 8007b2a:	e030      	b.n	8007b8e <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	2b29      	cmp	r3, #41	@ 0x29
 8007b36:	d10e      	bne.n	8007b56 <I2C_ITSlaveCplt+0x1ce>
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007b3e:	d00a      	beq.n	8007b56 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	2210      	movs	r2, #16
 8007b46:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 f9ec 	bl	8007f26 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f7ff febe 	bl	80078d0 <I2C_ITSlaveSeqCplt>
 8007b54:	e01b      	b.n	8007b8e <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2210      	movs	r2, #16
 8007b5c:	61da      	str	r2, [r3, #28]
 8007b5e:	e016      	b.n	8007b8e <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	2210      	movs	r2, #16
 8007b66:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b6c:	f043 0204 	orr.w	r2, r3, #4
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d003      	beq.n	8007b82 <I2C_ITSlaveCplt+0x1fa>
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b80:	d105      	bne.n	8007b8e <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b86:	4619      	mov	r1, r3
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 f8b5 	bl	8007cf8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d010      	beq.n	8007bc6 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ba8:	4619      	mov	r1, r3
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f8a4 	bl	8007cf8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	2b28      	cmp	r3, #40	@ 0x28
 8007bba:	d141      	bne.n	8007c40 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007bbc:	6979      	ldr	r1, [r7, #20]
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 f846 	bl	8007c50 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007bc4:	e03c      	b.n	8007c40 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bca:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007bce:	d014      	beq.n	8007bfa <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f7ff fe7d 	bl	80078d0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a1c      	ldr	r2, [pc, #112]	@ (8007c4c <I2C_ITSlaveCplt+0x2c4>)
 8007bda:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2220      	movs	r2, #32
 8007be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f7ff fcd1 	bl	800759a <HAL_I2C_ListenCpltCallback>
}
 8007bf8:	e022      	b.n	8007c40 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	2b22      	cmp	r3, #34	@ 0x22
 8007c04:	d10e      	bne.n	8007c24 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2220      	movs	r2, #32
 8007c0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f7ff fca4 	bl	800756a <HAL_I2C_SlaveRxCpltCallback>
}
 8007c22:	e00d      	b.n	8007c40 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2220      	movs	r2, #32
 8007c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f7ff fc8b 	bl	8007556 <HAL_I2C_SlaveTxCpltCallback>
}
 8007c40:	bf00      	nop
 8007c42:	3718      	adds	r7, #24
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	fe00e800 	.word	0xfe00e800
 8007c4c:	ffff0000 	.word	0xffff0000

08007c50 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a25      	ldr	r2, [pc, #148]	@ (8007cf4 <I2C_ITListenCplt+0xa4>)
 8007c5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2220      	movs	r2, #32
 8007c6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	f003 0304 	and.w	r3, r3, #4
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d022      	beq.n	8007ccc <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c90:	b2d2      	uxtb	r2, r2
 8007c92:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c98:	1c5a      	adds	r2, r3, #1
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d012      	beq.n	8007ccc <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007caa:	3b01      	subs	r3, #1
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cc4:	f043 0204 	orr.w	r2, r3, #4
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007ccc:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 fbeb 	bl	80084ac <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2210      	movs	r2, #16
 8007cdc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f7ff fc57 	bl	800759a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007cec:	bf00      	nop
 8007cee:	3708      	adds	r7, #8
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	ffff0000 	.word	0xffff0000

08007cf8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d08:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4a6d      	ldr	r2, [pc, #436]	@ (8007ecc <I2C_ITError+0x1d4>)
 8007d16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	431a      	orrs	r2, r3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007d2a:	7bfb      	ldrb	r3, [r7, #15]
 8007d2c:	2b28      	cmp	r3, #40	@ 0x28
 8007d2e:	d005      	beq.n	8007d3c <I2C_ITError+0x44>
 8007d30:	7bfb      	ldrb	r3, [r7, #15]
 8007d32:	2b29      	cmp	r3, #41	@ 0x29
 8007d34:	d002      	beq.n	8007d3c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007d36:	7bfb      	ldrb	r3, [r7, #15]
 8007d38:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d3a:	d10b      	bne.n	8007d54 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007d3c:	2103      	movs	r1, #3
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 fbb4 	bl	80084ac <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2228      	movs	r2, #40	@ 0x28
 8007d48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a60      	ldr	r2, [pc, #384]	@ (8007ed0 <I2C_ITError+0x1d8>)
 8007d50:	635a      	str	r2, [r3, #52]	@ 0x34
 8007d52:	e030      	b.n	8007db6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007d54:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 fba7 	bl	80084ac <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 f8e1 	bl	8007f26 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	2b60      	cmp	r3, #96	@ 0x60
 8007d6e:	d01f      	beq.n	8007db0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2220      	movs	r2, #32
 8007d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	699b      	ldr	r3, [r3, #24]
 8007d7e:	f003 0320 	and.w	r3, r3, #32
 8007d82:	2b20      	cmp	r3, #32
 8007d84:	d114      	bne.n	8007db0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	699b      	ldr	r3, [r3, #24]
 8007d8c:	f003 0310 	and.w	r3, r3, #16
 8007d90:	2b10      	cmp	r3, #16
 8007d92:	d109      	bne.n	8007da8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2210      	movs	r2, #16
 8007d9a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007da0:	f043 0204 	orr.w	r2, r3, #4
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2220      	movs	r2, #32
 8007dae:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dba:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d039      	beq.n	8007e38 <I2C_ITError+0x140>
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	2b11      	cmp	r3, #17
 8007dc8:	d002      	beq.n	8007dd0 <I2C_ITError+0xd8>
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	2b21      	cmp	r3, #33	@ 0x21
 8007dce:	d133      	bne.n	8007e38 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007dda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007dde:	d107      	bne.n	8007df0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007dee:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7fe fe1a 	bl	8006a2e <HAL_DMA_GetState>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d017      	beq.n	8007e30 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e04:	4a33      	ldr	r2, [pc, #204]	@ (8007ed4 <I2C_ITError+0x1dc>)
 8007e06:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e14:	4618      	mov	r0, r3
 8007e16:	f7fe fcfc 	bl	8006812 <HAL_DMA_Abort_IT>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d04d      	beq.n	8007ebc <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007e2a:	4610      	mov	r0, r2
 8007e2c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007e2e:	e045      	b.n	8007ebc <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 f851 	bl	8007ed8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007e36:	e041      	b.n	8007ebc <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d039      	beq.n	8007eb4 <I2C_ITError+0x1bc>
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	2b12      	cmp	r3, #18
 8007e44:	d002      	beq.n	8007e4c <I2C_ITError+0x154>
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	2b22      	cmp	r3, #34	@ 0x22
 8007e4a:	d133      	bne.n	8007eb4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e5a:	d107      	bne.n	8007e6c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007e6a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7fe fddc 	bl	8006a2e <HAL_DMA_GetState>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d017      	beq.n	8007eac <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e80:	4a14      	ldr	r2, [pc, #80]	@ (8007ed4 <I2C_ITError+0x1dc>)
 8007e82:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7fe fcbe 	bl	8006812 <HAL_DMA_Abort_IT>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d011      	beq.n	8007ec0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007ea6:	4610      	mov	r0, r2
 8007ea8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007eaa:	e009      	b.n	8007ec0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 f813 	bl	8007ed8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007eb2:	e005      	b.n	8007ec0 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 f80f 	bl	8007ed8 <I2C_TreatErrorCallback>
  }
}
 8007eba:	e002      	b.n	8007ec2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007ebc:	bf00      	nop
 8007ebe:	e000      	b.n	8007ec2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007ec0:	bf00      	nop
}
 8007ec2:	bf00      	nop
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	ffff0000 	.word	0xffff0000
 8007ed0:	080075d7 	.word	0x080075d7
 8007ed4:	08007f6f 	.word	0x08007f6f

08007ed8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	2b60      	cmp	r3, #96	@ 0x60
 8007eea:	d10e      	bne.n	8007f0a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2220      	movs	r2, #32
 8007ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f7ff fb5d 	bl	80075c2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007f08:	e009      	b.n	8007f1e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f7ff fb48 	bl	80075ae <HAL_I2C_ErrorCallback>
}
 8007f1e:	bf00      	nop
 8007f20:	3708      	adds	r7, #8
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007f26:	b480      	push	{r7}
 8007f28:	b083      	sub	sp, #12
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	699b      	ldr	r3, [r3, #24]
 8007f34:	f003 0302 	and.w	r3, r3, #2
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d103      	bne.n	8007f44 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	2200      	movs	r2, #0
 8007f42:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	699b      	ldr	r3, [r3, #24]
 8007f4a:	f003 0301 	and.w	r3, r3, #1
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d007      	beq.n	8007f62 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	699a      	ldr	r2, [r3, #24]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f042 0201 	orr.w	r2, r2, #1
 8007f60:	619a      	str	r2, [r3, #24]
  }
}
 8007f62:	bf00      	nop
 8007f64:	370c      	adds	r7, #12
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr

08007f6e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b084      	sub	sp, #16
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f7a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d003      	beq.n	8007f8c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f88:	2200      	movs	r2, #0
 8007f8a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d003      	beq.n	8007f9c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f98:	2200      	movs	r2, #0
 8007f9a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f7ff ff9b 	bl	8007ed8 <I2C_TreatErrorCallback>
}
 8007fa2:	bf00      	nop
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b084      	sub	sp, #16
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	60f8      	str	r0, [r7, #12]
 8007fb2:	60b9      	str	r1, [r7, #8]
 8007fb4:	603b      	str	r3, [r7, #0]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007fba:	e03b      	b.n	8008034 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fbc:	69ba      	ldr	r2, [r7, #24]
 8007fbe:	6839      	ldr	r1, [r7, #0]
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f000 f961 	bl	8008288 <I2C_IsErrorOccurred>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d001      	beq.n	8007fd0 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e041      	b.n	8008054 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fd6:	d02d      	beq.n	8008034 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fd8:	f7fc ff10 	bl	8004dfc <HAL_GetTick>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	1ad3      	subs	r3, r2, r3
 8007fe2:	683a      	ldr	r2, [r7, #0]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d302      	bcc.n	8007fee <I2C_WaitOnFlagUntilTimeout+0x44>
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d122      	bne.n	8008034 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	699a      	ldr	r2, [r3, #24]
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	4013      	ands	r3, r2
 8007ff8:	68ba      	ldr	r2, [r7, #8]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	bf0c      	ite	eq
 8007ffe:	2301      	moveq	r3, #1
 8008000:	2300      	movne	r3, #0
 8008002:	b2db      	uxtb	r3, r3
 8008004:	461a      	mov	r2, r3
 8008006:	79fb      	ldrb	r3, [r7, #7]
 8008008:	429a      	cmp	r2, r3
 800800a:	d113      	bne.n	8008034 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008010:	f043 0220 	orr.w	r2, r3, #32
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2220      	movs	r2, #32
 800801c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2200      	movs	r2, #0
 8008024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2200      	movs	r2, #0
 800802c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	e00f      	b.n	8008054 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	699a      	ldr	r2, [r3, #24]
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	4013      	ands	r3, r2
 800803e:	68ba      	ldr	r2, [r7, #8]
 8008040:	429a      	cmp	r2, r3
 8008042:	bf0c      	ite	eq
 8008044:	2301      	moveq	r3, #1
 8008046:	2300      	movne	r3, #0
 8008048:	b2db      	uxtb	r3, r3
 800804a:	461a      	mov	r2, r3
 800804c:	79fb      	ldrb	r3, [r7, #7]
 800804e:	429a      	cmp	r2, r3
 8008050:	d0b4      	beq.n	8007fbc <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	3710      	adds	r7, #16
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008068:	e033      	b.n	80080d2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	68b9      	ldr	r1, [r7, #8]
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f000 f90a 	bl	8008288 <I2C_IsErrorOccurred>
 8008074:	4603      	mov	r3, r0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d001      	beq.n	800807e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	e031      	b.n	80080e2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008084:	d025      	beq.n	80080d2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008086:	f7fc feb9 	bl	8004dfc <HAL_GetTick>
 800808a:	4602      	mov	r2, r0
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	1ad3      	subs	r3, r2, r3
 8008090:	68ba      	ldr	r2, [r7, #8]
 8008092:	429a      	cmp	r2, r3
 8008094:	d302      	bcc.n	800809c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d11a      	bne.n	80080d2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	699b      	ldr	r3, [r3, #24]
 80080a2:	f003 0302 	and.w	r3, r3, #2
 80080a6:	2b02      	cmp	r3, #2
 80080a8:	d013      	beq.n	80080d2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080ae:	f043 0220 	orr.w	r2, r3, #32
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2220      	movs	r2, #32
 80080ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	e007      	b.n	80080e2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	699b      	ldr	r3, [r3, #24]
 80080d8:	f003 0302 	and.w	r3, r3, #2
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d1c4      	bne.n	800806a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b084      	sub	sp, #16
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	60f8      	str	r0, [r7, #12]
 80080f2:	60b9      	str	r1, [r7, #8]
 80080f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80080f6:	e02f      	b.n	8008158 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	68b9      	ldr	r1, [r7, #8]
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	f000 f8c3 	bl	8008288 <I2C_IsErrorOccurred>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d001      	beq.n	800810c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	e02d      	b.n	8008168 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800810c:	f7fc fe76 	bl	8004dfc <HAL_GetTick>
 8008110:	4602      	mov	r2, r0
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	1ad3      	subs	r3, r2, r3
 8008116:	68ba      	ldr	r2, [r7, #8]
 8008118:	429a      	cmp	r2, r3
 800811a:	d302      	bcc.n	8008122 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d11a      	bne.n	8008158 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	699b      	ldr	r3, [r3, #24]
 8008128:	f003 0320 	and.w	r3, r3, #32
 800812c:	2b20      	cmp	r3, #32
 800812e:	d013      	beq.n	8008158 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008134:	f043 0220 	orr.w	r2, r3, #32
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2220      	movs	r2, #32
 8008140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2200      	movs	r2, #0
 8008148:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2200      	movs	r2, #0
 8008150:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	e007      	b.n	8008168 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	699b      	ldr	r3, [r3, #24]
 800815e:	f003 0320 	and.w	r3, r3, #32
 8008162:	2b20      	cmp	r3, #32
 8008164:	d1c8      	bne.n	80080f8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800817c:	2300      	movs	r3, #0
 800817e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008180:	e071      	b.n	8008266 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	68b9      	ldr	r1, [r7, #8]
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	f000 f87e 	bl	8008288 <I2C_IsErrorOccurred>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d001      	beq.n	8008196 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	699b      	ldr	r3, [r3, #24]
 800819c:	f003 0320 	and.w	r3, r3, #32
 80081a0:	2b20      	cmp	r3, #32
 80081a2:	d13b      	bne.n	800821c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80081a4:	7dfb      	ldrb	r3, [r7, #23]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d138      	bne.n	800821c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	699b      	ldr	r3, [r3, #24]
 80081b0:	f003 0304 	and.w	r3, r3, #4
 80081b4:	2b04      	cmp	r3, #4
 80081b6:	d105      	bne.n	80081c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d001      	beq.n	80081c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80081c0:	2300      	movs	r3, #0
 80081c2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	699b      	ldr	r3, [r3, #24]
 80081ca:	f003 0310 	and.w	r3, r3, #16
 80081ce:	2b10      	cmp	r3, #16
 80081d0:	d121      	bne.n	8008216 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2210      	movs	r2, #16
 80081d8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2204      	movs	r2, #4
 80081de:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2220      	movs	r2, #32
 80081e6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	6859      	ldr	r1, [r3, #4]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	4b24      	ldr	r3, [pc, #144]	@ (8008284 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80081f4:	400b      	ands	r3, r1
 80081f6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2220      	movs	r2, #32
 80081fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2200      	movs	r2, #0
 8008204:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2200      	movs	r2, #0
 800820c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	75fb      	strb	r3, [r7, #23]
 8008214:	e002      	b.n	800821c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2200      	movs	r2, #0
 800821a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800821c:	f7fc fdee 	bl	8004dfc <HAL_GetTick>
 8008220:	4602      	mov	r2, r0
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	1ad3      	subs	r3, r2, r3
 8008226:	68ba      	ldr	r2, [r7, #8]
 8008228:	429a      	cmp	r2, r3
 800822a:	d302      	bcc.n	8008232 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d119      	bne.n	8008266 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8008232:	7dfb      	ldrb	r3, [r7, #23]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d116      	bne.n	8008266 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	699b      	ldr	r3, [r3, #24]
 800823e:	f003 0304 	and.w	r3, r3, #4
 8008242:	2b04      	cmp	r3, #4
 8008244:	d00f      	beq.n	8008266 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800824a:	f043 0220 	orr.w	r2, r3, #32
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2220      	movs	r2, #32
 8008256:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2200      	movs	r2, #0
 800825e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	699b      	ldr	r3, [r3, #24]
 800826c:	f003 0304 	and.w	r3, r3, #4
 8008270:	2b04      	cmp	r3, #4
 8008272:	d002      	beq.n	800827a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8008274:	7dfb      	ldrb	r3, [r7, #23]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d083      	beq.n	8008182 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800827a:	7dfb      	ldrb	r3, [r7, #23]
}
 800827c:	4618      	mov	r0, r3
 800827e:	3718      	adds	r7, #24
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}
 8008284:	fe00e800 	.word	0xfe00e800

08008288 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b08a      	sub	sp, #40	@ 0x28
 800828c:	af00      	add	r7, sp, #0
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	60b9      	str	r1, [r7, #8]
 8008292:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008294:	2300      	movs	r3, #0
 8008296:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	699b      	ldr	r3, [r3, #24]
 80082a0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80082a2:	2300      	movs	r3, #0
 80082a4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	f003 0310 	and.w	r3, r3, #16
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d068      	beq.n	8008386 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2210      	movs	r2, #16
 80082ba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80082bc:	e049      	b.n	8008352 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c4:	d045      	beq.n	8008352 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80082c6:	f7fc fd99 	bl	8004dfc <HAL_GetTick>
 80082ca:	4602      	mov	r2, r0
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	1ad3      	subs	r3, r2, r3
 80082d0:	68ba      	ldr	r2, [r7, #8]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d302      	bcc.n	80082dc <I2C_IsErrorOccurred+0x54>
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d13a      	bne.n	8008352 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80082ee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	699b      	ldr	r3, [r3, #24]
 80082f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80082fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082fe:	d121      	bne.n	8008344 <I2C_IsErrorOccurred+0xbc>
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008306:	d01d      	beq.n	8008344 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008308:	7cfb      	ldrb	r3, [r7, #19]
 800830a:	2b20      	cmp	r3, #32
 800830c:	d01a      	beq.n	8008344 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	685a      	ldr	r2, [r3, #4]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800831c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800831e:	f7fc fd6d 	bl	8004dfc <HAL_GetTick>
 8008322:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008324:	e00e      	b.n	8008344 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008326:	f7fc fd69 	bl	8004dfc <HAL_GetTick>
 800832a:	4602      	mov	r2, r0
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	1ad3      	subs	r3, r2, r3
 8008330:	2b19      	cmp	r3, #25
 8008332:	d907      	bls.n	8008344 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008334:	6a3b      	ldr	r3, [r7, #32]
 8008336:	f043 0320 	orr.w	r3, r3, #32
 800833a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8008342:	e006      	b.n	8008352 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	699b      	ldr	r3, [r3, #24]
 800834a:	f003 0320 	and.w	r3, r3, #32
 800834e:	2b20      	cmp	r3, #32
 8008350:	d1e9      	bne.n	8008326 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	699b      	ldr	r3, [r3, #24]
 8008358:	f003 0320 	and.w	r3, r3, #32
 800835c:	2b20      	cmp	r3, #32
 800835e:	d003      	beq.n	8008368 <I2C_IsErrorOccurred+0xe0>
 8008360:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008364:	2b00      	cmp	r3, #0
 8008366:	d0aa      	beq.n	80082be <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008368:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800836c:	2b00      	cmp	r3, #0
 800836e:	d103      	bne.n	8008378 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2220      	movs	r2, #32
 8008376:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008378:	6a3b      	ldr	r3, [r7, #32]
 800837a:	f043 0304 	orr.w	r3, r3, #4
 800837e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	699b      	ldr	r3, [r3, #24]
 800838c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00b      	beq.n	80083b0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008398:	6a3b      	ldr	r3, [r7, #32]
 800839a:	f043 0301 	orr.w	r3, r3, #1
 800839e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80083a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80083b0:	69bb      	ldr	r3, [r7, #24]
 80083b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00b      	beq.n	80083d2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80083ba:	6a3b      	ldr	r3, [r7, #32]
 80083bc:	f043 0308 	orr.w	r3, r3, #8
 80083c0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80083ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80083d2:	69bb      	ldr	r3, [r7, #24]
 80083d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d00b      	beq.n	80083f4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80083dc:	6a3b      	ldr	r3, [r7, #32]
 80083de:	f043 0302 	orr.w	r3, r3, #2
 80083e2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80083ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80083f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d01c      	beq.n	8008436 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80083fc:	68f8      	ldr	r0, [r7, #12]
 80083fe:	f7ff fd92 	bl	8007f26 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	6859      	ldr	r1, [r3, #4]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	4b0d      	ldr	r3, [pc, #52]	@ (8008444 <I2C_IsErrorOccurred+0x1bc>)
 800840e:	400b      	ands	r3, r1
 8008410:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008416:	6a3b      	ldr	r3, [r7, #32]
 8008418:	431a      	orrs	r2, r3
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2220      	movs	r2, #32
 8008422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2200      	movs	r2, #0
 800842a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2200      	movs	r2, #0
 8008432:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008436:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800843a:	4618      	mov	r0, r3
 800843c:	3728      	adds	r7, #40	@ 0x28
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop
 8008444:	fe00e800 	.word	0xfe00e800

08008448 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008448:	b480      	push	{r7}
 800844a:	b087      	sub	sp, #28
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	607b      	str	r3, [r7, #4]
 8008452:	460b      	mov	r3, r1
 8008454:	817b      	strh	r3, [r7, #10]
 8008456:	4613      	mov	r3, r2
 8008458:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800845a:	897b      	ldrh	r3, [r7, #10]
 800845c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008460:	7a7b      	ldrb	r3, [r7, #9]
 8008462:	041b      	lsls	r3, r3, #16
 8008464:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008468:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800846e:	6a3b      	ldr	r3, [r7, #32]
 8008470:	4313      	orrs	r3, r2
 8008472:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008476:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	685a      	ldr	r2, [r3, #4]
 800847e:	6a3b      	ldr	r3, [r7, #32]
 8008480:	0d5b      	lsrs	r3, r3, #21
 8008482:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008486:	4b08      	ldr	r3, [pc, #32]	@ (80084a8 <I2C_TransferConfig+0x60>)
 8008488:	430b      	orrs	r3, r1
 800848a:	43db      	mvns	r3, r3
 800848c:	ea02 0103 	and.w	r1, r2, r3
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	697a      	ldr	r2, [r7, #20]
 8008496:	430a      	orrs	r2, r1
 8008498:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800849a:	bf00      	nop
 800849c:	371c      	adds	r7, #28
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop
 80084a8:	03ff63ff 	.word	0x03ff63ff

080084ac <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b085      	sub	sp, #20
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	460b      	mov	r3, r1
 80084b6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80084b8:	2300      	movs	r3, #0
 80084ba:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80084bc:	887b      	ldrh	r3, [r7, #2]
 80084be:	f003 0301 	and.w	r3, r3, #1
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d00f      	beq.n	80084e6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80084cc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80084da:	2b28      	cmp	r3, #40	@ 0x28
 80084dc:	d003      	beq.n	80084e6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80084e4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80084e6:	887b      	ldrh	r3, [r7, #2]
 80084e8:	f003 0302 	and.w	r3, r3, #2
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00f      	beq.n	8008510 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80084f6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008504:	2b28      	cmp	r3, #40	@ 0x28
 8008506:	d003      	beq.n	8008510 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800850e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008510:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008514:	2b00      	cmp	r3, #0
 8008516:	da03      	bge.n	8008520 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800851e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008520:	887b      	ldrh	r3, [r7, #2]
 8008522:	2b10      	cmp	r3, #16
 8008524:	d103      	bne.n	800852e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800852c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800852e:	887b      	ldrh	r3, [r7, #2]
 8008530:	2b20      	cmp	r3, #32
 8008532:	d103      	bne.n	800853c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f043 0320 	orr.w	r3, r3, #32
 800853a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800853c:	887b      	ldrh	r3, [r7, #2]
 800853e:	2b40      	cmp	r3, #64	@ 0x40
 8008540:	d103      	bne.n	800854a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008548:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	6819      	ldr	r1, [r3, #0]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	43da      	mvns	r2, r3
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	400a      	ands	r2, r1
 800855a:	601a      	str	r2, [r3, #0]
}
 800855c:	bf00      	nop
 800855e:	3714      	adds	r7, #20
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008578:	b2db      	uxtb	r3, r3
 800857a:	2b20      	cmp	r3, #32
 800857c:	d138      	bne.n	80085f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008584:	2b01      	cmp	r3, #1
 8008586:	d101      	bne.n	800858c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008588:	2302      	movs	r3, #2
 800858a:	e032      	b.n	80085f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2201      	movs	r2, #1
 8008590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2224      	movs	r2, #36	@ 0x24
 8008598:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f022 0201 	bic.w	r2, r2, #1
 80085aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80085ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	6819      	ldr	r1, [r3, #0]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	683a      	ldr	r2, [r7, #0]
 80085c8:	430a      	orrs	r2, r1
 80085ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f042 0201 	orr.w	r2, r2, #1
 80085da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2220      	movs	r2, #32
 80085e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80085ec:	2300      	movs	r3, #0
 80085ee:	e000      	b.n	80085f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80085f0:	2302      	movs	r3, #2
  }
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	370c      	adds	r7, #12
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr

080085fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80085fe:	b480      	push	{r7}
 8008600:	b085      	sub	sp, #20
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
 8008606:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800860e:	b2db      	uxtb	r3, r3
 8008610:	2b20      	cmp	r3, #32
 8008612:	d139      	bne.n	8008688 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800861a:	2b01      	cmp	r3, #1
 800861c:	d101      	bne.n	8008622 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800861e:	2302      	movs	r3, #2
 8008620:	e033      	b.n	800868a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2201      	movs	r2, #1
 8008626:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2224      	movs	r2, #36	@ 0x24
 800862e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f022 0201 	bic.w	r2, r2, #1
 8008640:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008650:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	021b      	lsls	r3, r3, #8
 8008656:	68fa      	ldr	r2, [r7, #12]
 8008658:	4313      	orrs	r3, r2
 800865a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	68fa      	ldr	r2, [r7, #12]
 8008662:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f042 0201 	orr.w	r2, r2, #1
 8008672:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2220      	movs	r2, #32
 8008678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008684:	2300      	movs	r3, #0
 8008686:	e000      	b.n	800868a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008688:	2302      	movs	r3, #2
  }
}
 800868a:	4618      	mov	r0, r3
 800868c:	3714      	adds	r7, #20
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr

08008696 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b084      	sub	sp, #16
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d101      	bne.n	80086a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	e0c0      	b.n	800882a <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d106      	bne.n	80086c2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f009 f9a9 	bl	8011a14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2203      	movs	r2, #3
 80086c6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4618      	mov	r0, r3
 80086d0:	f004 fc7e 	bl	800cfd0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80086d4:	2300      	movs	r3, #0
 80086d6:	73fb      	strb	r3, [r7, #15]
 80086d8:	e03e      	b.n	8008758 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80086da:	7bfa      	ldrb	r2, [r7, #15]
 80086dc:	6879      	ldr	r1, [r7, #4]
 80086de:	4613      	mov	r3, r2
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	4413      	add	r3, r2
 80086e4:	00db      	lsls	r3, r3, #3
 80086e6:	440b      	add	r3, r1
 80086e8:	3311      	adds	r3, #17
 80086ea:	2201      	movs	r2, #1
 80086ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80086ee:	7bfa      	ldrb	r2, [r7, #15]
 80086f0:	6879      	ldr	r1, [r7, #4]
 80086f2:	4613      	mov	r3, r2
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	4413      	add	r3, r2
 80086f8:	00db      	lsls	r3, r3, #3
 80086fa:	440b      	add	r3, r1
 80086fc:	3310      	adds	r3, #16
 80086fe:	7bfa      	ldrb	r2, [r7, #15]
 8008700:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008702:	7bfa      	ldrb	r2, [r7, #15]
 8008704:	6879      	ldr	r1, [r7, #4]
 8008706:	4613      	mov	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	4413      	add	r3, r2
 800870c:	00db      	lsls	r3, r3, #3
 800870e:	440b      	add	r3, r1
 8008710:	3313      	adds	r3, #19
 8008712:	2200      	movs	r2, #0
 8008714:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008716:	7bfa      	ldrb	r2, [r7, #15]
 8008718:	6879      	ldr	r1, [r7, #4]
 800871a:	4613      	mov	r3, r2
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	4413      	add	r3, r2
 8008720:	00db      	lsls	r3, r3, #3
 8008722:	440b      	add	r3, r1
 8008724:	3320      	adds	r3, #32
 8008726:	2200      	movs	r2, #0
 8008728:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800872a:	7bfa      	ldrb	r2, [r7, #15]
 800872c:	6879      	ldr	r1, [r7, #4]
 800872e:	4613      	mov	r3, r2
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	4413      	add	r3, r2
 8008734:	00db      	lsls	r3, r3, #3
 8008736:	440b      	add	r3, r1
 8008738:	3324      	adds	r3, #36	@ 0x24
 800873a:	2200      	movs	r2, #0
 800873c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800873e:	7bfb      	ldrb	r3, [r7, #15]
 8008740:	6879      	ldr	r1, [r7, #4]
 8008742:	1c5a      	adds	r2, r3, #1
 8008744:	4613      	mov	r3, r2
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	4413      	add	r3, r2
 800874a:	00db      	lsls	r3, r3, #3
 800874c:	440b      	add	r3, r1
 800874e:	2200      	movs	r2, #0
 8008750:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008752:	7bfb      	ldrb	r3, [r7, #15]
 8008754:	3301      	adds	r3, #1
 8008756:	73fb      	strb	r3, [r7, #15]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	791b      	ldrb	r3, [r3, #4]
 800875c:	7bfa      	ldrb	r2, [r7, #15]
 800875e:	429a      	cmp	r2, r3
 8008760:	d3bb      	bcc.n	80086da <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008762:	2300      	movs	r3, #0
 8008764:	73fb      	strb	r3, [r7, #15]
 8008766:	e044      	b.n	80087f2 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008768:	7bfa      	ldrb	r2, [r7, #15]
 800876a:	6879      	ldr	r1, [r7, #4]
 800876c:	4613      	mov	r3, r2
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	4413      	add	r3, r2
 8008772:	00db      	lsls	r3, r3, #3
 8008774:	440b      	add	r3, r1
 8008776:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800877a:	2200      	movs	r2, #0
 800877c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800877e:	7bfa      	ldrb	r2, [r7, #15]
 8008780:	6879      	ldr	r1, [r7, #4]
 8008782:	4613      	mov	r3, r2
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	4413      	add	r3, r2
 8008788:	00db      	lsls	r3, r3, #3
 800878a:	440b      	add	r3, r1
 800878c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008790:	7bfa      	ldrb	r2, [r7, #15]
 8008792:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008794:	7bfa      	ldrb	r2, [r7, #15]
 8008796:	6879      	ldr	r1, [r7, #4]
 8008798:	4613      	mov	r3, r2
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	4413      	add	r3, r2
 800879e:	00db      	lsls	r3, r3, #3
 80087a0:	440b      	add	r3, r1
 80087a2:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80087a6:	2200      	movs	r2, #0
 80087a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80087aa:	7bfa      	ldrb	r2, [r7, #15]
 80087ac:	6879      	ldr	r1, [r7, #4]
 80087ae:	4613      	mov	r3, r2
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	4413      	add	r3, r2
 80087b4:	00db      	lsls	r3, r3, #3
 80087b6:	440b      	add	r3, r1
 80087b8:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80087bc:	2200      	movs	r2, #0
 80087be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80087c0:	7bfa      	ldrb	r2, [r7, #15]
 80087c2:	6879      	ldr	r1, [r7, #4]
 80087c4:	4613      	mov	r3, r2
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	4413      	add	r3, r2
 80087ca:	00db      	lsls	r3, r3, #3
 80087cc:	440b      	add	r3, r1
 80087ce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80087d2:	2200      	movs	r2, #0
 80087d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80087d6:	7bfa      	ldrb	r2, [r7, #15]
 80087d8:	6879      	ldr	r1, [r7, #4]
 80087da:	4613      	mov	r3, r2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	4413      	add	r3, r2
 80087e0:	00db      	lsls	r3, r3, #3
 80087e2:	440b      	add	r3, r1
 80087e4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80087e8:	2200      	movs	r2, #0
 80087ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80087ec:	7bfb      	ldrb	r3, [r7, #15]
 80087ee:	3301      	adds	r3, #1
 80087f0:	73fb      	strb	r3, [r7, #15]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	791b      	ldrb	r3, [r3, #4]
 80087f6:	7bfa      	ldrb	r2, [r7, #15]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d3b5      	bcc.n	8008768 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6818      	ldr	r0, [r3, #0]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	3304      	adds	r3, #4
 8008804:	e893 0006 	ldmia.w	r3, {r1, r2}
 8008808:	f004 fbfd 	bl	800d006 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2201      	movs	r2, #1
 8008816:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	7a9b      	ldrb	r3, [r3, #10]
 800881e:	2b01      	cmp	r3, #1
 8008820:	d102      	bne.n	8008828 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f001 fc40 	bl	800a0a8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b082      	sub	sp, #8
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8008840:	2b01      	cmp	r3, #1
 8008842:	d101      	bne.n	8008848 <HAL_PCD_Start+0x16>
 8008844:	2302      	movs	r3, #2
 8008846:	e012      	b.n	800886e <HAL_PCD_Start+0x3c>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4618      	mov	r0, r3
 8008856:	f004 fba4 	bl	800cfa2 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4618      	mov	r0, r3
 8008860:	f006 fe65 	bl	800f52e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	3708      	adds	r7, #8
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008876:	b580      	push	{r7, lr}
 8008878:	b084      	sub	sp, #16
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4618      	mov	r0, r3
 8008884:	f006 fe6a 	bl	800f55c <USB_ReadInterrupts>
 8008888:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008890:	2b00      	cmp	r3, #0
 8008892:	d003      	beq.n	800889c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 fb04 	bl	8008ea2 <PCD_EP_ISR_Handler>

    return;
 800889a:	e110      	b.n	8008abe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d013      	beq.n	80088ce <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088b8:	b292      	uxth	r2, r2
 80088ba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f009 f93d 	bl	8011b3e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80088c4:	2100      	movs	r1, #0
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 f8fc 	bl	8008ac4 <HAL_PCD_SetAddress>

    return;
 80088cc:	e0f7      	b.n	8008abe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d00c      	beq.n	80088f2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80088e0:	b29a      	uxth	r2, r3
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80088ea:	b292      	uxth	r2, r2
 80088ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80088f0:	e0e5      	b.n	8008abe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d00c      	beq.n	8008916 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008904:	b29a      	uxth	r2, r3
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800890e:	b292      	uxth	r2, r2
 8008910:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8008914:	e0d3      	b.n	8008abe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800891c:	2b00      	cmp	r3, #0
 800891e:	d034      	beq.n	800898a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008928:	b29a      	uxth	r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f022 0204 	bic.w	r2, r2, #4
 8008932:	b292      	uxth	r2, r2
 8008934:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008940:	b29a      	uxth	r2, r3
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f022 0208 	bic.w	r2, r2, #8
 800894a:	b292      	uxth	r2, r2
 800894c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8008956:	2b01      	cmp	r3, #1
 8008958:	d107      	bne.n	800896a <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008962:	2100      	movs	r1, #0
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f009 fadf 	bl	8011f28 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f009 f920 	bl	8011bb0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008978:	b29a      	uxth	r2, r3
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008982:	b292      	uxth	r2, r2
 8008984:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8008988:	e099      	b.n	8008abe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008990:	2b00      	cmp	r3, #0
 8008992:	d027      	beq.n	80089e4 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800899c:	b29a      	uxth	r2, r3
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f042 0208 	orr.w	r2, r2, #8
 80089a6:	b292      	uxth	r2, r2
 80089a8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80089b4:	b29a      	uxth	r2, r3
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80089be:	b292      	uxth	r2, r2
 80089c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80089cc:	b29a      	uxth	r2, r3
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f042 0204 	orr.w	r2, r2, #4
 80089d6:	b292      	uxth	r2, r2
 80089d8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f009 f8cd 	bl	8011b7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80089e2:	e06c      	b.n	8008abe <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d040      	beq.n	8008a70 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80089f6:	b29a      	uxth	r2, r3
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008a00:	b292      	uxth	r2, r2
 8008a02:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d12b      	bne.n	8008a68 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008a18:	b29a      	uxth	r2, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f042 0204 	orr.w	r2, r2, #4
 8008a22:	b292      	uxth	r2, r2
 8008a24:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008a30:	b29a      	uxth	r2, r3
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f042 0208 	orr.w	r2, r2, #8
 8008a3a:	b292      	uxth	r2, r2
 8008a3c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2201      	movs	r2, #1
 8008a44:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	089b      	lsrs	r3, r3, #2
 8008a54:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008a5e:	2101      	movs	r1, #1
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f009 fa61 	bl	8011f28 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8008a66:	e02a      	b.n	8008abe <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f009 f887 	bl	8011b7c <HAL_PCD_SuspendCallback>
    return;
 8008a6e:	e026      	b.n	8008abe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d00f      	beq.n	8008a9a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008a8c:	b292      	uxth	r2, r2
 8008a8e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f009 f845 	bl	8011b22 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8008a98:	e011      	b.n	8008abe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d00c      	beq.n	8008abe <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008aac:	b29a      	uxth	r2, r3
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008ab6:	b292      	uxth	r2, r2
 8008ab8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8008abc:	bf00      	nop
  }
}
 8008abe:	3710      	adds	r7, #16
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	460b      	mov	r3, r1
 8008ace:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d101      	bne.n	8008ade <HAL_PCD_SetAddress+0x1a>
 8008ada:	2302      	movs	r3, #2
 8008adc:	e012      	b.n	8008b04 <HAL_PCD_SetAddress+0x40>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	78fa      	ldrb	r2, [r7, #3]
 8008aea:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	78fa      	ldrb	r2, [r7, #3]
 8008af2:	4611      	mov	r1, r2
 8008af4:	4618      	mov	r0, r3
 8008af6:	f006 fd06 	bl	800f506 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2200      	movs	r2, #0
 8008afe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8008b02:	2300      	movs	r3, #0
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3708      	adds	r7, #8
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	4608      	mov	r0, r1
 8008b16:	4611      	mov	r1, r2
 8008b18:	461a      	mov	r2, r3
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	70fb      	strb	r3, [r7, #3]
 8008b1e:	460b      	mov	r3, r1
 8008b20:	803b      	strh	r3, [r7, #0]
 8008b22:	4613      	mov	r3, r2
 8008b24:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008b26:	2300      	movs	r3, #0
 8008b28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008b2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	da0e      	bge.n	8008b50 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b32:	78fb      	ldrb	r3, [r7, #3]
 8008b34:	f003 0207 	and.w	r2, r3, #7
 8008b38:	4613      	mov	r3, r2
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	4413      	add	r3, r2
 8008b3e:	00db      	lsls	r3, r3, #3
 8008b40:	3310      	adds	r3, #16
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	4413      	add	r3, r2
 8008b46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	705a      	strb	r2, [r3, #1]
 8008b4e:	e00e      	b.n	8008b6e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008b50:	78fb      	ldrb	r3, [r7, #3]
 8008b52:	f003 0207 	and.w	r2, r3, #7
 8008b56:	4613      	mov	r3, r2
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	4413      	add	r3, r2
 8008b5c:	00db      	lsls	r3, r3, #3
 8008b5e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	4413      	add	r3, r2
 8008b66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008b6e:	78fb      	ldrb	r3, [r7, #3]
 8008b70:	f003 0307 	and.w	r3, r3, #7
 8008b74:	b2da      	uxtb	r2, r3
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008b7a:	883a      	ldrh	r2, [r7, #0]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	78ba      	ldrb	r2, [r7, #2]
 8008b84:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008b86:	78bb      	ldrb	r3, [r7, #2]
 8008b88:	2b02      	cmp	r3, #2
 8008b8a:	d102      	bne.n	8008b92 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d101      	bne.n	8008ba0 <HAL_PCD_EP_Open+0x94>
 8008b9c:	2302      	movs	r3, #2
 8008b9e:	e00e      	b.n	8008bbe <HAL_PCD_EP_Open+0xb2>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	68f9      	ldr	r1, [r7, #12]
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f004 fa48 	bl	800d044 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8008bbc:	7afb      	ldrb	r3, [r7, #11]
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3710      	adds	r7, #16
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b084      	sub	sp, #16
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
 8008bce:	460b      	mov	r3, r1
 8008bd0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008bd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	da0e      	bge.n	8008bf8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008bda:	78fb      	ldrb	r3, [r7, #3]
 8008bdc:	f003 0207 	and.w	r2, r3, #7
 8008be0:	4613      	mov	r3, r2
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	4413      	add	r3, r2
 8008be6:	00db      	lsls	r3, r3, #3
 8008be8:	3310      	adds	r3, #16
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	4413      	add	r3, r2
 8008bee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	705a      	strb	r2, [r3, #1]
 8008bf6:	e00e      	b.n	8008c16 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008bf8:	78fb      	ldrb	r3, [r7, #3]
 8008bfa:	f003 0207 	and.w	r2, r3, #7
 8008bfe:	4613      	mov	r3, r2
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	4413      	add	r3, r2
 8008c04:	00db      	lsls	r3, r3, #3
 8008c06:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2200      	movs	r2, #0
 8008c14:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c16:	78fb      	ldrb	r3, [r7, #3]
 8008c18:	f003 0307 	and.w	r3, r3, #7
 8008c1c:	b2da      	uxtb	r2, r3
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d101      	bne.n	8008c30 <HAL_PCD_EP_Close+0x6a>
 8008c2c:	2302      	movs	r3, #2
 8008c2e:	e00e      	b.n	8008c4e <HAL_PCD_EP_Close+0x88>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2201      	movs	r2, #1
 8008c34:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	68f9      	ldr	r1, [r7, #12]
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f004 fdc4 	bl	800d7cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b086      	sub	sp, #24
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	60f8      	str	r0, [r7, #12]
 8008c5e:	607a      	str	r2, [r7, #4]
 8008c60:	603b      	str	r3, [r7, #0]
 8008c62:	460b      	mov	r3, r1
 8008c64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c66:	7afb      	ldrb	r3, [r7, #11]
 8008c68:	f003 0207 	and.w	r2, r3, #7
 8008c6c:	4613      	mov	r3, r2
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	4413      	add	r3, r2
 8008c72:	00db      	lsls	r3, r3, #3
 8008c74:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	4413      	add	r3, r2
 8008c7c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	683a      	ldr	r2, [r7, #0]
 8008c88:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	2200      	movs	r2, #0
 8008c94:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c96:	7afb      	ldrb	r3, [r7, #11]
 8008c98:	f003 0307 	and.w	r3, r3, #7
 8008c9c:	b2da      	uxtb	r2, r3
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	6979      	ldr	r1, [r7, #20]
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f004 ff7c 	bl	800dba6 <USB_EPStartXfer>

  return HAL_OK;
 8008cae:	2300      	movs	r3, #0
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3718      	adds	r7, #24
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008cc4:	78fb      	ldrb	r3, [r7, #3]
 8008cc6:	f003 0207 	and.w	r2, r3, #7
 8008cca:	6879      	ldr	r1, [r7, #4]
 8008ccc:	4613      	mov	r3, r2
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	4413      	add	r3, r2
 8008cd2:	00db      	lsls	r3, r3, #3
 8008cd4:	440b      	add	r3, r1
 8008cd6:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8008cda:	681b      	ldr	r3, [r3, #0]
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b086      	sub	sp, #24
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	607a      	str	r2, [r7, #4]
 8008cf2:	603b      	str	r3, [r7, #0]
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008cf8:	7afb      	ldrb	r3, [r7, #11]
 8008cfa:	f003 0207 	and.w	r2, r3, #7
 8008cfe:	4613      	mov	r3, r2
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	4413      	add	r3, r2
 8008d04:	00db      	lsls	r3, r3, #3
 8008d06:	3310      	adds	r3, #16
 8008d08:	68fa      	ldr	r2, [r7, #12]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	683a      	ldr	r2, [r7, #0]
 8008d18:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	683a      	ldr	r2, [r7, #0]
 8008d26:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	2201      	movs	r2, #1
 8008d32:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008d34:	7afb      	ldrb	r3, [r7, #11]
 8008d36:	f003 0307 	and.w	r3, r3, #7
 8008d3a:	b2da      	uxtb	r2, r3
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	6979      	ldr	r1, [r7, #20]
 8008d46:	4618      	mov	r0, r3
 8008d48:	f004 ff2d 	bl	800dba6 <USB_EPStartXfer>

  return HAL_OK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3718      	adds	r7, #24
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b084      	sub	sp, #16
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
 8008d5e:	460b      	mov	r3, r1
 8008d60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008d62:	78fb      	ldrb	r3, [r7, #3]
 8008d64:	f003 0307 	and.w	r3, r3, #7
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	7912      	ldrb	r2, [r2, #4]
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d901      	bls.n	8008d74 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	e03e      	b.n	8008df2 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008d74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	da0e      	bge.n	8008d9a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d7c:	78fb      	ldrb	r3, [r7, #3]
 8008d7e:	f003 0207 	and.w	r2, r3, #7
 8008d82:	4613      	mov	r3, r2
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	4413      	add	r3, r2
 8008d88:	00db      	lsls	r3, r3, #3
 8008d8a:	3310      	adds	r3, #16
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	4413      	add	r3, r2
 8008d90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2201      	movs	r2, #1
 8008d96:	705a      	strb	r2, [r3, #1]
 8008d98:	e00c      	b.n	8008db4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008d9a:	78fa      	ldrb	r2, [r7, #3]
 8008d9c:	4613      	mov	r3, r2
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	4413      	add	r3, r2
 8008da2:	00db      	lsls	r3, r3, #3
 8008da4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	4413      	add	r3, r2
 8008dac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2200      	movs	r2, #0
 8008db2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2201      	movs	r2, #1
 8008db8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008dba:	78fb      	ldrb	r3, [r7, #3]
 8008dbc:	f003 0307 	and.w	r3, r3, #7
 8008dc0:	b2da      	uxtb	r2, r3
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d101      	bne.n	8008dd4 <HAL_PCD_EP_SetStall+0x7e>
 8008dd0:	2302      	movs	r3, #2
 8008dd2:	e00e      	b.n	8008df2 <HAL_PCD_EP_SetStall+0x9c>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	68f9      	ldr	r1, [r7, #12]
 8008de2:	4618      	mov	r0, r3
 8008de4:	f006 fa90 	bl	800f308 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3710      	adds	r7, #16
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}

08008dfa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b084      	sub	sp, #16
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
 8008e02:	460b      	mov	r3, r1
 8008e04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008e06:	78fb      	ldrb	r3, [r7, #3]
 8008e08:	f003 030f 	and.w	r3, r3, #15
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	7912      	ldrb	r2, [r2, #4]
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d901      	bls.n	8008e18 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008e14:	2301      	movs	r3, #1
 8008e16:	e040      	b.n	8008e9a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008e18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	da0e      	bge.n	8008e3e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008e20:	78fb      	ldrb	r3, [r7, #3]
 8008e22:	f003 0207 	and.w	r2, r3, #7
 8008e26:	4613      	mov	r3, r2
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	4413      	add	r3, r2
 8008e2c:	00db      	lsls	r3, r3, #3
 8008e2e:	3310      	adds	r3, #16
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	4413      	add	r3, r2
 8008e34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	705a      	strb	r2, [r3, #1]
 8008e3c:	e00e      	b.n	8008e5c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008e3e:	78fb      	ldrb	r3, [r7, #3]
 8008e40:	f003 0207 	and.w	r2, r3, #7
 8008e44:	4613      	mov	r3, r2
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	4413      	add	r3, r2
 8008e4a:	00db      	lsls	r3, r3, #3
 8008e4c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	4413      	add	r3, r2
 8008e54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008e62:	78fb      	ldrb	r3, [r7, #3]
 8008e64:	f003 0307 	and.w	r3, r3, #7
 8008e68:	b2da      	uxtb	r2, r3
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d101      	bne.n	8008e7c <HAL_PCD_EP_ClrStall+0x82>
 8008e78:	2302      	movs	r3, #2
 8008e7a:	e00e      	b.n	8008e9a <HAL_PCD_EP_ClrStall+0xa0>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68f9      	ldr	r1, [r7, #12]
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f006 fa8d 	bl	800f3aa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b096      	sub	sp, #88	@ 0x58
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008eaa:	e3ad      	b.n	8009608 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008eb4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8008eb8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	f003 030f 	and.w	r3, r3, #15
 8008ec2:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8008ec6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	f040 816f 	bne.w	80091ae <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8008ed0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008ed4:	f003 0310 	and.w	r3, r3, #16
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d14c      	bne.n	8008f76 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	881b      	ldrh	r3, [r3, #0]
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8008ee8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008eec:	81fb      	strh	r3, [r7, #14]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	89fb      	ldrh	r3, [r7, #14]
 8008ef4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ef8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	3310      	adds	r3, #16
 8008f04:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	461a      	mov	r2, r3
 8008f12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	00db      	lsls	r3, r3, #3
 8008f18:	4413      	add	r3, r2
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	6812      	ldr	r2, [r2, #0]
 8008f1e:	4413      	add	r3, r2
 8008f20:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008f24:	881b      	ldrh	r3, [r3, #0]
 8008f26:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008f2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f2c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8008f2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f30:	695a      	ldr	r2, [r3, #20]
 8008f32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f34:	69db      	ldr	r3, [r3, #28]
 8008f36:	441a      	add	r2, r3
 8008f38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f3a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8008f3c:	2100      	movs	r1, #0
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f008 fdd5 	bl	8011aee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	7b1b      	ldrb	r3, [r3, #12]
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	f000 835c 	beq.w	8009608 <PCD_EP_ISR_Handler+0x766>
 8008f50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f52:	699b      	ldr	r3, [r3, #24]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	f040 8357 	bne.w	8009608 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	7b1b      	ldrb	r3, [r3, #12]
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008f64:	b2da      	uxtb	r2, r3
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	731a      	strb	r2, [r3, #12]
 8008f74:	e348      	b.n	8009608 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008f7c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	881b      	ldrh	r3, [r3, #0]
 8008f84:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8008f88:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8008f8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d032      	beq.n	8008ffa <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	00db      	lsls	r3, r3, #3
 8008fa6:	4413      	add	r3, r2
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	6812      	ldr	r2, [r2, #0]
 8008fac:	4413      	add	r3, r2
 8008fae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008fb2:	881b      	ldrh	r3, [r3, #0]
 8008fb4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008fb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008fba:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6818      	ldr	r0, [r3, #0]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8008fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008fc8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8008fca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008fcc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008fce:	b29b      	uxth	r3, r3
 8008fd0:	f006 fb16 	bl	800f600 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	881b      	ldrh	r3, [r3, #0]
 8008fda:	b29a      	uxth	r2, r3
 8008fdc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8008fe0:	4013      	ands	r3, r2
 8008fe2:	823b      	strh	r3, [r7, #16]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	8a3a      	ldrh	r2, [r7, #16]
 8008fea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008fee:	b292      	uxth	r2, r2
 8008ff0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f008 fd4e 	bl	8011a94 <HAL_PCD_SetupStageCallback>
 8008ff8:	e306      	b.n	8009608 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8008ffa:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	f280 8302 	bge.w	8009608 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	881b      	ldrh	r3, [r3, #0]
 800900a:	b29a      	uxth	r2, r3
 800900c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8009010:	4013      	ands	r3, r2
 8009012:	83fb      	strh	r3, [r7, #30]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	8bfa      	ldrh	r2, [r7, #30]
 800901a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800901e:	b292      	uxth	r2, r2
 8009020:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800902a:	b29b      	uxth	r3, r3
 800902c:	461a      	mov	r2, r3
 800902e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	00db      	lsls	r3, r3, #3
 8009034:	4413      	add	r3, r2
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	6812      	ldr	r2, [r2, #0]
 800903a:	4413      	add	r3, r2
 800903c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009040:	881b      	ldrh	r3, [r3, #0]
 8009042:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009048:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800904a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800904c:	69db      	ldr	r3, [r3, #28]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d019      	beq.n	8009086 <PCD_EP_ISR_Handler+0x1e4>
 8009052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009054:	695b      	ldr	r3, [r3, #20]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d015      	beq.n	8009086 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6818      	ldr	r0, [r3, #0]
 800905e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009060:	6959      	ldr	r1, [r3, #20]
 8009062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009064:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8009066:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009068:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800906a:	b29b      	uxth	r3, r3
 800906c:	f006 fac8 	bl	800f600 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8009070:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009072:	695a      	ldr	r2, [r3, #20]
 8009074:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009076:	69db      	ldr	r3, [r3, #28]
 8009078:	441a      	add	r2, r3
 800907a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800907c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800907e:	2100      	movs	r1, #0
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f008 fd19 	bl	8011ab8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	881b      	ldrh	r3, [r3, #0]
 800908c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8009090:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009094:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009098:	2b00      	cmp	r3, #0
 800909a:	f040 82b5 	bne.w	8009608 <PCD_EP_ISR_Handler+0x766>
 800909e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80090a2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80090a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80090aa:	f000 82ad 	beq.w	8009608 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	61bb      	str	r3, [r7, #24]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80090bc:	b29b      	uxth	r3, r3
 80090be:	461a      	mov	r2, r3
 80090c0:	69bb      	ldr	r3, [r7, #24]
 80090c2:	4413      	add	r3, r2
 80090c4:	61bb      	str	r3, [r7, #24]
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80090cc:	617b      	str	r3, [r7, #20]
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	881b      	ldrh	r3, [r3, #0]
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80090d8:	b29a      	uxth	r2, r3
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	801a      	strh	r2, [r3, #0]
 80090de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090e0:	691b      	ldr	r3, [r3, #16]
 80090e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80090e4:	d91d      	bls.n	8009122 <PCD_EP_ISR_Handler+0x280>
 80090e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090e8:	691b      	ldr	r3, [r3, #16]
 80090ea:	095b      	lsrs	r3, r3, #5
 80090ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80090ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090f0:	691b      	ldr	r3, [r3, #16]
 80090f2:	f003 031f 	and.w	r3, r3, #31
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d102      	bne.n	8009100 <PCD_EP_ISR_Handler+0x25e>
 80090fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090fc:	3b01      	subs	r3, #1
 80090fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	881b      	ldrh	r3, [r3, #0]
 8009104:	b29a      	uxth	r2, r3
 8009106:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009108:	b29b      	uxth	r3, r3
 800910a:	029b      	lsls	r3, r3, #10
 800910c:	b29b      	uxth	r3, r3
 800910e:	4313      	orrs	r3, r2
 8009110:	b29b      	uxth	r3, r3
 8009112:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009116:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800911a:	b29a      	uxth	r2, r3
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	801a      	strh	r2, [r3, #0]
 8009120:	e026      	b.n	8009170 <PCD_EP_ISR_Handler+0x2ce>
 8009122:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009124:	691b      	ldr	r3, [r3, #16]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d10a      	bne.n	8009140 <PCD_EP_ISR_Handler+0x29e>
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	881b      	ldrh	r3, [r3, #0]
 800912e:	b29b      	uxth	r3, r3
 8009130:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009134:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009138:	b29a      	uxth	r2, r3
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	801a      	strh	r2, [r3, #0]
 800913e:	e017      	b.n	8009170 <PCD_EP_ISR_Handler+0x2ce>
 8009140:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009142:	691b      	ldr	r3, [r3, #16]
 8009144:	085b      	lsrs	r3, r3, #1
 8009146:	647b      	str	r3, [r7, #68]	@ 0x44
 8009148:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800914a:	691b      	ldr	r3, [r3, #16]
 800914c:	f003 0301 	and.w	r3, r3, #1
 8009150:	2b00      	cmp	r3, #0
 8009152:	d002      	beq.n	800915a <PCD_EP_ISR_Handler+0x2b8>
 8009154:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009156:	3301      	adds	r3, #1
 8009158:	647b      	str	r3, [r7, #68]	@ 0x44
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	881b      	ldrh	r3, [r3, #0]
 800915e:	b29a      	uxth	r2, r3
 8009160:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009162:	b29b      	uxth	r3, r3
 8009164:	029b      	lsls	r3, r3, #10
 8009166:	b29b      	uxth	r3, r3
 8009168:	4313      	orrs	r3, r2
 800916a:	b29a      	uxth	r2, r3
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	881b      	ldrh	r3, [r3, #0]
 8009176:	b29b      	uxth	r3, r3
 8009178:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800917c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009180:	827b      	strh	r3, [r7, #18]
 8009182:	8a7b      	ldrh	r3, [r7, #18]
 8009184:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009188:	827b      	strh	r3, [r7, #18]
 800918a:	8a7b      	ldrh	r3, [r7, #18]
 800918c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009190:	827b      	strh	r3, [r7, #18]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	8a7b      	ldrh	r3, [r7, #18]
 8009198:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800919c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	8013      	strh	r3, [r2, #0]
 80091ac:	e22c      	b.n	8009608 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	461a      	mov	r2, r3
 80091b4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	4413      	add	r3, r2
 80091bc:	881b      	ldrh	r3, [r3, #0]
 80091be:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80091c2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	f280 80f6 	bge.w	80093b8 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	461a      	mov	r2, r3
 80091d2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	4413      	add	r3, r2
 80091da:	881b      	ldrh	r3, [r3, #0]
 80091dc:	b29a      	uxth	r2, r3
 80091de:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80091e2:	4013      	ands	r3, r2
 80091e4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	461a      	mov	r2, r3
 80091ee:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80091f2:	009b      	lsls	r3, r3, #2
 80091f4:	4413      	add	r3, r2
 80091f6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80091fa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80091fe:	b292      	uxth	r2, r2
 8009200:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8009202:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8009206:	4613      	mov	r3, r2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	4413      	add	r3, r2
 800920c:	00db      	lsls	r3, r3, #3
 800920e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	4413      	add	r3, r2
 8009216:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8009218:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800921a:	7b1b      	ldrb	r3, [r3, #12]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d123      	bne.n	8009268 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009228:	b29b      	uxth	r3, r3
 800922a:	461a      	mov	r2, r3
 800922c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	00db      	lsls	r3, r3, #3
 8009232:	4413      	add	r3, r2
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	6812      	ldr	r2, [r2, #0]
 8009238:	4413      	add	r3, r2
 800923a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800923e:	881b      	ldrh	r3, [r3, #0]
 8009240:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009244:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8009248:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800924c:	2b00      	cmp	r3, #0
 800924e:	f000 808e 	beq.w	800936e <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6818      	ldr	r0, [r3, #0]
 8009256:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009258:	6959      	ldr	r1, [r3, #20]
 800925a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800925c:	88da      	ldrh	r2, [r3, #6]
 800925e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009262:	f006 f9cd 	bl	800f600 <USB_ReadPMA>
 8009266:	e082      	b.n	800936e <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8009268:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800926a:	78db      	ldrb	r3, [r3, #3]
 800926c:	2b02      	cmp	r3, #2
 800926e:	d10a      	bne.n	8009286 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8009270:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009274:	461a      	mov	r2, r3
 8009276:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 f9d3 	bl	8009624 <HAL_PCD_EP_DB_Receive>
 800927e:	4603      	mov	r3, r0
 8009280:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8009284:	e073      	b.n	800936e <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	461a      	mov	r2, r3
 800928c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	4413      	add	r3, r2
 8009294:	881b      	ldrh	r3, [r3, #0]
 8009296:	b29b      	uxth	r3, r3
 8009298:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800929c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092a0:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	461a      	mov	r2, r3
 80092aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	009b      	lsls	r3, r3, #2
 80092b0:	441a      	add	r2, r3
 80092b2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80092b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092c2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	461a      	mov	r2, r3
 80092d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	009b      	lsls	r3, r3, #2
 80092d6:	4413      	add	r3, r2
 80092d8:	881b      	ldrh	r3, [r3, #0]
 80092da:	b29b      	uxth	r3, r3
 80092dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d022      	beq.n	800932a <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80092ec:	b29b      	uxth	r3, r3
 80092ee:	461a      	mov	r2, r3
 80092f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	00db      	lsls	r3, r3, #3
 80092f6:	4413      	add	r3, r2
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	6812      	ldr	r2, [r2, #0]
 80092fc:	4413      	add	r3, r2
 80092fe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009302:	881b      	ldrh	r3, [r3, #0]
 8009304:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009308:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800930c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009310:	2b00      	cmp	r3, #0
 8009312:	d02c      	beq.n	800936e <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6818      	ldr	r0, [r3, #0]
 8009318:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800931a:	6959      	ldr	r1, [r3, #20]
 800931c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800931e:	891a      	ldrh	r2, [r3, #8]
 8009320:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009324:	f006 f96c 	bl	800f600 <USB_ReadPMA>
 8009328:	e021      	b.n	800936e <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009332:	b29b      	uxth	r3, r3
 8009334:	461a      	mov	r2, r3
 8009336:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	00db      	lsls	r3, r3, #3
 800933c:	4413      	add	r3, r2
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	6812      	ldr	r2, [r2, #0]
 8009342:	4413      	add	r3, r2
 8009344:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009348:	881b      	ldrh	r3, [r3, #0]
 800934a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800934e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8009352:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009356:	2b00      	cmp	r3, #0
 8009358:	d009      	beq.n	800936e <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6818      	ldr	r0, [r3, #0]
 800935e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009360:	6959      	ldr	r1, [r3, #20]
 8009362:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009364:	895a      	ldrh	r2, [r3, #10]
 8009366:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800936a:	f006 f949 	bl	800f600 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800936e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009370:	69da      	ldr	r2, [r3, #28]
 8009372:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009376:	441a      	add	r2, r3
 8009378:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800937a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800937c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800937e:	695a      	ldr	r2, [r3, #20]
 8009380:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009384:	441a      	add	r2, r3
 8009386:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009388:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800938a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800938c:	699b      	ldr	r3, [r3, #24]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d005      	beq.n	800939e <PCD_EP_ISR_Handler+0x4fc>
 8009392:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8009396:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	429a      	cmp	r2, r3
 800939c:	d206      	bcs.n	80093ac <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800939e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80093a0:	781b      	ldrb	r3, [r3, #0]
 80093a2:	4619      	mov	r1, r3
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f008 fb87 	bl	8011ab8 <HAL_PCD_DataOutStageCallback>
 80093aa:	e005      	b.n	80093b8 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80093b2:	4618      	mov	r0, r3
 80093b4:	f004 fbf7 	bl	800dba6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80093b8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80093bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f000 8121 	beq.w	8009608 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 80093c6:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80093ca:	4613      	mov	r3, r2
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	4413      	add	r3, r2
 80093d0:	00db      	lsls	r3, r3, #3
 80093d2:	3310      	adds	r3, #16
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	4413      	add	r3, r2
 80093d8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	461a      	mov	r2, r3
 80093e0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	4413      	add	r3, r2
 80093e8:	881b      	ldrh	r3, [r3, #0]
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80093f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093f4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	461a      	mov	r2, r3
 80093fe:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	441a      	add	r2, r3
 8009406:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800940a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800940e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009412:	b29b      	uxth	r3, r3
 8009414:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8009416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009418:	78db      	ldrb	r3, [r3, #3]
 800941a:	2b01      	cmp	r3, #1
 800941c:	f040 80a2 	bne.w	8009564 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8009420:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009422:	2200      	movs	r2, #0
 8009424:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8009426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009428:	7b1b      	ldrb	r3, [r3, #12]
 800942a:	2b00      	cmp	r3, #0
 800942c:	f000 8093 	beq.w	8009556 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009430:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009438:	2b00      	cmp	r3, #0
 800943a:	d046      	beq.n	80094ca <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800943c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800943e:	785b      	ldrb	r3, [r3, #1]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d126      	bne.n	8009492 <PCD_EP_ISR_Handler+0x5f0>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	627b      	str	r3, [r7, #36]	@ 0x24
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009452:	b29b      	uxth	r3, r3
 8009454:	461a      	mov	r2, r3
 8009456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009458:	4413      	add	r3, r2
 800945a:	627b      	str	r3, [r7, #36]	@ 0x24
 800945c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	00da      	lsls	r2, r3, #3
 8009462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009464:	4413      	add	r3, r2
 8009466:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800946a:	623b      	str	r3, [r7, #32]
 800946c:	6a3b      	ldr	r3, [r7, #32]
 800946e:	881b      	ldrh	r3, [r3, #0]
 8009470:	b29b      	uxth	r3, r3
 8009472:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009476:	b29a      	uxth	r2, r3
 8009478:	6a3b      	ldr	r3, [r7, #32]
 800947a:	801a      	strh	r2, [r3, #0]
 800947c:	6a3b      	ldr	r3, [r7, #32]
 800947e:	881b      	ldrh	r3, [r3, #0]
 8009480:	b29b      	uxth	r3, r3
 8009482:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009486:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800948a:	b29a      	uxth	r2, r3
 800948c:	6a3b      	ldr	r3, [r7, #32]
 800948e:	801a      	strh	r2, [r3, #0]
 8009490:	e061      	b.n	8009556 <PCD_EP_ISR_Handler+0x6b4>
 8009492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009494:	785b      	ldrb	r3, [r3, #1]
 8009496:	2b01      	cmp	r3, #1
 8009498:	d15d      	bne.n	8009556 <PCD_EP_ISR_Handler+0x6b4>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	461a      	mov	r2, r3
 80094ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ae:	4413      	add	r3, r2
 80094b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80094b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	00da      	lsls	r2, r3, #3
 80094b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ba:	4413      	add	r3, r2
 80094bc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80094c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80094c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094c4:	2200      	movs	r2, #0
 80094c6:	801a      	strh	r2, [r3, #0]
 80094c8:	e045      	b.n	8009556 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094d2:	785b      	ldrb	r3, [r3, #1]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d126      	bne.n	8009526 <PCD_EP_ISR_Handler+0x684>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	461a      	mov	r2, r3
 80094ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094ec:	4413      	add	r3, r2
 80094ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80094f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	00da      	lsls	r2, r3, #3
 80094f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094f8:	4413      	add	r3, r2
 80094fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80094fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8009500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009502:	881b      	ldrh	r3, [r3, #0]
 8009504:	b29b      	uxth	r3, r3
 8009506:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800950a:	b29a      	uxth	r2, r3
 800950c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800950e:	801a      	strh	r2, [r3, #0]
 8009510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009512:	881b      	ldrh	r3, [r3, #0]
 8009514:	b29b      	uxth	r3, r3
 8009516:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800951a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800951e:	b29a      	uxth	r2, r3
 8009520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009522:	801a      	strh	r2, [r3, #0]
 8009524:	e017      	b.n	8009556 <PCD_EP_ISR_Handler+0x6b4>
 8009526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009528:	785b      	ldrb	r3, [r3, #1]
 800952a:	2b01      	cmp	r3, #1
 800952c:	d113      	bne.n	8009556 <PCD_EP_ISR_Handler+0x6b4>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009536:	b29b      	uxth	r3, r3
 8009538:	461a      	mov	r2, r3
 800953a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800953c:	4413      	add	r3, r2
 800953e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009540:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	00da      	lsls	r2, r3, #3
 8009546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009548:	4413      	add	r3, r2
 800954a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800954e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009552:	2200      	movs	r2, #0
 8009554:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009556:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	4619      	mov	r1, r3
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f008 fac6 	bl	8011aee <HAL_PCD_DataInStageCallback>
 8009562:	e051      	b.n	8009608 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8009564:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800956c:	2b00      	cmp	r3, #0
 800956e:	d144      	bne.n	80095fa <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009578:	b29b      	uxth	r3, r3
 800957a:	461a      	mov	r2, r3
 800957c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	00db      	lsls	r3, r3, #3
 8009582:	4413      	add	r3, r2
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	6812      	ldr	r2, [r2, #0]
 8009588:	4413      	add	r3, r2
 800958a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800958e:	881b      	ldrh	r3, [r3, #0]
 8009590:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009594:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8009598:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800959a:	699a      	ldr	r2, [r3, #24]
 800959c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d907      	bls.n	80095b4 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 80095a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095a6:	699a      	ldr	r2, [r3, #24]
 80095a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80095ac:	1ad2      	subs	r2, r2, r3
 80095ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095b0:	619a      	str	r2, [r3, #24]
 80095b2:	e002      	b.n	80095ba <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 80095b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095b6:	2200      	movs	r2, #0
 80095b8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80095ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095bc:	699b      	ldr	r3, [r3, #24]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d106      	bne.n	80095d0 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80095c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	4619      	mov	r1, r3
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f008 fa90 	bl	8011aee <HAL_PCD_DataInStageCallback>
 80095ce:	e01b      	b.n	8009608 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80095d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095d2:	695a      	ldr	r2, [r3, #20]
 80095d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80095d8:	441a      	add	r2, r3
 80095da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095dc:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80095de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095e0:	69da      	ldr	r2, [r3, #28]
 80095e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80095e6:	441a      	add	r2, r3
 80095e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095ea:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80095f2:	4618      	mov	r0, r3
 80095f4:	f004 fad7 	bl	800dba6 <USB_EPStartXfer>
 80095f8:	e006      	b.n	8009608 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80095fa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80095fe:	461a      	mov	r2, r3
 8009600:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 f917 	bl	8009836 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009610:	b29b      	uxth	r3, r3
 8009612:	b21b      	sxth	r3, r3
 8009614:	2b00      	cmp	r3, #0
 8009616:	f6ff ac49 	blt.w	8008eac <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800961a:	2300      	movs	r3, #0
}
 800961c:	4618      	mov	r0, r3
 800961e:	3758      	adds	r7, #88	@ 0x58
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b088      	sub	sp, #32
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	4613      	mov	r3, r2
 8009630:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009632:	88fb      	ldrh	r3, [r7, #6]
 8009634:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009638:	2b00      	cmp	r3, #0
 800963a:	d07c      	beq.n	8009736 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009644:	b29b      	uxth	r3, r3
 8009646:	461a      	mov	r2, r3
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	781b      	ldrb	r3, [r3, #0]
 800964c:	00db      	lsls	r3, r3, #3
 800964e:	4413      	add	r3, r2
 8009650:	68fa      	ldr	r2, [r7, #12]
 8009652:	6812      	ldr	r2, [r2, #0]
 8009654:	4413      	add	r3, r2
 8009656:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800965a:	881b      	ldrh	r3, [r3, #0]
 800965c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009660:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	699a      	ldr	r2, [r3, #24]
 8009666:	8b7b      	ldrh	r3, [r7, #26]
 8009668:	429a      	cmp	r2, r3
 800966a:	d306      	bcc.n	800967a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	699a      	ldr	r2, [r3, #24]
 8009670:	8b7b      	ldrh	r3, [r7, #26]
 8009672:	1ad2      	subs	r2, r2, r3
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	619a      	str	r2, [r3, #24]
 8009678:	e002      	b.n	8009680 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	2200      	movs	r2, #0
 800967e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	699b      	ldr	r3, [r3, #24]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d123      	bne.n	80096d0 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	461a      	mov	r2, r3
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	781b      	ldrb	r3, [r3, #0]
 8009692:	009b      	lsls	r3, r3, #2
 8009694:	4413      	add	r3, r2
 8009696:	881b      	ldrh	r3, [r3, #0]
 8009698:	b29b      	uxth	r3, r3
 800969a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800969e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096a2:	833b      	strh	r3, [r7, #24]
 80096a4:	8b3b      	ldrh	r3, [r7, #24]
 80096a6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80096aa:	833b      	strh	r3, [r7, #24]
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	461a      	mov	r2, r3
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	009b      	lsls	r3, r3, #2
 80096b8:	441a      	add	r2, r3
 80096ba:	8b3b      	ldrh	r3, [r7, #24]
 80096bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80096d0:	88fb      	ldrh	r3, [r7, #6]
 80096d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d01f      	beq.n	800971a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	461a      	mov	r2, r3
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	781b      	ldrb	r3, [r3, #0]
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	4413      	add	r3, r2
 80096e8:	881b      	ldrh	r3, [r3, #0]
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096f4:	82fb      	strh	r3, [r7, #22]
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	461a      	mov	r2, r3
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	781b      	ldrb	r3, [r3, #0]
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	441a      	add	r2, r3
 8009704:	8afb      	ldrh	r3, [r7, #22]
 8009706:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800970a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800970e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009712:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009716:	b29b      	uxth	r3, r3
 8009718:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800971a:	8b7b      	ldrh	r3, [r7, #26]
 800971c:	2b00      	cmp	r3, #0
 800971e:	f000 8085 	beq.w	800982c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	6818      	ldr	r0, [r3, #0]
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	6959      	ldr	r1, [r3, #20]
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	891a      	ldrh	r2, [r3, #8]
 800972e:	8b7b      	ldrh	r3, [r7, #26]
 8009730:	f005 ff66 	bl	800f600 <USB_ReadPMA>
 8009734:	e07a      	b.n	800982c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800973e:	b29b      	uxth	r3, r3
 8009740:	461a      	mov	r2, r3
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	00db      	lsls	r3, r3, #3
 8009748:	4413      	add	r3, r2
 800974a:	68fa      	ldr	r2, [r7, #12]
 800974c:	6812      	ldr	r2, [r2, #0]
 800974e:	4413      	add	r3, r2
 8009750:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009754:	881b      	ldrh	r3, [r3, #0]
 8009756:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800975a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	699a      	ldr	r2, [r3, #24]
 8009760:	8b7b      	ldrh	r3, [r7, #26]
 8009762:	429a      	cmp	r2, r3
 8009764:	d306      	bcc.n	8009774 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	699a      	ldr	r2, [r3, #24]
 800976a:	8b7b      	ldrh	r3, [r7, #26]
 800976c:	1ad2      	subs	r2, r2, r3
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	619a      	str	r2, [r3, #24]
 8009772:	e002      	b.n	800977a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	2200      	movs	r2, #0
 8009778:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	699b      	ldr	r3, [r3, #24]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d123      	bne.n	80097ca <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	461a      	mov	r2, r3
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	4413      	add	r3, r2
 8009790:	881b      	ldrh	r3, [r3, #0]
 8009792:	b29b      	uxth	r3, r3
 8009794:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009798:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800979c:	83fb      	strh	r3, [r7, #30]
 800979e:	8bfb      	ldrh	r3, [r7, #30]
 80097a0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80097a4:	83fb      	strh	r3, [r7, #30]
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	461a      	mov	r2, r3
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	441a      	add	r2, r3
 80097b4:	8bfb      	ldrh	r3, [r7, #30]
 80097b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80097ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80097be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80097ca:	88fb      	ldrh	r3, [r7, #6]
 80097cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d11f      	bne.n	8009814 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	461a      	mov	r2, r3
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	4413      	add	r3, r2
 80097e2:	881b      	ldrh	r3, [r3, #0]
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80097ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097ee:	83bb      	strh	r3, [r7, #28]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	461a      	mov	r2, r3
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	441a      	add	r2, r3
 80097fe:	8bbb      	ldrh	r3, [r7, #28]
 8009800:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009804:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009808:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800980c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009810:	b29b      	uxth	r3, r3
 8009812:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8009814:	8b7b      	ldrh	r3, [r7, #26]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d008      	beq.n	800982c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	6818      	ldr	r0, [r3, #0]
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	6959      	ldr	r1, [r3, #20]
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	895a      	ldrh	r2, [r3, #10]
 8009826:	8b7b      	ldrh	r3, [r7, #26]
 8009828:	f005 feea 	bl	800f600 <USB_ReadPMA>
    }
  }

  return count;
 800982c:	8b7b      	ldrh	r3, [r7, #26]
}
 800982e:	4618      	mov	r0, r3
 8009830:	3720      	adds	r7, #32
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009836:	b580      	push	{r7, lr}
 8009838:	b0a4      	sub	sp, #144	@ 0x90
 800983a:	af00      	add	r7, sp, #0
 800983c:	60f8      	str	r0, [r7, #12]
 800983e:	60b9      	str	r1, [r7, #8]
 8009840:	4613      	mov	r3, r2
 8009842:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009844:	88fb      	ldrh	r3, [r7, #6]
 8009846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800984a:	2b00      	cmp	r3, #0
 800984c:	f000 81db 	beq.w	8009c06 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009858:	b29b      	uxth	r3, r3
 800985a:	461a      	mov	r2, r3
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	00db      	lsls	r3, r3, #3
 8009862:	4413      	add	r3, r2
 8009864:	68fa      	ldr	r2, [r7, #12]
 8009866:	6812      	ldr	r2, [r2, #0]
 8009868:	4413      	add	r3, r2
 800986a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800986e:	881b      	ldrh	r3, [r3, #0]
 8009870:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009874:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	699a      	ldr	r2, [r3, #24]
 800987c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009880:	429a      	cmp	r2, r3
 8009882:	d907      	bls.n	8009894 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	699a      	ldr	r2, [r3, #24]
 8009888:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800988c:	1ad2      	subs	r2, r2, r3
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	619a      	str	r2, [r3, #24]
 8009892:	e002      	b.n	800989a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	2200      	movs	r2, #0
 8009898:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	699b      	ldr	r3, [r3, #24]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	f040 80b9 	bne.w	8009a16 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	785b      	ldrb	r3, [r3, #1]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d126      	bne.n	80098fa <HAL_PCD_EP_DB_Transmit+0xc4>
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	461a      	mov	r2, r3
 80098be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098c0:	4413      	add	r3, r2
 80098c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	00da      	lsls	r2, r3, #3
 80098ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098cc:	4413      	add	r3, r2
 80098ce:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80098d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80098d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098d6:	881b      	ldrh	r3, [r3, #0]
 80098d8:	b29b      	uxth	r3, r3
 80098da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098de:	b29a      	uxth	r2, r3
 80098e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098e2:	801a      	strh	r2, [r3, #0]
 80098e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098e6:	881b      	ldrh	r3, [r3, #0]
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098f2:	b29a      	uxth	r2, r3
 80098f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098f6:	801a      	strh	r2, [r3, #0]
 80098f8:	e01a      	b.n	8009930 <HAL_PCD_EP_DB_Transmit+0xfa>
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	785b      	ldrb	r3, [r3, #1]
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d116      	bne.n	8009930 <HAL_PCD_EP_DB_Transmit+0xfa>
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	637b      	str	r3, [r7, #52]	@ 0x34
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009910:	b29b      	uxth	r3, r3
 8009912:	461a      	mov	r2, r3
 8009914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009916:	4413      	add	r3, r2
 8009918:	637b      	str	r3, [r7, #52]	@ 0x34
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	00da      	lsls	r2, r3, #3
 8009920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009922:	4413      	add	r3, r2
 8009924:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009928:	633b      	str	r3, [r7, #48]	@ 0x30
 800992a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800992c:	2200      	movs	r2, #0
 800992e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	627b      	str	r3, [r7, #36]	@ 0x24
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	785b      	ldrb	r3, [r3, #1]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d126      	bne.n	800998c <HAL_PCD_EP_DB_Transmit+0x156>
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	61fb      	str	r3, [r7, #28]
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800994c:	b29b      	uxth	r3, r3
 800994e:	461a      	mov	r2, r3
 8009950:	69fb      	ldr	r3, [r7, #28]
 8009952:	4413      	add	r3, r2
 8009954:	61fb      	str	r3, [r7, #28]
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	00da      	lsls	r2, r3, #3
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	4413      	add	r3, r2
 8009960:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009964:	61bb      	str	r3, [r7, #24]
 8009966:	69bb      	ldr	r3, [r7, #24]
 8009968:	881b      	ldrh	r3, [r3, #0]
 800996a:	b29b      	uxth	r3, r3
 800996c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009970:	b29a      	uxth	r2, r3
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	801a      	strh	r2, [r3, #0]
 8009976:	69bb      	ldr	r3, [r7, #24]
 8009978:	881b      	ldrh	r3, [r3, #0]
 800997a:	b29b      	uxth	r3, r3
 800997c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009980:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009984:	b29a      	uxth	r2, r3
 8009986:	69bb      	ldr	r3, [r7, #24]
 8009988:	801a      	strh	r2, [r3, #0]
 800998a:	e017      	b.n	80099bc <HAL_PCD_EP_DB_Transmit+0x186>
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	785b      	ldrb	r3, [r3, #1]
 8009990:	2b01      	cmp	r3, #1
 8009992:	d113      	bne.n	80099bc <HAL_PCD_EP_DB_Transmit+0x186>
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800999c:	b29b      	uxth	r3, r3
 800999e:	461a      	mov	r2, r3
 80099a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099a2:	4413      	add	r3, r2
 80099a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	00da      	lsls	r2, r3, #3
 80099ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ae:	4413      	add	r3, r2
 80099b0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80099b4:	623b      	str	r3, [r7, #32]
 80099b6:	6a3b      	ldr	r3, [r7, #32]
 80099b8:	2200      	movs	r2, #0
 80099ba:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	4619      	mov	r1, r3
 80099c2:	68f8      	ldr	r0, [r7, #12]
 80099c4:	f008 f893 	bl	8011aee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80099c8:	88fb      	ldrh	r3, [r7, #6]
 80099ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	f000 82fa 	beq.w	8009fc8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	461a      	mov	r2, r3
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	4413      	add	r3, r2
 80099e2:	881b      	ldrh	r3, [r3, #0]
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80099ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099ee:	82fb      	strh	r3, [r7, #22]
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	461a      	mov	r2, r3
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	009b      	lsls	r3, r3, #2
 80099fc:	441a      	add	r2, r3
 80099fe:	8afb      	ldrh	r3, [r7, #22]
 8009a00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a08:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009a0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	8013      	strh	r3, [r2, #0]
 8009a14:	e2d8      	b.n	8009fc8 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009a16:	88fb      	ldrh	r3, [r7, #6]
 8009a18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d021      	beq.n	8009a64 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	461a      	mov	r2, r3
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	4413      	add	r3, r2
 8009a2e:	881b      	ldrh	r3, [r3, #0]
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a3a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	461a      	mov	r2, r3
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	441a      	add	r2, r3
 8009a4c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009a50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a58:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009a5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a60:	b29b      	uxth	r3, r3
 8009a62:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	f040 82ac 	bne.w	8009fc8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	695a      	ldr	r2, [r3, #20]
 8009a74:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009a78:	441a      	add	r2, r3
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	69da      	ldr	r2, [r3, #28]
 8009a82:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009a86:	441a      	add	r2, r3
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	6a1a      	ldr	r2, [r3, #32]
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	691b      	ldr	r3, [r3, #16]
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d30b      	bcc.n	8009ab0 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	691b      	ldr	r3, [r3, #16]
 8009a9c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	6a1a      	ldr	r2, [r3, #32]
 8009aa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009aa8:	1ad2      	subs	r2, r2, r3
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	621a      	str	r2, [r3, #32]
 8009aae:	e017      	b.n	8009ae0 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	6a1b      	ldr	r3, [r3, #32]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d108      	bne.n	8009aca <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8009ab8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009abc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8009ac8:	e00a      	b.n	8009ae0 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	2200      	movs	r2, #0
 8009ace:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	6a1b      	ldr	r3, [r3, #32]
 8009ad6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	2200      	movs	r2, #0
 8009ade:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	785b      	ldrb	r3, [r3, #1]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d165      	bne.n	8009bb4 <HAL_PCD_EP_DB_Transmit+0x37e>
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	461a      	mov	r2, r3
 8009afa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009afc:	4413      	add	r3, r2
 8009afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	00da      	lsls	r2, r3, #3
 8009b06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b08:	4413      	add	r3, r2
 8009b0a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009b0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b12:	881b      	ldrh	r3, [r3, #0]
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b1a:	b29a      	uxth	r2, r3
 8009b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b1e:	801a      	strh	r2, [r3, #0]
 8009b20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b24:	2b3e      	cmp	r3, #62	@ 0x3e
 8009b26:	d91d      	bls.n	8009b64 <HAL_PCD_EP_DB_Transmit+0x32e>
 8009b28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b2c:	095b      	lsrs	r3, r3, #5
 8009b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b34:	f003 031f 	and.w	r3, r3, #31
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d102      	bne.n	8009b42 <HAL_PCD_EP_DB_Transmit+0x30c>
 8009b3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b3e:	3b01      	subs	r3, #1
 8009b40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b44:	881b      	ldrh	r3, [r3, #0]
 8009b46:	b29a      	uxth	r2, r3
 8009b48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	029b      	lsls	r3, r3, #10
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	4313      	orrs	r3, r2
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b5c:	b29a      	uxth	r2, r3
 8009b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b60:	801a      	strh	r2, [r3, #0]
 8009b62:	e044      	b.n	8009bee <HAL_PCD_EP_DB_Transmit+0x3b8>
 8009b64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d10a      	bne.n	8009b82 <HAL_PCD_EP_DB_Transmit+0x34c>
 8009b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b6e:	881b      	ldrh	r3, [r3, #0]
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b7a:	b29a      	uxth	r2, r3
 8009b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b7e:	801a      	strh	r2, [r3, #0]
 8009b80:	e035      	b.n	8009bee <HAL_PCD_EP_DB_Transmit+0x3b8>
 8009b82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b86:	085b      	lsrs	r3, r3, #1
 8009b88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b8e:	f003 0301 	and.w	r3, r3, #1
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d002      	beq.n	8009b9c <HAL_PCD_EP_DB_Transmit+0x366>
 8009b96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b98:	3301      	adds	r3, #1
 8009b9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b9e:	881b      	ldrh	r3, [r3, #0]
 8009ba0:	b29a      	uxth	r2, r3
 8009ba2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	029b      	lsls	r3, r3, #10
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	4313      	orrs	r3, r2
 8009bac:	b29a      	uxth	r2, r3
 8009bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bb0:	801a      	strh	r2, [r3, #0]
 8009bb2:	e01c      	b.n	8009bee <HAL_PCD_EP_DB_Transmit+0x3b8>
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	785b      	ldrb	r3, [r3, #1]
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d118      	bne.n	8009bee <HAL_PCD_EP_DB_Transmit+0x3b8>
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	461a      	mov	r2, r3
 8009bce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bd0:	4413      	add	r3, r2
 8009bd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	00da      	lsls	r2, r3, #3
 8009bda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bdc:	4413      	add	r3, r2
 8009bde:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009be2:	643b      	str	r3, [r7, #64]	@ 0x40
 8009be4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009be8:	b29a      	uxth	r2, r3
 8009bea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009bec:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	6818      	ldr	r0, [r3, #0]
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	6959      	ldr	r1, [r3, #20]
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	891a      	ldrh	r2, [r3, #8]
 8009bfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	f005 fcbc 	bl	800f57c <USB_WritePMA>
 8009c04:	e1e0      	b.n	8009fc8 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	461a      	mov	r2, r3
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	00db      	lsls	r3, r3, #3
 8009c18:	4413      	add	r3, r2
 8009c1a:	68fa      	ldr	r2, [r7, #12]
 8009c1c:	6812      	ldr	r2, [r2, #0]
 8009c1e:	4413      	add	r3, r2
 8009c20:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009c24:	881b      	ldrh	r3, [r3, #0]
 8009c26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c2a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	699a      	ldr	r2, [r3, #24]
 8009c32:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d307      	bcc.n	8009c4a <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	699a      	ldr	r2, [r3, #24]
 8009c3e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009c42:	1ad2      	subs	r2, r2, r3
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	619a      	str	r2, [r3, #24]
 8009c48:	e002      	b.n	8009c50 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	699b      	ldr	r3, [r3, #24]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	f040 80c0 	bne.w	8009dda <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	785b      	ldrb	r3, [r3, #1]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d126      	bne.n	8009cb0 <HAL_PCD_EP_DB_Transmit+0x47a>
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c70:	b29b      	uxth	r3, r3
 8009c72:	461a      	mov	r2, r3
 8009c74:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009c76:	4413      	add	r3, r2
 8009c78:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	00da      	lsls	r2, r3, #3
 8009c80:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009c82:	4413      	add	r3, r2
 8009c84:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009c88:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009c8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c8c:	881b      	ldrh	r3, [r3, #0]
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c94:	b29a      	uxth	r2, r3
 8009c96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c98:	801a      	strh	r2, [r3, #0]
 8009c9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c9c:	881b      	ldrh	r3, [r3, #0]
 8009c9e:	b29b      	uxth	r3, r3
 8009ca0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ca4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ca8:	b29a      	uxth	r2, r3
 8009caa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009cac:	801a      	strh	r2, [r3, #0]
 8009cae:	e01a      	b.n	8009ce6 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	785b      	ldrb	r3, [r3, #1]
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d116      	bne.n	8009ce6 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	667b      	str	r3, [r7, #100]	@ 0x64
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	461a      	mov	r2, r3
 8009cca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ccc:	4413      	add	r3, r2
 8009cce:	667b      	str	r3, [r7, #100]	@ 0x64
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	00da      	lsls	r2, r3, #3
 8009cd6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cd8:	4413      	add	r3, r2
 8009cda:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009cde:	663b      	str	r3, [r7, #96]	@ 0x60
 8009ce0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	677b      	str	r3, [r7, #116]	@ 0x74
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	785b      	ldrb	r3, [r3, #1]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d12b      	bne.n	8009d4c <HAL_PCD_EP_DB_Transmit+0x516>
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	461a      	mov	r2, r3
 8009d06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d08:	4413      	add	r3, r2
 8009d0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	00da      	lsls	r2, r3, #3
 8009d12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d14:	4413      	add	r3, r2
 8009d16:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009d1a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009d1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009d22:	881b      	ldrh	r3, [r3, #0]
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d2a:	b29a      	uxth	r2, r3
 8009d2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009d30:	801a      	strh	r2, [r3, #0]
 8009d32:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009d36:	881b      	ldrh	r3, [r3, #0]
 8009d38:	b29b      	uxth	r3, r3
 8009d3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d42:	b29a      	uxth	r2, r3
 8009d44:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009d48:	801a      	strh	r2, [r3, #0]
 8009d4a:	e017      	b.n	8009d7c <HAL_PCD_EP_DB_Transmit+0x546>
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	785b      	ldrb	r3, [r3, #1]
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d113      	bne.n	8009d7c <HAL_PCD_EP_DB_Transmit+0x546>
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	461a      	mov	r2, r3
 8009d60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009d62:	4413      	add	r3, r2
 8009d64:	677b      	str	r3, [r7, #116]	@ 0x74
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	781b      	ldrb	r3, [r3, #0]
 8009d6a:	00da      	lsls	r2, r3, #3
 8009d6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009d6e:	4413      	add	r3, r2
 8009d70:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009d74:	673b      	str	r3, [r7, #112]	@ 0x70
 8009d76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009d78:	2200      	movs	r2, #0
 8009d7a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	4619      	mov	r1, r3
 8009d82:	68f8      	ldr	r0, [r7, #12]
 8009d84:	f007 feb3 	bl	8011aee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009d88:	88fb      	ldrh	r3, [r7, #6]
 8009d8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	f040 811a 	bne.w	8009fc8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	461a      	mov	r2, r3
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	4413      	add	r3, r2
 8009da2:	881b      	ldrh	r3, [r3, #0]
 8009da4:	b29b      	uxth	r3, r3
 8009da6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009daa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009dae:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	461a      	mov	r2, r3
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	441a      	add	r2, r3
 8009dc0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8009dc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009dc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009dcc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009dd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	8013      	strh	r3, [r2, #0]
 8009dd8:	e0f6      	b.n	8009fc8 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009dda:	88fb      	ldrh	r3, [r7, #6]
 8009ddc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d121      	bne.n	8009e28 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	461a      	mov	r2, r3
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	009b      	lsls	r3, r3, #2
 8009df0:	4413      	add	r3, r2
 8009df2:	881b      	ldrh	r3, [r3, #0]
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009dfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009dfe:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	461a      	mov	r2, r3
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	009b      	lsls	r3, r3, #2
 8009e0e:	441a      	add	r2, r3
 8009e10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009e14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009e20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	f040 80ca 	bne.w	8009fc8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	695a      	ldr	r2, [r3, #20]
 8009e38:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009e3c:	441a      	add	r2, r3
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	69da      	ldr	r2, [r3, #28]
 8009e46:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009e4a:	441a      	add	r2, r3
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	6a1a      	ldr	r2, [r3, #32]
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	691b      	ldr	r3, [r3, #16]
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d30b      	bcc.n	8009e74 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	691b      	ldr	r3, [r3, #16]
 8009e60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	6a1a      	ldr	r2, [r3, #32]
 8009e68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009e6c:	1ad2      	subs	r2, r2, r3
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	621a      	str	r2, [r3, #32]
 8009e72:	e017      	b.n	8009ea4 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	6a1b      	ldr	r3, [r3, #32]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d108      	bne.n	8009e8e <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8009e7c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009e80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	2200      	movs	r2, #0
 8009e88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8009e8c:	e00a      	b.n	8009ea4 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	6a1b      	ldr	r3, [r3, #32]
 8009e92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	657b      	str	r3, [r7, #84]	@ 0x54
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	785b      	ldrb	r3, [r3, #1]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d165      	bne.n	8009f7e <HAL_PCD_EP_DB_Transmit+0x748>
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ec0:	b29b      	uxth	r3, r3
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ec6:	4413      	add	r3, r2
 8009ec8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	00da      	lsls	r2, r3, #3
 8009ed0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ed2:	4413      	add	r3, r2
 8009ed4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009ed8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009eda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009edc:	881b      	ldrh	r3, [r3, #0]
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ee4:	b29a      	uxth	r2, r3
 8009ee6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009ee8:	801a      	strh	r2, [r3, #0]
 8009eea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009eee:	2b3e      	cmp	r3, #62	@ 0x3e
 8009ef0:	d91d      	bls.n	8009f2e <HAL_PCD_EP_DB_Transmit+0x6f8>
 8009ef2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009ef6:	095b      	lsrs	r3, r3, #5
 8009ef8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009efa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009efe:	f003 031f 	and.w	r3, r3, #31
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d102      	bne.n	8009f0c <HAL_PCD_EP_DB_Transmit+0x6d6>
 8009f06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009f08:	3b01      	subs	r3, #1
 8009f0a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009f0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f0e:	881b      	ldrh	r3, [r3, #0]
 8009f10:	b29a      	uxth	r2, r3
 8009f12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	029b      	lsls	r3, r3, #10
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f26:	b29a      	uxth	r2, r3
 8009f28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f2a:	801a      	strh	r2, [r3, #0]
 8009f2c:	e041      	b.n	8009fb2 <HAL_PCD_EP_DB_Transmit+0x77c>
 8009f2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d10a      	bne.n	8009f4c <HAL_PCD_EP_DB_Transmit+0x716>
 8009f36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f38:	881b      	ldrh	r3, [r3, #0]
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f44:	b29a      	uxth	r2, r3
 8009f46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f48:	801a      	strh	r2, [r3, #0]
 8009f4a:	e032      	b.n	8009fb2 <HAL_PCD_EP_DB_Transmit+0x77c>
 8009f4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009f50:	085b      	lsrs	r3, r3, #1
 8009f52:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009f54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009f58:	f003 0301 	and.w	r3, r3, #1
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d002      	beq.n	8009f66 <HAL_PCD_EP_DB_Transmit+0x730>
 8009f60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009f62:	3301      	adds	r3, #1
 8009f64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009f66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f68:	881b      	ldrh	r3, [r3, #0]
 8009f6a:	b29a      	uxth	r2, r3
 8009f6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009f6e:	b29b      	uxth	r3, r3
 8009f70:	029b      	lsls	r3, r3, #10
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	4313      	orrs	r3, r2
 8009f76:	b29a      	uxth	r2, r3
 8009f78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f7a:	801a      	strh	r2, [r3, #0]
 8009f7c:	e019      	b.n	8009fb2 <HAL_PCD_EP_DB_Transmit+0x77c>
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	785b      	ldrb	r3, [r3, #1]
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d115      	bne.n	8009fb2 <HAL_PCD_EP_DB_Transmit+0x77c>
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	461a      	mov	r2, r3
 8009f92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f94:	4413      	add	r3, r2
 8009f96:	657b      	str	r3, [r7, #84]	@ 0x54
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	781b      	ldrb	r3, [r3, #0]
 8009f9c:	00da      	lsls	r2, r3, #3
 8009f9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fa0:	4413      	add	r3, r2
 8009fa2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009fa6:	653b      	str	r3, [r7, #80]	@ 0x50
 8009fa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009fac:	b29a      	uxth	r2, r3
 8009fae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fb0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	6818      	ldr	r0, [r3, #0]
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	6959      	ldr	r1, [r3, #20]
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	895a      	ldrh	r2, [r3, #10]
 8009fbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	f005 fada 	bl	800f57c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	461a      	mov	r2, r3
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	009b      	lsls	r3, r3, #2
 8009fd4:	4413      	add	r3, r2
 8009fd6:	881b      	ldrh	r3, [r3, #0]
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009fde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fe2:	82bb      	strh	r3, [r7, #20]
 8009fe4:	8abb      	ldrh	r3, [r7, #20]
 8009fe6:	f083 0310 	eor.w	r3, r3, #16
 8009fea:	82bb      	strh	r3, [r7, #20]
 8009fec:	8abb      	ldrh	r3, [r7, #20]
 8009fee:	f083 0320 	eor.w	r3, r3, #32
 8009ff2:	82bb      	strh	r3, [r7, #20]
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	441a      	add	r2, r3
 800a002:	8abb      	ldrh	r3, [r7, #20]
 800a004:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a008:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a00c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a010:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a014:	b29b      	uxth	r3, r3
 800a016:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800a018:	2300      	movs	r3, #0
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3790      	adds	r7, #144	@ 0x90
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}

0800a022 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800a022:	b480      	push	{r7}
 800a024:	b087      	sub	sp, #28
 800a026:	af00      	add	r7, sp, #0
 800a028:	60f8      	str	r0, [r7, #12]
 800a02a:	607b      	str	r3, [r7, #4]
 800a02c:	460b      	mov	r3, r1
 800a02e:	817b      	strh	r3, [r7, #10]
 800a030:	4613      	mov	r3, r2
 800a032:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800a034:	897b      	ldrh	r3, [r7, #10]
 800a036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d00b      	beq.n	800a058 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a040:	897b      	ldrh	r3, [r7, #10]
 800a042:	f003 0207 	and.w	r2, r3, #7
 800a046:	4613      	mov	r3, r2
 800a048:	009b      	lsls	r3, r3, #2
 800a04a:	4413      	add	r3, r2
 800a04c:	00db      	lsls	r3, r3, #3
 800a04e:	3310      	adds	r3, #16
 800a050:	68fa      	ldr	r2, [r7, #12]
 800a052:	4413      	add	r3, r2
 800a054:	617b      	str	r3, [r7, #20]
 800a056:	e009      	b.n	800a06c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a058:	897a      	ldrh	r2, [r7, #10]
 800a05a:	4613      	mov	r3, r2
 800a05c:	009b      	lsls	r3, r3, #2
 800a05e:	4413      	add	r3, r2
 800a060:	00db      	lsls	r3, r3, #3
 800a062:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a066:	68fa      	ldr	r2, [r7, #12]
 800a068:	4413      	add	r3, r2
 800a06a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800a06c:	893b      	ldrh	r3, [r7, #8]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d107      	bne.n	800a082 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	2200      	movs	r2, #0
 800a076:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	b29a      	uxth	r2, r3
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	80da      	strh	r2, [r3, #6]
 800a080:	e00b      	b.n	800a09a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	2201      	movs	r2, #1
 800a086:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	b29a      	uxth	r2, r3
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	0c1b      	lsrs	r3, r3, #16
 800a094:	b29a      	uxth	r2, r3
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a09a:	2300      	movs	r3, #0
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	371c      	adds	r7, #28
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr

0800a0a8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b085      	sub	sp, #20
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	f043 0301 	orr.w	r3, r3, #1
 800a0d2:	b29a      	uxth	r2, r3
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	f043 0302 	orr.w	r3, r3, #2
 800a0e6:	b29a      	uxth	r2, r3
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800a0ee:	2300      	movs	r3, #0
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3714      	adds	r7, #20
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a100:	4b05      	ldr	r3, [pc, #20]	@ (800a118 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4a04      	ldr	r2, [pc, #16]	@ (800a118 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a106:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a10a:	6013      	str	r3, [r2, #0]
}
 800a10c:	bf00      	nop
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr
 800a116:	bf00      	nop
 800a118:	58000400 	.word	0x58000400

0800a11c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a11c:	b480      	push	{r7}
 800a11e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800a120:	4b04      	ldr	r3, [pc, #16]	@ (800a134 <HAL_PWREx_GetVoltageRange+0x18>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800a128:	4618      	mov	r0, r3
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	4770      	bx	lr
 800a132:	bf00      	nop
 800a134:	58000400 	.word	0x58000400

0800a138 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800a138:	b480      	push	{r7}
 800a13a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800a13c:	4b05      	ldr	r3, [pc, #20]	@ (800a154 <HAL_PWREx_EnableVddUSB+0x1c>)
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	4a04      	ldr	r2, [pc, #16]	@ (800a154 <HAL_PWREx_EnableVddUSB+0x1c>)
 800a142:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a146:	6053      	str	r3, [r2, #4]
}
 800a148:	bf00      	nop
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr
 800a152:	bf00      	nop
 800a154:	58000400 	.word	0x58000400

0800a158 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 800a158:	b480      	push	{r7}
 800a15a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800a15c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a166:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a16a:	d101      	bne.n	800a170 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800a16c:	2301      	movs	r3, #1
 800a16e:	e000      	b.n	800a172 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800a170:	2300      	movs	r3, #0
}
 800a172:	4618      	mov	r0, r3
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr

0800a17c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800a17c:	b480      	push	{r7}
 800a17e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800a180:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a18a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a18e:	6013      	str	r3, [r2, #0]
}
 800a190:	bf00      	nop
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr

0800a19a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800a19a:	b480      	push	{r7}
 800a19c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800a19e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a1a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a1ac:	6013      	str	r3, [r2, #0]
}
 800a1ae:	bf00      	nop
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr

0800a1b8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800a1bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1ca:	d101      	bne.n	800a1d0 <LL_RCC_HSE_IsReady+0x18>
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	e000      	b.n	800a1d2 <LL_RCC_HSE_IsReady+0x1a>
 800a1d0:	2300      	movs	r3, #0
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr

0800a1dc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800a1e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a1ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a1ee:	6013      	str	r3, [r2, #0]
}
 800a1f0:	bf00      	nop
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f8:	4770      	bx	lr

0800a1fa <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800a1fa:	b480      	push	{r7}
 800a1fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800a1fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a208:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a20c:	6013      	str	r3, [r2, #0]
}
 800a20e:	bf00      	nop
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr

0800a218 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800a218:	b480      	push	{r7}
 800a21a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800a21c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a226:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a22a:	d101      	bne.n	800a230 <LL_RCC_HSI_IsReady+0x18>
 800a22c:	2301      	movs	r3, #1
 800a22e:	e000      	b.n	800a232 <LL_RCC_HSI_IsReady+0x1a>
 800a230:	2300      	movs	r3, #0
}
 800a232:	4618      	mov	r0, r3
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr

0800a23c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b083      	sub	sp, #12
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800a244:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a248:	685b      	ldr	r3, [r3, #4]
 800a24a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	061b      	lsls	r3, r3, #24
 800a252:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a256:	4313      	orrs	r3, r2
 800a258:	604b      	str	r3, [r1, #4]
}
 800a25a:	bf00      	nop
 800a25c:	370c      	adds	r7, #12
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr

0800a266 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800a266:	b480      	push	{r7}
 800a268:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800a26a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a26e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a272:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a276:	f043 0301 	orr.w	r3, r3, #1
 800a27a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800a27e:	bf00      	nop
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr

0800a288 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 800a288:	b480      	push	{r7}
 800a28a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800a28c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a290:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a294:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a298:	f023 0301 	bic.w	r3, r3, #1
 800a29c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800a2a0:	bf00      	nop
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a8:	4770      	bx	lr

0800a2aa <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800a2aa:	b480      	push	{r7}
 800a2ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800a2ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a2b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a2b6:	f003 0302 	and.w	r3, r3, #2
 800a2ba:	2b02      	cmp	r3, #2
 800a2bc:	d101      	bne.n	800a2c2 <LL_RCC_HSI48_IsReady+0x18>
 800a2be:	2301      	movs	r3, #1
 800a2c0:	e000      	b.n	800a2c4 <LL_RCC_HSI48_IsReady+0x1a>
 800a2c2:	2300      	movs	r3, #0
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2cc:	4770      	bx	lr

0800a2ce <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 800a2ce:	b480      	push	{r7}
 800a2d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a2d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a2d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a2de:	f043 0301 	orr.w	r3, r3, #1
 800a2e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a2e6:	bf00      	nop
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr

0800a2f0 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a2f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a2f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a300:	f023 0301 	bic.w	r3, r3, #1
 800a304:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a308:	bf00      	nop
 800a30a:	46bd      	mov	sp, r7
 800a30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a310:	4770      	bx	lr

0800a312 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 800a312:	b480      	push	{r7}
 800a314:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a316:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a31a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a31e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a322:	f043 0304 	orr.w	r3, r3, #4
 800a326:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a32a:	bf00      	nop
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr

0800a334 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 800a334:	b480      	push	{r7}
 800a336:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a338:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a33c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a340:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a344:	f023 0304 	bic.w	r3, r3, #4
 800a348:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a34c:	bf00      	nop
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr

0800a356 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800a356:	b480      	push	{r7}
 800a358:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800a35a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a35e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a362:	f003 0302 	and.w	r3, r3, #2
 800a366:	2b02      	cmp	r3, #2
 800a368:	d101      	bne.n	800a36e <LL_RCC_LSE_IsReady+0x18>
 800a36a:	2301      	movs	r3, #1
 800a36c:	e000      	b.n	800a370 <LL_RCC_LSE_IsReady+0x1a>
 800a36e:	2300      	movs	r3, #0
}
 800a370:	4618      	mov	r0, r3
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr

0800a37a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800a37a:	b480      	push	{r7}
 800a37c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800a37e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a382:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a386:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a38a:	f043 0301 	orr.w	r3, r3, #1
 800a38e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800a392:	bf00      	nop
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr

0800a39c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800a39c:	b480      	push	{r7}
 800a39e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800a3a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a3a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a3a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a3ac:	f023 0301 	bic.w	r3, r3, #1
 800a3b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800a3b4:	bf00      	nop
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3bc:	4770      	bx	lr

0800a3be <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800a3be:	b480      	push	{r7}
 800a3c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800a3c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a3c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a3ca:	f003 0302 	and.w	r3, r3, #2
 800a3ce:	2b02      	cmp	r3, #2
 800a3d0:	d101      	bne.n	800a3d6 <LL_RCC_LSI1_IsReady+0x18>
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	e000      	b.n	800a3d8 <LL_RCC_LSI1_IsReady+0x1a>
 800a3d6:	2300      	movs	r3, #0
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr

0800a3e2 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800a3e2:	b480      	push	{r7}
 800a3e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800a3e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a3ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a3ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a3f2:	f043 0304 	orr.w	r3, r3, #4
 800a3f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800a3fa:	bf00      	nop
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr

0800a404 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 800a404:	b480      	push	{r7}
 800a406:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800a408:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a40c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a410:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a414:	f023 0304 	bic.w	r3, r3, #4
 800a418:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800a41c:	bf00      	nop
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr

0800a426 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800a426:	b480      	push	{r7}
 800a428:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800a42a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a42e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a432:	f003 0308 	and.w	r3, r3, #8
 800a436:	2b08      	cmp	r3, #8
 800a438:	d101      	bne.n	800a43e <LL_RCC_LSI2_IsReady+0x18>
 800a43a:	2301      	movs	r3, #1
 800a43c:	e000      	b.n	800a440 <LL_RCC_LSI2_IsReady+0x1a>
 800a43e:	2300      	movs	r3, #0
}
 800a440:	4618      	mov	r0, r3
 800a442:	46bd      	mov	sp, r7
 800a444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a448:	4770      	bx	lr

0800a44a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800a44a:	b480      	push	{r7}
 800a44c:	b083      	sub	sp, #12
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800a452:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a456:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a45a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	021b      	lsls	r3, r3, #8
 800a462:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a466:	4313      	orrs	r3, r2
 800a468:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800a46c:	bf00      	nop
 800a46e:	370c      	adds	r7, #12
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800a478:	b480      	push	{r7}
 800a47a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800a47c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a486:	f043 0301 	orr.w	r3, r3, #1
 800a48a:	6013      	str	r3, [r2, #0]
}
 800a48c:	bf00      	nop
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr

0800a496 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800a496:	b480      	push	{r7}
 800a498:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800a49a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a4a4:	f023 0301 	bic.w	r3, r3, #1
 800a4a8:	6013      	str	r3, [r2, #0]
}
 800a4aa:	bf00      	nop
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800a4b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f003 0302 	and.w	r3, r3, #2
 800a4c2:	2b02      	cmp	r3, #2
 800a4c4:	d101      	bne.n	800a4ca <LL_RCC_MSI_IsReady+0x16>
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e000      	b.n	800a4cc <LL_RCC_MSI_IsReady+0x18>
 800a4ca:	2300      	movs	r3, #0
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr

0800a4d6 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800a4d6:	b480      	push	{r7}
 800a4d8:	b083      	sub	sp, #12
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800a4de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a4e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	600b      	str	r3, [r1, #0]
}
 800a4f2:	bf00      	nop
 800a4f4:	370c      	adds	r7, #12
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr

0800a4fe <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800a4fe:	b480      	push	{r7}
 800a500:	b083      	sub	sp, #12
 800a502:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800a504:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a50e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2bb0      	cmp	r3, #176	@ 0xb0
 800a514:	d901      	bls.n	800a51a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800a516:	23b0      	movs	r3, #176	@ 0xb0
 800a518:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800a51a:	687b      	ldr	r3, [r7, #4]
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	370c      	adds	r7, #12
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr

0800a528 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800a528:	b480      	push	{r7}
 800a52a:	b083      	sub	sp, #12
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800a530:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	021b      	lsls	r3, r3, #8
 800a53e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a542:	4313      	orrs	r3, r2
 800a544:	604b      	str	r3, [r1, #4]
}
 800a546:	bf00      	nop
 800a548:	370c      	adds	r7, #12
 800a54a:	46bd      	mov	sp, r7
 800a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a550:	4770      	bx	lr

0800a552 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800a552:	b480      	push	{r7}
 800a554:	b083      	sub	sp, #12
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800a55a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a55e:	689b      	ldr	r3, [r3, #8]
 800a560:	f023 0203 	bic.w	r2, r3, #3
 800a564:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	4313      	orrs	r3, r2
 800a56c:	608b      	str	r3, [r1, #8]
}
 800a56e:	bf00      	nop
 800a570:	370c      	adds	r7, #12
 800a572:	46bd      	mov	sp, r7
 800a574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a578:	4770      	bx	lr

0800a57a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800a57a:	b480      	push	{r7}
 800a57c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800a57e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a582:	689b      	ldr	r3, [r3, #8]
 800a584:	f003 030c 	and.w	r3, r3, #12
}
 800a588:	4618      	mov	r0, r3
 800a58a:	46bd      	mov	sp, r7
 800a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a590:	4770      	bx	lr

0800a592 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800a592:	b480      	push	{r7}
 800a594:	b083      	sub	sp, #12
 800a596:	af00      	add	r7, sp, #0
 800a598:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800a59a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a5a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	608b      	str	r3, [r1, #8]
}
 800a5ae:	bf00      	nop
 800a5b0:	370c      	adds	r7, #12
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b8:	4770      	bx	lr

0800a5ba <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800a5ba:	b480      	push	{r7}
 800a5bc:	b083      	sub	sp, #12
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800a5c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a5c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a5ca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a5ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800a5da:	bf00      	nop
 800a5dc:	370c      	adds	r7, #12
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e4:	4770      	bx	lr

0800a5e6 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800a5e6:	b480      	push	{r7}
 800a5e8:	b083      	sub	sp, #12
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800a5ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a5f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a5f6:	f023 020f 	bic.w	r2, r3, #15
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	091b      	lsrs	r3, r3, #4
 800a5fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a602:	4313      	orrs	r3, r2
 800a604:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800a608:	bf00      	nop
 800a60a:	370c      	adds	r7, #12
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr

0800a614 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800a614:	b480      	push	{r7}
 800a616:	b083      	sub	sp, #12
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800a61c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a620:	689b      	ldr	r3, [r3, #8]
 800a622:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a626:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	4313      	orrs	r3, r2
 800a62e:	608b      	str	r3, [r1, #8]
}
 800a630:	bf00      	nop
 800a632:	370c      	adds	r7, #12
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr

0800a63c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b083      	sub	sp, #12
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800a644:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a648:	689b      	ldr	r3, [r3, #8]
 800a64a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800a64e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	4313      	orrs	r3, r2
 800a656:	608b      	str	r3, [r1, #8]
}
 800a658:	bf00      	nop
 800a65a:	370c      	adds	r7, #12
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr

0800a664 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800a664:	b480      	push	{r7}
 800a666:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800a668:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a66c:	689b      	ldr	r3, [r3, #8]
 800a66e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800a672:	4618      	mov	r0, r3
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr

0800a67c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 800a67c:	b480      	push	{r7}
 800a67e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800a680:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a684:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a688:	011b      	lsls	r3, r3, #4
 800a68a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800a68e:	4618      	mov	r0, r3
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr

0800a698 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800a698:	b480      	push	{r7}
 800a69a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800a69c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a6a0:	689b      	ldr	r3, [r3, #8]
 800a6a2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr

0800a6b0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800a6b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a6b8:	689b      	ldr	r3, [r3, #8]
 800a6ba:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800a6cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a6d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a6da:	6013      	str	r3, [r2, #0]
}
 800a6dc:	bf00      	nop
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr

0800a6e6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800a6e6:	b480      	push	{r7}
 800a6e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800a6ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a6f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a6f8:	6013      	str	r3, [r2, #0]
}
 800a6fa:	bf00      	nop
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr

0800a704 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800a704:	b480      	push	{r7}
 800a706:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800a708:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a712:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a716:	d101      	bne.n	800a71c <LL_RCC_PLL_IsReady+0x18>
 800a718:	2301      	movs	r3, #1
 800a71a:	e000      	b.n	800a71e <LL_RCC_PLL_IsReady+0x1a>
 800a71c:	2300      	movs	r3, #0
}
 800a71e:	4618      	mov	r0, r3
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr

0800a728 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800a728:	b480      	push	{r7}
 800a72a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800a72c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a730:	68db      	ldr	r3, [r3, #12]
 800a732:	0a1b      	lsrs	r3, r3, #8
 800a734:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800a738:	4618      	mov	r0, r3
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr

0800a742 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800a742:	b480      	push	{r7}
 800a744:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800a746:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a74a:	68db      	ldr	r3, [r3, #12]
 800a74c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800a750:	4618      	mov	r0, r3
 800a752:	46bd      	mov	sp, r7
 800a754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a758:	4770      	bx	lr

0800a75a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800a75a:	b480      	push	{r7}
 800a75c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800a75e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a762:	68db      	ldr	r3, [r3, #12]
 800a764:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800a768:	4618      	mov	r0, r3
 800a76a:	46bd      	mov	sp, r7
 800a76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a770:	4770      	bx	lr

0800a772 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800a772:	b480      	push	{r7}
 800a774:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800a776:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a77a:	68db      	ldr	r3, [r3, #12]
 800a77c:	f003 0303 	and.w	r3, r3, #3
}
 800a780:	4618      	mov	r0, r3
 800a782:	46bd      	mov	sp, r7
 800a784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a788:	4770      	bx	lr

0800a78a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800a78a:	b480      	push	{r7}
 800a78c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800a78e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a792:	689b      	ldr	r3, [r3, #8]
 800a794:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a79c:	d101      	bne.n	800a7a2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800a79e:	2301      	movs	r3, #1
 800a7a0:	e000      	b.n	800a7a4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800a7a2:	2300      	movs	r3, #0
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ac:	4770      	bx	lr

0800a7ae <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800a7ae:	b480      	push	{r7}
 800a7b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800a7b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a7b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a7ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7c2:	d101      	bne.n	800a7c8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	e000      	b.n	800a7ca <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800a7c8:	2300      	movs	r3, #0
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800a7d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a7dc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a7e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a7e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7e8:	d101      	bne.n	800a7ee <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	e000      	b.n	800a7f0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800a7ee:	2300      	movs	r3, #0
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f8:	4770      	bx	lr

0800a7fa <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800a7fa:	b480      	push	{r7}
 800a7fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800a7fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a802:	689b      	ldr	r3, [r3, #8]
 800a804:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a808:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a80c:	d101      	bne.n	800a812 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800a80e:	2301      	movs	r3, #1
 800a810:	e000      	b.n	800a814 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800a812:	2300      	movs	r3, #0
}
 800a814:	4618      	mov	r0, r3
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr

0800a81e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800a81e:	b480      	push	{r7}
 800a820:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800a822:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a826:	689b      	ldr	r3, [r3, #8]
 800a828:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a82c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a830:	d101      	bne.n	800a836 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800a832:	2301      	movs	r3, #1
 800a834:	e000      	b.n	800a838 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800a836:	2300      	movs	r3, #0
}
 800a838:	4618      	mov	r0, r3
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr
	...

0800a844 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a844:	b590      	push	{r4, r7, lr}
 800a846:	b08d      	sub	sp, #52	@ 0x34
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d101      	bne.n	800a856 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a852:	2301      	movs	r3, #1
 800a854:	e363      	b.n	800af1e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f003 0320 	and.w	r3, r3, #32
 800a85e:	2b00      	cmp	r3, #0
 800a860:	f000 808d 	beq.w	800a97e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a864:	f7ff fe89 	bl	800a57a <LL_RCC_GetSysClkSource>
 800a868:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a86a:	f7ff ff82 	bl	800a772 <LL_RCC_PLL_GetMainSource>
 800a86e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800a870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a872:	2b00      	cmp	r3, #0
 800a874:	d005      	beq.n	800a882 <HAL_RCC_OscConfig+0x3e>
 800a876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a878:	2b0c      	cmp	r3, #12
 800a87a:	d147      	bne.n	800a90c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800a87c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a87e:	2b01      	cmp	r3, #1
 800a880:	d144      	bne.n	800a90c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	69db      	ldr	r3, [r3, #28]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d101      	bne.n	800a88e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800a88a:	2301      	movs	r3, #1
 800a88c:	e347      	b.n	800af1e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800a892:	f7ff fe34 	bl	800a4fe <LL_RCC_MSI_GetRange>
 800a896:	4603      	mov	r3, r0
 800a898:	429c      	cmp	r4, r3
 800a89a:	d914      	bls.n	800a8c6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f000 fd2f 	bl	800b304 <RCC_SetFlashLatencyFromMSIRange>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d001      	beq.n	800a8b0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	e336      	b.n	800af1e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7ff fe0e 	bl	800a4d6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6a1b      	ldr	r3, [r3, #32]
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f7ff fe32 	bl	800a528 <LL_RCC_MSI_SetCalibTrimming>
 800a8c4:	e013      	b.n	800a8ee <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f7ff fe03 	bl	800a4d6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6a1b      	ldr	r3, [r3, #32]
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f7ff fe27 	bl	800a528 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f000 fd10 	bl	800b304 <RCC_SetFlashLatencyFromMSIRange>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d001      	beq.n	800a8ee <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	e317      	b.n	800af1e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800a8ee:	f000 fcc9 	bl	800b284 <HAL_RCC_GetHCLKFreq>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	4aa4      	ldr	r2, [pc, #656]	@ (800ab88 <HAL_RCC_OscConfig+0x344>)
 800a8f6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a8f8:	4ba4      	ldr	r3, [pc, #656]	@ (800ab8c <HAL_RCC_OscConfig+0x348>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f7fa fa2f 	bl	8004d60 <HAL_InitTick>
 800a902:	4603      	mov	r3, r0
 800a904:	2b00      	cmp	r3, #0
 800a906:	d039      	beq.n	800a97c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800a908:	2301      	movs	r3, #1
 800a90a:	e308      	b.n	800af1e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	69db      	ldr	r3, [r3, #28]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d01e      	beq.n	800a952 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a914:	f7ff fdb0 	bl	800a478 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a918:	f7fa fa70 	bl	8004dfc <HAL_GetTick>
 800a91c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800a91e:	e008      	b.n	800a932 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a920:	f7fa fa6c 	bl	8004dfc <HAL_GetTick>
 800a924:	4602      	mov	r2, r0
 800a926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a928:	1ad3      	subs	r3, r2, r3
 800a92a:	2b02      	cmp	r3, #2
 800a92c:	d901      	bls.n	800a932 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800a92e:	2303      	movs	r3, #3
 800a930:	e2f5      	b.n	800af1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800a932:	f7ff fdbf 	bl	800a4b4 <LL_RCC_MSI_IsReady>
 800a936:	4603      	mov	r3, r0
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d0f1      	beq.n	800a920 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a940:	4618      	mov	r0, r3
 800a942:	f7ff fdc8 	bl	800a4d6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6a1b      	ldr	r3, [r3, #32]
 800a94a:	4618      	mov	r0, r3
 800a94c:	f7ff fdec 	bl	800a528 <LL_RCC_MSI_SetCalibTrimming>
 800a950:	e015      	b.n	800a97e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a952:	f7ff fda0 	bl	800a496 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a956:	f7fa fa51 	bl	8004dfc <HAL_GetTick>
 800a95a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800a95c:	e008      	b.n	800a970 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a95e:	f7fa fa4d 	bl	8004dfc <HAL_GetTick>
 800a962:	4602      	mov	r2, r0
 800a964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a966:	1ad3      	subs	r3, r2, r3
 800a968:	2b02      	cmp	r3, #2
 800a96a:	d901      	bls.n	800a970 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800a96c:	2303      	movs	r3, #3
 800a96e:	e2d6      	b.n	800af1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800a970:	f7ff fda0 	bl	800a4b4 <LL_RCC_MSI_IsReady>
 800a974:	4603      	mov	r3, r0
 800a976:	2b00      	cmp	r3, #0
 800a978:	d1f1      	bne.n	800a95e <HAL_RCC_OscConfig+0x11a>
 800a97a:	e000      	b.n	800a97e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800a97c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f003 0301 	and.w	r3, r3, #1
 800a986:	2b00      	cmp	r3, #0
 800a988:	d047      	beq.n	800aa1a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a98a:	f7ff fdf6 	bl	800a57a <LL_RCC_GetSysClkSource>
 800a98e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a990:	f7ff feef 	bl	800a772 <LL_RCC_PLL_GetMainSource>
 800a994:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800a996:	6a3b      	ldr	r3, [r7, #32]
 800a998:	2b08      	cmp	r3, #8
 800a99a:	d005      	beq.n	800a9a8 <HAL_RCC_OscConfig+0x164>
 800a99c:	6a3b      	ldr	r3, [r7, #32]
 800a99e:	2b0c      	cmp	r3, #12
 800a9a0:	d108      	bne.n	800a9b4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800a9a2:	69fb      	ldr	r3, [r7, #28]
 800a9a4:	2b03      	cmp	r3, #3
 800a9a6:	d105      	bne.n	800a9b4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d134      	bne.n	800aa1a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	e2b4      	b.n	800af1e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a9bc:	d102      	bne.n	800a9c4 <HAL_RCC_OscConfig+0x180>
 800a9be:	f7ff fbdd 	bl	800a17c <LL_RCC_HSE_Enable>
 800a9c2:	e001      	b.n	800a9c8 <HAL_RCC_OscConfig+0x184>
 800a9c4:	f7ff fbe9 	bl	800a19a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d012      	beq.n	800a9f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9d0:	f7fa fa14 	bl	8004dfc <HAL_GetTick>
 800a9d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800a9d6:	e008      	b.n	800a9ea <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a9d8:	f7fa fa10 	bl	8004dfc <HAL_GetTick>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e0:	1ad3      	subs	r3, r2, r3
 800a9e2:	2b64      	cmp	r3, #100	@ 0x64
 800a9e4:	d901      	bls.n	800a9ea <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800a9e6:	2303      	movs	r3, #3
 800a9e8:	e299      	b.n	800af1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800a9ea:	f7ff fbe5 	bl	800a1b8 <LL_RCC_HSE_IsReady>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d0f1      	beq.n	800a9d8 <HAL_RCC_OscConfig+0x194>
 800a9f4:	e011      	b.n	800aa1a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9f6:	f7fa fa01 	bl	8004dfc <HAL_GetTick>
 800a9fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800a9fc:	e008      	b.n	800aa10 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a9fe:	f7fa f9fd 	bl	8004dfc <HAL_GetTick>
 800aa02:	4602      	mov	r2, r0
 800aa04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa06:	1ad3      	subs	r3, r2, r3
 800aa08:	2b64      	cmp	r3, #100	@ 0x64
 800aa0a:	d901      	bls.n	800aa10 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800aa0c:	2303      	movs	r3, #3
 800aa0e:	e286      	b.n	800af1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800aa10:	f7ff fbd2 	bl	800a1b8 <LL_RCC_HSE_IsReady>
 800aa14:	4603      	mov	r3, r0
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d1f1      	bne.n	800a9fe <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f003 0302 	and.w	r3, r3, #2
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d04c      	beq.n	800aac0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa26:	f7ff fda8 	bl	800a57a <LL_RCC_GetSysClkSource>
 800aa2a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800aa2c:	f7ff fea1 	bl	800a772 <LL_RCC_PLL_GetMainSource>
 800aa30:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800aa32:	69bb      	ldr	r3, [r7, #24]
 800aa34:	2b04      	cmp	r3, #4
 800aa36:	d005      	beq.n	800aa44 <HAL_RCC_OscConfig+0x200>
 800aa38:	69bb      	ldr	r3, [r7, #24]
 800aa3a:	2b0c      	cmp	r3, #12
 800aa3c:	d10e      	bne.n	800aa5c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	2b02      	cmp	r3, #2
 800aa42:	d10b      	bne.n	800aa5c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d101      	bne.n	800aa50 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	e266      	b.n	800af1e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	691b      	ldr	r3, [r3, #16]
 800aa54:	4618      	mov	r0, r3
 800aa56:	f7ff fbf1 	bl	800a23c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800aa5a:	e031      	b.n	800aac0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	68db      	ldr	r3, [r3, #12]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d019      	beq.n	800aa98 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aa64:	f7ff fbba 	bl	800a1dc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa68:	f7fa f9c8 	bl	8004dfc <HAL_GetTick>
 800aa6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800aa6e:	e008      	b.n	800aa82 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa70:	f7fa f9c4 	bl	8004dfc <HAL_GetTick>
 800aa74:	4602      	mov	r2, r0
 800aa76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa78:	1ad3      	subs	r3, r2, r3
 800aa7a:	2b02      	cmp	r3, #2
 800aa7c:	d901      	bls.n	800aa82 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800aa7e:	2303      	movs	r3, #3
 800aa80:	e24d      	b.n	800af1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800aa82:	f7ff fbc9 	bl	800a218 <LL_RCC_HSI_IsReady>
 800aa86:	4603      	mov	r3, r0
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d0f1      	beq.n	800aa70 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	691b      	ldr	r3, [r3, #16]
 800aa90:	4618      	mov	r0, r3
 800aa92:	f7ff fbd3 	bl	800a23c <LL_RCC_HSI_SetCalibTrimming>
 800aa96:	e013      	b.n	800aac0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aa98:	f7ff fbaf 	bl	800a1fa <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa9c:	f7fa f9ae 	bl	8004dfc <HAL_GetTick>
 800aaa0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800aaa2:	e008      	b.n	800aab6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aaa4:	f7fa f9aa 	bl	8004dfc <HAL_GetTick>
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaac:	1ad3      	subs	r3, r2, r3
 800aaae:	2b02      	cmp	r3, #2
 800aab0:	d901      	bls.n	800aab6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800aab2:	2303      	movs	r3, #3
 800aab4:	e233      	b.n	800af1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800aab6:	f7ff fbaf 	bl	800a218 <LL_RCC_HSI_IsReady>
 800aaba:	4603      	mov	r3, r0
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d1f1      	bne.n	800aaa4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f003 0308 	and.w	r3, r3, #8
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d106      	bne.n	800aada <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	f000 80a3 	beq.w	800ac20 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	695b      	ldr	r3, [r3, #20]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d076      	beq.n	800abd0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f003 0310 	and.w	r3, r3, #16
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d046      	beq.n	800ab7c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800aaee:	f7ff fc66 	bl	800a3be <LL_RCC_LSI1_IsReady>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d113      	bne.n	800ab20 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800aaf8:	f7ff fc3f 	bl	800a37a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800aafc:	f7fa f97e 	bl	8004dfc <HAL_GetTick>
 800ab00:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800ab02:	e008      	b.n	800ab16 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ab04:	f7fa f97a 	bl	8004dfc <HAL_GetTick>
 800ab08:	4602      	mov	r2, r0
 800ab0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab0c:	1ad3      	subs	r3, r2, r3
 800ab0e:	2b02      	cmp	r3, #2
 800ab10:	d901      	bls.n	800ab16 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800ab12:	2303      	movs	r3, #3
 800ab14:	e203      	b.n	800af1e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800ab16:	f7ff fc52 	bl	800a3be <LL_RCC_LSI1_IsReady>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d0f1      	beq.n	800ab04 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800ab20:	f7ff fc5f 	bl	800a3e2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab24:	f7fa f96a 	bl	8004dfc <HAL_GetTick>
 800ab28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800ab2a:	e008      	b.n	800ab3e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800ab2c:	f7fa f966 	bl	8004dfc <HAL_GetTick>
 800ab30:	4602      	mov	r2, r0
 800ab32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab34:	1ad3      	subs	r3, r2, r3
 800ab36:	2b03      	cmp	r3, #3
 800ab38:	d901      	bls.n	800ab3e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800ab3a:	2303      	movs	r3, #3
 800ab3c:	e1ef      	b.n	800af1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800ab3e:	f7ff fc72 	bl	800a426 <LL_RCC_LSI2_IsReady>
 800ab42:	4603      	mov	r3, r0
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d0f1      	beq.n	800ab2c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	699b      	ldr	r3, [r3, #24]
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f7ff fc7c 	bl	800a44a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800ab52:	f7ff fc23 	bl	800a39c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab56:	f7fa f951 	bl	8004dfc <HAL_GetTick>
 800ab5a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800ab5c:	e008      	b.n	800ab70 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ab5e:	f7fa f94d 	bl	8004dfc <HAL_GetTick>
 800ab62:	4602      	mov	r2, r0
 800ab64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab66:	1ad3      	subs	r3, r2, r3
 800ab68:	2b02      	cmp	r3, #2
 800ab6a:	d901      	bls.n	800ab70 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800ab6c:	2303      	movs	r3, #3
 800ab6e:	e1d6      	b.n	800af1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800ab70:	f7ff fc25 	bl	800a3be <LL_RCC_LSI1_IsReady>
 800ab74:	4603      	mov	r3, r0
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d1f1      	bne.n	800ab5e <HAL_RCC_OscConfig+0x31a>
 800ab7a:	e051      	b.n	800ac20 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800ab7c:	f7ff fbfd 	bl	800a37a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab80:	f7fa f93c 	bl	8004dfc <HAL_GetTick>
 800ab84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800ab86:	e00c      	b.n	800aba2 <HAL_RCC_OscConfig+0x35e>
 800ab88:	2000000c 	.word	0x2000000c
 800ab8c:	2000002c 	.word	0x2000002c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ab90:	f7fa f934 	bl	8004dfc <HAL_GetTick>
 800ab94:	4602      	mov	r2, r0
 800ab96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab98:	1ad3      	subs	r3, r2, r3
 800ab9a:	2b02      	cmp	r3, #2
 800ab9c:	d901      	bls.n	800aba2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800ab9e:	2303      	movs	r3, #3
 800aba0:	e1bd      	b.n	800af1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800aba2:	f7ff fc0c 	bl	800a3be <LL_RCC_LSI1_IsReady>
 800aba6:	4603      	mov	r3, r0
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d0f1      	beq.n	800ab90 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800abac:	f7ff fc2a 	bl	800a404 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800abb0:	e008      	b.n	800abc4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800abb2:	f7fa f923 	bl	8004dfc <HAL_GetTick>
 800abb6:	4602      	mov	r2, r0
 800abb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abba:	1ad3      	subs	r3, r2, r3
 800abbc:	2b03      	cmp	r3, #3
 800abbe:	d901      	bls.n	800abc4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800abc0:	2303      	movs	r3, #3
 800abc2:	e1ac      	b.n	800af1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800abc4:	f7ff fc2f 	bl	800a426 <LL_RCC_LSI2_IsReady>
 800abc8:	4603      	mov	r3, r0
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d1f1      	bne.n	800abb2 <HAL_RCC_OscConfig+0x36e>
 800abce:	e027      	b.n	800ac20 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800abd0:	f7ff fc18 	bl	800a404 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abd4:	f7fa f912 	bl	8004dfc <HAL_GetTick>
 800abd8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800abda:	e008      	b.n	800abee <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800abdc:	f7fa f90e 	bl	8004dfc <HAL_GetTick>
 800abe0:	4602      	mov	r2, r0
 800abe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe4:	1ad3      	subs	r3, r2, r3
 800abe6:	2b03      	cmp	r3, #3
 800abe8:	d901      	bls.n	800abee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800abea:	2303      	movs	r3, #3
 800abec:	e197      	b.n	800af1e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800abee:	f7ff fc1a 	bl	800a426 <LL_RCC_LSI2_IsReady>
 800abf2:	4603      	mov	r3, r0
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d1f1      	bne.n	800abdc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800abf8:	f7ff fbd0 	bl	800a39c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abfc:	f7fa f8fe 	bl	8004dfc <HAL_GetTick>
 800ac00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800ac02:	e008      	b.n	800ac16 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ac04:	f7fa f8fa 	bl	8004dfc <HAL_GetTick>
 800ac08:	4602      	mov	r2, r0
 800ac0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac0c:	1ad3      	subs	r3, r2, r3
 800ac0e:	2b02      	cmp	r3, #2
 800ac10:	d901      	bls.n	800ac16 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800ac12:	2303      	movs	r3, #3
 800ac14:	e183      	b.n	800af1e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800ac16:	f7ff fbd2 	bl	800a3be <LL_RCC_LSI1_IsReady>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d1f1      	bne.n	800ac04 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f003 0304 	and.w	r3, r3, #4
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d05b      	beq.n	800ace4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ac2c:	4ba7      	ldr	r3, [pc, #668]	@ (800aecc <HAL_RCC_OscConfig+0x688>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d114      	bne.n	800ac62 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800ac38:	f7ff fa60 	bl	800a0fc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ac3c:	f7fa f8de 	bl	8004dfc <HAL_GetTick>
 800ac40:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ac42:	e008      	b.n	800ac56 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ac44:	f7fa f8da 	bl	8004dfc <HAL_GetTick>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac4c:	1ad3      	subs	r3, r2, r3
 800ac4e:	2b02      	cmp	r3, #2
 800ac50:	d901      	bls.n	800ac56 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800ac52:	2303      	movs	r3, #3
 800ac54:	e163      	b.n	800af1e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ac56:	4b9d      	ldr	r3, [pc, #628]	@ (800aecc <HAL_RCC_OscConfig+0x688>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d0f0      	beq.n	800ac44 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	689b      	ldr	r3, [r3, #8]
 800ac66:	2b01      	cmp	r3, #1
 800ac68:	d102      	bne.n	800ac70 <HAL_RCC_OscConfig+0x42c>
 800ac6a:	f7ff fb30 	bl	800a2ce <LL_RCC_LSE_Enable>
 800ac6e:	e00c      	b.n	800ac8a <HAL_RCC_OscConfig+0x446>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	689b      	ldr	r3, [r3, #8]
 800ac74:	2b05      	cmp	r3, #5
 800ac76:	d104      	bne.n	800ac82 <HAL_RCC_OscConfig+0x43e>
 800ac78:	f7ff fb4b 	bl	800a312 <LL_RCC_LSE_EnableBypass>
 800ac7c:	f7ff fb27 	bl	800a2ce <LL_RCC_LSE_Enable>
 800ac80:	e003      	b.n	800ac8a <HAL_RCC_OscConfig+0x446>
 800ac82:	f7ff fb35 	bl	800a2f0 <LL_RCC_LSE_Disable>
 800ac86:	f7ff fb55 	bl	800a334 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	689b      	ldr	r3, [r3, #8]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d014      	beq.n	800acbc <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac92:	f7fa f8b3 	bl	8004dfc <HAL_GetTick>
 800ac96:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800ac98:	e00a      	b.n	800acb0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac9a:	f7fa f8af 	bl	8004dfc <HAL_GetTick>
 800ac9e:	4602      	mov	r2, r0
 800aca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aca2:	1ad3      	subs	r3, r2, r3
 800aca4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d901      	bls.n	800acb0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800acac:	2303      	movs	r3, #3
 800acae:	e136      	b.n	800af1e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800acb0:	f7ff fb51 	bl	800a356 <LL_RCC_LSE_IsReady>
 800acb4:	4603      	mov	r3, r0
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d0ef      	beq.n	800ac9a <HAL_RCC_OscConfig+0x456>
 800acba:	e013      	b.n	800ace4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800acbc:	f7fa f89e 	bl	8004dfc <HAL_GetTick>
 800acc0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800acc2:	e00a      	b.n	800acda <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800acc4:	f7fa f89a 	bl	8004dfc <HAL_GetTick>
 800acc8:	4602      	mov	r2, r0
 800acca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800accc:	1ad3      	subs	r3, r2, r3
 800acce:	f241 3288 	movw	r2, #5000	@ 0x1388
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d901      	bls.n	800acda <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800acd6:	2303      	movs	r3, #3
 800acd8:	e121      	b.n	800af1e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800acda:	f7ff fb3c 	bl	800a356 <LL_RCC_LSE_IsReady>
 800acde:	4603      	mov	r3, r0
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d1ef      	bne.n	800acc4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acec:	2b00      	cmp	r3, #0
 800acee:	d02c      	beq.n	800ad4a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d014      	beq.n	800ad22 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800acf8:	f7ff fab5 	bl	800a266 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800acfc:	f7fa f87e 	bl	8004dfc <HAL_GetTick>
 800ad00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800ad02:	e008      	b.n	800ad16 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ad04:	f7fa f87a 	bl	8004dfc <HAL_GetTick>
 800ad08:	4602      	mov	r2, r0
 800ad0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad0c:	1ad3      	subs	r3, r2, r3
 800ad0e:	2b02      	cmp	r3, #2
 800ad10:	d901      	bls.n	800ad16 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800ad12:	2303      	movs	r3, #3
 800ad14:	e103      	b.n	800af1e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800ad16:	f7ff fac8 	bl	800a2aa <LL_RCC_HSI48_IsReady>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d0f1      	beq.n	800ad04 <HAL_RCC_OscConfig+0x4c0>
 800ad20:	e013      	b.n	800ad4a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ad22:	f7ff fab1 	bl	800a288 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad26:	f7fa f869 	bl	8004dfc <HAL_GetTick>
 800ad2a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800ad2c:	e008      	b.n	800ad40 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ad2e:	f7fa f865 	bl	8004dfc <HAL_GetTick>
 800ad32:	4602      	mov	r2, r0
 800ad34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad36:	1ad3      	subs	r3, r2, r3
 800ad38:	2b02      	cmp	r3, #2
 800ad3a:	d901      	bls.n	800ad40 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800ad3c:	2303      	movs	r3, #3
 800ad3e:	e0ee      	b.n	800af1e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800ad40:	f7ff fab3 	bl	800a2aa <LL_RCC_HSI48_IsReady>
 800ad44:	4603      	mov	r3, r0
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d1f1      	bne.n	800ad2e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	f000 80e4 	beq.w	800af1c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ad54:	f7ff fc11 	bl	800a57a <LL_RCC_GetSysClkSource>
 800ad58:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800ad5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad5e:	68db      	ldr	r3, [r3, #12]
 800ad60:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad66:	2b02      	cmp	r3, #2
 800ad68:	f040 80b4 	bne.w	800aed4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f003 0203 	and.w	r2, r3, #3
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d123      	bne.n	800adc2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d11c      	bne.n	800adc2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	0a1b      	lsrs	r3, r3, #8
 800ad8c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d114      	bne.n	800adc2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d10d      	bne.n	800adc2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d106      	bne.n	800adc2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800adbe:	429a      	cmp	r2, r3
 800adc0:	d05d      	beq.n	800ae7e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	2b0c      	cmp	r3, #12
 800adc6:	d058      	beq.n	800ae7a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800adc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800add2:	2b00      	cmp	r3, #0
 800add4:	d001      	beq.n	800adda <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800add6:	2301      	movs	r3, #1
 800add8:	e0a1      	b.n	800af1e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800adda:	f7ff fc84 	bl	800a6e6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800adde:	f7fa f80d 	bl	8004dfc <HAL_GetTick>
 800ade2:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ade4:	e008      	b.n	800adf8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ade6:	f7fa f809 	bl	8004dfc <HAL_GetTick>
 800adea:	4602      	mov	r2, r0
 800adec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adee:	1ad3      	subs	r3, r2, r3
 800adf0:	2b02      	cmp	r3, #2
 800adf2:	d901      	bls.n	800adf8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800adf4:	2303      	movs	r3, #3
 800adf6:	e092      	b.n	800af1e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800adf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d1ef      	bne.n	800ade6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ae06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae0a:	68da      	ldr	r2, [r3, #12]
 800ae0c:	4b30      	ldr	r3, [pc, #192]	@ (800aed0 <HAL_RCC_OscConfig+0x68c>)
 800ae0e:	4013      	ands	r3, r2
 800ae10:	687a      	ldr	r2, [r7, #4]
 800ae12:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800ae14:	687a      	ldr	r2, [r7, #4]
 800ae16:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800ae18:	4311      	orrs	r1, r2
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800ae1e:	0212      	lsls	r2, r2, #8
 800ae20:	4311      	orrs	r1, r2
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800ae26:	4311      	orrs	r1, r2
 800ae28:	687a      	ldr	r2, [r7, #4]
 800ae2a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800ae2c:	4311      	orrs	r1, r2
 800ae2e:	687a      	ldr	r2, [r7, #4]
 800ae30:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800ae32:	430a      	orrs	r2, r1
 800ae34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800ae3c:	f7ff fc44 	bl	800a6c8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ae40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae44:	68db      	ldr	r3, [r3, #12]
 800ae46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ae4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ae4e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ae50:	f7f9 ffd4 	bl	8004dfc <HAL_GetTick>
 800ae54:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ae56:	e008      	b.n	800ae6a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae58:	f7f9 ffd0 	bl	8004dfc <HAL_GetTick>
 800ae5c:	4602      	mov	r2, r0
 800ae5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae60:	1ad3      	subs	r3, r2, r3
 800ae62:	2b02      	cmp	r3, #2
 800ae64:	d901      	bls.n	800ae6a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800ae66:	2303      	movs	r3, #3
 800ae68:	e059      	b.n	800af1e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ae6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d0ef      	beq.n	800ae58 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ae78:	e050      	b.n	800af1c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	e04f      	b.n	800af1e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ae7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d147      	bne.n	800af1c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800ae8c:	f7ff fc1c 	bl	800a6c8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ae90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae94:	68db      	ldr	r3, [r3, #12]
 800ae96:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ae9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ae9e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800aea0:	f7f9 ffac 	bl	8004dfc <HAL_GetTick>
 800aea4:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aea6:	e008      	b.n	800aeba <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aea8:	f7f9 ffa8 	bl	8004dfc <HAL_GetTick>
 800aeac:	4602      	mov	r2, r0
 800aeae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeb0:	1ad3      	subs	r3, r2, r3
 800aeb2:	2b02      	cmp	r3, #2
 800aeb4:	d901      	bls.n	800aeba <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800aeb6:	2303      	movs	r3, #3
 800aeb8:	e031      	b.n	800af1e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aeba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d0ef      	beq.n	800aea8 <HAL_RCC_OscConfig+0x664>
 800aec8:	e028      	b.n	800af1c <HAL_RCC_OscConfig+0x6d8>
 800aeca:	bf00      	nop
 800aecc:	58000400 	.word	0x58000400
 800aed0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	2b0c      	cmp	r3, #12
 800aed8:	d01e      	beq.n	800af18 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aeda:	f7ff fc04 	bl	800a6e6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aede:	f7f9 ff8d 	bl	8004dfc <HAL_GetTick>
 800aee2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800aee4:	e008      	b.n	800aef8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aee6:	f7f9 ff89 	bl	8004dfc <HAL_GetTick>
 800aeea:	4602      	mov	r2, r0
 800aeec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeee:	1ad3      	subs	r3, r2, r3
 800aef0:	2b02      	cmp	r3, #2
 800aef2:	d901      	bls.n	800aef8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800aef4:	2303      	movs	r3, #3
 800aef6:	e012      	b.n	800af1e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800aef8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af02:	2b00      	cmp	r3, #0
 800af04:	d1ef      	bne.n	800aee6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800af06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af0a:	68da      	ldr	r2, [r3, #12]
 800af0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800af10:	4b05      	ldr	r3, [pc, #20]	@ (800af28 <HAL_RCC_OscConfig+0x6e4>)
 800af12:	4013      	ands	r3, r2
 800af14:	60cb      	str	r3, [r1, #12]
 800af16:	e001      	b.n	800af1c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800af18:	2301      	movs	r3, #1
 800af1a:	e000      	b.n	800af1e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800af1c:	2300      	movs	r3, #0
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3734      	adds	r7, #52	@ 0x34
 800af22:	46bd      	mov	sp, r7
 800af24:	bd90      	pop	{r4, r7, pc}
 800af26:	bf00      	nop
 800af28:	eefefffc 	.word	0xeefefffc

0800af2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d101      	bne.n	800af40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800af3c:	2301      	movs	r3, #1
 800af3e:	e12d      	b.n	800b19c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800af40:	4b98      	ldr	r3, [pc, #608]	@ (800b1a4 <HAL_RCC_ClockConfig+0x278>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f003 0307 	and.w	r3, r3, #7
 800af48:	683a      	ldr	r2, [r7, #0]
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d91b      	bls.n	800af86 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af4e:	4b95      	ldr	r3, [pc, #596]	@ (800b1a4 <HAL_RCC_ClockConfig+0x278>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f023 0207 	bic.w	r2, r3, #7
 800af56:	4993      	ldr	r1, [pc, #588]	@ (800b1a4 <HAL_RCC_ClockConfig+0x278>)
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	4313      	orrs	r3, r2
 800af5c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af5e:	f7f9 ff4d 	bl	8004dfc <HAL_GetTick>
 800af62:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800af64:	e008      	b.n	800af78 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800af66:	f7f9 ff49 	bl	8004dfc <HAL_GetTick>
 800af6a:	4602      	mov	r2, r0
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	1ad3      	subs	r3, r2, r3
 800af70:	2b02      	cmp	r3, #2
 800af72:	d901      	bls.n	800af78 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800af74:	2303      	movs	r3, #3
 800af76:	e111      	b.n	800b19c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800af78:	4b8a      	ldr	r3, [pc, #552]	@ (800b1a4 <HAL_RCC_ClockConfig+0x278>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f003 0307 	and.w	r3, r3, #7
 800af80:	683a      	ldr	r2, [r7, #0]
 800af82:	429a      	cmp	r2, r3
 800af84:	d1ef      	bne.n	800af66 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f003 0302 	and.w	r3, r3, #2
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d016      	beq.n	800afc0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	689b      	ldr	r3, [r3, #8]
 800af96:	4618      	mov	r0, r3
 800af98:	f7ff fafb 	bl	800a592 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800af9c:	f7f9 ff2e 	bl	8004dfc <HAL_GetTick>
 800afa0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800afa2:	e008      	b.n	800afb6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800afa4:	f7f9 ff2a 	bl	8004dfc <HAL_GetTick>
 800afa8:	4602      	mov	r2, r0
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	1ad3      	subs	r3, r2, r3
 800afae:	2b02      	cmp	r3, #2
 800afb0:	d901      	bls.n	800afb6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800afb2:	2303      	movs	r3, #3
 800afb4:	e0f2      	b.n	800b19c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800afb6:	f7ff fbe8 	bl	800a78a <LL_RCC_IsActiveFlag_HPRE>
 800afba:	4603      	mov	r3, r0
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d0f1      	beq.n	800afa4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f003 0320 	and.w	r3, r3, #32
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d016      	beq.n	800affa <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	695b      	ldr	r3, [r3, #20]
 800afd0:	4618      	mov	r0, r3
 800afd2:	f7ff faf2 	bl	800a5ba <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800afd6:	f7f9 ff11 	bl	8004dfc <HAL_GetTick>
 800afda:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800afdc:	e008      	b.n	800aff0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800afde:	f7f9 ff0d 	bl	8004dfc <HAL_GetTick>
 800afe2:	4602      	mov	r2, r0
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	1ad3      	subs	r3, r2, r3
 800afe8:	2b02      	cmp	r3, #2
 800afea:	d901      	bls.n	800aff0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800afec:	2303      	movs	r3, #3
 800afee:	e0d5      	b.n	800b19c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800aff0:	f7ff fbdd 	bl	800a7ae <LL_RCC_IsActiveFlag_C2HPRE>
 800aff4:	4603      	mov	r3, r0
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d0f1      	beq.n	800afde <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b002:	2b00      	cmp	r3, #0
 800b004:	d016      	beq.n	800b034 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	699b      	ldr	r3, [r3, #24]
 800b00a:	4618      	mov	r0, r3
 800b00c:	f7ff faeb 	bl	800a5e6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b010:	f7f9 fef4 	bl	8004dfc <HAL_GetTick>
 800b014:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800b016:	e008      	b.n	800b02a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b018:	f7f9 fef0 	bl	8004dfc <HAL_GetTick>
 800b01c:	4602      	mov	r2, r0
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	1ad3      	subs	r3, r2, r3
 800b022:	2b02      	cmp	r3, #2
 800b024:	d901      	bls.n	800b02a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800b026:	2303      	movs	r3, #3
 800b028:	e0b8      	b.n	800b19c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800b02a:	f7ff fbd3 	bl	800a7d4 <LL_RCC_IsActiveFlag_SHDHPRE>
 800b02e:	4603      	mov	r3, r0
 800b030:	2b00      	cmp	r3, #0
 800b032:	d0f1      	beq.n	800b018 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f003 0304 	and.w	r3, r3, #4
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d016      	beq.n	800b06e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	68db      	ldr	r3, [r3, #12]
 800b044:	4618      	mov	r0, r3
 800b046:	f7ff fae5 	bl	800a614 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b04a:	f7f9 fed7 	bl	8004dfc <HAL_GetTick>
 800b04e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800b050:	e008      	b.n	800b064 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b052:	f7f9 fed3 	bl	8004dfc <HAL_GetTick>
 800b056:	4602      	mov	r2, r0
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	1ad3      	subs	r3, r2, r3
 800b05c:	2b02      	cmp	r3, #2
 800b05e:	d901      	bls.n	800b064 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800b060:	2303      	movs	r3, #3
 800b062:	e09b      	b.n	800b19c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800b064:	f7ff fbc9 	bl	800a7fa <LL_RCC_IsActiveFlag_PPRE1>
 800b068:	4603      	mov	r3, r0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d0f1      	beq.n	800b052 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f003 0308 	and.w	r3, r3, #8
 800b076:	2b00      	cmp	r3, #0
 800b078:	d017      	beq.n	800b0aa <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	691b      	ldr	r3, [r3, #16]
 800b07e:	00db      	lsls	r3, r3, #3
 800b080:	4618      	mov	r0, r3
 800b082:	f7ff fadb 	bl	800a63c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b086:	f7f9 feb9 	bl	8004dfc <HAL_GetTick>
 800b08a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800b08c:	e008      	b.n	800b0a0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b08e:	f7f9 feb5 	bl	8004dfc <HAL_GetTick>
 800b092:	4602      	mov	r2, r0
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	1ad3      	subs	r3, r2, r3
 800b098:	2b02      	cmp	r3, #2
 800b09a:	d901      	bls.n	800b0a0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800b09c:	2303      	movs	r3, #3
 800b09e:	e07d      	b.n	800b19c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800b0a0:	f7ff fbbd 	bl	800a81e <LL_RCC_IsActiveFlag_PPRE2>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d0f1      	beq.n	800b08e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f003 0301 	and.w	r3, r3, #1
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d043      	beq.n	800b13e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	2b02      	cmp	r3, #2
 800b0bc:	d106      	bne.n	800b0cc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800b0be:	f7ff f87b 	bl	800a1b8 <LL_RCC_HSE_IsReady>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d11e      	bne.n	800b106 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	e067      	b.n	800b19c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	2b03      	cmp	r3, #3
 800b0d2:	d106      	bne.n	800b0e2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800b0d4:	f7ff fb16 	bl	800a704 <LL_RCC_PLL_IsReady>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d113      	bne.n	800b106 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b0de:	2301      	movs	r3, #1
 800b0e0:	e05c      	b.n	800b19c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d106      	bne.n	800b0f8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800b0ea:	f7ff f9e3 	bl	800a4b4 <LL_RCC_MSI_IsReady>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d108      	bne.n	800b106 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	e051      	b.n	800b19c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800b0f8:	f7ff f88e 	bl	800a218 <LL_RCC_HSI_IsReady>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d101      	bne.n	800b106 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b102:	2301      	movs	r3, #1
 800b104:	e04a      	b.n	800b19c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	4618      	mov	r0, r3
 800b10c:	f7ff fa21 	bl	800a552 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b110:	f7f9 fe74 	bl	8004dfc <HAL_GetTick>
 800b114:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b116:	e00a      	b.n	800b12e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b118:	f7f9 fe70 	bl	8004dfc <HAL_GetTick>
 800b11c:	4602      	mov	r2, r0
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	1ad3      	subs	r3, r2, r3
 800b122:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b126:	4293      	cmp	r3, r2
 800b128:	d901      	bls.n	800b12e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800b12a:	2303      	movs	r3, #3
 800b12c:	e036      	b.n	800b19c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b12e:	f7ff fa24 	bl	800a57a <LL_RCC_GetSysClkSource>
 800b132:	4602      	mov	r2, r0
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	685b      	ldr	r3, [r3, #4]
 800b138:	009b      	lsls	r3, r3, #2
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d1ec      	bne.n	800b118 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b13e:	4b19      	ldr	r3, [pc, #100]	@ (800b1a4 <HAL_RCC_ClockConfig+0x278>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f003 0307 	and.w	r3, r3, #7
 800b146:	683a      	ldr	r2, [r7, #0]
 800b148:	429a      	cmp	r2, r3
 800b14a:	d21b      	bcs.n	800b184 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b14c:	4b15      	ldr	r3, [pc, #84]	@ (800b1a4 <HAL_RCC_ClockConfig+0x278>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f023 0207 	bic.w	r2, r3, #7
 800b154:	4913      	ldr	r1, [pc, #76]	@ (800b1a4 <HAL_RCC_ClockConfig+0x278>)
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	4313      	orrs	r3, r2
 800b15a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b15c:	f7f9 fe4e 	bl	8004dfc <HAL_GetTick>
 800b160:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b162:	e008      	b.n	800b176 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b164:	f7f9 fe4a 	bl	8004dfc <HAL_GetTick>
 800b168:	4602      	mov	r2, r0
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	1ad3      	subs	r3, r2, r3
 800b16e:	2b02      	cmp	r3, #2
 800b170:	d901      	bls.n	800b176 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800b172:	2303      	movs	r3, #3
 800b174:	e012      	b.n	800b19c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b176:	4b0b      	ldr	r3, [pc, #44]	@ (800b1a4 <HAL_RCC_ClockConfig+0x278>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f003 0307 	and.w	r3, r3, #7
 800b17e:	683a      	ldr	r2, [r7, #0]
 800b180:	429a      	cmp	r2, r3
 800b182:	d1ef      	bne.n	800b164 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800b184:	f000 f87e 	bl	800b284 <HAL_RCC_GetHCLKFreq>
 800b188:	4603      	mov	r3, r0
 800b18a:	4a07      	ldr	r2, [pc, #28]	@ (800b1a8 <HAL_RCC_ClockConfig+0x27c>)
 800b18c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800b18e:	f7f9 fe41 	bl	8004e14 <HAL_GetTickPrio>
 800b192:	4603      	mov	r3, r0
 800b194:	4618      	mov	r0, r3
 800b196:	f7f9 fde3 	bl	8004d60 <HAL_InitTick>
 800b19a:	4603      	mov	r3, r0
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3710      	adds	r7, #16
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}
 800b1a4:	58004000 	.word	0x58004000
 800b1a8:	2000000c 	.word	0x2000000c

0800b1ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b1ac:	b590      	push	{r4, r7, lr}
 800b1ae:	b085      	sub	sp, #20
 800b1b0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b1b2:	f7ff f9e2 	bl	800a57a <LL_RCC_GetSysClkSource>
 800b1b6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d10a      	bne.n	800b1d4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800b1be:	f7ff f99e 	bl	800a4fe <LL_RCC_MSI_GetRange>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	091b      	lsrs	r3, r3, #4
 800b1c6:	f003 030f 	and.w	r3, r3, #15
 800b1ca:	4a2b      	ldr	r2, [pc, #172]	@ (800b278 <HAL_RCC_GetSysClockFreq+0xcc>)
 800b1cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1d0:	60fb      	str	r3, [r7, #12]
 800b1d2:	e04b      	b.n	800b26c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2b04      	cmp	r3, #4
 800b1d8:	d102      	bne.n	800b1e0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b1da:	4b28      	ldr	r3, [pc, #160]	@ (800b27c <HAL_RCC_GetSysClockFreq+0xd0>)
 800b1dc:	60fb      	str	r3, [r7, #12]
 800b1de:	e045      	b.n	800b26c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2b08      	cmp	r3, #8
 800b1e4:	d10a      	bne.n	800b1fc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800b1e6:	f7fe ffb7 	bl	800a158 <LL_RCC_HSE_IsEnabledDiv2>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d102      	bne.n	800b1f6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800b1f0:	4b22      	ldr	r3, [pc, #136]	@ (800b27c <HAL_RCC_GetSysClockFreq+0xd0>)
 800b1f2:	60fb      	str	r3, [r7, #12]
 800b1f4:	e03a      	b.n	800b26c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800b1f6:	4b22      	ldr	r3, [pc, #136]	@ (800b280 <HAL_RCC_GetSysClockFreq+0xd4>)
 800b1f8:	60fb      	str	r3, [r7, #12]
 800b1fa:	e037      	b.n	800b26c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800b1fc:	f7ff fab9 	bl	800a772 <LL_RCC_PLL_GetMainSource>
 800b200:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	2b02      	cmp	r3, #2
 800b206:	d003      	beq.n	800b210 <HAL_RCC_GetSysClockFreq+0x64>
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	2b03      	cmp	r3, #3
 800b20c:	d003      	beq.n	800b216 <HAL_RCC_GetSysClockFreq+0x6a>
 800b20e:	e00d      	b.n	800b22c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800b210:	4b1a      	ldr	r3, [pc, #104]	@ (800b27c <HAL_RCC_GetSysClockFreq+0xd0>)
 800b212:	60bb      	str	r3, [r7, #8]
        break;
 800b214:	e015      	b.n	800b242 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800b216:	f7fe ff9f 	bl	800a158 <LL_RCC_HSE_IsEnabledDiv2>
 800b21a:	4603      	mov	r3, r0
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d102      	bne.n	800b226 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800b220:	4b16      	ldr	r3, [pc, #88]	@ (800b27c <HAL_RCC_GetSysClockFreq+0xd0>)
 800b222:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800b224:	e00d      	b.n	800b242 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800b226:	4b16      	ldr	r3, [pc, #88]	@ (800b280 <HAL_RCC_GetSysClockFreq+0xd4>)
 800b228:	60bb      	str	r3, [r7, #8]
        break;
 800b22a:	e00a      	b.n	800b242 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800b22c:	f7ff f967 	bl	800a4fe <LL_RCC_MSI_GetRange>
 800b230:	4603      	mov	r3, r0
 800b232:	091b      	lsrs	r3, r3, #4
 800b234:	f003 030f 	and.w	r3, r3, #15
 800b238:	4a0f      	ldr	r2, [pc, #60]	@ (800b278 <HAL_RCC_GetSysClockFreq+0xcc>)
 800b23a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b23e:	60bb      	str	r3, [r7, #8]
        break;
 800b240:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800b242:	f7ff fa71 	bl	800a728 <LL_RCC_PLL_GetN>
 800b246:	4602      	mov	r2, r0
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	fb03 f402 	mul.w	r4, r3, r2
 800b24e:	f7ff fa84 	bl	800a75a <LL_RCC_PLL_GetDivider>
 800b252:	4603      	mov	r3, r0
 800b254:	091b      	lsrs	r3, r3, #4
 800b256:	3301      	adds	r3, #1
 800b258:	fbb4 f4f3 	udiv	r4, r4, r3
 800b25c:	f7ff fa71 	bl	800a742 <LL_RCC_PLL_GetR>
 800b260:	4603      	mov	r3, r0
 800b262:	0f5b      	lsrs	r3, r3, #29
 800b264:	3301      	adds	r3, #1
 800b266:	fbb4 f3f3 	udiv	r3, r4, r3
 800b26a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800b26c:	68fb      	ldr	r3, [r7, #12]
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3714      	adds	r7, #20
 800b272:	46bd      	mov	sp, r7
 800b274:	bd90      	pop	{r4, r7, pc}
 800b276:	bf00      	nop
 800b278:	08014b00 	.word	0x08014b00
 800b27c:	00f42400 	.word	0x00f42400
 800b280:	01e84800 	.word	0x01e84800

0800b284 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b284:	b598      	push	{r3, r4, r7, lr}
 800b286:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800b288:	f7ff ff90 	bl	800b1ac <HAL_RCC_GetSysClockFreq>
 800b28c:	4604      	mov	r4, r0
 800b28e:	f7ff f9e9 	bl	800a664 <LL_RCC_GetAHBPrescaler>
 800b292:	4603      	mov	r3, r0
 800b294:	091b      	lsrs	r3, r3, #4
 800b296:	f003 030f 	and.w	r3, r3, #15
 800b29a:	4a03      	ldr	r2, [pc, #12]	@ (800b2a8 <HAL_RCC_GetHCLKFreq+0x24>)
 800b29c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2a0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	bd98      	pop	{r3, r4, r7, pc}
 800b2a8:	08014aa0 	.word	0x08014aa0

0800b2ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b2ac:	b598      	push	{r3, r4, r7, lr}
 800b2ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800b2b0:	f7ff ffe8 	bl	800b284 <HAL_RCC_GetHCLKFreq>
 800b2b4:	4604      	mov	r4, r0
 800b2b6:	f7ff f9ef 	bl	800a698 <LL_RCC_GetAPB1Prescaler>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	0a1b      	lsrs	r3, r3, #8
 800b2be:	f003 0307 	and.w	r3, r3, #7
 800b2c2:	4a04      	ldr	r2, [pc, #16]	@ (800b2d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b2c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2c8:	f003 031f 	and.w	r3, r3, #31
 800b2cc:	fa24 f303 	lsr.w	r3, r4, r3
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	bd98      	pop	{r3, r4, r7, pc}
 800b2d4:	08014ae0 	.word	0x08014ae0

0800b2d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b2d8:	b598      	push	{r3, r4, r7, lr}
 800b2da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800b2dc:	f7ff ffd2 	bl	800b284 <HAL_RCC_GetHCLKFreq>
 800b2e0:	4604      	mov	r4, r0
 800b2e2:	f7ff f9e5 	bl	800a6b0 <LL_RCC_GetAPB2Prescaler>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	0adb      	lsrs	r3, r3, #11
 800b2ea:	f003 0307 	and.w	r3, r3, #7
 800b2ee:	4a04      	ldr	r2, [pc, #16]	@ (800b300 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b2f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2f4:	f003 031f 	and.w	r3, r3, #31
 800b2f8:	fa24 f303 	lsr.w	r3, r4, r3
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	bd98      	pop	{r3, r4, r7, pc}
 800b300:	08014ae0 	.word	0x08014ae0

0800b304 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800b304:	b590      	push	{r4, r7, lr}
 800b306:	b085      	sub	sp, #20
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2bb0      	cmp	r3, #176	@ 0xb0
 800b310:	d903      	bls.n	800b31a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800b312:	4b15      	ldr	r3, [pc, #84]	@ (800b368 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800b314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b316:	60fb      	str	r3, [r7, #12]
 800b318:	e007      	b.n	800b32a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	091b      	lsrs	r3, r3, #4
 800b31e:	f003 030f 	and.w	r3, r3, #15
 800b322:	4a11      	ldr	r2, [pc, #68]	@ (800b368 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800b324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b328:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800b32a:	f7ff f9a7 	bl	800a67c <LL_RCC_GetAHB4Prescaler>
 800b32e:	4603      	mov	r3, r0
 800b330:	091b      	lsrs	r3, r3, #4
 800b332:	f003 030f 	and.w	r3, r3, #15
 800b336:	4a0d      	ldr	r2, [pc, #52]	@ (800b36c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800b338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b33c:	68fa      	ldr	r2, [r7, #12]
 800b33e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b342:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	4a0a      	ldr	r2, [pc, #40]	@ (800b370 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800b348:	fba2 2303 	umull	r2, r3, r2, r3
 800b34c:	0c9c      	lsrs	r4, r3, #18
 800b34e:	f7fe fee5 	bl	800a11c <HAL_PWREx_GetVoltageRange>
 800b352:	4603      	mov	r3, r0
 800b354:	4619      	mov	r1, r3
 800b356:	4620      	mov	r0, r4
 800b358:	f000 f80c 	bl	800b374 <RCC_SetFlashLatency>
 800b35c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3714      	adds	r7, #20
 800b362:	46bd      	mov	sp, r7
 800b364:	bd90      	pop	{r4, r7, pc}
 800b366:	bf00      	nop
 800b368:	08014b00 	.word	0x08014b00
 800b36c:	08014aa0 	.word	0x08014aa0
 800b370:	431bde83 	.word	0x431bde83

0800b374 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800b374:	b590      	push	{r4, r7, lr}
 800b376:	b093      	sub	sp, #76	@ 0x4c
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800b37e:	4b37      	ldr	r3, [pc, #220]	@ (800b45c <RCC_SetFlashLatency+0xe8>)
 800b380:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800b384:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b386:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800b38a:	4a35      	ldr	r2, [pc, #212]	@ (800b460 <RCC_SetFlashLatency+0xec>)
 800b38c:	f107 031c 	add.w	r3, r7, #28
 800b390:	ca07      	ldmia	r2, {r0, r1, r2}
 800b392:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800b396:	4b33      	ldr	r3, [pc, #204]	@ (800b464 <RCC_SetFlashLatency+0xf0>)
 800b398:	f107 040c 	add.w	r4, r7, #12
 800b39c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b39e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b3ac:	d11a      	bne.n	800b3e4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	643b      	str	r3, [r7, #64]	@ 0x40
 800b3b2:	e013      	b.n	800b3dc <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800b3b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3b6:	009b      	lsls	r3, r3, #2
 800b3b8:	3348      	adds	r3, #72	@ 0x48
 800b3ba:	443b      	add	r3, r7
 800b3bc:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d807      	bhi.n	800b3d6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800b3c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3c8:	009b      	lsls	r3, r3, #2
 800b3ca:	3348      	adds	r3, #72	@ 0x48
 800b3cc:	443b      	add	r3, r7
 800b3ce:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800b3d2:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800b3d4:	e020      	b.n	800b418 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800b3d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3d8:	3301      	adds	r3, #1
 800b3da:	643b      	str	r3, [r7, #64]	@ 0x40
 800b3dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3de:	2b03      	cmp	r3, #3
 800b3e0:	d9e8      	bls.n	800b3b4 <RCC_SetFlashLatency+0x40>
 800b3e2:	e019      	b.n	800b418 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3e8:	e013      	b.n	800b412 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800b3ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3ec:	009b      	lsls	r3, r3, #2
 800b3ee:	3348      	adds	r3, #72	@ 0x48
 800b3f0:	443b      	add	r3, r7
 800b3f2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800b3f6:	687a      	ldr	r2, [r7, #4]
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d807      	bhi.n	800b40c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800b3fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3fe:	009b      	lsls	r3, r3, #2
 800b400:	3348      	adds	r3, #72	@ 0x48
 800b402:	443b      	add	r3, r7
 800b404:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800b408:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800b40a:	e005      	b.n	800b418 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800b40c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b40e:	3301      	adds	r3, #1
 800b410:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b414:	2b02      	cmp	r3, #2
 800b416:	d9e8      	bls.n	800b3ea <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800b418:	4b13      	ldr	r3, [pc, #76]	@ (800b468 <RCC_SetFlashLatency+0xf4>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	f023 0207 	bic.w	r2, r3, #7
 800b420:	4911      	ldr	r1, [pc, #68]	@ (800b468 <RCC_SetFlashLatency+0xf4>)
 800b422:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b424:	4313      	orrs	r3, r2
 800b426:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b428:	f7f9 fce8 	bl	8004dfc <HAL_GetTick>
 800b42c:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800b42e:	e008      	b.n	800b442 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b430:	f7f9 fce4 	bl	8004dfc <HAL_GetTick>
 800b434:	4602      	mov	r2, r0
 800b436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b438:	1ad3      	subs	r3, r2, r3
 800b43a:	2b02      	cmp	r3, #2
 800b43c:	d901      	bls.n	800b442 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800b43e:	2303      	movs	r3, #3
 800b440:	e007      	b.n	800b452 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800b442:	4b09      	ldr	r3, [pc, #36]	@ (800b468 <RCC_SetFlashLatency+0xf4>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f003 0307 	and.w	r3, r3, #7
 800b44a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d1ef      	bne.n	800b430 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800b450:	2300      	movs	r3, #0
}
 800b452:	4618      	mov	r0, r3
 800b454:	374c      	adds	r7, #76	@ 0x4c
 800b456:	46bd      	mov	sp, r7
 800b458:	bd90      	pop	{r4, r7, pc}
 800b45a:	bf00      	nop
 800b45c:	080149e4 	.word	0x080149e4
 800b460:	080149f4 	.word	0x080149f4
 800b464:	08014a00 	.word	0x08014a00
 800b468:	58004000 	.word	0x58004000

0800b46c <LL_RCC_LSE_IsEnabled>:
{
 800b46c:	b480      	push	{r7}
 800b46e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800b470:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b478:	f003 0301 	and.w	r3, r3, #1
 800b47c:	2b01      	cmp	r3, #1
 800b47e:	d101      	bne.n	800b484 <LL_RCC_LSE_IsEnabled+0x18>
 800b480:	2301      	movs	r3, #1
 800b482:	e000      	b.n	800b486 <LL_RCC_LSE_IsEnabled+0x1a>
 800b484:	2300      	movs	r3, #0
}
 800b486:	4618      	mov	r0, r3
 800b488:	46bd      	mov	sp, r7
 800b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48e:	4770      	bx	lr

0800b490 <LL_RCC_LSE_IsReady>:
{
 800b490:	b480      	push	{r7}
 800b492:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800b494:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b49c:	f003 0302 	and.w	r3, r3, #2
 800b4a0:	2b02      	cmp	r3, #2
 800b4a2:	d101      	bne.n	800b4a8 <LL_RCC_LSE_IsReady+0x18>
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	e000      	b.n	800b4aa <LL_RCC_LSE_IsReady+0x1a>
 800b4a8:	2300      	movs	r3, #0
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr

0800b4b4 <LL_RCC_SetRFWKPClockSource>:
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b083      	sub	sp, #12
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800b4bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b4c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b4c4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800b4c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800b4d4:	bf00      	nop
 800b4d6:	370c      	adds	r7, #12
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <LL_RCC_SetSMPSClockSource>:
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b083      	sub	sp, #12
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800b4e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b4ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4ee:	f023 0203 	bic.w	r2, r3, #3
 800b4f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	4313      	orrs	r3, r2
 800b4fa:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800b4fc:	bf00      	nop
 800b4fe:	370c      	adds	r7, #12
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr

0800b508 <LL_RCC_SetSMPSPrescaler>:
{
 800b508:	b480      	push	{r7}
 800b50a:	b083      	sub	sp, #12
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800b510:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b516:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800b51a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	4313      	orrs	r3, r2
 800b522:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800b524:	bf00      	nop
 800b526:	370c      	adds	r7, #12
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr

0800b530 <LL_RCC_SetUSARTClockSource>:
{
 800b530:	b480      	push	{r7}
 800b532:	b083      	sub	sp, #12
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800b538:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b53c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b540:	f023 0203 	bic.w	r2, r3, #3
 800b544:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	4313      	orrs	r3, r2
 800b54c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b550:	bf00      	nop
 800b552:	370c      	adds	r7, #12
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr

0800b55c <LL_RCC_SetLPUARTClockSource>:
{
 800b55c:	b480      	push	{r7}
 800b55e:	b083      	sub	sp, #12
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800b564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b56c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b570:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	4313      	orrs	r3, r2
 800b578:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b57c:	bf00      	nop
 800b57e:	370c      	adds	r7, #12
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr

0800b588 <LL_RCC_SetI2CClockSource>:
{
 800b588:	b480      	push	{r7}
 800b58a:	b083      	sub	sp, #12
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800b590:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b594:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	091b      	lsrs	r3, r3, #4
 800b59c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800b5a0:	43db      	mvns	r3, r3
 800b5a2:	401a      	ands	r2, r3
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	011b      	lsls	r3, r3, #4
 800b5a8:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800b5ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b5b0:	4313      	orrs	r3, r2
 800b5b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b5b6:	bf00      	nop
 800b5b8:	370c      	adds	r7, #12
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c0:	4770      	bx	lr

0800b5c2 <LL_RCC_SetLPTIMClockSource>:
{
 800b5c2:	b480      	push	{r7}
 800b5c4:	b083      	sub	sp, #12
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800b5ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b5ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	0c1b      	lsrs	r3, r3, #16
 800b5d6:	041b      	lsls	r3, r3, #16
 800b5d8:	43db      	mvns	r3, r3
 800b5da:	401a      	ands	r2, r3
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	041b      	lsls	r3, r3, #16
 800b5e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b5e4:	4313      	orrs	r3, r2
 800b5e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b5ea:	bf00      	nop
 800b5ec:	370c      	adds	r7, #12
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f4:	4770      	bx	lr

0800b5f6 <LL_RCC_SetSAIClockSource>:
{
 800b5f6:	b480      	push	{r7}
 800b5f8:	b083      	sub	sp, #12
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800b5fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b606:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b60a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	4313      	orrs	r3, r2
 800b612:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b616:	bf00      	nop
 800b618:	370c      	adds	r7, #12
 800b61a:	46bd      	mov	sp, r7
 800b61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b620:	4770      	bx	lr

0800b622 <LL_RCC_SetRNGClockSource>:
{
 800b622:	b480      	push	{r7}
 800b624:	b083      	sub	sp, #12
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800b62a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b62e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b632:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800b636:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	4313      	orrs	r3, r2
 800b63e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b642:	bf00      	nop
 800b644:	370c      	adds	r7, #12
 800b646:	46bd      	mov	sp, r7
 800b648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64c:	4770      	bx	lr

0800b64e <LL_RCC_SetCLK48ClockSource>:
{
 800b64e:	b480      	push	{r7}
 800b650:	b083      	sub	sp, #12
 800b652:	af00      	add	r7, sp, #0
 800b654:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800b656:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b65a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b65e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800b662:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	4313      	orrs	r3, r2
 800b66a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b66e:	bf00      	nop
 800b670:	370c      	adds	r7, #12
 800b672:	46bd      	mov	sp, r7
 800b674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b678:	4770      	bx	lr

0800b67a <LL_RCC_SetUSBClockSource>:
{
 800b67a:	b580      	push	{r7, lr}
 800b67c:	b082      	sub	sp, #8
 800b67e:	af00      	add	r7, sp, #0
 800b680:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f7ff ffe3 	bl	800b64e <LL_RCC_SetCLK48ClockSource>
}
 800b688:	bf00      	nop
 800b68a:	3708      	adds	r7, #8
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}

0800b690 <LL_RCC_SetADCClockSource>:
{
 800b690:	b480      	push	{r7}
 800b692:	b083      	sub	sp, #12
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800b698:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b69c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b6a0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800b6a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	4313      	orrs	r3, r2
 800b6ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b6b0:	bf00      	nop
 800b6b2:	370c      	adds	r7, #12
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr

0800b6bc <LL_RCC_SetRTCClockSource>:
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b083      	sub	sp, #12
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800b6c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b6d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	4313      	orrs	r3, r2
 800b6d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800b6dc:	bf00      	nop
 800b6de:	370c      	adds	r7, #12
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e6:	4770      	bx	lr

0800b6e8 <LL_RCC_GetRTCClockSource>:
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800b6ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b700:	4770      	bx	lr

0800b702 <LL_RCC_ForceBackupDomainReset>:
{
 800b702:	b480      	push	{r7}
 800b704:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800b706:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b70a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b70e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b712:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b716:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b71a:	bf00      	nop
 800b71c:	46bd      	mov	sp, r7
 800b71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b722:	4770      	bx	lr

0800b724 <LL_RCC_ReleaseBackupDomainReset>:
{
 800b724:	b480      	push	{r7}
 800b726:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800b728:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b72c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b730:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b734:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b738:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b73c:	bf00      	nop
 800b73e:	46bd      	mov	sp, r7
 800b740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b744:	4770      	bx	lr

0800b746 <LL_RCC_PLLSAI1_Enable>:
{
 800b746:	b480      	push	{r7}
 800b748:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800b74a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b754:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b758:	6013      	str	r3, [r2, #0]
}
 800b75a:	bf00      	nop
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr

0800b764 <LL_RCC_PLLSAI1_Disable>:
{
 800b764:	b480      	push	{r7}
 800b766:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800b768:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b772:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b776:	6013      	str	r3, [r2, #0]
}
 800b778:	bf00      	nop
 800b77a:	46bd      	mov	sp, r7
 800b77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b780:	4770      	bx	lr

0800b782 <LL_RCC_PLLSAI1_IsReady>:
{
 800b782:	b480      	push	{r7}
 800b784:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800b786:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b790:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b794:	d101      	bne.n	800b79a <LL_RCC_PLLSAI1_IsReady+0x18>
 800b796:	2301      	movs	r3, #1
 800b798:	e000      	b.n	800b79c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800b79a:	2300      	movs	r3, #0
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a4:	4770      	bx	lr

0800b7a6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b7a6:	b580      	push	{r7, lr}
 800b7a8:	b088      	sub	sp, #32
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d034      	beq.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7c6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b7ca:	d021      	beq.n	800b810 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800b7cc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b7d0:	d81b      	bhi.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b7d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b7d6:	d01d      	beq.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800b7d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b7dc:	d815      	bhi.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d00b      	beq.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0x54>
 800b7e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b7e6:	d110      	bne.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800b7e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b7ec:	68db      	ldr	r3, [r3, #12]
 800b7ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b7f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b7f6:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800b7f8:	e00d      	b.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	3304      	adds	r3, #4
 800b7fe:	4618      	mov	r0, r3
 800b800:	f000 f947 	bl	800ba92 <RCCEx_PLLSAI1_ConfigNP>
 800b804:	4603      	mov	r3, r0
 800b806:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b808:	e005      	b.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800b80a:	2301      	movs	r3, #1
 800b80c:	77fb      	strb	r3, [r7, #31]
        break;
 800b80e:	e002      	b.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800b810:	bf00      	nop
 800b812:	e000      	b.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800b814:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b816:	7ffb      	ldrb	r3, [r7, #31]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d105      	bne.n	800b828 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b820:	4618      	mov	r0, r3
 800b822:	f7ff fee8 	bl	800b5f6 <LL_RCC_SetSAIClockSource>
 800b826:	e001      	b.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b828:	7ffb      	ldrb	r3, [r7, #31]
 800b82a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b834:	2b00      	cmp	r3, #0
 800b836:	d046      	beq.n	800b8c6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800b838:	f7ff ff56 	bl	800b6e8 <LL_RCC_GetRTCClockSource>
 800b83c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b842:	69ba      	ldr	r2, [r7, #24]
 800b844:	429a      	cmp	r2, r3
 800b846:	d03c      	beq.n	800b8c2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800b848:	f7fe fc58 	bl	800a0fc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800b84c:	69bb      	ldr	r3, [r7, #24]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d105      	bne.n	800b85e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b856:	4618      	mov	r0, r3
 800b858:	f7ff ff30 	bl	800b6bc <LL_RCC_SetRTCClockSource>
 800b85c:	e02e      	b.n	800b8bc <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800b85e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b866:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800b868:	f7ff ff4b 	bl	800b702 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800b86c:	f7ff ff5a 	bl	800b724 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b87a:	4313      	orrs	r3, r2
 800b87c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800b87e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800b888:	f7ff fdf0 	bl	800b46c <LL_RCC_LSE_IsEnabled>
 800b88c:	4603      	mov	r3, r0
 800b88e:	2b01      	cmp	r3, #1
 800b890:	d114      	bne.n	800b8bc <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b892:	f7f9 fab3 	bl	8004dfc <HAL_GetTick>
 800b896:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800b898:	e00b      	b.n	800b8b2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b89a:	f7f9 faaf 	bl	8004dfc <HAL_GetTick>
 800b89e:	4602      	mov	r2, r0
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	1ad3      	subs	r3, r2, r3
 800b8a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d902      	bls.n	800b8b2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800b8ac:	2303      	movs	r3, #3
 800b8ae:	77fb      	strb	r3, [r7, #31]
              break;
 800b8b0:	e004      	b.n	800b8bc <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800b8b2:	f7ff fded 	bl	800b490 <LL_RCC_LSE_IsReady>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	2b01      	cmp	r3, #1
 800b8ba:	d1ee      	bne.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800b8bc:	7ffb      	ldrb	r3, [r7, #31]
 800b8be:	77bb      	strb	r3, [r7, #30]
 800b8c0:	e001      	b.n	800b8c6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8c2:	7ffb      	ldrb	r3, [r7, #31]
 800b8c4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f003 0301 	and.w	r3, r3, #1
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d004      	beq.n	800b8dc <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	699b      	ldr	r3, [r3, #24]
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7ff fe2a 	bl	800b530 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f003 0302 	and.w	r3, r3, #2
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d004      	beq.n	800b8f2 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	69db      	ldr	r3, [r3, #28]
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f7ff fe35 	bl	800b55c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f003 0310 	and.w	r3, r3, #16
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d004      	beq.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b902:	4618      	mov	r0, r3
 800b904:	f7ff fe5d 	bl	800b5c2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f003 0320 	and.w	r3, r3, #32
 800b910:	2b00      	cmp	r3, #0
 800b912:	d004      	beq.n	800b91e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b918:	4618      	mov	r0, r3
 800b91a:	f7ff fe52 	bl	800b5c2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f003 0304 	and.w	r3, r3, #4
 800b926:	2b00      	cmp	r3, #0
 800b928:	d004      	beq.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6a1b      	ldr	r3, [r3, #32]
 800b92e:	4618      	mov	r0, r3
 800b930:	f7ff fe2a 	bl	800b588 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f003 0308 	and.w	r3, r3, #8
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d004      	beq.n	800b94a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b944:	4618      	mov	r0, r3
 800b946:	f7ff fe1f 	bl	800b588 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b952:	2b00      	cmp	r3, #0
 800b954:	d022      	beq.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b95a:	4618      	mov	r0, r3
 800b95c:	f7ff fe8d 	bl	800b67a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b964:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b968:	d107      	bne.n	800b97a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800b96a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b96e:	68db      	ldr	r3, [r3, #12]
 800b970:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b974:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b978:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b97e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b982:	d10b      	bne.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	3304      	adds	r3, #4
 800b988:	4618      	mov	r0, r3
 800b98a:	f000 f8dd 	bl	800bb48 <RCCEx_PLLSAI1_ConfigNQ>
 800b98e:	4603      	mov	r3, r0
 800b990:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800b992:	7ffb      	ldrb	r3, [r7, #31]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d001      	beq.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800b998:	7ffb      	ldrb	r3, [r7, #31]
 800b99a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d02b      	beq.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9b0:	d008      	beq.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b9ba:	d003      	beq.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d105      	bne.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f7ff fe2a 	bl	800b622 <LL_RCC_SetRNGClockSource>
 800b9ce:	e00a      	b.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b9d8:	60fb      	str	r3, [r7, #12]
 800b9da:	2000      	movs	r0, #0
 800b9dc:	f7ff fe21 	bl	800b622 <LL_RCC_SetRNGClockSource>
 800b9e0:	68f8      	ldr	r0, [r7, #12]
 800b9e2:	f7ff fe34 	bl	800b64e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9ea:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800b9ee:	d107      	bne.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800b9f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9f4:	68db      	ldr	r3, [r3, #12]
 800b9f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b9fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b9fe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d022      	beq.n	800ba52 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba10:	4618      	mov	r0, r3
 800ba12:	f7ff fe3d 	bl	800b690 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba1e:	d107      	bne.n	800ba30 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800ba20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba24:	68db      	ldr	r3, [r3, #12]
 800ba26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ba2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ba2e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ba38:	d10b      	bne.n	800ba52 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	3304      	adds	r3, #4
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f000 f8dd 	bl	800bbfe <RCCEx_PLLSAI1_ConfigNR>
 800ba44:	4603      	mov	r3, r0
 800ba46:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800ba48:	7ffb      	ldrb	r3, [r7, #31]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d001      	beq.n	800ba52 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800ba4e:	7ffb      	ldrb	r3, [r7, #31]
 800ba50:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d004      	beq.n	800ba68 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7ff fd26 	bl	800b4b4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d009      	beq.n	800ba88 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f7ff fd45 	bl	800b508 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ba82:	4618      	mov	r0, r3
 800ba84:	f7ff fd2c 	bl	800b4e0 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800ba88:	7fbb      	ldrb	r3, [r7, #30]
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3720      	adds	r7, #32
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}

0800ba92 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800ba92:	b580      	push	{r7, lr}
 800ba94:	b084      	sub	sp, #16
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800ba9e:	f7ff fe61 	bl	800b764 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800baa2:	f7f9 f9ab 	bl	8004dfc <HAL_GetTick>
 800baa6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800baa8:	e009      	b.n	800babe <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800baaa:	f7f9 f9a7 	bl	8004dfc <HAL_GetTick>
 800baae:	4602      	mov	r2, r0
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	1ad3      	subs	r3, r2, r3
 800bab4:	2b02      	cmp	r3, #2
 800bab6:	d902      	bls.n	800babe <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800bab8:	2303      	movs	r3, #3
 800baba:	73fb      	strb	r3, [r7, #15]
      break;
 800babc:	e004      	b.n	800bac8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800babe:	f7ff fe60 	bl	800b782 <LL_RCC_PLLSAI1_IsReady>
 800bac2:	4603      	mov	r3, r0
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d1f0      	bne.n	800baaa <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800bac8:	7bfb      	ldrb	r3, [r7, #15]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d137      	bne.n	800bb3e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800bace:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bad2:	691b      	ldr	r3, [r3, #16]
 800bad4:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	021b      	lsls	r3, r3, #8
 800bade:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bae2:	4313      	orrs	r3, r2
 800bae4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800bae6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800baea:	691b      	ldr	r3, [r3, #16]
 800baec:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	685b      	ldr	r3, [r3, #4]
 800baf4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800baf8:	4313      	orrs	r3, r2
 800bafa:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800bafc:	f7ff fe23 	bl	800b746 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb00:	f7f9 f97c 	bl	8004dfc <HAL_GetTick>
 800bb04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bb06:	e009      	b.n	800bb1c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bb08:	f7f9 f978 	bl	8004dfc <HAL_GetTick>
 800bb0c:	4602      	mov	r2, r0
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	1ad3      	subs	r3, r2, r3
 800bb12:	2b02      	cmp	r3, #2
 800bb14:	d902      	bls.n	800bb1c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800bb16:	2303      	movs	r3, #3
 800bb18:	73fb      	strb	r3, [r7, #15]
        break;
 800bb1a:	e004      	b.n	800bb26 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bb1c:	f7ff fe31 	bl	800b782 <LL_RCC_PLLSAI1_IsReady>
 800bb20:	4603      	mov	r3, r0
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	d1f0      	bne.n	800bb08 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800bb26:	7bfb      	ldrb	r3, [r7, #15]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d108      	bne.n	800bb3e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800bb2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb30:	691a      	ldr	r2, [r3, #16]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	691b      	ldr	r3, [r3, #16]
 800bb36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb3a:	4313      	orrs	r3, r2
 800bb3c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800bb3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3710      	adds	r7, #16
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}

0800bb48 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b084      	sub	sp, #16
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bb50:	2300      	movs	r3, #0
 800bb52:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800bb54:	f7ff fe06 	bl	800b764 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bb58:	f7f9 f950 	bl	8004dfc <HAL_GetTick>
 800bb5c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bb5e:	e009      	b.n	800bb74 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bb60:	f7f9 f94c 	bl	8004dfc <HAL_GetTick>
 800bb64:	4602      	mov	r2, r0
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	1ad3      	subs	r3, r2, r3
 800bb6a:	2b02      	cmp	r3, #2
 800bb6c:	d902      	bls.n	800bb74 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800bb6e:	2303      	movs	r3, #3
 800bb70:	73fb      	strb	r3, [r7, #15]
      break;
 800bb72:	e004      	b.n	800bb7e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bb74:	f7ff fe05 	bl	800b782 <LL_RCC_PLLSAI1_IsReady>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d1f0      	bne.n	800bb60 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800bb7e:	7bfb      	ldrb	r3, [r7, #15]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d137      	bne.n	800bbf4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800bb84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb88:	691b      	ldr	r3, [r3, #16]
 800bb8a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	021b      	lsls	r3, r3, #8
 800bb94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800bb9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bba0:	691b      	ldr	r3, [r3, #16]
 800bba2:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	689b      	ldr	r3, [r3, #8]
 800bbaa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bbae:	4313      	orrs	r3, r2
 800bbb0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800bbb2:	f7ff fdc8 	bl	800b746 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bbb6:	f7f9 f921 	bl	8004dfc <HAL_GetTick>
 800bbba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bbbc:	e009      	b.n	800bbd2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bbbe:	f7f9 f91d 	bl	8004dfc <HAL_GetTick>
 800bbc2:	4602      	mov	r2, r0
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	1ad3      	subs	r3, r2, r3
 800bbc8:	2b02      	cmp	r3, #2
 800bbca:	d902      	bls.n	800bbd2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800bbcc:	2303      	movs	r3, #3
 800bbce:	73fb      	strb	r3, [r7, #15]
        break;
 800bbd0:	e004      	b.n	800bbdc <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bbd2:	f7ff fdd6 	bl	800b782 <LL_RCC_PLLSAI1_IsReady>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	2b01      	cmp	r3, #1
 800bbda:	d1f0      	bne.n	800bbbe <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800bbdc:	7bfb      	ldrb	r3, [r7, #15]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d108      	bne.n	800bbf4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800bbe2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbe6:	691a      	ldr	r2, [r3, #16]
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	691b      	ldr	r3, [r3, #16]
 800bbec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bbf0:	4313      	orrs	r3, r2
 800bbf2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800bbf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3710      	adds	r7, #16
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}

0800bbfe <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800bbfe:	b580      	push	{r7, lr}
 800bc00:	b084      	sub	sp, #16
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bc06:	2300      	movs	r3, #0
 800bc08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800bc0a:	f7ff fdab 	bl	800b764 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bc0e:	f7f9 f8f5 	bl	8004dfc <HAL_GetTick>
 800bc12:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bc14:	e009      	b.n	800bc2a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bc16:	f7f9 f8f1 	bl	8004dfc <HAL_GetTick>
 800bc1a:	4602      	mov	r2, r0
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	1ad3      	subs	r3, r2, r3
 800bc20:	2b02      	cmp	r3, #2
 800bc22:	d902      	bls.n	800bc2a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800bc24:	2303      	movs	r3, #3
 800bc26:	73fb      	strb	r3, [r7, #15]
      break;
 800bc28:	e004      	b.n	800bc34 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bc2a:	f7ff fdaa 	bl	800b782 <LL_RCC_PLLSAI1_IsReady>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d1f0      	bne.n	800bc16 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800bc34:	7bfb      	ldrb	r3, [r7, #15]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d137      	bne.n	800bcaa <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800bc3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc3e:	691b      	ldr	r3, [r3, #16]
 800bc40:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	021b      	lsls	r3, r3, #8
 800bc4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bc4e:	4313      	orrs	r3, r2
 800bc50:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800bc52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc56:	691b      	ldr	r3, [r3, #16]
 800bc58:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	68db      	ldr	r3, [r3, #12]
 800bc60:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bc64:	4313      	orrs	r3, r2
 800bc66:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800bc68:	f7ff fd6d 	bl	800b746 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc6c:	f7f9 f8c6 	bl	8004dfc <HAL_GetTick>
 800bc70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bc72:	e009      	b.n	800bc88 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bc74:	f7f9 f8c2 	bl	8004dfc <HAL_GetTick>
 800bc78:	4602      	mov	r2, r0
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	1ad3      	subs	r3, r2, r3
 800bc7e:	2b02      	cmp	r3, #2
 800bc80:	d902      	bls.n	800bc88 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800bc82:	2303      	movs	r3, #3
 800bc84:	73fb      	strb	r3, [r7, #15]
        break;
 800bc86:	e004      	b.n	800bc92 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bc88:	f7ff fd7b 	bl	800b782 <LL_RCC_PLLSAI1_IsReady>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	2b01      	cmp	r3, #1
 800bc90:	d1f0      	bne.n	800bc74 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800bc92:	7bfb      	ldrb	r3, [r7, #15]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d108      	bne.n	800bcaa <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800bc98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc9c:	691a      	ldr	r2, [r3, #16]
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	691b      	ldr	r3, [r3, #16]
 800bca2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bca6:	4313      	orrs	r3, r2
 800bca8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800bcaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3710      	adds	r7, #16
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}

0800bcb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b082      	sub	sp, #8
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d101      	bne.n	800bcc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	e049      	b.n	800bd5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bccc:	b2db      	uxtb	r3, r3
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d106      	bne.n	800bce0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f7f8 fc6e 	bl	80045bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2202      	movs	r2, #2
 800bce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681a      	ldr	r2, [r3, #0]
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	3304      	adds	r3, #4
 800bcf0:	4619      	mov	r1, r3
 800bcf2:	4610      	mov	r0, r2
 800bcf4:	f000 fa7c 	bl	800c1f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2201      	movs	r2, #1
 800bd04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2201      	movs	r2, #1
 800bd14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2201      	movs	r2, #1
 800bd24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2201      	movs	r2, #1
 800bd34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2201      	movs	r2, #1
 800bd3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2201      	movs	r2, #1
 800bd44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2201      	movs	r2, #1
 800bd54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bd58:	2300      	movs	r3, #0
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3708      	adds	r7, #8
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
	...

0800bd64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b085      	sub	sp, #20
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bd72:	b2db      	uxtb	r3, r3
 800bd74:	2b01      	cmp	r3, #1
 800bd76:	d001      	beq.n	800bd7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bd78:	2301      	movs	r3, #1
 800bd7a:	e036      	b.n	800bdea <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2202      	movs	r2, #2
 800bd80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	68da      	ldr	r2, [r3, #12]
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f042 0201 	orr.w	r2, r2, #1
 800bd92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	4a17      	ldr	r2, [pc, #92]	@ (800bdf8 <HAL_TIM_Base_Start_IT+0x94>)
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	d004      	beq.n	800bda8 <HAL_TIM_Base_Start_IT+0x44>
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bda6:	d115      	bne.n	800bdd4 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	689a      	ldr	r2, [r3, #8]
 800bdae:	4b13      	ldr	r3, [pc, #76]	@ (800bdfc <HAL_TIM_Base_Start_IT+0x98>)
 800bdb0:	4013      	ands	r3, r2
 800bdb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	2b06      	cmp	r3, #6
 800bdb8:	d015      	beq.n	800bde6 <HAL_TIM_Base_Start_IT+0x82>
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bdc0:	d011      	beq.n	800bde6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	681a      	ldr	r2, [r3, #0]
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f042 0201 	orr.w	r2, r2, #1
 800bdd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bdd2:	e008      	b.n	800bde6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	681a      	ldr	r2, [r3, #0]
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f042 0201 	orr.w	r2, r2, #1
 800bde2:	601a      	str	r2, [r3, #0]
 800bde4:	e000      	b.n	800bde8 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bde6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bde8:	2300      	movs	r3, #0
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3714      	adds	r7, #20
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf4:	4770      	bx	lr
 800bdf6:	bf00      	nop
 800bdf8:	40012c00 	.word	0x40012c00
 800bdfc:	00010007 	.word	0x00010007

0800be00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b084      	sub	sp, #16
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	68db      	ldr	r3, [r3, #12]
 800be0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	691b      	ldr	r3, [r3, #16]
 800be16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	f003 0302 	and.w	r3, r3, #2
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d020      	beq.n	800be64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	f003 0302 	and.w	r3, r3, #2
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d01b      	beq.n	800be64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f06f 0202 	mvn.w	r2, #2
 800be34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2201      	movs	r2, #1
 800be3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	699b      	ldr	r3, [r3, #24]
 800be42:	f003 0303 	and.w	r3, r3, #3
 800be46:	2b00      	cmp	r3, #0
 800be48:	d003      	beq.n	800be52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f000 f9b2 	bl	800c1b4 <HAL_TIM_IC_CaptureCallback>
 800be50:	e005      	b.n	800be5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f000 f9a4 	bl	800c1a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f000 f9b5 	bl	800c1c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2200      	movs	r2, #0
 800be62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	f003 0304 	and.w	r3, r3, #4
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d020      	beq.n	800beb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	f003 0304 	and.w	r3, r3, #4
 800be74:	2b00      	cmp	r3, #0
 800be76:	d01b      	beq.n	800beb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f06f 0204 	mvn.w	r2, #4
 800be80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2202      	movs	r2, #2
 800be86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	699b      	ldr	r3, [r3, #24]
 800be8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800be92:	2b00      	cmp	r3, #0
 800be94:	d003      	beq.n	800be9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 f98c 	bl	800c1b4 <HAL_TIM_IC_CaptureCallback>
 800be9c:	e005      	b.n	800beaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f000 f97e 	bl	800c1a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	f000 f98f 	bl	800c1c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2200      	movs	r2, #0
 800beae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	f003 0308 	and.w	r3, r3, #8
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d020      	beq.n	800befc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	f003 0308 	and.w	r3, r3, #8
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d01b      	beq.n	800befc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f06f 0208 	mvn.w	r2, #8
 800becc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2204      	movs	r2, #4
 800bed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	69db      	ldr	r3, [r3, #28]
 800beda:	f003 0303 	and.w	r3, r3, #3
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d003      	beq.n	800beea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f000 f966 	bl	800c1b4 <HAL_TIM_IC_CaptureCallback>
 800bee8:	e005      	b.n	800bef6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f000 f958 	bl	800c1a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f000 f969 	bl	800c1c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2200      	movs	r2, #0
 800befa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	f003 0310 	and.w	r3, r3, #16
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d020      	beq.n	800bf48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	f003 0310 	and.w	r3, r3, #16
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d01b      	beq.n	800bf48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	f06f 0210 	mvn.w	r2, #16
 800bf18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2208      	movs	r2, #8
 800bf1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	69db      	ldr	r3, [r3, #28]
 800bf26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d003      	beq.n	800bf36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f000 f940 	bl	800c1b4 <HAL_TIM_IC_CaptureCallback>
 800bf34:	e005      	b.n	800bf42 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f000 f932 	bl	800c1a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f000 f943 	bl	800c1c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2200      	movs	r2, #0
 800bf46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	f003 0301 	and.w	r3, r3, #1
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d00c      	beq.n	800bf6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	f003 0301 	and.w	r3, r3, #1
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d007      	beq.n	800bf6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f06f 0201 	mvn.w	r2, #1
 800bf64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f7f7 ff3c 	bl	8003de4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d104      	bne.n	800bf80 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d00c      	beq.n	800bf9a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d007      	beq.n	800bf9a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800bf92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f000 faa1 	bl	800c4dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d00c      	beq.n	800bfbe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d007      	beq.n	800bfbe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bfb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 fa99 	bl	800c4f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d00c      	beq.n	800bfe2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d007      	beq.n	800bfe2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bfda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f000 f8fd 	bl	800c1dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	f003 0320 	and.w	r3, r3, #32
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d00c      	beq.n	800c006 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	f003 0320 	and.w	r3, r3, #32
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d007      	beq.n	800c006 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f06f 0220 	mvn.w	r2, #32
 800bffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f000 fa61 	bl	800c4c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c006:	bf00      	nop
 800c008:	3710      	adds	r7, #16
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}

0800c00e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c00e:	b580      	push	{r7, lr}
 800c010:	b084      	sub	sp, #16
 800c012:	af00      	add	r7, sp, #0
 800c014:	6078      	str	r0, [r7, #4]
 800c016:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c018:	2300      	movs	r3, #0
 800c01a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c022:	2b01      	cmp	r3, #1
 800c024:	d101      	bne.n	800c02a <HAL_TIM_ConfigClockSource+0x1c>
 800c026:	2302      	movs	r3, #2
 800c028:	e0b6      	b.n	800c198 <HAL_TIM_ConfigClockSource+0x18a>
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2201      	movs	r2, #1
 800c02e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2202      	movs	r2, #2
 800c036:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	689b      	ldr	r3, [r3, #8]
 800c040:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800c048:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c04c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c04e:	68bb      	ldr	r3, [r7, #8]
 800c050:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c054:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	68ba      	ldr	r2, [r7, #8]
 800c05c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c066:	d03e      	beq.n	800c0e6 <HAL_TIM_ConfigClockSource+0xd8>
 800c068:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c06c:	f200 8087 	bhi.w	800c17e <HAL_TIM_ConfigClockSource+0x170>
 800c070:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c074:	f000 8086 	beq.w	800c184 <HAL_TIM_ConfigClockSource+0x176>
 800c078:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c07c:	d87f      	bhi.n	800c17e <HAL_TIM_ConfigClockSource+0x170>
 800c07e:	2b70      	cmp	r3, #112	@ 0x70
 800c080:	d01a      	beq.n	800c0b8 <HAL_TIM_ConfigClockSource+0xaa>
 800c082:	2b70      	cmp	r3, #112	@ 0x70
 800c084:	d87b      	bhi.n	800c17e <HAL_TIM_ConfigClockSource+0x170>
 800c086:	2b60      	cmp	r3, #96	@ 0x60
 800c088:	d050      	beq.n	800c12c <HAL_TIM_ConfigClockSource+0x11e>
 800c08a:	2b60      	cmp	r3, #96	@ 0x60
 800c08c:	d877      	bhi.n	800c17e <HAL_TIM_ConfigClockSource+0x170>
 800c08e:	2b50      	cmp	r3, #80	@ 0x50
 800c090:	d03c      	beq.n	800c10c <HAL_TIM_ConfigClockSource+0xfe>
 800c092:	2b50      	cmp	r3, #80	@ 0x50
 800c094:	d873      	bhi.n	800c17e <HAL_TIM_ConfigClockSource+0x170>
 800c096:	2b40      	cmp	r3, #64	@ 0x40
 800c098:	d058      	beq.n	800c14c <HAL_TIM_ConfigClockSource+0x13e>
 800c09a:	2b40      	cmp	r3, #64	@ 0x40
 800c09c:	d86f      	bhi.n	800c17e <HAL_TIM_ConfigClockSource+0x170>
 800c09e:	2b30      	cmp	r3, #48	@ 0x30
 800c0a0:	d064      	beq.n	800c16c <HAL_TIM_ConfigClockSource+0x15e>
 800c0a2:	2b30      	cmp	r3, #48	@ 0x30
 800c0a4:	d86b      	bhi.n	800c17e <HAL_TIM_ConfigClockSource+0x170>
 800c0a6:	2b20      	cmp	r3, #32
 800c0a8:	d060      	beq.n	800c16c <HAL_TIM_ConfigClockSource+0x15e>
 800c0aa:	2b20      	cmp	r3, #32
 800c0ac:	d867      	bhi.n	800c17e <HAL_TIM_ConfigClockSource+0x170>
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d05c      	beq.n	800c16c <HAL_TIM_ConfigClockSource+0x15e>
 800c0b2:	2b10      	cmp	r3, #16
 800c0b4:	d05a      	beq.n	800c16c <HAL_TIM_ConfigClockSource+0x15e>
 800c0b6:	e062      	b.n	800c17e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c0c8:	f000 f97e 	bl	800c3c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	689b      	ldr	r3, [r3, #8]
 800c0d2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c0da:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	68ba      	ldr	r2, [r7, #8]
 800c0e2:	609a      	str	r2, [r3, #8]
      break;
 800c0e4:	e04f      	b.n	800c186 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c0f6:	f000 f967 	bl	800c3c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	689a      	ldr	r2, [r3, #8]
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c108:	609a      	str	r2, [r3, #8]
      break;
 800c10a:	e03c      	b.n	800c186 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c118:	461a      	mov	r2, r3
 800c11a:	f000 f8d9 	bl	800c2d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	2150      	movs	r1, #80	@ 0x50
 800c124:	4618      	mov	r0, r3
 800c126:	f000 f932 	bl	800c38e <TIM_ITRx_SetConfig>
      break;
 800c12a:	e02c      	b.n	800c186 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c138:	461a      	mov	r2, r3
 800c13a:	f000 f8f8 	bl	800c32e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	2160      	movs	r1, #96	@ 0x60
 800c144:	4618      	mov	r0, r3
 800c146:	f000 f922 	bl	800c38e <TIM_ITRx_SetConfig>
      break;
 800c14a:	e01c      	b.n	800c186 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c158:	461a      	mov	r2, r3
 800c15a:	f000 f8b9 	bl	800c2d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	2140      	movs	r1, #64	@ 0x40
 800c164:	4618      	mov	r0, r3
 800c166:	f000 f912 	bl	800c38e <TIM_ITRx_SetConfig>
      break;
 800c16a:	e00c      	b.n	800c186 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681a      	ldr	r2, [r3, #0]
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	4619      	mov	r1, r3
 800c176:	4610      	mov	r0, r2
 800c178:	f000 f909 	bl	800c38e <TIM_ITRx_SetConfig>
      break;
 800c17c:	e003      	b.n	800c186 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800c17e:	2301      	movs	r3, #1
 800c180:	73fb      	strb	r3, [r7, #15]
      break;
 800c182:	e000      	b.n	800c186 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800c184:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2201      	movs	r2, #1
 800c18a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2200      	movs	r2, #0
 800c192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c196:	7bfb      	ldrb	r3, [r7, #15]
}
 800c198:	4618      	mov	r0, r3
 800c19a:	3710      	adds	r7, #16
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}

0800c1a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b083      	sub	sp, #12
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c1a8:	bf00      	nop
 800c1aa:	370c      	adds	r7, #12
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b2:	4770      	bx	lr

0800c1b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b083      	sub	sp, #12
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c1bc:	bf00      	nop
 800c1be:	370c      	adds	r7, #12
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c6:	4770      	bx	lr

0800c1c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b083      	sub	sp, #12
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c1d0:	bf00      	nop
 800c1d2:	370c      	adds	r7, #12
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1da:	4770      	bx	lr

0800c1dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c1dc:	b480      	push	{r7}
 800c1de:	b083      	sub	sp, #12
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c1e4:	bf00      	nop
 800c1e6:	370c      	adds	r7, #12
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ee:	4770      	bx	lr

0800c1f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	b085      	sub	sp, #20
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
 800c1f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	4a30      	ldr	r2, [pc, #192]	@ (800c2c4 <TIM_Base_SetConfig+0xd4>)
 800c204:	4293      	cmp	r3, r2
 800c206:	d003      	beq.n	800c210 <TIM_Base_SetConfig+0x20>
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c20e:	d108      	bne.n	800c222 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	685b      	ldr	r3, [r3, #4]
 800c21c:	68fa      	ldr	r2, [r7, #12]
 800c21e:	4313      	orrs	r3, r2
 800c220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	4a27      	ldr	r2, [pc, #156]	@ (800c2c4 <TIM_Base_SetConfig+0xd4>)
 800c226:	4293      	cmp	r3, r2
 800c228:	d00b      	beq.n	800c242 <TIM_Base_SetConfig+0x52>
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c230:	d007      	beq.n	800c242 <TIM_Base_SetConfig+0x52>
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	4a24      	ldr	r2, [pc, #144]	@ (800c2c8 <TIM_Base_SetConfig+0xd8>)
 800c236:	4293      	cmp	r3, r2
 800c238:	d003      	beq.n	800c242 <TIM_Base_SetConfig+0x52>
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	4a23      	ldr	r2, [pc, #140]	@ (800c2cc <TIM_Base_SetConfig+0xdc>)
 800c23e:	4293      	cmp	r3, r2
 800c240:	d108      	bne.n	800c254 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c248:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	68db      	ldr	r3, [r3, #12]
 800c24e:	68fa      	ldr	r2, [r7, #12]
 800c250:	4313      	orrs	r3, r2
 800c252:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	695b      	ldr	r3, [r3, #20]
 800c25e:	4313      	orrs	r3, r2
 800c260:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	68fa      	ldr	r2, [r7, #12]
 800c266:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	689a      	ldr	r2, [r3, #8]
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	681a      	ldr	r2, [r3, #0]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	4a12      	ldr	r2, [pc, #72]	@ (800c2c4 <TIM_Base_SetConfig+0xd4>)
 800c27c:	4293      	cmp	r3, r2
 800c27e:	d007      	beq.n	800c290 <TIM_Base_SetConfig+0xa0>
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	4a11      	ldr	r2, [pc, #68]	@ (800c2c8 <TIM_Base_SetConfig+0xd8>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d003      	beq.n	800c290 <TIM_Base_SetConfig+0xa0>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	4a10      	ldr	r2, [pc, #64]	@ (800c2cc <TIM_Base_SetConfig+0xdc>)
 800c28c:	4293      	cmp	r3, r2
 800c28e:	d103      	bne.n	800c298 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	691a      	ldr	r2, [r3, #16]
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2201      	movs	r2, #1
 800c29c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	691b      	ldr	r3, [r3, #16]
 800c2a2:	f003 0301 	and.w	r3, r3, #1
 800c2a6:	2b01      	cmp	r3, #1
 800c2a8:	d105      	bne.n	800c2b6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	691b      	ldr	r3, [r3, #16]
 800c2ae:	f023 0201 	bic.w	r2, r3, #1
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	611a      	str	r2, [r3, #16]
  }
}
 800c2b6:	bf00      	nop
 800c2b8:	3714      	adds	r7, #20
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c0:	4770      	bx	lr
 800c2c2:	bf00      	nop
 800c2c4:	40012c00 	.word	0x40012c00
 800c2c8:	40014400 	.word	0x40014400
 800c2cc:	40014800 	.word	0x40014800

0800c2d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b087      	sub	sp, #28
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	60f8      	str	r0, [r7, #12]
 800c2d8:	60b9      	str	r1, [r7, #8]
 800c2da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	6a1b      	ldr	r3, [r3, #32]
 800c2e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	6a1b      	ldr	r3, [r3, #32]
 800c2e6:	f023 0201 	bic.w	r2, r3, #1
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	699b      	ldr	r3, [r3, #24]
 800c2f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c2fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	011b      	lsls	r3, r3, #4
 800c300:	693a      	ldr	r2, [r7, #16]
 800c302:	4313      	orrs	r3, r2
 800c304:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	f023 030a 	bic.w	r3, r3, #10
 800c30c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c30e:	697a      	ldr	r2, [r7, #20]
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	4313      	orrs	r3, r2
 800c314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	693a      	ldr	r2, [r7, #16]
 800c31a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	697a      	ldr	r2, [r7, #20]
 800c320:	621a      	str	r2, [r3, #32]
}
 800c322:	bf00      	nop
 800c324:	371c      	adds	r7, #28
 800c326:	46bd      	mov	sp, r7
 800c328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32c:	4770      	bx	lr

0800c32e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c32e:	b480      	push	{r7}
 800c330:	b087      	sub	sp, #28
 800c332:	af00      	add	r7, sp, #0
 800c334:	60f8      	str	r0, [r7, #12]
 800c336:	60b9      	str	r1, [r7, #8]
 800c338:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	6a1b      	ldr	r3, [r3, #32]
 800c33e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	6a1b      	ldr	r3, [r3, #32]
 800c344:	f023 0210 	bic.w	r2, r3, #16
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	699b      	ldr	r3, [r3, #24]
 800c350:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c352:	693b      	ldr	r3, [r7, #16]
 800c354:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c358:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	031b      	lsls	r3, r3, #12
 800c35e:	693a      	ldr	r2, [r7, #16]
 800c360:	4313      	orrs	r3, r2
 800c362:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c364:	697b      	ldr	r3, [r7, #20]
 800c366:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c36a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	011b      	lsls	r3, r3, #4
 800c370:	697a      	ldr	r2, [r7, #20]
 800c372:	4313      	orrs	r3, r2
 800c374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	693a      	ldr	r2, [r7, #16]
 800c37a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	697a      	ldr	r2, [r7, #20]
 800c380:	621a      	str	r2, [r3, #32]
}
 800c382:	bf00      	nop
 800c384:	371c      	adds	r7, #28
 800c386:	46bd      	mov	sp, r7
 800c388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38c:	4770      	bx	lr

0800c38e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c38e:	b480      	push	{r7}
 800c390:	b085      	sub	sp, #20
 800c392:	af00      	add	r7, sp, #0
 800c394:	6078      	str	r0, [r7, #4]
 800c396:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	689b      	ldr	r3, [r3, #8]
 800c39c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800c3a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c3aa:	683a      	ldr	r2, [r7, #0]
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	4313      	orrs	r3, r2
 800c3b0:	f043 0307 	orr.w	r3, r3, #7
 800c3b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	68fa      	ldr	r2, [r7, #12]
 800c3ba:	609a      	str	r2, [r3, #8]
}
 800c3bc:	bf00      	nop
 800c3be:	3714      	adds	r7, #20
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c6:	4770      	bx	lr

0800c3c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b087      	sub	sp, #28
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	60f8      	str	r0, [r7, #12]
 800c3d0:	60b9      	str	r1, [r7, #8]
 800c3d2:	607a      	str	r2, [r7, #4]
 800c3d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	689b      	ldr	r3, [r3, #8]
 800c3da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c3e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	021a      	lsls	r2, r3, #8
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	431a      	orrs	r2, r3
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	4313      	orrs	r3, r2
 800c3f0:	697a      	ldr	r2, [r7, #20]
 800c3f2:	4313      	orrs	r3, r2
 800c3f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	697a      	ldr	r2, [r7, #20]
 800c3fa:	609a      	str	r2, [r3, #8]
}
 800c3fc:	bf00      	nop
 800c3fe:	371c      	adds	r7, #28
 800c400:	46bd      	mov	sp, r7
 800c402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c406:	4770      	bx	lr

0800c408 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c408:	b480      	push	{r7}
 800c40a:	b085      	sub	sp, #20
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c418:	2b01      	cmp	r3, #1
 800c41a:	d101      	bne.n	800c420 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c41c:	2302      	movs	r3, #2
 800c41e:	e04a      	b.n	800c4b6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2201      	movs	r2, #1
 800c424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2202      	movs	r2, #2
 800c42c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	685b      	ldr	r3, [r3, #4]
 800c436:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	689b      	ldr	r3, [r3, #8]
 800c43e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	4a1f      	ldr	r2, [pc, #124]	@ (800c4c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800c446:	4293      	cmp	r3, r2
 800c448:	d108      	bne.n	800c45c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c450:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	685b      	ldr	r3, [r3, #4]
 800c456:	68fa      	ldr	r2, [r7, #12]
 800c458:	4313      	orrs	r3, r2
 800c45a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c462:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	68fa      	ldr	r2, [r7, #12]
 800c46a:	4313      	orrs	r3, r2
 800c46c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	68fa      	ldr	r2, [r7, #12]
 800c474:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	4a12      	ldr	r2, [pc, #72]	@ (800c4c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800c47c:	4293      	cmp	r3, r2
 800c47e:	d004      	beq.n	800c48a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c488:	d10c      	bne.n	800c4a4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c490:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	689b      	ldr	r3, [r3, #8]
 800c496:	68ba      	ldr	r2, [r7, #8]
 800c498:	4313      	orrs	r3, r2
 800c49a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	68ba      	ldr	r2, [r7, #8]
 800c4a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c4b4:	2300      	movs	r3, #0
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3714      	adds	r7, #20
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c0:	4770      	bx	lr
 800c4c2:	bf00      	nop
 800c4c4:	40012c00 	.word	0x40012c00

0800c4c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b083      	sub	sp, #12
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c4d0:	bf00      	nop
 800c4d2:	370c      	adds	r7, #12
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr

0800c4dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b083      	sub	sp, #12
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c4e4:	bf00      	nop
 800c4e6:	370c      	adds	r7, #12
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr

0800c4f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b083      	sub	sp, #12
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c4f8:	bf00      	nop
 800c4fa:	370c      	adds	r7, #12
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c502:	4770      	bx	lr

0800c504 <LL_RCC_GetUSARTClockSource>:
{
 800c504:	b480      	push	{r7}
 800c506:	b083      	sub	sp, #12
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800c50c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c510:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	4013      	ands	r3, r2
}
 800c518:	4618      	mov	r0, r3
 800c51a:	370c      	adds	r7, #12
 800c51c:	46bd      	mov	sp, r7
 800c51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c522:	4770      	bx	lr

0800c524 <LL_RCC_GetLPUARTClockSource>:
{
 800c524:	b480      	push	{r7}
 800c526:	b083      	sub	sp, #12
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800c52c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c530:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	4013      	ands	r3, r2
}
 800c538:	4618      	mov	r0, r3
 800c53a:	370c      	adds	r7, #12
 800c53c:	46bd      	mov	sp, r7
 800c53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c542:	4770      	bx	lr

0800c544 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b082      	sub	sp, #8
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d101      	bne.n	800c556 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c552:	2301      	movs	r3, #1
 800c554:	e042      	b.n	800c5dc <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d106      	bne.n	800c56e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2200      	movs	r2, #0
 800c564:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f000 f83b 	bl	800c5e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2224      	movs	r2, #36	@ 0x24
 800c572:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	681a      	ldr	r2, [r3, #0]
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f022 0201 	bic.w	r2, r2, #1
 800c584:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d002      	beq.n	800c594 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f000 fae8 	bl	800cb64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f000 f8bd 	bl	800c714 <UART_SetConfig>
 800c59a:	4603      	mov	r3, r0
 800c59c:	2b01      	cmp	r3, #1
 800c59e:	d101      	bne.n	800c5a4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c5a0:	2301      	movs	r3, #1
 800c5a2:	e01b      	b.n	800c5dc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	685a      	ldr	r2, [r3, #4]
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c5b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	689a      	ldr	r2, [r3, #8]
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c5c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	681a      	ldr	r2, [r3, #0]
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f042 0201 	orr.w	r2, r2, #1
 800c5d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	f000 fb67 	bl	800cca8 <UART_CheckIdleState>
 800c5da:	4603      	mov	r3, r0
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	3708      	adds	r7, #8
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}

0800c5e4 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800c5e4:	b480      	push	{r7}
 800c5e6:	b083      	sub	sp, #12
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800c5ec:	bf00      	nop
 800c5ee:	370c      	adds	r7, #12
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f6:	4770      	bx	lr

0800c5f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b08a      	sub	sp, #40	@ 0x28
 800c5fc:	af02      	add	r7, sp, #8
 800c5fe:	60f8      	str	r0, [r7, #12]
 800c600:	60b9      	str	r1, [r7, #8]
 800c602:	603b      	str	r3, [r7, #0]
 800c604:	4613      	mov	r3, r2
 800c606:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c60e:	2b20      	cmp	r3, #32
 800c610:	d17b      	bne.n	800c70a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d002      	beq.n	800c61e <HAL_UART_Transmit+0x26>
 800c618:	88fb      	ldrh	r3, [r7, #6]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d101      	bne.n	800c622 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c61e:	2301      	movs	r3, #1
 800c620:	e074      	b.n	800c70c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	2200      	movs	r2, #0
 800c626:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	2221      	movs	r2, #33	@ 0x21
 800c62e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c632:	f7f8 fbe3 	bl	8004dfc <HAL_GetTick>
 800c636:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	88fa      	ldrh	r2, [r7, #6]
 800c63c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	88fa      	ldrh	r2, [r7, #6]
 800c644:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	689b      	ldr	r3, [r3, #8]
 800c64c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c650:	d108      	bne.n	800c664 <HAL_UART_Transmit+0x6c>
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	691b      	ldr	r3, [r3, #16]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d104      	bne.n	800c664 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c65a:	2300      	movs	r3, #0
 800c65c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	61bb      	str	r3, [r7, #24]
 800c662:	e003      	b.n	800c66c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c668:	2300      	movs	r3, #0
 800c66a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c66c:	e030      	b.n	800c6d0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	9300      	str	r3, [sp, #0]
 800c672:	697b      	ldr	r3, [r7, #20]
 800c674:	2200      	movs	r2, #0
 800c676:	2180      	movs	r1, #128	@ 0x80
 800c678:	68f8      	ldr	r0, [r7, #12]
 800c67a:	f000 fbbf 	bl	800cdfc <UART_WaitOnFlagUntilTimeout>
 800c67e:	4603      	mov	r3, r0
 800c680:	2b00      	cmp	r3, #0
 800c682:	d005      	beq.n	800c690 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	2220      	movs	r2, #32
 800c688:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800c68c:	2303      	movs	r3, #3
 800c68e:	e03d      	b.n	800c70c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c690:	69fb      	ldr	r3, [r7, #28]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d10b      	bne.n	800c6ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c696:	69bb      	ldr	r3, [r7, #24]
 800c698:	881b      	ldrh	r3, [r3, #0]
 800c69a:	461a      	mov	r2, r3
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c6a4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c6a6:	69bb      	ldr	r3, [r7, #24]
 800c6a8:	3302      	adds	r3, #2
 800c6aa:	61bb      	str	r3, [r7, #24]
 800c6ac:	e007      	b.n	800c6be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c6ae:	69fb      	ldr	r3, [r7, #28]
 800c6b0:	781a      	ldrb	r2, [r3, #0]
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c6b8:	69fb      	ldr	r3, [r7, #28]
 800c6ba:	3301      	adds	r3, #1
 800c6bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c6c4:	b29b      	uxth	r3, r3
 800c6c6:	3b01      	subs	r3, #1
 800c6c8:	b29a      	uxth	r2, r3
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c6d6:	b29b      	uxth	r3, r3
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d1c8      	bne.n	800c66e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	9300      	str	r3, [sp, #0]
 800c6e0:	697b      	ldr	r3, [r7, #20]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	2140      	movs	r1, #64	@ 0x40
 800c6e6:	68f8      	ldr	r0, [r7, #12]
 800c6e8:	f000 fb88 	bl	800cdfc <UART_WaitOnFlagUntilTimeout>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d005      	beq.n	800c6fe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	2220      	movs	r2, #32
 800c6f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800c6fa:	2303      	movs	r3, #3
 800c6fc:	e006      	b.n	800c70c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	2220      	movs	r2, #32
 800c702:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c706:	2300      	movs	r3, #0
 800c708:	e000      	b.n	800c70c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c70a:	2302      	movs	r3, #2
  }
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	3720      	adds	r7, #32
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}

0800c714 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c718:	b08c      	sub	sp, #48	@ 0x30
 800c71a:	af00      	add	r7, sp, #0
 800c71c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c71e:	2300      	movs	r3, #0
 800c720:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	689a      	ldr	r2, [r3, #8]
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	691b      	ldr	r3, [r3, #16]
 800c72c:	431a      	orrs	r2, r3
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	695b      	ldr	r3, [r3, #20]
 800c732:	431a      	orrs	r2, r3
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	69db      	ldr	r3, [r3, #28]
 800c738:	4313      	orrs	r3, r2
 800c73a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	681a      	ldr	r2, [r3, #0]
 800c742:	4baf      	ldr	r3, [pc, #700]	@ (800ca00 <UART_SetConfig+0x2ec>)
 800c744:	4013      	ands	r3, r2
 800c746:	697a      	ldr	r2, [r7, #20]
 800c748:	6812      	ldr	r2, [r2, #0]
 800c74a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c74c:	430b      	orrs	r3, r1
 800c74e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	685b      	ldr	r3, [r3, #4]
 800c756:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	68da      	ldr	r2, [r3, #12]
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	430a      	orrs	r2, r1
 800c764:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	699b      	ldr	r3, [r3, #24]
 800c76a:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c76c:	697b      	ldr	r3, [r7, #20]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	4aa4      	ldr	r2, [pc, #656]	@ (800ca04 <UART_SetConfig+0x2f0>)
 800c772:	4293      	cmp	r3, r2
 800c774:	d004      	beq.n	800c780 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	6a1b      	ldr	r3, [r3, #32]
 800c77a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c77c:	4313      	orrs	r3, r2
 800c77e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c780:	697b      	ldr	r3, [r7, #20]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	689b      	ldr	r3, [r3, #8]
 800c786:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800c78a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800c78e:	697a      	ldr	r2, [r7, #20]
 800c790:	6812      	ldr	r2, [r2, #0]
 800c792:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c794:	430b      	orrs	r3, r1
 800c796:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c79e:	f023 010f 	bic.w	r1, r3, #15
 800c7a2:	697b      	ldr	r3, [r7, #20]
 800c7a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	430a      	orrs	r2, r1
 800c7ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c7ae:	697b      	ldr	r3, [r7, #20]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	4a95      	ldr	r2, [pc, #596]	@ (800ca08 <UART_SetConfig+0x2f4>)
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	d125      	bne.n	800c804 <UART_SetConfig+0xf0>
 800c7b8:	2003      	movs	r0, #3
 800c7ba:	f7ff fea3 	bl	800c504 <LL_RCC_GetUSARTClockSource>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	2b03      	cmp	r3, #3
 800c7c2:	d81b      	bhi.n	800c7fc <UART_SetConfig+0xe8>
 800c7c4:	a201      	add	r2, pc, #4	@ (adr r2, 800c7cc <UART_SetConfig+0xb8>)
 800c7c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7ca:	bf00      	nop
 800c7cc:	0800c7dd 	.word	0x0800c7dd
 800c7d0:	0800c7ed 	.word	0x0800c7ed
 800c7d4:	0800c7e5 	.word	0x0800c7e5
 800c7d8:	0800c7f5 	.word	0x0800c7f5
 800c7dc:	2301      	movs	r3, #1
 800c7de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c7e2:	e042      	b.n	800c86a <UART_SetConfig+0x156>
 800c7e4:	2302      	movs	r3, #2
 800c7e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c7ea:	e03e      	b.n	800c86a <UART_SetConfig+0x156>
 800c7ec:	2304      	movs	r3, #4
 800c7ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c7f2:	e03a      	b.n	800c86a <UART_SetConfig+0x156>
 800c7f4:	2308      	movs	r3, #8
 800c7f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c7fa:	e036      	b.n	800c86a <UART_SetConfig+0x156>
 800c7fc:	2310      	movs	r3, #16
 800c7fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c802:	e032      	b.n	800c86a <UART_SetConfig+0x156>
 800c804:	697b      	ldr	r3, [r7, #20]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	4a7e      	ldr	r2, [pc, #504]	@ (800ca04 <UART_SetConfig+0x2f0>)
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d12a      	bne.n	800c864 <UART_SetConfig+0x150>
 800c80e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800c812:	f7ff fe87 	bl	800c524 <LL_RCC_GetLPUARTClockSource>
 800c816:	4603      	mov	r3, r0
 800c818:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c81c:	d01a      	beq.n	800c854 <UART_SetConfig+0x140>
 800c81e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c822:	d81b      	bhi.n	800c85c <UART_SetConfig+0x148>
 800c824:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c828:	d00c      	beq.n	800c844 <UART_SetConfig+0x130>
 800c82a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c82e:	d815      	bhi.n	800c85c <UART_SetConfig+0x148>
 800c830:	2b00      	cmp	r3, #0
 800c832:	d003      	beq.n	800c83c <UART_SetConfig+0x128>
 800c834:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c838:	d008      	beq.n	800c84c <UART_SetConfig+0x138>
 800c83a:	e00f      	b.n	800c85c <UART_SetConfig+0x148>
 800c83c:	2300      	movs	r3, #0
 800c83e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c842:	e012      	b.n	800c86a <UART_SetConfig+0x156>
 800c844:	2302      	movs	r3, #2
 800c846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c84a:	e00e      	b.n	800c86a <UART_SetConfig+0x156>
 800c84c:	2304      	movs	r3, #4
 800c84e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c852:	e00a      	b.n	800c86a <UART_SetConfig+0x156>
 800c854:	2308      	movs	r3, #8
 800c856:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c85a:	e006      	b.n	800c86a <UART_SetConfig+0x156>
 800c85c:	2310      	movs	r3, #16
 800c85e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c862:	e002      	b.n	800c86a <UART_SetConfig+0x156>
 800c864:	2310      	movs	r3, #16
 800c866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	4a65      	ldr	r2, [pc, #404]	@ (800ca04 <UART_SetConfig+0x2f0>)
 800c870:	4293      	cmp	r3, r2
 800c872:	f040 8097 	bne.w	800c9a4 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c876:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c87a:	2b08      	cmp	r3, #8
 800c87c:	d823      	bhi.n	800c8c6 <UART_SetConfig+0x1b2>
 800c87e:	a201      	add	r2, pc, #4	@ (adr r2, 800c884 <UART_SetConfig+0x170>)
 800c880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c884:	0800c8a9 	.word	0x0800c8a9
 800c888:	0800c8c7 	.word	0x0800c8c7
 800c88c:	0800c8b1 	.word	0x0800c8b1
 800c890:	0800c8c7 	.word	0x0800c8c7
 800c894:	0800c8b7 	.word	0x0800c8b7
 800c898:	0800c8c7 	.word	0x0800c8c7
 800c89c:	0800c8c7 	.word	0x0800c8c7
 800c8a0:	0800c8c7 	.word	0x0800c8c7
 800c8a4:	0800c8bf 	.word	0x0800c8bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c8a8:	f7fe fd00 	bl	800b2ac <HAL_RCC_GetPCLK1Freq>
 800c8ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c8ae:	e010      	b.n	800c8d2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c8b0:	4b56      	ldr	r3, [pc, #344]	@ (800ca0c <UART_SetConfig+0x2f8>)
 800c8b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c8b4:	e00d      	b.n	800c8d2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c8b6:	f7fe fc79 	bl	800b1ac <HAL_RCC_GetSysClockFreq>
 800c8ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c8bc:	e009      	b.n	800c8d2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c8be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c8c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c8c4:	e005      	b.n	800c8d2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c8d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c8d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	f000 812b 	beq.w	800cb30 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c8da:	697b      	ldr	r3, [r7, #20]
 800c8dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8de:	4a4c      	ldr	r2, [pc, #304]	@ (800ca10 <UART_SetConfig+0x2fc>)
 800c8e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8e4:	461a      	mov	r2, r3
 800c8e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c8ec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	685a      	ldr	r2, [r3, #4]
 800c8f2:	4613      	mov	r3, r2
 800c8f4:	005b      	lsls	r3, r3, #1
 800c8f6:	4413      	add	r3, r2
 800c8f8:	69ba      	ldr	r2, [r7, #24]
 800c8fa:	429a      	cmp	r2, r3
 800c8fc:	d305      	bcc.n	800c90a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c8fe:	697b      	ldr	r3, [r7, #20]
 800c900:	685b      	ldr	r3, [r3, #4]
 800c902:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c904:	69ba      	ldr	r2, [r7, #24]
 800c906:	429a      	cmp	r2, r3
 800c908:	d903      	bls.n	800c912 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800c90a:	2301      	movs	r3, #1
 800c90c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c910:	e10e      	b.n	800cb30 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c914:	2200      	movs	r2, #0
 800c916:	60bb      	str	r3, [r7, #8]
 800c918:	60fa      	str	r2, [r7, #12]
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c91e:	4a3c      	ldr	r2, [pc, #240]	@ (800ca10 <UART_SetConfig+0x2fc>)
 800c920:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c924:	b29b      	uxth	r3, r3
 800c926:	2200      	movs	r2, #0
 800c928:	603b      	str	r3, [r7, #0]
 800c92a:	607a      	str	r2, [r7, #4]
 800c92c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c930:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c934:	f7f4 f910 	bl	8000b58 <__aeabi_uldivmod>
 800c938:	4602      	mov	r2, r0
 800c93a:	460b      	mov	r3, r1
 800c93c:	4610      	mov	r0, r2
 800c93e:	4619      	mov	r1, r3
 800c940:	f04f 0200 	mov.w	r2, #0
 800c944:	f04f 0300 	mov.w	r3, #0
 800c948:	020b      	lsls	r3, r1, #8
 800c94a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c94e:	0202      	lsls	r2, r0, #8
 800c950:	6979      	ldr	r1, [r7, #20]
 800c952:	6849      	ldr	r1, [r1, #4]
 800c954:	0849      	lsrs	r1, r1, #1
 800c956:	2000      	movs	r0, #0
 800c958:	460c      	mov	r4, r1
 800c95a:	4605      	mov	r5, r0
 800c95c:	eb12 0804 	adds.w	r8, r2, r4
 800c960:	eb43 0905 	adc.w	r9, r3, r5
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	685b      	ldr	r3, [r3, #4]
 800c968:	2200      	movs	r2, #0
 800c96a:	469a      	mov	sl, r3
 800c96c:	4693      	mov	fp, r2
 800c96e:	4652      	mov	r2, sl
 800c970:	465b      	mov	r3, fp
 800c972:	4640      	mov	r0, r8
 800c974:	4649      	mov	r1, r9
 800c976:	f7f4 f8ef 	bl	8000b58 <__aeabi_uldivmod>
 800c97a:	4602      	mov	r2, r0
 800c97c:	460b      	mov	r3, r1
 800c97e:	4613      	mov	r3, r2
 800c980:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c982:	6a3b      	ldr	r3, [r7, #32]
 800c984:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c988:	d308      	bcc.n	800c99c <UART_SetConfig+0x288>
 800c98a:	6a3b      	ldr	r3, [r7, #32]
 800c98c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c990:	d204      	bcs.n	800c99c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	6a3a      	ldr	r2, [r7, #32]
 800c998:	60da      	str	r2, [r3, #12]
 800c99a:	e0c9      	b.n	800cb30 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800c99c:	2301      	movs	r3, #1
 800c99e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c9a2:	e0c5      	b.n	800cb30 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	69db      	ldr	r3, [r3, #28]
 800c9a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c9ac:	d16d      	bne.n	800ca8a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800c9ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c9b2:	3b01      	subs	r3, #1
 800c9b4:	2b07      	cmp	r3, #7
 800c9b6:	d82d      	bhi.n	800ca14 <UART_SetConfig+0x300>
 800c9b8:	a201      	add	r2, pc, #4	@ (adr r2, 800c9c0 <UART_SetConfig+0x2ac>)
 800c9ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9be:	bf00      	nop
 800c9c0:	0800c9e1 	.word	0x0800c9e1
 800c9c4:	0800c9e9 	.word	0x0800c9e9
 800c9c8:	0800ca15 	.word	0x0800ca15
 800c9cc:	0800c9ef 	.word	0x0800c9ef
 800c9d0:	0800ca15 	.word	0x0800ca15
 800c9d4:	0800ca15 	.word	0x0800ca15
 800c9d8:	0800ca15 	.word	0x0800ca15
 800c9dc:	0800c9f7 	.word	0x0800c9f7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c9e0:	f7fe fc7a 	bl	800b2d8 <HAL_RCC_GetPCLK2Freq>
 800c9e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c9e6:	e01b      	b.n	800ca20 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c9e8:	4b08      	ldr	r3, [pc, #32]	@ (800ca0c <UART_SetConfig+0x2f8>)
 800c9ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c9ec:	e018      	b.n	800ca20 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c9ee:	f7fe fbdd 	bl	800b1ac <HAL_RCC_GetSysClockFreq>
 800c9f2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c9f4:	e014      	b.n	800ca20 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c9f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c9fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c9fc:	e010      	b.n	800ca20 <UART_SetConfig+0x30c>
 800c9fe:	bf00      	nop
 800ca00:	cfff69f3 	.word	0xcfff69f3
 800ca04:	40008000 	.word	0x40008000
 800ca08:	40013800 	.word	0x40013800
 800ca0c:	00f42400 	.word	0x00f42400
 800ca10:	08014b54 	.word	0x08014b54
      default:
        pclk = 0U;
 800ca14:	2300      	movs	r3, #0
 800ca16:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ca18:	2301      	movs	r3, #1
 800ca1a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ca1e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ca20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	f000 8084 	beq.w	800cb30 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca28:	697b      	ldr	r3, [r7, #20]
 800ca2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca2c:	4a4b      	ldr	r2, [pc, #300]	@ (800cb5c <UART_SetConfig+0x448>)
 800ca2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca32:	461a      	mov	r2, r3
 800ca34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca36:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca3a:	005a      	lsls	r2, r3, #1
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	685b      	ldr	r3, [r3, #4]
 800ca40:	085b      	lsrs	r3, r3, #1
 800ca42:	441a      	add	r2, r3
 800ca44:	697b      	ldr	r3, [r7, #20]
 800ca46:	685b      	ldr	r3, [r3, #4]
 800ca48:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca4c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ca4e:	6a3b      	ldr	r3, [r7, #32]
 800ca50:	2b0f      	cmp	r3, #15
 800ca52:	d916      	bls.n	800ca82 <UART_SetConfig+0x36e>
 800ca54:	6a3b      	ldr	r3, [r7, #32]
 800ca56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ca5a:	d212      	bcs.n	800ca82 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ca5c:	6a3b      	ldr	r3, [r7, #32]
 800ca5e:	b29b      	uxth	r3, r3
 800ca60:	f023 030f 	bic.w	r3, r3, #15
 800ca64:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ca66:	6a3b      	ldr	r3, [r7, #32]
 800ca68:	085b      	lsrs	r3, r3, #1
 800ca6a:	b29b      	uxth	r3, r3
 800ca6c:	f003 0307 	and.w	r3, r3, #7
 800ca70:	b29a      	uxth	r2, r3
 800ca72:	8bfb      	ldrh	r3, [r7, #30]
 800ca74:	4313      	orrs	r3, r2
 800ca76:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	8bfa      	ldrh	r2, [r7, #30]
 800ca7e:	60da      	str	r2, [r3, #12]
 800ca80:	e056      	b.n	800cb30 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800ca82:	2301      	movs	r3, #1
 800ca84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ca88:	e052      	b.n	800cb30 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ca8a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ca8e:	3b01      	subs	r3, #1
 800ca90:	2b07      	cmp	r3, #7
 800ca92:	d822      	bhi.n	800cada <UART_SetConfig+0x3c6>
 800ca94:	a201      	add	r2, pc, #4	@ (adr r2, 800ca9c <UART_SetConfig+0x388>)
 800ca96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca9a:	bf00      	nop
 800ca9c:	0800cabd 	.word	0x0800cabd
 800caa0:	0800cac5 	.word	0x0800cac5
 800caa4:	0800cadb 	.word	0x0800cadb
 800caa8:	0800cacb 	.word	0x0800cacb
 800caac:	0800cadb 	.word	0x0800cadb
 800cab0:	0800cadb 	.word	0x0800cadb
 800cab4:	0800cadb 	.word	0x0800cadb
 800cab8:	0800cad3 	.word	0x0800cad3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cabc:	f7fe fc0c 	bl	800b2d8 <HAL_RCC_GetPCLK2Freq>
 800cac0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800cac2:	e010      	b.n	800cae6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cac4:	4b26      	ldr	r3, [pc, #152]	@ (800cb60 <UART_SetConfig+0x44c>)
 800cac6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800cac8:	e00d      	b.n	800cae6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800caca:	f7fe fb6f 	bl	800b1ac <HAL_RCC_GetSysClockFreq>
 800cace:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800cad0:	e009      	b.n	800cae6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cad2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cad6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800cad8:	e005      	b.n	800cae6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800cada:	2300      	movs	r3, #0
 800cadc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800cade:	2301      	movs	r3, #1
 800cae0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800cae4:	bf00      	nop
    }

    if (pclk != 0U)
 800cae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d021      	beq.n	800cb30 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800caec:	697b      	ldr	r3, [r7, #20]
 800caee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800caf0:	4a1a      	ldr	r2, [pc, #104]	@ (800cb5c <UART_SetConfig+0x448>)
 800caf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800caf6:	461a      	mov	r2, r3
 800caf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cafa:	fbb3 f2f2 	udiv	r2, r3, r2
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	685b      	ldr	r3, [r3, #4]
 800cb02:	085b      	lsrs	r3, r3, #1
 800cb04:	441a      	add	r2, r3
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	685b      	ldr	r3, [r3, #4]
 800cb0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb0e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cb10:	6a3b      	ldr	r3, [r7, #32]
 800cb12:	2b0f      	cmp	r3, #15
 800cb14:	d909      	bls.n	800cb2a <UART_SetConfig+0x416>
 800cb16:	6a3b      	ldr	r3, [r7, #32]
 800cb18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cb1c:	d205      	bcs.n	800cb2a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cb1e:	6a3b      	ldr	r3, [r7, #32]
 800cb20:	b29a      	uxth	r2, r3
 800cb22:	697b      	ldr	r3, [r7, #20]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	60da      	str	r2, [r3, #12]
 800cb28:	e002      	b.n	800cb30 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cb30:	697b      	ldr	r3, [r7, #20]
 800cb32:	2201      	movs	r2, #1
 800cb34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	2201      	movs	r2, #1
 800cb3c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cb40:	697b      	ldr	r3, [r7, #20]
 800cb42:	2200      	movs	r2, #0
 800cb44:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	2200      	movs	r2, #0
 800cb4a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800cb4c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800cb50:	4618      	mov	r0, r3
 800cb52:	3730      	adds	r7, #48	@ 0x30
 800cb54:	46bd      	mov	sp, r7
 800cb56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cb5a:	bf00      	nop
 800cb5c:	08014b54 	.word	0x08014b54
 800cb60:	00f42400 	.word	0x00f42400

0800cb64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cb64:	b480      	push	{r7}
 800cb66:	b083      	sub	sp, #12
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb70:	f003 0308 	and.w	r3, r3, #8
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d00a      	beq.n	800cb8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	685b      	ldr	r3, [r3, #4]
 800cb7e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	430a      	orrs	r2, r1
 800cb8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb92:	f003 0301 	and.w	r3, r3, #1
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d00a      	beq.n	800cbb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	685b      	ldr	r3, [r3, #4]
 800cba0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	430a      	orrs	r2, r1
 800cbae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbb4:	f003 0302 	and.w	r3, r3, #2
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d00a      	beq.n	800cbd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	685b      	ldr	r3, [r3, #4]
 800cbc2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	430a      	orrs	r2, r1
 800cbd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbd6:	f003 0304 	and.w	r3, r3, #4
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d00a      	beq.n	800cbf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	685b      	ldr	r3, [r3, #4]
 800cbe4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	430a      	orrs	r2, r1
 800cbf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbf8:	f003 0310 	and.w	r3, r3, #16
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d00a      	beq.n	800cc16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	689b      	ldr	r3, [r3, #8]
 800cc06:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	430a      	orrs	r2, r1
 800cc14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc1a:	f003 0320 	and.w	r3, r3, #32
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d00a      	beq.n	800cc38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	689b      	ldr	r3, [r3, #8]
 800cc28:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	430a      	orrs	r2, r1
 800cc36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d01a      	beq.n	800cc7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	685b      	ldr	r3, [r3, #4]
 800cc4a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	430a      	orrs	r2, r1
 800cc58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cc62:	d10a      	bne.n	800cc7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	685b      	ldr	r3, [r3, #4]
 800cc6a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	430a      	orrs	r2, r1
 800cc78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d00a      	beq.n	800cc9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	685b      	ldr	r3, [r3, #4]
 800cc8c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	430a      	orrs	r2, r1
 800cc9a:	605a      	str	r2, [r3, #4]
  }
}
 800cc9c:	bf00      	nop
 800cc9e:	370c      	adds	r7, #12
 800cca0:	46bd      	mov	sp, r7
 800cca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca6:	4770      	bx	lr

0800cca8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b098      	sub	sp, #96	@ 0x60
 800ccac:	af02      	add	r7, sp, #8
 800ccae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ccb8:	f7f8 f8a0 	bl	8004dfc <HAL_GetTick>
 800ccbc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f003 0308 	and.w	r3, r3, #8
 800ccc8:	2b08      	cmp	r3, #8
 800ccca:	d12f      	bne.n	800cd2c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cccc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ccd0:	9300      	str	r3, [sp, #0]
 800ccd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f000 f88e 	bl	800cdfc <UART_WaitOnFlagUntilTimeout>
 800cce0:	4603      	mov	r3, r0
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d022      	beq.n	800cd2c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccee:	e853 3f00 	ldrex	r3, [r3]
 800ccf2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ccf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ccfa:	653b      	str	r3, [r7, #80]	@ 0x50
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	461a      	mov	r2, r3
 800cd02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd04:	647b      	str	r3, [r7, #68]	@ 0x44
 800cd06:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cd0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cd0c:	e841 2300 	strex	r3, r2, [r1]
 800cd10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cd12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d1e6      	bne.n	800cce6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2220      	movs	r2, #32
 800cd1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2200      	movs	r2, #0
 800cd24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cd28:	2303      	movs	r3, #3
 800cd2a:	e063      	b.n	800cdf4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	f003 0304 	and.w	r3, r3, #4
 800cd36:	2b04      	cmp	r3, #4
 800cd38:	d149      	bne.n	800cdce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cd3a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cd3e:	9300      	str	r3, [sp, #0]
 800cd40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd42:	2200      	movs	r2, #0
 800cd44:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f000 f857 	bl	800cdfc <UART_WaitOnFlagUntilTimeout>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d03c      	beq.n	800cdce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd5c:	e853 3f00 	ldrex	r3, [r3]
 800cd60:	623b      	str	r3, [r7, #32]
   return(result);
 800cd62:	6a3b      	ldr	r3, [r7, #32]
 800cd64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cd68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	461a      	mov	r2, r3
 800cd70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd72:	633b      	str	r3, [r7, #48]	@ 0x30
 800cd74:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd7a:	e841 2300 	strex	r3, r2, [r1]
 800cd7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cd80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d1e6      	bne.n	800cd54 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	3308      	adds	r3, #8
 800cd8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd8e:	693b      	ldr	r3, [r7, #16]
 800cd90:	e853 3f00 	ldrex	r3, [r3]
 800cd94:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	f023 0301 	bic.w	r3, r3, #1
 800cd9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	3308      	adds	r3, #8
 800cda4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cda6:	61fa      	str	r2, [r7, #28]
 800cda8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdaa:	69b9      	ldr	r1, [r7, #24]
 800cdac:	69fa      	ldr	r2, [r7, #28]
 800cdae:	e841 2300 	strex	r3, r2, [r1]
 800cdb2:	617b      	str	r3, [r7, #20]
   return(result);
 800cdb4:	697b      	ldr	r3, [r7, #20]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d1e5      	bne.n	800cd86 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2220      	movs	r2, #32
 800cdbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cdca:	2303      	movs	r3, #3
 800cdcc:	e012      	b.n	800cdf4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2220      	movs	r2, #32
 800cdd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2220      	movs	r2, #32
 800cdda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	2200      	movs	r2, #0
 800cde2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2200      	movs	r2, #0
 800cde8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2200      	movs	r2, #0
 800cdee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cdf2:	2300      	movs	r3, #0
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3758      	adds	r7, #88	@ 0x58
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}

0800cdfc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b084      	sub	sp, #16
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	60f8      	str	r0, [r7, #12]
 800ce04:	60b9      	str	r1, [r7, #8]
 800ce06:	603b      	str	r3, [r7, #0]
 800ce08:	4613      	mov	r3, r2
 800ce0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce0c:	e04f      	b.n	800ceae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ce0e:	69bb      	ldr	r3, [r7, #24]
 800ce10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce14:	d04b      	beq.n	800ceae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ce16:	f7f7 fff1 	bl	8004dfc <HAL_GetTick>
 800ce1a:	4602      	mov	r2, r0
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	1ad3      	subs	r3, r2, r3
 800ce20:	69ba      	ldr	r2, [r7, #24]
 800ce22:	429a      	cmp	r2, r3
 800ce24:	d302      	bcc.n	800ce2c <UART_WaitOnFlagUntilTimeout+0x30>
 800ce26:	69bb      	ldr	r3, [r7, #24]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d101      	bne.n	800ce30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ce2c:	2303      	movs	r3, #3
 800ce2e:	e04e      	b.n	800cece <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f003 0304 	and.w	r3, r3, #4
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d037      	beq.n	800ceae <UART_WaitOnFlagUntilTimeout+0xb2>
 800ce3e:	68bb      	ldr	r3, [r7, #8]
 800ce40:	2b80      	cmp	r3, #128	@ 0x80
 800ce42:	d034      	beq.n	800ceae <UART_WaitOnFlagUntilTimeout+0xb2>
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	2b40      	cmp	r3, #64	@ 0x40
 800ce48:	d031      	beq.n	800ceae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	69db      	ldr	r3, [r3, #28]
 800ce50:	f003 0308 	and.w	r3, r3, #8
 800ce54:	2b08      	cmp	r3, #8
 800ce56:	d110      	bne.n	800ce7a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	2208      	movs	r2, #8
 800ce5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ce60:	68f8      	ldr	r0, [r7, #12]
 800ce62:	f000 f838 	bl	800ced6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	2208      	movs	r2, #8
 800ce6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	2200      	movs	r2, #0
 800ce72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ce76:	2301      	movs	r3, #1
 800ce78:	e029      	b.n	800cece <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	69db      	ldr	r3, [r3, #28]
 800ce80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ce84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ce88:	d111      	bne.n	800ceae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ce92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ce94:	68f8      	ldr	r0, [r7, #12]
 800ce96:	f000 f81e 	bl	800ced6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	2220      	movs	r2, #32
 800ce9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	2200      	movs	r2, #0
 800cea6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ceaa:	2303      	movs	r3, #3
 800ceac:	e00f      	b.n	800cece <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	69da      	ldr	r2, [r3, #28]
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	4013      	ands	r3, r2
 800ceb8:	68ba      	ldr	r2, [r7, #8]
 800ceba:	429a      	cmp	r2, r3
 800cebc:	bf0c      	ite	eq
 800cebe:	2301      	moveq	r3, #1
 800cec0:	2300      	movne	r3, #0
 800cec2:	b2db      	uxtb	r3, r3
 800cec4:	461a      	mov	r2, r3
 800cec6:	79fb      	ldrb	r3, [r7, #7]
 800cec8:	429a      	cmp	r2, r3
 800ceca:	d0a0      	beq.n	800ce0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cecc:	2300      	movs	r3, #0
}
 800cece:	4618      	mov	r0, r3
 800ced0:	3710      	adds	r7, #16
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}

0800ced6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ced6:	b480      	push	{r7}
 800ced8:	b095      	sub	sp, #84	@ 0x54
 800ceda:	af00      	add	r7, sp, #0
 800cedc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cee6:	e853 3f00 	ldrex	r3, [r3]
 800ceea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ceec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	461a      	mov	r2, r3
 800cefa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cefc:	643b      	str	r3, [r7, #64]	@ 0x40
 800cefe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf00:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cf02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cf04:	e841 2300 	strex	r3, r2, [r1]
 800cf08:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cf0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d1e6      	bne.n	800cede <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	3308      	adds	r3, #8
 800cf16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf18:	6a3b      	ldr	r3, [r7, #32]
 800cf1a:	e853 3f00 	ldrex	r3, [r3]
 800cf1e:	61fb      	str	r3, [r7, #28]
   return(result);
 800cf20:	69fb      	ldr	r3, [r7, #28]
 800cf22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cf26:	f023 0301 	bic.w	r3, r3, #1
 800cf2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	3308      	adds	r3, #8
 800cf32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cf34:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cf36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cf3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cf3c:	e841 2300 	strex	r3, r2, [r1]
 800cf40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cf42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d1e3      	bne.n	800cf10 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf4c:	2b01      	cmp	r3, #1
 800cf4e:	d118      	bne.n	800cf82 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	e853 3f00 	ldrex	r3, [r3]
 800cf5c:	60bb      	str	r3, [r7, #8]
   return(result);
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	f023 0310 	bic.w	r3, r3, #16
 800cf64:	647b      	str	r3, [r7, #68]	@ 0x44
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	461a      	mov	r2, r3
 800cf6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf6e:	61bb      	str	r3, [r7, #24]
 800cf70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf72:	6979      	ldr	r1, [r7, #20]
 800cf74:	69ba      	ldr	r2, [r7, #24]
 800cf76:	e841 2300 	strex	r3, r2, [r1]
 800cf7a:	613b      	str	r3, [r7, #16]
   return(result);
 800cf7c:	693b      	ldr	r3, [r7, #16]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d1e6      	bne.n	800cf50 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2220      	movs	r2, #32
 800cf86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2200      	movs	r2, #0
 800cf94:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cf96:	bf00      	nop
 800cf98:	3754      	adds	r7, #84	@ 0x54
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa0:	4770      	bx	lr

0800cfa2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800cfa2:	b480      	push	{r7}
 800cfa4:	b085      	sub	sp, #20
 800cfa6:	af00      	add	r7, sp, #0
 800cfa8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2200      	movs	r2, #0
 800cfae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800cfb2:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800cfb6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	b29a      	uxth	r2, r3
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800cfc2:	2300      	movs	r3, #0
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	3714      	adds	r7, #20
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfce:	4770      	bx	lr

0800cfd0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800cfd0:	b480      	push	{r7}
 800cfd2:	b085      	sub	sp, #20
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800cfd8:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800cfdc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800cfe4:	b29a      	uxth	r2, r3
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	b29b      	uxth	r3, r3
 800cfea:	43db      	mvns	r3, r3
 800cfec:	b29b      	uxth	r3, r3
 800cfee:	4013      	ands	r3, r2
 800cff0:	b29a      	uxth	r2, r3
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800cff8:	2300      	movs	r3, #0
}
 800cffa:	4618      	mov	r0, r3
 800cffc:	3714      	adds	r7, #20
 800cffe:	46bd      	mov	sp, r7
 800d000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d004:	4770      	bx	lr

0800d006 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800d006:	b480      	push	{r7}
 800d008:	b085      	sub	sp, #20
 800d00a:	af00      	add	r7, sp, #0
 800d00c:	60f8      	str	r0, [r7, #12]
 800d00e:	1d3b      	adds	r3, r7, #4
 800d010:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	2201      	movs	r2, #1
 800d018:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	2200      	movs	r2, #0
 800d020:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	2200      	movs	r2, #0
 800d028:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	2200      	movs	r2, #0
 800d030:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800d034:	2300      	movs	r3, #0
}
 800d036:	4618      	mov	r0, r3
 800d038:	3714      	adds	r7, #20
 800d03a:	46bd      	mov	sp, r7
 800d03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d040:	4770      	bx	lr
	...

0800d044 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d044:	b480      	push	{r7}
 800d046:	b09d      	sub	sp, #116	@ 0x74
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
 800d04c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800d04e:	2300      	movs	r3, #0
 800d050:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800d054:	687a      	ldr	r2, [r7, #4]
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	781b      	ldrb	r3, [r3, #0]
 800d05a:	009b      	lsls	r3, r3, #2
 800d05c:	4413      	add	r3, r2
 800d05e:	881b      	ldrh	r3, [r3, #0]
 800d060:	b29b      	uxth	r3, r3
 800d062:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800d066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d06a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	78db      	ldrb	r3, [r3, #3]
 800d072:	2b03      	cmp	r3, #3
 800d074:	d81f      	bhi.n	800d0b6 <USB_ActivateEndpoint+0x72>
 800d076:	a201      	add	r2, pc, #4	@ (adr r2, 800d07c <USB_ActivateEndpoint+0x38>)
 800d078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d07c:	0800d08d 	.word	0x0800d08d
 800d080:	0800d0a9 	.word	0x0800d0a9
 800d084:	0800d0bf 	.word	0x0800d0bf
 800d088:	0800d09b 	.word	0x0800d09b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800d08c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d090:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d094:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800d098:	e012      	b.n	800d0c0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800d09a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d09e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800d0a2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800d0a6:	e00b      	b.n	800d0c0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800d0a8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d0ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d0b0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800d0b4:	e004      	b.n	800d0c0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800d0bc:	e000      	b.n	800d0c0 <USB_ActivateEndpoint+0x7c>
      break;
 800d0be:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800d0c0:	687a      	ldr	r2, [r7, #4]
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	781b      	ldrb	r3, [r3, #0]
 800d0c6:	009b      	lsls	r3, r3, #2
 800d0c8:	441a      	add	r2, r3
 800d0ca:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d0ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d0d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d0d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d0da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0de:	b29b      	uxth	r3, r3
 800d0e0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800d0e2:	687a      	ldr	r2, [r7, #4]
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	781b      	ldrb	r3, [r3, #0]
 800d0e8:	009b      	lsls	r3, r3, #2
 800d0ea:	4413      	add	r3, r2
 800d0ec:	881b      	ldrh	r3, [r3, #0]
 800d0ee:	b29b      	uxth	r3, r3
 800d0f0:	b21b      	sxth	r3, r3
 800d0f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d0f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d0fa:	b21a      	sxth	r2, r3
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	781b      	ldrb	r3, [r3, #0]
 800d100:	b21b      	sxth	r3, r3
 800d102:	4313      	orrs	r3, r2
 800d104:	b21b      	sxth	r3, r3
 800d106:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800d10a:	687a      	ldr	r2, [r7, #4]
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	781b      	ldrb	r3, [r3, #0]
 800d110:	009b      	lsls	r3, r3, #2
 800d112:	441a      	add	r2, r3
 800d114:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800d118:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d11c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d120:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d124:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d128:	b29b      	uxth	r3, r3
 800d12a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	7b1b      	ldrb	r3, [r3, #12]
 800d130:	2b00      	cmp	r3, #0
 800d132:	f040 8178 	bne.w	800d426 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	785b      	ldrb	r3, [r3, #1]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	f000 8084 	beq.w	800d248 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	61bb      	str	r3, [r7, #24]
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d14a:	b29b      	uxth	r3, r3
 800d14c:	461a      	mov	r2, r3
 800d14e:	69bb      	ldr	r3, [r7, #24]
 800d150:	4413      	add	r3, r2
 800d152:	61bb      	str	r3, [r7, #24]
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	00da      	lsls	r2, r3, #3
 800d15a:	69bb      	ldr	r3, [r7, #24]
 800d15c:	4413      	add	r3, r2
 800d15e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d162:	617b      	str	r3, [r7, #20]
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	88db      	ldrh	r3, [r3, #6]
 800d168:	085b      	lsrs	r3, r3, #1
 800d16a:	b29b      	uxth	r3, r3
 800d16c:	005b      	lsls	r3, r3, #1
 800d16e:	b29a      	uxth	r2, r3
 800d170:	697b      	ldr	r3, [r7, #20]
 800d172:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d174:	687a      	ldr	r2, [r7, #4]
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	781b      	ldrb	r3, [r3, #0]
 800d17a:	009b      	lsls	r3, r3, #2
 800d17c:	4413      	add	r3, r2
 800d17e:	881b      	ldrh	r3, [r3, #0]
 800d180:	827b      	strh	r3, [r7, #18]
 800d182:	8a7b      	ldrh	r3, [r7, #18]
 800d184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d01b      	beq.n	800d1c4 <USB_ActivateEndpoint+0x180>
 800d18c:	687a      	ldr	r2, [r7, #4]
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	781b      	ldrb	r3, [r3, #0]
 800d192:	009b      	lsls	r3, r3, #2
 800d194:	4413      	add	r3, r2
 800d196:	881b      	ldrh	r3, [r3, #0]
 800d198:	b29b      	uxth	r3, r3
 800d19a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d19e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d1a2:	823b      	strh	r3, [r7, #16]
 800d1a4:	687a      	ldr	r2, [r7, #4]
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	781b      	ldrb	r3, [r3, #0]
 800d1aa:	009b      	lsls	r3, r3, #2
 800d1ac:	441a      	add	r2, r3
 800d1ae:	8a3b      	ldrh	r3, [r7, #16]
 800d1b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d1b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d1b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d1bc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d1c0:	b29b      	uxth	r3, r3
 800d1c2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	78db      	ldrb	r3, [r3, #3]
 800d1c8:	2b01      	cmp	r3, #1
 800d1ca:	d020      	beq.n	800d20e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d1cc:	687a      	ldr	r2, [r7, #4]
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	781b      	ldrb	r3, [r3, #0]
 800d1d2:	009b      	lsls	r3, r3, #2
 800d1d4:	4413      	add	r3, r2
 800d1d6:	881b      	ldrh	r3, [r3, #0]
 800d1d8:	b29b      	uxth	r3, r3
 800d1da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d1de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d1e2:	81bb      	strh	r3, [r7, #12]
 800d1e4:	89bb      	ldrh	r3, [r7, #12]
 800d1e6:	f083 0320 	eor.w	r3, r3, #32
 800d1ea:	81bb      	strh	r3, [r7, #12]
 800d1ec:	687a      	ldr	r2, [r7, #4]
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	781b      	ldrb	r3, [r3, #0]
 800d1f2:	009b      	lsls	r3, r3, #2
 800d1f4:	441a      	add	r2, r3
 800d1f6:	89bb      	ldrh	r3, [r7, #12]
 800d1f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d1fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d200:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d204:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d208:	b29b      	uxth	r3, r3
 800d20a:	8013      	strh	r3, [r2, #0]
 800d20c:	e2d5      	b.n	800d7ba <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d20e:	687a      	ldr	r2, [r7, #4]
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	781b      	ldrb	r3, [r3, #0]
 800d214:	009b      	lsls	r3, r3, #2
 800d216:	4413      	add	r3, r2
 800d218:	881b      	ldrh	r3, [r3, #0]
 800d21a:	b29b      	uxth	r3, r3
 800d21c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d220:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d224:	81fb      	strh	r3, [r7, #14]
 800d226:	687a      	ldr	r2, [r7, #4]
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	781b      	ldrb	r3, [r3, #0]
 800d22c:	009b      	lsls	r3, r3, #2
 800d22e:	441a      	add	r2, r3
 800d230:	89fb      	ldrh	r3, [r7, #14]
 800d232:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d236:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d23a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d23e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d242:	b29b      	uxth	r3, r3
 800d244:	8013      	strh	r3, [r2, #0]
 800d246:	e2b8      	b.n	800d7ba <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	633b      	str	r3, [r7, #48]	@ 0x30
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d252:	b29b      	uxth	r3, r3
 800d254:	461a      	mov	r2, r3
 800d256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d258:	4413      	add	r3, r2
 800d25a:	633b      	str	r3, [r7, #48]	@ 0x30
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	781b      	ldrb	r3, [r3, #0]
 800d260:	00da      	lsls	r2, r3, #3
 800d262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d264:	4413      	add	r3, r2
 800d266:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800d26a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	88db      	ldrh	r3, [r3, #6]
 800d270:	085b      	lsrs	r3, r3, #1
 800d272:	b29b      	uxth	r3, r3
 800d274:	005b      	lsls	r3, r3, #1
 800d276:	b29a      	uxth	r2, r3
 800d278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d27a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d286:	b29b      	uxth	r3, r3
 800d288:	461a      	mov	r2, r3
 800d28a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d28c:	4413      	add	r3, r2
 800d28e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	781b      	ldrb	r3, [r3, #0]
 800d294:	00da      	lsls	r2, r3, #3
 800d296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d298:	4413      	add	r3, r2
 800d29a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d29e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d2a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2a2:	881b      	ldrh	r3, [r3, #0]
 800d2a4:	b29b      	uxth	r3, r3
 800d2a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d2aa:	b29a      	uxth	r2, r3
 800d2ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ae:	801a      	strh	r2, [r3, #0]
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	691b      	ldr	r3, [r3, #16]
 800d2b4:	2b3e      	cmp	r3, #62	@ 0x3e
 800d2b6:	d91d      	bls.n	800d2f4 <USB_ActivateEndpoint+0x2b0>
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	691b      	ldr	r3, [r3, #16]
 800d2bc:	095b      	lsrs	r3, r3, #5
 800d2be:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	691b      	ldr	r3, [r3, #16]
 800d2c4:	f003 031f 	and.w	r3, r3, #31
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d102      	bne.n	800d2d2 <USB_ActivateEndpoint+0x28e>
 800d2cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d2ce:	3b01      	subs	r3, #1
 800d2d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2d4:	881b      	ldrh	r3, [r3, #0]
 800d2d6:	b29a      	uxth	r2, r3
 800d2d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d2da:	b29b      	uxth	r3, r3
 800d2dc:	029b      	lsls	r3, r3, #10
 800d2de:	b29b      	uxth	r3, r3
 800d2e0:	4313      	orrs	r3, r2
 800d2e2:	b29b      	uxth	r3, r3
 800d2e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d2e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d2ec:	b29a      	uxth	r2, r3
 800d2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2f0:	801a      	strh	r2, [r3, #0]
 800d2f2:	e026      	b.n	800d342 <USB_ActivateEndpoint+0x2fe>
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	691b      	ldr	r3, [r3, #16]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d10a      	bne.n	800d312 <USB_ActivateEndpoint+0x2ce>
 800d2fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2fe:	881b      	ldrh	r3, [r3, #0]
 800d300:	b29b      	uxth	r3, r3
 800d302:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d306:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d30a:	b29a      	uxth	r2, r3
 800d30c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d30e:	801a      	strh	r2, [r3, #0]
 800d310:	e017      	b.n	800d342 <USB_ActivateEndpoint+0x2fe>
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	691b      	ldr	r3, [r3, #16]
 800d316:	085b      	lsrs	r3, r3, #1
 800d318:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	691b      	ldr	r3, [r3, #16]
 800d31e:	f003 0301 	and.w	r3, r3, #1
 800d322:	2b00      	cmp	r3, #0
 800d324:	d002      	beq.n	800d32c <USB_ActivateEndpoint+0x2e8>
 800d326:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d328:	3301      	adds	r3, #1
 800d32a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d32c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d32e:	881b      	ldrh	r3, [r3, #0]
 800d330:	b29a      	uxth	r2, r3
 800d332:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d334:	b29b      	uxth	r3, r3
 800d336:	029b      	lsls	r3, r3, #10
 800d338:	b29b      	uxth	r3, r3
 800d33a:	4313      	orrs	r3, r2
 800d33c:	b29a      	uxth	r2, r3
 800d33e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d340:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d342:	687a      	ldr	r2, [r7, #4]
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	781b      	ldrb	r3, [r3, #0]
 800d348:	009b      	lsls	r3, r3, #2
 800d34a:	4413      	add	r3, r2
 800d34c:	881b      	ldrh	r3, [r3, #0]
 800d34e:	847b      	strh	r3, [r7, #34]	@ 0x22
 800d350:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d352:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d356:	2b00      	cmp	r3, #0
 800d358:	d01b      	beq.n	800d392 <USB_ActivateEndpoint+0x34e>
 800d35a:	687a      	ldr	r2, [r7, #4]
 800d35c:	683b      	ldr	r3, [r7, #0]
 800d35e:	781b      	ldrb	r3, [r3, #0]
 800d360:	009b      	lsls	r3, r3, #2
 800d362:	4413      	add	r3, r2
 800d364:	881b      	ldrh	r3, [r3, #0]
 800d366:	b29b      	uxth	r3, r3
 800d368:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d36c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d370:	843b      	strh	r3, [r7, #32]
 800d372:	687a      	ldr	r2, [r7, #4]
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	781b      	ldrb	r3, [r3, #0]
 800d378:	009b      	lsls	r3, r3, #2
 800d37a:	441a      	add	r2, r3
 800d37c:	8c3b      	ldrh	r3, [r7, #32]
 800d37e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d382:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d386:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d38a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d38e:	b29b      	uxth	r3, r3
 800d390:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	781b      	ldrb	r3, [r3, #0]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d124      	bne.n	800d3e4 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d39a:	687a      	ldr	r2, [r7, #4]
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	781b      	ldrb	r3, [r3, #0]
 800d3a0:	009b      	lsls	r3, r3, #2
 800d3a2:	4413      	add	r3, r2
 800d3a4:	881b      	ldrh	r3, [r3, #0]
 800d3a6:	b29b      	uxth	r3, r3
 800d3a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d3ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d3b0:	83bb      	strh	r3, [r7, #28]
 800d3b2:	8bbb      	ldrh	r3, [r7, #28]
 800d3b4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d3b8:	83bb      	strh	r3, [r7, #28]
 800d3ba:	8bbb      	ldrh	r3, [r7, #28]
 800d3bc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d3c0:	83bb      	strh	r3, [r7, #28]
 800d3c2:	687a      	ldr	r2, [r7, #4]
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	781b      	ldrb	r3, [r3, #0]
 800d3c8:	009b      	lsls	r3, r3, #2
 800d3ca:	441a      	add	r2, r3
 800d3cc:	8bbb      	ldrh	r3, [r7, #28]
 800d3ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d3d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d3d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d3da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3de:	b29b      	uxth	r3, r3
 800d3e0:	8013      	strh	r3, [r2, #0]
 800d3e2:	e1ea      	b.n	800d7ba <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800d3e4:	687a      	ldr	r2, [r7, #4]
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	781b      	ldrb	r3, [r3, #0]
 800d3ea:	009b      	lsls	r3, r3, #2
 800d3ec:	4413      	add	r3, r2
 800d3ee:	881b      	ldrh	r3, [r3, #0]
 800d3f0:	b29b      	uxth	r3, r3
 800d3f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d3f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d3fa:	83fb      	strh	r3, [r7, #30]
 800d3fc:	8bfb      	ldrh	r3, [r7, #30]
 800d3fe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d402:	83fb      	strh	r3, [r7, #30]
 800d404:	687a      	ldr	r2, [r7, #4]
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	781b      	ldrb	r3, [r3, #0]
 800d40a:	009b      	lsls	r3, r3, #2
 800d40c:	441a      	add	r2, r3
 800d40e:	8bfb      	ldrh	r3, [r7, #30]
 800d410:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d414:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d418:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d41c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d420:	b29b      	uxth	r3, r3
 800d422:	8013      	strh	r3, [r2, #0]
 800d424:	e1c9      	b.n	800d7ba <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	78db      	ldrb	r3, [r3, #3]
 800d42a:	2b02      	cmp	r3, #2
 800d42c:	d11e      	bne.n	800d46c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d42e:	687a      	ldr	r2, [r7, #4]
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	781b      	ldrb	r3, [r3, #0]
 800d434:	009b      	lsls	r3, r3, #2
 800d436:	4413      	add	r3, r2
 800d438:	881b      	ldrh	r3, [r3, #0]
 800d43a:	b29b      	uxth	r3, r3
 800d43c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d440:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d444:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800d448:	687a      	ldr	r2, [r7, #4]
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	781b      	ldrb	r3, [r3, #0]
 800d44e:	009b      	lsls	r3, r3, #2
 800d450:	441a      	add	r2, r3
 800d452:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800d456:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d45a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d45e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800d462:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d466:	b29b      	uxth	r3, r3
 800d468:	8013      	strh	r3, [r2, #0]
 800d46a:	e01d      	b.n	800d4a8 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800d46c:	687a      	ldr	r2, [r7, #4]
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	781b      	ldrb	r3, [r3, #0]
 800d472:	009b      	lsls	r3, r3, #2
 800d474:	4413      	add	r3, r2
 800d476:	881b      	ldrh	r3, [r3, #0]
 800d478:	b29b      	uxth	r3, r3
 800d47a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d47e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d482:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800d486:	687a      	ldr	r2, [r7, #4]
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	781b      	ldrb	r3, [r3, #0]
 800d48c:	009b      	lsls	r3, r3, #2
 800d48e:	441a      	add	r2, r3
 800d490:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800d494:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d498:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d49c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d4a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d4a4:	b29b      	uxth	r3, r3
 800d4a6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d4b2:	b29b      	uxth	r3, r3
 800d4b4:	461a      	mov	r2, r3
 800d4b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d4b8:	4413      	add	r3, r2
 800d4ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	781b      	ldrb	r3, [r3, #0]
 800d4c0:	00da      	lsls	r2, r3, #3
 800d4c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d4c4:	4413      	add	r3, r2
 800d4c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d4ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	891b      	ldrh	r3, [r3, #8]
 800d4d0:	085b      	lsrs	r3, r3, #1
 800d4d2:	b29b      	uxth	r3, r3
 800d4d4:	005b      	lsls	r3, r3, #1
 800d4d6:	b29a      	uxth	r2, r3
 800d4d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d4da:	801a      	strh	r2, [r3, #0]
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	657b      	str	r3, [r7, #84]	@ 0x54
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d4e6:	b29b      	uxth	r3, r3
 800d4e8:	461a      	mov	r2, r3
 800d4ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4ec:	4413      	add	r3, r2
 800d4ee:	657b      	str	r3, [r7, #84]	@ 0x54
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	781b      	ldrb	r3, [r3, #0]
 800d4f4:	00da      	lsls	r2, r3, #3
 800d4f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4f8:	4413      	add	r3, r2
 800d4fa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800d4fe:	653b      	str	r3, [r7, #80]	@ 0x50
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	895b      	ldrh	r3, [r3, #10]
 800d504:	085b      	lsrs	r3, r3, #1
 800d506:	b29b      	uxth	r3, r3
 800d508:	005b      	lsls	r3, r3, #1
 800d50a:	b29a      	uxth	r2, r3
 800d50c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d50e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800d510:	683b      	ldr	r3, [r7, #0]
 800d512:	785b      	ldrb	r3, [r3, #1]
 800d514:	2b00      	cmp	r3, #0
 800d516:	f040 8093 	bne.w	800d640 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d51a:	687a      	ldr	r2, [r7, #4]
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	781b      	ldrb	r3, [r3, #0]
 800d520:	009b      	lsls	r3, r3, #2
 800d522:	4413      	add	r3, r2
 800d524:	881b      	ldrh	r3, [r3, #0]
 800d526:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800d52a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d52e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d532:	2b00      	cmp	r3, #0
 800d534:	d01b      	beq.n	800d56e <USB_ActivateEndpoint+0x52a>
 800d536:	687a      	ldr	r2, [r7, #4]
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	781b      	ldrb	r3, [r3, #0]
 800d53c:	009b      	lsls	r3, r3, #2
 800d53e:	4413      	add	r3, r2
 800d540:	881b      	ldrh	r3, [r3, #0]
 800d542:	b29b      	uxth	r3, r3
 800d544:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d548:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d54c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800d54e:	687a      	ldr	r2, [r7, #4]
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	781b      	ldrb	r3, [r3, #0]
 800d554:	009b      	lsls	r3, r3, #2
 800d556:	441a      	add	r2, r3
 800d558:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d55a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d55e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d562:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d566:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d56a:	b29b      	uxth	r3, r3
 800d56c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d56e:	687a      	ldr	r2, [r7, #4]
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	781b      	ldrb	r3, [r3, #0]
 800d574:	009b      	lsls	r3, r3, #2
 800d576:	4413      	add	r3, r2
 800d578:	881b      	ldrh	r3, [r3, #0]
 800d57a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800d57c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d57e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d582:	2b00      	cmp	r3, #0
 800d584:	d01b      	beq.n	800d5be <USB_ActivateEndpoint+0x57a>
 800d586:	687a      	ldr	r2, [r7, #4]
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	781b      	ldrb	r3, [r3, #0]
 800d58c:	009b      	lsls	r3, r3, #2
 800d58e:	4413      	add	r3, r2
 800d590:	881b      	ldrh	r3, [r3, #0]
 800d592:	b29b      	uxth	r3, r3
 800d594:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d598:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d59c:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800d59e:	687a      	ldr	r2, [r7, #4]
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	781b      	ldrb	r3, [r3, #0]
 800d5a4:	009b      	lsls	r3, r3, #2
 800d5a6:	441a      	add	r2, r3
 800d5a8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d5aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d5ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d5b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d5b6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d5ba:	b29b      	uxth	r3, r3
 800d5bc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d5be:	687a      	ldr	r2, [r7, #4]
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	781b      	ldrb	r3, [r3, #0]
 800d5c4:	009b      	lsls	r3, r3, #2
 800d5c6:	4413      	add	r3, r2
 800d5c8:	881b      	ldrh	r3, [r3, #0]
 800d5ca:	b29b      	uxth	r3, r3
 800d5cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d5d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d5d4:	873b      	strh	r3, [r7, #56]	@ 0x38
 800d5d6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800d5d8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d5dc:	873b      	strh	r3, [r7, #56]	@ 0x38
 800d5de:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800d5e0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d5e4:	873b      	strh	r3, [r7, #56]	@ 0x38
 800d5e6:	687a      	ldr	r2, [r7, #4]
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	781b      	ldrb	r3, [r3, #0]
 800d5ec:	009b      	lsls	r3, r3, #2
 800d5ee:	441a      	add	r2, r3
 800d5f0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800d5f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d5f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d5fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d5fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d602:	b29b      	uxth	r3, r3
 800d604:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d606:	687a      	ldr	r2, [r7, #4]
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	781b      	ldrb	r3, [r3, #0]
 800d60c:	009b      	lsls	r3, r3, #2
 800d60e:	4413      	add	r3, r2
 800d610:	881b      	ldrh	r3, [r3, #0]
 800d612:	b29b      	uxth	r3, r3
 800d614:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d618:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d61c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800d61e:	687a      	ldr	r2, [r7, #4]
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	781b      	ldrb	r3, [r3, #0]
 800d624:	009b      	lsls	r3, r3, #2
 800d626:	441a      	add	r2, r3
 800d628:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d62a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d62e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d632:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d636:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d63a:	b29b      	uxth	r3, r3
 800d63c:	8013      	strh	r3, [r2, #0]
 800d63e:	e0bc      	b.n	800d7ba <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d640:	687a      	ldr	r2, [r7, #4]
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	781b      	ldrb	r3, [r3, #0]
 800d646:	009b      	lsls	r3, r3, #2
 800d648:	4413      	add	r3, r2
 800d64a:	881b      	ldrh	r3, [r3, #0]
 800d64c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800d650:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800d654:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d01d      	beq.n	800d698 <USB_ActivateEndpoint+0x654>
 800d65c:	687a      	ldr	r2, [r7, #4]
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	781b      	ldrb	r3, [r3, #0]
 800d662:	009b      	lsls	r3, r3, #2
 800d664:	4413      	add	r3, r2
 800d666:	881b      	ldrh	r3, [r3, #0]
 800d668:	b29b      	uxth	r3, r3
 800d66a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d66e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d672:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800d676:	687a      	ldr	r2, [r7, #4]
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	781b      	ldrb	r3, [r3, #0]
 800d67c:	009b      	lsls	r3, r3, #2
 800d67e:	441a      	add	r2, r3
 800d680:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800d684:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d688:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d68c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d690:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d694:	b29b      	uxth	r3, r3
 800d696:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d698:	687a      	ldr	r2, [r7, #4]
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	781b      	ldrb	r3, [r3, #0]
 800d69e:	009b      	lsls	r3, r3, #2
 800d6a0:	4413      	add	r3, r2
 800d6a2:	881b      	ldrh	r3, [r3, #0]
 800d6a4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800d6a8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800d6ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d01d      	beq.n	800d6f0 <USB_ActivateEndpoint+0x6ac>
 800d6b4:	687a      	ldr	r2, [r7, #4]
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	781b      	ldrb	r3, [r3, #0]
 800d6ba:	009b      	lsls	r3, r3, #2
 800d6bc:	4413      	add	r3, r2
 800d6be:	881b      	ldrh	r3, [r3, #0]
 800d6c0:	b29b      	uxth	r3, r3
 800d6c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d6c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d6ca:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800d6ce:	687a      	ldr	r2, [r7, #4]
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	781b      	ldrb	r3, [r3, #0]
 800d6d4:	009b      	lsls	r3, r3, #2
 800d6d6:	441a      	add	r2, r3
 800d6d8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800d6dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d6e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d6e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d6e8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d6ec:	b29b      	uxth	r3, r3
 800d6ee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	78db      	ldrb	r3, [r3, #3]
 800d6f4:	2b01      	cmp	r3, #1
 800d6f6:	d024      	beq.n	800d742 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d6f8:	687a      	ldr	r2, [r7, #4]
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	781b      	ldrb	r3, [r3, #0]
 800d6fe:	009b      	lsls	r3, r3, #2
 800d700:	4413      	add	r3, r2
 800d702:	881b      	ldrh	r3, [r3, #0]
 800d704:	b29b      	uxth	r3, r3
 800d706:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d70a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d70e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800d712:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d716:	f083 0320 	eor.w	r3, r3, #32
 800d71a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800d71e:	687a      	ldr	r2, [r7, #4]
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	781b      	ldrb	r3, [r3, #0]
 800d724:	009b      	lsls	r3, r3, #2
 800d726:	441a      	add	r2, r3
 800d728:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d72c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d730:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d734:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d738:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d73c:	b29b      	uxth	r3, r3
 800d73e:	8013      	strh	r3, [r2, #0]
 800d740:	e01d      	b.n	800d77e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d742:	687a      	ldr	r2, [r7, #4]
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	781b      	ldrb	r3, [r3, #0]
 800d748:	009b      	lsls	r3, r3, #2
 800d74a:	4413      	add	r3, r2
 800d74c:	881b      	ldrh	r3, [r3, #0]
 800d74e:	b29b      	uxth	r3, r3
 800d750:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d754:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d758:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800d75c:	687a      	ldr	r2, [r7, #4]
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	781b      	ldrb	r3, [r3, #0]
 800d762:	009b      	lsls	r3, r3, #2
 800d764:	441a      	add	r2, r3
 800d766:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d76a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d76e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d772:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d776:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d77a:	b29b      	uxth	r3, r3
 800d77c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d77e:	687a      	ldr	r2, [r7, #4]
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	781b      	ldrb	r3, [r3, #0]
 800d784:	009b      	lsls	r3, r3, #2
 800d786:	4413      	add	r3, r2
 800d788:	881b      	ldrh	r3, [r3, #0]
 800d78a:	b29b      	uxth	r3, r3
 800d78c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d790:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d794:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800d798:	687a      	ldr	r2, [r7, #4]
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	781b      	ldrb	r3, [r3, #0]
 800d79e:	009b      	lsls	r3, r3, #2
 800d7a0:	441a      	add	r2, r3
 800d7a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d7a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d7aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d7ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d7b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7b6:	b29b      	uxth	r3, r3
 800d7b8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800d7ba:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	3774      	adds	r7, #116	@ 0x74
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c8:	4770      	bx	lr
 800d7ca:	bf00      	nop

0800d7cc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b08d      	sub	sp, #52	@ 0x34
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
 800d7d4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	7b1b      	ldrb	r3, [r3, #12]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	f040 808e 	bne.w	800d8fc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	785b      	ldrb	r3, [r3, #1]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d044      	beq.n	800d872 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d7e8:	687a      	ldr	r2, [r7, #4]
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	781b      	ldrb	r3, [r3, #0]
 800d7ee:	009b      	lsls	r3, r3, #2
 800d7f0:	4413      	add	r3, r2
 800d7f2:	881b      	ldrh	r3, [r3, #0]
 800d7f4:	81bb      	strh	r3, [r7, #12]
 800d7f6:	89bb      	ldrh	r3, [r7, #12]
 800d7f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d01b      	beq.n	800d838 <USB_DeactivateEndpoint+0x6c>
 800d800:	687a      	ldr	r2, [r7, #4]
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	781b      	ldrb	r3, [r3, #0]
 800d806:	009b      	lsls	r3, r3, #2
 800d808:	4413      	add	r3, r2
 800d80a:	881b      	ldrh	r3, [r3, #0]
 800d80c:	b29b      	uxth	r3, r3
 800d80e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d816:	817b      	strh	r3, [r7, #10]
 800d818:	687a      	ldr	r2, [r7, #4]
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	781b      	ldrb	r3, [r3, #0]
 800d81e:	009b      	lsls	r3, r3, #2
 800d820:	441a      	add	r2, r3
 800d822:	897b      	ldrh	r3, [r7, #10]
 800d824:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d828:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d82c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d830:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d834:	b29b      	uxth	r3, r3
 800d836:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d838:	687a      	ldr	r2, [r7, #4]
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	781b      	ldrb	r3, [r3, #0]
 800d83e:	009b      	lsls	r3, r3, #2
 800d840:	4413      	add	r3, r2
 800d842:	881b      	ldrh	r3, [r3, #0]
 800d844:	b29b      	uxth	r3, r3
 800d846:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d84a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d84e:	813b      	strh	r3, [r7, #8]
 800d850:	687a      	ldr	r2, [r7, #4]
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	781b      	ldrb	r3, [r3, #0]
 800d856:	009b      	lsls	r3, r3, #2
 800d858:	441a      	add	r2, r3
 800d85a:	893b      	ldrh	r3, [r7, #8]
 800d85c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d860:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d864:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d868:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d86c:	b29b      	uxth	r3, r3
 800d86e:	8013      	strh	r3, [r2, #0]
 800d870:	e192      	b.n	800db98 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d872:	687a      	ldr	r2, [r7, #4]
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	781b      	ldrb	r3, [r3, #0]
 800d878:	009b      	lsls	r3, r3, #2
 800d87a:	4413      	add	r3, r2
 800d87c:	881b      	ldrh	r3, [r3, #0]
 800d87e:	827b      	strh	r3, [r7, #18]
 800d880:	8a7b      	ldrh	r3, [r7, #18]
 800d882:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d886:	2b00      	cmp	r3, #0
 800d888:	d01b      	beq.n	800d8c2 <USB_DeactivateEndpoint+0xf6>
 800d88a:	687a      	ldr	r2, [r7, #4]
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	781b      	ldrb	r3, [r3, #0]
 800d890:	009b      	lsls	r3, r3, #2
 800d892:	4413      	add	r3, r2
 800d894:	881b      	ldrh	r3, [r3, #0]
 800d896:	b29b      	uxth	r3, r3
 800d898:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d89c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d8a0:	823b      	strh	r3, [r7, #16]
 800d8a2:	687a      	ldr	r2, [r7, #4]
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	781b      	ldrb	r3, [r3, #0]
 800d8a8:	009b      	lsls	r3, r3, #2
 800d8aa:	441a      	add	r2, r3
 800d8ac:	8a3b      	ldrh	r3, [r7, #16]
 800d8ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d8b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d8b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d8ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d8be:	b29b      	uxth	r3, r3
 800d8c0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d8c2:	687a      	ldr	r2, [r7, #4]
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	781b      	ldrb	r3, [r3, #0]
 800d8c8:	009b      	lsls	r3, r3, #2
 800d8ca:	4413      	add	r3, r2
 800d8cc:	881b      	ldrh	r3, [r3, #0]
 800d8ce:	b29b      	uxth	r3, r3
 800d8d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d8d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d8d8:	81fb      	strh	r3, [r7, #14]
 800d8da:	687a      	ldr	r2, [r7, #4]
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	781b      	ldrb	r3, [r3, #0]
 800d8e0:	009b      	lsls	r3, r3, #2
 800d8e2:	441a      	add	r2, r3
 800d8e4:	89fb      	ldrh	r3, [r7, #14]
 800d8e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d8ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d8ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d8f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d8f6:	b29b      	uxth	r3, r3
 800d8f8:	8013      	strh	r3, [r2, #0]
 800d8fa:	e14d      	b.n	800db98 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	785b      	ldrb	r3, [r3, #1]
 800d900:	2b00      	cmp	r3, #0
 800d902:	f040 80a5 	bne.w	800da50 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d906:	687a      	ldr	r2, [r7, #4]
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	781b      	ldrb	r3, [r3, #0]
 800d90c:	009b      	lsls	r3, r3, #2
 800d90e:	4413      	add	r3, r2
 800d910:	881b      	ldrh	r3, [r3, #0]
 800d912:	843b      	strh	r3, [r7, #32]
 800d914:	8c3b      	ldrh	r3, [r7, #32]
 800d916:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d01b      	beq.n	800d956 <USB_DeactivateEndpoint+0x18a>
 800d91e:	687a      	ldr	r2, [r7, #4]
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	781b      	ldrb	r3, [r3, #0]
 800d924:	009b      	lsls	r3, r3, #2
 800d926:	4413      	add	r3, r2
 800d928:	881b      	ldrh	r3, [r3, #0]
 800d92a:	b29b      	uxth	r3, r3
 800d92c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d930:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d934:	83fb      	strh	r3, [r7, #30]
 800d936:	687a      	ldr	r2, [r7, #4]
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	781b      	ldrb	r3, [r3, #0]
 800d93c:	009b      	lsls	r3, r3, #2
 800d93e:	441a      	add	r2, r3
 800d940:	8bfb      	ldrh	r3, [r7, #30]
 800d942:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d946:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d94a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d94e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d952:	b29b      	uxth	r3, r3
 800d954:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d956:	687a      	ldr	r2, [r7, #4]
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	781b      	ldrb	r3, [r3, #0]
 800d95c:	009b      	lsls	r3, r3, #2
 800d95e:	4413      	add	r3, r2
 800d960:	881b      	ldrh	r3, [r3, #0]
 800d962:	83bb      	strh	r3, [r7, #28]
 800d964:	8bbb      	ldrh	r3, [r7, #28]
 800d966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d01b      	beq.n	800d9a6 <USB_DeactivateEndpoint+0x1da>
 800d96e:	687a      	ldr	r2, [r7, #4]
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	781b      	ldrb	r3, [r3, #0]
 800d974:	009b      	lsls	r3, r3, #2
 800d976:	4413      	add	r3, r2
 800d978:	881b      	ldrh	r3, [r3, #0]
 800d97a:	b29b      	uxth	r3, r3
 800d97c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d980:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d984:	837b      	strh	r3, [r7, #26]
 800d986:	687a      	ldr	r2, [r7, #4]
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	781b      	ldrb	r3, [r3, #0]
 800d98c:	009b      	lsls	r3, r3, #2
 800d98e:	441a      	add	r2, r3
 800d990:	8b7b      	ldrh	r3, [r7, #26]
 800d992:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d996:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d99a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d99e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d9a2:	b29b      	uxth	r3, r3
 800d9a4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800d9a6:	687a      	ldr	r2, [r7, #4]
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	781b      	ldrb	r3, [r3, #0]
 800d9ac:	009b      	lsls	r3, r3, #2
 800d9ae:	4413      	add	r3, r2
 800d9b0:	881b      	ldrh	r3, [r3, #0]
 800d9b2:	b29b      	uxth	r3, r3
 800d9b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d9b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d9bc:	833b      	strh	r3, [r7, #24]
 800d9be:	687a      	ldr	r2, [r7, #4]
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	781b      	ldrb	r3, [r3, #0]
 800d9c4:	009b      	lsls	r3, r3, #2
 800d9c6:	441a      	add	r2, r3
 800d9c8:	8b3b      	ldrh	r3, [r7, #24]
 800d9ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d9ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d9d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d9d6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d9da:	b29b      	uxth	r3, r3
 800d9dc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d9de:	687a      	ldr	r2, [r7, #4]
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	781b      	ldrb	r3, [r3, #0]
 800d9e4:	009b      	lsls	r3, r3, #2
 800d9e6:	4413      	add	r3, r2
 800d9e8:	881b      	ldrh	r3, [r3, #0]
 800d9ea:	b29b      	uxth	r3, r3
 800d9ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d9f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d9f4:	82fb      	strh	r3, [r7, #22]
 800d9f6:	687a      	ldr	r2, [r7, #4]
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	781b      	ldrb	r3, [r3, #0]
 800d9fc:	009b      	lsls	r3, r3, #2
 800d9fe:	441a      	add	r2, r3
 800da00:	8afb      	ldrh	r3, [r7, #22]
 800da02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800da06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800da0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800da0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da12:	b29b      	uxth	r3, r3
 800da14:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800da16:	687a      	ldr	r2, [r7, #4]
 800da18:	683b      	ldr	r3, [r7, #0]
 800da1a:	781b      	ldrb	r3, [r3, #0]
 800da1c:	009b      	lsls	r3, r3, #2
 800da1e:	4413      	add	r3, r2
 800da20:	881b      	ldrh	r3, [r3, #0]
 800da22:	b29b      	uxth	r3, r3
 800da24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800da28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800da2c:	82bb      	strh	r3, [r7, #20]
 800da2e:	687a      	ldr	r2, [r7, #4]
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	781b      	ldrb	r3, [r3, #0]
 800da34:	009b      	lsls	r3, r3, #2
 800da36:	441a      	add	r2, r3
 800da38:	8abb      	ldrh	r3, [r7, #20]
 800da3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800da3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800da42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800da46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da4a:	b29b      	uxth	r3, r3
 800da4c:	8013      	strh	r3, [r2, #0]
 800da4e:	e0a3      	b.n	800db98 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800da50:	687a      	ldr	r2, [r7, #4]
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	781b      	ldrb	r3, [r3, #0]
 800da56:	009b      	lsls	r3, r3, #2
 800da58:	4413      	add	r3, r2
 800da5a:	881b      	ldrh	r3, [r3, #0]
 800da5c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800da5e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800da60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800da64:	2b00      	cmp	r3, #0
 800da66:	d01b      	beq.n	800daa0 <USB_DeactivateEndpoint+0x2d4>
 800da68:	687a      	ldr	r2, [r7, #4]
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	781b      	ldrb	r3, [r3, #0]
 800da6e:	009b      	lsls	r3, r3, #2
 800da70:	4413      	add	r3, r2
 800da72:	881b      	ldrh	r3, [r3, #0]
 800da74:	b29b      	uxth	r3, r3
 800da76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800da7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800da7e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800da80:	687a      	ldr	r2, [r7, #4]
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	781b      	ldrb	r3, [r3, #0]
 800da86:	009b      	lsls	r3, r3, #2
 800da88:	441a      	add	r2, r3
 800da8a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800da8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800da90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800da94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800da98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da9c:	b29b      	uxth	r3, r3
 800da9e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800daa0:	687a      	ldr	r2, [r7, #4]
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	781b      	ldrb	r3, [r3, #0]
 800daa6:	009b      	lsls	r3, r3, #2
 800daa8:	4413      	add	r3, r2
 800daaa:	881b      	ldrh	r3, [r3, #0]
 800daac:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800daae:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800dab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d01b      	beq.n	800daf0 <USB_DeactivateEndpoint+0x324>
 800dab8:	687a      	ldr	r2, [r7, #4]
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	781b      	ldrb	r3, [r3, #0]
 800dabe:	009b      	lsls	r3, r3, #2
 800dac0:	4413      	add	r3, r2
 800dac2:	881b      	ldrh	r3, [r3, #0]
 800dac4:	b29b      	uxth	r3, r3
 800dac6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800daca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dace:	853b      	strh	r3, [r7, #40]	@ 0x28
 800dad0:	687a      	ldr	r2, [r7, #4]
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	781b      	ldrb	r3, [r3, #0]
 800dad6:	009b      	lsls	r3, r3, #2
 800dad8:	441a      	add	r2, r3
 800dada:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800dadc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dae0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dae4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dae8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800daec:	b29b      	uxth	r3, r3
 800daee:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800daf0:	687a      	ldr	r2, [r7, #4]
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	781b      	ldrb	r3, [r3, #0]
 800daf6:	009b      	lsls	r3, r3, #2
 800daf8:	4413      	add	r3, r2
 800dafa:	881b      	ldrh	r3, [r3, #0]
 800dafc:	b29b      	uxth	r3, r3
 800dafe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800db02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800db06:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800db08:	687a      	ldr	r2, [r7, #4]
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	781b      	ldrb	r3, [r3, #0]
 800db0e:	009b      	lsls	r3, r3, #2
 800db10:	441a      	add	r2, r3
 800db12:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800db14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800db18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800db1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800db20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db24:	b29b      	uxth	r3, r3
 800db26:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800db28:	687a      	ldr	r2, [r7, #4]
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	781b      	ldrb	r3, [r3, #0]
 800db2e:	009b      	lsls	r3, r3, #2
 800db30:	4413      	add	r3, r2
 800db32:	881b      	ldrh	r3, [r3, #0]
 800db34:	b29b      	uxth	r3, r3
 800db36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800db3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800db3e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800db40:	687a      	ldr	r2, [r7, #4]
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	781b      	ldrb	r3, [r3, #0]
 800db46:	009b      	lsls	r3, r3, #2
 800db48:	441a      	add	r2, r3
 800db4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800db4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800db50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800db54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800db58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db5c:	b29b      	uxth	r3, r3
 800db5e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800db60:	687a      	ldr	r2, [r7, #4]
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	781b      	ldrb	r3, [r3, #0]
 800db66:	009b      	lsls	r3, r3, #2
 800db68:	4413      	add	r3, r2
 800db6a:	881b      	ldrh	r3, [r3, #0]
 800db6c:	b29b      	uxth	r3, r3
 800db6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800db72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800db76:	847b      	strh	r3, [r7, #34]	@ 0x22
 800db78:	687a      	ldr	r2, [r7, #4]
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	781b      	ldrb	r3, [r3, #0]
 800db7e:	009b      	lsls	r3, r3, #2
 800db80:	441a      	add	r2, r3
 800db82:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800db84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800db88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800db8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800db90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db94:	b29b      	uxth	r3, r3
 800db96:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800db98:	2300      	movs	r3, #0
}
 800db9a:	4618      	mov	r0, r3
 800db9c:	3734      	adds	r7, #52	@ 0x34
 800db9e:	46bd      	mov	sp, r7
 800dba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba4:	4770      	bx	lr

0800dba6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800dba6:	b580      	push	{r7, lr}
 800dba8:	b0c2      	sub	sp, #264	@ 0x108
 800dbaa:	af00      	add	r7, sp, #0
 800dbac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dbb4:	6018      	str	r0, [r3, #0]
 800dbb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbbe:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dbc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	785b      	ldrb	r3, [r3, #1]
 800dbcc:	2b01      	cmp	r3, #1
 800dbce:	f040 86b7 	bne.w	800e940 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800dbd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	699a      	ldr	r2, [r3, #24]
 800dbde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbe2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	691b      	ldr	r3, [r3, #16]
 800dbea:	429a      	cmp	r2, r3
 800dbec:	d908      	bls.n	800dc00 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800dbee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	691b      	ldr	r3, [r3, #16]
 800dbfa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800dbfe:	e007      	b.n	800dc10 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800dc00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	699b      	ldr	r3, [r3, #24]
 800dc0c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800dc10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	7b1b      	ldrb	r3, [r3, #12]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d13a      	bne.n	800dc96 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800dc20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	6959      	ldr	r1, [r3, #20]
 800dc2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	88da      	ldrh	r2, [r3, #6]
 800dc38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc3c:	b29b      	uxth	r3, r3
 800dc3e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800dc42:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800dc46:	6800      	ldr	r0, [r0, #0]
 800dc48:	f001 fc98 	bl	800f57c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800dc4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	613b      	str	r3, [r7, #16]
 800dc58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dc66:	b29b      	uxth	r3, r3
 800dc68:	461a      	mov	r2, r3
 800dc6a:	693b      	ldr	r3, [r7, #16]
 800dc6c:	4413      	add	r3, r2
 800dc6e:	613b      	str	r3, [r7, #16]
 800dc70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	00da      	lsls	r2, r3, #3
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	4413      	add	r3, r2
 800dc82:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dc86:	60fb      	str	r3, [r7, #12]
 800dc88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc8c:	b29a      	uxth	r2, r3
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	801a      	strh	r2, [r3, #0]
 800dc92:	f000 be1f 	b.w	800e8d4 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800dc96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	78db      	ldrb	r3, [r3, #3]
 800dca2:	2b02      	cmp	r3, #2
 800dca4:	f040 8462 	bne.w	800e56c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800dca8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	6a1a      	ldr	r2, [r3, #32]
 800dcb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	691b      	ldr	r3, [r3, #16]
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	f240 83df 	bls.w	800e484 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800dcc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dcce:	681a      	ldr	r2, [r3, #0]
 800dcd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	781b      	ldrb	r3, [r3, #0]
 800dcdc:	009b      	lsls	r3, r3, #2
 800dcde:	4413      	add	r3, r2
 800dce0:	881b      	ldrh	r3, [r3, #0]
 800dce2:	b29b      	uxth	r3, r3
 800dce4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dce8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dcec:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800dcf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcf4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dcf8:	681a      	ldr	r2, [r3, #0]
 800dcfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	781b      	ldrb	r3, [r3, #0]
 800dd06:	009b      	lsls	r3, r3, #2
 800dd08:	441a      	add	r2, r3
 800dd0a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800dd0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dd12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dd16:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800dd1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd1e:	b29b      	uxth	r3, r3
 800dd20:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800dd22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	6a1a      	ldr	r2, [r3, #32]
 800dd2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd32:	1ad2      	subs	r2, r2, r3
 800dd34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800dd40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd48:	681a      	ldr	r2, [r3, #0]
 800dd4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	781b      	ldrb	r3, [r3, #0]
 800dd56:	009b      	lsls	r3, r3, #2
 800dd58:	4413      	add	r3, r2
 800dd5a:	881b      	ldrh	r3, [r3, #0]
 800dd5c:	b29b      	uxth	r3, r3
 800dd5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	f000 81c7 	beq.w	800e0f6 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800dd68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	633b      	str	r3, [r7, #48]	@ 0x30
 800dd74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	785b      	ldrb	r3, [r3, #1]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d177      	bne.n	800de74 <USB_EPStartXfer+0x2ce>
 800dd84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dd90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dd9e:	b29b      	uxth	r3, r3
 800dda0:	461a      	mov	r2, r3
 800dda2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dda4:	4413      	add	r3, r2
 800dda6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dda8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	781b      	ldrb	r3, [r3, #0]
 800ddb4:	00da      	lsls	r2, r3, #3
 800ddb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddb8:	4413      	add	r3, r2
 800ddba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ddbe:	627b      	str	r3, [r7, #36]	@ 0x24
 800ddc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddc2:	881b      	ldrh	r3, [r3, #0]
 800ddc4:	b29b      	uxth	r3, r3
 800ddc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ddca:	b29a      	uxth	r2, r3
 800ddcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddce:	801a      	strh	r2, [r3, #0]
 800ddd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddd4:	2b3e      	cmp	r3, #62	@ 0x3e
 800ddd6:	d921      	bls.n	800de1c <USB_EPStartXfer+0x276>
 800ddd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dddc:	095b      	lsrs	r3, r3, #5
 800ddde:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800dde2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dde6:	f003 031f 	and.w	r3, r3, #31
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d104      	bne.n	800ddf8 <USB_EPStartXfer+0x252>
 800ddee:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ddf2:	3b01      	subs	r3, #1
 800ddf4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800ddf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddfa:	881b      	ldrh	r3, [r3, #0]
 800ddfc:	b29a      	uxth	r2, r3
 800ddfe:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800de02:	b29b      	uxth	r3, r3
 800de04:	029b      	lsls	r3, r3, #10
 800de06:	b29b      	uxth	r3, r3
 800de08:	4313      	orrs	r3, r2
 800de0a:	b29b      	uxth	r3, r3
 800de0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800de10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de14:	b29a      	uxth	r2, r3
 800de16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de18:	801a      	strh	r2, [r3, #0]
 800de1a:	e050      	b.n	800debe <USB_EPStartXfer+0x318>
 800de1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de20:	2b00      	cmp	r3, #0
 800de22:	d10a      	bne.n	800de3a <USB_EPStartXfer+0x294>
 800de24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de26:	881b      	ldrh	r3, [r3, #0]
 800de28:	b29b      	uxth	r3, r3
 800de2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800de2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de32:	b29a      	uxth	r2, r3
 800de34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de36:	801a      	strh	r2, [r3, #0]
 800de38:	e041      	b.n	800debe <USB_EPStartXfer+0x318>
 800de3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de3e:	085b      	lsrs	r3, r3, #1
 800de40:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800de44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de48:	f003 0301 	and.w	r3, r3, #1
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d004      	beq.n	800de5a <USB_EPStartXfer+0x2b4>
 800de50:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800de54:	3301      	adds	r3, #1
 800de56:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800de5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de5c:	881b      	ldrh	r3, [r3, #0]
 800de5e:	b29a      	uxth	r2, r3
 800de60:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800de64:	b29b      	uxth	r3, r3
 800de66:	029b      	lsls	r3, r3, #10
 800de68:	b29b      	uxth	r3, r3
 800de6a:	4313      	orrs	r3, r2
 800de6c:	b29a      	uxth	r2, r3
 800de6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de70:	801a      	strh	r2, [r3, #0]
 800de72:	e024      	b.n	800debe <USB_EPStartXfer+0x318>
 800de74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	785b      	ldrb	r3, [r3, #1]
 800de80:	2b01      	cmp	r3, #1
 800de82:	d11c      	bne.n	800debe <USB_EPStartXfer+0x318>
 800de84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800de92:	b29b      	uxth	r3, r3
 800de94:	461a      	mov	r2, r3
 800de96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de98:	4413      	add	r3, r2
 800de9a:	633b      	str	r3, [r7, #48]	@ 0x30
 800de9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dea0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	781b      	ldrb	r3, [r3, #0]
 800dea8:	00da      	lsls	r2, r3, #3
 800deaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deac:	4413      	add	r3, r2
 800deae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800deb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800deb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800deb8:	b29a      	uxth	r2, r3
 800deba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800debc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800debe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dec2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	895b      	ldrh	r3, [r3, #10]
 800deca:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ded2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	6959      	ldr	r1, [r3, #20]
 800deda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dede:	b29b      	uxth	r3, r3
 800dee0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800dee4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800dee8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800deec:	6800      	ldr	r0, [r0, #0]
 800deee:	f001 fb45 	bl	800f57c <USB_WritePMA>
            ep->xfer_buff += len;
 800def2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800def6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	695a      	ldr	r2, [r3, #20]
 800defe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df02:	441a      	add	r2, r3
 800df04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800df10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	6a1a      	ldr	r2, [r3, #32]
 800df1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	691b      	ldr	r3, [r3, #16]
 800df28:	429a      	cmp	r2, r3
 800df2a:	d90f      	bls.n	800df4c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800df2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	6a1a      	ldr	r2, [r3, #32]
 800df38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df3c:	1ad2      	subs	r2, r2, r3
 800df3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	621a      	str	r2, [r3, #32]
 800df4a:	e00e      	b.n	800df6a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800df4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	6a1b      	ldr	r3, [r3, #32]
 800df58:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800df5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	2200      	movs	r2, #0
 800df68:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800df6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	785b      	ldrb	r3, [r3, #1]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d177      	bne.n	800e06a <USB_EPStartXfer+0x4c4>
 800df7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	61bb      	str	r3, [r7, #24]
 800df86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800df94:	b29b      	uxth	r3, r3
 800df96:	461a      	mov	r2, r3
 800df98:	69bb      	ldr	r3, [r7, #24]
 800df9a:	4413      	add	r3, r2
 800df9c:	61bb      	str	r3, [r7, #24]
 800df9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfa2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	781b      	ldrb	r3, [r3, #0]
 800dfaa:	00da      	lsls	r2, r3, #3
 800dfac:	69bb      	ldr	r3, [r7, #24]
 800dfae:	4413      	add	r3, r2
 800dfb0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dfb4:	617b      	str	r3, [r7, #20]
 800dfb6:	697b      	ldr	r3, [r7, #20]
 800dfb8:	881b      	ldrh	r3, [r3, #0]
 800dfba:	b29b      	uxth	r3, r3
 800dfbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dfc0:	b29a      	uxth	r2, r3
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	801a      	strh	r2, [r3, #0]
 800dfc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfca:	2b3e      	cmp	r3, #62	@ 0x3e
 800dfcc:	d921      	bls.n	800e012 <USB_EPStartXfer+0x46c>
 800dfce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfd2:	095b      	lsrs	r3, r3, #5
 800dfd4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800dfd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfdc:	f003 031f 	and.w	r3, r3, #31
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d104      	bne.n	800dfee <USB_EPStartXfer+0x448>
 800dfe4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800dfe8:	3b01      	subs	r3, #1
 800dfea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800dfee:	697b      	ldr	r3, [r7, #20]
 800dff0:	881b      	ldrh	r3, [r3, #0]
 800dff2:	b29a      	uxth	r2, r3
 800dff4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800dff8:	b29b      	uxth	r3, r3
 800dffa:	029b      	lsls	r3, r3, #10
 800dffc:	b29b      	uxth	r3, r3
 800dffe:	4313      	orrs	r3, r2
 800e000:	b29b      	uxth	r3, r3
 800e002:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e006:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e00a:	b29a      	uxth	r2, r3
 800e00c:	697b      	ldr	r3, [r7, #20]
 800e00e:	801a      	strh	r2, [r3, #0]
 800e010:	e056      	b.n	800e0c0 <USB_EPStartXfer+0x51a>
 800e012:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e016:	2b00      	cmp	r3, #0
 800e018:	d10a      	bne.n	800e030 <USB_EPStartXfer+0x48a>
 800e01a:	697b      	ldr	r3, [r7, #20]
 800e01c:	881b      	ldrh	r3, [r3, #0]
 800e01e:	b29b      	uxth	r3, r3
 800e020:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e024:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e028:	b29a      	uxth	r2, r3
 800e02a:	697b      	ldr	r3, [r7, #20]
 800e02c:	801a      	strh	r2, [r3, #0]
 800e02e:	e047      	b.n	800e0c0 <USB_EPStartXfer+0x51a>
 800e030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e034:	085b      	lsrs	r3, r3, #1
 800e036:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800e03a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e03e:	f003 0301 	and.w	r3, r3, #1
 800e042:	2b00      	cmp	r3, #0
 800e044:	d004      	beq.n	800e050 <USB_EPStartXfer+0x4aa>
 800e046:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e04a:	3301      	adds	r3, #1
 800e04c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800e050:	697b      	ldr	r3, [r7, #20]
 800e052:	881b      	ldrh	r3, [r3, #0]
 800e054:	b29a      	uxth	r2, r3
 800e056:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e05a:	b29b      	uxth	r3, r3
 800e05c:	029b      	lsls	r3, r3, #10
 800e05e:	b29b      	uxth	r3, r3
 800e060:	4313      	orrs	r3, r2
 800e062:	b29a      	uxth	r2, r3
 800e064:	697b      	ldr	r3, [r7, #20]
 800e066:	801a      	strh	r2, [r3, #0]
 800e068:	e02a      	b.n	800e0c0 <USB_EPStartXfer+0x51a>
 800e06a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e06e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	785b      	ldrb	r3, [r3, #1]
 800e076:	2b01      	cmp	r3, #1
 800e078:	d122      	bne.n	800e0c0 <USB_EPStartXfer+0x51a>
 800e07a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e07e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	623b      	str	r3, [r7, #32]
 800e086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e08a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e094:	b29b      	uxth	r3, r3
 800e096:	461a      	mov	r2, r3
 800e098:	6a3b      	ldr	r3, [r7, #32]
 800e09a:	4413      	add	r3, r2
 800e09c:	623b      	str	r3, [r7, #32]
 800e09e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e0a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	781b      	ldrb	r3, [r3, #0]
 800e0aa:	00da      	lsls	r2, r3, #3
 800e0ac:	6a3b      	ldr	r3, [r7, #32]
 800e0ae:	4413      	add	r3, r2
 800e0b0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e0b4:	61fb      	str	r3, [r7, #28]
 800e0b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0ba:	b29a      	uxth	r2, r3
 800e0bc:	69fb      	ldr	r3, [r7, #28]
 800e0be:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e0c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e0c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	891b      	ldrh	r3, [r3, #8]
 800e0cc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e0d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e0d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	6959      	ldr	r1, [r3, #20]
 800e0dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0e0:	b29b      	uxth	r3, r3
 800e0e2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e0e6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800e0ea:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800e0ee:	6800      	ldr	r0, [r0, #0]
 800e0f0:	f001 fa44 	bl	800f57c <USB_WritePMA>
 800e0f4:	e3ee      	b.n	800e8d4 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e0f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e0fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	785b      	ldrb	r3, [r3, #1]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d177      	bne.n	800e1f6 <USB_EPStartXfer+0x650>
 800e106:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e10a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e112:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e116:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e120:	b29b      	uxth	r3, r3
 800e122:	461a      	mov	r2, r3
 800e124:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e126:	4413      	add	r3, r2
 800e128:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e12a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e12e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	781b      	ldrb	r3, [r3, #0]
 800e136:	00da      	lsls	r2, r3, #3
 800e138:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e13a:	4413      	add	r3, r2
 800e13c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e140:	647b      	str	r3, [r7, #68]	@ 0x44
 800e142:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e144:	881b      	ldrh	r3, [r3, #0]
 800e146:	b29b      	uxth	r3, r3
 800e148:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e14c:	b29a      	uxth	r2, r3
 800e14e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e150:	801a      	strh	r2, [r3, #0]
 800e152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e156:	2b3e      	cmp	r3, #62	@ 0x3e
 800e158:	d921      	bls.n	800e19e <USB_EPStartXfer+0x5f8>
 800e15a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e15e:	095b      	lsrs	r3, r3, #5
 800e160:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800e164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e168:	f003 031f 	and.w	r3, r3, #31
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d104      	bne.n	800e17a <USB_EPStartXfer+0x5d4>
 800e170:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800e174:	3b01      	subs	r3, #1
 800e176:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800e17a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e17c:	881b      	ldrh	r3, [r3, #0]
 800e17e:	b29a      	uxth	r2, r3
 800e180:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800e184:	b29b      	uxth	r3, r3
 800e186:	029b      	lsls	r3, r3, #10
 800e188:	b29b      	uxth	r3, r3
 800e18a:	4313      	orrs	r3, r2
 800e18c:	b29b      	uxth	r3, r3
 800e18e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e192:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e196:	b29a      	uxth	r2, r3
 800e198:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e19a:	801a      	strh	r2, [r3, #0]
 800e19c:	e056      	b.n	800e24c <USB_EPStartXfer+0x6a6>
 800e19e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d10a      	bne.n	800e1bc <USB_EPStartXfer+0x616>
 800e1a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1a8:	881b      	ldrh	r3, [r3, #0]
 800e1aa:	b29b      	uxth	r3, r3
 800e1ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e1b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e1b4:	b29a      	uxth	r2, r3
 800e1b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1b8:	801a      	strh	r2, [r3, #0]
 800e1ba:	e047      	b.n	800e24c <USB_EPStartXfer+0x6a6>
 800e1bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1c0:	085b      	lsrs	r3, r3, #1
 800e1c2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800e1c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1ca:	f003 0301 	and.w	r3, r3, #1
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d004      	beq.n	800e1dc <USB_EPStartXfer+0x636>
 800e1d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800e1d6:	3301      	adds	r3, #1
 800e1d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800e1dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1de:	881b      	ldrh	r3, [r3, #0]
 800e1e0:	b29a      	uxth	r2, r3
 800e1e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800e1e6:	b29b      	uxth	r3, r3
 800e1e8:	029b      	lsls	r3, r3, #10
 800e1ea:	b29b      	uxth	r3, r3
 800e1ec:	4313      	orrs	r3, r2
 800e1ee:	b29a      	uxth	r2, r3
 800e1f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1f2:	801a      	strh	r2, [r3, #0]
 800e1f4:	e02a      	b.n	800e24c <USB_EPStartXfer+0x6a6>
 800e1f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	785b      	ldrb	r3, [r3, #1]
 800e202:	2b01      	cmp	r3, #1
 800e204:	d122      	bne.n	800e24c <USB_EPStartXfer+0x6a6>
 800e206:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e20a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	653b      	str	r3, [r7, #80]	@ 0x50
 800e212:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e216:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e220:	b29b      	uxth	r3, r3
 800e222:	461a      	mov	r2, r3
 800e224:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e226:	4413      	add	r3, r2
 800e228:	653b      	str	r3, [r7, #80]	@ 0x50
 800e22a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e22e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	781b      	ldrb	r3, [r3, #0]
 800e236:	00da      	lsls	r2, r3, #3
 800e238:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e23a:	4413      	add	r3, r2
 800e23c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e240:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e246:	b29a      	uxth	r2, r3
 800e248:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e24a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e24c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e250:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	891b      	ldrh	r3, [r3, #8]
 800e258:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e25c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e260:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	6959      	ldr	r1, [r3, #20]
 800e268:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e26c:	b29b      	uxth	r3, r3
 800e26e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e272:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800e276:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800e27a:	6800      	ldr	r0, [r0, #0]
 800e27c:	f001 f97e 	bl	800f57c <USB_WritePMA>
            ep->xfer_buff += len;
 800e280:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e284:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	695a      	ldr	r2, [r3, #20]
 800e28c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e290:	441a      	add	r2, r3
 800e292:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e296:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e29e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	6a1a      	ldr	r2, [r3, #32]
 800e2aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	691b      	ldr	r3, [r3, #16]
 800e2b6:	429a      	cmp	r2, r3
 800e2b8:	d90f      	bls.n	800e2da <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800e2ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	6a1a      	ldr	r2, [r3, #32]
 800e2c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e2ca:	1ad2      	subs	r2, r2, r3
 800e2cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	621a      	str	r2, [r3, #32]
 800e2d8:	e00e      	b.n	800e2f8 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800e2da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	6a1b      	ldr	r3, [r3, #32]
 800e2e6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800e2ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e2f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	643b      	str	r3, [r7, #64]	@ 0x40
 800e304:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e308:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	785b      	ldrb	r3, [r3, #1]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d177      	bne.n	800e404 <USB_EPStartXfer+0x85e>
 800e314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e318:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e320:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e324:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e32e:	b29b      	uxth	r3, r3
 800e330:	461a      	mov	r2, r3
 800e332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e334:	4413      	add	r3, r2
 800e336:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e33c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	781b      	ldrb	r3, [r3, #0]
 800e344:	00da      	lsls	r2, r3, #3
 800e346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e348:	4413      	add	r3, r2
 800e34a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e34e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e352:	881b      	ldrh	r3, [r3, #0]
 800e354:	b29b      	uxth	r3, r3
 800e356:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e35a:	b29a      	uxth	r2, r3
 800e35c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e35e:	801a      	strh	r2, [r3, #0]
 800e360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e364:	2b3e      	cmp	r3, #62	@ 0x3e
 800e366:	d921      	bls.n	800e3ac <USB_EPStartXfer+0x806>
 800e368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e36c:	095b      	lsrs	r3, r3, #5
 800e36e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800e372:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e376:	f003 031f 	and.w	r3, r3, #31
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d104      	bne.n	800e388 <USB_EPStartXfer+0x7e2>
 800e37e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e382:	3b01      	subs	r3, #1
 800e384:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800e388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e38a:	881b      	ldrh	r3, [r3, #0]
 800e38c:	b29a      	uxth	r2, r3
 800e38e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e392:	b29b      	uxth	r3, r3
 800e394:	029b      	lsls	r3, r3, #10
 800e396:	b29b      	uxth	r3, r3
 800e398:	4313      	orrs	r3, r2
 800e39a:	b29b      	uxth	r3, r3
 800e39c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e3a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e3a4:	b29a      	uxth	r2, r3
 800e3a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3a8:	801a      	strh	r2, [r3, #0]
 800e3aa:	e050      	b.n	800e44e <USB_EPStartXfer+0x8a8>
 800e3ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d10a      	bne.n	800e3ca <USB_EPStartXfer+0x824>
 800e3b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3b6:	881b      	ldrh	r3, [r3, #0]
 800e3b8:	b29b      	uxth	r3, r3
 800e3ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e3be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e3c2:	b29a      	uxth	r2, r3
 800e3c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3c6:	801a      	strh	r2, [r3, #0]
 800e3c8:	e041      	b.n	800e44e <USB_EPStartXfer+0x8a8>
 800e3ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3ce:	085b      	lsrs	r3, r3, #1
 800e3d0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800e3d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3d8:	f003 0301 	and.w	r3, r3, #1
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d004      	beq.n	800e3ea <USB_EPStartXfer+0x844>
 800e3e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e3e4:	3301      	adds	r3, #1
 800e3e6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800e3ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3ec:	881b      	ldrh	r3, [r3, #0]
 800e3ee:	b29a      	uxth	r2, r3
 800e3f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e3f4:	b29b      	uxth	r3, r3
 800e3f6:	029b      	lsls	r3, r3, #10
 800e3f8:	b29b      	uxth	r3, r3
 800e3fa:	4313      	orrs	r3, r2
 800e3fc:	b29a      	uxth	r2, r3
 800e3fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e400:	801a      	strh	r2, [r3, #0]
 800e402:	e024      	b.n	800e44e <USB_EPStartXfer+0x8a8>
 800e404:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e408:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	785b      	ldrb	r3, [r3, #1]
 800e410:	2b01      	cmp	r3, #1
 800e412:	d11c      	bne.n	800e44e <USB_EPStartXfer+0x8a8>
 800e414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e418:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e422:	b29b      	uxth	r3, r3
 800e424:	461a      	mov	r2, r3
 800e426:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e428:	4413      	add	r3, r2
 800e42a:	643b      	str	r3, [r7, #64]	@ 0x40
 800e42c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e430:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	781b      	ldrb	r3, [r3, #0]
 800e438:	00da      	lsls	r2, r3, #3
 800e43a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e43c:	4413      	add	r3, r2
 800e43e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e442:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e444:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e448:	b29a      	uxth	r2, r3
 800e44a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e44c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800e44e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e452:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	895b      	ldrh	r3, [r3, #10]
 800e45a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e45e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e462:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	6959      	ldr	r1, [r3, #20]
 800e46a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e46e:	b29b      	uxth	r3, r3
 800e470:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e474:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800e478:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800e47c:	6800      	ldr	r0, [r0, #0]
 800e47e:	f001 f87d 	bl	800f57c <USB_WritePMA>
 800e482:	e227      	b.n	800e8d4 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800e484:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e488:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	6a1b      	ldr	r3, [r3, #32]
 800e490:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800e494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e498:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e49c:	681a      	ldr	r2, [r3, #0]
 800e49e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	781b      	ldrb	r3, [r3, #0]
 800e4aa:	009b      	lsls	r3, r3, #2
 800e4ac:	4413      	add	r3, r2
 800e4ae:	881b      	ldrh	r3, [r3, #0]
 800e4b0:	b29b      	uxth	r3, r3
 800e4b2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800e4b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e4ba:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800e4be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e4c6:	681a      	ldr	r2, [r3, #0]
 800e4c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	781b      	ldrb	r3, [r3, #0]
 800e4d4:	009b      	lsls	r3, r3, #2
 800e4d6:	441a      	add	r2, r3
 800e4d8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800e4dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e4e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e4e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e4e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e4ec:	b29b      	uxth	r3, r3
 800e4ee:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e4f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e4fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e500:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e50a:	b29b      	uxth	r3, r3
 800e50c:	461a      	mov	r2, r3
 800e50e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e510:	4413      	add	r3, r2
 800e512:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e514:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e518:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	781b      	ldrb	r3, [r3, #0]
 800e520:	00da      	lsls	r2, r3, #3
 800e522:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e524:	4413      	add	r3, r2
 800e526:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e52a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e52c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e530:	b29a      	uxth	r2, r3
 800e532:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e534:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e536:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e53a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	891b      	ldrh	r3, [r3, #8]
 800e542:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e546:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e54a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	6959      	ldr	r1, [r3, #20]
 800e552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e556:	b29b      	uxth	r3, r3
 800e558:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e55c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800e560:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800e564:	6800      	ldr	r0, [r0, #0]
 800e566:	f001 f809 	bl	800f57c <USB_WritePMA>
 800e56a:	e1b3      	b.n	800e8d4 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800e56c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e570:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	6a1a      	ldr	r2, [r3, #32]
 800e578:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e57c:	1ad2      	subs	r2, r2, r3
 800e57e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e582:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e58a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e58e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e592:	681a      	ldr	r2, [r3, #0]
 800e594:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e598:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	781b      	ldrb	r3, [r3, #0]
 800e5a0:	009b      	lsls	r3, r3, #2
 800e5a2:	4413      	add	r3, r2
 800e5a4:	881b      	ldrh	r3, [r3, #0]
 800e5a6:	b29b      	uxth	r3, r3
 800e5a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	f000 80c6 	beq.w	800e73e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e5b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	673b      	str	r3, [r7, #112]	@ 0x70
 800e5be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	785b      	ldrb	r3, [r3, #1]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d177      	bne.n	800e6be <USB_EPStartXfer+0xb18>
 800e5ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e5da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e5e8:	b29b      	uxth	r3, r3
 800e5ea:	461a      	mov	r2, r3
 800e5ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e5ee:	4413      	add	r3, r2
 800e5f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e5f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	781b      	ldrb	r3, [r3, #0]
 800e5fe:	00da      	lsls	r2, r3, #3
 800e600:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e602:	4413      	add	r3, r2
 800e604:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e608:	667b      	str	r3, [r7, #100]	@ 0x64
 800e60a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e60c:	881b      	ldrh	r3, [r3, #0]
 800e60e:	b29b      	uxth	r3, r3
 800e610:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e614:	b29a      	uxth	r2, r3
 800e616:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e618:	801a      	strh	r2, [r3, #0]
 800e61a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e61e:	2b3e      	cmp	r3, #62	@ 0x3e
 800e620:	d921      	bls.n	800e666 <USB_EPStartXfer+0xac0>
 800e622:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e626:	095b      	lsrs	r3, r3, #5
 800e628:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800e62c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e630:	f003 031f 	and.w	r3, r3, #31
 800e634:	2b00      	cmp	r3, #0
 800e636:	d104      	bne.n	800e642 <USB_EPStartXfer+0xa9c>
 800e638:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800e63c:	3b01      	subs	r3, #1
 800e63e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800e642:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e644:	881b      	ldrh	r3, [r3, #0]
 800e646:	b29a      	uxth	r2, r3
 800e648:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800e64c:	b29b      	uxth	r3, r3
 800e64e:	029b      	lsls	r3, r3, #10
 800e650:	b29b      	uxth	r3, r3
 800e652:	4313      	orrs	r3, r2
 800e654:	b29b      	uxth	r3, r3
 800e656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e65a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e65e:	b29a      	uxth	r2, r3
 800e660:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e662:	801a      	strh	r2, [r3, #0]
 800e664:	e050      	b.n	800e708 <USB_EPStartXfer+0xb62>
 800e666:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d10a      	bne.n	800e684 <USB_EPStartXfer+0xade>
 800e66e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e670:	881b      	ldrh	r3, [r3, #0]
 800e672:	b29b      	uxth	r3, r3
 800e674:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e678:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e67c:	b29a      	uxth	r2, r3
 800e67e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e680:	801a      	strh	r2, [r3, #0]
 800e682:	e041      	b.n	800e708 <USB_EPStartXfer+0xb62>
 800e684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e688:	085b      	lsrs	r3, r3, #1
 800e68a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800e68e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e692:	f003 0301 	and.w	r3, r3, #1
 800e696:	2b00      	cmp	r3, #0
 800e698:	d004      	beq.n	800e6a4 <USB_EPStartXfer+0xafe>
 800e69a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800e69e:	3301      	adds	r3, #1
 800e6a0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800e6a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e6a6:	881b      	ldrh	r3, [r3, #0]
 800e6a8:	b29a      	uxth	r2, r3
 800e6aa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800e6ae:	b29b      	uxth	r3, r3
 800e6b0:	029b      	lsls	r3, r3, #10
 800e6b2:	b29b      	uxth	r3, r3
 800e6b4:	4313      	orrs	r3, r2
 800e6b6:	b29a      	uxth	r2, r3
 800e6b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e6ba:	801a      	strh	r2, [r3, #0]
 800e6bc:	e024      	b.n	800e708 <USB_EPStartXfer+0xb62>
 800e6be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e6c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	785b      	ldrb	r3, [r3, #1]
 800e6ca:	2b01      	cmp	r3, #1
 800e6cc:	d11c      	bne.n	800e708 <USB_EPStartXfer+0xb62>
 800e6ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e6d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e6dc:	b29b      	uxth	r3, r3
 800e6de:	461a      	mov	r2, r3
 800e6e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e6e2:	4413      	add	r3, r2
 800e6e4:	673b      	str	r3, [r7, #112]	@ 0x70
 800e6e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e6ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	781b      	ldrb	r3, [r3, #0]
 800e6f2:	00da      	lsls	r2, r3, #3
 800e6f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e6f6:	4413      	add	r3, r2
 800e6f8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e6fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e6fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e702:	b29a      	uxth	r2, r3
 800e704:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e706:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800e708:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e70c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	895b      	ldrh	r3, [r3, #10]
 800e714:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e718:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e71c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	6959      	ldr	r1, [r3, #20]
 800e724:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e728:	b29b      	uxth	r3, r3
 800e72a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e72e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800e732:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800e736:	6800      	ldr	r0, [r0, #0]
 800e738:	f000 ff20 	bl	800f57c <USB_WritePMA>
 800e73c:	e0ca      	b.n	800e8d4 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e73e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e742:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	785b      	ldrb	r3, [r3, #1]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d177      	bne.n	800e83e <USB_EPStartXfer+0xc98>
 800e74e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e752:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e75a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e75e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e768:	b29b      	uxth	r3, r3
 800e76a:	461a      	mov	r2, r3
 800e76c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e76e:	4413      	add	r3, r2
 800e770:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e772:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e776:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	781b      	ldrb	r3, [r3, #0]
 800e77e:	00da      	lsls	r2, r3, #3
 800e780:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e782:	4413      	add	r3, r2
 800e784:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e788:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e78a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e78c:	881b      	ldrh	r3, [r3, #0]
 800e78e:	b29b      	uxth	r3, r3
 800e790:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e794:	b29a      	uxth	r2, r3
 800e796:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e798:	801a      	strh	r2, [r3, #0]
 800e79a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e79e:	2b3e      	cmp	r3, #62	@ 0x3e
 800e7a0:	d921      	bls.n	800e7e6 <USB_EPStartXfer+0xc40>
 800e7a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7a6:	095b      	lsrs	r3, r3, #5
 800e7a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800e7ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7b0:	f003 031f 	and.w	r3, r3, #31
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d104      	bne.n	800e7c2 <USB_EPStartXfer+0xc1c>
 800e7b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e7bc:	3b01      	subs	r3, #1
 800e7be:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800e7c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e7c4:	881b      	ldrh	r3, [r3, #0]
 800e7c6:	b29a      	uxth	r2, r3
 800e7c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e7cc:	b29b      	uxth	r3, r3
 800e7ce:	029b      	lsls	r3, r3, #10
 800e7d0:	b29b      	uxth	r3, r3
 800e7d2:	4313      	orrs	r3, r2
 800e7d4:	b29b      	uxth	r3, r3
 800e7d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e7da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e7de:	b29a      	uxth	r2, r3
 800e7e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e7e2:	801a      	strh	r2, [r3, #0]
 800e7e4:	e05c      	b.n	800e8a0 <USB_EPStartXfer+0xcfa>
 800e7e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d10a      	bne.n	800e804 <USB_EPStartXfer+0xc5e>
 800e7ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e7f0:	881b      	ldrh	r3, [r3, #0]
 800e7f2:	b29b      	uxth	r3, r3
 800e7f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e7f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e7fc:	b29a      	uxth	r2, r3
 800e7fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e800:	801a      	strh	r2, [r3, #0]
 800e802:	e04d      	b.n	800e8a0 <USB_EPStartXfer+0xcfa>
 800e804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e808:	085b      	lsrs	r3, r3, #1
 800e80a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800e80e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e812:	f003 0301 	and.w	r3, r3, #1
 800e816:	2b00      	cmp	r3, #0
 800e818:	d004      	beq.n	800e824 <USB_EPStartXfer+0xc7e>
 800e81a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e81e:	3301      	adds	r3, #1
 800e820:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800e824:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e826:	881b      	ldrh	r3, [r3, #0]
 800e828:	b29a      	uxth	r2, r3
 800e82a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e82e:	b29b      	uxth	r3, r3
 800e830:	029b      	lsls	r3, r3, #10
 800e832:	b29b      	uxth	r3, r3
 800e834:	4313      	orrs	r3, r2
 800e836:	b29a      	uxth	r2, r3
 800e838:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e83a:	801a      	strh	r2, [r3, #0]
 800e83c:	e030      	b.n	800e8a0 <USB_EPStartXfer+0xcfa>
 800e83e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e842:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	785b      	ldrb	r3, [r3, #1]
 800e84a:	2b01      	cmp	r3, #1
 800e84c:	d128      	bne.n	800e8a0 <USB_EPStartXfer+0xcfa>
 800e84e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e852:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e85c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e860:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e86a:	b29b      	uxth	r3, r3
 800e86c:	461a      	mov	r2, r3
 800e86e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e872:	4413      	add	r3, r2
 800e874:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e878:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e87c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	781b      	ldrb	r3, [r3, #0]
 800e884:	00da      	lsls	r2, r3, #3
 800e886:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e88a:	4413      	add	r3, r2
 800e88c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e890:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e898:	b29a      	uxth	r2, r3
 800e89a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e89e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e8a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e8a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	891b      	ldrh	r3, [r3, #8]
 800e8ac:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e8b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e8b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	6959      	ldr	r1, [r3, #20]
 800e8bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8c0:	b29b      	uxth	r3, r3
 800e8c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e8c6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800e8ca:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800e8ce:	6800      	ldr	r0, [r0, #0]
 800e8d0:	f000 fe54 	bl	800f57c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800e8d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e8d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e8dc:	681a      	ldr	r2, [r3, #0]
 800e8de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e8e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	781b      	ldrb	r3, [r3, #0]
 800e8ea:	009b      	lsls	r3, r3, #2
 800e8ec:	4413      	add	r3, r2
 800e8ee:	881b      	ldrh	r3, [r3, #0]
 800e8f0:	b29b      	uxth	r3, r3
 800e8f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e8f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e8fa:	817b      	strh	r3, [r7, #10]
 800e8fc:	897b      	ldrh	r3, [r7, #10]
 800e8fe:	f083 0310 	eor.w	r3, r3, #16
 800e902:	817b      	strh	r3, [r7, #10]
 800e904:	897b      	ldrh	r3, [r7, #10]
 800e906:	f083 0320 	eor.w	r3, r3, #32
 800e90a:	817b      	strh	r3, [r7, #10]
 800e90c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e910:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e914:	681a      	ldr	r2, [r3, #0]
 800e916:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e91a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	781b      	ldrb	r3, [r3, #0]
 800e922:	009b      	lsls	r3, r3, #2
 800e924:	441a      	add	r2, r3
 800e926:	897b      	ldrh	r3, [r7, #10]
 800e928:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e92c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e930:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e934:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e938:	b29b      	uxth	r3, r3
 800e93a:	8013      	strh	r3, [r2, #0]
 800e93c:	f000 bcde 	b.w	800f2fc <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800e940:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e944:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	7b1b      	ldrb	r3, [r3, #12]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	f040 80bb 	bne.w	800eac8 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800e952:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e956:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	699a      	ldr	r2, [r3, #24]
 800e95e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e962:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	691b      	ldr	r3, [r3, #16]
 800e96a:	429a      	cmp	r2, r3
 800e96c:	d917      	bls.n	800e99e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800e96e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e972:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	691b      	ldr	r3, [r3, #16]
 800e97a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800e97e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e982:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	699a      	ldr	r2, [r3, #24]
 800e98a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e98e:	1ad2      	subs	r2, r2, r3
 800e990:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e994:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	619a      	str	r2, [r3, #24]
 800e99c:	e00e      	b.n	800e9bc <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800e99e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e9a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	699b      	ldr	r3, [r3, #24]
 800e9aa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800e9ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e9b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800e9bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e9c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e9ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e9ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e9d8:	b29b      	uxth	r3, r3
 800e9da:	461a      	mov	r2, r3
 800e9dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e9e0:	4413      	add	r3, r2
 800e9e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e9e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e9ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	781b      	ldrb	r3, [r3, #0]
 800e9f2:	00da      	lsls	r2, r3, #3
 800e9f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e9f8:	4413      	add	r3, r2
 800e9fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e9fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ea02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ea06:	881b      	ldrh	r3, [r3, #0]
 800ea08:	b29b      	uxth	r3, r3
 800ea0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ea0e:	b29a      	uxth	r2, r3
 800ea10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ea14:	801a      	strh	r2, [r3, #0]
 800ea16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea1a:	2b3e      	cmp	r3, #62	@ 0x3e
 800ea1c:	d924      	bls.n	800ea68 <USB_EPStartXfer+0xec2>
 800ea1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea22:	095b      	lsrs	r3, r3, #5
 800ea24:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ea28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea2c:	f003 031f 	and.w	r3, r3, #31
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d104      	bne.n	800ea3e <USB_EPStartXfer+0xe98>
 800ea34:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800ea38:	3b01      	subs	r3, #1
 800ea3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ea3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ea42:	881b      	ldrh	r3, [r3, #0]
 800ea44:	b29a      	uxth	r2, r3
 800ea46:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800ea4a:	b29b      	uxth	r3, r3
 800ea4c:	029b      	lsls	r3, r3, #10
 800ea4e:	b29b      	uxth	r3, r3
 800ea50:	4313      	orrs	r3, r2
 800ea52:	b29b      	uxth	r3, r3
 800ea54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ea58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ea5c:	b29a      	uxth	r2, r3
 800ea5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ea62:	801a      	strh	r2, [r3, #0]
 800ea64:	f000 bc10 	b.w	800f288 <USB_EPStartXfer+0x16e2>
 800ea68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d10c      	bne.n	800ea8a <USB_EPStartXfer+0xee4>
 800ea70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ea74:	881b      	ldrh	r3, [r3, #0]
 800ea76:	b29b      	uxth	r3, r3
 800ea78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ea7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ea80:	b29a      	uxth	r2, r3
 800ea82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ea86:	801a      	strh	r2, [r3, #0]
 800ea88:	e3fe      	b.n	800f288 <USB_EPStartXfer+0x16e2>
 800ea8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea8e:	085b      	lsrs	r3, r3, #1
 800ea90:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ea94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea98:	f003 0301 	and.w	r3, r3, #1
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d004      	beq.n	800eaaa <USB_EPStartXfer+0xf04>
 800eaa0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800eaa4:	3301      	adds	r3, #1
 800eaa6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800eaaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800eaae:	881b      	ldrh	r3, [r3, #0]
 800eab0:	b29a      	uxth	r2, r3
 800eab2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800eab6:	b29b      	uxth	r3, r3
 800eab8:	029b      	lsls	r3, r3, #10
 800eaba:	b29b      	uxth	r3, r3
 800eabc:	4313      	orrs	r3, r2
 800eabe:	b29a      	uxth	r2, r3
 800eac0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800eac4:	801a      	strh	r2, [r3, #0]
 800eac6:	e3df      	b.n	800f288 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800eac8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eacc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	78db      	ldrb	r3, [r3, #3]
 800ead4:	2b02      	cmp	r3, #2
 800ead6:	f040 8218 	bne.w	800ef0a <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800eada:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eade:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	785b      	ldrb	r3, [r3, #1]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	f040 809d 	bne.w	800ec26 <USB_EPStartXfer+0x1080>
 800eaec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eaf0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800eafa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eafe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800eb08:	b29b      	uxth	r3, r3
 800eb0a:	461a      	mov	r2, r3
 800eb0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eb10:	4413      	add	r3, r2
 800eb12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800eb16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eb1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	781b      	ldrb	r3, [r3, #0]
 800eb22:	00da      	lsls	r2, r3, #3
 800eb24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eb28:	4413      	add	r3, r2
 800eb2a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800eb2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800eb32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800eb36:	881b      	ldrh	r3, [r3, #0]
 800eb38:	b29b      	uxth	r3, r3
 800eb3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800eb3e:	b29a      	uxth	r2, r3
 800eb40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800eb44:	801a      	strh	r2, [r3, #0]
 800eb46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eb4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	691b      	ldr	r3, [r3, #16]
 800eb52:	2b3e      	cmp	r3, #62	@ 0x3e
 800eb54:	d92b      	bls.n	800ebae <USB_EPStartXfer+0x1008>
 800eb56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eb5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	691b      	ldr	r3, [r3, #16]
 800eb62:	095b      	lsrs	r3, r3, #5
 800eb64:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800eb68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eb6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	691b      	ldr	r3, [r3, #16]
 800eb74:	f003 031f 	and.w	r3, r3, #31
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d104      	bne.n	800eb86 <USB_EPStartXfer+0xfe0>
 800eb7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb80:	3b01      	subs	r3, #1
 800eb82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800eb86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800eb8a:	881b      	ldrh	r3, [r3, #0]
 800eb8c:	b29a      	uxth	r2, r3
 800eb8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb92:	b29b      	uxth	r3, r3
 800eb94:	029b      	lsls	r3, r3, #10
 800eb96:	b29b      	uxth	r3, r3
 800eb98:	4313      	orrs	r3, r2
 800eb9a:	b29b      	uxth	r3, r3
 800eb9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eba0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eba4:	b29a      	uxth	r2, r3
 800eba6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ebaa:	801a      	strh	r2, [r3, #0]
 800ebac:	e070      	b.n	800ec90 <USB_EPStartXfer+0x10ea>
 800ebae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ebb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	691b      	ldr	r3, [r3, #16]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d10c      	bne.n	800ebd8 <USB_EPStartXfer+0x1032>
 800ebbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ebc2:	881b      	ldrh	r3, [r3, #0]
 800ebc4:	b29b      	uxth	r3, r3
 800ebc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ebca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ebce:	b29a      	uxth	r2, r3
 800ebd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ebd4:	801a      	strh	r2, [r3, #0]
 800ebd6:	e05b      	b.n	800ec90 <USB_EPStartXfer+0x10ea>
 800ebd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ebdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	691b      	ldr	r3, [r3, #16]
 800ebe4:	085b      	lsrs	r3, r3, #1
 800ebe6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ebea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ebee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	691b      	ldr	r3, [r3, #16]
 800ebf6:	f003 0301 	and.w	r3, r3, #1
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d004      	beq.n	800ec08 <USB_EPStartXfer+0x1062>
 800ebfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec02:	3301      	adds	r3, #1
 800ec04:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ec08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ec0c:	881b      	ldrh	r3, [r3, #0]
 800ec0e:	b29a      	uxth	r2, r3
 800ec10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec14:	b29b      	uxth	r3, r3
 800ec16:	029b      	lsls	r3, r3, #10
 800ec18:	b29b      	uxth	r3, r3
 800ec1a:	4313      	orrs	r3, r2
 800ec1c:	b29a      	uxth	r2, r3
 800ec1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ec22:	801a      	strh	r2, [r3, #0]
 800ec24:	e034      	b.n	800ec90 <USB_EPStartXfer+0x10ea>
 800ec26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	785b      	ldrb	r3, [r3, #1]
 800ec32:	2b01      	cmp	r3, #1
 800ec34:	d12c      	bne.n	800ec90 <USB_EPStartXfer+0x10ea>
 800ec36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ec44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ec52:	b29b      	uxth	r3, r3
 800ec54:	461a      	mov	r2, r3
 800ec56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ec5a:	4413      	add	r3, r2
 800ec5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ec60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	781b      	ldrb	r3, [r3, #0]
 800ec6c:	00da      	lsls	r2, r3, #3
 800ec6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ec72:	4413      	add	r3, r2
 800ec74:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ec78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ec7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	691b      	ldr	r3, [r3, #16]
 800ec88:	b29a      	uxth	r2, r3
 800ec8a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ec8e:	801a      	strh	r2, [r3, #0]
 800ec90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ec9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eca2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	785b      	ldrb	r3, [r3, #1]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	f040 809d 	bne.w	800edea <USB_EPStartXfer+0x1244>
 800ecb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ecb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ecbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ecc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800eccc:	b29b      	uxth	r3, r3
 800ecce:	461a      	mov	r2, r3
 800ecd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ecd4:	4413      	add	r3, r2
 800ecd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ecda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ecde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	781b      	ldrb	r3, [r3, #0]
 800ece6:	00da      	lsls	r2, r3, #3
 800ece8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ecec:	4413      	add	r3, r2
 800ecee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ecf2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ecf6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ecfa:	881b      	ldrh	r3, [r3, #0]
 800ecfc:	b29b      	uxth	r3, r3
 800ecfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ed02:	b29a      	uxth	r2, r3
 800ed04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ed08:	801a      	strh	r2, [r3, #0]
 800ed0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ed0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	691b      	ldr	r3, [r3, #16]
 800ed16:	2b3e      	cmp	r3, #62	@ 0x3e
 800ed18:	d92b      	bls.n	800ed72 <USB_EPStartXfer+0x11cc>
 800ed1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ed1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	691b      	ldr	r3, [r3, #16]
 800ed26:	095b      	lsrs	r3, r3, #5
 800ed28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ed2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ed30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	691b      	ldr	r3, [r3, #16]
 800ed38:	f003 031f 	and.w	r3, r3, #31
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d104      	bne.n	800ed4a <USB_EPStartXfer+0x11a4>
 800ed40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ed44:	3b01      	subs	r3, #1
 800ed46:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ed4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ed4e:	881b      	ldrh	r3, [r3, #0]
 800ed50:	b29a      	uxth	r2, r3
 800ed52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ed56:	b29b      	uxth	r3, r3
 800ed58:	029b      	lsls	r3, r3, #10
 800ed5a:	b29b      	uxth	r3, r3
 800ed5c:	4313      	orrs	r3, r2
 800ed5e:	b29b      	uxth	r3, r3
 800ed60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ed64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ed68:	b29a      	uxth	r2, r3
 800ed6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ed6e:	801a      	strh	r2, [r3, #0]
 800ed70:	e069      	b.n	800ee46 <USB_EPStartXfer+0x12a0>
 800ed72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ed76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	691b      	ldr	r3, [r3, #16]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d10c      	bne.n	800ed9c <USB_EPStartXfer+0x11f6>
 800ed82:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ed86:	881b      	ldrh	r3, [r3, #0]
 800ed88:	b29b      	uxth	r3, r3
 800ed8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ed8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ed92:	b29a      	uxth	r2, r3
 800ed94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ed98:	801a      	strh	r2, [r3, #0]
 800ed9a:	e054      	b.n	800ee46 <USB_EPStartXfer+0x12a0>
 800ed9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eda0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	691b      	ldr	r3, [r3, #16]
 800eda8:	085b      	lsrs	r3, r3, #1
 800edaa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800edae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800edb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	691b      	ldr	r3, [r3, #16]
 800edba:	f003 0301 	and.w	r3, r3, #1
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d004      	beq.n	800edcc <USB_EPStartXfer+0x1226>
 800edc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800edc6:	3301      	adds	r3, #1
 800edc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800edcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800edd0:	881b      	ldrh	r3, [r3, #0]
 800edd2:	b29a      	uxth	r2, r3
 800edd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800edd8:	b29b      	uxth	r3, r3
 800edda:	029b      	lsls	r3, r3, #10
 800eddc:	b29b      	uxth	r3, r3
 800edde:	4313      	orrs	r3, r2
 800ede0:	b29a      	uxth	r2, r3
 800ede2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ede6:	801a      	strh	r2, [r3, #0]
 800ede8:	e02d      	b.n	800ee46 <USB_EPStartXfer+0x12a0>
 800edea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800edee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	785b      	ldrb	r3, [r3, #1]
 800edf6:	2b01      	cmp	r3, #1
 800edf8:	d125      	bne.n	800ee46 <USB_EPStartXfer+0x12a0>
 800edfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800edfe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ee08:	b29b      	uxth	r3, r3
 800ee0a:	461a      	mov	r2, r3
 800ee0c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ee10:	4413      	add	r3, r2
 800ee12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ee16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	781b      	ldrb	r3, [r3, #0]
 800ee22:	00da      	lsls	r2, r3, #3
 800ee24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ee28:	4413      	add	r3, r2
 800ee2a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ee2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ee32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	691b      	ldr	r3, [r3, #16]
 800ee3e:	b29a      	uxth	r2, r3
 800ee40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ee44:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800ee46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	69db      	ldr	r3, [r3, #28]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	f000 8218 	beq.w	800f288 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800ee58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ee60:	681a      	ldr	r2, [r3, #0]
 800ee62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	781b      	ldrb	r3, [r3, #0]
 800ee6e:	009b      	lsls	r3, r3, #2
 800ee70:	4413      	add	r3, r2
 800ee72:	881b      	ldrh	r3, [r3, #0]
 800ee74:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ee78:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800ee7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d005      	beq.n	800ee90 <USB_EPStartXfer+0x12ea>
 800ee84:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800ee88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d10d      	bne.n	800eeac <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ee90:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800ee94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	f040 81f5 	bne.w	800f288 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ee9e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800eea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	f040 81ee 	bne.w	800f288 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800eeac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eeb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800eeb4:	681a      	ldr	r2, [r3, #0]
 800eeb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eeba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	781b      	ldrb	r3, [r3, #0]
 800eec2:	009b      	lsls	r3, r3, #2
 800eec4:	4413      	add	r3, r2
 800eec6:	881b      	ldrh	r3, [r3, #0]
 800eec8:	b29b      	uxth	r3, r3
 800eeca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800eece:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eed2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800eed6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eeda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800eede:	681a      	ldr	r2, [r3, #0]
 800eee0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eee4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	781b      	ldrb	r3, [r3, #0]
 800eeec:	009b      	lsls	r3, r3, #2
 800eeee:	441a      	add	r2, r3
 800eef0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800eef4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800eef8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800eefc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ef00:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ef04:	b29b      	uxth	r3, r3
 800ef06:	8013      	strh	r3, [r2, #0]
 800ef08:	e1be      	b.n	800f288 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800ef0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	78db      	ldrb	r3, [r3, #3]
 800ef16:	2b01      	cmp	r3, #1
 800ef18:	f040 81b4 	bne.w	800f284 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800ef1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	699a      	ldr	r2, [r3, #24]
 800ef28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	691b      	ldr	r3, [r3, #16]
 800ef34:	429a      	cmp	r2, r3
 800ef36:	d917      	bls.n	800ef68 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800ef38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	691b      	ldr	r3, [r3, #16]
 800ef44:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800ef48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	699a      	ldr	r2, [r3, #24]
 800ef54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef58:	1ad2      	subs	r2, r2, r3
 800ef5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	619a      	str	r2, [r3, #24]
 800ef66:	e00e      	b.n	800ef86 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800ef68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	699b      	ldr	r3, [r3, #24]
 800ef74:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800ef78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	2200      	movs	r2, #0
 800ef84:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ef86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	785b      	ldrb	r3, [r3, #1]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	f040 8085 	bne.w	800f0a2 <USB_EPStartXfer+0x14fc>
 800ef98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800efa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800efaa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800efb4:	b29b      	uxth	r3, r3
 800efb6:	461a      	mov	r2, r3
 800efb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800efbc:	4413      	add	r3, r2
 800efbe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800efc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800efc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	781b      	ldrb	r3, [r3, #0]
 800efce:	00da      	lsls	r2, r3, #3
 800efd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800efd4:	4413      	add	r3, r2
 800efd6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800efda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800efde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800efe2:	881b      	ldrh	r3, [r3, #0]
 800efe4:	b29b      	uxth	r3, r3
 800efe6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800efea:	b29a      	uxth	r2, r3
 800efec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800eff0:	801a      	strh	r2, [r3, #0]
 800eff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eff6:	2b3e      	cmp	r3, #62	@ 0x3e
 800eff8:	d923      	bls.n	800f042 <USB_EPStartXfer+0x149c>
 800effa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800effe:	095b      	lsrs	r3, r3, #5
 800f000:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800f004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f008:	f003 031f 	and.w	r3, r3, #31
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d104      	bne.n	800f01a <USB_EPStartXfer+0x1474>
 800f010:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f014:	3b01      	subs	r3, #1
 800f016:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800f01a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f01e:	881b      	ldrh	r3, [r3, #0]
 800f020:	b29a      	uxth	r2, r3
 800f022:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f026:	b29b      	uxth	r3, r3
 800f028:	029b      	lsls	r3, r3, #10
 800f02a:	b29b      	uxth	r3, r3
 800f02c:	4313      	orrs	r3, r2
 800f02e:	b29b      	uxth	r3, r3
 800f030:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f034:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f038:	b29a      	uxth	r2, r3
 800f03a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f03e:	801a      	strh	r2, [r3, #0]
 800f040:	e060      	b.n	800f104 <USB_EPStartXfer+0x155e>
 800f042:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f046:	2b00      	cmp	r3, #0
 800f048:	d10c      	bne.n	800f064 <USB_EPStartXfer+0x14be>
 800f04a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f04e:	881b      	ldrh	r3, [r3, #0]
 800f050:	b29b      	uxth	r3, r3
 800f052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f05a:	b29a      	uxth	r2, r3
 800f05c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f060:	801a      	strh	r2, [r3, #0]
 800f062:	e04f      	b.n	800f104 <USB_EPStartXfer+0x155e>
 800f064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f068:	085b      	lsrs	r3, r3, #1
 800f06a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800f06e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f072:	f003 0301 	and.w	r3, r3, #1
 800f076:	2b00      	cmp	r3, #0
 800f078:	d004      	beq.n	800f084 <USB_EPStartXfer+0x14de>
 800f07a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f07e:	3301      	adds	r3, #1
 800f080:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800f084:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f088:	881b      	ldrh	r3, [r3, #0]
 800f08a:	b29a      	uxth	r2, r3
 800f08c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f090:	b29b      	uxth	r3, r3
 800f092:	029b      	lsls	r3, r3, #10
 800f094:	b29b      	uxth	r3, r3
 800f096:	4313      	orrs	r3, r2
 800f098:	b29a      	uxth	r2, r3
 800f09a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f09e:	801a      	strh	r2, [r3, #0]
 800f0a0:	e030      	b.n	800f104 <USB_EPStartXfer+0x155e>
 800f0a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f0a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	785b      	ldrb	r3, [r3, #1]
 800f0ae:	2b01      	cmp	r3, #1
 800f0b0:	d128      	bne.n	800f104 <USB_EPStartXfer+0x155e>
 800f0b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f0b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800f0c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f0c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f0ce:	b29b      	uxth	r3, r3
 800f0d0:	461a      	mov	r2, r3
 800f0d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f0d6:	4413      	add	r3, r2
 800f0d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800f0dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f0e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	781b      	ldrb	r3, [r3, #0]
 800f0e8:	00da      	lsls	r2, r3, #3
 800f0ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f0ee:	4413      	add	r3, r2
 800f0f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f0f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f0f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f0fc:	b29a      	uxth	r2, r3
 800f0fe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800f102:	801a      	strh	r2, [r3, #0]
 800f104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f108:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f112:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f116:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	785b      	ldrb	r3, [r3, #1]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	f040 8085 	bne.w	800f22e <USB_EPStartXfer+0x1688>
 800f124:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f128:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800f132:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f136:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f140:	b29b      	uxth	r3, r3
 800f142:	461a      	mov	r2, r3
 800f144:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800f148:	4413      	add	r3, r2
 800f14a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800f14e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f152:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	781b      	ldrb	r3, [r3, #0]
 800f15a:	00da      	lsls	r2, r3, #3
 800f15c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800f160:	4413      	add	r3, r2
 800f162:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f166:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f16a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f16e:	881b      	ldrh	r3, [r3, #0]
 800f170:	b29b      	uxth	r3, r3
 800f172:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f176:	b29a      	uxth	r2, r3
 800f178:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f17c:	801a      	strh	r2, [r3, #0]
 800f17e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f182:	2b3e      	cmp	r3, #62	@ 0x3e
 800f184:	d923      	bls.n	800f1ce <USB_EPStartXfer+0x1628>
 800f186:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f18a:	095b      	lsrs	r3, r3, #5
 800f18c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800f190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f194:	f003 031f 	and.w	r3, r3, #31
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d104      	bne.n	800f1a6 <USB_EPStartXfer+0x1600>
 800f19c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f1a0:	3b01      	subs	r3, #1
 800f1a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800f1a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f1aa:	881b      	ldrh	r3, [r3, #0]
 800f1ac:	b29a      	uxth	r2, r3
 800f1ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f1b2:	b29b      	uxth	r3, r3
 800f1b4:	029b      	lsls	r3, r3, #10
 800f1b6:	b29b      	uxth	r3, r3
 800f1b8:	4313      	orrs	r3, r2
 800f1ba:	b29b      	uxth	r3, r3
 800f1bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f1c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f1c4:	b29a      	uxth	r2, r3
 800f1c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f1ca:	801a      	strh	r2, [r3, #0]
 800f1cc:	e05c      	b.n	800f288 <USB_EPStartXfer+0x16e2>
 800f1ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d10c      	bne.n	800f1f0 <USB_EPStartXfer+0x164a>
 800f1d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f1da:	881b      	ldrh	r3, [r3, #0]
 800f1dc:	b29b      	uxth	r3, r3
 800f1de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f1e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f1e6:	b29a      	uxth	r2, r3
 800f1e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f1ec:	801a      	strh	r2, [r3, #0]
 800f1ee:	e04b      	b.n	800f288 <USB_EPStartXfer+0x16e2>
 800f1f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f1f4:	085b      	lsrs	r3, r3, #1
 800f1f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800f1fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f1fe:	f003 0301 	and.w	r3, r3, #1
 800f202:	2b00      	cmp	r3, #0
 800f204:	d004      	beq.n	800f210 <USB_EPStartXfer+0x166a>
 800f206:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f20a:	3301      	adds	r3, #1
 800f20c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800f210:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f214:	881b      	ldrh	r3, [r3, #0]
 800f216:	b29a      	uxth	r2, r3
 800f218:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f21c:	b29b      	uxth	r3, r3
 800f21e:	029b      	lsls	r3, r3, #10
 800f220:	b29b      	uxth	r3, r3
 800f222:	4313      	orrs	r3, r2
 800f224:	b29a      	uxth	r2, r3
 800f226:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f22a:	801a      	strh	r2, [r3, #0]
 800f22c:	e02c      	b.n	800f288 <USB_EPStartXfer+0x16e2>
 800f22e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f232:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	785b      	ldrb	r3, [r3, #1]
 800f23a:	2b01      	cmp	r3, #1
 800f23c:	d124      	bne.n	800f288 <USB_EPStartXfer+0x16e2>
 800f23e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f242:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f24c:	b29b      	uxth	r3, r3
 800f24e:	461a      	mov	r2, r3
 800f250:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f254:	4413      	add	r3, r2
 800f256:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f25a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f25e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	781b      	ldrb	r3, [r3, #0]
 800f266:	00da      	lsls	r2, r3, #3
 800f268:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f26c:	4413      	add	r3, r2
 800f26e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f272:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f276:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f27a:	b29a      	uxth	r2, r3
 800f27c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800f280:	801a      	strh	r2, [r3, #0]
 800f282:	e001      	b.n	800f288 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800f284:	2301      	movs	r3, #1
 800f286:	e03a      	b.n	800f2fe <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f28c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f290:	681a      	ldr	r2, [r3, #0]
 800f292:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f296:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	781b      	ldrb	r3, [r3, #0]
 800f29e:	009b      	lsls	r3, r3, #2
 800f2a0:	4413      	add	r3, r2
 800f2a2:	881b      	ldrh	r3, [r3, #0]
 800f2a4:	b29b      	uxth	r3, r3
 800f2a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f2aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f2ae:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800f2b2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f2b6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f2ba:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800f2be:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f2c2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800f2c6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800f2ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f2ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f2d2:	681a      	ldr	r2, [r3, #0]
 800f2d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f2d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	781b      	ldrb	r3, [r3, #0]
 800f2e0:	009b      	lsls	r3, r3, #2
 800f2e2:	441a      	add	r2, r3
 800f2e4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f2e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f2ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f2f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f2f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f2f8:	b29b      	uxth	r3, r3
 800f2fa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f2fc:	2300      	movs	r3, #0
}
 800f2fe:	4618      	mov	r0, r3
 800f300:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800f304:	46bd      	mov	sp, r7
 800f306:	bd80      	pop	{r7, pc}

0800f308 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f308:	b480      	push	{r7}
 800f30a:	b085      	sub	sp, #20
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
 800f310:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800f312:	683b      	ldr	r3, [r7, #0]
 800f314:	785b      	ldrb	r3, [r3, #1]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d020      	beq.n	800f35c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800f31a:	687a      	ldr	r2, [r7, #4]
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	781b      	ldrb	r3, [r3, #0]
 800f320:	009b      	lsls	r3, r3, #2
 800f322:	4413      	add	r3, r2
 800f324:	881b      	ldrh	r3, [r3, #0]
 800f326:	b29b      	uxth	r3, r3
 800f328:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f32c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f330:	81bb      	strh	r3, [r7, #12]
 800f332:	89bb      	ldrh	r3, [r7, #12]
 800f334:	f083 0310 	eor.w	r3, r3, #16
 800f338:	81bb      	strh	r3, [r7, #12]
 800f33a:	687a      	ldr	r2, [r7, #4]
 800f33c:	683b      	ldr	r3, [r7, #0]
 800f33e:	781b      	ldrb	r3, [r3, #0]
 800f340:	009b      	lsls	r3, r3, #2
 800f342:	441a      	add	r2, r3
 800f344:	89bb      	ldrh	r3, [r7, #12]
 800f346:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f34a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f34e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f352:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f356:	b29b      	uxth	r3, r3
 800f358:	8013      	strh	r3, [r2, #0]
 800f35a:	e01f      	b.n	800f39c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800f35c:	687a      	ldr	r2, [r7, #4]
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	781b      	ldrb	r3, [r3, #0]
 800f362:	009b      	lsls	r3, r3, #2
 800f364:	4413      	add	r3, r2
 800f366:	881b      	ldrh	r3, [r3, #0]
 800f368:	b29b      	uxth	r3, r3
 800f36a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f36e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f372:	81fb      	strh	r3, [r7, #14]
 800f374:	89fb      	ldrh	r3, [r7, #14]
 800f376:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f37a:	81fb      	strh	r3, [r7, #14]
 800f37c:	687a      	ldr	r2, [r7, #4]
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	781b      	ldrb	r3, [r3, #0]
 800f382:	009b      	lsls	r3, r3, #2
 800f384:	441a      	add	r2, r3
 800f386:	89fb      	ldrh	r3, [r7, #14]
 800f388:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f38c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f390:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f394:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f398:	b29b      	uxth	r3, r3
 800f39a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f39c:	2300      	movs	r3, #0
}
 800f39e:	4618      	mov	r0, r3
 800f3a0:	3714      	adds	r7, #20
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a8:	4770      	bx	lr

0800f3aa <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f3aa:	b480      	push	{r7}
 800f3ac:	b087      	sub	sp, #28
 800f3ae:	af00      	add	r7, sp, #0
 800f3b0:	6078      	str	r0, [r7, #4]
 800f3b2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	7b1b      	ldrb	r3, [r3, #12]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	f040 809d 	bne.w	800f4f8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800f3be:	683b      	ldr	r3, [r7, #0]
 800f3c0:	785b      	ldrb	r3, [r3, #1]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d04c      	beq.n	800f460 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f3c6:	687a      	ldr	r2, [r7, #4]
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	781b      	ldrb	r3, [r3, #0]
 800f3cc:	009b      	lsls	r3, r3, #2
 800f3ce:	4413      	add	r3, r2
 800f3d0:	881b      	ldrh	r3, [r3, #0]
 800f3d2:	823b      	strh	r3, [r7, #16]
 800f3d4:	8a3b      	ldrh	r3, [r7, #16]
 800f3d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d01b      	beq.n	800f416 <USB_EPClearStall+0x6c>
 800f3de:	687a      	ldr	r2, [r7, #4]
 800f3e0:	683b      	ldr	r3, [r7, #0]
 800f3e2:	781b      	ldrb	r3, [r3, #0]
 800f3e4:	009b      	lsls	r3, r3, #2
 800f3e6:	4413      	add	r3, r2
 800f3e8:	881b      	ldrh	r3, [r3, #0]
 800f3ea:	b29b      	uxth	r3, r3
 800f3ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f3f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f3f4:	81fb      	strh	r3, [r7, #14]
 800f3f6:	687a      	ldr	r2, [r7, #4]
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	781b      	ldrb	r3, [r3, #0]
 800f3fc:	009b      	lsls	r3, r3, #2
 800f3fe:	441a      	add	r2, r3
 800f400:	89fb      	ldrh	r3, [r7, #14]
 800f402:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f406:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f40a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f40e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f412:	b29b      	uxth	r3, r3
 800f414:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	78db      	ldrb	r3, [r3, #3]
 800f41a:	2b01      	cmp	r3, #1
 800f41c:	d06c      	beq.n	800f4f8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f41e:	687a      	ldr	r2, [r7, #4]
 800f420:	683b      	ldr	r3, [r7, #0]
 800f422:	781b      	ldrb	r3, [r3, #0]
 800f424:	009b      	lsls	r3, r3, #2
 800f426:	4413      	add	r3, r2
 800f428:	881b      	ldrh	r3, [r3, #0]
 800f42a:	b29b      	uxth	r3, r3
 800f42c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f430:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f434:	81bb      	strh	r3, [r7, #12]
 800f436:	89bb      	ldrh	r3, [r7, #12]
 800f438:	f083 0320 	eor.w	r3, r3, #32
 800f43c:	81bb      	strh	r3, [r7, #12]
 800f43e:	687a      	ldr	r2, [r7, #4]
 800f440:	683b      	ldr	r3, [r7, #0]
 800f442:	781b      	ldrb	r3, [r3, #0]
 800f444:	009b      	lsls	r3, r3, #2
 800f446:	441a      	add	r2, r3
 800f448:	89bb      	ldrh	r3, [r7, #12]
 800f44a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f44e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f452:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f456:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f45a:	b29b      	uxth	r3, r3
 800f45c:	8013      	strh	r3, [r2, #0]
 800f45e:	e04b      	b.n	800f4f8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f460:	687a      	ldr	r2, [r7, #4]
 800f462:	683b      	ldr	r3, [r7, #0]
 800f464:	781b      	ldrb	r3, [r3, #0]
 800f466:	009b      	lsls	r3, r3, #2
 800f468:	4413      	add	r3, r2
 800f46a:	881b      	ldrh	r3, [r3, #0]
 800f46c:	82fb      	strh	r3, [r7, #22]
 800f46e:	8afb      	ldrh	r3, [r7, #22]
 800f470:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f474:	2b00      	cmp	r3, #0
 800f476:	d01b      	beq.n	800f4b0 <USB_EPClearStall+0x106>
 800f478:	687a      	ldr	r2, [r7, #4]
 800f47a:	683b      	ldr	r3, [r7, #0]
 800f47c:	781b      	ldrb	r3, [r3, #0]
 800f47e:	009b      	lsls	r3, r3, #2
 800f480:	4413      	add	r3, r2
 800f482:	881b      	ldrh	r3, [r3, #0]
 800f484:	b29b      	uxth	r3, r3
 800f486:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f48a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f48e:	82bb      	strh	r3, [r7, #20]
 800f490:	687a      	ldr	r2, [r7, #4]
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	781b      	ldrb	r3, [r3, #0]
 800f496:	009b      	lsls	r3, r3, #2
 800f498:	441a      	add	r2, r3
 800f49a:	8abb      	ldrh	r3, [r7, #20]
 800f49c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f4a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f4a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800f4a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f4ac:	b29b      	uxth	r3, r3
 800f4ae:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f4b0:	687a      	ldr	r2, [r7, #4]
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	781b      	ldrb	r3, [r3, #0]
 800f4b6:	009b      	lsls	r3, r3, #2
 800f4b8:	4413      	add	r3, r2
 800f4ba:	881b      	ldrh	r3, [r3, #0]
 800f4bc:	b29b      	uxth	r3, r3
 800f4be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f4c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f4c6:	827b      	strh	r3, [r7, #18]
 800f4c8:	8a7b      	ldrh	r3, [r7, #18]
 800f4ca:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f4ce:	827b      	strh	r3, [r7, #18]
 800f4d0:	8a7b      	ldrh	r3, [r7, #18]
 800f4d2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800f4d6:	827b      	strh	r3, [r7, #18]
 800f4d8:	687a      	ldr	r2, [r7, #4]
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	781b      	ldrb	r3, [r3, #0]
 800f4de:	009b      	lsls	r3, r3, #2
 800f4e0:	441a      	add	r2, r3
 800f4e2:	8a7b      	ldrh	r3, [r7, #18]
 800f4e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f4e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f4ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f4f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f4f4:	b29b      	uxth	r3, r3
 800f4f6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800f4f8:	2300      	movs	r3, #0
}
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	371c      	adds	r7, #28
 800f4fe:	46bd      	mov	sp, r7
 800f500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f504:	4770      	bx	lr

0800f506 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800f506:	b480      	push	{r7}
 800f508:	b083      	sub	sp, #12
 800f50a:	af00      	add	r7, sp, #0
 800f50c:	6078      	str	r0, [r7, #4]
 800f50e:	460b      	mov	r3, r1
 800f510:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800f512:	78fb      	ldrb	r3, [r7, #3]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d103      	bne.n	800f520 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	2280      	movs	r2, #128	@ 0x80
 800f51c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800f520:	2300      	movs	r3, #0
}
 800f522:	4618      	mov	r0, r3
 800f524:	370c      	adds	r7, #12
 800f526:	46bd      	mov	sp, r7
 800f528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52c:	4770      	bx	lr

0800f52e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800f52e:	b480      	push	{r7}
 800f530:	b083      	sub	sp, #12
 800f532:	af00      	add	r7, sp, #0
 800f534:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f53c:	b29b      	uxth	r3, r3
 800f53e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f542:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f546:	b29a      	uxth	r2, r3
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800f54e:	2300      	movs	r3, #0
}
 800f550:	4618      	mov	r0, r3
 800f552:	370c      	adds	r7, #12
 800f554:	46bd      	mov	sp, r7
 800f556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55a:	4770      	bx	lr

0800f55c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800f55c:	b480      	push	{r7}
 800f55e:	b085      	sub	sp, #20
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800f56a:	b29b      	uxth	r3, r3
 800f56c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800f56e:	68fb      	ldr	r3, [r7, #12]
}
 800f570:	4618      	mov	r0, r3
 800f572:	3714      	adds	r7, #20
 800f574:	46bd      	mov	sp, r7
 800f576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57a:	4770      	bx	lr

0800f57c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f57c:	b480      	push	{r7}
 800f57e:	b08b      	sub	sp, #44	@ 0x2c
 800f580:	af00      	add	r7, sp, #0
 800f582:	60f8      	str	r0, [r7, #12]
 800f584:	60b9      	str	r1, [r7, #8]
 800f586:	4611      	mov	r1, r2
 800f588:	461a      	mov	r2, r3
 800f58a:	460b      	mov	r3, r1
 800f58c:	80fb      	strh	r3, [r7, #6]
 800f58e:	4613      	mov	r3, r2
 800f590:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800f592:	88bb      	ldrh	r3, [r7, #4]
 800f594:	3301      	adds	r3, #1
 800f596:	085b      	lsrs	r3, r3, #1
 800f598:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f5a2:	88fa      	ldrh	r2, [r7, #6]
 800f5a4:	697b      	ldr	r3, [r7, #20]
 800f5a6:	4413      	add	r3, r2
 800f5a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f5ac:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800f5ae:	69bb      	ldr	r3, [r7, #24]
 800f5b0:	627b      	str	r3, [r7, #36]	@ 0x24
 800f5b2:	e01b      	b.n	800f5ec <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800f5b4:	69fb      	ldr	r3, [r7, #28]
 800f5b6:	781b      	ldrb	r3, [r3, #0]
 800f5b8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800f5ba:	69fb      	ldr	r3, [r7, #28]
 800f5bc:	3301      	adds	r3, #1
 800f5be:	781b      	ldrb	r3, [r3, #0]
 800f5c0:	021b      	lsls	r3, r3, #8
 800f5c2:	b21a      	sxth	r2, r3
 800f5c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f5c8:	4313      	orrs	r3, r2
 800f5ca:	b21b      	sxth	r3, r3
 800f5cc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800f5ce:	6a3b      	ldr	r3, [r7, #32]
 800f5d0:	8a7a      	ldrh	r2, [r7, #18]
 800f5d2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800f5d4:	6a3b      	ldr	r3, [r7, #32]
 800f5d6:	3302      	adds	r3, #2
 800f5d8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800f5da:	69fb      	ldr	r3, [r7, #28]
 800f5dc:	3301      	adds	r3, #1
 800f5de:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800f5e0:	69fb      	ldr	r3, [r7, #28]
 800f5e2:	3301      	adds	r3, #1
 800f5e4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800f5e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5e8:	3b01      	subs	r3, #1
 800f5ea:	627b      	str	r3, [r7, #36]	@ 0x24
 800f5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d1e0      	bne.n	800f5b4 <USB_WritePMA+0x38>
  }
}
 800f5f2:	bf00      	nop
 800f5f4:	bf00      	nop
 800f5f6:	372c      	adds	r7, #44	@ 0x2c
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fe:	4770      	bx	lr

0800f600 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f600:	b480      	push	{r7}
 800f602:	b08b      	sub	sp, #44	@ 0x2c
 800f604:	af00      	add	r7, sp, #0
 800f606:	60f8      	str	r0, [r7, #12]
 800f608:	60b9      	str	r1, [r7, #8]
 800f60a:	4611      	mov	r1, r2
 800f60c:	461a      	mov	r2, r3
 800f60e:	460b      	mov	r3, r1
 800f610:	80fb      	strh	r3, [r7, #6]
 800f612:	4613      	mov	r3, r2
 800f614:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800f616:	88bb      	ldrh	r3, [r7, #4]
 800f618:	085b      	lsrs	r3, r3, #1
 800f61a:	b29b      	uxth	r3, r3
 800f61c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800f622:	68bb      	ldr	r3, [r7, #8]
 800f624:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f626:	88fa      	ldrh	r2, [r7, #6]
 800f628:	697b      	ldr	r3, [r7, #20]
 800f62a:	4413      	add	r3, r2
 800f62c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f630:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800f632:	69bb      	ldr	r3, [r7, #24]
 800f634:	627b      	str	r3, [r7, #36]	@ 0x24
 800f636:	e018      	b.n	800f66a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800f638:	6a3b      	ldr	r3, [r7, #32]
 800f63a:	881b      	ldrh	r3, [r3, #0]
 800f63c:	b29b      	uxth	r3, r3
 800f63e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800f640:	6a3b      	ldr	r3, [r7, #32]
 800f642:	3302      	adds	r3, #2
 800f644:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800f646:	693b      	ldr	r3, [r7, #16]
 800f648:	b2da      	uxtb	r2, r3
 800f64a:	69fb      	ldr	r3, [r7, #28]
 800f64c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800f64e:	69fb      	ldr	r3, [r7, #28]
 800f650:	3301      	adds	r3, #1
 800f652:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800f654:	693b      	ldr	r3, [r7, #16]
 800f656:	0a1b      	lsrs	r3, r3, #8
 800f658:	b2da      	uxtb	r2, r3
 800f65a:	69fb      	ldr	r3, [r7, #28]
 800f65c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800f65e:	69fb      	ldr	r3, [r7, #28]
 800f660:	3301      	adds	r3, #1
 800f662:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800f664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f666:	3b01      	subs	r3, #1
 800f668:	627b      	str	r3, [r7, #36]	@ 0x24
 800f66a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d1e3      	bne.n	800f638 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800f670:	88bb      	ldrh	r3, [r7, #4]
 800f672:	f003 0301 	and.w	r3, r3, #1
 800f676:	b29b      	uxth	r3, r3
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d007      	beq.n	800f68c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800f67c:	6a3b      	ldr	r3, [r7, #32]
 800f67e:	881b      	ldrh	r3, [r3, #0]
 800f680:	b29b      	uxth	r3, r3
 800f682:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800f684:	693b      	ldr	r3, [r7, #16]
 800f686:	b2da      	uxtb	r2, r3
 800f688:	69fb      	ldr	r3, [r7, #28]
 800f68a:	701a      	strb	r2, [r3, #0]
  }
}
 800f68c:	bf00      	nop
 800f68e:	372c      	adds	r7, #44	@ 0x2c
 800f690:	46bd      	mov	sp, r7
 800f692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f696:	4770      	bx	lr

0800f698 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b084      	sub	sp, #16
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
 800f6a0:	460b      	mov	r3, r1
 800f6a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f6a4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800f6a8:	f002 fc74 	bl	8011f94 <USBD_static_malloc>
 800f6ac:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d109      	bne.n	800f6c8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	32b0      	adds	r2, #176	@ 0xb0
 800f6be:	2100      	movs	r1, #0
 800f6c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800f6c4:	2302      	movs	r3, #2
 800f6c6:	e0d4      	b.n	800f872 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800f6c8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800f6cc:	2100      	movs	r1, #0
 800f6ce:	68f8      	ldr	r0, [r7, #12]
 800f6d0:	f003 fa21 	bl	8012b16 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	32b0      	adds	r2, #176	@ 0xb0
 800f6de:	68f9      	ldr	r1, [r7, #12]
 800f6e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	32b0      	adds	r2, #176	@ 0xb0
 800f6ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	7c1b      	ldrb	r3, [r3, #16]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d138      	bne.n	800f772 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f700:	4b5e      	ldr	r3, [pc, #376]	@ (800f87c <USBD_CDC_Init+0x1e4>)
 800f702:	7819      	ldrb	r1, [r3, #0]
 800f704:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f708:	2202      	movs	r2, #2
 800f70a:	6878      	ldr	r0, [r7, #4]
 800f70c:	f002 fae9 	bl	8011ce2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f710:	4b5a      	ldr	r3, [pc, #360]	@ (800f87c <USBD_CDC_Init+0x1e4>)
 800f712:	781b      	ldrb	r3, [r3, #0]
 800f714:	f003 020f 	and.w	r2, r3, #15
 800f718:	6879      	ldr	r1, [r7, #4]
 800f71a:	4613      	mov	r3, r2
 800f71c:	009b      	lsls	r3, r3, #2
 800f71e:	4413      	add	r3, r2
 800f720:	009b      	lsls	r3, r3, #2
 800f722:	440b      	add	r3, r1
 800f724:	3324      	adds	r3, #36	@ 0x24
 800f726:	2201      	movs	r2, #1
 800f728:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f72a:	4b55      	ldr	r3, [pc, #340]	@ (800f880 <USBD_CDC_Init+0x1e8>)
 800f72c:	7819      	ldrb	r1, [r3, #0]
 800f72e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f732:	2202      	movs	r2, #2
 800f734:	6878      	ldr	r0, [r7, #4]
 800f736:	f002 fad4 	bl	8011ce2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f73a:	4b51      	ldr	r3, [pc, #324]	@ (800f880 <USBD_CDC_Init+0x1e8>)
 800f73c:	781b      	ldrb	r3, [r3, #0]
 800f73e:	f003 020f 	and.w	r2, r3, #15
 800f742:	6879      	ldr	r1, [r7, #4]
 800f744:	4613      	mov	r3, r2
 800f746:	009b      	lsls	r3, r3, #2
 800f748:	4413      	add	r3, r2
 800f74a:	009b      	lsls	r3, r3, #2
 800f74c:	440b      	add	r3, r1
 800f74e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f752:	2201      	movs	r2, #1
 800f754:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f756:	4b4b      	ldr	r3, [pc, #300]	@ (800f884 <USBD_CDC_Init+0x1ec>)
 800f758:	781b      	ldrb	r3, [r3, #0]
 800f75a:	f003 020f 	and.w	r2, r3, #15
 800f75e:	6879      	ldr	r1, [r7, #4]
 800f760:	4613      	mov	r3, r2
 800f762:	009b      	lsls	r3, r3, #2
 800f764:	4413      	add	r3, r2
 800f766:	009b      	lsls	r3, r3, #2
 800f768:	440b      	add	r3, r1
 800f76a:	3326      	adds	r3, #38	@ 0x26
 800f76c:	2210      	movs	r2, #16
 800f76e:	801a      	strh	r2, [r3, #0]
 800f770:	e035      	b.n	800f7de <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f772:	4b42      	ldr	r3, [pc, #264]	@ (800f87c <USBD_CDC_Init+0x1e4>)
 800f774:	7819      	ldrb	r1, [r3, #0]
 800f776:	2340      	movs	r3, #64	@ 0x40
 800f778:	2202      	movs	r2, #2
 800f77a:	6878      	ldr	r0, [r7, #4]
 800f77c:	f002 fab1 	bl	8011ce2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f780:	4b3e      	ldr	r3, [pc, #248]	@ (800f87c <USBD_CDC_Init+0x1e4>)
 800f782:	781b      	ldrb	r3, [r3, #0]
 800f784:	f003 020f 	and.w	r2, r3, #15
 800f788:	6879      	ldr	r1, [r7, #4]
 800f78a:	4613      	mov	r3, r2
 800f78c:	009b      	lsls	r3, r3, #2
 800f78e:	4413      	add	r3, r2
 800f790:	009b      	lsls	r3, r3, #2
 800f792:	440b      	add	r3, r1
 800f794:	3324      	adds	r3, #36	@ 0x24
 800f796:	2201      	movs	r2, #1
 800f798:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f79a:	4b39      	ldr	r3, [pc, #228]	@ (800f880 <USBD_CDC_Init+0x1e8>)
 800f79c:	7819      	ldrb	r1, [r3, #0]
 800f79e:	2340      	movs	r3, #64	@ 0x40
 800f7a0:	2202      	movs	r2, #2
 800f7a2:	6878      	ldr	r0, [r7, #4]
 800f7a4:	f002 fa9d 	bl	8011ce2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f7a8:	4b35      	ldr	r3, [pc, #212]	@ (800f880 <USBD_CDC_Init+0x1e8>)
 800f7aa:	781b      	ldrb	r3, [r3, #0]
 800f7ac:	f003 020f 	and.w	r2, r3, #15
 800f7b0:	6879      	ldr	r1, [r7, #4]
 800f7b2:	4613      	mov	r3, r2
 800f7b4:	009b      	lsls	r3, r3, #2
 800f7b6:	4413      	add	r3, r2
 800f7b8:	009b      	lsls	r3, r3, #2
 800f7ba:	440b      	add	r3, r1
 800f7bc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f7c0:	2201      	movs	r2, #1
 800f7c2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f7c4:	4b2f      	ldr	r3, [pc, #188]	@ (800f884 <USBD_CDC_Init+0x1ec>)
 800f7c6:	781b      	ldrb	r3, [r3, #0]
 800f7c8:	f003 020f 	and.w	r2, r3, #15
 800f7cc:	6879      	ldr	r1, [r7, #4]
 800f7ce:	4613      	mov	r3, r2
 800f7d0:	009b      	lsls	r3, r3, #2
 800f7d2:	4413      	add	r3, r2
 800f7d4:	009b      	lsls	r3, r3, #2
 800f7d6:	440b      	add	r3, r1
 800f7d8:	3326      	adds	r3, #38	@ 0x26
 800f7da:	2210      	movs	r2, #16
 800f7dc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f7de:	4b29      	ldr	r3, [pc, #164]	@ (800f884 <USBD_CDC_Init+0x1ec>)
 800f7e0:	7819      	ldrb	r1, [r3, #0]
 800f7e2:	2308      	movs	r3, #8
 800f7e4:	2203      	movs	r2, #3
 800f7e6:	6878      	ldr	r0, [r7, #4]
 800f7e8:	f002 fa7b 	bl	8011ce2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800f7ec:	4b25      	ldr	r3, [pc, #148]	@ (800f884 <USBD_CDC_Init+0x1ec>)
 800f7ee:	781b      	ldrb	r3, [r3, #0]
 800f7f0:	f003 020f 	and.w	r2, r3, #15
 800f7f4:	6879      	ldr	r1, [r7, #4]
 800f7f6:	4613      	mov	r3, r2
 800f7f8:	009b      	lsls	r3, r3, #2
 800f7fa:	4413      	add	r3, r2
 800f7fc:	009b      	lsls	r3, r3, #2
 800f7fe:	440b      	add	r3, r1
 800f800:	3324      	adds	r3, #36	@ 0x24
 800f802:	2201      	movs	r2, #1
 800f804:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	2200      	movs	r2, #0
 800f80a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f814:	687a      	ldr	r2, [r7, #4]
 800f816:	33b0      	adds	r3, #176	@ 0xb0
 800f818:	009b      	lsls	r3, r3, #2
 800f81a:	4413      	add	r3, r2
 800f81c:	685b      	ldr	r3, [r3, #4]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	2200      	movs	r2, #0
 800f826:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	2200      	movs	r2, #0
 800f82e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d101      	bne.n	800f840 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800f83c:	2302      	movs	r3, #2
 800f83e:	e018      	b.n	800f872 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	7c1b      	ldrb	r3, [r3, #16]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d10a      	bne.n	800f85e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f848:	4b0d      	ldr	r3, [pc, #52]	@ (800f880 <USBD_CDC_Init+0x1e8>)
 800f84a:	7819      	ldrb	r1, [r3, #0]
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f852:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f856:	6878      	ldr	r0, [r7, #4]
 800f858:	f002 fb32 	bl	8011ec0 <USBD_LL_PrepareReceive>
 800f85c:	e008      	b.n	800f870 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f85e:	4b08      	ldr	r3, [pc, #32]	@ (800f880 <USBD_CDC_Init+0x1e8>)
 800f860:	7819      	ldrb	r1, [r3, #0]
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f868:	2340      	movs	r3, #64	@ 0x40
 800f86a:	6878      	ldr	r0, [r7, #4]
 800f86c:	f002 fb28 	bl	8011ec0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f870:	2300      	movs	r3, #0
}
 800f872:	4618      	mov	r0, r3
 800f874:	3710      	adds	r7, #16
 800f876:	46bd      	mov	sp, r7
 800f878:	bd80      	pop	{r7, pc}
 800f87a:	bf00      	nop
 800f87c:	200000bb 	.word	0x200000bb
 800f880:	200000bc 	.word	0x200000bc
 800f884:	200000bd 	.word	0x200000bd

0800f888 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b082      	sub	sp, #8
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	6078      	str	r0, [r7, #4]
 800f890:	460b      	mov	r3, r1
 800f892:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800f894:	4b3a      	ldr	r3, [pc, #232]	@ (800f980 <USBD_CDC_DeInit+0xf8>)
 800f896:	781b      	ldrb	r3, [r3, #0]
 800f898:	4619      	mov	r1, r3
 800f89a:	6878      	ldr	r0, [r7, #4]
 800f89c:	f002 fa47 	bl	8011d2e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800f8a0:	4b37      	ldr	r3, [pc, #220]	@ (800f980 <USBD_CDC_DeInit+0xf8>)
 800f8a2:	781b      	ldrb	r3, [r3, #0]
 800f8a4:	f003 020f 	and.w	r2, r3, #15
 800f8a8:	6879      	ldr	r1, [r7, #4]
 800f8aa:	4613      	mov	r3, r2
 800f8ac:	009b      	lsls	r3, r3, #2
 800f8ae:	4413      	add	r3, r2
 800f8b0:	009b      	lsls	r3, r3, #2
 800f8b2:	440b      	add	r3, r1
 800f8b4:	3324      	adds	r3, #36	@ 0x24
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800f8ba:	4b32      	ldr	r3, [pc, #200]	@ (800f984 <USBD_CDC_DeInit+0xfc>)
 800f8bc:	781b      	ldrb	r3, [r3, #0]
 800f8be:	4619      	mov	r1, r3
 800f8c0:	6878      	ldr	r0, [r7, #4]
 800f8c2:	f002 fa34 	bl	8011d2e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800f8c6:	4b2f      	ldr	r3, [pc, #188]	@ (800f984 <USBD_CDC_DeInit+0xfc>)
 800f8c8:	781b      	ldrb	r3, [r3, #0]
 800f8ca:	f003 020f 	and.w	r2, r3, #15
 800f8ce:	6879      	ldr	r1, [r7, #4]
 800f8d0:	4613      	mov	r3, r2
 800f8d2:	009b      	lsls	r3, r3, #2
 800f8d4:	4413      	add	r3, r2
 800f8d6:	009b      	lsls	r3, r3, #2
 800f8d8:	440b      	add	r3, r1
 800f8da:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f8de:	2200      	movs	r2, #0
 800f8e0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800f8e2:	4b29      	ldr	r3, [pc, #164]	@ (800f988 <USBD_CDC_DeInit+0x100>)
 800f8e4:	781b      	ldrb	r3, [r3, #0]
 800f8e6:	4619      	mov	r1, r3
 800f8e8:	6878      	ldr	r0, [r7, #4]
 800f8ea:	f002 fa20 	bl	8011d2e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800f8ee:	4b26      	ldr	r3, [pc, #152]	@ (800f988 <USBD_CDC_DeInit+0x100>)
 800f8f0:	781b      	ldrb	r3, [r3, #0]
 800f8f2:	f003 020f 	and.w	r2, r3, #15
 800f8f6:	6879      	ldr	r1, [r7, #4]
 800f8f8:	4613      	mov	r3, r2
 800f8fa:	009b      	lsls	r3, r3, #2
 800f8fc:	4413      	add	r3, r2
 800f8fe:	009b      	lsls	r3, r3, #2
 800f900:	440b      	add	r3, r1
 800f902:	3324      	adds	r3, #36	@ 0x24
 800f904:	2200      	movs	r2, #0
 800f906:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800f908:	4b1f      	ldr	r3, [pc, #124]	@ (800f988 <USBD_CDC_DeInit+0x100>)
 800f90a:	781b      	ldrb	r3, [r3, #0]
 800f90c:	f003 020f 	and.w	r2, r3, #15
 800f910:	6879      	ldr	r1, [r7, #4]
 800f912:	4613      	mov	r3, r2
 800f914:	009b      	lsls	r3, r3, #2
 800f916:	4413      	add	r3, r2
 800f918:	009b      	lsls	r3, r3, #2
 800f91a:	440b      	add	r3, r1
 800f91c:	3326      	adds	r3, #38	@ 0x26
 800f91e:	2200      	movs	r2, #0
 800f920:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	32b0      	adds	r2, #176	@ 0xb0
 800f92c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d01f      	beq.n	800f974 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f93a:	687a      	ldr	r2, [r7, #4]
 800f93c:	33b0      	adds	r3, #176	@ 0xb0
 800f93e:	009b      	lsls	r3, r3, #2
 800f940:	4413      	add	r3, r2
 800f942:	685b      	ldr	r3, [r3, #4]
 800f944:	685b      	ldr	r3, [r3, #4]
 800f946:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	32b0      	adds	r2, #176	@ 0xb0
 800f952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f956:	4618      	mov	r0, r3
 800f958:	f002 fb2a 	bl	8011fb0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	32b0      	adds	r2, #176	@ 0xb0
 800f966:	2100      	movs	r1, #0
 800f968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	2200      	movs	r2, #0
 800f970:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f974:	2300      	movs	r3, #0
}
 800f976:	4618      	mov	r0, r3
 800f978:	3708      	adds	r7, #8
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd80      	pop	{r7, pc}
 800f97e:	bf00      	nop
 800f980:	200000bb 	.word	0x200000bb
 800f984:	200000bc 	.word	0x200000bc
 800f988:	200000bd 	.word	0x200000bd

0800f98c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b086      	sub	sp, #24
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
 800f994:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	32b0      	adds	r2, #176	@ 0xb0
 800f9a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9a4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f9ae:	2300      	movs	r3, #0
 800f9b0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f9b2:	693b      	ldr	r3, [r7, #16]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d101      	bne.n	800f9bc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800f9b8:	2303      	movs	r3, #3
 800f9ba:	e0bf      	b.n	800fb3c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f9bc:	683b      	ldr	r3, [r7, #0]
 800f9be:	781b      	ldrb	r3, [r3, #0]
 800f9c0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d050      	beq.n	800fa6a <USBD_CDC_Setup+0xde>
 800f9c8:	2b20      	cmp	r3, #32
 800f9ca:	f040 80af 	bne.w	800fb2c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f9ce:	683b      	ldr	r3, [r7, #0]
 800f9d0:	88db      	ldrh	r3, [r3, #6]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d03a      	beq.n	800fa4c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800f9d6:	683b      	ldr	r3, [r7, #0]
 800f9d8:	781b      	ldrb	r3, [r3, #0]
 800f9da:	b25b      	sxtb	r3, r3
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	da1b      	bge.n	800fa18 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f9e6:	687a      	ldr	r2, [r7, #4]
 800f9e8:	33b0      	adds	r3, #176	@ 0xb0
 800f9ea:	009b      	lsls	r3, r3, #2
 800f9ec:	4413      	add	r3, r2
 800f9ee:	685b      	ldr	r3, [r3, #4]
 800f9f0:	689b      	ldr	r3, [r3, #8]
 800f9f2:	683a      	ldr	r2, [r7, #0]
 800f9f4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800f9f6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f9f8:	683a      	ldr	r2, [r7, #0]
 800f9fa:	88d2      	ldrh	r2, [r2, #6]
 800f9fc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f9fe:	683b      	ldr	r3, [r7, #0]
 800fa00:	88db      	ldrh	r3, [r3, #6]
 800fa02:	2b07      	cmp	r3, #7
 800fa04:	bf28      	it	cs
 800fa06:	2307      	movcs	r3, #7
 800fa08:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800fa0a:	693b      	ldr	r3, [r7, #16]
 800fa0c:	89fa      	ldrh	r2, [r7, #14]
 800fa0e:	4619      	mov	r1, r3
 800fa10:	6878      	ldr	r0, [r7, #4]
 800fa12:	f001 fd47 	bl	80114a4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800fa16:	e090      	b.n	800fb3a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800fa18:	683b      	ldr	r3, [r7, #0]
 800fa1a:	785a      	ldrb	r2, [r3, #1]
 800fa1c:	693b      	ldr	r3, [r7, #16]
 800fa1e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800fa22:	683b      	ldr	r3, [r7, #0]
 800fa24:	88db      	ldrh	r3, [r3, #6]
 800fa26:	2b3f      	cmp	r3, #63	@ 0x3f
 800fa28:	d803      	bhi.n	800fa32 <USBD_CDC_Setup+0xa6>
 800fa2a:	683b      	ldr	r3, [r7, #0]
 800fa2c:	88db      	ldrh	r3, [r3, #6]
 800fa2e:	b2da      	uxtb	r2, r3
 800fa30:	e000      	b.n	800fa34 <USBD_CDC_Setup+0xa8>
 800fa32:	2240      	movs	r2, #64	@ 0x40
 800fa34:	693b      	ldr	r3, [r7, #16]
 800fa36:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800fa3a:	6939      	ldr	r1, [r7, #16]
 800fa3c:	693b      	ldr	r3, [r7, #16]
 800fa3e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800fa42:	461a      	mov	r2, r3
 800fa44:	6878      	ldr	r0, [r7, #4]
 800fa46:	f001 fd59 	bl	80114fc <USBD_CtlPrepareRx>
      break;
 800fa4a:	e076      	b.n	800fb3a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fa52:	687a      	ldr	r2, [r7, #4]
 800fa54:	33b0      	adds	r3, #176	@ 0xb0
 800fa56:	009b      	lsls	r3, r3, #2
 800fa58:	4413      	add	r3, r2
 800fa5a:	685b      	ldr	r3, [r3, #4]
 800fa5c:	689b      	ldr	r3, [r3, #8]
 800fa5e:	683a      	ldr	r2, [r7, #0]
 800fa60:	7850      	ldrb	r0, [r2, #1]
 800fa62:	2200      	movs	r2, #0
 800fa64:	6839      	ldr	r1, [r7, #0]
 800fa66:	4798      	blx	r3
      break;
 800fa68:	e067      	b.n	800fb3a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fa6a:	683b      	ldr	r3, [r7, #0]
 800fa6c:	785b      	ldrb	r3, [r3, #1]
 800fa6e:	2b0b      	cmp	r3, #11
 800fa70:	d851      	bhi.n	800fb16 <USBD_CDC_Setup+0x18a>
 800fa72:	a201      	add	r2, pc, #4	@ (adr r2, 800fa78 <USBD_CDC_Setup+0xec>)
 800fa74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa78:	0800faa9 	.word	0x0800faa9
 800fa7c:	0800fb25 	.word	0x0800fb25
 800fa80:	0800fb17 	.word	0x0800fb17
 800fa84:	0800fb17 	.word	0x0800fb17
 800fa88:	0800fb17 	.word	0x0800fb17
 800fa8c:	0800fb17 	.word	0x0800fb17
 800fa90:	0800fb17 	.word	0x0800fb17
 800fa94:	0800fb17 	.word	0x0800fb17
 800fa98:	0800fb17 	.word	0x0800fb17
 800fa9c:	0800fb17 	.word	0x0800fb17
 800faa0:	0800fad3 	.word	0x0800fad3
 800faa4:	0800fafd 	.word	0x0800fafd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800faae:	b2db      	uxtb	r3, r3
 800fab0:	2b03      	cmp	r3, #3
 800fab2:	d107      	bne.n	800fac4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800fab4:	f107 030a 	add.w	r3, r7, #10
 800fab8:	2202      	movs	r2, #2
 800faba:	4619      	mov	r1, r3
 800fabc:	6878      	ldr	r0, [r7, #4]
 800fabe:	f001 fcf1 	bl	80114a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800fac2:	e032      	b.n	800fb2a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800fac4:	6839      	ldr	r1, [r7, #0]
 800fac6:	6878      	ldr	r0, [r7, #4]
 800fac8:	f001 fc6f 	bl	80113aa <USBD_CtlError>
            ret = USBD_FAIL;
 800facc:	2303      	movs	r3, #3
 800face:	75fb      	strb	r3, [r7, #23]
          break;
 800fad0:	e02b      	b.n	800fb2a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fad8:	b2db      	uxtb	r3, r3
 800fada:	2b03      	cmp	r3, #3
 800fadc:	d107      	bne.n	800faee <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800fade:	f107 030d 	add.w	r3, r7, #13
 800fae2:	2201      	movs	r2, #1
 800fae4:	4619      	mov	r1, r3
 800fae6:	6878      	ldr	r0, [r7, #4]
 800fae8:	f001 fcdc 	bl	80114a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800faec:	e01d      	b.n	800fb2a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800faee:	6839      	ldr	r1, [r7, #0]
 800faf0:	6878      	ldr	r0, [r7, #4]
 800faf2:	f001 fc5a 	bl	80113aa <USBD_CtlError>
            ret = USBD_FAIL;
 800faf6:	2303      	movs	r3, #3
 800faf8:	75fb      	strb	r3, [r7, #23]
          break;
 800fafa:	e016      	b.n	800fb2a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fb02:	b2db      	uxtb	r3, r3
 800fb04:	2b03      	cmp	r3, #3
 800fb06:	d00f      	beq.n	800fb28 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800fb08:	6839      	ldr	r1, [r7, #0]
 800fb0a:	6878      	ldr	r0, [r7, #4]
 800fb0c:	f001 fc4d 	bl	80113aa <USBD_CtlError>
            ret = USBD_FAIL;
 800fb10:	2303      	movs	r3, #3
 800fb12:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800fb14:	e008      	b.n	800fb28 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800fb16:	6839      	ldr	r1, [r7, #0]
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f001 fc46 	bl	80113aa <USBD_CtlError>
          ret = USBD_FAIL;
 800fb1e:	2303      	movs	r3, #3
 800fb20:	75fb      	strb	r3, [r7, #23]
          break;
 800fb22:	e002      	b.n	800fb2a <USBD_CDC_Setup+0x19e>
          break;
 800fb24:	bf00      	nop
 800fb26:	e008      	b.n	800fb3a <USBD_CDC_Setup+0x1ae>
          break;
 800fb28:	bf00      	nop
      }
      break;
 800fb2a:	e006      	b.n	800fb3a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800fb2c:	6839      	ldr	r1, [r7, #0]
 800fb2e:	6878      	ldr	r0, [r7, #4]
 800fb30:	f001 fc3b 	bl	80113aa <USBD_CtlError>
      ret = USBD_FAIL;
 800fb34:	2303      	movs	r3, #3
 800fb36:	75fb      	strb	r3, [r7, #23]
      break;
 800fb38:	bf00      	nop
  }

  return (uint8_t)ret;
 800fb3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	3718      	adds	r7, #24
 800fb40:	46bd      	mov	sp, r7
 800fb42:	bd80      	pop	{r7, pc}

0800fb44 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b084      	sub	sp, #16
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
 800fb4c:	460b      	mov	r3, r1
 800fb4e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fb56:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	32b0      	adds	r2, #176	@ 0xb0
 800fb62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d101      	bne.n	800fb6e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800fb6a:	2303      	movs	r3, #3
 800fb6c:	e065      	b.n	800fc3a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	32b0      	adds	r2, #176	@ 0xb0
 800fb78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb7c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800fb7e:	78fb      	ldrb	r3, [r7, #3]
 800fb80:	f003 020f 	and.w	r2, r3, #15
 800fb84:	6879      	ldr	r1, [r7, #4]
 800fb86:	4613      	mov	r3, r2
 800fb88:	009b      	lsls	r3, r3, #2
 800fb8a:	4413      	add	r3, r2
 800fb8c:	009b      	lsls	r3, r3, #2
 800fb8e:	440b      	add	r3, r1
 800fb90:	3318      	adds	r3, #24
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d02f      	beq.n	800fbf8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800fb98:	78fb      	ldrb	r3, [r7, #3]
 800fb9a:	f003 020f 	and.w	r2, r3, #15
 800fb9e:	6879      	ldr	r1, [r7, #4]
 800fba0:	4613      	mov	r3, r2
 800fba2:	009b      	lsls	r3, r3, #2
 800fba4:	4413      	add	r3, r2
 800fba6:	009b      	lsls	r3, r3, #2
 800fba8:	440b      	add	r3, r1
 800fbaa:	3318      	adds	r3, #24
 800fbac:	681a      	ldr	r2, [r3, #0]
 800fbae:	78fb      	ldrb	r3, [r7, #3]
 800fbb0:	f003 010f 	and.w	r1, r3, #15
 800fbb4:	68f8      	ldr	r0, [r7, #12]
 800fbb6:	460b      	mov	r3, r1
 800fbb8:	009b      	lsls	r3, r3, #2
 800fbba:	440b      	add	r3, r1
 800fbbc:	00db      	lsls	r3, r3, #3
 800fbbe:	4403      	add	r3, r0
 800fbc0:	3320      	adds	r3, #32
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	fbb2 f1f3 	udiv	r1, r2, r3
 800fbc8:	fb01 f303 	mul.w	r3, r1, r3
 800fbcc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d112      	bne.n	800fbf8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800fbd2:	78fb      	ldrb	r3, [r7, #3]
 800fbd4:	f003 020f 	and.w	r2, r3, #15
 800fbd8:	6879      	ldr	r1, [r7, #4]
 800fbda:	4613      	mov	r3, r2
 800fbdc:	009b      	lsls	r3, r3, #2
 800fbde:	4413      	add	r3, r2
 800fbe0:	009b      	lsls	r3, r3, #2
 800fbe2:	440b      	add	r3, r1
 800fbe4:	3318      	adds	r3, #24
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800fbea:	78f9      	ldrb	r1, [r7, #3]
 800fbec:	2300      	movs	r3, #0
 800fbee:	2200      	movs	r2, #0
 800fbf0:	6878      	ldr	r0, [r7, #4]
 800fbf2:	f002 f944 	bl	8011e7e <USBD_LL_Transmit>
 800fbf6:	e01f      	b.n	800fc38 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800fbf8:	68bb      	ldr	r3, [r7, #8]
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fc06:	687a      	ldr	r2, [r7, #4]
 800fc08:	33b0      	adds	r3, #176	@ 0xb0
 800fc0a:	009b      	lsls	r3, r3, #2
 800fc0c:	4413      	add	r3, r2
 800fc0e:	685b      	ldr	r3, [r3, #4]
 800fc10:	691b      	ldr	r3, [r3, #16]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d010      	beq.n	800fc38 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fc1c:	687a      	ldr	r2, [r7, #4]
 800fc1e:	33b0      	adds	r3, #176	@ 0xb0
 800fc20:	009b      	lsls	r3, r3, #2
 800fc22:	4413      	add	r3, r2
 800fc24:	685b      	ldr	r3, [r3, #4]
 800fc26:	691b      	ldr	r3, [r3, #16]
 800fc28:	68ba      	ldr	r2, [r7, #8]
 800fc2a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800fc2e:	68ba      	ldr	r2, [r7, #8]
 800fc30:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800fc34:	78fa      	ldrb	r2, [r7, #3]
 800fc36:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800fc38:	2300      	movs	r3, #0
}
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	3710      	adds	r7, #16
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	bd80      	pop	{r7, pc}

0800fc42 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fc42:	b580      	push	{r7, lr}
 800fc44:	b084      	sub	sp, #16
 800fc46:	af00      	add	r7, sp, #0
 800fc48:	6078      	str	r0, [r7, #4]
 800fc4a:	460b      	mov	r3, r1
 800fc4c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	32b0      	adds	r2, #176	@ 0xb0
 800fc58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc5c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	32b0      	adds	r2, #176	@ 0xb0
 800fc68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d101      	bne.n	800fc74 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800fc70:	2303      	movs	r3, #3
 800fc72:	e01a      	b.n	800fcaa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800fc74:	78fb      	ldrb	r3, [r7, #3]
 800fc76:	4619      	mov	r1, r3
 800fc78:	6878      	ldr	r0, [r7, #4]
 800fc7a:	f002 f942 	bl	8011f02 <USBD_LL_GetRxDataSize>
 800fc7e:	4602      	mov	r2, r0
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fc8c:	687a      	ldr	r2, [r7, #4]
 800fc8e:	33b0      	adds	r3, #176	@ 0xb0
 800fc90:	009b      	lsls	r3, r3, #2
 800fc92:	4413      	add	r3, r2
 800fc94:	685b      	ldr	r3, [r3, #4]
 800fc96:	68db      	ldr	r3, [r3, #12]
 800fc98:	68fa      	ldr	r2, [r7, #12]
 800fc9a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800fc9e:	68fa      	ldr	r2, [r7, #12]
 800fca0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800fca4:	4611      	mov	r1, r2
 800fca6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800fca8:	2300      	movs	r3, #0
}
 800fcaa:	4618      	mov	r0, r3
 800fcac:	3710      	adds	r7, #16
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	bd80      	pop	{r7, pc}

0800fcb2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800fcb2:	b580      	push	{r7, lr}
 800fcb4:	b084      	sub	sp, #16
 800fcb6:	af00      	add	r7, sp, #0
 800fcb8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	32b0      	adds	r2, #176	@ 0xb0
 800fcc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcc8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d101      	bne.n	800fcd4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800fcd0:	2303      	movs	r3, #3
 800fcd2:	e024      	b.n	800fd1e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fcda:	687a      	ldr	r2, [r7, #4]
 800fcdc:	33b0      	adds	r3, #176	@ 0xb0
 800fcde:	009b      	lsls	r3, r3, #2
 800fce0:	4413      	add	r3, r2
 800fce2:	685b      	ldr	r3, [r3, #4]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d019      	beq.n	800fd1c <USBD_CDC_EP0_RxReady+0x6a>
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800fcee:	2bff      	cmp	r3, #255	@ 0xff
 800fcf0:	d014      	beq.n	800fd1c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fcf8:	687a      	ldr	r2, [r7, #4]
 800fcfa:	33b0      	adds	r3, #176	@ 0xb0
 800fcfc:	009b      	lsls	r3, r3, #2
 800fcfe:	4413      	add	r3, r2
 800fd00:	685b      	ldr	r3, [r3, #4]
 800fd02:	689b      	ldr	r3, [r3, #8]
 800fd04:	68fa      	ldr	r2, [r7, #12]
 800fd06:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800fd0a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800fd0c:	68fa      	ldr	r2, [r7, #12]
 800fd0e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800fd12:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	22ff      	movs	r2, #255	@ 0xff
 800fd18:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800fd1c:	2300      	movs	r3, #0
}
 800fd1e:	4618      	mov	r0, r3
 800fd20:	3710      	adds	r7, #16
 800fd22:	46bd      	mov	sp, r7
 800fd24:	bd80      	pop	{r7, pc}
	...

0800fd28 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b086      	sub	sp, #24
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800fd30:	2182      	movs	r1, #130	@ 0x82
 800fd32:	4818      	ldr	r0, [pc, #96]	@ (800fd94 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800fd34:	f000 fcd9 	bl	80106ea <USBD_GetEpDesc>
 800fd38:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800fd3a:	2101      	movs	r1, #1
 800fd3c:	4815      	ldr	r0, [pc, #84]	@ (800fd94 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800fd3e:	f000 fcd4 	bl	80106ea <USBD_GetEpDesc>
 800fd42:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800fd44:	2181      	movs	r1, #129	@ 0x81
 800fd46:	4813      	ldr	r0, [pc, #76]	@ (800fd94 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800fd48:	f000 fccf 	bl	80106ea <USBD_GetEpDesc>
 800fd4c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800fd4e:	697b      	ldr	r3, [r7, #20]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d002      	beq.n	800fd5a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800fd54:	697b      	ldr	r3, [r7, #20]
 800fd56:	2210      	movs	r2, #16
 800fd58:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fd5a:	693b      	ldr	r3, [r7, #16]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d006      	beq.n	800fd6e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fd60:	693b      	ldr	r3, [r7, #16]
 800fd62:	2200      	movs	r2, #0
 800fd64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fd68:	711a      	strb	r2, [r3, #4]
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d006      	beq.n	800fd82 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	2200      	movs	r2, #0
 800fd78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fd7c:	711a      	strb	r2, [r3, #4]
 800fd7e:	2200      	movs	r2, #0
 800fd80:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	2243      	movs	r2, #67	@ 0x43
 800fd86:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800fd88:	4b02      	ldr	r3, [pc, #8]	@ (800fd94 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	3718      	adds	r7, #24
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	bd80      	pop	{r7, pc}
 800fd92:	bf00      	nop
 800fd94:	20000078 	.word	0x20000078

0800fd98 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b086      	sub	sp, #24
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800fda0:	2182      	movs	r1, #130	@ 0x82
 800fda2:	4818      	ldr	r0, [pc, #96]	@ (800fe04 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800fda4:	f000 fca1 	bl	80106ea <USBD_GetEpDesc>
 800fda8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800fdaa:	2101      	movs	r1, #1
 800fdac:	4815      	ldr	r0, [pc, #84]	@ (800fe04 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800fdae:	f000 fc9c 	bl	80106ea <USBD_GetEpDesc>
 800fdb2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800fdb4:	2181      	movs	r1, #129	@ 0x81
 800fdb6:	4813      	ldr	r0, [pc, #76]	@ (800fe04 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800fdb8:	f000 fc97 	bl	80106ea <USBD_GetEpDesc>
 800fdbc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800fdbe:	697b      	ldr	r3, [r7, #20]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d002      	beq.n	800fdca <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800fdc4:	697b      	ldr	r3, [r7, #20]
 800fdc6:	2210      	movs	r2, #16
 800fdc8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fdca:	693b      	ldr	r3, [r7, #16]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d006      	beq.n	800fdde <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800fdd0:	693b      	ldr	r3, [r7, #16]
 800fdd2:	2200      	movs	r2, #0
 800fdd4:	711a      	strb	r2, [r3, #4]
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	f042 0202 	orr.w	r2, r2, #2
 800fddc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d006      	beq.n	800fdf2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	2200      	movs	r2, #0
 800fde8:	711a      	strb	r2, [r3, #4]
 800fdea:	2200      	movs	r2, #0
 800fdec:	f042 0202 	orr.w	r2, r2, #2
 800fdf0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	2243      	movs	r2, #67	@ 0x43
 800fdf6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800fdf8:	4b02      	ldr	r3, [pc, #8]	@ (800fe04 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	3718      	adds	r7, #24
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	bd80      	pop	{r7, pc}
 800fe02:	bf00      	nop
 800fe04:	20000078 	.word	0x20000078

0800fe08 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b086      	sub	sp, #24
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800fe10:	2182      	movs	r1, #130	@ 0x82
 800fe12:	4818      	ldr	r0, [pc, #96]	@ (800fe74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fe14:	f000 fc69 	bl	80106ea <USBD_GetEpDesc>
 800fe18:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800fe1a:	2101      	movs	r1, #1
 800fe1c:	4815      	ldr	r0, [pc, #84]	@ (800fe74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fe1e:	f000 fc64 	bl	80106ea <USBD_GetEpDesc>
 800fe22:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800fe24:	2181      	movs	r1, #129	@ 0x81
 800fe26:	4813      	ldr	r0, [pc, #76]	@ (800fe74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fe28:	f000 fc5f 	bl	80106ea <USBD_GetEpDesc>
 800fe2c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800fe2e:	697b      	ldr	r3, [r7, #20]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d002      	beq.n	800fe3a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800fe34:	697b      	ldr	r3, [r7, #20]
 800fe36:	2210      	movs	r2, #16
 800fe38:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fe3a:	693b      	ldr	r3, [r7, #16]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d006      	beq.n	800fe4e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fe40:	693b      	ldr	r3, [r7, #16]
 800fe42:	2200      	movs	r2, #0
 800fe44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fe48:	711a      	strb	r2, [r3, #4]
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d006      	beq.n	800fe62 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	2200      	movs	r2, #0
 800fe58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fe5c:	711a      	strb	r2, [r3, #4]
 800fe5e:	2200      	movs	r2, #0
 800fe60:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	2243      	movs	r2, #67	@ 0x43
 800fe66:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800fe68:	4b02      	ldr	r3, [pc, #8]	@ (800fe74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	3718      	adds	r7, #24
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	bd80      	pop	{r7, pc}
 800fe72:	bf00      	nop
 800fe74:	20000078 	.word	0x20000078

0800fe78 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800fe78:	b480      	push	{r7}
 800fe7a:	b083      	sub	sp, #12
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	220a      	movs	r2, #10
 800fe84:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800fe86:	4b03      	ldr	r3, [pc, #12]	@ (800fe94 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800fe88:	4618      	mov	r0, r3
 800fe8a:	370c      	adds	r7, #12
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe92:	4770      	bx	lr
 800fe94:	20000034 	.word	0x20000034

0800fe98 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800fe98:	b480      	push	{r7}
 800fe9a:	b083      	sub	sp, #12
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
 800fea0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800fea2:	683b      	ldr	r3, [r7, #0]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d101      	bne.n	800feac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800fea8:	2303      	movs	r3, #3
 800feaa:	e009      	b.n	800fec0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800feb2:	687a      	ldr	r2, [r7, #4]
 800feb4:	33b0      	adds	r3, #176	@ 0xb0
 800feb6:	009b      	lsls	r3, r3, #2
 800feb8:	4413      	add	r3, r2
 800feba:	683a      	ldr	r2, [r7, #0]
 800febc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800febe:	2300      	movs	r3, #0
}
 800fec0:	4618      	mov	r0, r3
 800fec2:	370c      	adds	r7, #12
 800fec4:	46bd      	mov	sp, r7
 800fec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feca:	4770      	bx	lr

0800fecc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800fecc:	b480      	push	{r7}
 800fece:	b087      	sub	sp, #28
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	60f8      	str	r0, [r7, #12]
 800fed4:	60b9      	str	r1, [r7, #8]
 800fed6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	32b0      	adds	r2, #176	@ 0xb0
 800fee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fee6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800fee8:	697b      	ldr	r3, [r7, #20]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d101      	bne.n	800fef2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800feee:	2303      	movs	r3, #3
 800fef0:	e008      	b.n	800ff04 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800fef2:	697b      	ldr	r3, [r7, #20]
 800fef4:	68ba      	ldr	r2, [r7, #8]
 800fef6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800fefa:	697b      	ldr	r3, [r7, #20]
 800fefc:	687a      	ldr	r2, [r7, #4]
 800fefe:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800ff02:	2300      	movs	r3, #0
}
 800ff04:	4618      	mov	r0, r3
 800ff06:	371c      	adds	r7, #28
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0e:	4770      	bx	lr

0800ff10 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ff10:	b480      	push	{r7}
 800ff12:	b085      	sub	sp, #20
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
 800ff18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	32b0      	adds	r2, #176	@ 0xb0
 800ff24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff28:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d101      	bne.n	800ff34 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ff30:	2303      	movs	r3, #3
 800ff32:	e004      	b.n	800ff3e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	683a      	ldr	r2, [r7, #0]
 800ff38:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800ff3c:	2300      	movs	r3, #0
}
 800ff3e:	4618      	mov	r0, r3
 800ff40:	3714      	adds	r7, #20
 800ff42:	46bd      	mov	sp, r7
 800ff44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff48:	4770      	bx	lr
	...

0800ff4c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b084      	sub	sp, #16
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	32b0      	adds	r2, #176	@ 0xb0
 800ff5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff62:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800ff64:	2301      	movs	r3, #1
 800ff66:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ff68:	68bb      	ldr	r3, [r7, #8]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d101      	bne.n	800ff72 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ff6e:	2303      	movs	r3, #3
 800ff70:	e025      	b.n	800ffbe <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800ff72:	68bb      	ldr	r3, [r7, #8]
 800ff74:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d11f      	bne.n	800ffbc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ff7c:	68bb      	ldr	r3, [r7, #8]
 800ff7e:	2201      	movs	r2, #1
 800ff80:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800ff84:	4b10      	ldr	r3, [pc, #64]	@ (800ffc8 <USBD_CDC_TransmitPacket+0x7c>)
 800ff86:	781b      	ldrb	r3, [r3, #0]
 800ff88:	f003 020f 	and.w	r2, r3, #15
 800ff8c:	68bb      	ldr	r3, [r7, #8]
 800ff8e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800ff92:	6878      	ldr	r0, [r7, #4]
 800ff94:	4613      	mov	r3, r2
 800ff96:	009b      	lsls	r3, r3, #2
 800ff98:	4413      	add	r3, r2
 800ff9a:	009b      	lsls	r3, r3, #2
 800ff9c:	4403      	add	r3, r0
 800ff9e:	3318      	adds	r3, #24
 800ffa0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800ffa2:	4b09      	ldr	r3, [pc, #36]	@ (800ffc8 <USBD_CDC_TransmitPacket+0x7c>)
 800ffa4:	7819      	ldrb	r1, [r3, #0]
 800ffa6:	68bb      	ldr	r3, [r7, #8]
 800ffa8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800ffac:	68bb      	ldr	r3, [r7, #8]
 800ffae:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ffb2:	6878      	ldr	r0, [r7, #4]
 800ffb4:	f001 ff63 	bl	8011e7e <USBD_LL_Transmit>

    ret = USBD_OK;
 800ffb8:	2300      	movs	r3, #0
 800ffba:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ffbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	3710      	adds	r7, #16
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	bd80      	pop	{r7, pc}
 800ffc6:	bf00      	nop
 800ffc8:	200000bb 	.word	0x200000bb

0800ffcc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b084      	sub	sp, #16
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	32b0      	adds	r2, #176	@ 0xb0
 800ffde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffe2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	32b0      	adds	r2, #176	@ 0xb0
 800ffee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d101      	bne.n	800fffa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800fff6:	2303      	movs	r3, #3
 800fff8:	e018      	b.n	801002c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	7c1b      	ldrb	r3, [r3, #16]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d10a      	bne.n	8010018 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010002:	4b0c      	ldr	r3, [pc, #48]	@ (8010034 <USBD_CDC_ReceivePacket+0x68>)
 8010004:	7819      	ldrb	r1, [r3, #0]
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801000c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010010:	6878      	ldr	r0, [r7, #4]
 8010012:	f001 ff55 	bl	8011ec0 <USBD_LL_PrepareReceive>
 8010016:	e008      	b.n	801002a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010018:	4b06      	ldr	r3, [pc, #24]	@ (8010034 <USBD_CDC_ReceivePacket+0x68>)
 801001a:	7819      	ldrb	r1, [r3, #0]
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010022:	2340      	movs	r3, #64	@ 0x40
 8010024:	6878      	ldr	r0, [r7, #4]
 8010026:	f001 ff4b 	bl	8011ec0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801002a:	2300      	movs	r3, #0
}
 801002c:	4618      	mov	r0, r3
 801002e:	3710      	adds	r7, #16
 8010030:	46bd      	mov	sp, r7
 8010032:	bd80      	pop	{r7, pc}
 8010034:	200000bc 	.word	0x200000bc

08010038 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b086      	sub	sp, #24
 801003c:	af00      	add	r7, sp, #0
 801003e:	60f8      	str	r0, [r7, #12]
 8010040:	60b9      	str	r1, [r7, #8]
 8010042:	4613      	mov	r3, r2
 8010044:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d10a      	bne.n	8010062 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 801004c:	4817      	ldr	r0, [pc, #92]	@ (80100ac <USBD_Init+0x74>)
 801004e:	f002 fd05 	bl	8012a5c <iprintf>
 8010052:	4817      	ldr	r0, [pc, #92]	@ (80100b0 <USBD_Init+0x78>)
 8010054:	f002 fd02 	bl	8012a5c <iprintf>
 8010058:	200a      	movs	r0, #10
 801005a:	f002 fd11 	bl	8012a80 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801005e:	2303      	movs	r3, #3
 8010060:	e01f      	b.n	80100a2 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	2200      	movs	r2, #0
 8010066:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	2200      	movs	r2, #0
 801006e:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	2200      	movs	r2, #0
 8010076:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801007a:	68bb      	ldr	r3, [r7, #8]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d003      	beq.n	8010088 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	68ba      	ldr	r2, [r7, #8]
 8010084:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	2201      	movs	r2, #1
 801008c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	79fa      	ldrb	r2, [r7, #7]
 8010094:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010096:	68f8      	ldr	r0, [r7, #12]
 8010098:	f001 fda6 	bl	8011be8 <USBD_LL_Init>
 801009c:	4603      	mov	r3, r0
 801009e:	75fb      	strb	r3, [r7, #23]

  return ret;
 80100a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80100a2:	4618      	mov	r0, r3
 80100a4:	3718      	adds	r7, #24
 80100a6:	46bd      	mov	sp, r7
 80100a8:	bd80      	pop	{r7, pc}
 80100aa:	bf00      	nop
 80100ac:	08014a10 	.word	0x08014a10
 80100b0:	08014a18 	.word	0x08014a18

080100b4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b084      	sub	sp, #16
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	6078      	str	r0, [r7, #4]
 80100bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80100be:	2300      	movs	r3, #0
 80100c0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d10a      	bne.n	80100de <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 80100c8:	481a      	ldr	r0, [pc, #104]	@ (8010134 <USBD_RegisterClass+0x80>)
 80100ca:	f002 fcc7 	bl	8012a5c <iprintf>
 80100ce:	481a      	ldr	r0, [pc, #104]	@ (8010138 <USBD_RegisterClass+0x84>)
 80100d0:	f002 fcc4 	bl	8012a5c <iprintf>
 80100d4:	200a      	movs	r0, #10
 80100d6:	f002 fcd3 	bl	8012a80 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80100da:	2303      	movs	r3, #3
 80100dc:	e025      	b.n	801012a <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	683a      	ldr	r2, [r7, #0]
 80100e2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	32ae      	adds	r2, #174	@ 0xae
 80100f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d00f      	beq.n	801011a <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	32ae      	adds	r2, #174	@ 0xae
 8010104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801010a:	f107 020e 	add.w	r2, r7, #14
 801010e:	4610      	mov	r0, r2
 8010110:	4798      	blx	r3
 8010112:	4602      	mov	r2, r0
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010120:	1c5a      	adds	r2, r3, #1
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8010128:	2300      	movs	r3, #0
}
 801012a:	4618      	mov	r0, r3
 801012c:	3710      	adds	r7, #16
 801012e:	46bd      	mov	sp, r7
 8010130:	bd80      	pop	{r7, pc}
 8010132:	bf00      	nop
 8010134:	08014a10 	.word	0x08014a10
 8010138:	08014a30 	.word	0x08014a30

0801013c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801013c:	b580      	push	{r7, lr}
 801013e:	b082      	sub	sp, #8
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010144:	6878      	ldr	r0, [r7, #4]
 8010146:	f001 fdb1 	bl	8011cac <USBD_LL_Start>
 801014a:	4603      	mov	r3, r0
}
 801014c:	4618      	mov	r0, r3
 801014e:	3708      	adds	r7, #8
 8010150:	46bd      	mov	sp, r7
 8010152:	bd80      	pop	{r7, pc}

08010154 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8010154:	b480      	push	{r7}
 8010156:	b083      	sub	sp, #12
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801015c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801015e:	4618      	mov	r0, r3
 8010160:	370c      	adds	r7, #12
 8010162:	46bd      	mov	sp, r7
 8010164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010168:	4770      	bx	lr

0801016a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801016a:	b580      	push	{r7, lr}
 801016c:	b084      	sub	sp, #16
 801016e:	af00      	add	r7, sp, #0
 8010170:	6078      	str	r0, [r7, #4]
 8010172:	460b      	mov	r3, r1
 8010174:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010176:	2300      	movs	r3, #0
 8010178:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010180:	2b00      	cmp	r3, #0
 8010182:	d009      	beq.n	8010198 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	78fa      	ldrb	r2, [r7, #3]
 801018e:	4611      	mov	r1, r2
 8010190:	6878      	ldr	r0, [r7, #4]
 8010192:	4798      	blx	r3
 8010194:	4603      	mov	r3, r0
 8010196:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010198:	7bfb      	ldrb	r3, [r7, #15]
}
 801019a:	4618      	mov	r0, r3
 801019c:	3710      	adds	r7, #16
 801019e:	46bd      	mov	sp, r7
 80101a0:	bd80      	pop	{r7, pc}

080101a2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80101a2:	b580      	push	{r7, lr}
 80101a4:	b084      	sub	sp, #16
 80101a6:	af00      	add	r7, sp, #0
 80101a8:	6078      	str	r0, [r7, #4]
 80101aa:	460b      	mov	r3, r1
 80101ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80101ae:	2300      	movs	r3, #0
 80101b0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80101b8:	685b      	ldr	r3, [r3, #4]
 80101ba:	78fa      	ldrb	r2, [r7, #3]
 80101bc:	4611      	mov	r1, r2
 80101be:	6878      	ldr	r0, [r7, #4]
 80101c0:	4798      	blx	r3
 80101c2:	4603      	mov	r3, r0
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d001      	beq.n	80101cc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80101c8:	2303      	movs	r3, #3
 80101ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80101cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80101ce:	4618      	mov	r0, r3
 80101d0:	3710      	adds	r7, #16
 80101d2:	46bd      	mov	sp, r7
 80101d4:	bd80      	pop	{r7, pc}

080101d6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80101d6:	b580      	push	{r7, lr}
 80101d8:	b084      	sub	sp, #16
 80101da:	af00      	add	r7, sp, #0
 80101dc:	6078      	str	r0, [r7, #4]
 80101de:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80101e6:	6839      	ldr	r1, [r7, #0]
 80101e8:	4618      	mov	r0, r3
 80101ea:	f001 f8a4 	bl	8011336 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	2201      	movs	r2, #1
 80101f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80101fc:	461a      	mov	r2, r3
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801020a:	f003 031f 	and.w	r3, r3, #31
 801020e:	2b02      	cmp	r3, #2
 8010210:	d01a      	beq.n	8010248 <USBD_LL_SetupStage+0x72>
 8010212:	2b02      	cmp	r3, #2
 8010214:	d822      	bhi.n	801025c <USBD_LL_SetupStage+0x86>
 8010216:	2b00      	cmp	r3, #0
 8010218:	d002      	beq.n	8010220 <USBD_LL_SetupStage+0x4a>
 801021a:	2b01      	cmp	r3, #1
 801021c:	d00a      	beq.n	8010234 <USBD_LL_SetupStage+0x5e>
 801021e:	e01d      	b.n	801025c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010226:	4619      	mov	r1, r3
 8010228:	6878      	ldr	r0, [r7, #4]
 801022a:	f000 fad1 	bl	80107d0 <USBD_StdDevReq>
 801022e:	4603      	mov	r3, r0
 8010230:	73fb      	strb	r3, [r7, #15]
      break;
 8010232:	e020      	b.n	8010276 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801023a:	4619      	mov	r1, r3
 801023c:	6878      	ldr	r0, [r7, #4]
 801023e:	f000 fb39 	bl	80108b4 <USBD_StdItfReq>
 8010242:	4603      	mov	r3, r0
 8010244:	73fb      	strb	r3, [r7, #15]
      break;
 8010246:	e016      	b.n	8010276 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801024e:	4619      	mov	r1, r3
 8010250:	6878      	ldr	r0, [r7, #4]
 8010252:	f000 fb9b 	bl	801098c <USBD_StdEPReq>
 8010256:	4603      	mov	r3, r0
 8010258:	73fb      	strb	r3, [r7, #15]
      break;
 801025a:	e00c      	b.n	8010276 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010262:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8010266:	b2db      	uxtb	r3, r3
 8010268:	4619      	mov	r1, r3
 801026a:	6878      	ldr	r0, [r7, #4]
 801026c:	f001 fd7e 	bl	8011d6c <USBD_LL_StallEP>
 8010270:	4603      	mov	r3, r0
 8010272:	73fb      	strb	r3, [r7, #15]
      break;
 8010274:	bf00      	nop
  }

  return ret;
 8010276:	7bfb      	ldrb	r3, [r7, #15]
}
 8010278:	4618      	mov	r0, r3
 801027a:	3710      	adds	r7, #16
 801027c:	46bd      	mov	sp, r7
 801027e:	bd80      	pop	{r7, pc}

08010280 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010280:	b580      	push	{r7, lr}
 8010282:	b086      	sub	sp, #24
 8010284:	af00      	add	r7, sp, #0
 8010286:	60f8      	str	r0, [r7, #12]
 8010288:	460b      	mov	r3, r1
 801028a:	607a      	str	r2, [r7, #4]
 801028c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801028e:	2300      	movs	r3, #0
 8010290:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8010292:	7afb      	ldrb	r3, [r7, #11]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d16e      	bne.n	8010376 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 801029e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80102a6:	2b03      	cmp	r3, #3
 80102a8:	f040 8098 	bne.w	80103dc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80102ac:	693b      	ldr	r3, [r7, #16]
 80102ae:	689a      	ldr	r2, [r3, #8]
 80102b0:	693b      	ldr	r3, [r7, #16]
 80102b2:	68db      	ldr	r3, [r3, #12]
 80102b4:	429a      	cmp	r2, r3
 80102b6:	d913      	bls.n	80102e0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80102b8:	693b      	ldr	r3, [r7, #16]
 80102ba:	689a      	ldr	r2, [r3, #8]
 80102bc:	693b      	ldr	r3, [r7, #16]
 80102be:	68db      	ldr	r3, [r3, #12]
 80102c0:	1ad2      	subs	r2, r2, r3
 80102c2:	693b      	ldr	r3, [r7, #16]
 80102c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80102c6:	693b      	ldr	r3, [r7, #16]
 80102c8:	68da      	ldr	r2, [r3, #12]
 80102ca:	693b      	ldr	r3, [r7, #16]
 80102cc:	689b      	ldr	r3, [r3, #8]
 80102ce:	4293      	cmp	r3, r2
 80102d0:	bf28      	it	cs
 80102d2:	4613      	movcs	r3, r2
 80102d4:	461a      	mov	r2, r3
 80102d6:	6879      	ldr	r1, [r7, #4]
 80102d8:	68f8      	ldr	r0, [r7, #12]
 80102da:	f001 f92c 	bl	8011536 <USBD_CtlContinueRx>
 80102de:	e07d      	b.n	80103dc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80102e6:	f003 031f 	and.w	r3, r3, #31
 80102ea:	2b02      	cmp	r3, #2
 80102ec:	d014      	beq.n	8010318 <USBD_LL_DataOutStage+0x98>
 80102ee:	2b02      	cmp	r3, #2
 80102f0:	d81d      	bhi.n	801032e <USBD_LL_DataOutStage+0xae>
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d002      	beq.n	80102fc <USBD_LL_DataOutStage+0x7c>
 80102f6:	2b01      	cmp	r3, #1
 80102f8:	d003      	beq.n	8010302 <USBD_LL_DataOutStage+0x82>
 80102fa:	e018      	b.n	801032e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80102fc:	2300      	movs	r3, #0
 80102fe:	75bb      	strb	r3, [r7, #22]
            break;
 8010300:	e018      	b.n	8010334 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8010308:	b2db      	uxtb	r3, r3
 801030a:	4619      	mov	r1, r3
 801030c:	68f8      	ldr	r0, [r7, #12]
 801030e:	f000 f9d2 	bl	80106b6 <USBD_CoreFindIF>
 8010312:	4603      	mov	r3, r0
 8010314:	75bb      	strb	r3, [r7, #22]
            break;
 8010316:	e00d      	b.n	8010334 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801031e:	b2db      	uxtb	r3, r3
 8010320:	4619      	mov	r1, r3
 8010322:	68f8      	ldr	r0, [r7, #12]
 8010324:	f000 f9d4 	bl	80106d0 <USBD_CoreFindEP>
 8010328:	4603      	mov	r3, r0
 801032a:	75bb      	strb	r3, [r7, #22]
            break;
 801032c:	e002      	b.n	8010334 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801032e:	2300      	movs	r3, #0
 8010330:	75bb      	strb	r3, [r7, #22]
            break;
 8010332:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8010334:	7dbb      	ldrb	r3, [r7, #22]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d119      	bne.n	801036e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010340:	b2db      	uxtb	r3, r3
 8010342:	2b03      	cmp	r3, #3
 8010344:	d113      	bne.n	801036e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8010346:	7dba      	ldrb	r2, [r7, #22]
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	32ae      	adds	r2, #174	@ 0xae
 801034c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010350:	691b      	ldr	r3, [r3, #16]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d00b      	beq.n	801036e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8010356:	7dba      	ldrb	r2, [r7, #22]
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801035e:	7dba      	ldrb	r2, [r7, #22]
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	32ae      	adds	r2, #174	@ 0xae
 8010364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010368:	691b      	ldr	r3, [r3, #16]
 801036a:	68f8      	ldr	r0, [r7, #12]
 801036c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801036e:	68f8      	ldr	r0, [r7, #12]
 8010370:	f001 f8f2 	bl	8011558 <USBD_CtlSendStatus>
 8010374:	e032      	b.n	80103dc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8010376:	7afb      	ldrb	r3, [r7, #11]
 8010378:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801037c:	b2db      	uxtb	r3, r3
 801037e:	4619      	mov	r1, r3
 8010380:	68f8      	ldr	r0, [r7, #12]
 8010382:	f000 f9a5 	bl	80106d0 <USBD_CoreFindEP>
 8010386:	4603      	mov	r3, r0
 8010388:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801038a:	7dbb      	ldrb	r3, [r7, #22]
 801038c:	2bff      	cmp	r3, #255	@ 0xff
 801038e:	d025      	beq.n	80103dc <USBD_LL_DataOutStage+0x15c>
 8010390:	7dbb      	ldrb	r3, [r7, #22]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d122      	bne.n	80103dc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801039c:	b2db      	uxtb	r3, r3
 801039e:	2b03      	cmp	r3, #3
 80103a0:	d117      	bne.n	80103d2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80103a2:	7dba      	ldrb	r2, [r7, #22]
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	32ae      	adds	r2, #174	@ 0xae
 80103a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103ac:	699b      	ldr	r3, [r3, #24]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d00f      	beq.n	80103d2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80103b2:	7dba      	ldrb	r2, [r7, #22]
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80103ba:	7dba      	ldrb	r2, [r7, #22]
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	32ae      	adds	r2, #174	@ 0xae
 80103c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103c4:	699b      	ldr	r3, [r3, #24]
 80103c6:	7afa      	ldrb	r2, [r7, #11]
 80103c8:	4611      	mov	r1, r2
 80103ca:	68f8      	ldr	r0, [r7, #12]
 80103cc:	4798      	blx	r3
 80103ce:	4603      	mov	r3, r0
 80103d0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80103d2:	7dfb      	ldrb	r3, [r7, #23]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d001      	beq.n	80103dc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80103d8:	7dfb      	ldrb	r3, [r7, #23]
 80103da:	e000      	b.n	80103de <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80103dc:	2300      	movs	r3, #0
}
 80103de:	4618      	mov	r0, r3
 80103e0:	3718      	adds	r7, #24
 80103e2:	46bd      	mov	sp, r7
 80103e4:	bd80      	pop	{r7, pc}

080103e6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80103e6:	b580      	push	{r7, lr}
 80103e8:	b086      	sub	sp, #24
 80103ea:	af00      	add	r7, sp, #0
 80103ec:	60f8      	str	r0, [r7, #12]
 80103ee:	460b      	mov	r3, r1
 80103f0:	607a      	str	r2, [r7, #4]
 80103f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80103f4:	7afb      	ldrb	r3, [r7, #11]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d16f      	bne.n	80104da <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	3314      	adds	r3, #20
 80103fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8010406:	2b02      	cmp	r3, #2
 8010408:	d15a      	bne.n	80104c0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801040a:	693b      	ldr	r3, [r7, #16]
 801040c:	689a      	ldr	r2, [r3, #8]
 801040e:	693b      	ldr	r3, [r7, #16]
 8010410:	68db      	ldr	r3, [r3, #12]
 8010412:	429a      	cmp	r2, r3
 8010414:	d914      	bls.n	8010440 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010416:	693b      	ldr	r3, [r7, #16]
 8010418:	689a      	ldr	r2, [r3, #8]
 801041a:	693b      	ldr	r3, [r7, #16]
 801041c:	68db      	ldr	r3, [r3, #12]
 801041e:	1ad2      	subs	r2, r2, r3
 8010420:	693b      	ldr	r3, [r7, #16]
 8010422:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010424:	693b      	ldr	r3, [r7, #16]
 8010426:	689b      	ldr	r3, [r3, #8]
 8010428:	461a      	mov	r2, r3
 801042a:	6879      	ldr	r1, [r7, #4]
 801042c:	68f8      	ldr	r0, [r7, #12]
 801042e:	f001 f854 	bl	80114da <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010432:	2300      	movs	r3, #0
 8010434:	2200      	movs	r2, #0
 8010436:	2100      	movs	r1, #0
 8010438:	68f8      	ldr	r0, [r7, #12]
 801043a:	f001 fd41 	bl	8011ec0 <USBD_LL_PrepareReceive>
 801043e:	e03f      	b.n	80104c0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010440:	693b      	ldr	r3, [r7, #16]
 8010442:	68da      	ldr	r2, [r3, #12]
 8010444:	693b      	ldr	r3, [r7, #16]
 8010446:	689b      	ldr	r3, [r3, #8]
 8010448:	429a      	cmp	r2, r3
 801044a:	d11c      	bne.n	8010486 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801044c:	693b      	ldr	r3, [r7, #16]
 801044e:	685a      	ldr	r2, [r3, #4]
 8010450:	693b      	ldr	r3, [r7, #16]
 8010452:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010454:	429a      	cmp	r2, r3
 8010456:	d316      	bcc.n	8010486 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010458:	693b      	ldr	r3, [r7, #16]
 801045a:	685a      	ldr	r2, [r3, #4]
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010462:	429a      	cmp	r2, r3
 8010464:	d20f      	bcs.n	8010486 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010466:	2200      	movs	r2, #0
 8010468:	2100      	movs	r1, #0
 801046a:	68f8      	ldr	r0, [r7, #12]
 801046c:	f001 f835 	bl	80114da <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	2200      	movs	r2, #0
 8010474:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010478:	2300      	movs	r3, #0
 801047a:	2200      	movs	r2, #0
 801047c:	2100      	movs	r1, #0
 801047e:	68f8      	ldr	r0, [r7, #12]
 8010480:	f001 fd1e 	bl	8011ec0 <USBD_LL_PrepareReceive>
 8010484:	e01c      	b.n	80104c0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801048c:	b2db      	uxtb	r3, r3
 801048e:	2b03      	cmp	r3, #3
 8010490:	d10f      	bne.n	80104b2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010498:	68db      	ldr	r3, [r3, #12]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d009      	beq.n	80104b2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	2200      	movs	r2, #0
 80104a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80104ac:	68db      	ldr	r3, [r3, #12]
 80104ae:	68f8      	ldr	r0, [r7, #12]
 80104b0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80104b2:	2180      	movs	r1, #128	@ 0x80
 80104b4:	68f8      	ldr	r0, [r7, #12]
 80104b6:	f001 fc59 	bl	8011d6c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80104ba:	68f8      	ldr	r0, [r7, #12]
 80104bc:	f001 f85f 	bl	801157e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d03a      	beq.n	8010540 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80104ca:	68f8      	ldr	r0, [r7, #12]
 80104cc:	f7ff fe42 	bl	8010154 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	2200      	movs	r2, #0
 80104d4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80104d8:	e032      	b.n	8010540 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80104da:	7afb      	ldrb	r3, [r7, #11]
 80104dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80104e0:	b2db      	uxtb	r3, r3
 80104e2:	4619      	mov	r1, r3
 80104e4:	68f8      	ldr	r0, [r7, #12]
 80104e6:	f000 f8f3 	bl	80106d0 <USBD_CoreFindEP>
 80104ea:	4603      	mov	r3, r0
 80104ec:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80104ee:	7dfb      	ldrb	r3, [r7, #23]
 80104f0:	2bff      	cmp	r3, #255	@ 0xff
 80104f2:	d025      	beq.n	8010540 <USBD_LL_DataInStage+0x15a>
 80104f4:	7dfb      	ldrb	r3, [r7, #23]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d122      	bne.n	8010540 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010500:	b2db      	uxtb	r3, r3
 8010502:	2b03      	cmp	r3, #3
 8010504:	d11c      	bne.n	8010540 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8010506:	7dfa      	ldrb	r2, [r7, #23]
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	32ae      	adds	r2, #174	@ 0xae
 801050c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010510:	695b      	ldr	r3, [r3, #20]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d014      	beq.n	8010540 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8010516:	7dfa      	ldrb	r2, [r7, #23]
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801051e:	7dfa      	ldrb	r2, [r7, #23]
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	32ae      	adds	r2, #174	@ 0xae
 8010524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010528:	695b      	ldr	r3, [r3, #20]
 801052a:	7afa      	ldrb	r2, [r7, #11]
 801052c:	4611      	mov	r1, r2
 801052e:	68f8      	ldr	r0, [r7, #12]
 8010530:	4798      	blx	r3
 8010532:	4603      	mov	r3, r0
 8010534:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8010536:	7dbb      	ldrb	r3, [r7, #22]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d001      	beq.n	8010540 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 801053c:	7dbb      	ldrb	r3, [r7, #22]
 801053e:	e000      	b.n	8010542 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8010540:	2300      	movs	r3, #0
}
 8010542:	4618      	mov	r0, r3
 8010544:	3718      	adds	r7, #24
 8010546:	46bd      	mov	sp, r7
 8010548:	bd80      	pop	{r7, pc}

0801054a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801054a:	b580      	push	{r7, lr}
 801054c:	b084      	sub	sp, #16
 801054e:	af00      	add	r7, sp, #0
 8010550:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8010552:	2300      	movs	r3, #0
 8010554:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	2201      	movs	r2, #1
 801055a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	2200      	movs	r2, #0
 8010562:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	2200      	movs	r2, #0
 801056a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	2200      	movs	r2, #0
 8010570:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	2200      	movs	r2, #0
 8010578:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010582:	2b00      	cmp	r3, #0
 8010584:	d014      	beq.n	80105b0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801058c:	685b      	ldr	r3, [r3, #4]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d00e      	beq.n	80105b0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010598:	685b      	ldr	r3, [r3, #4]
 801059a:	687a      	ldr	r2, [r7, #4]
 801059c:	6852      	ldr	r2, [r2, #4]
 801059e:	b2d2      	uxtb	r2, r2
 80105a0:	4611      	mov	r1, r2
 80105a2:	6878      	ldr	r0, [r7, #4]
 80105a4:	4798      	blx	r3
 80105a6:	4603      	mov	r3, r0
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d001      	beq.n	80105b0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80105ac:	2303      	movs	r3, #3
 80105ae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80105b0:	2340      	movs	r3, #64	@ 0x40
 80105b2:	2200      	movs	r2, #0
 80105b4:	2100      	movs	r1, #0
 80105b6:	6878      	ldr	r0, [r7, #4]
 80105b8:	f001 fb93 	bl	8011ce2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	2201      	movs	r2, #1
 80105c0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	2240      	movs	r2, #64	@ 0x40
 80105c8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80105cc:	2340      	movs	r3, #64	@ 0x40
 80105ce:	2200      	movs	r2, #0
 80105d0:	2180      	movs	r1, #128	@ 0x80
 80105d2:	6878      	ldr	r0, [r7, #4]
 80105d4:	f001 fb85 	bl	8011ce2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	2201      	movs	r2, #1
 80105dc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	2240      	movs	r2, #64	@ 0x40
 80105e2:	621a      	str	r2, [r3, #32]

  return ret;
 80105e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80105e6:	4618      	mov	r0, r3
 80105e8:	3710      	adds	r7, #16
 80105ea:	46bd      	mov	sp, r7
 80105ec:	bd80      	pop	{r7, pc}

080105ee <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80105ee:	b480      	push	{r7}
 80105f0:	b083      	sub	sp, #12
 80105f2:	af00      	add	r7, sp, #0
 80105f4:	6078      	str	r0, [r7, #4]
 80105f6:	460b      	mov	r3, r1
 80105f8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	78fa      	ldrb	r2, [r7, #3]
 80105fe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010600:	2300      	movs	r3, #0
}
 8010602:	4618      	mov	r0, r3
 8010604:	370c      	adds	r7, #12
 8010606:	46bd      	mov	sp, r7
 8010608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060c:	4770      	bx	lr

0801060e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801060e:	b480      	push	{r7}
 8010610:	b083      	sub	sp, #12
 8010612:	af00      	add	r7, sp, #0
 8010614:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801061c:	b2db      	uxtb	r3, r3
 801061e:	2b04      	cmp	r3, #4
 8010620:	d006      	beq.n	8010630 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010628:	b2da      	uxtb	r2, r3
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	2204      	movs	r2, #4
 8010634:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8010638:	2300      	movs	r3, #0
}
 801063a:	4618      	mov	r0, r3
 801063c:	370c      	adds	r7, #12
 801063e:	46bd      	mov	sp, r7
 8010640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010644:	4770      	bx	lr

08010646 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010646:	b480      	push	{r7}
 8010648:	b083      	sub	sp, #12
 801064a:	af00      	add	r7, sp, #0
 801064c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010654:	b2db      	uxtb	r3, r3
 8010656:	2b04      	cmp	r3, #4
 8010658:	d106      	bne.n	8010668 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8010660:	b2da      	uxtb	r2, r3
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8010668:	2300      	movs	r3, #0
}
 801066a:	4618      	mov	r0, r3
 801066c:	370c      	adds	r7, #12
 801066e:	46bd      	mov	sp, r7
 8010670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010674:	4770      	bx	lr

08010676 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010676:	b580      	push	{r7, lr}
 8010678:	b082      	sub	sp, #8
 801067a:	af00      	add	r7, sp, #0
 801067c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010684:	b2db      	uxtb	r3, r3
 8010686:	2b03      	cmp	r3, #3
 8010688:	d110      	bne.n	80106ac <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010690:	2b00      	cmp	r3, #0
 8010692:	d00b      	beq.n	80106ac <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801069a:	69db      	ldr	r3, [r3, #28]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d005      	beq.n	80106ac <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80106a6:	69db      	ldr	r3, [r3, #28]
 80106a8:	6878      	ldr	r0, [r7, #4]
 80106aa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80106ac:	2300      	movs	r3, #0
}
 80106ae:	4618      	mov	r0, r3
 80106b0:	3708      	adds	r7, #8
 80106b2:	46bd      	mov	sp, r7
 80106b4:	bd80      	pop	{r7, pc}

080106b6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80106b6:	b480      	push	{r7}
 80106b8:	b083      	sub	sp, #12
 80106ba:	af00      	add	r7, sp, #0
 80106bc:	6078      	str	r0, [r7, #4]
 80106be:	460b      	mov	r3, r1
 80106c0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80106c2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80106c4:	4618      	mov	r0, r3
 80106c6:	370c      	adds	r7, #12
 80106c8:	46bd      	mov	sp, r7
 80106ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ce:	4770      	bx	lr

080106d0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80106d0:	b480      	push	{r7}
 80106d2:	b083      	sub	sp, #12
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
 80106d8:	460b      	mov	r3, r1
 80106da:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80106dc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80106de:	4618      	mov	r0, r3
 80106e0:	370c      	adds	r7, #12
 80106e2:	46bd      	mov	sp, r7
 80106e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e8:	4770      	bx	lr

080106ea <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80106ea:	b580      	push	{r7, lr}
 80106ec:	b086      	sub	sp, #24
 80106ee:	af00      	add	r7, sp, #0
 80106f0:	6078      	str	r0, [r7, #4]
 80106f2:	460b      	mov	r3, r1
 80106f4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80106fe:	2300      	movs	r3, #0
 8010700:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	885b      	ldrh	r3, [r3, #2]
 8010706:	b29b      	uxth	r3, r3
 8010708:	68fa      	ldr	r2, [r7, #12]
 801070a:	7812      	ldrb	r2, [r2, #0]
 801070c:	4293      	cmp	r3, r2
 801070e:	d91f      	bls.n	8010750 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	781b      	ldrb	r3, [r3, #0]
 8010714:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8010716:	e013      	b.n	8010740 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8010718:	f107 030a 	add.w	r3, r7, #10
 801071c:	4619      	mov	r1, r3
 801071e:	6978      	ldr	r0, [r7, #20]
 8010720:	f000 f81b 	bl	801075a <USBD_GetNextDesc>
 8010724:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8010726:	697b      	ldr	r3, [r7, #20]
 8010728:	785b      	ldrb	r3, [r3, #1]
 801072a:	2b05      	cmp	r3, #5
 801072c:	d108      	bne.n	8010740 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801072e:	697b      	ldr	r3, [r7, #20]
 8010730:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8010732:	693b      	ldr	r3, [r7, #16]
 8010734:	789b      	ldrb	r3, [r3, #2]
 8010736:	78fa      	ldrb	r2, [r7, #3]
 8010738:	429a      	cmp	r2, r3
 801073a:	d008      	beq.n	801074e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801073c:	2300      	movs	r3, #0
 801073e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	885b      	ldrh	r3, [r3, #2]
 8010744:	b29a      	uxth	r2, r3
 8010746:	897b      	ldrh	r3, [r7, #10]
 8010748:	429a      	cmp	r2, r3
 801074a:	d8e5      	bhi.n	8010718 <USBD_GetEpDesc+0x2e>
 801074c:	e000      	b.n	8010750 <USBD_GetEpDesc+0x66>
          break;
 801074e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8010750:	693b      	ldr	r3, [r7, #16]
}
 8010752:	4618      	mov	r0, r3
 8010754:	3718      	adds	r7, #24
 8010756:	46bd      	mov	sp, r7
 8010758:	bd80      	pop	{r7, pc}

0801075a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801075a:	b480      	push	{r7}
 801075c:	b085      	sub	sp, #20
 801075e:	af00      	add	r7, sp, #0
 8010760:	6078      	str	r0, [r7, #4]
 8010762:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8010768:	683b      	ldr	r3, [r7, #0]
 801076a:	881b      	ldrh	r3, [r3, #0]
 801076c:	68fa      	ldr	r2, [r7, #12]
 801076e:	7812      	ldrb	r2, [r2, #0]
 8010770:	4413      	add	r3, r2
 8010772:	b29a      	uxth	r2, r3
 8010774:	683b      	ldr	r3, [r7, #0]
 8010776:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	781b      	ldrb	r3, [r3, #0]
 801077c:	461a      	mov	r2, r3
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	4413      	add	r3, r2
 8010782:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010784:	68fb      	ldr	r3, [r7, #12]
}
 8010786:	4618      	mov	r0, r3
 8010788:	3714      	adds	r7, #20
 801078a:	46bd      	mov	sp, r7
 801078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010790:	4770      	bx	lr

08010792 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010792:	b480      	push	{r7}
 8010794:	b087      	sub	sp, #28
 8010796:	af00      	add	r7, sp, #0
 8010798:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801079e:	697b      	ldr	r3, [r7, #20]
 80107a0:	781b      	ldrb	r3, [r3, #0]
 80107a2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80107a4:	697b      	ldr	r3, [r7, #20]
 80107a6:	3301      	adds	r3, #1
 80107a8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80107aa:	697b      	ldr	r3, [r7, #20]
 80107ac:	781b      	ldrb	r3, [r3, #0]
 80107ae:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80107b0:	8a3b      	ldrh	r3, [r7, #16]
 80107b2:	021b      	lsls	r3, r3, #8
 80107b4:	b21a      	sxth	r2, r3
 80107b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80107ba:	4313      	orrs	r3, r2
 80107bc:	b21b      	sxth	r3, r3
 80107be:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80107c0:	89fb      	ldrh	r3, [r7, #14]
}
 80107c2:	4618      	mov	r0, r3
 80107c4:	371c      	adds	r7, #28
 80107c6:	46bd      	mov	sp, r7
 80107c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107cc:	4770      	bx	lr
	...

080107d0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b084      	sub	sp, #16
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
 80107d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80107da:	2300      	movs	r3, #0
 80107dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80107de:	683b      	ldr	r3, [r7, #0]
 80107e0:	781b      	ldrb	r3, [r3, #0]
 80107e2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80107e6:	2b40      	cmp	r3, #64	@ 0x40
 80107e8:	d005      	beq.n	80107f6 <USBD_StdDevReq+0x26>
 80107ea:	2b40      	cmp	r3, #64	@ 0x40
 80107ec:	d857      	bhi.n	801089e <USBD_StdDevReq+0xce>
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d00f      	beq.n	8010812 <USBD_StdDevReq+0x42>
 80107f2:	2b20      	cmp	r3, #32
 80107f4:	d153      	bne.n	801089e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	32ae      	adds	r2, #174	@ 0xae
 8010800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010804:	689b      	ldr	r3, [r3, #8]
 8010806:	6839      	ldr	r1, [r7, #0]
 8010808:	6878      	ldr	r0, [r7, #4]
 801080a:	4798      	blx	r3
 801080c:	4603      	mov	r3, r0
 801080e:	73fb      	strb	r3, [r7, #15]
      break;
 8010810:	e04a      	b.n	80108a8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010812:	683b      	ldr	r3, [r7, #0]
 8010814:	785b      	ldrb	r3, [r3, #1]
 8010816:	2b09      	cmp	r3, #9
 8010818:	d83b      	bhi.n	8010892 <USBD_StdDevReq+0xc2>
 801081a:	a201      	add	r2, pc, #4	@ (adr r2, 8010820 <USBD_StdDevReq+0x50>)
 801081c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010820:	08010875 	.word	0x08010875
 8010824:	08010889 	.word	0x08010889
 8010828:	08010893 	.word	0x08010893
 801082c:	0801087f 	.word	0x0801087f
 8010830:	08010893 	.word	0x08010893
 8010834:	08010853 	.word	0x08010853
 8010838:	08010849 	.word	0x08010849
 801083c:	08010893 	.word	0x08010893
 8010840:	0801086b 	.word	0x0801086b
 8010844:	0801085d 	.word	0x0801085d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010848:	6839      	ldr	r1, [r7, #0]
 801084a:	6878      	ldr	r0, [r7, #4]
 801084c:	f000 fa3c 	bl	8010cc8 <USBD_GetDescriptor>
          break;
 8010850:	e024      	b.n	801089c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010852:	6839      	ldr	r1, [r7, #0]
 8010854:	6878      	ldr	r0, [r7, #4]
 8010856:	f000 fbcb 	bl	8010ff0 <USBD_SetAddress>
          break;
 801085a:	e01f      	b.n	801089c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801085c:	6839      	ldr	r1, [r7, #0]
 801085e:	6878      	ldr	r0, [r7, #4]
 8010860:	f000 fc0a 	bl	8011078 <USBD_SetConfig>
 8010864:	4603      	mov	r3, r0
 8010866:	73fb      	strb	r3, [r7, #15]
          break;
 8010868:	e018      	b.n	801089c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801086a:	6839      	ldr	r1, [r7, #0]
 801086c:	6878      	ldr	r0, [r7, #4]
 801086e:	f000 fcad 	bl	80111cc <USBD_GetConfig>
          break;
 8010872:	e013      	b.n	801089c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010874:	6839      	ldr	r1, [r7, #0]
 8010876:	6878      	ldr	r0, [r7, #4]
 8010878:	f000 fcde 	bl	8011238 <USBD_GetStatus>
          break;
 801087c:	e00e      	b.n	801089c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801087e:	6839      	ldr	r1, [r7, #0]
 8010880:	6878      	ldr	r0, [r7, #4]
 8010882:	f000 fd0d 	bl	80112a0 <USBD_SetFeature>
          break;
 8010886:	e009      	b.n	801089c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010888:	6839      	ldr	r1, [r7, #0]
 801088a:	6878      	ldr	r0, [r7, #4]
 801088c:	f000 fd31 	bl	80112f2 <USBD_ClrFeature>
          break;
 8010890:	e004      	b.n	801089c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8010892:	6839      	ldr	r1, [r7, #0]
 8010894:	6878      	ldr	r0, [r7, #4]
 8010896:	f000 fd88 	bl	80113aa <USBD_CtlError>
          break;
 801089a:	bf00      	nop
      }
      break;
 801089c:	e004      	b.n	80108a8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801089e:	6839      	ldr	r1, [r7, #0]
 80108a0:	6878      	ldr	r0, [r7, #4]
 80108a2:	f000 fd82 	bl	80113aa <USBD_CtlError>
      break;
 80108a6:	bf00      	nop
  }

  return ret;
 80108a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80108aa:	4618      	mov	r0, r3
 80108ac:	3710      	adds	r7, #16
 80108ae:	46bd      	mov	sp, r7
 80108b0:	bd80      	pop	{r7, pc}
 80108b2:	bf00      	nop

080108b4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80108b4:	b580      	push	{r7, lr}
 80108b6:	b084      	sub	sp, #16
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	6078      	str	r0, [r7, #4]
 80108bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80108be:	2300      	movs	r3, #0
 80108c0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80108c2:	683b      	ldr	r3, [r7, #0]
 80108c4:	781b      	ldrb	r3, [r3, #0]
 80108c6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80108ca:	2b40      	cmp	r3, #64	@ 0x40
 80108cc:	d005      	beq.n	80108da <USBD_StdItfReq+0x26>
 80108ce:	2b40      	cmp	r3, #64	@ 0x40
 80108d0:	d852      	bhi.n	8010978 <USBD_StdItfReq+0xc4>
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d001      	beq.n	80108da <USBD_StdItfReq+0x26>
 80108d6:	2b20      	cmp	r3, #32
 80108d8:	d14e      	bne.n	8010978 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80108e0:	b2db      	uxtb	r3, r3
 80108e2:	3b01      	subs	r3, #1
 80108e4:	2b02      	cmp	r3, #2
 80108e6:	d840      	bhi.n	801096a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80108e8:	683b      	ldr	r3, [r7, #0]
 80108ea:	889b      	ldrh	r3, [r3, #4]
 80108ec:	b2db      	uxtb	r3, r3
 80108ee:	2b01      	cmp	r3, #1
 80108f0:	d836      	bhi.n	8010960 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80108f2:	683b      	ldr	r3, [r7, #0]
 80108f4:	889b      	ldrh	r3, [r3, #4]
 80108f6:	b2db      	uxtb	r3, r3
 80108f8:	4619      	mov	r1, r3
 80108fa:	6878      	ldr	r0, [r7, #4]
 80108fc:	f7ff fedb 	bl	80106b6 <USBD_CoreFindIF>
 8010900:	4603      	mov	r3, r0
 8010902:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010904:	7bbb      	ldrb	r3, [r7, #14]
 8010906:	2bff      	cmp	r3, #255	@ 0xff
 8010908:	d01d      	beq.n	8010946 <USBD_StdItfReq+0x92>
 801090a:	7bbb      	ldrb	r3, [r7, #14]
 801090c:	2b00      	cmp	r3, #0
 801090e:	d11a      	bne.n	8010946 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8010910:	7bba      	ldrb	r2, [r7, #14]
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	32ae      	adds	r2, #174	@ 0xae
 8010916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801091a:	689b      	ldr	r3, [r3, #8]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d00f      	beq.n	8010940 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8010920:	7bba      	ldrb	r2, [r7, #14]
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010928:	7bba      	ldrb	r2, [r7, #14]
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	32ae      	adds	r2, #174	@ 0xae
 801092e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010932:	689b      	ldr	r3, [r3, #8]
 8010934:	6839      	ldr	r1, [r7, #0]
 8010936:	6878      	ldr	r0, [r7, #4]
 8010938:	4798      	blx	r3
 801093a:	4603      	mov	r3, r0
 801093c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801093e:	e004      	b.n	801094a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8010940:	2303      	movs	r3, #3
 8010942:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010944:	e001      	b.n	801094a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8010946:	2303      	movs	r3, #3
 8010948:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801094a:	683b      	ldr	r3, [r7, #0]
 801094c:	88db      	ldrh	r3, [r3, #6]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d110      	bne.n	8010974 <USBD_StdItfReq+0xc0>
 8010952:	7bfb      	ldrb	r3, [r7, #15]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d10d      	bne.n	8010974 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8010958:	6878      	ldr	r0, [r7, #4]
 801095a:	f000 fdfd 	bl	8011558 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801095e:	e009      	b.n	8010974 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8010960:	6839      	ldr	r1, [r7, #0]
 8010962:	6878      	ldr	r0, [r7, #4]
 8010964:	f000 fd21 	bl	80113aa <USBD_CtlError>
          break;
 8010968:	e004      	b.n	8010974 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801096a:	6839      	ldr	r1, [r7, #0]
 801096c:	6878      	ldr	r0, [r7, #4]
 801096e:	f000 fd1c 	bl	80113aa <USBD_CtlError>
          break;
 8010972:	e000      	b.n	8010976 <USBD_StdItfReq+0xc2>
          break;
 8010974:	bf00      	nop
      }
      break;
 8010976:	e004      	b.n	8010982 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8010978:	6839      	ldr	r1, [r7, #0]
 801097a:	6878      	ldr	r0, [r7, #4]
 801097c:	f000 fd15 	bl	80113aa <USBD_CtlError>
      break;
 8010980:	bf00      	nop
  }

  return ret;
 8010982:	7bfb      	ldrb	r3, [r7, #15]
}
 8010984:	4618      	mov	r0, r3
 8010986:	3710      	adds	r7, #16
 8010988:	46bd      	mov	sp, r7
 801098a:	bd80      	pop	{r7, pc}

0801098c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801098c:	b580      	push	{r7, lr}
 801098e:	b084      	sub	sp, #16
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
 8010994:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8010996:	2300      	movs	r3, #0
 8010998:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801099a:	683b      	ldr	r3, [r7, #0]
 801099c:	889b      	ldrh	r3, [r3, #4]
 801099e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80109a0:	683b      	ldr	r3, [r7, #0]
 80109a2:	781b      	ldrb	r3, [r3, #0]
 80109a4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80109a8:	2b40      	cmp	r3, #64	@ 0x40
 80109aa:	d007      	beq.n	80109bc <USBD_StdEPReq+0x30>
 80109ac:	2b40      	cmp	r3, #64	@ 0x40
 80109ae:	f200 817f 	bhi.w	8010cb0 <USBD_StdEPReq+0x324>
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d02a      	beq.n	8010a0c <USBD_StdEPReq+0x80>
 80109b6:	2b20      	cmp	r3, #32
 80109b8:	f040 817a 	bne.w	8010cb0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80109bc:	7bbb      	ldrb	r3, [r7, #14]
 80109be:	4619      	mov	r1, r3
 80109c0:	6878      	ldr	r0, [r7, #4]
 80109c2:	f7ff fe85 	bl	80106d0 <USBD_CoreFindEP>
 80109c6:	4603      	mov	r3, r0
 80109c8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80109ca:	7b7b      	ldrb	r3, [r7, #13]
 80109cc:	2bff      	cmp	r3, #255	@ 0xff
 80109ce:	f000 8174 	beq.w	8010cba <USBD_StdEPReq+0x32e>
 80109d2:	7b7b      	ldrb	r3, [r7, #13]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	f040 8170 	bne.w	8010cba <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80109da:	7b7a      	ldrb	r2, [r7, #13]
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80109e2:	7b7a      	ldrb	r2, [r7, #13]
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	32ae      	adds	r2, #174	@ 0xae
 80109e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109ec:	689b      	ldr	r3, [r3, #8]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	f000 8163 	beq.w	8010cba <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80109f4:	7b7a      	ldrb	r2, [r7, #13]
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	32ae      	adds	r2, #174	@ 0xae
 80109fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109fe:	689b      	ldr	r3, [r3, #8]
 8010a00:	6839      	ldr	r1, [r7, #0]
 8010a02:	6878      	ldr	r0, [r7, #4]
 8010a04:	4798      	blx	r3
 8010a06:	4603      	mov	r3, r0
 8010a08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8010a0a:	e156      	b.n	8010cba <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010a0c:	683b      	ldr	r3, [r7, #0]
 8010a0e:	785b      	ldrb	r3, [r3, #1]
 8010a10:	2b03      	cmp	r3, #3
 8010a12:	d008      	beq.n	8010a26 <USBD_StdEPReq+0x9a>
 8010a14:	2b03      	cmp	r3, #3
 8010a16:	f300 8145 	bgt.w	8010ca4 <USBD_StdEPReq+0x318>
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	f000 809b 	beq.w	8010b56 <USBD_StdEPReq+0x1ca>
 8010a20:	2b01      	cmp	r3, #1
 8010a22:	d03c      	beq.n	8010a9e <USBD_StdEPReq+0x112>
 8010a24:	e13e      	b.n	8010ca4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010a2c:	b2db      	uxtb	r3, r3
 8010a2e:	2b02      	cmp	r3, #2
 8010a30:	d002      	beq.n	8010a38 <USBD_StdEPReq+0xac>
 8010a32:	2b03      	cmp	r3, #3
 8010a34:	d016      	beq.n	8010a64 <USBD_StdEPReq+0xd8>
 8010a36:	e02c      	b.n	8010a92 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010a38:	7bbb      	ldrb	r3, [r7, #14]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d00d      	beq.n	8010a5a <USBD_StdEPReq+0xce>
 8010a3e:	7bbb      	ldrb	r3, [r7, #14]
 8010a40:	2b80      	cmp	r3, #128	@ 0x80
 8010a42:	d00a      	beq.n	8010a5a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010a44:	7bbb      	ldrb	r3, [r7, #14]
 8010a46:	4619      	mov	r1, r3
 8010a48:	6878      	ldr	r0, [r7, #4]
 8010a4a:	f001 f98f 	bl	8011d6c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010a4e:	2180      	movs	r1, #128	@ 0x80
 8010a50:	6878      	ldr	r0, [r7, #4]
 8010a52:	f001 f98b 	bl	8011d6c <USBD_LL_StallEP>
 8010a56:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010a58:	e020      	b.n	8010a9c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8010a5a:	6839      	ldr	r1, [r7, #0]
 8010a5c:	6878      	ldr	r0, [r7, #4]
 8010a5e:	f000 fca4 	bl	80113aa <USBD_CtlError>
              break;
 8010a62:	e01b      	b.n	8010a9c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010a64:	683b      	ldr	r3, [r7, #0]
 8010a66:	885b      	ldrh	r3, [r3, #2]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d10e      	bne.n	8010a8a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010a6c:	7bbb      	ldrb	r3, [r7, #14]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d00b      	beq.n	8010a8a <USBD_StdEPReq+0xfe>
 8010a72:	7bbb      	ldrb	r3, [r7, #14]
 8010a74:	2b80      	cmp	r3, #128	@ 0x80
 8010a76:	d008      	beq.n	8010a8a <USBD_StdEPReq+0xfe>
 8010a78:	683b      	ldr	r3, [r7, #0]
 8010a7a:	88db      	ldrh	r3, [r3, #6]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d104      	bne.n	8010a8a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010a80:	7bbb      	ldrb	r3, [r7, #14]
 8010a82:	4619      	mov	r1, r3
 8010a84:	6878      	ldr	r0, [r7, #4]
 8010a86:	f001 f971 	bl	8011d6c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8010a8a:	6878      	ldr	r0, [r7, #4]
 8010a8c:	f000 fd64 	bl	8011558 <USBD_CtlSendStatus>

              break;
 8010a90:	e004      	b.n	8010a9c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8010a92:	6839      	ldr	r1, [r7, #0]
 8010a94:	6878      	ldr	r0, [r7, #4]
 8010a96:	f000 fc88 	bl	80113aa <USBD_CtlError>
              break;
 8010a9a:	bf00      	nop
          }
          break;
 8010a9c:	e107      	b.n	8010cae <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010aa4:	b2db      	uxtb	r3, r3
 8010aa6:	2b02      	cmp	r3, #2
 8010aa8:	d002      	beq.n	8010ab0 <USBD_StdEPReq+0x124>
 8010aaa:	2b03      	cmp	r3, #3
 8010aac:	d016      	beq.n	8010adc <USBD_StdEPReq+0x150>
 8010aae:	e04b      	b.n	8010b48 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010ab0:	7bbb      	ldrb	r3, [r7, #14]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d00d      	beq.n	8010ad2 <USBD_StdEPReq+0x146>
 8010ab6:	7bbb      	ldrb	r3, [r7, #14]
 8010ab8:	2b80      	cmp	r3, #128	@ 0x80
 8010aba:	d00a      	beq.n	8010ad2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010abc:	7bbb      	ldrb	r3, [r7, #14]
 8010abe:	4619      	mov	r1, r3
 8010ac0:	6878      	ldr	r0, [r7, #4]
 8010ac2:	f001 f953 	bl	8011d6c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010ac6:	2180      	movs	r1, #128	@ 0x80
 8010ac8:	6878      	ldr	r0, [r7, #4]
 8010aca:	f001 f94f 	bl	8011d6c <USBD_LL_StallEP>
 8010ace:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010ad0:	e040      	b.n	8010b54 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8010ad2:	6839      	ldr	r1, [r7, #0]
 8010ad4:	6878      	ldr	r0, [r7, #4]
 8010ad6:	f000 fc68 	bl	80113aa <USBD_CtlError>
              break;
 8010ada:	e03b      	b.n	8010b54 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010adc:	683b      	ldr	r3, [r7, #0]
 8010ade:	885b      	ldrh	r3, [r3, #2]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d136      	bne.n	8010b52 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010ae4:	7bbb      	ldrb	r3, [r7, #14]
 8010ae6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d004      	beq.n	8010af8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010aee:	7bbb      	ldrb	r3, [r7, #14]
 8010af0:	4619      	mov	r1, r3
 8010af2:	6878      	ldr	r0, [r7, #4]
 8010af4:	f001 f959 	bl	8011daa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8010af8:	6878      	ldr	r0, [r7, #4]
 8010afa:	f000 fd2d 	bl	8011558 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8010afe:	7bbb      	ldrb	r3, [r7, #14]
 8010b00:	4619      	mov	r1, r3
 8010b02:	6878      	ldr	r0, [r7, #4]
 8010b04:	f7ff fde4 	bl	80106d0 <USBD_CoreFindEP>
 8010b08:	4603      	mov	r3, r0
 8010b0a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010b0c:	7b7b      	ldrb	r3, [r7, #13]
 8010b0e:	2bff      	cmp	r3, #255	@ 0xff
 8010b10:	d01f      	beq.n	8010b52 <USBD_StdEPReq+0x1c6>
 8010b12:	7b7b      	ldrb	r3, [r7, #13]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d11c      	bne.n	8010b52 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8010b18:	7b7a      	ldrb	r2, [r7, #13]
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8010b20:	7b7a      	ldrb	r2, [r7, #13]
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	32ae      	adds	r2, #174	@ 0xae
 8010b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b2a:	689b      	ldr	r3, [r3, #8]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d010      	beq.n	8010b52 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010b30:	7b7a      	ldrb	r2, [r7, #13]
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	32ae      	adds	r2, #174	@ 0xae
 8010b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b3a:	689b      	ldr	r3, [r3, #8]
 8010b3c:	6839      	ldr	r1, [r7, #0]
 8010b3e:	6878      	ldr	r0, [r7, #4]
 8010b40:	4798      	blx	r3
 8010b42:	4603      	mov	r3, r0
 8010b44:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8010b46:	e004      	b.n	8010b52 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8010b48:	6839      	ldr	r1, [r7, #0]
 8010b4a:	6878      	ldr	r0, [r7, #4]
 8010b4c:	f000 fc2d 	bl	80113aa <USBD_CtlError>
              break;
 8010b50:	e000      	b.n	8010b54 <USBD_StdEPReq+0x1c8>
              break;
 8010b52:	bf00      	nop
          }
          break;
 8010b54:	e0ab      	b.n	8010cae <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010b5c:	b2db      	uxtb	r3, r3
 8010b5e:	2b02      	cmp	r3, #2
 8010b60:	d002      	beq.n	8010b68 <USBD_StdEPReq+0x1dc>
 8010b62:	2b03      	cmp	r3, #3
 8010b64:	d032      	beq.n	8010bcc <USBD_StdEPReq+0x240>
 8010b66:	e097      	b.n	8010c98 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010b68:	7bbb      	ldrb	r3, [r7, #14]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d007      	beq.n	8010b7e <USBD_StdEPReq+0x1f2>
 8010b6e:	7bbb      	ldrb	r3, [r7, #14]
 8010b70:	2b80      	cmp	r3, #128	@ 0x80
 8010b72:	d004      	beq.n	8010b7e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8010b74:	6839      	ldr	r1, [r7, #0]
 8010b76:	6878      	ldr	r0, [r7, #4]
 8010b78:	f000 fc17 	bl	80113aa <USBD_CtlError>
                break;
 8010b7c:	e091      	b.n	8010ca2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010b7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	da0b      	bge.n	8010b9e <USBD_StdEPReq+0x212>
 8010b86:	7bbb      	ldrb	r3, [r7, #14]
 8010b88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010b8c:	4613      	mov	r3, r2
 8010b8e:	009b      	lsls	r3, r3, #2
 8010b90:	4413      	add	r3, r2
 8010b92:	009b      	lsls	r3, r3, #2
 8010b94:	3310      	adds	r3, #16
 8010b96:	687a      	ldr	r2, [r7, #4]
 8010b98:	4413      	add	r3, r2
 8010b9a:	3304      	adds	r3, #4
 8010b9c:	e00b      	b.n	8010bb6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010b9e:	7bbb      	ldrb	r3, [r7, #14]
 8010ba0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010ba4:	4613      	mov	r3, r2
 8010ba6:	009b      	lsls	r3, r3, #2
 8010ba8:	4413      	add	r3, r2
 8010baa:	009b      	lsls	r3, r3, #2
 8010bac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010bb0:	687a      	ldr	r2, [r7, #4]
 8010bb2:	4413      	add	r3, r2
 8010bb4:	3304      	adds	r3, #4
 8010bb6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010bb8:	68bb      	ldr	r3, [r7, #8]
 8010bba:	2200      	movs	r2, #0
 8010bbc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010bbe:	68bb      	ldr	r3, [r7, #8]
 8010bc0:	2202      	movs	r2, #2
 8010bc2:	4619      	mov	r1, r3
 8010bc4:	6878      	ldr	r0, [r7, #4]
 8010bc6:	f000 fc6d 	bl	80114a4 <USBD_CtlSendData>
              break;
 8010bca:	e06a      	b.n	8010ca2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010bcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	da11      	bge.n	8010bf8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010bd4:	7bbb      	ldrb	r3, [r7, #14]
 8010bd6:	f003 020f 	and.w	r2, r3, #15
 8010bda:	6879      	ldr	r1, [r7, #4]
 8010bdc:	4613      	mov	r3, r2
 8010bde:	009b      	lsls	r3, r3, #2
 8010be0:	4413      	add	r3, r2
 8010be2:	009b      	lsls	r3, r3, #2
 8010be4:	440b      	add	r3, r1
 8010be6:	3324      	adds	r3, #36	@ 0x24
 8010be8:	881b      	ldrh	r3, [r3, #0]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d117      	bne.n	8010c1e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010bee:	6839      	ldr	r1, [r7, #0]
 8010bf0:	6878      	ldr	r0, [r7, #4]
 8010bf2:	f000 fbda 	bl	80113aa <USBD_CtlError>
                  break;
 8010bf6:	e054      	b.n	8010ca2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010bf8:	7bbb      	ldrb	r3, [r7, #14]
 8010bfa:	f003 020f 	and.w	r2, r3, #15
 8010bfe:	6879      	ldr	r1, [r7, #4]
 8010c00:	4613      	mov	r3, r2
 8010c02:	009b      	lsls	r3, r3, #2
 8010c04:	4413      	add	r3, r2
 8010c06:	009b      	lsls	r3, r3, #2
 8010c08:	440b      	add	r3, r1
 8010c0a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010c0e:	881b      	ldrh	r3, [r3, #0]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d104      	bne.n	8010c1e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010c14:	6839      	ldr	r1, [r7, #0]
 8010c16:	6878      	ldr	r0, [r7, #4]
 8010c18:	f000 fbc7 	bl	80113aa <USBD_CtlError>
                  break;
 8010c1c:	e041      	b.n	8010ca2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010c1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	da0b      	bge.n	8010c3e <USBD_StdEPReq+0x2b2>
 8010c26:	7bbb      	ldrb	r3, [r7, #14]
 8010c28:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010c2c:	4613      	mov	r3, r2
 8010c2e:	009b      	lsls	r3, r3, #2
 8010c30:	4413      	add	r3, r2
 8010c32:	009b      	lsls	r3, r3, #2
 8010c34:	3310      	adds	r3, #16
 8010c36:	687a      	ldr	r2, [r7, #4]
 8010c38:	4413      	add	r3, r2
 8010c3a:	3304      	adds	r3, #4
 8010c3c:	e00b      	b.n	8010c56 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010c3e:	7bbb      	ldrb	r3, [r7, #14]
 8010c40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010c44:	4613      	mov	r3, r2
 8010c46:	009b      	lsls	r3, r3, #2
 8010c48:	4413      	add	r3, r2
 8010c4a:	009b      	lsls	r3, r3, #2
 8010c4c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010c50:	687a      	ldr	r2, [r7, #4]
 8010c52:	4413      	add	r3, r2
 8010c54:	3304      	adds	r3, #4
 8010c56:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010c58:	7bbb      	ldrb	r3, [r7, #14]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d002      	beq.n	8010c64 <USBD_StdEPReq+0x2d8>
 8010c5e:	7bbb      	ldrb	r3, [r7, #14]
 8010c60:	2b80      	cmp	r3, #128	@ 0x80
 8010c62:	d103      	bne.n	8010c6c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8010c64:	68bb      	ldr	r3, [r7, #8]
 8010c66:	2200      	movs	r2, #0
 8010c68:	601a      	str	r2, [r3, #0]
 8010c6a:	e00e      	b.n	8010c8a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010c6c:	7bbb      	ldrb	r3, [r7, #14]
 8010c6e:	4619      	mov	r1, r3
 8010c70:	6878      	ldr	r0, [r7, #4]
 8010c72:	f001 f8b9 	bl	8011de8 <USBD_LL_IsStallEP>
 8010c76:	4603      	mov	r3, r0
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d003      	beq.n	8010c84 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8010c7c:	68bb      	ldr	r3, [r7, #8]
 8010c7e:	2201      	movs	r2, #1
 8010c80:	601a      	str	r2, [r3, #0]
 8010c82:	e002      	b.n	8010c8a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8010c84:	68bb      	ldr	r3, [r7, #8]
 8010c86:	2200      	movs	r2, #0
 8010c88:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010c8a:	68bb      	ldr	r3, [r7, #8]
 8010c8c:	2202      	movs	r2, #2
 8010c8e:	4619      	mov	r1, r3
 8010c90:	6878      	ldr	r0, [r7, #4]
 8010c92:	f000 fc07 	bl	80114a4 <USBD_CtlSendData>
              break;
 8010c96:	e004      	b.n	8010ca2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8010c98:	6839      	ldr	r1, [r7, #0]
 8010c9a:	6878      	ldr	r0, [r7, #4]
 8010c9c:	f000 fb85 	bl	80113aa <USBD_CtlError>
              break;
 8010ca0:	bf00      	nop
          }
          break;
 8010ca2:	e004      	b.n	8010cae <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8010ca4:	6839      	ldr	r1, [r7, #0]
 8010ca6:	6878      	ldr	r0, [r7, #4]
 8010ca8:	f000 fb7f 	bl	80113aa <USBD_CtlError>
          break;
 8010cac:	bf00      	nop
      }
      break;
 8010cae:	e005      	b.n	8010cbc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8010cb0:	6839      	ldr	r1, [r7, #0]
 8010cb2:	6878      	ldr	r0, [r7, #4]
 8010cb4:	f000 fb79 	bl	80113aa <USBD_CtlError>
      break;
 8010cb8:	e000      	b.n	8010cbc <USBD_StdEPReq+0x330>
      break;
 8010cba:	bf00      	nop
  }

  return ret;
 8010cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	3710      	adds	r7, #16
 8010cc2:	46bd      	mov	sp, r7
 8010cc4:	bd80      	pop	{r7, pc}
	...

08010cc8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b084      	sub	sp, #16
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
 8010cd0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010cda:	2300      	movs	r3, #0
 8010cdc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010cde:	683b      	ldr	r3, [r7, #0]
 8010ce0:	885b      	ldrh	r3, [r3, #2]
 8010ce2:	0a1b      	lsrs	r3, r3, #8
 8010ce4:	b29b      	uxth	r3, r3
 8010ce6:	3b01      	subs	r3, #1
 8010ce8:	2b0e      	cmp	r3, #14
 8010cea:	f200 8152 	bhi.w	8010f92 <USBD_GetDescriptor+0x2ca>
 8010cee:	a201      	add	r2, pc, #4	@ (adr r2, 8010cf4 <USBD_GetDescriptor+0x2c>)
 8010cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cf4:	08010d65 	.word	0x08010d65
 8010cf8:	08010d7d 	.word	0x08010d7d
 8010cfc:	08010dbd 	.word	0x08010dbd
 8010d00:	08010f93 	.word	0x08010f93
 8010d04:	08010f93 	.word	0x08010f93
 8010d08:	08010f33 	.word	0x08010f33
 8010d0c:	08010f5f 	.word	0x08010f5f
 8010d10:	08010f93 	.word	0x08010f93
 8010d14:	08010f93 	.word	0x08010f93
 8010d18:	08010f93 	.word	0x08010f93
 8010d1c:	08010f93 	.word	0x08010f93
 8010d20:	08010f93 	.word	0x08010f93
 8010d24:	08010f93 	.word	0x08010f93
 8010d28:	08010f93 	.word	0x08010f93
 8010d2c:	08010d31 	.word	0x08010d31
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010d36:	69db      	ldr	r3, [r3, #28]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d00b      	beq.n	8010d54 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010d42:	69db      	ldr	r3, [r3, #28]
 8010d44:	687a      	ldr	r2, [r7, #4]
 8010d46:	7c12      	ldrb	r2, [r2, #16]
 8010d48:	f107 0108 	add.w	r1, r7, #8
 8010d4c:	4610      	mov	r0, r2
 8010d4e:	4798      	blx	r3
 8010d50:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010d52:	e126      	b.n	8010fa2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010d54:	6839      	ldr	r1, [r7, #0]
 8010d56:	6878      	ldr	r0, [r7, #4]
 8010d58:	f000 fb27 	bl	80113aa <USBD_CtlError>
        err++;
 8010d5c:	7afb      	ldrb	r3, [r7, #11]
 8010d5e:	3301      	adds	r3, #1
 8010d60:	72fb      	strb	r3, [r7, #11]
      break;
 8010d62:	e11e      	b.n	8010fa2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	687a      	ldr	r2, [r7, #4]
 8010d6e:	7c12      	ldrb	r2, [r2, #16]
 8010d70:	f107 0108 	add.w	r1, r7, #8
 8010d74:	4610      	mov	r0, r2
 8010d76:	4798      	blx	r3
 8010d78:	60f8      	str	r0, [r7, #12]
      break;
 8010d7a:	e112      	b.n	8010fa2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	7c1b      	ldrb	r3, [r3, #16]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d10d      	bne.n	8010da0 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d8c:	f107 0208 	add.w	r2, r7, #8
 8010d90:	4610      	mov	r0, r2
 8010d92:	4798      	blx	r3
 8010d94:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	3301      	adds	r3, #1
 8010d9a:	2202      	movs	r2, #2
 8010d9c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8010d9e:	e100      	b.n	8010fa2 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010da8:	f107 0208 	add.w	r2, r7, #8
 8010dac:	4610      	mov	r0, r2
 8010dae:	4798      	blx	r3
 8010db0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	3301      	adds	r3, #1
 8010db6:	2202      	movs	r2, #2
 8010db8:	701a      	strb	r2, [r3, #0]
      break;
 8010dba:	e0f2      	b.n	8010fa2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010dbc:	683b      	ldr	r3, [r7, #0]
 8010dbe:	885b      	ldrh	r3, [r3, #2]
 8010dc0:	b2db      	uxtb	r3, r3
 8010dc2:	2b05      	cmp	r3, #5
 8010dc4:	f200 80ac 	bhi.w	8010f20 <USBD_GetDescriptor+0x258>
 8010dc8:	a201      	add	r2, pc, #4	@ (adr r2, 8010dd0 <USBD_GetDescriptor+0x108>)
 8010dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dce:	bf00      	nop
 8010dd0:	08010de9 	.word	0x08010de9
 8010dd4:	08010e1d 	.word	0x08010e1d
 8010dd8:	08010e51 	.word	0x08010e51
 8010ddc:	08010e85 	.word	0x08010e85
 8010de0:	08010eb9 	.word	0x08010eb9
 8010de4:	08010eed 	.word	0x08010eed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010dee:	685b      	ldr	r3, [r3, #4]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d00b      	beq.n	8010e0c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010dfa:	685b      	ldr	r3, [r3, #4]
 8010dfc:	687a      	ldr	r2, [r7, #4]
 8010dfe:	7c12      	ldrb	r2, [r2, #16]
 8010e00:	f107 0108 	add.w	r1, r7, #8
 8010e04:	4610      	mov	r0, r2
 8010e06:	4798      	blx	r3
 8010e08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010e0a:	e091      	b.n	8010f30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010e0c:	6839      	ldr	r1, [r7, #0]
 8010e0e:	6878      	ldr	r0, [r7, #4]
 8010e10:	f000 facb 	bl	80113aa <USBD_CtlError>
            err++;
 8010e14:	7afb      	ldrb	r3, [r7, #11]
 8010e16:	3301      	adds	r3, #1
 8010e18:	72fb      	strb	r3, [r7, #11]
          break;
 8010e1a:	e089      	b.n	8010f30 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010e22:	689b      	ldr	r3, [r3, #8]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d00b      	beq.n	8010e40 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010e2e:	689b      	ldr	r3, [r3, #8]
 8010e30:	687a      	ldr	r2, [r7, #4]
 8010e32:	7c12      	ldrb	r2, [r2, #16]
 8010e34:	f107 0108 	add.w	r1, r7, #8
 8010e38:	4610      	mov	r0, r2
 8010e3a:	4798      	blx	r3
 8010e3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010e3e:	e077      	b.n	8010f30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010e40:	6839      	ldr	r1, [r7, #0]
 8010e42:	6878      	ldr	r0, [r7, #4]
 8010e44:	f000 fab1 	bl	80113aa <USBD_CtlError>
            err++;
 8010e48:	7afb      	ldrb	r3, [r7, #11]
 8010e4a:	3301      	adds	r3, #1
 8010e4c:	72fb      	strb	r3, [r7, #11]
          break;
 8010e4e:	e06f      	b.n	8010f30 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010e56:	68db      	ldr	r3, [r3, #12]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d00b      	beq.n	8010e74 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010e62:	68db      	ldr	r3, [r3, #12]
 8010e64:	687a      	ldr	r2, [r7, #4]
 8010e66:	7c12      	ldrb	r2, [r2, #16]
 8010e68:	f107 0108 	add.w	r1, r7, #8
 8010e6c:	4610      	mov	r0, r2
 8010e6e:	4798      	blx	r3
 8010e70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010e72:	e05d      	b.n	8010f30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010e74:	6839      	ldr	r1, [r7, #0]
 8010e76:	6878      	ldr	r0, [r7, #4]
 8010e78:	f000 fa97 	bl	80113aa <USBD_CtlError>
            err++;
 8010e7c:	7afb      	ldrb	r3, [r7, #11]
 8010e7e:	3301      	adds	r3, #1
 8010e80:	72fb      	strb	r3, [r7, #11]
          break;
 8010e82:	e055      	b.n	8010f30 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010e8a:	691b      	ldr	r3, [r3, #16]
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d00b      	beq.n	8010ea8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010e96:	691b      	ldr	r3, [r3, #16]
 8010e98:	687a      	ldr	r2, [r7, #4]
 8010e9a:	7c12      	ldrb	r2, [r2, #16]
 8010e9c:	f107 0108 	add.w	r1, r7, #8
 8010ea0:	4610      	mov	r0, r2
 8010ea2:	4798      	blx	r3
 8010ea4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010ea6:	e043      	b.n	8010f30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010ea8:	6839      	ldr	r1, [r7, #0]
 8010eaa:	6878      	ldr	r0, [r7, #4]
 8010eac:	f000 fa7d 	bl	80113aa <USBD_CtlError>
            err++;
 8010eb0:	7afb      	ldrb	r3, [r7, #11]
 8010eb2:	3301      	adds	r3, #1
 8010eb4:	72fb      	strb	r3, [r7, #11]
          break;
 8010eb6:	e03b      	b.n	8010f30 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010ebe:	695b      	ldr	r3, [r3, #20]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d00b      	beq.n	8010edc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010eca:	695b      	ldr	r3, [r3, #20]
 8010ecc:	687a      	ldr	r2, [r7, #4]
 8010ece:	7c12      	ldrb	r2, [r2, #16]
 8010ed0:	f107 0108 	add.w	r1, r7, #8
 8010ed4:	4610      	mov	r0, r2
 8010ed6:	4798      	blx	r3
 8010ed8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010eda:	e029      	b.n	8010f30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010edc:	6839      	ldr	r1, [r7, #0]
 8010ede:	6878      	ldr	r0, [r7, #4]
 8010ee0:	f000 fa63 	bl	80113aa <USBD_CtlError>
            err++;
 8010ee4:	7afb      	ldrb	r3, [r7, #11]
 8010ee6:	3301      	adds	r3, #1
 8010ee8:	72fb      	strb	r3, [r7, #11]
          break;
 8010eea:	e021      	b.n	8010f30 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010ef2:	699b      	ldr	r3, [r3, #24]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d00b      	beq.n	8010f10 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010efe:	699b      	ldr	r3, [r3, #24]
 8010f00:	687a      	ldr	r2, [r7, #4]
 8010f02:	7c12      	ldrb	r2, [r2, #16]
 8010f04:	f107 0108 	add.w	r1, r7, #8
 8010f08:	4610      	mov	r0, r2
 8010f0a:	4798      	blx	r3
 8010f0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010f0e:	e00f      	b.n	8010f30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010f10:	6839      	ldr	r1, [r7, #0]
 8010f12:	6878      	ldr	r0, [r7, #4]
 8010f14:	f000 fa49 	bl	80113aa <USBD_CtlError>
            err++;
 8010f18:	7afb      	ldrb	r3, [r7, #11]
 8010f1a:	3301      	adds	r3, #1
 8010f1c:	72fb      	strb	r3, [r7, #11]
          break;
 8010f1e:	e007      	b.n	8010f30 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010f20:	6839      	ldr	r1, [r7, #0]
 8010f22:	6878      	ldr	r0, [r7, #4]
 8010f24:	f000 fa41 	bl	80113aa <USBD_CtlError>
          err++;
 8010f28:	7afb      	ldrb	r3, [r7, #11]
 8010f2a:	3301      	adds	r3, #1
 8010f2c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8010f2e:	bf00      	nop
      }
      break;
 8010f30:	e037      	b.n	8010fa2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	7c1b      	ldrb	r3, [r3, #16]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d109      	bne.n	8010f4e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010f40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f42:	f107 0208 	add.w	r2, r7, #8
 8010f46:	4610      	mov	r0, r2
 8010f48:	4798      	blx	r3
 8010f4a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010f4c:	e029      	b.n	8010fa2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010f4e:	6839      	ldr	r1, [r7, #0]
 8010f50:	6878      	ldr	r0, [r7, #4]
 8010f52:	f000 fa2a 	bl	80113aa <USBD_CtlError>
        err++;
 8010f56:	7afb      	ldrb	r3, [r7, #11]
 8010f58:	3301      	adds	r3, #1
 8010f5a:	72fb      	strb	r3, [r7, #11]
      break;
 8010f5c:	e021      	b.n	8010fa2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	7c1b      	ldrb	r3, [r3, #16]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d10d      	bne.n	8010f82 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f6e:	f107 0208 	add.w	r2, r7, #8
 8010f72:	4610      	mov	r0, r2
 8010f74:	4798      	blx	r3
 8010f76:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	3301      	adds	r3, #1
 8010f7c:	2207      	movs	r2, #7
 8010f7e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010f80:	e00f      	b.n	8010fa2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010f82:	6839      	ldr	r1, [r7, #0]
 8010f84:	6878      	ldr	r0, [r7, #4]
 8010f86:	f000 fa10 	bl	80113aa <USBD_CtlError>
        err++;
 8010f8a:	7afb      	ldrb	r3, [r7, #11]
 8010f8c:	3301      	adds	r3, #1
 8010f8e:	72fb      	strb	r3, [r7, #11]
      break;
 8010f90:	e007      	b.n	8010fa2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8010f92:	6839      	ldr	r1, [r7, #0]
 8010f94:	6878      	ldr	r0, [r7, #4]
 8010f96:	f000 fa08 	bl	80113aa <USBD_CtlError>
      err++;
 8010f9a:	7afb      	ldrb	r3, [r7, #11]
 8010f9c:	3301      	adds	r3, #1
 8010f9e:	72fb      	strb	r3, [r7, #11]
      break;
 8010fa0:	bf00      	nop
  }

  if (err != 0U)
 8010fa2:	7afb      	ldrb	r3, [r7, #11]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d11e      	bne.n	8010fe6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8010fa8:	683b      	ldr	r3, [r7, #0]
 8010faa:	88db      	ldrh	r3, [r3, #6]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d016      	beq.n	8010fde <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8010fb0:	893b      	ldrh	r3, [r7, #8]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d00e      	beq.n	8010fd4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8010fb6:	683b      	ldr	r3, [r7, #0]
 8010fb8:	88da      	ldrh	r2, [r3, #6]
 8010fba:	893b      	ldrh	r3, [r7, #8]
 8010fbc:	4293      	cmp	r3, r2
 8010fbe:	bf28      	it	cs
 8010fc0:	4613      	movcs	r3, r2
 8010fc2:	b29b      	uxth	r3, r3
 8010fc4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010fc6:	893b      	ldrh	r3, [r7, #8]
 8010fc8:	461a      	mov	r2, r3
 8010fca:	68f9      	ldr	r1, [r7, #12]
 8010fcc:	6878      	ldr	r0, [r7, #4]
 8010fce:	f000 fa69 	bl	80114a4 <USBD_CtlSendData>
 8010fd2:	e009      	b.n	8010fe8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010fd4:	6839      	ldr	r1, [r7, #0]
 8010fd6:	6878      	ldr	r0, [r7, #4]
 8010fd8:	f000 f9e7 	bl	80113aa <USBD_CtlError>
 8010fdc:	e004      	b.n	8010fe8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010fde:	6878      	ldr	r0, [r7, #4]
 8010fe0:	f000 faba 	bl	8011558 <USBD_CtlSendStatus>
 8010fe4:	e000      	b.n	8010fe8 <USBD_GetDescriptor+0x320>
    return;
 8010fe6:	bf00      	nop
  }
}
 8010fe8:	3710      	adds	r7, #16
 8010fea:	46bd      	mov	sp, r7
 8010fec:	bd80      	pop	{r7, pc}
 8010fee:	bf00      	nop

08010ff0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	b084      	sub	sp, #16
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	6078      	str	r0, [r7, #4]
 8010ff8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010ffa:	683b      	ldr	r3, [r7, #0]
 8010ffc:	889b      	ldrh	r3, [r3, #4]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d131      	bne.n	8011066 <USBD_SetAddress+0x76>
 8011002:	683b      	ldr	r3, [r7, #0]
 8011004:	88db      	ldrh	r3, [r3, #6]
 8011006:	2b00      	cmp	r3, #0
 8011008:	d12d      	bne.n	8011066 <USBD_SetAddress+0x76>
 801100a:	683b      	ldr	r3, [r7, #0]
 801100c:	885b      	ldrh	r3, [r3, #2]
 801100e:	2b7f      	cmp	r3, #127	@ 0x7f
 8011010:	d829      	bhi.n	8011066 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011012:	683b      	ldr	r3, [r7, #0]
 8011014:	885b      	ldrh	r3, [r3, #2]
 8011016:	b2db      	uxtb	r3, r3
 8011018:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801101c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011024:	b2db      	uxtb	r3, r3
 8011026:	2b03      	cmp	r3, #3
 8011028:	d104      	bne.n	8011034 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801102a:	6839      	ldr	r1, [r7, #0]
 801102c:	6878      	ldr	r0, [r7, #4]
 801102e:	f000 f9bc 	bl	80113aa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011032:	e01d      	b.n	8011070 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	7bfa      	ldrb	r2, [r7, #15]
 8011038:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801103c:	7bfb      	ldrb	r3, [r7, #15]
 801103e:	4619      	mov	r1, r3
 8011040:	6878      	ldr	r0, [r7, #4]
 8011042:	f000 fefd 	bl	8011e40 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011046:	6878      	ldr	r0, [r7, #4]
 8011048:	f000 fa86 	bl	8011558 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801104c:	7bfb      	ldrb	r3, [r7, #15]
 801104e:	2b00      	cmp	r3, #0
 8011050:	d004      	beq.n	801105c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	2202      	movs	r2, #2
 8011056:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801105a:	e009      	b.n	8011070 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	2201      	movs	r2, #1
 8011060:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011064:	e004      	b.n	8011070 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011066:	6839      	ldr	r1, [r7, #0]
 8011068:	6878      	ldr	r0, [r7, #4]
 801106a:	f000 f99e 	bl	80113aa <USBD_CtlError>
  }
}
 801106e:	bf00      	nop
 8011070:	bf00      	nop
 8011072:	3710      	adds	r7, #16
 8011074:	46bd      	mov	sp, r7
 8011076:	bd80      	pop	{r7, pc}

08011078 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011078:	b580      	push	{r7, lr}
 801107a:	b084      	sub	sp, #16
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
 8011080:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011082:	2300      	movs	r3, #0
 8011084:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011086:	683b      	ldr	r3, [r7, #0]
 8011088:	885b      	ldrh	r3, [r3, #2]
 801108a:	b2da      	uxtb	r2, r3
 801108c:	4b4e      	ldr	r3, [pc, #312]	@ (80111c8 <USBD_SetConfig+0x150>)
 801108e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011090:	4b4d      	ldr	r3, [pc, #308]	@ (80111c8 <USBD_SetConfig+0x150>)
 8011092:	781b      	ldrb	r3, [r3, #0]
 8011094:	2b01      	cmp	r3, #1
 8011096:	d905      	bls.n	80110a4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011098:	6839      	ldr	r1, [r7, #0]
 801109a:	6878      	ldr	r0, [r7, #4]
 801109c:	f000 f985 	bl	80113aa <USBD_CtlError>
    return USBD_FAIL;
 80110a0:	2303      	movs	r3, #3
 80110a2:	e08c      	b.n	80111be <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80110aa:	b2db      	uxtb	r3, r3
 80110ac:	2b02      	cmp	r3, #2
 80110ae:	d002      	beq.n	80110b6 <USBD_SetConfig+0x3e>
 80110b0:	2b03      	cmp	r3, #3
 80110b2:	d029      	beq.n	8011108 <USBD_SetConfig+0x90>
 80110b4:	e075      	b.n	80111a2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80110b6:	4b44      	ldr	r3, [pc, #272]	@ (80111c8 <USBD_SetConfig+0x150>)
 80110b8:	781b      	ldrb	r3, [r3, #0]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d020      	beq.n	8011100 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80110be:	4b42      	ldr	r3, [pc, #264]	@ (80111c8 <USBD_SetConfig+0x150>)
 80110c0:	781b      	ldrb	r3, [r3, #0]
 80110c2:	461a      	mov	r2, r3
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80110c8:	4b3f      	ldr	r3, [pc, #252]	@ (80111c8 <USBD_SetConfig+0x150>)
 80110ca:	781b      	ldrb	r3, [r3, #0]
 80110cc:	4619      	mov	r1, r3
 80110ce:	6878      	ldr	r0, [r7, #4]
 80110d0:	f7ff f84b 	bl	801016a <USBD_SetClassConfig>
 80110d4:	4603      	mov	r3, r0
 80110d6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80110d8:	7bfb      	ldrb	r3, [r7, #15]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d008      	beq.n	80110f0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80110de:	6839      	ldr	r1, [r7, #0]
 80110e0:	6878      	ldr	r0, [r7, #4]
 80110e2:	f000 f962 	bl	80113aa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	2202      	movs	r2, #2
 80110ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80110ee:	e065      	b.n	80111bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80110f0:	6878      	ldr	r0, [r7, #4]
 80110f2:	f000 fa31 	bl	8011558 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	2203      	movs	r2, #3
 80110fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80110fe:	e05d      	b.n	80111bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011100:	6878      	ldr	r0, [r7, #4]
 8011102:	f000 fa29 	bl	8011558 <USBD_CtlSendStatus>
      break;
 8011106:	e059      	b.n	80111bc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011108:	4b2f      	ldr	r3, [pc, #188]	@ (80111c8 <USBD_SetConfig+0x150>)
 801110a:	781b      	ldrb	r3, [r3, #0]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d112      	bne.n	8011136 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	2202      	movs	r2, #2
 8011114:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8011118:	4b2b      	ldr	r3, [pc, #172]	@ (80111c8 <USBD_SetConfig+0x150>)
 801111a:	781b      	ldrb	r3, [r3, #0]
 801111c:	461a      	mov	r2, r3
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011122:	4b29      	ldr	r3, [pc, #164]	@ (80111c8 <USBD_SetConfig+0x150>)
 8011124:	781b      	ldrb	r3, [r3, #0]
 8011126:	4619      	mov	r1, r3
 8011128:	6878      	ldr	r0, [r7, #4]
 801112a:	f7ff f83a 	bl	80101a2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801112e:	6878      	ldr	r0, [r7, #4]
 8011130:	f000 fa12 	bl	8011558 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011134:	e042      	b.n	80111bc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8011136:	4b24      	ldr	r3, [pc, #144]	@ (80111c8 <USBD_SetConfig+0x150>)
 8011138:	781b      	ldrb	r3, [r3, #0]
 801113a:	461a      	mov	r2, r3
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	685b      	ldr	r3, [r3, #4]
 8011140:	429a      	cmp	r2, r3
 8011142:	d02a      	beq.n	801119a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	685b      	ldr	r3, [r3, #4]
 8011148:	b2db      	uxtb	r3, r3
 801114a:	4619      	mov	r1, r3
 801114c:	6878      	ldr	r0, [r7, #4]
 801114e:	f7ff f828 	bl	80101a2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011152:	4b1d      	ldr	r3, [pc, #116]	@ (80111c8 <USBD_SetConfig+0x150>)
 8011154:	781b      	ldrb	r3, [r3, #0]
 8011156:	461a      	mov	r2, r3
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801115c:	4b1a      	ldr	r3, [pc, #104]	@ (80111c8 <USBD_SetConfig+0x150>)
 801115e:	781b      	ldrb	r3, [r3, #0]
 8011160:	4619      	mov	r1, r3
 8011162:	6878      	ldr	r0, [r7, #4]
 8011164:	f7ff f801 	bl	801016a <USBD_SetClassConfig>
 8011168:	4603      	mov	r3, r0
 801116a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801116c:	7bfb      	ldrb	r3, [r7, #15]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d00f      	beq.n	8011192 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8011172:	6839      	ldr	r1, [r7, #0]
 8011174:	6878      	ldr	r0, [r7, #4]
 8011176:	f000 f918 	bl	80113aa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	685b      	ldr	r3, [r3, #4]
 801117e:	b2db      	uxtb	r3, r3
 8011180:	4619      	mov	r1, r3
 8011182:	6878      	ldr	r0, [r7, #4]
 8011184:	f7ff f80d 	bl	80101a2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	2202      	movs	r2, #2
 801118c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011190:	e014      	b.n	80111bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011192:	6878      	ldr	r0, [r7, #4]
 8011194:	f000 f9e0 	bl	8011558 <USBD_CtlSendStatus>
      break;
 8011198:	e010      	b.n	80111bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801119a:	6878      	ldr	r0, [r7, #4]
 801119c:	f000 f9dc 	bl	8011558 <USBD_CtlSendStatus>
      break;
 80111a0:	e00c      	b.n	80111bc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80111a2:	6839      	ldr	r1, [r7, #0]
 80111a4:	6878      	ldr	r0, [r7, #4]
 80111a6:	f000 f900 	bl	80113aa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80111aa:	4b07      	ldr	r3, [pc, #28]	@ (80111c8 <USBD_SetConfig+0x150>)
 80111ac:	781b      	ldrb	r3, [r3, #0]
 80111ae:	4619      	mov	r1, r3
 80111b0:	6878      	ldr	r0, [r7, #4]
 80111b2:	f7fe fff6 	bl	80101a2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80111b6:	2303      	movs	r3, #3
 80111b8:	73fb      	strb	r3, [r7, #15]
      break;
 80111ba:	bf00      	nop
  }

  return ret;
 80111bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80111be:	4618      	mov	r0, r3
 80111c0:	3710      	adds	r7, #16
 80111c2:	46bd      	mov	sp, r7
 80111c4:	bd80      	pop	{r7, pc}
 80111c6:	bf00      	nop
 80111c8:	200009a4 	.word	0x200009a4

080111cc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80111cc:	b580      	push	{r7, lr}
 80111ce:	b082      	sub	sp, #8
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	6078      	str	r0, [r7, #4]
 80111d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80111d6:	683b      	ldr	r3, [r7, #0]
 80111d8:	88db      	ldrh	r3, [r3, #6]
 80111da:	2b01      	cmp	r3, #1
 80111dc:	d004      	beq.n	80111e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80111de:	6839      	ldr	r1, [r7, #0]
 80111e0:	6878      	ldr	r0, [r7, #4]
 80111e2:	f000 f8e2 	bl	80113aa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80111e6:	e023      	b.n	8011230 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80111ee:	b2db      	uxtb	r3, r3
 80111f0:	2b02      	cmp	r3, #2
 80111f2:	dc02      	bgt.n	80111fa <USBD_GetConfig+0x2e>
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	dc03      	bgt.n	8011200 <USBD_GetConfig+0x34>
 80111f8:	e015      	b.n	8011226 <USBD_GetConfig+0x5a>
 80111fa:	2b03      	cmp	r3, #3
 80111fc:	d00b      	beq.n	8011216 <USBD_GetConfig+0x4a>
 80111fe:	e012      	b.n	8011226 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	2200      	movs	r2, #0
 8011204:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	3308      	adds	r3, #8
 801120a:	2201      	movs	r2, #1
 801120c:	4619      	mov	r1, r3
 801120e:	6878      	ldr	r0, [r7, #4]
 8011210:	f000 f948 	bl	80114a4 <USBD_CtlSendData>
        break;
 8011214:	e00c      	b.n	8011230 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	3304      	adds	r3, #4
 801121a:	2201      	movs	r2, #1
 801121c:	4619      	mov	r1, r3
 801121e:	6878      	ldr	r0, [r7, #4]
 8011220:	f000 f940 	bl	80114a4 <USBD_CtlSendData>
        break;
 8011224:	e004      	b.n	8011230 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8011226:	6839      	ldr	r1, [r7, #0]
 8011228:	6878      	ldr	r0, [r7, #4]
 801122a:	f000 f8be 	bl	80113aa <USBD_CtlError>
        break;
 801122e:	bf00      	nop
}
 8011230:	bf00      	nop
 8011232:	3708      	adds	r7, #8
 8011234:	46bd      	mov	sp, r7
 8011236:	bd80      	pop	{r7, pc}

08011238 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011238:	b580      	push	{r7, lr}
 801123a:	b082      	sub	sp, #8
 801123c:	af00      	add	r7, sp, #0
 801123e:	6078      	str	r0, [r7, #4]
 8011240:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011248:	b2db      	uxtb	r3, r3
 801124a:	3b01      	subs	r3, #1
 801124c:	2b02      	cmp	r3, #2
 801124e:	d81e      	bhi.n	801128e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011250:	683b      	ldr	r3, [r7, #0]
 8011252:	88db      	ldrh	r3, [r3, #6]
 8011254:	2b02      	cmp	r3, #2
 8011256:	d004      	beq.n	8011262 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011258:	6839      	ldr	r1, [r7, #0]
 801125a:	6878      	ldr	r0, [r7, #4]
 801125c:	f000 f8a5 	bl	80113aa <USBD_CtlError>
        break;
 8011260:	e01a      	b.n	8011298 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	2201      	movs	r2, #1
 8011266:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801126e:	2b00      	cmp	r3, #0
 8011270:	d005      	beq.n	801127e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	68db      	ldr	r3, [r3, #12]
 8011276:	f043 0202 	orr.w	r2, r3, #2
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	330c      	adds	r3, #12
 8011282:	2202      	movs	r2, #2
 8011284:	4619      	mov	r1, r3
 8011286:	6878      	ldr	r0, [r7, #4]
 8011288:	f000 f90c 	bl	80114a4 <USBD_CtlSendData>
      break;
 801128c:	e004      	b.n	8011298 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801128e:	6839      	ldr	r1, [r7, #0]
 8011290:	6878      	ldr	r0, [r7, #4]
 8011292:	f000 f88a 	bl	80113aa <USBD_CtlError>
      break;
 8011296:	bf00      	nop
  }
}
 8011298:	bf00      	nop
 801129a:	3708      	adds	r7, #8
 801129c:	46bd      	mov	sp, r7
 801129e:	bd80      	pop	{r7, pc}

080112a0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b082      	sub	sp, #8
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
 80112a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80112aa:	683b      	ldr	r3, [r7, #0]
 80112ac:	885b      	ldrh	r3, [r3, #2]
 80112ae:	2b01      	cmp	r3, #1
 80112b0:	d107      	bne.n	80112c2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	2201      	movs	r2, #1
 80112b6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80112ba:	6878      	ldr	r0, [r7, #4]
 80112bc:	f000 f94c 	bl	8011558 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80112c0:	e013      	b.n	80112ea <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80112c2:	683b      	ldr	r3, [r7, #0]
 80112c4:	885b      	ldrh	r3, [r3, #2]
 80112c6:	2b02      	cmp	r3, #2
 80112c8:	d10b      	bne.n	80112e2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80112ca:	683b      	ldr	r3, [r7, #0]
 80112cc:	889b      	ldrh	r3, [r3, #4]
 80112ce:	0a1b      	lsrs	r3, r3, #8
 80112d0:	b29b      	uxth	r3, r3
 80112d2:	b2da      	uxtb	r2, r3
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80112da:	6878      	ldr	r0, [r7, #4]
 80112dc:	f000 f93c 	bl	8011558 <USBD_CtlSendStatus>
}
 80112e0:	e003      	b.n	80112ea <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80112e2:	6839      	ldr	r1, [r7, #0]
 80112e4:	6878      	ldr	r0, [r7, #4]
 80112e6:	f000 f860 	bl	80113aa <USBD_CtlError>
}
 80112ea:	bf00      	nop
 80112ec:	3708      	adds	r7, #8
 80112ee:	46bd      	mov	sp, r7
 80112f0:	bd80      	pop	{r7, pc}

080112f2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80112f2:	b580      	push	{r7, lr}
 80112f4:	b082      	sub	sp, #8
 80112f6:	af00      	add	r7, sp, #0
 80112f8:	6078      	str	r0, [r7, #4]
 80112fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011302:	b2db      	uxtb	r3, r3
 8011304:	3b01      	subs	r3, #1
 8011306:	2b02      	cmp	r3, #2
 8011308:	d80b      	bhi.n	8011322 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801130a:	683b      	ldr	r3, [r7, #0]
 801130c:	885b      	ldrh	r3, [r3, #2]
 801130e:	2b01      	cmp	r3, #1
 8011310:	d10c      	bne.n	801132c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	2200      	movs	r2, #0
 8011316:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801131a:	6878      	ldr	r0, [r7, #4]
 801131c:	f000 f91c 	bl	8011558 <USBD_CtlSendStatus>
      }
      break;
 8011320:	e004      	b.n	801132c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8011322:	6839      	ldr	r1, [r7, #0]
 8011324:	6878      	ldr	r0, [r7, #4]
 8011326:	f000 f840 	bl	80113aa <USBD_CtlError>
      break;
 801132a:	e000      	b.n	801132e <USBD_ClrFeature+0x3c>
      break;
 801132c:	bf00      	nop
  }
}
 801132e:	bf00      	nop
 8011330:	3708      	adds	r7, #8
 8011332:	46bd      	mov	sp, r7
 8011334:	bd80      	pop	{r7, pc}

08011336 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011336:	b580      	push	{r7, lr}
 8011338:	b084      	sub	sp, #16
 801133a:	af00      	add	r7, sp, #0
 801133c:	6078      	str	r0, [r7, #4]
 801133e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011340:	683b      	ldr	r3, [r7, #0]
 8011342:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	781a      	ldrb	r2, [r3, #0]
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	3301      	adds	r3, #1
 8011350:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	781a      	ldrb	r2, [r3, #0]
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	3301      	adds	r3, #1
 801135e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011360:	68f8      	ldr	r0, [r7, #12]
 8011362:	f7ff fa16 	bl	8010792 <SWAPBYTE>
 8011366:	4603      	mov	r3, r0
 8011368:	461a      	mov	r2, r3
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	3301      	adds	r3, #1
 8011372:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	3301      	adds	r3, #1
 8011378:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801137a:	68f8      	ldr	r0, [r7, #12]
 801137c:	f7ff fa09 	bl	8010792 <SWAPBYTE>
 8011380:	4603      	mov	r3, r0
 8011382:	461a      	mov	r2, r3
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	3301      	adds	r3, #1
 801138c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	3301      	adds	r3, #1
 8011392:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011394:	68f8      	ldr	r0, [r7, #12]
 8011396:	f7ff f9fc 	bl	8010792 <SWAPBYTE>
 801139a:	4603      	mov	r3, r0
 801139c:	461a      	mov	r2, r3
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	80da      	strh	r2, [r3, #6]
}
 80113a2:	bf00      	nop
 80113a4:	3710      	adds	r7, #16
 80113a6:	46bd      	mov	sp, r7
 80113a8:	bd80      	pop	{r7, pc}

080113aa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80113aa:	b580      	push	{r7, lr}
 80113ac:	b082      	sub	sp, #8
 80113ae:	af00      	add	r7, sp, #0
 80113b0:	6078      	str	r0, [r7, #4]
 80113b2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80113b4:	2180      	movs	r1, #128	@ 0x80
 80113b6:	6878      	ldr	r0, [r7, #4]
 80113b8:	f000 fcd8 	bl	8011d6c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80113bc:	2100      	movs	r1, #0
 80113be:	6878      	ldr	r0, [r7, #4]
 80113c0:	f000 fcd4 	bl	8011d6c <USBD_LL_StallEP>
}
 80113c4:	bf00      	nop
 80113c6:	3708      	adds	r7, #8
 80113c8:	46bd      	mov	sp, r7
 80113ca:	bd80      	pop	{r7, pc}

080113cc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80113cc:	b580      	push	{r7, lr}
 80113ce:	b086      	sub	sp, #24
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	60f8      	str	r0, [r7, #12]
 80113d4:	60b9      	str	r1, [r7, #8]
 80113d6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80113d8:	2300      	movs	r3, #0
 80113da:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d042      	beq.n	8011468 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80113e6:	6938      	ldr	r0, [r7, #16]
 80113e8:	f000 f842 	bl	8011470 <USBD_GetLen>
 80113ec:	4603      	mov	r3, r0
 80113ee:	3301      	adds	r3, #1
 80113f0:	005b      	lsls	r3, r3, #1
 80113f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80113f6:	d808      	bhi.n	801140a <USBD_GetString+0x3e>
 80113f8:	6938      	ldr	r0, [r7, #16]
 80113fa:	f000 f839 	bl	8011470 <USBD_GetLen>
 80113fe:	4603      	mov	r3, r0
 8011400:	3301      	adds	r3, #1
 8011402:	b29b      	uxth	r3, r3
 8011404:	005b      	lsls	r3, r3, #1
 8011406:	b29a      	uxth	r2, r3
 8011408:	e001      	b.n	801140e <USBD_GetString+0x42>
 801140a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011412:	7dfb      	ldrb	r3, [r7, #23]
 8011414:	68ba      	ldr	r2, [r7, #8]
 8011416:	4413      	add	r3, r2
 8011418:	687a      	ldr	r2, [r7, #4]
 801141a:	7812      	ldrb	r2, [r2, #0]
 801141c:	701a      	strb	r2, [r3, #0]
  idx++;
 801141e:	7dfb      	ldrb	r3, [r7, #23]
 8011420:	3301      	adds	r3, #1
 8011422:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011424:	7dfb      	ldrb	r3, [r7, #23]
 8011426:	68ba      	ldr	r2, [r7, #8]
 8011428:	4413      	add	r3, r2
 801142a:	2203      	movs	r2, #3
 801142c:	701a      	strb	r2, [r3, #0]
  idx++;
 801142e:	7dfb      	ldrb	r3, [r7, #23]
 8011430:	3301      	adds	r3, #1
 8011432:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011434:	e013      	b.n	801145e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8011436:	7dfb      	ldrb	r3, [r7, #23]
 8011438:	68ba      	ldr	r2, [r7, #8]
 801143a:	4413      	add	r3, r2
 801143c:	693a      	ldr	r2, [r7, #16]
 801143e:	7812      	ldrb	r2, [r2, #0]
 8011440:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011442:	693b      	ldr	r3, [r7, #16]
 8011444:	3301      	adds	r3, #1
 8011446:	613b      	str	r3, [r7, #16]
    idx++;
 8011448:	7dfb      	ldrb	r3, [r7, #23]
 801144a:	3301      	adds	r3, #1
 801144c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801144e:	7dfb      	ldrb	r3, [r7, #23]
 8011450:	68ba      	ldr	r2, [r7, #8]
 8011452:	4413      	add	r3, r2
 8011454:	2200      	movs	r2, #0
 8011456:	701a      	strb	r2, [r3, #0]
    idx++;
 8011458:	7dfb      	ldrb	r3, [r7, #23]
 801145a:	3301      	adds	r3, #1
 801145c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801145e:	693b      	ldr	r3, [r7, #16]
 8011460:	781b      	ldrb	r3, [r3, #0]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d1e7      	bne.n	8011436 <USBD_GetString+0x6a>
 8011466:	e000      	b.n	801146a <USBD_GetString+0x9e>
    return;
 8011468:	bf00      	nop
  }
}
 801146a:	3718      	adds	r7, #24
 801146c:	46bd      	mov	sp, r7
 801146e:	bd80      	pop	{r7, pc}

08011470 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011470:	b480      	push	{r7}
 8011472:	b085      	sub	sp, #20
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011478:	2300      	movs	r3, #0
 801147a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011480:	e005      	b.n	801148e <USBD_GetLen+0x1e>
  {
    len++;
 8011482:	7bfb      	ldrb	r3, [r7, #15]
 8011484:	3301      	adds	r3, #1
 8011486:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011488:	68bb      	ldr	r3, [r7, #8]
 801148a:	3301      	adds	r3, #1
 801148c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801148e:	68bb      	ldr	r3, [r7, #8]
 8011490:	781b      	ldrb	r3, [r3, #0]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d1f5      	bne.n	8011482 <USBD_GetLen+0x12>
  }

  return len;
 8011496:	7bfb      	ldrb	r3, [r7, #15]
}
 8011498:	4618      	mov	r0, r3
 801149a:	3714      	adds	r7, #20
 801149c:	46bd      	mov	sp, r7
 801149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a2:	4770      	bx	lr

080114a4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80114a4:	b580      	push	{r7, lr}
 80114a6:	b084      	sub	sp, #16
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	60f8      	str	r0, [r7, #12]
 80114ac:	60b9      	str	r1, [r7, #8]
 80114ae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	2202      	movs	r2, #2
 80114b4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	687a      	ldr	r2, [r7, #4]
 80114bc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	687a      	ldr	r2, [r7, #4]
 80114c2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	68ba      	ldr	r2, [r7, #8]
 80114c8:	2100      	movs	r1, #0
 80114ca:	68f8      	ldr	r0, [r7, #12]
 80114cc:	f000 fcd7 	bl	8011e7e <USBD_LL_Transmit>

  return USBD_OK;
 80114d0:	2300      	movs	r3, #0
}
 80114d2:	4618      	mov	r0, r3
 80114d4:	3710      	adds	r7, #16
 80114d6:	46bd      	mov	sp, r7
 80114d8:	bd80      	pop	{r7, pc}

080114da <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80114da:	b580      	push	{r7, lr}
 80114dc:	b084      	sub	sp, #16
 80114de:	af00      	add	r7, sp, #0
 80114e0:	60f8      	str	r0, [r7, #12]
 80114e2:	60b9      	str	r1, [r7, #8]
 80114e4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	68ba      	ldr	r2, [r7, #8]
 80114ea:	2100      	movs	r1, #0
 80114ec:	68f8      	ldr	r0, [r7, #12]
 80114ee:	f000 fcc6 	bl	8011e7e <USBD_LL_Transmit>

  return USBD_OK;
 80114f2:	2300      	movs	r3, #0
}
 80114f4:	4618      	mov	r0, r3
 80114f6:	3710      	adds	r7, #16
 80114f8:	46bd      	mov	sp, r7
 80114fa:	bd80      	pop	{r7, pc}

080114fc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80114fc:	b580      	push	{r7, lr}
 80114fe:	b084      	sub	sp, #16
 8011500:	af00      	add	r7, sp, #0
 8011502:	60f8      	str	r0, [r7, #12]
 8011504:	60b9      	str	r1, [r7, #8]
 8011506:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	2203      	movs	r2, #3
 801150c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	687a      	ldr	r2, [r7, #4]
 8011514:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	687a      	ldr	r2, [r7, #4]
 801151c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	68ba      	ldr	r2, [r7, #8]
 8011524:	2100      	movs	r1, #0
 8011526:	68f8      	ldr	r0, [r7, #12]
 8011528:	f000 fcca 	bl	8011ec0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801152c:	2300      	movs	r3, #0
}
 801152e:	4618      	mov	r0, r3
 8011530:	3710      	adds	r7, #16
 8011532:	46bd      	mov	sp, r7
 8011534:	bd80      	pop	{r7, pc}

08011536 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011536:	b580      	push	{r7, lr}
 8011538:	b084      	sub	sp, #16
 801153a:	af00      	add	r7, sp, #0
 801153c:	60f8      	str	r0, [r7, #12]
 801153e:	60b9      	str	r1, [r7, #8]
 8011540:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	68ba      	ldr	r2, [r7, #8]
 8011546:	2100      	movs	r1, #0
 8011548:	68f8      	ldr	r0, [r7, #12]
 801154a:	f000 fcb9 	bl	8011ec0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801154e:	2300      	movs	r3, #0
}
 8011550:	4618      	mov	r0, r3
 8011552:	3710      	adds	r7, #16
 8011554:	46bd      	mov	sp, r7
 8011556:	bd80      	pop	{r7, pc}

08011558 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011558:	b580      	push	{r7, lr}
 801155a:	b082      	sub	sp, #8
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	2204      	movs	r2, #4
 8011564:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011568:	2300      	movs	r3, #0
 801156a:	2200      	movs	r2, #0
 801156c:	2100      	movs	r1, #0
 801156e:	6878      	ldr	r0, [r7, #4]
 8011570:	f000 fc85 	bl	8011e7e <USBD_LL_Transmit>

  return USBD_OK;
 8011574:	2300      	movs	r3, #0
}
 8011576:	4618      	mov	r0, r3
 8011578:	3708      	adds	r7, #8
 801157a:	46bd      	mov	sp, r7
 801157c:	bd80      	pop	{r7, pc}

0801157e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801157e:	b580      	push	{r7, lr}
 8011580:	b082      	sub	sp, #8
 8011582:	af00      	add	r7, sp, #0
 8011584:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	2205      	movs	r2, #5
 801158a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801158e:	2300      	movs	r3, #0
 8011590:	2200      	movs	r2, #0
 8011592:	2100      	movs	r1, #0
 8011594:	6878      	ldr	r0, [r7, #4]
 8011596:	f000 fc93 	bl	8011ec0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801159a:	2300      	movs	r3, #0
}
 801159c:	4618      	mov	r0, r3
 801159e:	3708      	adds	r7, #8
 80115a0:	46bd      	mov	sp, r7
 80115a2:	bd80      	pop	{r7, pc}

080115a4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80115a4:	b580      	push	{r7, lr}
 80115a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80115a8:	2200      	movs	r2, #0
 80115aa:	4912      	ldr	r1, [pc, #72]	@ (80115f4 <MX_USB_Device_Init+0x50>)
 80115ac:	4812      	ldr	r0, [pc, #72]	@ (80115f8 <MX_USB_Device_Init+0x54>)
 80115ae:	f7fe fd43 	bl	8010038 <USBD_Init>
 80115b2:	4603      	mov	r3, r0
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d001      	beq.n	80115bc <MX_USB_Device_Init+0x18>
    Error_Handler();
 80115b8:	f7f2 ff04 	bl	80043c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80115bc:	490f      	ldr	r1, [pc, #60]	@ (80115fc <MX_USB_Device_Init+0x58>)
 80115be:	480e      	ldr	r0, [pc, #56]	@ (80115f8 <MX_USB_Device_Init+0x54>)
 80115c0:	f7fe fd78 	bl	80100b4 <USBD_RegisterClass>
 80115c4:	4603      	mov	r3, r0
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d001      	beq.n	80115ce <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80115ca:	f7f2 fefb 	bl	80043c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80115ce:	490c      	ldr	r1, [pc, #48]	@ (8011600 <MX_USB_Device_Init+0x5c>)
 80115d0:	4809      	ldr	r0, [pc, #36]	@ (80115f8 <MX_USB_Device_Init+0x54>)
 80115d2:	f7fe fc61 	bl	800fe98 <USBD_CDC_RegisterInterface>
 80115d6:	4603      	mov	r3, r0
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d001      	beq.n	80115e0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80115dc:	f7f2 fef2 	bl	80043c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80115e0:	4805      	ldr	r0, [pc, #20]	@ (80115f8 <MX_USB_Device_Init+0x54>)
 80115e2:	f7fe fdab 	bl	801013c <USBD_Start>
 80115e6:	4603      	mov	r3, r0
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d001      	beq.n	80115f0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80115ec:	f7f2 feea 	bl	80043c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80115f0:	bf00      	nop
 80115f2:	bd80      	pop	{r7, pc}
 80115f4:	200000d4 	.word	0x200000d4
 80115f8:	200009a8 	.word	0x200009a8
 80115fc:	20000040 	.word	0x20000040
 8011600:	200000c0 	.word	0x200000c0

08011604 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011604:	b580      	push	{r7, lr}
 8011606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011608:	2200      	movs	r2, #0
 801160a:	4905      	ldr	r1, [pc, #20]	@ (8011620 <CDC_Init_FS+0x1c>)
 801160c:	4805      	ldr	r0, [pc, #20]	@ (8011624 <CDC_Init_FS+0x20>)
 801160e:	f7fe fc5d 	bl	800fecc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011612:	4905      	ldr	r1, [pc, #20]	@ (8011628 <CDC_Init_FS+0x24>)
 8011614:	4803      	ldr	r0, [pc, #12]	@ (8011624 <CDC_Init_FS+0x20>)
 8011616:	f7fe fc7b 	bl	800ff10 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801161a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801161c:	4618      	mov	r0, r3
 801161e:	bd80      	pop	{r7, pc}
 8011620:	20001484 	.word	0x20001484
 8011624:	200009a8 	.word	0x200009a8
 8011628:	20000c84 	.word	0x20000c84

0801162c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801162c:	b480      	push	{r7}
 801162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011630:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011632:	4618      	mov	r0, r3
 8011634:	46bd      	mov	sp, r7
 8011636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801163a:	4770      	bx	lr

0801163c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801163c:	b480      	push	{r7}
 801163e:	b083      	sub	sp, #12
 8011640:	af00      	add	r7, sp, #0
 8011642:	4603      	mov	r3, r0
 8011644:	6039      	str	r1, [r7, #0]
 8011646:	71fb      	strb	r3, [r7, #7]
 8011648:	4613      	mov	r3, r2
 801164a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801164c:	79fb      	ldrb	r3, [r7, #7]
 801164e:	2b23      	cmp	r3, #35	@ 0x23
 8011650:	d84a      	bhi.n	80116e8 <CDC_Control_FS+0xac>
 8011652:	a201      	add	r2, pc, #4	@ (adr r2, 8011658 <CDC_Control_FS+0x1c>)
 8011654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011658:	080116e9 	.word	0x080116e9
 801165c:	080116e9 	.word	0x080116e9
 8011660:	080116e9 	.word	0x080116e9
 8011664:	080116e9 	.word	0x080116e9
 8011668:	080116e9 	.word	0x080116e9
 801166c:	080116e9 	.word	0x080116e9
 8011670:	080116e9 	.word	0x080116e9
 8011674:	080116e9 	.word	0x080116e9
 8011678:	080116e9 	.word	0x080116e9
 801167c:	080116e9 	.word	0x080116e9
 8011680:	080116e9 	.word	0x080116e9
 8011684:	080116e9 	.word	0x080116e9
 8011688:	080116e9 	.word	0x080116e9
 801168c:	080116e9 	.word	0x080116e9
 8011690:	080116e9 	.word	0x080116e9
 8011694:	080116e9 	.word	0x080116e9
 8011698:	080116e9 	.word	0x080116e9
 801169c:	080116e9 	.word	0x080116e9
 80116a0:	080116e9 	.word	0x080116e9
 80116a4:	080116e9 	.word	0x080116e9
 80116a8:	080116e9 	.word	0x080116e9
 80116ac:	080116e9 	.word	0x080116e9
 80116b0:	080116e9 	.word	0x080116e9
 80116b4:	080116e9 	.word	0x080116e9
 80116b8:	080116e9 	.word	0x080116e9
 80116bc:	080116e9 	.word	0x080116e9
 80116c0:	080116e9 	.word	0x080116e9
 80116c4:	080116e9 	.word	0x080116e9
 80116c8:	080116e9 	.word	0x080116e9
 80116cc:	080116e9 	.word	0x080116e9
 80116d0:	080116e9 	.word	0x080116e9
 80116d4:	080116e9 	.word	0x080116e9
 80116d8:	080116e9 	.word	0x080116e9
 80116dc:	080116e9 	.word	0x080116e9
 80116e0:	080116e9 	.word	0x080116e9
 80116e4:	080116e9 	.word	0x080116e9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80116e8:	bf00      	nop
  }

  return (USBD_OK);
 80116ea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80116ec:	4618      	mov	r0, r3
 80116ee:	370c      	adds	r7, #12
 80116f0:	46bd      	mov	sp, r7
 80116f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f6:	4770      	bx	lr

080116f8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b082      	sub	sp, #8
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
 8011700:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011702:	6879      	ldr	r1, [r7, #4]
 8011704:	4805      	ldr	r0, [pc, #20]	@ (801171c <CDC_Receive_FS+0x24>)
 8011706:	f7fe fc03 	bl	800ff10 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801170a:	4804      	ldr	r0, [pc, #16]	@ (801171c <CDC_Receive_FS+0x24>)
 801170c:	f7fe fc5e 	bl	800ffcc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011710:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011712:	4618      	mov	r0, r3
 8011714:	3708      	adds	r7, #8
 8011716:	46bd      	mov	sp, r7
 8011718:	bd80      	pop	{r7, pc}
 801171a:	bf00      	nop
 801171c:	200009a8 	.word	0x200009a8

08011720 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011720:	b580      	push	{r7, lr}
 8011722:	b084      	sub	sp, #16
 8011724:	af00      	add	r7, sp, #0
 8011726:	6078      	str	r0, [r7, #4]
 8011728:	460b      	mov	r3, r1
 801172a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801172c:	2300      	movs	r3, #0
 801172e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8011730:	4b0d      	ldr	r3, [pc, #52]	@ (8011768 <CDC_Transmit_FS+0x48>)
 8011732:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011736:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8011738:	68bb      	ldr	r3, [r7, #8]
 801173a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801173e:	2b00      	cmp	r3, #0
 8011740:	d001      	beq.n	8011746 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8011742:	2301      	movs	r3, #1
 8011744:	e00b      	b.n	801175e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8011746:	887b      	ldrh	r3, [r7, #2]
 8011748:	461a      	mov	r2, r3
 801174a:	6879      	ldr	r1, [r7, #4]
 801174c:	4806      	ldr	r0, [pc, #24]	@ (8011768 <CDC_Transmit_FS+0x48>)
 801174e:	f7fe fbbd 	bl	800fecc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8011752:	4805      	ldr	r0, [pc, #20]	@ (8011768 <CDC_Transmit_FS+0x48>)
 8011754:	f7fe fbfa 	bl	800ff4c <USBD_CDC_TransmitPacket>
 8011758:	4603      	mov	r3, r0
 801175a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801175c:	7bfb      	ldrb	r3, [r7, #15]
}
 801175e:	4618      	mov	r0, r3
 8011760:	3710      	adds	r7, #16
 8011762:	46bd      	mov	sp, r7
 8011764:	bd80      	pop	{r7, pc}
 8011766:	bf00      	nop
 8011768:	200009a8 	.word	0x200009a8

0801176c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801176c:	b480      	push	{r7}
 801176e:	b087      	sub	sp, #28
 8011770:	af00      	add	r7, sp, #0
 8011772:	60f8      	str	r0, [r7, #12]
 8011774:	60b9      	str	r1, [r7, #8]
 8011776:	4613      	mov	r3, r2
 8011778:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801177a:	2300      	movs	r3, #0
 801177c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801177e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011782:	4618      	mov	r0, r3
 8011784:	371c      	adds	r7, #28
 8011786:	46bd      	mov	sp, r7
 8011788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178c:	4770      	bx	lr
	...

08011790 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011790:	b480      	push	{r7}
 8011792:	b083      	sub	sp, #12
 8011794:	af00      	add	r7, sp, #0
 8011796:	4603      	mov	r3, r0
 8011798:	6039      	str	r1, [r7, #0]
 801179a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 801179c:	683b      	ldr	r3, [r7, #0]
 801179e:	2212      	movs	r2, #18
 80117a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80117a2:	4b03      	ldr	r3, [pc, #12]	@ (80117b0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80117a4:	4618      	mov	r0, r3
 80117a6:	370c      	adds	r7, #12
 80117a8:	46bd      	mov	sp, r7
 80117aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ae:	4770      	bx	lr
 80117b0:	200000f4 	.word	0x200000f4

080117b4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80117b4:	b480      	push	{r7}
 80117b6:	b083      	sub	sp, #12
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	4603      	mov	r3, r0
 80117bc:	6039      	str	r1, [r7, #0]
 80117be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80117c0:	683b      	ldr	r3, [r7, #0]
 80117c2:	2204      	movs	r2, #4
 80117c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80117c6:	4b03      	ldr	r3, [pc, #12]	@ (80117d4 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80117c8:	4618      	mov	r0, r3
 80117ca:	370c      	adds	r7, #12
 80117cc:	46bd      	mov	sp, r7
 80117ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d2:	4770      	bx	lr
 80117d4:	20000108 	.word	0x20000108

080117d8 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b082      	sub	sp, #8
 80117dc:	af00      	add	r7, sp, #0
 80117de:	4603      	mov	r3, r0
 80117e0:	6039      	str	r1, [r7, #0]
 80117e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80117e4:	79fb      	ldrb	r3, [r7, #7]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d105      	bne.n	80117f6 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80117ea:	683a      	ldr	r2, [r7, #0]
 80117ec:	4907      	ldr	r1, [pc, #28]	@ (801180c <USBD_CDC_ProductStrDescriptor+0x34>)
 80117ee:	4808      	ldr	r0, [pc, #32]	@ (8011810 <USBD_CDC_ProductStrDescriptor+0x38>)
 80117f0:	f7ff fdec 	bl	80113cc <USBD_GetString>
 80117f4:	e004      	b.n	8011800 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80117f6:	683a      	ldr	r2, [r7, #0]
 80117f8:	4904      	ldr	r1, [pc, #16]	@ (801180c <USBD_CDC_ProductStrDescriptor+0x34>)
 80117fa:	4805      	ldr	r0, [pc, #20]	@ (8011810 <USBD_CDC_ProductStrDescriptor+0x38>)
 80117fc:	f7ff fde6 	bl	80113cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8011800:	4b02      	ldr	r3, [pc, #8]	@ (801180c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8011802:	4618      	mov	r0, r3
 8011804:	3708      	adds	r7, #8
 8011806:	46bd      	mov	sp, r7
 8011808:	bd80      	pop	{r7, pc}
 801180a:	bf00      	nop
 801180c:	20001c84 	.word	0x20001c84
 8011810:	08014a48 	.word	0x08014a48

08011814 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011814:	b580      	push	{r7, lr}
 8011816:	b082      	sub	sp, #8
 8011818:	af00      	add	r7, sp, #0
 801181a:	4603      	mov	r3, r0
 801181c:	6039      	str	r1, [r7, #0]
 801181e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011820:	683a      	ldr	r2, [r7, #0]
 8011822:	4904      	ldr	r1, [pc, #16]	@ (8011834 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8011824:	4804      	ldr	r0, [pc, #16]	@ (8011838 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8011826:	f7ff fdd1 	bl	80113cc <USBD_GetString>
  return USBD_StrDesc;
 801182a:	4b02      	ldr	r3, [pc, #8]	@ (8011834 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 801182c:	4618      	mov	r0, r3
 801182e:	3708      	adds	r7, #8
 8011830:	46bd      	mov	sp, r7
 8011832:	bd80      	pop	{r7, pc}
 8011834:	20001c84 	.word	0x20001c84
 8011838:	08014a60 	.word	0x08014a60

0801183c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801183c:	b580      	push	{r7, lr}
 801183e:	b082      	sub	sp, #8
 8011840:	af00      	add	r7, sp, #0
 8011842:	4603      	mov	r3, r0
 8011844:	6039      	str	r1, [r7, #0]
 8011846:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011848:	683b      	ldr	r3, [r7, #0]
 801184a:	221a      	movs	r2, #26
 801184c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801184e:	f000 f843 	bl	80118d8 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8011852:	4b02      	ldr	r3, [pc, #8]	@ (801185c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8011854:	4618      	mov	r0, r3
 8011856:	3708      	adds	r7, #8
 8011858:	46bd      	mov	sp, r7
 801185a:	bd80      	pop	{r7, pc}
 801185c:	2000010c 	.word	0x2000010c

08011860 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b082      	sub	sp, #8
 8011864:	af00      	add	r7, sp, #0
 8011866:	4603      	mov	r3, r0
 8011868:	6039      	str	r1, [r7, #0]
 801186a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801186c:	79fb      	ldrb	r3, [r7, #7]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d105      	bne.n	801187e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8011872:	683a      	ldr	r2, [r7, #0]
 8011874:	4907      	ldr	r1, [pc, #28]	@ (8011894 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8011876:	4808      	ldr	r0, [pc, #32]	@ (8011898 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8011878:	f7ff fda8 	bl	80113cc <USBD_GetString>
 801187c:	e004      	b.n	8011888 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801187e:	683a      	ldr	r2, [r7, #0]
 8011880:	4904      	ldr	r1, [pc, #16]	@ (8011894 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8011882:	4805      	ldr	r0, [pc, #20]	@ (8011898 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8011884:	f7ff fda2 	bl	80113cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8011888:	4b02      	ldr	r3, [pc, #8]	@ (8011894 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 801188a:	4618      	mov	r0, r3
 801188c:	3708      	adds	r7, #8
 801188e:	46bd      	mov	sp, r7
 8011890:	bd80      	pop	{r7, pc}
 8011892:	bf00      	nop
 8011894:	20001c84 	.word	0x20001c84
 8011898:	08014a74 	.word	0x08014a74

0801189c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801189c:	b580      	push	{r7, lr}
 801189e:	b082      	sub	sp, #8
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	4603      	mov	r3, r0
 80118a4:	6039      	str	r1, [r7, #0]
 80118a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80118a8:	79fb      	ldrb	r3, [r7, #7]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d105      	bne.n	80118ba <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80118ae:	683a      	ldr	r2, [r7, #0]
 80118b0:	4907      	ldr	r1, [pc, #28]	@ (80118d0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80118b2:	4808      	ldr	r0, [pc, #32]	@ (80118d4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80118b4:	f7ff fd8a 	bl	80113cc <USBD_GetString>
 80118b8:	e004      	b.n	80118c4 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80118ba:	683a      	ldr	r2, [r7, #0]
 80118bc:	4904      	ldr	r1, [pc, #16]	@ (80118d0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80118be:	4805      	ldr	r0, [pc, #20]	@ (80118d4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80118c0:	f7ff fd84 	bl	80113cc <USBD_GetString>
  }
  return USBD_StrDesc;
 80118c4:	4b02      	ldr	r3, [pc, #8]	@ (80118d0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80118c6:	4618      	mov	r0, r3
 80118c8:	3708      	adds	r7, #8
 80118ca:	46bd      	mov	sp, r7
 80118cc:	bd80      	pop	{r7, pc}
 80118ce:	bf00      	nop
 80118d0:	20001c84 	.word	0x20001c84
 80118d4:	08014a80 	.word	0x08014a80

080118d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80118d8:	b580      	push	{r7, lr}
 80118da:	b084      	sub	sp, #16
 80118dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80118de:	4b0f      	ldr	r3, [pc, #60]	@ (801191c <Get_SerialNum+0x44>)
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80118e4:	4b0e      	ldr	r3, [pc, #56]	@ (8011920 <Get_SerialNum+0x48>)
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80118ea:	4b0e      	ldr	r3, [pc, #56]	@ (8011924 <Get_SerialNum+0x4c>)
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80118f0:	68fa      	ldr	r2, [r7, #12]
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	4413      	add	r3, r2
 80118f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d009      	beq.n	8011912 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80118fe:	2208      	movs	r2, #8
 8011900:	4909      	ldr	r1, [pc, #36]	@ (8011928 <Get_SerialNum+0x50>)
 8011902:	68f8      	ldr	r0, [r7, #12]
 8011904:	f000 f814 	bl	8011930 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011908:	2204      	movs	r2, #4
 801190a:	4908      	ldr	r1, [pc, #32]	@ (801192c <Get_SerialNum+0x54>)
 801190c:	68b8      	ldr	r0, [r7, #8]
 801190e:	f000 f80f 	bl	8011930 <IntToUnicode>
  }
}
 8011912:	bf00      	nop
 8011914:	3710      	adds	r7, #16
 8011916:	46bd      	mov	sp, r7
 8011918:	bd80      	pop	{r7, pc}
 801191a:	bf00      	nop
 801191c:	1fff7590 	.word	0x1fff7590
 8011920:	1fff7594 	.word	0x1fff7594
 8011924:	1fff7598 	.word	0x1fff7598
 8011928:	2000010e 	.word	0x2000010e
 801192c:	2000011e 	.word	0x2000011e

08011930 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011930:	b480      	push	{r7}
 8011932:	b087      	sub	sp, #28
 8011934:	af00      	add	r7, sp, #0
 8011936:	60f8      	str	r0, [r7, #12]
 8011938:	60b9      	str	r1, [r7, #8]
 801193a:	4613      	mov	r3, r2
 801193c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801193e:	2300      	movs	r3, #0
 8011940:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011942:	2300      	movs	r3, #0
 8011944:	75fb      	strb	r3, [r7, #23]
 8011946:	e027      	b.n	8011998 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	0f1b      	lsrs	r3, r3, #28
 801194c:	2b09      	cmp	r3, #9
 801194e:	d80b      	bhi.n	8011968 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	0f1b      	lsrs	r3, r3, #28
 8011954:	b2da      	uxtb	r2, r3
 8011956:	7dfb      	ldrb	r3, [r7, #23]
 8011958:	005b      	lsls	r3, r3, #1
 801195a:	4619      	mov	r1, r3
 801195c:	68bb      	ldr	r3, [r7, #8]
 801195e:	440b      	add	r3, r1
 8011960:	3230      	adds	r2, #48	@ 0x30
 8011962:	b2d2      	uxtb	r2, r2
 8011964:	701a      	strb	r2, [r3, #0]
 8011966:	e00a      	b.n	801197e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	0f1b      	lsrs	r3, r3, #28
 801196c:	b2da      	uxtb	r2, r3
 801196e:	7dfb      	ldrb	r3, [r7, #23]
 8011970:	005b      	lsls	r3, r3, #1
 8011972:	4619      	mov	r1, r3
 8011974:	68bb      	ldr	r3, [r7, #8]
 8011976:	440b      	add	r3, r1
 8011978:	3237      	adds	r2, #55	@ 0x37
 801197a:	b2d2      	uxtb	r2, r2
 801197c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	011b      	lsls	r3, r3, #4
 8011982:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011984:	7dfb      	ldrb	r3, [r7, #23]
 8011986:	005b      	lsls	r3, r3, #1
 8011988:	3301      	adds	r3, #1
 801198a:	68ba      	ldr	r2, [r7, #8]
 801198c:	4413      	add	r3, r2
 801198e:	2200      	movs	r2, #0
 8011990:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011992:	7dfb      	ldrb	r3, [r7, #23]
 8011994:	3301      	adds	r3, #1
 8011996:	75fb      	strb	r3, [r7, #23]
 8011998:	7dfa      	ldrb	r2, [r7, #23]
 801199a:	79fb      	ldrb	r3, [r7, #7]
 801199c:	429a      	cmp	r2, r3
 801199e:	d3d3      	bcc.n	8011948 <IntToUnicode+0x18>
  }
}
 80119a0:	bf00      	nop
 80119a2:	bf00      	nop
 80119a4:	371c      	adds	r7, #28
 80119a6:	46bd      	mov	sp, r7
 80119a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ac:	4770      	bx	lr

080119ae <LL_AHB2_GRP1_EnableClock>:
{
 80119ae:	b480      	push	{r7}
 80119b0:	b085      	sub	sp, #20
 80119b2:	af00      	add	r7, sp, #0
 80119b4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80119b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80119ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80119bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	4313      	orrs	r3, r2
 80119c4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80119c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80119ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	4013      	ands	r3, r2
 80119d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80119d2:	68fb      	ldr	r3, [r7, #12]
}
 80119d4:	bf00      	nop
 80119d6:	3714      	adds	r7, #20
 80119d8:	46bd      	mov	sp, r7
 80119da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119de:	4770      	bx	lr

080119e0 <LL_APB1_GRP1_EnableClock>:
{
 80119e0:	b480      	push	{r7}
 80119e2:	b085      	sub	sp, #20
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80119e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80119ec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80119ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	4313      	orrs	r3, r2
 80119f6:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80119f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80119fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	4013      	ands	r3, r2
 8011a02:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011a04:	68fb      	ldr	r3, [r7, #12]
}
 8011a06:	bf00      	nop
 8011a08:	3714      	adds	r7, #20
 8011a0a:	46bd      	mov	sp, r7
 8011a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a10:	4770      	bx	lr
	...

08011a14 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a14:	b580      	push	{r7, lr}
 8011a16:	b088      	sub	sp, #32
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011a1c:	f107 030c 	add.w	r3, r7, #12
 8011a20:	2200      	movs	r2, #0
 8011a22:	601a      	str	r2, [r3, #0]
 8011a24:	605a      	str	r2, [r3, #4]
 8011a26:	609a      	str	r2, [r3, #8]
 8011a28:	60da      	str	r2, [r3, #12]
 8011a2a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	4a17      	ldr	r2, [pc, #92]	@ (8011a90 <HAL_PCD_MspInit+0x7c>)
 8011a32:	4293      	cmp	r3, r2
 8011a34:	d128      	bne.n	8011a88 <HAL_PCD_MspInit+0x74>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011a36:	2001      	movs	r0, #1
 8011a38:	f7ff ffb9 	bl	80119ae <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 8011a3c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8011a40:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011a42:	2302      	movs	r3, #2
 8011a44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011a46:	2300      	movs	r3, #0
 8011a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8011a4e:	230a      	movs	r3, #10
 8011a50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011a52:	f107 030c 	add.w	r3, r7, #12
 8011a56:	4619      	mov	r1, r3
 8011a58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8011a5c:	f7f5 f898 	bl	8006b90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8011a60:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8011a64:	f7ff ffbc 	bl	80119e0 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 8011a68:	2200      	movs	r2, #0
 8011a6a:	2100      	movs	r1, #0
 8011a6c:	2013      	movs	r0, #19
 8011a6e:	f7f4 fd78 	bl	8006562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 8011a72:	2013      	movs	r0, #19
 8011a74:	f7f4 fd8f 	bl	8006596 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8011a78:	2200      	movs	r2, #0
 8011a7a:	2100      	movs	r1, #0
 8011a7c:	2014      	movs	r0, #20
 8011a7e:	f7f4 fd70 	bl	8006562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8011a82:	2014      	movs	r0, #20
 8011a84:	f7f4 fd87 	bl	8006596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8011a88:	bf00      	nop
 8011a8a:	3720      	adds	r7, #32
 8011a8c:	46bd      	mov	sp, r7
 8011a8e:	bd80      	pop	{r7, pc}
 8011a90:	40006800 	.word	0x40006800

08011a94 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b082      	sub	sp, #8
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8011aa8:	4619      	mov	r1, r3
 8011aaa:	4610      	mov	r0, r2
 8011aac:	f7fe fb93 	bl	80101d6 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8011ab0:	bf00      	nop
 8011ab2:	3708      	adds	r7, #8
 8011ab4:	46bd      	mov	sp, r7
 8011ab6:	bd80      	pop	{r7, pc}

08011ab8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b082      	sub	sp, #8
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	6078      	str	r0, [r7, #4]
 8011ac0:	460b      	mov	r3, r1
 8011ac2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8011aca:	78fa      	ldrb	r2, [r7, #3]
 8011acc:	6879      	ldr	r1, [r7, #4]
 8011ace:	4613      	mov	r3, r2
 8011ad0:	009b      	lsls	r3, r3, #2
 8011ad2:	4413      	add	r3, r2
 8011ad4:	00db      	lsls	r3, r3, #3
 8011ad6:	440b      	add	r3, r1
 8011ad8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011adc:	681a      	ldr	r2, [r3, #0]
 8011ade:	78fb      	ldrb	r3, [r7, #3]
 8011ae0:	4619      	mov	r1, r3
 8011ae2:	f7fe fbcd 	bl	8010280 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8011ae6:	bf00      	nop
 8011ae8:	3708      	adds	r7, #8
 8011aea:	46bd      	mov	sp, r7
 8011aec:	bd80      	pop	{r7, pc}

08011aee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011aee:	b580      	push	{r7, lr}
 8011af0:	b082      	sub	sp, #8
 8011af2:	af00      	add	r7, sp, #0
 8011af4:	6078      	str	r0, [r7, #4]
 8011af6:	460b      	mov	r3, r1
 8011af8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8011b00:	78fa      	ldrb	r2, [r7, #3]
 8011b02:	6879      	ldr	r1, [r7, #4]
 8011b04:	4613      	mov	r3, r2
 8011b06:	009b      	lsls	r3, r3, #2
 8011b08:	4413      	add	r3, r2
 8011b0a:	00db      	lsls	r3, r3, #3
 8011b0c:	440b      	add	r3, r1
 8011b0e:	3324      	adds	r3, #36	@ 0x24
 8011b10:	681a      	ldr	r2, [r3, #0]
 8011b12:	78fb      	ldrb	r3, [r7, #3]
 8011b14:	4619      	mov	r1, r3
 8011b16:	f7fe fc66 	bl	80103e6 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8011b1a:	bf00      	nop
 8011b1c:	3708      	adds	r7, #8
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	bd80      	pop	{r7, pc}

08011b22 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011b22:	b580      	push	{r7, lr}
 8011b24:	b082      	sub	sp, #8
 8011b26:	af00      	add	r7, sp, #0
 8011b28:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011b30:	4618      	mov	r0, r3
 8011b32:	f7fe fda0 	bl	8010676 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8011b36:	bf00      	nop
 8011b38:	3708      	adds	r7, #8
 8011b3a:	46bd      	mov	sp, r7
 8011b3c:	bd80      	pop	{r7, pc}

08011b3e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011b3e:	b580      	push	{r7, lr}
 8011b40:	b084      	sub	sp, #16
 8011b42:	af00      	add	r7, sp, #0
 8011b44:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011b46:	2301      	movs	r3, #1
 8011b48:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	795b      	ldrb	r3, [r3, #5]
 8011b4e:	2b02      	cmp	r3, #2
 8011b50:	d001      	beq.n	8011b56 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8011b52:	f7f2 fc37 	bl	80043c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011b5c:	7bfa      	ldrb	r2, [r7, #15]
 8011b5e:	4611      	mov	r1, r2
 8011b60:	4618      	mov	r0, r3
 8011b62:	f7fe fd44 	bl	80105ee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	f7fe fcec 	bl	801054a <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8011b72:	bf00      	nop
 8011b74:	3710      	adds	r7, #16
 8011b76:	46bd      	mov	sp, r7
 8011b78:	bd80      	pop	{r7, pc}
	...

08011b7c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011b7c:	b580      	push	{r7, lr}
 8011b7e:	b082      	sub	sp, #8
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	f7fe fd3f 	bl	801060e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	7a5b      	ldrb	r3, [r3, #9]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d005      	beq.n	8011ba4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011b98:	4b04      	ldr	r3, [pc, #16]	@ (8011bac <HAL_PCD_SuspendCallback+0x30>)
 8011b9a:	691b      	ldr	r3, [r3, #16]
 8011b9c:	4a03      	ldr	r2, [pc, #12]	@ (8011bac <HAL_PCD_SuspendCallback+0x30>)
 8011b9e:	f043 0306 	orr.w	r3, r3, #6
 8011ba2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8011ba4:	bf00      	nop
 8011ba6:	3708      	adds	r7, #8
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	bd80      	pop	{r7, pc}
 8011bac:	e000ed00 	.word	0xe000ed00

08011bb0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011bb0:	b580      	push	{r7, lr}
 8011bb2:	b082      	sub	sp, #8
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	7a5b      	ldrb	r3, [r3, #9]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d007      	beq.n	8011bd0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011bc0:	4b08      	ldr	r3, [pc, #32]	@ (8011be4 <HAL_PCD_ResumeCallback+0x34>)
 8011bc2:	691b      	ldr	r3, [r3, #16]
 8011bc4:	4a07      	ldr	r2, [pc, #28]	@ (8011be4 <HAL_PCD_ResumeCallback+0x34>)
 8011bc6:	f023 0306 	bic.w	r3, r3, #6
 8011bca:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8011bcc:	f000 f9fa 	bl	8011fc4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	f7fe fd35 	bl	8010646 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8011bdc:	bf00      	nop
 8011bde:	3708      	adds	r7, #8
 8011be0:	46bd      	mov	sp, r7
 8011be2:	bd80      	pop	{r7, pc}
 8011be4:	e000ed00 	.word	0xe000ed00

08011be8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011be8:	b580      	push	{r7, lr}
 8011bea:	b082      	sub	sp, #8
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8011bf0:	4a2c      	ldr	r2, [pc, #176]	@ (8011ca4 <USBD_LL_Init+0xbc>)
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	4a2a      	ldr	r2, [pc, #168]	@ (8011ca4 <USBD_LL_Init+0xbc>)
 8011bfc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8011c00:	f7f8 fa9a 	bl	800a138 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8011c04:	4b27      	ldr	r3, [pc, #156]	@ (8011ca4 <USBD_LL_Init+0xbc>)
 8011c06:	4a28      	ldr	r2, [pc, #160]	@ (8011ca8 <USBD_LL_Init+0xc0>)
 8011c08:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8011c0a:	4b26      	ldr	r3, [pc, #152]	@ (8011ca4 <USBD_LL_Init+0xbc>)
 8011c0c:	2208      	movs	r2, #8
 8011c0e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8011c10:	4b24      	ldr	r3, [pc, #144]	@ (8011ca4 <USBD_LL_Init+0xbc>)
 8011c12:	2202      	movs	r2, #2
 8011c14:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011c16:	4b23      	ldr	r3, [pc, #140]	@ (8011ca4 <USBD_LL_Init+0xbc>)
 8011c18:	2202      	movs	r2, #2
 8011c1a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8011c1c:	4b21      	ldr	r3, [pc, #132]	@ (8011ca4 <USBD_LL_Init+0xbc>)
 8011c1e:	2200      	movs	r2, #0
 8011c20:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8011c22:	4b20      	ldr	r3, [pc, #128]	@ (8011ca4 <USBD_LL_Init+0xbc>)
 8011c24:	2200      	movs	r2, #0
 8011c26:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8011c28:	4b1e      	ldr	r3, [pc, #120]	@ (8011ca4 <USBD_LL_Init+0xbc>)
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8011c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8011ca4 <USBD_LL_Init+0xbc>)
 8011c30:	2200      	movs	r2, #0
 8011c32:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8011c34:	481b      	ldr	r0, [pc, #108]	@ (8011ca4 <USBD_LL_Init+0xbc>)
 8011c36:	f7f6 fd2e 	bl	8008696 <HAL_PCD_Init>
 8011c3a:	4603      	mov	r3, r0
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d001      	beq.n	8011c44 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8011c40:	f7f2 fbc0 	bl	80043c4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011c4a:	2318      	movs	r3, #24
 8011c4c:	2200      	movs	r2, #0
 8011c4e:	2100      	movs	r1, #0
 8011c50:	f7f8 f9e7 	bl	800a022 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011c5a:	2358      	movs	r3, #88	@ 0x58
 8011c5c:	2200      	movs	r2, #0
 8011c5e:	2180      	movs	r1, #128	@ 0x80
 8011c60:	f7f8 f9df 	bl	800a022 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011c6a:	23c0      	movs	r3, #192	@ 0xc0
 8011c6c:	2200      	movs	r2, #0
 8011c6e:	2181      	movs	r1, #129	@ 0x81
 8011c70:	f7f8 f9d7 	bl	800a022 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011c7a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8011c7e:	2200      	movs	r2, #0
 8011c80:	2101      	movs	r1, #1
 8011c82:	f7f8 f9ce 	bl	800a022 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011c8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011c90:	2200      	movs	r2, #0
 8011c92:	2182      	movs	r1, #130	@ 0x82
 8011c94:	f7f8 f9c5 	bl	800a022 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8011c98:	2300      	movs	r3, #0
}
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	3708      	adds	r7, #8
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	bd80      	pop	{r7, pc}
 8011ca2:	bf00      	nop
 8011ca4:	20001e84 	.word	0x20001e84
 8011ca8:	40006800 	.word	0x40006800

08011cac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011cac:	b580      	push	{r7, lr}
 8011cae:	b084      	sub	sp, #16
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011cb4:	2300      	movs	r3, #0
 8011cb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011cb8:	2300      	movs	r3, #0
 8011cba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	f7f6 fdb5 	bl	8008832 <HAL_PCD_Start>
 8011cc8:	4603      	mov	r3, r0
 8011cca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ccc:	7bfb      	ldrb	r3, [r7, #15]
 8011cce:	4618      	mov	r0, r3
 8011cd0:	f000 f97e 	bl	8011fd0 <USBD_Get_USB_Status>
 8011cd4:	4603      	mov	r3, r0
 8011cd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011cd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8011cda:	4618      	mov	r0, r3
 8011cdc:	3710      	adds	r7, #16
 8011cde:	46bd      	mov	sp, r7
 8011ce0:	bd80      	pop	{r7, pc}

08011ce2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011ce2:	b580      	push	{r7, lr}
 8011ce4:	b084      	sub	sp, #16
 8011ce6:	af00      	add	r7, sp, #0
 8011ce8:	6078      	str	r0, [r7, #4]
 8011cea:	4608      	mov	r0, r1
 8011cec:	4611      	mov	r1, r2
 8011cee:	461a      	mov	r2, r3
 8011cf0:	4603      	mov	r3, r0
 8011cf2:	70fb      	strb	r3, [r7, #3]
 8011cf4:	460b      	mov	r3, r1
 8011cf6:	70bb      	strb	r3, [r7, #2]
 8011cf8:	4613      	mov	r3, r2
 8011cfa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d00:	2300      	movs	r3, #0
 8011d02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011d0a:	78bb      	ldrb	r3, [r7, #2]
 8011d0c:	883a      	ldrh	r2, [r7, #0]
 8011d0e:	78f9      	ldrb	r1, [r7, #3]
 8011d10:	f7f6 fefc 	bl	8008b0c <HAL_PCD_EP_Open>
 8011d14:	4603      	mov	r3, r0
 8011d16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d18:	7bfb      	ldrb	r3, [r7, #15]
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	f000 f958 	bl	8011fd0 <USBD_Get_USB_Status>
 8011d20:	4603      	mov	r3, r0
 8011d22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011d24:	7bbb      	ldrb	r3, [r7, #14]
}
 8011d26:	4618      	mov	r0, r3
 8011d28:	3710      	adds	r7, #16
 8011d2a:	46bd      	mov	sp, r7
 8011d2c:	bd80      	pop	{r7, pc}

08011d2e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011d2e:	b580      	push	{r7, lr}
 8011d30:	b084      	sub	sp, #16
 8011d32:	af00      	add	r7, sp, #0
 8011d34:	6078      	str	r0, [r7, #4]
 8011d36:	460b      	mov	r3, r1
 8011d38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d3a:	2300      	movs	r3, #0
 8011d3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d3e:	2300      	movs	r3, #0
 8011d40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011d48:	78fa      	ldrb	r2, [r7, #3]
 8011d4a:	4611      	mov	r1, r2
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	f7f6 ff3a 	bl	8008bc6 <HAL_PCD_EP_Close>
 8011d52:	4603      	mov	r3, r0
 8011d54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d56:	7bfb      	ldrb	r3, [r7, #15]
 8011d58:	4618      	mov	r0, r3
 8011d5a:	f000 f939 	bl	8011fd0 <USBD_Get_USB_Status>
 8011d5e:	4603      	mov	r3, r0
 8011d60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011d62:	7bbb      	ldrb	r3, [r7, #14]
}
 8011d64:	4618      	mov	r0, r3
 8011d66:	3710      	adds	r7, #16
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	bd80      	pop	{r7, pc}

08011d6c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011d6c:	b580      	push	{r7, lr}
 8011d6e:	b084      	sub	sp, #16
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	6078      	str	r0, [r7, #4]
 8011d74:	460b      	mov	r3, r1
 8011d76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d78:	2300      	movs	r3, #0
 8011d7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d7c:	2300      	movs	r3, #0
 8011d7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011d86:	78fa      	ldrb	r2, [r7, #3]
 8011d88:	4611      	mov	r1, r2
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	f7f6 ffe3 	bl	8008d56 <HAL_PCD_EP_SetStall>
 8011d90:	4603      	mov	r3, r0
 8011d92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d94:	7bfb      	ldrb	r3, [r7, #15]
 8011d96:	4618      	mov	r0, r3
 8011d98:	f000 f91a 	bl	8011fd0 <USBD_Get_USB_Status>
 8011d9c:	4603      	mov	r3, r0
 8011d9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011da0:	7bbb      	ldrb	r3, [r7, #14]
}
 8011da2:	4618      	mov	r0, r3
 8011da4:	3710      	adds	r7, #16
 8011da6:	46bd      	mov	sp, r7
 8011da8:	bd80      	pop	{r7, pc}

08011daa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011daa:	b580      	push	{r7, lr}
 8011dac:	b084      	sub	sp, #16
 8011dae:	af00      	add	r7, sp, #0
 8011db0:	6078      	str	r0, [r7, #4]
 8011db2:	460b      	mov	r3, r1
 8011db4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011db6:	2300      	movs	r3, #0
 8011db8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011dba:	2300      	movs	r3, #0
 8011dbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011dc4:	78fa      	ldrb	r2, [r7, #3]
 8011dc6:	4611      	mov	r1, r2
 8011dc8:	4618      	mov	r0, r3
 8011dca:	f7f7 f816 	bl	8008dfa <HAL_PCD_EP_ClrStall>
 8011dce:	4603      	mov	r3, r0
 8011dd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011dd2:	7bfb      	ldrb	r3, [r7, #15]
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	f000 f8fb 	bl	8011fd0 <USBD_Get_USB_Status>
 8011dda:	4603      	mov	r3, r0
 8011ddc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011dde:	7bbb      	ldrb	r3, [r7, #14]
}
 8011de0:	4618      	mov	r0, r3
 8011de2:	3710      	adds	r7, #16
 8011de4:	46bd      	mov	sp, r7
 8011de6:	bd80      	pop	{r7, pc}

08011de8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011de8:	b480      	push	{r7}
 8011dea:	b085      	sub	sp, #20
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]
 8011df0:	460b      	mov	r3, r1
 8011df2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011dfa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011dfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	da0b      	bge.n	8011e1c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011e04:	78fb      	ldrb	r3, [r7, #3]
 8011e06:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011e0a:	68f9      	ldr	r1, [r7, #12]
 8011e0c:	4613      	mov	r3, r2
 8011e0e:	009b      	lsls	r3, r3, #2
 8011e10:	4413      	add	r3, r2
 8011e12:	00db      	lsls	r3, r3, #3
 8011e14:	440b      	add	r3, r1
 8011e16:	3312      	adds	r3, #18
 8011e18:	781b      	ldrb	r3, [r3, #0]
 8011e1a:	e00b      	b.n	8011e34 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011e1c:	78fb      	ldrb	r3, [r7, #3]
 8011e1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011e22:	68f9      	ldr	r1, [r7, #12]
 8011e24:	4613      	mov	r3, r2
 8011e26:	009b      	lsls	r3, r3, #2
 8011e28:	4413      	add	r3, r2
 8011e2a:	00db      	lsls	r3, r3, #3
 8011e2c:	440b      	add	r3, r1
 8011e2e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8011e32:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011e34:	4618      	mov	r0, r3
 8011e36:	3714      	adds	r7, #20
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e3e:	4770      	bx	lr

08011e40 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b084      	sub	sp, #16
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	6078      	str	r0, [r7, #4]
 8011e48:	460b      	mov	r3, r1
 8011e4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011e50:	2300      	movs	r3, #0
 8011e52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011e5a:	78fa      	ldrb	r2, [r7, #3]
 8011e5c:	4611      	mov	r1, r2
 8011e5e:	4618      	mov	r0, r3
 8011e60:	f7f6 fe30 	bl	8008ac4 <HAL_PCD_SetAddress>
 8011e64:	4603      	mov	r3, r0
 8011e66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011e68:	7bfb      	ldrb	r3, [r7, #15]
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	f000 f8b0 	bl	8011fd0 <USBD_Get_USB_Status>
 8011e70:	4603      	mov	r3, r0
 8011e72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011e74:	7bbb      	ldrb	r3, [r7, #14]
}
 8011e76:	4618      	mov	r0, r3
 8011e78:	3710      	adds	r7, #16
 8011e7a:	46bd      	mov	sp, r7
 8011e7c:	bd80      	pop	{r7, pc}

08011e7e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011e7e:	b580      	push	{r7, lr}
 8011e80:	b086      	sub	sp, #24
 8011e82:	af00      	add	r7, sp, #0
 8011e84:	60f8      	str	r0, [r7, #12]
 8011e86:	607a      	str	r2, [r7, #4]
 8011e88:	603b      	str	r3, [r7, #0]
 8011e8a:	460b      	mov	r3, r1
 8011e8c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011e8e:	2300      	movs	r3, #0
 8011e90:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011e92:	2300      	movs	r3, #0
 8011e94:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011e9c:	7af9      	ldrb	r1, [r7, #11]
 8011e9e:	683b      	ldr	r3, [r7, #0]
 8011ea0:	687a      	ldr	r2, [r7, #4]
 8011ea2:	f7f6 ff21 	bl	8008ce8 <HAL_PCD_EP_Transmit>
 8011ea6:	4603      	mov	r3, r0
 8011ea8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011eaa:	7dfb      	ldrb	r3, [r7, #23]
 8011eac:	4618      	mov	r0, r3
 8011eae:	f000 f88f 	bl	8011fd0 <USBD_Get_USB_Status>
 8011eb2:	4603      	mov	r3, r0
 8011eb4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011eb6:	7dbb      	ldrb	r3, [r7, #22]
}
 8011eb8:	4618      	mov	r0, r3
 8011eba:	3718      	adds	r7, #24
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	bd80      	pop	{r7, pc}

08011ec0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b086      	sub	sp, #24
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	60f8      	str	r0, [r7, #12]
 8011ec8:	607a      	str	r2, [r7, #4]
 8011eca:	603b      	str	r3, [r7, #0]
 8011ecc:	460b      	mov	r3, r1
 8011ece:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011ed0:	2300      	movs	r3, #0
 8011ed2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011ede:	7af9      	ldrb	r1, [r7, #11]
 8011ee0:	683b      	ldr	r3, [r7, #0]
 8011ee2:	687a      	ldr	r2, [r7, #4]
 8011ee4:	f7f6 feb7 	bl	8008c56 <HAL_PCD_EP_Receive>
 8011ee8:	4603      	mov	r3, r0
 8011eea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011eec:	7dfb      	ldrb	r3, [r7, #23]
 8011eee:	4618      	mov	r0, r3
 8011ef0:	f000 f86e 	bl	8011fd0 <USBD_Get_USB_Status>
 8011ef4:	4603      	mov	r3, r0
 8011ef6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011ef8:	7dbb      	ldrb	r3, [r7, #22]
}
 8011efa:	4618      	mov	r0, r3
 8011efc:	3718      	adds	r7, #24
 8011efe:	46bd      	mov	sp, r7
 8011f00:	bd80      	pop	{r7, pc}

08011f02 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011f02:	b580      	push	{r7, lr}
 8011f04:	b082      	sub	sp, #8
 8011f06:	af00      	add	r7, sp, #0
 8011f08:	6078      	str	r0, [r7, #4]
 8011f0a:	460b      	mov	r3, r1
 8011f0c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011f14:	78fa      	ldrb	r2, [r7, #3]
 8011f16:	4611      	mov	r1, r2
 8011f18:	4618      	mov	r0, r3
 8011f1a:	f7f6 fecd 	bl	8008cb8 <HAL_PCD_EP_GetRxCount>
 8011f1e:	4603      	mov	r3, r0
}
 8011f20:	4618      	mov	r0, r3
 8011f22:	3708      	adds	r7, #8
 8011f24:	46bd      	mov	sp, r7
 8011f26:	bd80      	pop	{r7, pc}

08011f28 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	b082      	sub	sp, #8
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	6078      	str	r0, [r7, #4]
 8011f30:	460b      	mov	r3, r1
 8011f32:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8011f34:	78fb      	ldrb	r3, [r7, #3]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d002      	beq.n	8011f40 <HAL_PCDEx_LPM_Callback+0x18>
 8011f3a:	2b01      	cmp	r3, #1
 8011f3c:	d013      	beq.n	8011f66 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8011f3e:	e023      	b.n	8011f88 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	7a5b      	ldrb	r3, [r3, #9]
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d007      	beq.n	8011f58 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8011f48:	f000 f83c 	bl	8011fc4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011f4c:	4b10      	ldr	r3, [pc, #64]	@ (8011f90 <HAL_PCDEx_LPM_Callback+0x68>)
 8011f4e:	691b      	ldr	r3, [r3, #16]
 8011f50:	4a0f      	ldr	r2, [pc, #60]	@ (8011f90 <HAL_PCDEx_LPM_Callback+0x68>)
 8011f52:	f023 0306 	bic.w	r3, r3, #6
 8011f56:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011f5e:	4618      	mov	r0, r3
 8011f60:	f7fe fb71 	bl	8010646 <USBD_LL_Resume>
    break;
 8011f64:	e010      	b.n	8011f88 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	f7fe fb4e 	bl	801060e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	7a5b      	ldrb	r3, [r3, #9]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d005      	beq.n	8011f86 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011f7a:	4b05      	ldr	r3, [pc, #20]	@ (8011f90 <HAL_PCDEx_LPM_Callback+0x68>)
 8011f7c:	691b      	ldr	r3, [r3, #16]
 8011f7e:	4a04      	ldr	r2, [pc, #16]	@ (8011f90 <HAL_PCDEx_LPM_Callback+0x68>)
 8011f80:	f043 0306 	orr.w	r3, r3, #6
 8011f84:	6113      	str	r3, [r2, #16]
    break;
 8011f86:	bf00      	nop
}
 8011f88:	bf00      	nop
 8011f8a:	3708      	adds	r7, #8
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	bd80      	pop	{r7, pc}
 8011f90:	e000ed00 	.word	0xe000ed00

08011f94 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011f94:	b480      	push	{r7}
 8011f96:	b083      	sub	sp, #12
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011f9c:	4b03      	ldr	r3, [pc, #12]	@ (8011fac <USBD_static_malloc+0x18>)
}
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	370c      	adds	r7, #12
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa8:	4770      	bx	lr
 8011faa:	bf00      	nop
 8011fac:	20002160 	.word	0x20002160

08011fb0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011fb0:	b480      	push	{r7}
 8011fb2:	b083      	sub	sp, #12
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8011fb8:	bf00      	nop
 8011fba:	370c      	adds	r7, #12
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc2:	4770      	bx	lr

08011fc4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8011fc8:	f7f1 ffec 	bl	8003fa4 <SystemClock_Config>
}
 8011fcc:	bf00      	nop
 8011fce:	bd80      	pop	{r7, pc}

08011fd0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011fd0:	b480      	push	{r7}
 8011fd2:	b085      	sub	sp, #20
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	4603      	mov	r3, r0
 8011fd8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011fda:	2300      	movs	r3, #0
 8011fdc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011fde:	79fb      	ldrb	r3, [r7, #7]
 8011fe0:	2b03      	cmp	r3, #3
 8011fe2:	d817      	bhi.n	8012014 <USBD_Get_USB_Status+0x44>
 8011fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8011fec <USBD_Get_USB_Status+0x1c>)
 8011fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fea:	bf00      	nop
 8011fec:	08011ffd 	.word	0x08011ffd
 8011ff0:	08012003 	.word	0x08012003
 8011ff4:	08012009 	.word	0x08012009
 8011ff8:	0801200f 	.word	0x0801200f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	73fb      	strb	r3, [r7, #15]
    break;
 8012000:	e00b      	b.n	801201a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012002:	2303      	movs	r3, #3
 8012004:	73fb      	strb	r3, [r7, #15]
    break;
 8012006:	e008      	b.n	801201a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012008:	2301      	movs	r3, #1
 801200a:	73fb      	strb	r3, [r7, #15]
    break;
 801200c:	e005      	b.n	801201a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801200e:	2303      	movs	r3, #3
 8012010:	73fb      	strb	r3, [r7, #15]
    break;
 8012012:	e002      	b.n	801201a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012014:	2303      	movs	r3, #3
 8012016:	73fb      	strb	r3, [r7, #15]
    break;
 8012018:	bf00      	nop
  }
  return usb_status;
 801201a:	7bfb      	ldrb	r3, [r7, #15]
}
 801201c:	4618      	mov	r0, r3
 801201e:	3714      	adds	r7, #20
 8012020:	46bd      	mov	sp, r7
 8012022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012026:	4770      	bx	lr

08012028 <__cvt>:
 8012028:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801202c:	ec57 6b10 	vmov	r6, r7, d0
 8012030:	2f00      	cmp	r7, #0
 8012032:	460c      	mov	r4, r1
 8012034:	4619      	mov	r1, r3
 8012036:	463b      	mov	r3, r7
 8012038:	bfbb      	ittet	lt
 801203a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801203e:	461f      	movlt	r7, r3
 8012040:	2300      	movge	r3, #0
 8012042:	232d      	movlt	r3, #45	@ 0x2d
 8012044:	700b      	strb	r3, [r1, #0]
 8012046:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012048:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801204c:	4691      	mov	r9, r2
 801204e:	f023 0820 	bic.w	r8, r3, #32
 8012052:	bfbc      	itt	lt
 8012054:	4632      	movlt	r2, r6
 8012056:	4616      	movlt	r6, r2
 8012058:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801205c:	d005      	beq.n	801206a <__cvt+0x42>
 801205e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8012062:	d100      	bne.n	8012066 <__cvt+0x3e>
 8012064:	3401      	adds	r4, #1
 8012066:	2102      	movs	r1, #2
 8012068:	e000      	b.n	801206c <__cvt+0x44>
 801206a:	2103      	movs	r1, #3
 801206c:	ab03      	add	r3, sp, #12
 801206e:	9301      	str	r3, [sp, #4]
 8012070:	ab02      	add	r3, sp, #8
 8012072:	9300      	str	r3, [sp, #0]
 8012074:	ec47 6b10 	vmov	d0, r6, r7
 8012078:	4653      	mov	r3, sl
 801207a:	4622      	mov	r2, r4
 801207c:	f000 fe64 	bl	8012d48 <_dtoa_r>
 8012080:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8012084:	4605      	mov	r5, r0
 8012086:	d119      	bne.n	80120bc <__cvt+0x94>
 8012088:	f019 0f01 	tst.w	r9, #1
 801208c:	d00e      	beq.n	80120ac <__cvt+0x84>
 801208e:	eb00 0904 	add.w	r9, r0, r4
 8012092:	2200      	movs	r2, #0
 8012094:	2300      	movs	r3, #0
 8012096:	4630      	mov	r0, r6
 8012098:	4639      	mov	r1, r7
 801209a:	f7ee fced 	bl	8000a78 <__aeabi_dcmpeq>
 801209e:	b108      	cbz	r0, 80120a4 <__cvt+0x7c>
 80120a0:	f8cd 900c 	str.w	r9, [sp, #12]
 80120a4:	2230      	movs	r2, #48	@ 0x30
 80120a6:	9b03      	ldr	r3, [sp, #12]
 80120a8:	454b      	cmp	r3, r9
 80120aa:	d31e      	bcc.n	80120ea <__cvt+0xc2>
 80120ac:	9b03      	ldr	r3, [sp, #12]
 80120ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80120b0:	1b5b      	subs	r3, r3, r5
 80120b2:	4628      	mov	r0, r5
 80120b4:	6013      	str	r3, [r2, #0]
 80120b6:	b004      	add	sp, #16
 80120b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80120c0:	eb00 0904 	add.w	r9, r0, r4
 80120c4:	d1e5      	bne.n	8012092 <__cvt+0x6a>
 80120c6:	7803      	ldrb	r3, [r0, #0]
 80120c8:	2b30      	cmp	r3, #48	@ 0x30
 80120ca:	d10a      	bne.n	80120e2 <__cvt+0xba>
 80120cc:	2200      	movs	r2, #0
 80120ce:	2300      	movs	r3, #0
 80120d0:	4630      	mov	r0, r6
 80120d2:	4639      	mov	r1, r7
 80120d4:	f7ee fcd0 	bl	8000a78 <__aeabi_dcmpeq>
 80120d8:	b918      	cbnz	r0, 80120e2 <__cvt+0xba>
 80120da:	f1c4 0401 	rsb	r4, r4, #1
 80120de:	f8ca 4000 	str.w	r4, [sl]
 80120e2:	f8da 3000 	ldr.w	r3, [sl]
 80120e6:	4499      	add	r9, r3
 80120e8:	e7d3      	b.n	8012092 <__cvt+0x6a>
 80120ea:	1c59      	adds	r1, r3, #1
 80120ec:	9103      	str	r1, [sp, #12]
 80120ee:	701a      	strb	r2, [r3, #0]
 80120f0:	e7d9      	b.n	80120a6 <__cvt+0x7e>

080120f2 <__exponent>:
 80120f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80120f4:	2900      	cmp	r1, #0
 80120f6:	bfba      	itte	lt
 80120f8:	4249      	neglt	r1, r1
 80120fa:	232d      	movlt	r3, #45	@ 0x2d
 80120fc:	232b      	movge	r3, #43	@ 0x2b
 80120fe:	2909      	cmp	r1, #9
 8012100:	7002      	strb	r2, [r0, #0]
 8012102:	7043      	strb	r3, [r0, #1]
 8012104:	dd29      	ble.n	801215a <__exponent+0x68>
 8012106:	f10d 0307 	add.w	r3, sp, #7
 801210a:	461d      	mov	r5, r3
 801210c:	270a      	movs	r7, #10
 801210e:	461a      	mov	r2, r3
 8012110:	fbb1 f6f7 	udiv	r6, r1, r7
 8012114:	fb07 1416 	mls	r4, r7, r6, r1
 8012118:	3430      	adds	r4, #48	@ 0x30
 801211a:	f802 4c01 	strb.w	r4, [r2, #-1]
 801211e:	460c      	mov	r4, r1
 8012120:	2c63      	cmp	r4, #99	@ 0x63
 8012122:	f103 33ff 	add.w	r3, r3, #4294967295
 8012126:	4631      	mov	r1, r6
 8012128:	dcf1      	bgt.n	801210e <__exponent+0x1c>
 801212a:	3130      	adds	r1, #48	@ 0x30
 801212c:	1e94      	subs	r4, r2, #2
 801212e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012132:	1c41      	adds	r1, r0, #1
 8012134:	4623      	mov	r3, r4
 8012136:	42ab      	cmp	r3, r5
 8012138:	d30a      	bcc.n	8012150 <__exponent+0x5e>
 801213a:	f10d 0309 	add.w	r3, sp, #9
 801213e:	1a9b      	subs	r3, r3, r2
 8012140:	42ac      	cmp	r4, r5
 8012142:	bf88      	it	hi
 8012144:	2300      	movhi	r3, #0
 8012146:	3302      	adds	r3, #2
 8012148:	4403      	add	r3, r0
 801214a:	1a18      	subs	r0, r3, r0
 801214c:	b003      	add	sp, #12
 801214e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012150:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012154:	f801 6f01 	strb.w	r6, [r1, #1]!
 8012158:	e7ed      	b.n	8012136 <__exponent+0x44>
 801215a:	2330      	movs	r3, #48	@ 0x30
 801215c:	3130      	adds	r1, #48	@ 0x30
 801215e:	7083      	strb	r3, [r0, #2]
 8012160:	70c1      	strb	r1, [r0, #3]
 8012162:	1d03      	adds	r3, r0, #4
 8012164:	e7f1      	b.n	801214a <__exponent+0x58>
	...

08012168 <_printf_float>:
 8012168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801216c:	b08d      	sub	sp, #52	@ 0x34
 801216e:	460c      	mov	r4, r1
 8012170:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8012174:	4616      	mov	r6, r2
 8012176:	461f      	mov	r7, r3
 8012178:	4605      	mov	r5, r0
 801217a:	f000 fcd5 	bl	8012b28 <_localeconv_r>
 801217e:	6803      	ldr	r3, [r0, #0]
 8012180:	9304      	str	r3, [sp, #16]
 8012182:	4618      	mov	r0, r3
 8012184:	f7ee f84c 	bl	8000220 <strlen>
 8012188:	2300      	movs	r3, #0
 801218a:	930a      	str	r3, [sp, #40]	@ 0x28
 801218c:	f8d8 3000 	ldr.w	r3, [r8]
 8012190:	9005      	str	r0, [sp, #20]
 8012192:	3307      	adds	r3, #7
 8012194:	f023 0307 	bic.w	r3, r3, #7
 8012198:	f103 0208 	add.w	r2, r3, #8
 801219c:	f894 a018 	ldrb.w	sl, [r4, #24]
 80121a0:	f8d4 b000 	ldr.w	fp, [r4]
 80121a4:	f8c8 2000 	str.w	r2, [r8]
 80121a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80121ac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80121b0:	9307      	str	r3, [sp, #28]
 80121b2:	f8cd 8018 	str.w	r8, [sp, #24]
 80121b6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80121ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80121be:	4b9c      	ldr	r3, [pc, #624]	@ (8012430 <_printf_float+0x2c8>)
 80121c0:	f04f 32ff 	mov.w	r2, #4294967295
 80121c4:	f7ee fc8a 	bl	8000adc <__aeabi_dcmpun>
 80121c8:	bb70      	cbnz	r0, 8012228 <_printf_float+0xc0>
 80121ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80121ce:	4b98      	ldr	r3, [pc, #608]	@ (8012430 <_printf_float+0x2c8>)
 80121d0:	f04f 32ff 	mov.w	r2, #4294967295
 80121d4:	f7ee fc64 	bl	8000aa0 <__aeabi_dcmple>
 80121d8:	bb30      	cbnz	r0, 8012228 <_printf_float+0xc0>
 80121da:	2200      	movs	r2, #0
 80121dc:	2300      	movs	r3, #0
 80121de:	4640      	mov	r0, r8
 80121e0:	4649      	mov	r1, r9
 80121e2:	f7ee fc53 	bl	8000a8c <__aeabi_dcmplt>
 80121e6:	b110      	cbz	r0, 80121ee <_printf_float+0x86>
 80121e8:	232d      	movs	r3, #45	@ 0x2d
 80121ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80121ee:	4a91      	ldr	r2, [pc, #580]	@ (8012434 <_printf_float+0x2cc>)
 80121f0:	4b91      	ldr	r3, [pc, #580]	@ (8012438 <_printf_float+0x2d0>)
 80121f2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80121f6:	bf94      	ite	ls
 80121f8:	4690      	movls	r8, r2
 80121fa:	4698      	movhi	r8, r3
 80121fc:	2303      	movs	r3, #3
 80121fe:	6123      	str	r3, [r4, #16]
 8012200:	f02b 0304 	bic.w	r3, fp, #4
 8012204:	6023      	str	r3, [r4, #0]
 8012206:	f04f 0900 	mov.w	r9, #0
 801220a:	9700      	str	r7, [sp, #0]
 801220c:	4633      	mov	r3, r6
 801220e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012210:	4621      	mov	r1, r4
 8012212:	4628      	mov	r0, r5
 8012214:	f000 f9d2 	bl	80125bc <_printf_common>
 8012218:	3001      	adds	r0, #1
 801221a:	f040 808d 	bne.w	8012338 <_printf_float+0x1d0>
 801221e:	f04f 30ff 	mov.w	r0, #4294967295
 8012222:	b00d      	add	sp, #52	@ 0x34
 8012224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012228:	4642      	mov	r2, r8
 801222a:	464b      	mov	r3, r9
 801222c:	4640      	mov	r0, r8
 801222e:	4649      	mov	r1, r9
 8012230:	f7ee fc54 	bl	8000adc <__aeabi_dcmpun>
 8012234:	b140      	cbz	r0, 8012248 <_printf_float+0xe0>
 8012236:	464b      	mov	r3, r9
 8012238:	2b00      	cmp	r3, #0
 801223a:	bfbc      	itt	lt
 801223c:	232d      	movlt	r3, #45	@ 0x2d
 801223e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8012242:	4a7e      	ldr	r2, [pc, #504]	@ (801243c <_printf_float+0x2d4>)
 8012244:	4b7e      	ldr	r3, [pc, #504]	@ (8012440 <_printf_float+0x2d8>)
 8012246:	e7d4      	b.n	80121f2 <_printf_float+0x8a>
 8012248:	6863      	ldr	r3, [r4, #4]
 801224a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801224e:	9206      	str	r2, [sp, #24]
 8012250:	1c5a      	adds	r2, r3, #1
 8012252:	d13b      	bne.n	80122cc <_printf_float+0x164>
 8012254:	2306      	movs	r3, #6
 8012256:	6063      	str	r3, [r4, #4]
 8012258:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801225c:	2300      	movs	r3, #0
 801225e:	6022      	str	r2, [r4, #0]
 8012260:	9303      	str	r3, [sp, #12]
 8012262:	ab0a      	add	r3, sp, #40	@ 0x28
 8012264:	e9cd a301 	strd	sl, r3, [sp, #4]
 8012268:	ab09      	add	r3, sp, #36	@ 0x24
 801226a:	9300      	str	r3, [sp, #0]
 801226c:	6861      	ldr	r1, [r4, #4]
 801226e:	ec49 8b10 	vmov	d0, r8, r9
 8012272:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8012276:	4628      	mov	r0, r5
 8012278:	f7ff fed6 	bl	8012028 <__cvt>
 801227c:	9b06      	ldr	r3, [sp, #24]
 801227e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012280:	2b47      	cmp	r3, #71	@ 0x47
 8012282:	4680      	mov	r8, r0
 8012284:	d129      	bne.n	80122da <_printf_float+0x172>
 8012286:	1cc8      	adds	r0, r1, #3
 8012288:	db02      	blt.n	8012290 <_printf_float+0x128>
 801228a:	6863      	ldr	r3, [r4, #4]
 801228c:	4299      	cmp	r1, r3
 801228e:	dd41      	ble.n	8012314 <_printf_float+0x1ac>
 8012290:	f1aa 0a02 	sub.w	sl, sl, #2
 8012294:	fa5f fa8a 	uxtb.w	sl, sl
 8012298:	3901      	subs	r1, #1
 801229a:	4652      	mov	r2, sl
 801229c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80122a0:	9109      	str	r1, [sp, #36]	@ 0x24
 80122a2:	f7ff ff26 	bl	80120f2 <__exponent>
 80122a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80122a8:	1813      	adds	r3, r2, r0
 80122aa:	2a01      	cmp	r2, #1
 80122ac:	4681      	mov	r9, r0
 80122ae:	6123      	str	r3, [r4, #16]
 80122b0:	dc02      	bgt.n	80122b8 <_printf_float+0x150>
 80122b2:	6822      	ldr	r2, [r4, #0]
 80122b4:	07d2      	lsls	r2, r2, #31
 80122b6:	d501      	bpl.n	80122bc <_printf_float+0x154>
 80122b8:	3301      	adds	r3, #1
 80122ba:	6123      	str	r3, [r4, #16]
 80122bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d0a2      	beq.n	801220a <_printf_float+0xa2>
 80122c4:	232d      	movs	r3, #45	@ 0x2d
 80122c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80122ca:	e79e      	b.n	801220a <_printf_float+0xa2>
 80122cc:	9a06      	ldr	r2, [sp, #24]
 80122ce:	2a47      	cmp	r2, #71	@ 0x47
 80122d0:	d1c2      	bne.n	8012258 <_printf_float+0xf0>
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d1c0      	bne.n	8012258 <_printf_float+0xf0>
 80122d6:	2301      	movs	r3, #1
 80122d8:	e7bd      	b.n	8012256 <_printf_float+0xee>
 80122da:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80122de:	d9db      	bls.n	8012298 <_printf_float+0x130>
 80122e0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80122e4:	d118      	bne.n	8012318 <_printf_float+0x1b0>
 80122e6:	2900      	cmp	r1, #0
 80122e8:	6863      	ldr	r3, [r4, #4]
 80122ea:	dd0b      	ble.n	8012304 <_printf_float+0x19c>
 80122ec:	6121      	str	r1, [r4, #16]
 80122ee:	b913      	cbnz	r3, 80122f6 <_printf_float+0x18e>
 80122f0:	6822      	ldr	r2, [r4, #0]
 80122f2:	07d0      	lsls	r0, r2, #31
 80122f4:	d502      	bpl.n	80122fc <_printf_float+0x194>
 80122f6:	3301      	adds	r3, #1
 80122f8:	440b      	add	r3, r1
 80122fa:	6123      	str	r3, [r4, #16]
 80122fc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80122fe:	f04f 0900 	mov.w	r9, #0
 8012302:	e7db      	b.n	80122bc <_printf_float+0x154>
 8012304:	b913      	cbnz	r3, 801230c <_printf_float+0x1a4>
 8012306:	6822      	ldr	r2, [r4, #0]
 8012308:	07d2      	lsls	r2, r2, #31
 801230a:	d501      	bpl.n	8012310 <_printf_float+0x1a8>
 801230c:	3302      	adds	r3, #2
 801230e:	e7f4      	b.n	80122fa <_printf_float+0x192>
 8012310:	2301      	movs	r3, #1
 8012312:	e7f2      	b.n	80122fa <_printf_float+0x192>
 8012314:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8012318:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801231a:	4299      	cmp	r1, r3
 801231c:	db05      	blt.n	801232a <_printf_float+0x1c2>
 801231e:	6823      	ldr	r3, [r4, #0]
 8012320:	6121      	str	r1, [r4, #16]
 8012322:	07d8      	lsls	r0, r3, #31
 8012324:	d5ea      	bpl.n	80122fc <_printf_float+0x194>
 8012326:	1c4b      	adds	r3, r1, #1
 8012328:	e7e7      	b.n	80122fa <_printf_float+0x192>
 801232a:	2900      	cmp	r1, #0
 801232c:	bfd4      	ite	le
 801232e:	f1c1 0202 	rsble	r2, r1, #2
 8012332:	2201      	movgt	r2, #1
 8012334:	4413      	add	r3, r2
 8012336:	e7e0      	b.n	80122fa <_printf_float+0x192>
 8012338:	6823      	ldr	r3, [r4, #0]
 801233a:	055a      	lsls	r2, r3, #21
 801233c:	d407      	bmi.n	801234e <_printf_float+0x1e6>
 801233e:	6923      	ldr	r3, [r4, #16]
 8012340:	4642      	mov	r2, r8
 8012342:	4631      	mov	r1, r6
 8012344:	4628      	mov	r0, r5
 8012346:	47b8      	blx	r7
 8012348:	3001      	adds	r0, #1
 801234a:	d12b      	bne.n	80123a4 <_printf_float+0x23c>
 801234c:	e767      	b.n	801221e <_printf_float+0xb6>
 801234e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012352:	f240 80dd 	bls.w	8012510 <_printf_float+0x3a8>
 8012356:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801235a:	2200      	movs	r2, #0
 801235c:	2300      	movs	r3, #0
 801235e:	f7ee fb8b 	bl	8000a78 <__aeabi_dcmpeq>
 8012362:	2800      	cmp	r0, #0
 8012364:	d033      	beq.n	80123ce <_printf_float+0x266>
 8012366:	4a37      	ldr	r2, [pc, #220]	@ (8012444 <_printf_float+0x2dc>)
 8012368:	2301      	movs	r3, #1
 801236a:	4631      	mov	r1, r6
 801236c:	4628      	mov	r0, r5
 801236e:	47b8      	blx	r7
 8012370:	3001      	adds	r0, #1
 8012372:	f43f af54 	beq.w	801221e <_printf_float+0xb6>
 8012376:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801237a:	4543      	cmp	r3, r8
 801237c:	db02      	blt.n	8012384 <_printf_float+0x21c>
 801237e:	6823      	ldr	r3, [r4, #0]
 8012380:	07d8      	lsls	r0, r3, #31
 8012382:	d50f      	bpl.n	80123a4 <_printf_float+0x23c>
 8012384:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012388:	4631      	mov	r1, r6
 801238a:	4628      	mov	r0, r5
 801238c:	47b8      	blx	r7
 801238e:	3001      	adds	r0, #1
 8012390:	f43f af45 	beq.w	801221e <_printf_float+0xb6>
 8012394:	f04f 0900 	mov.w	r9, #0
 8012398:	f108 38ff 	add.w	r8, r8, #4294967295
 801239c:	f104 0a1a 	add.w	sl, r4, #26
 80123a0:	45c8      	cmp	r8, r9
 80123a2:	dc09      	bgt.n	80123b8 <_printf_float+0x250>
 80123a4:	6823      	ldr	r3, [r4, #0]
 80123a6:	079b      	lsls	r3, r3, #30
 80123a8:	f100 8103 	bmi.w	80125b2 <_printf_float+0x44a>
 80123ac:	68e0      	ldr	r0, [r4, #12]
 80123ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80123b0:	4298      	cmp	r0, r3
 80123b2:	bfb8      	it	lt
 80123b4:	4618      	movlt	r0, r3
 80123b6:	e734      	b.n	8012222 <_printf_float+0xba>
 80123b8:	2301      	movs	r3, #1
 80123ba:	4652      	mov	r2, sl
 80123bc:	4631      	mov	r1, r6
 80123be:	4628      	mov	r0, r5
 80123c0:	47b8      	blx	r7
 80123c2:	3001      	adds	r0, #1
 80123c4:	f43f af2b 	beq.w	801221e <_printf_float+0xb6>
 80123c8:	f109 0901 	add.w	r9, r9, #1
 80123cc:	e7e8      	b.n	80123a0 <_printf_float+0x238>
 80123ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	dc39      	bgt.n	8012448 <_printf_float+0x2e0>
 80123d4:	4a1b      	ldr	r2, [pc, #108]	@ (8012444 <_printf_float+0x2dc>)
 80123d6:	2301      	movs	r3, #1
 80123d8:	4631      	mov	r1, r6
 80123da:	4628      	mov	r0, r5
 80123dc:	47b8      	blx	r7
 80123de:	3001      	adds	r0, #1
 80123e0:	f43f af1d 	beq.w	801221e <_printf_float+0xb6>
 80123e4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80123e8:	ea59 0303 	orrs.w	r3, r9, r3
 80123ec:	d102      	bne.n	80123f4 <_printf_float+0x28c>
 80123ee:	6823      	ldr	r3, [r4, #0]
 80123f0:	07d9      	lsls	r1, r3, #31
 80123f2:	d5d7      	bpl.n	80123a4 <_printf_float+0x23c>
 80123f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80123f8:	4631      	mov	r1, r6
 80123fa:	4628      	mov	r0, r5
 80123fc:	47b8      	blx	r7
 80123fe:	3001      	adds	r0, #1
 8012400:	f43f af0d 	beq.w	801221e <_printf_float+0xb6>
 8012404:	f04f 0a00 	mov.w	sl, #0
 8012408:	f104 0b1a 	add.w	fp, r4, #26
 801240c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801240e:	425b      	negs	r3, r3
 8012410:	4553      	cmp	r3, sl
 8012412:	dc01      	bgt.n	8012418 <_printf_float+0x2b0>
 8012414:	464b      	mov	r3, r9
 8012416:	e793      	b.n	8012340 <_printf_float+0x1d8>
 8012418:	2301      	movs	r3, #1
 801241a:	465a      	mov	r2, fp
 801241c:	4631      	mov	r1, r6
 801241e:	4628      	mov	r0, r5
 8012420:	47b8      	blx	r7
 8012422:	3001      	adds	r0, #1
 8012424:	f43f aefb 	beq.w	801221e <_printf_float+0xb6>
 8012428:	f10a 0a01 	add.w	sl, sl, #1
 801242c:	e7ee      	b.n	801240c <_printf_float+0x2a4>
 801242e:	bf00      	nop
 8012430:	7fefffff 	.word	0x7fefffff
 8012434:	08014b6c 	.word	0x08014b6c
 8012438:	08014b70 	.word	0x08014b70
 801243c:	08014b74 	.word	0x08014b74
 8012440:	08014b78 	.word	0x08014b78
 8012444:	08014b7c 	.word	0x08014b7c
 8012448:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801244a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801244e:	4553      	cmp	r3, sl
 8012450:	bfa8      	it	ge
 8012452:	4653      	movge	r3, sl
 8012454:	2b00      	cmp	r3, #0
 8012456:	4699      	mov	r9, r3
 8012458:	dc36      	bgt.n	80124c8 <_printf_float+0x360>
 801245a:	f04f 0b00 	mov.w	fp, #0
 801245e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012462:	f104 021a 	add.w	r2, r4, #26
 8012466:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012468:	9306      	str	r3, [sp, #24]
 801246a:	eba3 0309 	sub.w	r3, r3, r9
 801246e:	455b      	cmp	r3, fp
 8012470:	dc31      	bgt.n	80124d6 <_printf_float+0x36e>
 8012472:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012474:	459a      	cmp	sl, r3
 8012476:	dc3a      	bgt.n	80124ee <_printf_float+0x386>
 8012478:	6823      	ldr	r3, [r4, #0]
 801247a:	07da      	lsls	r2, r3, #31
 801247c:	d437      	bmi.n	80124ee <_printf_float+0x386>
 801247e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012480:	ebaa 0903 	sub.w	r9, sl, r3
 8012484:	9b06      	ldr	r3, [sp, #24]
 8012486:	ebaa 0303 	sub.w	r3, sl, r3
 801248a:	4599      	cmp	r9, r3
 801248c:	bfa8      	it	ge
 801248e:	4699      	movge	r9, r3
 8012490:	f1b9 0f00 	cmp.w	r9, #0
 8012494:	dc33      	bgt.n	80124fe <_printf_float+0x396>
 8012496:	f04f 0800 	mov.w	r8, #0
 801249a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801249e:	f104 0b1a 	add.w	fp, r4, #26
 80124a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80124a4:	ebaa 0303 	sub.w	r3, sl, r3
 80124a8:	eba3 0309 	sub.w	r3, r3, r9
 80124ac:	4543      	cmp	r3, r8
 80124ae:	f77f af79 	ble.w	80123a4 <_printf_float+0x23c>
 80124b2:	2301      	movs	r3, #1
 80124b4:	465a      	mov	r2, fp
 80124b6:	4631      	mov	r1, r6
 80124b8:	4628      	mov	r0, r5
 80124ba:	47b8      	blx	r7
 80124bc:	3001      	adds	r0, #1
 80124be:	f43f aeae 	beq.w	801221e <_printf_float+0xb6>
 80124c2:	f108 0801 	add.w	r8, r8, #1
 80124c6:	e7ec      	b.n	80124a2 <_printf_float+0x33a>
 80124c8:	4642      	mov	r2, r8
 80124ca:	4631      	mov	r1, r6
 80124cc:	4628      	mov	r0, r5
 80124ce:	47b8      	blx	r7
 80124d0:	3001      	adds	r0, #1
 80124d2:	d1c2      	bne.n	801245a <_printf_float+0x2f2>
 80124d4:	e6a3      	b.n	801221e <_printf_float+0xb6>
 80124d6:	2301      	movs	r3, #1
 80124d8:	4631      	mov	r1, r6
 80124da:	4628      	mov	r0, r5
 80124dc:	9206      	str	r2, [sp, #24]
 80124de:	47b8      	blx	r7
 80124e0:	3001      	adds	r0, #1
 80124e2:	f43f ae9c 	beq.w	801221e <_printf_float+0xb6>
 80124e6:	9a06      	ldr	r2, [sp, #24]
 80124e8:	f10b 0b01 	add.w	fp, fp, #1
 80124ec:	e7bb      	b.n	8012466 <_printf_float+0x2fe>
 80124ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80124f2:	4631      	mov	r1, r6
 80124f4:	4628      	mov	r0, r5
 80124f6:	47b8      	blx	r7
 80124f8:	3001      	adds	r0, #1
 80124fa:	d1c0      	bne.n	801247e <_printf_float+0x316>
 80124fc:	e68f      	b.n	801221e <_printf_float+0xb6>
 80124fe:	9a06      	ldr	r2, [sp, #24]
 8012500:	464b      	mov	r3, r9
 8012502:	4442      	add	r2, r8
 8012504:	4631      	mov	r1, r6
 8012506:	4628      	mov	r0, r5
 8012508:	47b8      	blx	r7
 801250a:	3001      	adds	r0, #1
 801250c:	d1c3      	bne.n	8012496 <_printf_float+0x32e>
 801250e:	e686      	b.n	801221e <_printf_float+0xb6>
 8012510:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012514:	f1ba 0f01 	cmp.w	sl, #1
 8012518:	dc01      	bgt.n	801251e <_printf_float+0x3b6>
 801251a:	07db      	lsls	r3, r3, #31
 801251c:	d536      	bpl.n	801258c <_printf_float+0x424>
 801251e:	2301      	movs	r3, #1
 8012520:	4642      	mov	r2, r8
 8012522:	4631      	mov	r1, r6
 8012524:	4628      	mov	r0, r5
 8012526:	47b8      	blx	r7
 8012528:	3001      	adds	r0, #1
 801252a:	f43f ae78 	beq.w	801221e <_printf_float+0xb6>
 801252e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012532:	4631      	mov	r1, r6
 8012534:	4628      	mov	r0, r5
 8012536:	47b8      	blx	r7
 8012538:	3001      	adds	r0, #1
 801253a:	f43f ae70 	beq.w	801221e <_printf_float+0xb6>
 801253e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012542:	2200      	movs	r2, #0
 8012544:	2300      	movs	r3, #0
 8012546:	f10a 3aff 	add.w	sl, sl, #4294967295
 801254a:	f7ee fa95 	bl	8000a78 <__aeabi_dcmpeq>
 801254e:	b9c0      	cbnz	r0, 8012582 <_printf_float+0x41a>
 8012550:	4653      	mov	r3, sl
 8012552:	f108 0201 	add.w	r2, r8, #1
 8012556:	4631      	mov	r1, r6
 8012558:	4628      	mov	r0, r5
 801255a:	47b8      	blx	r7
 801255c:	3001      	adds	r0, #1
 801255e:	d10c      	bne.n	801257a <_printf_float+0x412>
 8012560:	e65d      	b.n	801221e <_printf_float+0xb6>
 8012562:	2301      	movs	r3, #1
 8012564:	465a      	mov	r2, fp
 8012566:	4631      	mov	r1, r6
 8012568:	4628      	mov	r0, r5
 801256a:	47b8      	blx	r7
 801256c:	3001      	adds	r0, #1
 801256e:	f43f ae56 	beq.w	801221e <_printf_float+0xb6>
 8012572:	f108 0801 	add.w	r8, r8, #1
 8012576:	45d0      	cmp	r8, sl
 8012578:	dbf3      	blt.n	8012562 <_printf_float+0x3fa>
 801257a:	464b      	mov	r3, r9
 801257c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012580:	e6df      	b.n	8012342 <_printf_float+0x1da>
 8012582:	f04f 0800 	mov.w	r8, #0
 8012586:	f104 0b1a 	add.w	fp, r4, #26
 801258a:	e7f4      	b.n	8012576 <_printf_float+0x40e>
 801258c:	2301      	movs	r3, #1
 801258e:	4642      	mov	r2, r8
 8012590:	e7e1      	b.n	8012556 <_printf_float+0x3ee>
 8012592:	2301      	movs	r3, #1
 8012594:	464a      	mov	r2, r9
 8012596:	4631      	mov	r1, r6
 8012598:	4628      	mov	r0, r5
 801259a:	47b8      	blx	r7
 801259c:	3001      	adds	r0, #1
 801259e:	f43f ae3e 	beq.w	801221e <_printf_float+0xb6>
 80125a2:	f108 0801 	add.w	r8, r8, #1
 80125a6:	68e3      	ldr	r3, [r4, #12]
 80125a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80125aa:	1a5b      	subs	r3, r3, r1
 80125ac:	4543      	cmp	r3, r8
 80125ae:	dcf0      	bgt.n	8012592 <_printf_float+0x42a>
 80125b0:	e6fc      	b.n	80123ac <_printf_float+0x244>
 80125b2:	f04f 0800 	mov.w	r8, #0
 80125b6:	f104 0919 	add.w	r9, r4, #25
 80125ba:	e7f4      	b.n	80125a6 <_printf_float+0x43e>

080125bc <_printf_common>:
 80125bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80125c0:	4616      	mov	r6, r2
 80125c2:	4698      	mov	r8, r3
 80125c4:	688a      	ldr	r2, [r1, #8]
 80125c6:	690b      	ldr	r3, [r1, #16]
 80125c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80125cc:	4293      	cmp	r3, r2
 80125ce:	bfb8      	it	lt
 80125d0:	4613      	movlt	r3, r2
 80125d2:	6033      	str	r3, [r6, #0]
 80125d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80125d8:	4607      	mov	r7, r0
 80125da:	460c      	mov	r4, r1
 80125dc:	b10a      	cbz	r2, 80125e2 <_printf_common+0x26>
 80125de:	3301      	adds	r3, #1
 80125e0:	6033      	str	r3, [r6, #0]
 80125e2:	6823      	ldr	r3, [r4, #0]
 80125e4:	0699      	lsls	r1, r3, #26
 80125e6:	bf42      	ittt	mi
 80125e8:	6833      	ldrmi	r3, [r6, #0]
 80125ea:	3302      	addmi	r3, #2
 80125ec:	6033      	strmi	r3, [r6, #0]
 80125ee:	6825      	ldr	r5, [r4, #0]
 80125f0:	f015 0506 	ands.w	r5, r5, #6
 80125f4:	d106      	bne.n	8012604 <_printf_common+0x48>
 80125f6:	f104 0a19 	add.w	sl, r4, #25
 80125fa:	68e3      	ldr	r3, [r4, #12]
 80125fc:	6832      	ldr	r2, [r6, #0]
 80125fe:	1a9b      	subs	r3, r3, r2
 8012600:	42ab      	cmp	r3, r5
 8012602:	dc26      	bgt.n	8012652 <_printf_common+0x96>
 8012604:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012608:	6822      	ldr	r2, [r4, #0]
 801260a:	3b00      	subs	r3, #0
 801260c:	bf18      	it	ne
 801260e:	2301      	movne	r3, #1
 8012610:	0692      	lsls	r2, r2, #26
 8012612:	d42b      	bmi.n	801266c <_printf_common+0xb0>
 8012614:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012618:	4641      	mov	r1, r8
 801261a:	4638      	mov	r0, r7
 801261c:	47c8      	blx	r9
 801261e:	3001      	adds	r0, #1
 8012620:	d01e      	beq.n	8012660 <_printf_common+0xa4>
 8012622:	6823      	ldr	r3, [r4, #0]
 8012624:	6922      	ldr	r2, [r4, #16]
 8012626:	f003 0306 	and.w	r3, r3, #6
 801262a:	2b04      	cmp	r3, #4
 801262c:	bf02      	ittt	eq
 801262e:	68e5      	ldreq	r5, [r4, #12]
 8012630:	6833      	ldreq	r3, [r6, #0]
 8012632:	1aed      	subeq	r5, r5, r3
 8012634:	68a3      	ldr	r3, [r4, #8]
 8012636:	bf0c      	ite	eq
 8012638:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801263c:	2500      	movne	r5, #0
 801263e:	4293      	cmp	r3, r2
 8012640:	bfc4      	itt	gt
 8012642:	1a9b      	subgt	r3, r3, r2
 8012644:	18ed      	addgt	r5, r5, r3
 8012646:	2600      	movs	r6, #0
 8012648:	341a      	adds	r4, #26
 801264a:	42b5      	cmp	r5, r6
 801264c:	d11a      	bne.n	8012684 <_printf_common+0xc8>
 801264e:	2000      	movs	r0, #0
 8012650:	e008      	b.n	8012664 <_printf_common+0xa8>
 8012652:	2301      	movs	r3, #1
 8012654:	4652      	mov	r2, sl
 8012656:	4641      	mov	r1, r8
 8012658:	4638      	mov	r0, r7
 801265a:	47c8      	blx	r9
 801265c:	3001      	adds	r0, #1
 801265e:	d103      	bne.n	8012668 <_printf_common+0xac>
 8012660:	f04f 30ff 	mov.w	r0, #4294967295
 8012664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012668:	3501      	adds	r5, #1
 801266a:	e7c6      	b.n	80125fa <_printf_common+0x3e>
 801266c:	18e1      	adds	r1, r4, r3
 801266e:	1c5a      	adds	r2, r3, #1
 8012670:	2030      	movs	r0, #48	@ 0x30
 8012672:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012676:	4422      	add	r2, r4
 8012678:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801267c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012680:	3302      	adds	r3, #2
 8012682:	e7c7      	b.n	8012614 <_printf_common+0x58>
 8012684:	2301      	movs	r3, #1
 8012686:	4622      	mov	r2, r4
 8012688:	4641      	mov	r1, r8
 801268a:	4638      	mov	r0, r7
 801268c:	47c8      	blx	r9
 801268e:	3001      	adds	r0, #1
 8012690:	d0e6      	beq.n	8012660 <_printf_common+0xa4>
 8012692:	3601      	adds	r6, #1
 8012694:	e7d9      	b.n	801264a <_printf_common+0x8e>
	...

08012698 <_printf_i>:
 8012698:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801269c:	7e0f      	ldrb	r7, [r1, #24]
 801269e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80126a0:	2f78      	cmp	r7, #120	@ 0x78
 80126a2:	4691      	mov	r9, r2
 80126a4:	4680      	mov	r8, r0
 80126a6:	460c      	mov	r4, r1
 80126a8:	469a      	mov	sl, r3
 80126aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80126ae:	d807      	bhi.n	80126c0 <_printf_i+0x28>
 80126b0:	2f62      	cmp	r7, #98	@ 0x62
 80126b2:	d80a      	bhi.n	80126ca <_printf_i+0x32>
 80126b4:	2f00      	cmp	r7, #0
 80126b6:	f000 80d2 	beq.w	801285e <_printf_i+0x1c6>
 80126ba:	2f58      	cmp	r7, #88	@ 0x58
 80126bc:	f000 80b9 	beq.w	8012832 <_printf_i+0x19a>
 80126c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80126c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80126c8:	e03a      	b.n	8012740 <_printf_i+0xa8>
 80126ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80126ce:	2b15      	cmp	r3, #21
 80126d0:	d8f6      	bhi.n	80126c0 <_printf_i+0x28>
 80126d2:	a101      	add	r1, pc, #4	@ (adr r1, 80126d8 <_printf_i+0x40>)
 80126d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80126d8:	08012731 	.word	0x08012731
 80126dc:	08012745 	.word	0x08012745
 80126e0:	080126c1 	.word	0x080126c1
 80126e4:	080126c1 	.word	0x080126c1
 80126e8:	080126c1 	.word	0x080126c1
 80126ec:	080126c1 	.word	0x080126c1
 80126f0:	08012745 	.word	0x08012745
 80126f4:	080126c1 	.word	0x080126c1
 80126f8:	080126c1 	.word	0x080126c1
 80126fc:	080126c1 	.word	0x080126c1
 8012700:	080126c1 	.word	0x080126c1
 8012704:	08012845 	.word	0x08012845
 8012708:	0801276f 	.word	0x0801276f
 801270c:	080127ff 	.word	0x080127ff
 8012710:	080126c1 	.word	0x080126c1
 8012714:	080126c1 	.word	0x080126c1
 8012718:	08012867 	.word	0x08012867
 801271c:	080126c1 	.word	0x080126c1
 8012720:	0801276f 	.word	0x0801276f
 8012724:	080126c1 	.word	0x080126c1
 8012728:	080126c1 	.word	0x080126c1
 801272c:	08012807 	.word	0x08012807
 8012730:	6833      	ldr	r3, [r6, #0]
 8012732:	1d1a      	adds	r2, r3, #4
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	6032      	str	r2, [r6, #0]
 8012738:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801273c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012740:	2301      	movs	r3, #1
 8012742:	e09d      	b.n	8012880 <_printf_i+0x1e8>
 8012744:	6833      	ldr	r3, [r6, #0]
 8012746:	6820      	ldr	r0, [r4, #0]
 8012748:	1d19      	adds	r1, r3, #4
 801274a:	6031      	str	r1, [r6, #0]
 801274c:	0606      	lsls	r6, r0, #24
 801274e:	d501      	bpl.n	8012754 <_printf_i+0xbc>
 8012750:	681d      	ldr	r5, [r3, #0]
 8012752:	e003      	b.n	801275c <_printf_i+0xc4>
 8012754:	0645      	lsls	r5, r0, #25
 8012756:	d5fb      	bpl.n	8012750 <_printf_i+0xb8>
 8012758:	f9b3 5000 	ldrsh.w	r5, [r3]
 801275c:	2d00      	cmp	r5, #0
 801275e:	da03      	bge.n	8012768 <_printf_i+0xd0>
 8012760:	232d      	movs	r3, #45	@ 0x2d
 8012762:	426d      	negs	r5, r5
 8012764:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012768:	4859      	ldr	r0, [pc, #356]	@ (80128d0 <_printf_i+0x238>)
 801276a:	230a      	movs	r3, #10
 801276c:	e011      	b.n	8012792 <_printf_i+0xfa>
 801276e:	6821      	ldr	r1, [r4, #0]
 8012770:	6833      	ldr	r3, [r6, #0]
 8012772:	0608      	lsls	r0, r1, #24
 8012774:	f853 5b04 	ldr.w	r5, [r3], #4
 8012778:	d402      	bmi.n	8012780 <_printf_i+0xe8>
 801277a:	0649      	lsls	r1, r1, #25
 801277c:	bf48      	it	mi
 801277e:	b2ad      	uxthmi	r5, r5
 8012780:	2f6f      	cmp	r7, #111	@ 0x6f
 8012782:	4853      	ldr	r0, [pc, #332]	@ (80128d0 <_printf_i+0x238>)
 8012784:	6033      	str	r3, [r6, #0]
 8012786:	bf14      	ite	ne
 8012788:	230a      	movne	r3, #10
 801278a:	2308      	moveq	r3, #8
 801278c:	2100      	movs	r1, #0
 801278e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012792:	6866      	ldr	r6, [r4, #4]
 8012794:	60a6      	str	r6, [r4, #8]
 8012796:	2e00      	cmp	r6, #0
 8012798:	bfa2      	ittt	ge
 801279a:	6821      	ldrge	r1, [r4, #0]
 801279c:	f021 0104 	bicge.w	r1, r1, #4
 80127a0:	6021      	strge	r1, [r4, #0]
 80127a2:	b90d      	cbnz	r5, 80127a8 <_printf_i+0x110>
 80127a4:	2e00      	cmp	r6, #0
 80127a6:	d04b      	beq.n	8012840 <_printf_i+0x1a8>
 80127a8:	4616      	mov	r6, r2
 80127aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80127ae:	fb03 5711 	mls	r7, r3, r1, r5
 80127b2:	5dc7      	ldrb	r7, [r0, r7]
 80127b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80127b8:	462f      	mov	r7, r5
 80127ba:	42bb      	cmp	r3, r7
 80127bc:	460d      	mov	r5, r1
 80127be:	d9f4      	bls.n	80127aa <_printf_i+0x112>
 80127c0:	2b08      	cmp	r3, #8
 80127c2:	d10b      	bne.n	80127dc <_printf_i+0x144>
 80127c4:	6823      	ldr	r3, [r4, #0]
 80127c6:	07df      	lsls	r7, r3, #31
 80127c8:	d508      	bpl.n	80127dc <_printf_i+0x144>
 80127ca:	6923      	ldr	r3, [r4, #16]
 80127cc:	6861      	ldr	r1, [r4, #4]
 80127ce:	4299      	cmp	r1, r3
 80127d0:	bfde      	ittt	le
 80127d2:	2330      	movle	r3, #48	@ 0x30
 80127d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80127d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80127dc:	1b92      	subs	r2, r2, r6
 80127de:	6122      	str	r2, [r4, #16]
 80127e0:	f8cd a000 	str.w	sl, [sp]
 80127e4:	464b      	mov	r3, r9
 80127e6:	aa03      	add	r2, sp, #12
 80127e8:	4621      	mov	r1, r4
 80127ea:	4640      	mov	r0, r8
 80127ec:	f7ff fee6 	bl	80125bc <_printf_common>
 80127f0:	3001      	adds	r0, #1
 80127f2:	d14a      	bne.n	801288a <_printf_i+0x1f2>
 80127f4:	f04f 30ff 	mov.w	r0, #4294967295
 80127f8:	b004      	add	sp, #16
 80127fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127fe:	6823      	ldr	r3, [r4, #0]
 8012800:	f043 0320 	orr.w	r3, r3, #32
 8012804:	6023      	str	r3, [r4, #0]
 8012806:	4833      	ldr	r0, [pc, #204]	@ (80128d4 <_printf_i+0x23c>)
 8012808:	2778      	movs	r7, #120	@ 0x78
 801280a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801280e:	6823      	ldr	r3, [r4, #0]
 8012810:	6831      	ldr	r1, [r6, #0]
 8012812:	061f      	lsls	r7, r3, #24
 8012814:	f851 5b04 	ldr.w	r5, [r1], #4
 8012818:	d402      	bmi.n	8012820 <_printf_i+0x188>
 801281a:	065f      	lsls	r7, r3, #25
 801281c:	bf48      	it	mi
 801281e:	b2ad      	uxthmi	r5, r5
 8012820:	6031      	str	r1, [r6, #0]
 8012822:	07d9      	lsls	r1, r3, #31
 8012824:	bf44      	itt	mi
 8012826:	f043 0320 	orrmi.w	r3, r3, #32
 801282a:	6023      	strmi	r3, [r4, #0]
 801282c:	b11d      	cbz	r5, 8012836 <_printf_i+0x19e>
 801282e:	2310      	movs	r3, #16
 8012830:	e7ac      	b.n	801278c <_printf_i+0xf4>
 8012832:	4827      	ldr	r0, [pc, #156]	@ (80128d0 <_printf_i+0x238>)
 8012834:	e7e9      	b.n	801280a <_printf_i+0x172>
 8012836:	6823      	ldr	r3, [r4, #0]
 8012838:	f023 0320 	bic.w	r3, r3, #32
 801283c:	6023      	str	r3, [r4, #0]
 801283e:	e7f6      	b.n	801282e <_printf_i+0x196>
 8012840:	4616      	mov	r6, r2
 8012842:	e7bd      	b.n	80127c0 <_printf_i+0x128>
 8012844:	6833      	ldr	r3, [r6, #0]
 8012846:	6825      	ldr	r5, [r4, #0]
 8012848:	6961      	ldr	r1, [r4, #20]
 801284a:	1d18      	adds	r0, r3, #4
 801284c:	6030      	str	r0, [r6, #0]
 801284e:	062e      	lsls	r6, r5, #24
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	d501      	bpl.n	8012858 <_printf_i+0x1c0>
 8012854:	6019      	str	r1, [r3, #0]
 8012856:	e002      	b.n	801285e <_printf_i+0x1c6>
 8012858:	0668      	lsls	r0, r5, #25
 801285a:	d5fb      	bpl.n	8012854 <_printf_i+0x1bc>
 801285c:	8019      	strh	r1, [r3, #0]
 801285e:	2300      	movs	r3, #0
 8012860:	6123      	str	r3, [r4, #16]
 8012862:	4616      	mov	r6, r2
 8012864:	e7bc      	b.n	80127e0 <_printf_i+0x148>
 8012866:	6833      	ldr	r3, [r6, #0]
 8012868:	1d1a      	adds	r2, r3, #4
 801286a:	6032      	str	r2, [r6, #0]
 801286c:	681e      	ldr	r6, [r3, #0]
 801286e:	6862      	ldr	r2, [r4, #4]
 8012870:	2100      	movs	r1, #0
 8012872:	4630      	mov	r0, r6
 8012874:	f7ed fc84 	bl	8000180 <memchr>
 8012878:	b108      	cbz	r0, 801287e <_printf_i+0x1e6>
 801287a:	1b80      	subs	r0, r0, r6
 801287c:	6060      	str	r0, [r4, #4]
 801287e:	6863      	ldr	r3, [r4, #4]
 8012880:	6123      	str	r3, [r4, #16]
 8012882:	2300      	movs	r3, #0
 8012884:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012888:	e7aa      	b.n	80127e0 <_printf_i+0x148>
 801288a:	6923      	ldr	r3, [r4, #16]
 801288c:	4632      	mov	r2, r6
 801288e:	4649      	mov	r1, r9
 8012890:	4640      	mov	r0, r8
 8012892:	47d0      	blx	sl
 8012894:	3001      	adds	r0, #1
 8012896:	d0ad      	beq.n	80127f4 <_printf_i+0x15c>
 8012898:	6823      	ldr	r3, [r4, #0]
 801289a:	079b      	lsls	r3, r3, #30
 801289c:	d413      	bmi.n	80128c6 <_printf_i+0x22e>
 801289e:	68e0      	ldr	r0, [r4, #12]
 80128a0:	9b03      	ldr	r3, [sp, #12]
 80128a2:	4298      	cmp	r0, r3
 80128a4:	bfb8      	it	lt
 80128a6:	4618      	movlt	r0, r3
 80128a8:	e7a6      	b.n	80127f8 <_printf_i+0x160>
 80128aa:	2301      	movs	r3, #1
 80128ac:	4632      	mov	r2, r6
 80128ae:	4649      	mov	r1, r9
 80128b0:	4640      	mov	r0, r8
 80128b2:	47d0      	blx	sl
 80128b4:	3001      	adds	r0, #1
 80128b6:	d09d      	beq.n	80127f4 <_printf_i+0x15c>
 80128b8:	3501      	adds	r5, #1
 80128ba:	68e3      	ldr	r3, [r4, #12]
 80128bc:	9903      	ldr	r1, [sp, #12]
 80128be:	1a5b      	subs	r3, r3, r1
 80128c0:	42ab      	cmp	r3, r5
 80128c2:	dcf2      	bgt.n	80128aa <_printf_i+0x212>
 80128c4:	e7eb      	b.n	801289e <_printf_i+0x206>
 80128c6:	2500      	movs	r5, #0
 80128c8:	f104 0619 	add.w	r6, r4, #25
 80128cc:	e7f5      	b.n	80128ba <_printf_i+0x222>
 80128ce:	bf00      	nop
 80128d0:	08014b7e 	.word	0x08014b7e
 80128d4:	08014b8f 	.word	0x08014b8f

080128d8 <std>:
 80128d8:	2300      	movs	r3, #0
 80128da:	b510      	push	{r4, lr}
 80128dc:	4604      	mov	r4, r0
 80128de:	e9c0 3300 	strd	r3, r3, [r0]
 80128e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80128e6:	6083      	str	r3, [r0, #8]
 80128e8:	8181      	strh	r1, [r0, #12]
 80128ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80128ec:	81c2      	strh	r2, [r0, #14]
 80128ee:	6183      	str	r3, [r0, #24]
 80128f0:	4619      	mov	r1, r3
 80128f2:	2208      	movs	r2, #8
 80128f4:	305c      	adds	r0, #92	@ 0x5c
 80128f6:	f000 f90e 	bl	8012b16 <memset>
 80128fa:	4b0d      	ldr	r3, [pc, #52]	@ (8012930 <std+0x58>)
 80128fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80128fe:	4b0d      	ldr	r3, [pc, #52]	@ (8012934 <std+0x5c>)
 8012900:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012902:	4b0d      	ldr	r3, [pc, #52]	@ (8012938 <std+0x60>)
 8012904:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012906:	4b0d      	ldr	r3, [pc, #52]	@ (801293c <std+0x64>)
 8012908:	6323      	str	r3, [r4, #48]	@ 0x30
 801290a:	4b0d      	ldr	r3, [pc, #52]	@ (8012940 <std+0x68>)
 801290c:	6224      	str	r4, [r4, #32]
 801290e:	429c      	cmp	r4, r3
 8012910:	d006      	beq.n	8012920 <std+0x48>
 8012912:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012916:	4294      	cmp	r4, r2
 8012918:	d002      	beq.n	8012920 <std+0x48>
 801291a:	33d0      	adds	r3, #208	@ 0xd0
 801291c:	429c      	cmp	r4, r3
 801291e:	d105      	bne.n	801292c <std+0x54>
 8012920:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012928:	f000 b972 	b.w	8012c10 <__retarget_lock_init_recursive>
 801292c:	bd10      	pop	{r4, pc}
 801292e:	bf00      	nop
 8012930:	08012a91 	.word	0x08012a91
 8012934:	08012ab3 	.word	0x08012ab3
 8012938:	08012aeb 	.word	0x08012aeb
 801293c:	08012b0f 	.word	0x08012b0f
 8012940:	20002380 	.word	0x20002380

08012944 <stdio_exit_handler>:
 8012944:	4a02      	ldr	r2, [pc, #8]	@ (8012950 <stdio_exit_handler+0xc>)
 8012946:	4903      	ldr	r1, [pc, #12]	@ (8012954 <stdio_exit_handler+0x10>)
 8012948:	4803      	ldr	r0, [pc, #12]	@ (8012958 <stdio_exit_handler+0x14>)
 801294a:	f000 b869 	b.w	8012a20 <_fwalk_sglue>
 801294e:	bf00      	nop
 8012950:	20000128 	.word	0x20000128
 8012954:	08014561 	.word	0x08014561
 8012958:	20000138 	.word	0x20000138

0801295c <cleanup_stdio>:
 801295c:	6841      	ldr	r1, [r0, #4]
 801295e:	4b0c      	ldr	r3, [pc, #48]	@ (8012990 <cleanup_stdio+0x34>)
 8012960:	4299      	cmp	r1, r3
 8012962:	b510      	push	{r4, lr}
 8012964:	4604      	mov	r4, r0
 8012966:	d001      	beq.n	801296c <cleanup_stdio+0x10>
 8012968:	f001 fdfa 	bl	8014560 <_fflush_r>
 801296c:	68a1      	ldr	r1, [r4, #8]
 801296e:	4b09      	ldr	r3, [pc, #36]	@ (8012994 <cleanup_stdio+0x38>)
 8012970:	4299      	cmp	r1, r3
 8012972:	d002      	beq.n	801297a <cleanup_stdio+0x1e>
 8012974:	4620      	mov	r0, r4
 8012976:	f001 fdf3 	bl	8014560 <_fflush_r>
 801297a:	68e1      	ldr	r1, [r4, #12]
 801297c:	4b06      	ldr	r3, [pc, #24]	@ (8012998 <cleanup_stdio+0x3c>)
 801297e:	4299      	cmp	r1, r3
 8012980:	d004      	beq.n	801298c <cleanup_stdio+0x30>
 8012982:	4620      	mov	r0, r4
 8012984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012988:	f001 bdea 	b.w	8014560 <_fflush_r>
 801298c:	bd10      	pop	{r4, pc}
 801298e:	bf00      	nop
 8012990:	20002380 	.word	0x20002380
 8012994:	200023e8 	.word	0x200023e8
 8012998:	20002450 	.word	0x20002450

0801299c <global_stdio_init.part.0>:
 801299c:	b510      	push	{r4, lr}
 801299e:	4b0b      	ldr	r3, [pc, #44]	@ (80129cc <global_stdio_init.part.0+0x30>)
 80129a0:	4c0b      	ldr	r4, [pc, #44]	@ (80129d0 <global_stdio_init.part.0+0x34>)
 80129a2:	4a0c      	ldr	r2, [pc, #48]	@ (80129d4 <global_stdio_init.part.0+0x38>)
 80129a4:	601a      	str	r2, [r3, #0]
 80129a6:	4620      	mov	r0, r4
 80129a8:	2200      	movs	r2, #0
 80129aa:	2104      	movs	r1, #4
 80129ac:	f7ff ff94 	bl	80128d8 <std>
 80129b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80129b4:	2201      	movs	r2, #1
 80129b6:	2109      	movs	r1, #9
 80129b8:	f7ff ff8e 	bl	80128d8 <std>
 80129bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80129c0:	2202      	movs	r2, #2
 80129c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80129c6:	2112      	movs	r1, #18
 80129c8:	f7ff bf86 	b.w	80128d8 <std>
 80129cc:	200024b8 	.word	0x200024b8
 80129d0:	20002380 	.word	0x20002380
 80129d4:	08012945 	.word	0x08012945

080129d8 <__sfp_lock_acquire>:
 80129d8:	4801      	ldr	r0, [pc, #4]	@ (80129e0 <__sfp_lock_acquire+0x8>)
 80129da:	f000 b91a 	b.w	8012c12 <__retarget_lock_acquire_recursive>
 80129de:	bf00      	nop
 80129e0:	200024c1 	.word	0x200024c1

080129e4 <__sfp_lock_release>:
 80129e4:	4801      	ldr	r0, [pc, #4]	@ (80129ec <__sfp_lock_release+0x8>)
 80129e6:	f000 b915 	b.w	8012c14 <__retarget_lock_release_recursive>
 80129ea:	bf00      	nop
 80129ec:	200024c1 	.word	0x200024c1

080129f0 <__sinit>:
 80129f0:	b510      	push	{r4, lr}
 80129f2:	4604      	mov	r4, r0
 80129f4:	f7ff fff0 	bl	80129d8 <__sfp_lock_acquire>
 80129f8:	6a23      	ldr	r3, [r4, #32]
 80129fa:	b11b      	cbz	r3, 8012a04 <__sinit+0x14>
 80129fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012a00:	f7ff bff0 	b.w	80129e4 <__sfp_lock_release>
 8012a04:	4b04      	ldr	r3, [pc, #16]	@ (8012a18 <__sinit+0x28>)
 8012a06:	6223      	str	r3, [r4, #32]
 8012a08:	4b04      	ldr	r3, [pc, #16]	@ (8012a1c <__sinit+0x2c>)
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d1f5      	bne.n	80129fc <__sinit+0xc>
 8012a10:	f7ff ffc4 	bl	801299c <global_stdio_init.part.0>
 8012a14:	e7f2      	b.n	80129fc <__sinit+0xc>
 8012a16:	bf00      	nop
 8012a18:	0801295d 	.word	0x0801295d
 8012a1c:	200024b8 	.word	0x200024b8

08012a20 <_fwalk_sglue>:
 8012a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a24:	4607      	mov	r7, r0
 8012a26:	4688      	mov	r8, r1
 8012a28:	4614      	mov	r4, r2
 8012a2a:	2600      	movs	r6, #0
 8012a2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012a30:	f1b9 0901 	subs.w	r9, r9, #1
 8012a34:	d505      	bpl.n	8012a42 <_fwalk_sglue+0x22>
 8012a36:	6824      	ldr	r4, [r4, #0]
 8012a38:	2c00      	cmp	r4, #0
 8012a3a:	d1f7      	bne.n	8012a2c <_fwalk_sglue+0xc>
 8012a3c:	4630      	mov	r0, r6
 8012a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a42:	89ab      	ldrh	r3, [r5, #12]
 8012a44:	2b01      	cmp	r3, #1
 8012a46:	d907      	bls.n	8012a58 <_fwalk_sglue+0x38>
 8012a48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012a4c:	3301      	adds	r3, #1
 8012a4e:	d003      	beq.n	8012a58 <_fwalk_sglue+0x38>
 8012a50:	4629      	mov	r1, r5
 8012a52:	4638      	mov	r0, r7
 8012a54:	47c0      	blx	r8
 8012a56:	4306      	orrs	r6, r0
 8012a58:	3568      	adds	r5, #104	@ 0x68
 8012a5a:	e7e9      	b.n	8012a30 <_fwalk_sglue+0x10>

08012a5c <iprintf>:
 8012a5c:	b40f      	push	{r0, r1, r2, r3}
 8012a5e:	b507      	push	{r0, r1, r2, lr}
 8012a60:	4906      	ldr	r1, [pc, #24]	@ (8012a7c <iprintf+0x20>)
 8012a62:	ab04      	add	r3, sp, #16
 8012a64:	6808      	ldr	r0, [r1, #0]
 8012a66:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a6a:	6881      	ldr	r1, [r0, #8]
 8012a6c:	9301      	str	r3, [sp, #4]
 8012a6e:	f001 fbdb 	bl	8014228 <_vfiprintf_r>
 8012a72:	b003      	add	sp, #12
 8012a74:	f85d eb04 	ldr.w	lr, [sp], #4
 8012a78:	b004      	add	sp, #16
 8012a7a:	4770      	bx	lr
 8012a7c:	20000134 	.word	0x20000134

08012a80 <putchar>:
 8012a80:	4b02      	ldr	r3, [pc, #8]	@ (8012a8c <putchar+0xc>)
 8012a82:	4601      	mov	r1, r0
 8012a84:	6818      	ldr	r0, [r3, #0]
 8012a86:	6882      	ldr	r2, [r0, #8]
 8012a88:	f001 bd92 	b.w	80145b0 <_putc_r>
 8012a8c:	20000134 	.word	0x20000134

08012a90 <__sread>:
 8012a90:	b510      	push	{r4, lr}
 8012a92:	460c      	mov	r4, r1
 8012a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a98:	f000 f86c 	bl	8012b74 <_read_r>
 8012a9c:	2800      	cmp	r0, #0
 8012a9e:	bfab      	itete	ge
 8012aa0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012aa2:	89a3      	ldrhlt	r3, [r4, #12]
 8012aa4:	181b      	addge	r3, r3, r0
 8012aa6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012aaa:	bfac      	ite	ge
 8012aac:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012aae:	81a3      	strhlt	r3, [r4, #12]
 8012ab0:	bd10      	pop	{r4, pc}

08012ab2 <__swrite>:
 8012ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ab6:	461f      	mov	r7, r3
 8012ab8:	898b      	ldrh	r3, [r1, #12]
 8012aba:	05db      	lsls	r3, r3, #23
 8012abc:	4605      	mov	r5, r0
 8012abe:	460c      	mov	r4, r1
 8012ac0:	4616      	mov	r6, r2
 8012ac2:	d505      	bpl.n	8012ad0 <__swrite+0x1e>
 8012ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ac8:	2302      	movs	r3, #2
 8012aca:	2200      	movs	r2, #0
 8012acc:	f000 f840 	bl	8012b50 <_lseek_r>
 8012ad0:	89a3      	ldrh	r3, [r4, #12]
 8012ad2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ad6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012ada:	81a3      	strh	r3, [r4, #12]
 8012adc:	4632      	mov	r2, r6
 8012ade:	463b      	mov	r3, r7
 8012ae0:	4628      	mov	r0, r5
 8012ae2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ae6:	f000 b857 	b.w	8012b98 <_write_r>

08012aea <__sseek>:
 8012aea:	b510      	push	{r4, lr}
 8012aec:	460c      	mov	r4, r1
 8012aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012af2:	f000 f82d 	bl	8012b50 <_lseek_r>
 8012af6:	1c43      	adds	r3, r0, #1
 8012af8:	89a3      	ldrh	r3, [r4, #12]
 8012afa:	bf15      	itete	ne
 8012afc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012afe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012b02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012b06:	81a3      	strheq	r3, [r4, #12]
 8012b08:	bf18      	it	ne
 8012b0a:	81a3      	strhne	r3, [r4, #12]
 8012b0c:	bd10      	pop	{r4, pc}

08012b0e <__sclose>:
 8012b0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b12:	f000 b80d 	b.w	8012b30 <_close_r>

08012b16 <memset>:
 8012b16:	4402      	add	r2, r0
 8012b18:	4603      	mov	r3, r0
 8012b1a:	4293      	cmp	r3, r2
 8012b1c:	d100      	bne.n	8012b20 <memset+0xa>
 8012b1e:	4770      	bx	lr
 8012b20:	f803 1b01 	strb.w	r1, [r3], #1
 8012b24:	e7f9      	b.n	8012b1a <memset+0x4>
	...

08012b28 <_localeconv_r>:
 8012b28:	4800      	ldr	r0, [pc, #0]	@ (8012b2c <_localeconv_r+0x4>)
 8012b2a:	4770      	bx	lr
 8012b2c:	20000274 	.word	0x20000274

08012b30 <_close_r>:
 8012b30:	b538      	push	{r3, r4, r5, lr}
 8012b32:	4d06      	ldr	r5, [pc, #24]	@ (8012b4c <_close_r+0x1c>)
 8012b34:	2300      	movs	r3, #0
 8012b36:	4604      	mov	r4, r0
 8012b38:	4608      	mov	r0, r1
 8012b3a:	602b      	str	r3, [r5, #0]
 8012b3c:	f7f1 fe3c 	bl	80047b8 <_close>
 8012b40:	1c43      	adds	r3, r0, #1
 8012b42:	d102      	bne.n	8012b4a <_close_r+0x1a>
 8012b44:	682b      	ldr	r3, [r5, #0]
 8012b46:	b103      	cbz	r3, 8012b4a <_close_r+0x1a>
 8012b48:	6023      	str	r3, [r4, #0]
 8012b4a:	bd38      	pop	{r3, r4, r5, pc}
 8012b4c:	200024bc 	.word	0x200024bc

08012b50 <_lseek_r>:
 8012b50:	b538      	push	{r3, r4, r5, lr}
 8012b52:	4d07      	ldr	r5, [pc, #28]	@ (8012b70 <_lseek_r+0x20>)
 8012b54:	4604      	mov	r4, r0
 8012b56:	4608      	mov	r0, r1
 8012b58:	4611      	mov	r1, r2
 8012b5a:	2200      	movs	r2, #0
 8012b5c:	602a      	str	r2, [r5, #0]
 8012b5e:	461a      	mov	r2, r3
 8012b60:	f7f1 fe51 	bl	8004806 <_lseek>
 8012b64:	1c43      	adds	r3, r0, #1
 8012b66:	d102      	bne.n	8012b6e <_lseek_r+0x1e>
 8012b68:	682b      	ldr	r3, [r5, #0]
 8012b6a:	b103      	cbz	r3, 8012b6e <_lseek_r+0x1e>
 8012b6c:	6023      	str	r3, [r4, #0]
 8012b6e:	bd38      	pop	{r3, r4, r5, pc}
 8012b70:	200024bc 	.word	0x200024bc

08012b74 <_read_r>:
 8012b74:	b538      	push	{r3, r4, r5, lr}
 8012b76:	4d07      	ldr	r5, [pc, #28]	@ (8012b94 <_read_r+0x20>)
 8012b78:	4604      	mov	r4, r0
 8012b7a:	4608      	mov	r0, r1
 8012b7c:	4611      	mov	r1, r2
 8012b7e:	2200      	movs	r2, #0
 8012b80:	602a      	str	r2, [r5, #0]
 8012b82:	461a      	mov	r2, r3
 8012b84:	f7f1 fddf 	bl	8004746 <_read>
 8012b88:	1c43      	adds	r3, r0, #1
 8012b8a:	d102      	bne.n	8012b92 <_read_r+0x1e>
 8012b8c:	682b      	ldr	r3, [r5, #0]
 8012b8e:	b103      	cbz	r3, 8012b92 <_read_r+0x1e>
 8012b90:	6023      	str	r3, [r4, #0]
 8012b92:	bd38      	pop	{r3, r4, r5, pc}
 8012b94:	200024bc 	.word	0x200024bc

08012b98 <_write_r>:
 8012b98:	b538      	push	{r3, r4, r5, lr}
 8012b9a:	4d07      	ldr	r5, [pc, #28]	@ (8012bb8 <_write_r+0x20>)
 8012b9c:	4604      	mov	r4, r0
 8012b9e:	4608      	mov	r0, r1
 8012ba0:	4611      	mov	r1, r2
 8012ba2:	2200      	movs	r2, #0
 8012ba4:	602a      	str	r2, [r5, #0]
 8012ba6:	461a      	mov	r2, r3
 8012ba8:	f7f1 fdea 	bl	8004780 <_write>
 8012bac:	1c43      	adds	r3, r0, #1
 8012bae:	d102      	bne.n	8012bb6 <_write_r+0x1e>
 8012bb0:	682b      	ldr	r3, [r5, #0]
 8012bb2:	b103      	cbz	r3, 8012bb6 <_write_r+0x1e>
 8012bb4:	6023      	str	r3, [r4, #0]
 8012bb6:	bd38      	pop	{r3, r4, r5, pc}
 8012bb8:	200024bc 	.word	0x200024bc

08012bbc <__errno>:
 8012bbc:	4b01      	ldr	r3, [pc, #4]	@ (8012bc4 <__errno+0x8>)
 8012bbe:	6818      	ldr	r0, [r3, #0]
 8012bc0:	4770      	bx	lr
 8012bc2:	bf00      	nop
 8012bc4:	20000134 	.word	0x20000134

08012bc8 <__libc_init_array>:
 8012bc8:	b570      	push	{r4, r5, r6, lr}
 8012bca:	4d0d      	ldr	r5, [pc, #52]	@ (8012c00 <__libc_init_array+0x38>)
 8012bcc:	4c0d      	ldr	r4, [pc, #52]	@ (8012c04 <__libc_init_array+0x3c>)
 8012bce:	1b64      	subs	r4, r4, r5
 8012bd0:	10a4      	asrs	r4, r4, #2
 8012bd2:	2600      	movs	r6, #0
 8012bd4:	42a6      	cmp	r6, r4
 8012bd6:	d109      	bne.n	8012bec <__libc_init_array+0x24>
 8012bd8:	4d0b      	ldr	r5, [pc, #44]	@ (8012c08 <__libc_init_array+0x40>)
 8012bda:	4c0c      	ldr	r4, [pc, #48]	@ (8012c0c <__libc_init_array+0x44>)
 8012bdc:	f001 fef4 	bl	80149c8 <_init>
 8012be0:	1b64      	subs	r4, r4, r5
 8012be2:	10a4      	asrs	r4, r4, #2
 8012be4:	2600      	movs	r6, #0
 8012be6:	42a6      	cmp	r6, r4
 8012be8:	d105      	bne.n	8012bf6 <__libc_init_array+0x2e>
 8012bea:	bd70      	pop	{r4, r5, r6, pc}
 8012bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8012bf0:	4798      	blx	r3
 8012bf2:	3601      	adds	r6, #1
 8012bf4:	e7ee      	b.n	8012bd4 <__libc_init_array+0xc>
 8012bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8012bfa:	4798      	blx	r3
 8012bfc:	3601      	adds	r6, #1
 8012bfe:	e7f2      	b.n	8012be6 <__libc_init_array+0x1e>
 8012c00:	08014ee8 	.word	0x08014ee8
 8012c04:	08014ee8 	.word	0x08014ee8
 8012c08:	08014ee8 	.word	0x08014ee8
 8012c0c:	08014eec 	.word	0x08014eec

08012c10 <__retarget_lock_init_recursive>:
 8012c10:	4770      	bx	lr

08012c12 <__retarget_lock_acquire_recursive>:
 8012c12:	4770      	bx	lr

08012c14 <__retarget_lock_release_recursive>:
 8012c14:	4770      	bx	lr

08012c16 <memcpy>:
 8012c16:	440a      	add	r2, r1
 8012c18:	4291      	cmp	r1, r2
 8012c1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8012c1e:	d100      	bne.n	8012c22 <memcpy+0xc>
 8012c20:	4770      	bx	lr
 8012c22:	b510      	push	{r4, lr}
 8012c24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012c28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012c2c:	4291      	cmp	r1, r2
 8012c2e:	d1f9      	bne.n	8012c24 <memcpy+0xe>
 8012c30:	bd10      	pop	{r4, pc}

08012c32 <quorem>:
 8012c32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c36:	6903      	ldr	r3, [r0, #16]
 8012c38:	690c      	ldr	r4, [r1, #16]
 8012c3a:	42a3      	cmp	r3, r4
 8012c3c:	4607      	mov	r7, r0
 8012c3e:	db7e      	blt.n	8012d3e <quorem+0x10c>
 8012c40:	3c01      	subs	r4, #1
 8012c42:	f101 0814 	add.w	r8, r1, #20
 8012c46:	00a3      	lsls	r3, r4, #2
 8012c48:	f100 0514 	add.w	r5, r0, #20
 8012c4c:	9300      	str	r3, [sp, #0]
 8012c4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012c52:	9301      	str	r3, [sp, #4]
 8012c54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012c58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012c5c:	3301      	adds	r3, #1
 8012c5e:	429a      	cmp	r2, r3
 8012c60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012c64:	fbb2 f6f3 	udiv	r6, r2, r3
 8012c68:	d32e      	bcc.n	8012cc8 <quorem+0x96>
 8012c6a:	f04f 0a00 	mov.w	sl, #0
 8012c6e:	46c4      	mov	ip, r8
 8012c70:	46ae      	mov	lr, r5
 8012c72:	46d3      	mov	fp, sl
 8012c74:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012c78:	b298      	uxth	r0, r3
 8012c7a:	fb06 a000 	mla	r0, r6, r0, sl
 8012c7e:	0c02      	lsrs	r2, r0, #16
 8012c80:	0c1b      	lsrs	r3, r3, #16
 8012c82:	fb06 2303 	mla	r3, r6, r3, r2
 8012c86:	f8de 2000 	ldr.w	r2, [lr]
 8012c8a:	b280      	uxth	r0, r0
 8012c8c:	b292      	uxth	r2, r2
 8012c8e:	1a12      	subs	r2, r2, r0
 8012c90:	445a      	add	r2, fp
 8012c92:	f8de 0000 	ldr.w	r0, [lr]
 8012c96:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012c9a:	b29b      	uxth	r3, r3
 8012c9c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8012ca0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012ca4:	b292      	uxth	r2, r2
 8012ca6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012caa:	45e1      	cmp	r9, ip
 8012cac:	f84e 2b04 	str.w	r2, [lr], #4
 8012cb0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012cb4:	d2de      	bcs.n	8012c74 <quorem+0x42>
 8012cb6:	9b00      	ldr	r3, [sp, #0]
 8012cb8:	58eb      	ldr	r3, [r5, r3]
 8012cba:	b92b      	cbnz	r3, 8012cc8 <quorem+0x96>
 8012cbc:	9b01      	ldr	r3, [sp, #4]
 8012cbe:	3b04      	subs	r3, #4
 8012cc0:	429d      	cmp	r5, r3
 8012cc2:	461a      	mov	r2, r3
 8012cc4:	d32f      	bcc.n	8012d26 <quorem+0xf4>
 8012cc6:	613c      	str	r4, [r7, #16]
 8012cc8:	4638      	mov	r0, r7
 8012cca:	f001 f97b 	bl	8013fc4 <__mcmp>
 8012cce:	2800      	cmp	r0, #0
 8012cd0:	db25      	blt.n	8012d1e <quorem+0xec>
 8012cd2:	4629      	mov	r1, r5
 8012cd4:	2000      	movs	r0, #0
 8012cd6:	f858 2b04 	ldr.w	r2, [r8], #4
 8012cda:	f8d1 c000 	ldr.w	ip, [r1]
 8012cde:	fa1f fe82 	uxth.w	lr, r2
 8012ce2:	fa1f f38c 	uxth.w	r3, ip
 8012ce6:	eba3 030e 	sub.w	r3, r3, lr
 8012cea:	4403      	add	r3, r0
 8012cec:	0c12      	lsrs	r2, r2, #16
 8012cee:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8012cf2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012cf6:	b29b      	uxth	r3, r3
 8012cf8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012cfc:	45c1      	cmp	r9, r8
 8012cfe:	f841 3b04 	str.w	r3, [r1], #4
 8012d02:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012d06:	d2e6      	bcs.n	8012cd6 <quorem+0xa4>
 8012d08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012d0c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012d10:	b922      	cbnz	r2, 8012d1c <quorem+0xea>
 8012d12:	3b04      	subs	r3, #4
 8012d14:	429d      	cmp	r5, r3
 8012d16:	461a      	mov	r2, r3
 8012d18:	d30b      	bcc.n	8012d32 <quorem+0x100>
 8012d1a:	613c      	str	r4, [r7, #16]
 8012d1c:	3601      	adds	r6, #1
 8012d1e:	4630      	mov	r0, r6
 8012d20:	b003      	add	sp, #12
 8012d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d26:	6812      	ldr	r2, [r2, #0]
 8012d28:	3b04      	subs	r3, #4
 8012d2a:	2a00      	cmp	r2, #0
 8012d2c:	d1cb      	bne.n	8012cc6 <quorem+0x94>
 8012d2e:	3c01      	subs	r4, #1
 8012d30:	e7c6      	b.n	8012cc0 <quorem+0x8e>
 8012d32:	6812      	ldr	r2, [r2, #0]
 8012d34:	3b04      	subs	r3, #4
 8012d36:	2a00      	cmp	r2, #0
 8012d38:	d1ef      	bne.n	8012d1a <quorem+0xe8>
 8012d3a:	3c01      	subs	r4, #1
 8012d3c:	e7ea      	b.n	8012d14 <quorem+0xe2>
 8012d3e:	2000      	movs	r0, #0
 8012d40:	e7ee      	b.n	8012d20 <quorem+0xee>
 8012d42:	0000      	movs	r0, r0
 8012d44:	0000      	movs	r0, r0
	...

08012d48 <_dtoa_r>:
 8012d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d4c:	69c7      	ldr	r7, [r0, #28]
 8012d4e:	b099      	sub	sp, #100	@ 0x64
 8012d50:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012d54:	ec55 4b10 	vmov	r4, r5, d0
 8012d58:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8012d5a:	9109      	str	r1, [sp, #36]	@ 0x24
 8012d5c:	4683      	mov	fp, r0
 8012d5e:	920e      	str	r2, [sp, #56]	@ 0x38
 8012d60:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012d62:	b97f      	cbnz	r7, 8012d84 <_dtoa_r+0x3c>
 8012d64:	2010      	movs	r0, #16
 8012d66:	f000 fdfd 	bl	8013964 <malloc>
 8012d6a:	4602      	mov	r2, r0
 8012d6c:	f8cb 001c 	str.w	r0, [fp, #28]
 8012d70:	b920      	cbnz	r0, 8012d7c <_dtoa_r+0x34>
 8012d72:	4ba7      	ldr	r3, [pc, #668]	@ (8013010 <_dtoa_r+0x2c8>)
 8012d74:	21ef      	movs	r1, #239	@ 0xef
 8012d76:	48a7      	ldr	r0, [pc, #668]	@ (8013014 <_dtoa_r+0x2cc>)
 8012d78:	f001 fcf2 	bl	8014760 <__assert_func>
 8012d7c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012d80:	6007      	str	r7, [r0, #0]
 8012d82:	60c7      	str	r7, [r0, #12]
 8012d84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012d88:	6819      	ldr	r1, [r3, #0]
 8012d8a:	b159      	cbz	r1, 8012da4 <_dtoa_r+0x5c>
 8012d8c:	685a      	ldr	r2, [r3, #4]
 8012d8e:	604a      	str	r2, [r1, #4]
 8012d90:	2301      	movs	r3, #1
 8012d92:	4093      	lsls	r3, r2
 8012d94:	608b      	str	r3, [r1, #8]
 8012d96:	4658      	mov	r0, fp
 8012d98:	f000 feda 	bl	8013b50 <_Bfree>
 8012d9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012da0:	2200      	movs	r2, #0
 8012da2:	601a      	str	r2, [r3, #0]
 8012da4:	1e2b      	subs	r3, r5, #0
 8012da6:	bfb9      	ittee	lt
 8012da8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012dac:	9303      	strlt	r3, [sp, #12]
 8012dae:	2300      	movge	r3, #0
 8012db0:	6033      	strge	r3, [r6, #0]
 8012db2:	9f03      	ldr	r7, [sp, #12]
 8012db4:	4b98      	ldr	r3, [pc, #608]	@ (8013018 <_dtoa_r+0x2d0>)
 8012db6:	bfbc      	itt	lt
 8012db8:	2201      	movlt	r2, #1
 8012dba:	6032      	strlt	r2, [r6, #0]
 8012dbc:	43bb      	bics	r3, r7
 8012dbe:	d112      	bne.n	8012de6 <_dtoa_r+0x9e>
 8012dc0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012dc2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012dc6:	6013      	str	r3, [r2, #0]
 8012dc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012dcc:	4323      	orrs	r3, r4
 8012dce:	f000 854d 	beq.w	801386c <_dtoa_r+0xb24>
 8012dd2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012dd4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801302c <_dtoa_r+0x2e4>
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	f000 854f 	beq.w	801387c <_dtoa_r+0xb34>
 8012dde:	f10a 0303 	add.w	r3, sl, #3
 8012de2:	f000 bd49 	b.w	8013878 <_dtoa_r+0xb30>
 8012de6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012dea:	2200      	movs	r2, #0
 8012dec:	ec51 0b17 	vmov	r0, r1, d7
 8012df0:	2300      	movs	r3, #0
 8012df2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8012df6:	f7ed fe3f 	bl	8000a78 <__aeabi_dcmpeq>
 8012dfa:	4680      	mov	r8, r0
 8012dfc:	b158      	cbz	r0, 8012e16 <_dtoa_r+0xce>
 8012dfe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012e00:	2301      	movs	r3, #1
 8012e02:	6013      	str	r3, [r2, #0]
 8012e04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012e06:	b113      	cbz	r3, 8012e0e <_dtoa_r+0xc6>
 8012e08:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012e0a:	4b84      	ldr	r3, [pc, #528]	@ (801301c <_dtoa_r+0x2d4>)
 8012e0c:	6013      	str	r3, [r2, #0]
 8012e0e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8013030 <_dtoa_r+0x2e8>
 8012e12:	f000 bd33 	b.w	801387c <_dtoa_r+0xb34>
 8012e16:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012e1a:	aa16      	add	r2, sp, #88	@ 0x58
 8012e1c:	a917      	add	r1, sp, #92	@ 0x5c
 8012e1e:	4658      	mov	r0, fp
 8012e20:	f001 f980 	bl	8014124 <__d2b>
 8012e24:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8012e28:	4681      	mov	r9, r0
 8012e2a:	2e00      	cmp	r6, #0
 8012e2c:	d077      	beq.n	8012f1e <_dtoa_r+0x1d6>
 8012e2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012e30:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8012e34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012e38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012e3c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8012e40:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8012e44:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8012e48:	4619      	mov	r1, r3
 8012e4a:	2200      	movs	r2, #0
 8012e4c:	4b74      	ldr	r3, [pc, #464]	@ (8013020 <_dtoa_r+0x2d8>)
 8012e4e:	f7ed f9f3 	bl	8000238 <__aeabi_dsub>
 8012e52:	a369      	add	r3, pc, #420	@ (adr r3, 8012ff8 <_dtoa_r+0x2b0>)
 8012e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e58:	f7ed fba6 	bl	80005a8 <__aeabi_dmul>
 8012e5c:	a368      	add	r3, pc, #416	@ (adr r3, 8013000 <_dtoa_r+0x2b8>)
 8012e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e62:	f7ed f9eb 	bl	800023c <__adddf3>
 8012e66:	4604      	mov	r4, r0
 8012e68:	4630      	mov	r0, r6
 8012e6a:	460d      	mov	r5, r1
 8012e6c:	f7ed fb32 	bl	80004d4 <__aeabi_i2d>
 8012e70:	a365      	add	r3, pc, #404	@ (adr r3, 8013008 <_dtoa_r+0x2c0>)
 8012e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e76:	f7ed fb97 	bl	80005a8 <__aeabi_dmul>
 8012e7a:	4602      	mov	r2, r0
 8012e7c:	460b      	mov	r3, r1
 8012e7e:	4620      	mov	r0, r4
 8012e80:	4629      	mov	r1, r5
 8012e82:	f7ed f9db 	bl	800023c <__adddf3>
 8012e86:	4604      	mov	r4, r0
 8012e88:	460d      	mov	r5, r1
 8012e8a:	f7ed fe3d 	bl	8000b08 <__aeabi_d2iz>
 8012e8e:	2200      	movs	r2, #0
 8012e90:	4607      	mov	r7, r0
 8012e92:	2300      	movs	r3, #0
 8012e94:	4620      	mov	r0, r4
 8012e96:	4629      	mov	r1, r5
 8012e98:	f7ed fdf8 	bl	8000a8c <__aeabi_dcmplt>
 8012e9c:	b140      	cbz	r0, 8012eb0 <_dtoa_r+0x168>
 8012e9e:	4638      	mov	r0, r7
 8012ea0:	f7ed fb18 	bl	80004d4 <__aeabi_i2d>
 8012ea4:	4622      	mov	r2, r4
 8012ea6:	462b      	mov	r3, r5
 8012ea8:	f7ed fde6 	bl	8000a78 <__aeabi_dcmpeq>
 8012eac:	b900      	cbnz	r0, 8012eb0 <_dtoa_r+0x168>
 8012eae:	3f01      	subs	r7, #1
 8012eb0:	2f16      	cmp	r7, #22
 8012eb2:	d851      	bhi.n	8012f58 <_dtoa_r+0x210>
 8012eb4:	4b5b      	ldr	r3, [pc, #364]	@ (8013024 <_dtoa_r+0x2dc>)
 8012eb6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ebe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012ec2:	f7ed fde3 	bl	8000a8c <__aeabi_dcmplt>
 8012ec6:	2800      	cmp	r0, #0
 8012ec8:	d048      	beq.n	8012f5c <_dtoa_r+0x214>
 8012eca:	3f01      	subs	r7, #1
 8012ecc:	2300      	movs	r3, #0
 8012ece:	9312      	str	r3, [sp, #72]	@ 0x48
 8012ed0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012ed2:	1b9b      	subs	r3, r3, r6
 8012ed4:	1e5a      	subs	r2, r3, #1
 8012ed6:	bf44      	itt	mi
 8012ed8:	f1c3 0801 	rsbmi	r8, r3, #1
 8012edc:	2300      	movmi	r3, #0
 8012ede:	9208      	str	r2, [sp, #32]
 8012ee0:	bf54      	ite	pl
 8012ee2:	f04f 0800 	movpl.w	r8, #0
 8012ee6:	9308      	strmi	r3, [sp, #32]
 8012ee8:	2f00      	cmp	r7, #0
 8012eea:	db39      	blt.n	8012f60 <_dtoa_r+0x218>
 8012eec:	9b08      	ldr	r3, [sp, #32]
 8012eee:	970f      	str	r7, [sp, #60]	@ 0x3c
 8012ef0:	443b      	add	r3, r7
 8012ef2:	9308      	str	r3, [sp, #32]
 8012ef4:	2300      	movs	r3, #0
 8012ef6:	930a      	str	r3, [sp, #40]	@ 0x28
 8012ef8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012efa:	2b09      	cmp	r3, #9
 8012efc:	d864      	bhi.n	8012fc8 <_dtoa_r+0x280>
 8012efe:	2b05      	cmp	r3, #5
 8012f00:	bfc4      	itt	gt
 8012f02:	3b04      	subgt	r3, #4
 8012f04:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8012f06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f08:	f1a3 0302 	sub.w	r3, r3, #2
 8012f0c:	bfcc      	ite	gt
 8012f0e:	2400      	movgt	r4, #0
 8012f10:	2401      	movle	r4, #1
 8012f12:	2b03      	cmp	r3, #3
 8012f14:	d863      	bhi.n	8012fde <_dtoa_r+0x296>
 8012f16:	e8df f003 	tbb	[pc, r3]
 8012f1a:	372a      	.short	0x372a
 8012f1c:	5535      	.short	0x5535
 8012f1e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8012f22:	441e      	add	r6, r3
 8012f24:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8012f28:	2b20      	cmp	r3, #32
 8012f2a:	bfc1      	itttt	gt
 8012f2c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8012f30:	409f      	lslgt	r7, r3
 8012f32:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8012f36:	fa24 f303 	lsrgt.w	r3, r4, r3
 8012f3a:	bfd6      	itet	le
 8012f3c:	f1c3 0320 	rsble	r3, r3, #32
 8012f40:	ea47 0003 	orrgt.w	r0, r7, r3
 8012f44:	fa04 f003 	lslle.w	r0, r4, r3
 8012f48:	f7ed fab4 	bl	80004b4 <__aeabi_ui2d>
 8012f4c:	2201      	movs	r2, #1
 8012f4e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8012f52:	3e01      	subs	r6, #1
 8012f54:	9214      	str	r2, [sp, #80]	@ 0x50
 8012f56:	e777      	b.n	8012e48 <_dtoa_r+0x100>
 8012f58:	2301      	movs	r3, #1
 8012f5a:	e7b8      	b.n	8012ece <_dtoa_r+0x186>
 8012f5c:	9012      	str	r0, [sp, #72]	@ 0x48
 8012f5e:	e7b7      	b.n	8012ed0 <_dtoa_r+0x188>
 8012f60:	427b      	negs	r3, r7
 8012f62:	930a      	str	r3, [sp, #40]	@ 0x28
 8012f64:	2300      	movs	r3, #0
 8012f66:	eba8 0807 	sub.w	r8, r8, r7
 8012f6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012f6c:	e7c4      	b.n	8012ef8 <_dtoa_r+0x1b0>
 8012f6e:	2300      	movs	r3, #0
 8012f70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012f72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	dc35      	bgt.n	8012fe4 <_dtoa_r+0x29c>
 8012f78:	2301      	movs	r3, #1
 8012f7a:	9300      	str	r3, [sp, #0]
 8012f7c:	9307      	str	r3, [sp, #28]
 8012f7e:	461a      	mov	r2, r3
 8012f80:	920e      	str	r2, [sp, #56]	@ 0x38
 8012f82:	e00b      	b.n	8012f9c <_dtoa_r+0x254>
 8012f84:	2301      	movs	r3, #1
 8012f86:	e7f3      	b.n	8012f70 <_dtoa_r+0x228>
 8012f88:	2300      	movs	r3, #0
 8012f8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012f8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012f8e:	18fb      	adds	r3, r7, r3
 8012f90:	9300      	str	r3, [sp, #0]
 8012f92:	3301      	adds	r3, #1
 8012f94:	2b01      	cmp	r3, #1
 8012f96:	9307      	str	r3, [sp, #28]
 8012f98:	bfb8      	it	lt
 8012f9a:	2301      	movlt	r3, #1
 8012f9c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8012fa0:	2100      	movs	r1, #0
 8012fa2:	2204      	movs	r2, #4
 8012fa4:	f102 0514 	add.w	r5, r2, #20
 8012fa8:	429d      	cmp	r5, r3
 8012faa:	d91f      	bls.n	8012fec <_dtoa_r+0x2a4>
 8012fac:	6041      	str	r1, [r0, #4]
 8012fae:	4658      	mov	r0, fp
 8012fb0:	f000 fd8e 	bl	8013ad0 <_Balloc>
 8012fb4:	4682      	mov	sl, r0
 8012fb6:	2800      	cmp	r0, #0
 8012fb8:	d13c      	bne.n	8013034 <_dtoa_r+0x2ec>
 8012fba:	4b1b      	ldr	r3, [pc, #108]	@ (8013028 <_dtoa_r+0x2e0>)
 8012fbc:	4602      	mov	r2, r0
 8012fbe:	f240 11af 	movw	r1, #431	@ 0x1af
 8012fc2:	e6d8      	b.n	8012d76 <_dtoa_r+0x2e>
 8012fc4:	2301      	movs	r3, #1
 8012fc6:	e7e0      	b.n	8012f8a <_dtoa_r+0x242>
 8012fc8:	2401      	movs	r4, #1
 8012fca:	2300      	movs	r3, #0
 8012fcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8012fce:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8012fd4:	9300      	str	r3, [sp, #0]
 8012fd6:	9307      	str	r3, [sp, #28]
 8012fd8:	2200      	movs	r2, #0
 8012fda:	2312      	movs	r3, #18
 8012fdc:	e7d0      	b.n	8012f80 <_dtoa_r+0x238>
 8012fde:	2301      	movs	r3, #1
 8012fe0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012fe2:	e7f5      	b.n	8012fd0 <_dtoa_r+0x288>
 8012fe4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012fe6:	9300      	str	r3, [sp, #0]
 8012fe8:	9307      	str	r3, [sp, #28]
 8012fea:	e7d7      	b.n	8012f9c <_dtoa_r+0x254>
 8012fec:	3101      	adds	r1, #1
 8012fee:	0052      	lsls	r2, r2, #1
 8012ff0:	e7d8      	b.n	8012fa4 <_dtoa_r+0x25c>
 8012ff2:	bf00      	nop
 8012ff4:	f3af 8000 	nop.w
 8012ff8:	636f4361 	.word	0x636f4361
 8012ffc:	3fd287a7 	.word	0x3fd287a7
 8013000:	8b60c8b3 	.word	0x8b60c8b3
 8013004:	3fc68a28 	.word	0x3fc68a28
 8013008:	509f79fb 	.word	0x509f79fb
 801300c:	3fd34413 	.word	0x3fd34413
 8013010:	08014bad 	.word	0x08014bad
 8013014:	08014bc4 	.word	0x08014bc4
 8013018:	7ff00000 	.word	0x7ff00000
 801301c:	08014b7d 	.word	0x08014b7d
 8013020:	3ff80000 	.word	0x3ff80000
 8013024:	08014cc0 	.word	0x08014cc0
 8013028:	08014c1c 	.word	0x08014c1c
 801302c:	08014ba9 	.word	0x08014ba9
 8013030:	08014b7c 	.word	0x08014b7c
 8013034:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013038:	6018      	str	r0, [r3, #0]
 801303a:	9b07      	ldr	r3, [sp, #28]
 801303c:	2b0e      	cmp	r3, #14
 801303e:	f200 80a4 	bhi.w	801318a <_dtoa_r+0x442>
 8013042:	2c00      	cmp	r4, #0
 8013044:	f000 80a1 	beq.w	801318a <_dtoa_r+0x442>
 8013048:	2f00      	cmp	r7, #0
 801304a:	dd33      	ble.n	80130b4 <_dtoa_r+0x36c>
 801304c:	4bad      	ldr	r3, [pc, #692]	@ (8013304 <_dtoa_r+0x5bc>)
 801304e:	f007 020f 	and.w	r2, r7, #15
 8013052:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013056:	ed93 7b00 	vldr	d7, [r3]
 801305a:	05f8      	lsls	r0, r7, #23
 801305c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013060:	ea4f 1427 	mov.w	r4, r7, asr #4
 8013064:	d516      	bpl.n	8013094 <_dtoa_r+0x34c>
 8013066:	4ba8      	ldr	r3, [pc, #672]	@ (8013308 <_dtoa_r+0x5c0>)
 8013068:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801306c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013070:	f7ed fbc4 	bl	80007fc <__aeabi_ddiv>
 8013074:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013078:	f004 040f 	and.w	r4, r4, #15
 801307c:	2603      	movs	r6, #3
 801307e:	4da2      	ldr	r5, [pc, #648]	@ (8013308 <_dtoa_r+0x5c0>)
 8013080:	b954      	cbnz	r4, 8013098 <_dtoa_r+0x350>
 8013082:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013086:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801308a:	f7ed fbb7 	bl	80007fc <__aeabi_ddiv>
 801308e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013092:	e028      	b.n	80130e6 <_dtoa_r+0x39e>
 8013094:	2602      	movs	r6, #2
 8013096:	e7f2      	b.n	801307e <_dtoa_r+0x336>
 8013098:	07e1      	lsls	r1, r4, #31
 801309a:	d508      	bpl.n	80130ae <_dtoa_r+0x366>
 801309c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80130a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80130a4:	f7ed fa80 	bl	80005a8 <__aeabi_dmul>
 80130a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80130ac:	3601      	adds	r6, #1
 80130ae:	1064      	asrs	r4, r4, #1
 80130b0:	3508      	adds	r5, #8
 80130b2:	e7e5      	b.n	8013080 <_dtoa_r+0x338>
 80130b4:	f000 80d2 	beq.w	801325c <_dtoa_r+0x514>
 80130b8:	427c      	negs	r4, r7
 80130ba:	4b92      	ldr	r3, [pc, #584]	@ (8013304 <_dtoa_r+0x5bc>)
 80130bc:	4d92      	ldr	r5, [pc, #584]	@ (8013308 <_dtoa_r+0x5c0>)
 80130be:	f004 020f 	and.w	r2, r4, #15
 80130c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80130c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80130ce:	f7ed fa6b 	bl	80005a8 <__aeabi_dmul>
 80130d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80130d6:	1124      	asrs	r4, r4, #4
 80130d8:	2300      	movs	r3, #0
 80130da:	2602      	movs	r6, #2
 80130dc:	2c00      	cmp	r4, #0
 80130de:	f040 80b2 	bne.w	8013246 <_dtoa_r+0x4fe>
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d1d3      	bne.n	801308e <_dtoa_r+0x346>
 80130e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80130e8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	f000 80b7 	beq.w	8013260 <_dtoa_r+0x518>
 80130f2:	4b86      	ldr	r3, [pc, #536]	@ (801330c <_dtoa_r+0x5c4>)
 80130f4:	2200      	movs	r2, #0
 80130f6:	4620      	mov	r0, r4
 80130f8:	4629      	mov	r1, r5
 80130fa:	f7ed fcc7 	bl	8000a8c <__aeabi_dcmplt>
 80130fe:	2800      	cmp	r0, #0
 8013100:	f000 80ae 	beq.w	8013260 <_dtoa_r+0x518>
 8013104:	9b07      	ldr	r3, [sp, #28]
 8013106:	2b00      	cmp	r3, #0
 8013108:	f000 80aa 	beq.w	8013260 <_dtoa_r+0x518>
 801310c:	9b00      	ldr	r3, [sp, #0]
 801310e:	2b00      	cmp	r3, #0
 8013110:	dd37      	ble.n	8013182 <_dtoa_r+0x43a>
 8013112:	1e7b      	subs	r3, r7, #1
 8013114:	9304      	str	r3, [sp, #16]
 8013116:	4620      	mov	r0, r4
 8013118:	4b7d      	ldr	r3, [pc, #500]	@ (8013310 <_dtoa_r+0x5c8>)
 801311a:	2200      	movs	r2, #0
 801311c:	4629      	mov	r1, r5
 801311e:	f7ed fa43 	bl	80005a8 <__aeabi_dmul>
 8013122:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013126:	9c00      	ldr	r4, [sp, #0]
 8013128:	3601      	adds	r6, #1
 801312a:	4630      	mov	r0, r6
 801312c:	f7ed f9d2 	bl	80004d4 <__aeabi_i2d>
 8013130:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013134:	f7ed fa38 	bl	80005a8 <__aeabi_dmul>
 8013138:	4b76      	ldr	r3, [pc, #472]	@ (8013314 <_dtoa_r+0x5cc>)
 801313a:	2200      	movs	r2, #0
 801313c:	f7ed f87e 	bl	800023c <__adddf3>
 8013140:	4605      	mov	r5, r0
 8013142:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8013146:	2c00      	cmp	r4, #0
 8013148:	f040 808d 	bne.w	8013266 <_dtoa_r+0x51e>
 801314c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013150:	4b71      	ldr	r3, [pc, #452]	@ (8013318 <_dtoa_r+0x5d0>)
 8013152:	2200      	movs	r2, #0
 8013154:	f7ed f870 	bl	8000238 <__aeabi_dsub>
 8013158:	4602      	mov	r2, r0
 801315a:	460b      	mov	r3, r1
 801315c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013160:	462a      	mov	r2, r5
 8013162:	4633      	mov	r3, r6
 8013164:	f7ed fcb0 	bl	8000ac8 <__aeabi_dcmpgt>
 8013168:	2800      	cmp	r0, #0
 801316a:	f040 828b 	bne.w	8013684 <_dtoa_r+0x93c>
 801316e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013172:	462a      	mov	r2, r5
 8013174:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8013178:	f7ed fc88 	bl	8000a8c <__aeabi_dcmplt>
 801317c:	2800      	cmp	r0, #0
 801317e:	f040 8128 	bne.w	80133d2 <_dtoa_r+0x68a>
 8013182:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8013186:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801318a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801318c:	2b00      	cmp	r3, #0
 801318e:	f2c0 815a 	blt.w	8013446 <_dtoa_r+0x6fe>
 8013192:	2f0e      	cmp	r7, #14
 8013194:	f300 8157 	bgt.w	8013446 <_dtoa_r+0x6fe>
 8013198:	4b5a      	ldr	r3, [pc, #360]	@ (8013304 <_dtoa_r+0x5bc>)
 801319a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801319e:	ed93 7b00 	vldr	d7, [r3]
 80131a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	ed8d 7b00 	vstr	d7, [sp]
 80131aa:	da03      	bge.n	80131b4 <_dtoa_r+0x46c>
 80131ac:	9b07      	ldr	r3, [sp, #28]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	f340 8101 	ble.w	80133b6 <_dtoa_r+0x66e>
 80131b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80131b8:	4656      	mov	r6, sl
 80131ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80131be:	4620      	mov	r0, r4
 80131c0:	4629      	mov	r1, r5
 80131c2:	f7ed fb1b 	bl	80007fc <__aeabi_ddiv>
 80131c6:	f7ed fc9f 	bl	8000b08 <__aeabi_d2iz>
 80131ca:	4680      	mov	r8, r0
 80131cc:	f7ed f982 	bl	80004d4 <__aeabi_i2d>
 80131d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80131d4:	f7ed f9e8 	bl	80005a8 <__aeabi_dmul>
 80131d8:	4602      	mov	r2, r0
 80131da:	460b      	mov	r3, r1
 80131dc:	4620      	mov	r0, r4
 80131de:	4629      	mov	r1, r5
 80131e0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80131e4:	f7ed f828 	bl	8000238 <__aeabi_dsub>
 80131e8:	f806 4b01 	strb.w	r4, [r6], #1
 80131ec:	9d07      	ldr	r5, [sp, #28]
 80131ee:	eba6 040a 	sub.w	r4, r6, sl
 80131f2:	42a5      	cmp	r5, r4
 80131f4:	4602      	mov	r2, r0
 80131f6:	460b      	mov	r3, r1
 80131f8:	f040 8117 	bne.w	801342a <_dtoa_r+0x6e2>
 80131fc:	f7ed f81e 	bl	800023c <__adddf3>
 8013200:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013204:	4604      	mov	r4, r0
 8013206:	460d      	mov	r5, r1
 8013208:	f7ed fc5e 	bl	8000ac8 <__aeabi_dcmpgt>
 801320c:	2800      	cmp	r0, #0
 801320e:	f040 80f9 	bne.w	8013404 <_dtoa_r+0x6bc>
 8013212:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013216:	4620      	mov	r0, r4
 8013218:	4629      	mov	r1, r5
 801321a:	f7ed fc2d 	bl	8000a78 <__aeabi_dcmpeq>
 801321e:	b118      	cbz	r0, 8013228 <_dtoa_r+0x4e0>
 8013220:	f018 0f01 	tst.w	r8, #1
 8013224:	f040 80ee 	bne.w	8013404 <_dtoa_r+0x6bc>
 8013228:	4649      	mov	r1, r9
 801322a:	4658      	mov	r0, fp
 801322c:	f000 fc90 	bl	8013b50 <_Bfree>
 8013230:	2300      	movs	r3, #0
 8013232:	7033      	strb	r3, [r6, #0]
 8013234:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013236:	3701      	adds	r7, #1
 8013238:	601f      	str	r7, [r3, #0]
 801323a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801323c:	2b00      	cmp	r3, #0
 801323e:	f000 831d 	beq.w	801387c <_dtoa_r+0xb34>
 8013242:	601e      	str	r6, [r3, #0]
 8013244:	e31a      	b.n	801387c <_dtoa_r+0xb34>
 8013246:	07e2      	lsls	r2, r4, #31
 8013248:	d505      	bpl.n	8013256 <_dtoa_r+0x50e>
 801324a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801324e:	f7ed f9ab 	bl	80005a8 <__aeabi_dmul>
 8013252:	3601      	adds	r6, #1
 8013254:	2301      	movs	r3, #1
 8013256:	1064      	asrs	r4, r4, #1
 8013258:	3508      	adds	r5, #8
 801325a:	e73f      	b.n	80130dc <_dtoa_r+0x394>
 801325c:	2602      	movs	r6, #2
 801325e:	e742      	b.n	80130e6 <_dtoa_r+0x39e>
 8013260:	9c07      	ldr	r4, [sp, #28]
 8013262:	9704      	str	r7, [sp, #16]
 8013264:	e761      	b.n	801312a <_dtoa_r+0x3e2>
 8013266:	4b27      	ldr	r3, [pc, #156]	@ (8013304 <_dtoa_r+0x5bc>)
 8013268:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801326a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801326e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013272:	4454      	add	r4, sl
 8013274:	2900      	cmp	r1, #0
 8013276:	d053      	beq.n	8013320 <_dtoa_r+0x5d8>
 8013278:	4928      	ldr	r1, [pc, #160]	@ (801331c <_dtoa_r+0x5d4>)
 801327a:	2000      	movs	r0, #0
 801327c:	f7ed fabe 	bl	80007fc <__aeabi_ddiv>
 8013280:	4633      	mov	r3, r6
 8013282:	462a      	mov	r2, r5
 8013284:	f7ec ffd8 	bl	8000238 <__aeabi_dsub>
 8013288:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801328c:	4656      	mov	r6, sl
 801328e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013292:	f7ed fc39 	bl	8000b08 <__aeabi_d2iz>
 8013296:	4605      	mov	r5, r0
 8013298:	f7ed f91c 	bl	80004d4 <__aeabi_i2d>
 801329c:	4602      	mov	r2, r0
 801329e:	460b      	mov	r3, r1
 80132a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80132a4:	f7ec ffc8 	bl	8000238 <__aeabi_dsub>
 80132a8:	3530      	adds	r5, #48	@ 0x30
 80132aa:	4602      	mov	r2, r0
 80132ac:	460b      	mov	r3, r1
 80132ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80132b2:	f806 5b01 	strb.w	r5, [r6], #1
 80132b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80132ba:	f7ed fbe7 	bl	8000a8c <__aeabi_dcmplt>
 80132be:	2800      	cmp	r0, #0
 80132c0:	d171      	bne.n	80133a6 <_dtoa_r+0x65e>
 80132c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80132c6:	4911      	ldr	r1, [pc, #68]	@ (801330c <_dtoa_r+0x5c4>)
 80132c8:	2000      	movs	r0, #0
 80132ca:	f7ec ffb5 	bl	8000238 <__aeabi_dsub>
 80132ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80132d2:	f7ed fbdb 	bl	8000a8c <__aeabi_dcmplt>
 80132d6:	2800      	cmp	r0, #0
 80132d8:	f040 8095 	bne.w	8013406 <_dtoa_r+0x6be>
 80132dc:	42a6      	cmp	r6, r4
 80132de:	f43f af50 	beq.w	8013182 <_dtoa_r+0x43a>
 80132e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80132e6:	4b0a      	ldr	r3, [pc, #40]	@ (8013310 <_dtoa_r+0x5c8>)
 80132e8:	2200      	movs	r2, #0
 80132ea:	f7ed f95d 	bl	80005a8 <__aeabi_dmul>
 80132ee:	4b08      	ldr	r3, [pc, #32]	@ (8013310 <_dtoa_r+0x5c8>)
 80132f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80132f4:	2200      	movs	r2, #0
 80132f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80132fa:	f7ed f955 	bl	80005a8 <__aeabi_dmul>
 80132fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013302:	e7c4      	b.n	801328e <_dtoa_r+0x546>
 8013304:	08014cc0 	.word	0x08014cc0
 8013308:	08014c98 	.word	0x08014c98
 801330c:	3ff00000 	.word	0x3ff00000
 8013310:	40240000 	.word	0x40240000
 8013314:	401c0000 	.word	0x401c0000
 8013318:	40140000 	.word	0x40140000
 801331c:	3fe00000 	.word	0x3fe00000
 8013320:	4631      	mov	r1, r6
 8013322:	4628      	mov	r0, r5
 8013324:	f7ed f940 	bl	80005a8 <__aeabi_dmul>
 8013328:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801332c:	9415      	str	r4, [sp, #84]	@ 0x54
 801332e:	4656      	mov	r6, sl
 8013330:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013334:	f7ed fbe8 	bl	8000b08 <__aeabi_d2iz>
 8013338:	4605      	mov	r5, r0
 801333a:	f7ed f8cb 	bl	80004d4 <__aeabi_i2d>
 801333e:	4602      	mov	r2, r0
 8013340:	460b      	mov	r3, r1
 8013342:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013346:	f7ec ff77 	bl	8000238 <__aeabi_dsub>
 801334a:	3530      	adds	r5, #48	@ 0x30
 801334c:	f806 5b01 	strb.w	r5, [r6], #1
 8013350:	4602      	mov	r2, r0
 8013352:	460b      	mov	r3, r1
 8013354:	42a6      	cmp	r6, r4
 8013356:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801335a:	f04f 0200 	mov.w	r2, #0
 801335e:	d124      	bne.n	80133aa <_dtoa_r+0x662>
 8013360:	4bac      	ldr	r3, [pc, #688]	@ (8013614 <_dtoa_r+0x8cc>)
 8013362:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8013366:	f7ec ff69 	bl	800023c <__adddf3>
 801336a:	4602      	mov	r2, r0
 801336c:	460b      	mov	r3, r1
 801336e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013372:	f7ed fba9 	bl	8000ac8 <__aeabi_dcmpgt>
 8013376:	2800      	cmp	r0, #0
 8013378:	d145      	bne.n	8013406 <_dtoa_r+0x6be>
 801337a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801337e:	49a5      	ldr	r1, [pc, #660]	@ (8013614 <_dtoa_r+0x8cc>)
 8013380:	2000      	movs	r0, #0
 8013382:	f7ec ff59 	bl	8000238 <__aeabi_dsub>
 8013386:	4602      	mov	r2, r0
 8013388:	460b      	mov	r3, r1
 801338a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801338e:	f7ed fb7d 	bl	8000a8c <__aeabi_dcmplt>
 8013392:	2800      	cmp	r0, #0
 8013394:	f43f aef5 	beq.w	8013182 <_dtoa_r+0x43a>
 8013398:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801339a:	1e73      	subs	r3, r6, #1
 801339c:	9315      	str	r3, [sp, #84]	@ 0x54
 801339e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80133a2:	2b30      	cmp	r3, #48	@ 0x30
 80133a4:	d0f8      	beq.n	8013398 <_dtoa_r+0x650>
 80133a6:	9f04      	ldr	r7, [sp, #16]
 80133a8:	e73e      	b.n	8013228 <_dtoa_r+0x4e0>
 80133aa:	4b9b      	ldr	r3, [pc, #620]	@ (8013618 <_dtoa_r+0x8d0>)
 80133ac:	f7ed f8fc 	bl	80005a8 <__aeabi_dmul>
 80133b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80133b4:	e7bc      	b.n	8013330 <_dtoa_r+0x5e8>
 80133b6:	d10c      	bne.n	80133d2 <_dtoa_r+0x68a>
 80133b8:	4b98      	ldr	r3, [pc, #608]	@ (801361c <_dtoa_r+0x8d4>)
 80133ba:	2200      	movs	r2, #0
 80133bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80133c0:	f7ed f8f2 	bl	80005a8 <__aeabi_dmul>
 80133c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80133c8:	f7ed fb74 	bl	8000ab4 <__aeabi_dcmpge>
 80133cc:	2800      	cmp	r0, #0
 80133ce:	f000 8157 	beq.w	8013680 <_dtoa_r+0x938>
 80133d2:	2400      	movs	r4, #0
 80133d4:	4625      	mov	r5, r4
 80133d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80133d8:	43db      	mvns	r3, r3
 80133da:	9304      	str	r3, [sp, #16]
 80133dc:	4656      	mov	r6, sl
 80133de:	2700      	movs	r7, #0
 80133e0:	4621      	mov	r1, r4
 80133e2:	4658      	mov	r0, fp
 80133e4:	f000 fbb4 	bl	8013b50 <_Bfree>
 80133e8:	2d00      	cmp	r5, #0
 80133ea:	d0dc      	beq.n	80133a6 <_dtoa_r+0x65e>
 80133ec:	b12f      	cbz	r7, 80133fa <_dtoa_r+0x6b2>
 80133ee:	42af      	cmp	r7, r5
 80133f0:	d003      	beq.n	80133fa <_dtoa_r+0x6b2>
 80133f2:	4639      	mov	r1, r7
 80133f4:	4658      	mov	r0, fp
 80133f6:	f000 fbab 	bl	8013b50 <_Bfree>
 80133fa:	4629      	mov	r1, r5
 80133fc:	4658      	mov	r0, fp
 80133fe:	f000 fba7 	bl	8013b50 <_Bfree>
 8013402:	e7d0      	b.n	80133a6 <_dtoa_r+0x65e>
 8013404:	9704      	str	r7, [sp, #16]
 8013406:	4633      	mov	r3, r6
 8013408:	461e      	mov	r6, r3
 801340a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801340e:	2a39      	cmp	r2, #57	@ 0x39
 8013410:	d107      	bne.n	8013422 <_dtoa_r+0x6da>
 8013412:	459a      	cmp	sl, r3
 8013414:	d1f8      	bne.n	8013408 <_dtoa_r+0x6c0>
 8013416:	9a04      	ldr	r2, [sp, #16]
 8013418:	3201      	adds	r2, #1
 801341a:	9204      	str	r2, [sp, #16]
 801341c:	2230      	movs	r2, #48	@ 0x30
 801341e:	f88a 2000 	strb.w	r2, [sl]
 8013422:	781a      	ldrb	r2, [r3, #0]
 8013424:	3201      	adds	r2, #1
 8013426:	701a      	strb	r2, [r3, #0]
 8013428:	e7bd      	b.n	80133a6 <_dtoa_r+0x65e>
 801342a:	4b7b      	ldr	r3, [pc, #492]	@ (8013618 <_dtoa_r+0x8d0>)
 801342c:	2200      	movs	r2, #0
 801342e:	f7ed f8bb 	bl	80005a8 <__aeabi_dmul>
 8013432:	2200      	movs	r2, #0
 8013434:	2300      	movs	r3, #0
 8013436:	4604      	mov	r4, r0
 8013438:	460d      	mov	r5, r1
 801343a:	f7ed fb1d 	bl	8000a78 <__aeabi_dcmpeq>
 801343e:	2800      	cmp	r0, #0
 8013440:	f43f aebb 	beq.w	80131ba <_dtoa_r+0x472>
 8013444:	e6f0      	b.n	8013228 <_dtoa_r+0x4e0>
 8013446:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013448:	2a00      	cmp	r2, #0
 801344a:	f000 80db 	beq.w	8013604 <_dtoa_r+0x8bc>
 801344e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013450:	2a01      	cmp	r2, #1
 8013452:	f300 80bf 	bgt.w	80135d4 <_dtoa_r+0x88c>
 8013456:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013458:	2a00      	cmp	r2, #0
 801345a:	f000 80b7 	beq.w	80135cc <_dtoa_r+0x884>
 801345e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8013462:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8013464:	4646      	mov	r6, r8
 8013466:	9a08      	ldr	r2, [sp, #32]
 8013468:	2101      	movs	r1, #1
 801346a:	441a      	add	r2, r3
 801346c:	4658      	mov	r0, fp
 801346e:	4498      	add	r8, r3
 8013470:	9208      	str	r2, [sp, #32]
 8013472:	f000 fc21 	bl	8013cb8 <__i2b>
 8013476:	4605      	mov	r5, r0
 8013478:	b15e      	cbz	r6, 8013492 <_dtoa_r+0x74a>
 801347a:	9b08      	ldr	r3, [sp, #32]
 801347c:	2b00      	cmp	r3, #0
 801347e:	dd08      	ble.n	8013492 <_dtoa_r+0x74a>
 8013480:	42b3      	cmp	r3, r6
 8013482:	9a08      	ldr	r2, [sp, #32]
 8013484:	bfa8      	it	ge
 8013486:	4633      	movge	r3, r6
 8013488:	eba8 0803 	sub.w	r8, r8, r3
 801348c:	1af6      	subs	r6, r6, r3
 801348e:	1ad3      	subs	r3, r2, r3
 8013490:	9308      	str	r3, [sp, #32]
 8013492:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013494:	b1f3      	cbz	r3, 80134d4 <_dtoa_r+0x78c>
 8013496:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013498:	2b00      	cmp	r3, #0
 801349a:	f000 80b7 	beq.w	801360c <_dtoa_r+0x8c4>
 801349e:	b18c      	cbz	r4, 80134c4 <_dtoa_r+0x77c>
 80134a0:	4629      	mov	r1, r5
 80134a2:	4622      	mov	r2, r4
 80134a4:	4658      	mov	r0, fp
 80134a6:	f000 fcc7 	bl	8013e38 <__pow5mult>
 80134aa:	464a      	mov	r2, r9
 80134ac:	4601      	mov	r1, r0
 80134ae:	4605      	mov	r5, r0
 80134b0:	4658      	mov	r0, fp
 80134b2:	f000 fc17 	bl	8013ce4 <__multiply>
 80134b6:	4649      	mov	r1, r9
 80134b8:	9004      	str	r0, [sp, #16]
 80134ba:	4658      	mov	r0, fp
 80134bc:	f000 fb48 	bl	8013b50 <_Bfree>
 80134c0:	9b04      	ldr	r3, [sp, #16]
 80134c2:	4699      	mov	r9, r3
 80134c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80134c6:	1b1a      	subs	r2, r3, r4
 80134c8:	d004      	beq.n	80134d4 <_dtoa_r+0x78c>
 80134ca:	4649      	mov	r1, r9
 80134cc:	4658      	mov	r0, fp
 80134ce:	f000 fcb3 	bl	8013e38 <__pow5mult>
 80134d2:	4681      	mov	r9, r0
 80134d4:	2101      	movs	r1, #1
 80134d6:	4658      	mov	r0, fp
 80134d8:	f000 fbee 	bl	8013cb8 <__i2b>
 80134dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80134de:	4604      	mov	r4, r0
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	f000 81cf 	beq.w	8013884 <_dtoa_r+0xb3c>
 80134e6:	461a      	mov	r2, r3
 80134e8:	4601      	mov	r1, r0
 80134ea:	4658      	mov	r0, fp
 80134ec:	f000 fca4 	bl	8013e38 <__pow5mult>
 80134f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80134f2:	2b01      	cmp	r3, #1
 80134f4:	4604      	mov	r4, r0
 80134f6:	f300 8095 	bgt.w	8013624 <_dtoa_r+0x8dc>
 80134fa:	9b02      	ldr	r3, [sp, #8]
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	f040 8087 	bne.w	8013610 <_dtoa_r+0x8c8>
 8013502:	9b03      	ldr	r3, [sp, #12]
 8013504:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013508:	2b00      	cmp	r3, #0
 801350a:	f040 8089 	bne.w	8013620 <_dtoa_r+0x8d8>
 801350e:	9b03      	ldr	r3, [sp, #12]
 8013510:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013514:	0d1b      	lsrs	r3, r3, #20
 8013516:	051b      	lsls	r3, r3, #20
 8013518:	b12b      	cbz	r3, 8013526 <_dtoa_r+0x7de>
 801351a:	9b08      	ldr	r3, [sp, #32]
 801351c:	3301      	adds	r3, #1
 801351e:	9308      	str	r3, [sp, #32]
 8013520:	f108 0801 	add.w	r8, r8, #1
 8013524:	2301      	movs	r3, #1
 8013526:	930a      	str	r3, [sp, #40]	@ 0x28
 8013528:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801352a:	2b00      	cmp	r3, #0
 801352c:	f000 81b0 	beq.w	8013890 <_dtoa_r+0xb48>
 8013530:	6923      	ldr	r3, [r4, #16]
 8013532:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013536:	6918      	ldr	r0, [r3, #16]
 8013538:	f000 fb72 	bl	8013c20 <__hi0bits>
 801353c:	f1c0 0020 	rsb	r0, r0, #32
 8013540:	9b08      	ldr	r3, [sp, #32]
 8013542:	4418      	add	r0, r3
 8013544:	f010 001f 	ands.w	r0, r0, #31
 8013548:	d077      	beq.n	801363a <_dtoa_r+0x8f2>
 801354a:	f1c0 0320 	rsb	r3, r0, #32
 801354e:	2b04      	cmp	r3, #4
 8013550:	dd6b      	ble.n	801362a <_dtoa_r+0x8e2>
 8013552:	9b08      	ldr	r3, [sp, #32]
 8013554:	f1c0 001c 	rsb	r0, r0, #28
 8013558:	4403      	add	r3, r0
 801355a:	4480      	add	r8, r0
 801355c:	4406      	add	r6, r0
 801355e:	9308      	str	r3, [sp, #32]
 8013560:	f1b8 0f00 	cmp.w	r8, #0
 8013564:	dd05      	ble.n	8013572 <_dtoa_r+0x82a>
 8013566:	4649      	mov	r1, r9
 8013568:	4642      	mov	r2, r8
 801356a:	4658      	mov	r0, fp
 801356c:	f000 fcbe 	bl	8013eec <__lshift>
 8013570:	4681      	mov	r9, r0
 8013572:	9b08      	ldr	r3, [sp, #32]
 8013574:	2b00      	cmp	r3, #0
 8013576:	dd05      	ble.n	8013584 <_dtoa_r+0x83c>
 8013578:	4621      	mov	r1, r4
 801357a:	461a      	mov	r2, r3
 801357c:	4658      	mov	r0, fp
 801357e:	f000 fcb5 	bl	8013eec <__lshift>
 8013582:	4604      	mov	r4, r0
 8013584:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013586:	2b00      	cmp	r3, #0
 8013588:	d059      	beq.n	801363e <_dtoa_r+0x8f6>
 801358a:	4621      	mov	r1, r4
 801358c:	4648      	mov	r0, r9
 801358e:	f000 fd19 	bl	8013fc4 <__mcmp>
 8013592:	2800      	cmp	r0, #0
 8013594:	da53      	bge.n	801363e <_dtoa_r+0x8f6>
 8013596:	1e7b      	subs	r3, r7, #1
 8013598:	9304      	str	r3, [sp, #16]
 801359a:	4649      	mov	r1, r9
 801359c:	2300      	movs	r3, #0
 801359e:	220a      	movs	r2, #10
 80135a0:	4658      	mov	r0, fp
 80135a2:	f000 faf7 	bl	8013b94 <__multadd>
 80135a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80135a8:	4681      	mov	r9, r0
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	f000 8172 	beq.w	8013894 <_dtoa_r+0xb4c>
 80135b0:	2300      	movs	r3, #0
 80135b2:	4629      	mov	r1, r5
 80135b4:	220a      	movs	r2, #10
 80135b6:	4658      	mov	r0, fp
 80135b8:	f000 faec 	bl	8013b94 <__multadd>
 80135bc:	9b00      	ldr	r3, [sp, #0]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	4605      	mov	r5, r0
 80135c2:	dc67      	bgt.n	8013694 <_dtoa_r+0x94c>
 80135c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80135c6:	2b02      	cmp	r3, #2
 80135c8:	dc41      	bgt.n	801364e <_dtoa_r+0x906>
 80135ca:	e063      	b.n	8013694 <_dtoa_r+0x94c>
 80135cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80135ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80135d2:	e746      	b.n	8013462 <_dtoa_r+0x71a>
 80135d4:	9b07      	ldr	r3, [sp, #28]
 80135d6:	1e5c      	subs	r4, r3, #1
 80135d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80135da:	42a3      	cmp	r3, r4
 80135dc:	bfbf      	itttt	lt
 80135de:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80135e0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80135e2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80135e4:	1ae3      	sublt	r3, r4, r3
 80135e6:	bfb4      	ite	lt
 80135e8:	18d2      	addlt	r2, r2, r3
 80135ea:	1b1c      	subge	r4, r3, r4
 80135ec:	9b07      	ldr	r3, [sp, #28]
 80135ee:	bfbc      	itt	lt
 80135f0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80135f2:	2400      	movlt	r4, #0
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	bfb5      	itete	lt
 80135f8:	eba8 0603 	sublt.w	r6, r8, r3
 80135fc:	9b07      	ldrge	r3, [sp, #28]
 80135fe:	2300      	movlt	r3, #0
 8013600:	4646      	movge	r6, r8
 8013602:	e730      	b.n	8013466 <_dtoa_r+0x71e>
 8013604:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8013606:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8013608:	4646      	mov	r6, r8
 801360a:	e735      	b.n	8013478 <_dtoa_r+0x730>
 801360c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801360e:	e75c      	b.n	80134ca <_dtoa_r+0x782>
 8013610:	2300      	movs	r3, #0
 8013612:	e788      	b.n	8013526 <_dtoa_r+0x7de>
 8013614:	3fe00000 	.word	0x3fe00000
 8013618:	40240000 	.word	0x40240000
 801361c:	40140000 	.word	0x40140000
 8013620:	9b02      	ldr	r3, [sp, #8]
 8013622:	e780      	b.n	8013526 <_dtoa_r+0x7de>
 8013624:	2300      	movs	r3, #0
 8013626:	930a      	str	r3, [sp, #40]	@ 0x28
 8013628:	e782      	b.n	8013530 <_dtoa_r+0x7e8>
 801362a:	d099      	beq.n	8013560 <_dtoa_r+0x818>
 801362c:	9a08      	ldr	r2, [sp, #32]
 801362e:	331c      	adds	r3, #28
 8013630:	441a      	add	r2, r3
 8013632:	4498      	add	r8, r3
 8013634:	441e      	add	r6, r3
 8013636:	9208      	str	r2, [sp, #32]
 8013638:	e792      	b.n	8013560 <_dtoa_r+0x818>
 801363a:	4603      	mov	r3, r0
 801363c:	e7f6      	b.n	801362c <_dtoa_r+0x8e4>
 801363e:	9b07      	ldr	r3, [sp, #28]
 8013640:	9704      	str	r7, [sp, #16]
 8013642:	2b00      	cmp	r3, #0
 8013644:	dc20      	bgt.n	8013688 <_dtoa_r+0x940>
 8013646:	9300      	str	r3, [sp, #0]
 8013648:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801364a:	2b02      	cmp	r3, #2
 801364c:	dd1e      	ble.n	801368c <_dtoa_r+0x944>
 801364e:	9b00      	ldr	r3, [sp, #0]
 8013650:	2b00      	cmp	r3, #0
 8013652:	f47f aec0 	bne.w	80133d6 <_dtoa_r+0x68e>
 8013656:	4621      	mov	r1, r4
 8013658:	2205      	movs	r2, #5
 801365a:	4658      	mov	r0, fp
 801365c:	f000 fa9a 	bl	8013b94 <__multadd>
 8013660:	4601      	mov	r1, r0
 8013662:	4604      	mov	r4, r0
 8013664:	4648      	mov	r0, r9
 8013666:	f000 fcad 	bl	8013fc4 <__mcmp>
 801366a:	2800      	cmp	r0, #0
 801366c:	f77f aeb3 	ble.w	80133d6 <_dtoa_r+0x68e>
 8013670:	4656      	mov	r6, sl
 8013672:	2331      	movs	r3, #49	@ 0x31
 8013674:	f806 3b01 	strb.w	r3, [r6], #1
 8013678:	9b04      	ldr	r3, [sp, #16]
 801367a:	3301      	adds	r3, #1
 801367c:	9304      	str	r3, [sp, #16]
 801367e:	e6ae      	b.n	80133de <_dtoa_r+0x696>
 8013680:	9c07      	ldr	r4, [sp, #28]
 8013682:	9704      	str	r7, [sp, #16]
 8013684:	4625      	mov	r5, r4
 8013686:	e7f3      	b.n	8013670 <_dtoa_r+0x928>
 8013688:	9b07      	ldr	r3, [sp, #28]
 801368a:	9300      	str	r3, [sp, #0]
 801368c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801368e:	2b00      	cmp	r3, #0
 8013690:	f000 8104 	beq.w	801389c <_dtoa_r+0xb54>
 8013694:	2e00      	cmp	r6, #0
 8013696:	dd05      	ble.n	80136a4 <_dtoa_r+0x95c>
 8013698:	4629      	mov	r1, r5
 801369a:	4632      	mov	r2, r6
 801369c:	4658      	mov	r0, fp
 801369e:	f000 fc25 	bl	8013eec <__lshift>
 80136a2:	4605      	mov	r5, r0
 80136a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d05a      	beq.n	8013760 <_dtoa_r+0xa18>
 80136aa:	6869      	ldr	r1, [r5, #4]
 80136ac:	4658      	mov	r0, fp
 80136ae:	f000 fa0f 	bl	8013ad0 <_Balloc>
 80136b2:	4606      	mov	r6, r0
 80136b4:	b928      	cbnz	r0, 80136c2 <_dtoa_r+0x97a>
 80136b6:	4b84      	ldr	r3, [pc, #528]	@ (80138c8 <_dtoa_r+0xb80>)
 80136b8:	4602      	mov	r2, r0
 80136ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80136be:	f7ff bb5a 	b.w	8012d76 <_dtoa_r+0x2e>
 80136c2:	692a      	ldr	r2, [r5, #16]
 80136c4:	3202      	adds	r2, #2
 80136c6:	0092      	lsls	r2, r2, #2
 80136c8:	f105 010c 	add.w	r1, r5, #12
 80136cc:	300c      	adds	r0, #12
 80136ce:	f7ff faa2 	bl	8012c16 <memcpy>
 80136d2:	2201      	movs	r2, #1
 80136d4:	4631      	mov	r1, r6
 80136d6:	4658      	mov	r0, fp
 80136d8:	f000 fc08 	bl	8013eec <__lshift>
 80136dc:	f10a 0301 	add.w	r3, sl, #1
 80136e0:	9307      	str	r3, [sp, #28]
 80136e2:	9b00      	ldr	r3, [sp, #0]
 80136e4:	4453      	add	r3, sl
 80136e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80136e8:	9b02      	ldr	r3, [sp, #8]
 80136ea:	f003 0301 	and.w	r3, r3, #1
 80136ee:	462f      	mov	r7, r5
 80136f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80136f2:	4605      	mov	r5, r0
 80136f4:	9b07      	ldr	r3, [sp, #28]
 80136f6:	4621      	mov	r1, r4
 80136f8:	3b01      	subs	r3, #1
 80136fa:	4648      	mov	r0, r9
 80136fc:	9300      	str	r3, [sp, #0]
 80136fe:	f7ff fa98 	bl	8012c32 <quorem>
 8013702:	4639      	mov	r1, r7
 8013704:	9002      	str	r0, [sp, #8]
 8013706:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801370a:	4648      	mov	r0, r9
 801370c:	f000 fc5a 	bl	8013fc4 <__mcmp>
 8013710:	462a      	mov	r2, r5
 8013712:	9008      	str	r0, [sp, #32]
 8013714:	4621      	mov	r1, r4
 8013716:	4658      	mov	r0, fp
 8013718:	f000 fc70 	bl	8013ffc <__mdiff>
 801371c:	68c2      	ldr	r2, [r0, #12]
 801371e:	4606      	mov	r6, r0
 8013720:	bb02      	cbnz	r2, 8013764 <_dtoa_r+0xa1c>
 8013722:	4601      	mov	r1, r0
 8013724:	4648      	mov	r0, r9
 8013726:	f000 fc4d 	bl	8013fc4 <__mcmp>
 801372a:	4602      	mov	r2, r0
 801372c:	4631      	mov	r1, r6
 801372e:	4658      	mov	r0, fp
 8013730:	920e      	str	r2, [sp, #56]	@ 0x38
 8013732:	f000 fa0d 	bl	8013b50 <_Bfree>
 8013736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013738:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801373a:	9e07      	ldr	r6, [sp, #28]
 801373c:	ea43 0102 	orr.w	r1, r3, r2
 8013740:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013742:	4319      	orrs	r1, r3
 8013744:	d110      	bne.n	8013768 <_dtoa_r+0xa20>
 8013746:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801374a:	d029      	beq.n	80137a0 <_dtoa_r+0xa58>
 801374c:	9b08      	ldr	r3, [sp, #32]
 801374e:	2b00      	cmp	r3, #0
 8013750:	dd02      	ble.n	8013758 <_dtoa_r+0xa10>
 8013752:	9b02      	ldr	r3, [sp, #8]
 8013754:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8013758:	9b00      	ldr	r3, [sp, #0]
 801375a:	f883 8000 	strb.w	r8, [r3]
 801375e:	e63f      	b.n	80133e0 <_dtoa_r+0x698>
 8013760:	4628      	mov	r0, r5
 8013762:	e7bb      	b.n	80136dc <_dtoa_r+0x994>
 8013764:	2201      	movs	r2, #1
 8013766:	e7e1      	b.n	801372c <_dtoa_r+0x9e4>
 8013768:	9b08      	ldr	r3, [sp, #32]
 801376a:	2b00      	cmp	r3, #0
 801376c:	db04      	blt.n	8013778 <_dtoa_r+0xa30>
 801376e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013770:	430b      	orrs	r3, r1
 8013772:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013774:	430b      	orrs	r3, r1
 8013776:	d120      	bne.n	80137ba <_dtoa_r+0xa72>
 8013778:	2a00      	cmp	r2, #0
 801377a:	dded      	ble.n	8013758 <_dtoa_r+0xa10>
 801377c:	4649      	mov	r1, r9
 801377e:	2201      	movs	r2, #1
 8013780:	4658      	mov	r0, fp
 8013782:	f000 fbb3 	bl	8013eec <__lshift>
 8013786:	4621      	mov	r1, r4
 8013788:	4681      	mov	r9, r0
 801378a:	f000 fc1b 	bl	8013fc4 <__mcmp>
 801378e:	2800      	cmp	r0, #0
 8013790:	dc03      	bgt.n	801379a <_dtoa_r+0xa52>
 8013792:	d1e1      	bne.n	8013758 <_dtoa_r+0xa10>
 8013794:	f018 0f01 	tst.w	r8, #1
 8013798:	d0de      	beq.n	8013758 <_dtoa_r+0xa10>
 801379a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801379e:	d1d8      	bne.n	8013752 <_dtoa_r+0xa0a>
 80137a0:	9a00      	ldr	r2, [sp, #0]
 80137a2:	2339      	movs	r3, #57	@ 0x39
 80137a4:	7013      	strb	r3, [r2, #0]
 80137a6:	4633      	mov	r3, r6
 80137a8:	461e      	mov	r6, r3
 80137aa:	3b01      	subs	r3, #1
 80137ac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80137b0:	2a39      	cmp	r2, #57	@ 0x39
 80137b2:	d052      	beq.n	801385a <_dtoa_r+0xb12>
 80137b4:	3201      	adds	r2, #1
 80137b6:	701a      	strb	r2, [r3, #0]
 80137b8:	e612      	b.n	80133e0 <_dtoa_r+0x698>
 80137ba:	2a00      	cmp	r2, #0
 80137bc:	dd07      	ble.n	80137ce <_dtoa_r+0xa86>
 80137be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80137c2:	d0ed      	beq.n	80137a0 <_dtoa_r+0xa58>
 80137c4:	9a00      	ldr	r2, [sp, #0]
 80137c6:	f108 0301 	add.w	r3, r8, #1
 80137ca:	7013      	strb	r3, [r2, #0]
 80137cc:	e608      	b.n	80133e0 <_dtoa_r+0x698>
 80137ce:	9b07      	ldr	r3, [sp, #28]
 80137d0:	9a07      	ldr	r2, [sp, #28]
 80137d2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80137d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80137d8:	4293      	cmp	r3, r2
 80137da:	d028      	beq.n	801382e <_dtoa_r+0xae6>
 80137dc:	4649      	mov	r1, r9
 80137de:	2300      	movs	r3, #0
 80137e0:	220a      	movs	r2, #10
 80137e2:	4658      	mov	r0, fp
 80137e4:	f000 f9d6 	bl	8013b94 <__multadd>
 80137e8:	42af      	cmp	r7, r5
 80137ea:	4681      	mov	r9, r0
 80137ec:	f04f 0300 	mov.w	r3, #0
 80137f0:	f04f 020a 	mov.w	r2, #10
 80137f4:	4639      	mov	r1, r7
 80137f6:	4658      	mov	r0, fp
 80137f8:	d107      	bne.n	801380a <_dtoa_r+0xac2>
 80137fa:	f000 f9cb 	bl	8013b94 <__multadd>
 80137fe:	4607      	mov	r7, r0
 8013800:	4605      	mov	r5, r0
 8013802:	9b07      	ldr	r3, [sp, #28]
 8013804:	3301      	adds	r3, #1
 8013806:	9307      	str	r3, [sp, #28]
 8013808:	e774      	b.n	80136f4 <_dtoa_r+0x9ac>
 801380a:	f000 f9c3 	bl	8013b94 <__multadd>
 801380e:	4629      	mov	r1, r5
 8013810:	4607      	mov	r7, r0
 8013812:	2300      	movs	r3, #0
 8013814:	220a      	movs	r2, #10
 8013816:	4658      	mov	r0, fp
 8013818:	f000 f9bc 	bl	8013b94 <__multadd>
 801381c:	4605      	mov	r5, r0
 801381e:	e7f0      	b.n	8013802 <_dtoa_r+0xaba>
 8013820:	9b00      	ldr	r3, [sp, #0]
 8013822:	2b00      	cmp	r3, #0
 8013824:	bfcc      	ite	gt
 8013826:	461e      	movgt	r6, r3
 8013828:	2601      	movle	r6, #1
 801382a:	4456      	add	r6, sl
 801382c:	2700      	movs	r7, #0
 801382e:	4649      	mov	r1, r9
 8013830:	2201      	movs	r2, #1
 8013832:	4658      	mov	r0, fp
 8013834:	f000 fb5a 	bl	8013eec <__lshift>
 8013838:	4621      	mov	r1, r4
 801383a:	4681      	mov	r9, r0
 801383c:	f000 fbc2 	bl	8013fc4 <__mcmp>
 8013840:	2800      	cmp	r0, #0
 8013842:	dcb0      	bgt.n	80137a6 <_dtoa_r+0xa5e>
 8013844:	d102      	bne.n	801384c <_dtoa_r+0xb04>
 8013846:	f018 0f01 	tst.w	r8, #1
 801384a:	d1ac      	bne.n	80137a6 <_dtoa_r+0xa5e>
 801384c:	4633      	mov	r3, r6
 801384e:	461e      	mov	r6, r3
 8013850:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013854:	2a30      	cmp	r2, #48	@ 0x30
 8013856:	d0fa      	beq.n	801384e <_dtoa_r+0xb06>
 8013858:	e5c2      	b.n	80133e0 <_dtoa_r+0x698>
 801385a:	459a      	cmp	sl, r3
 801385c:	d1a4      	bne.n	80137a8 <_dtoa_r+0xa60>
 801385e:	9b04      	ldr	r3, [sp, #16]
 8013860:	3301      	adds	r3, #1
 8013862:	9304      	str	r3, [sp, #16]
 8013864:	2331      	movs	r3, #49	@ 0x31
 8013866:	f88a 3000 	strb.w	r3, [sl]
 801386a:	e5b9      	b.n	80133e0 <_dtoa_r+0x698>
 801386c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801386e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80138cc <_dtoa_r+0xb84>
 8013872:	b11b      	cbz	r3, 801387c <_dtoa_r+0xb34>
 8013874:	f10a 0308 	add.w	r3, sl, #8
 8013878:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801387a:	6013      	str	r3, [r2, #0]
 801387c:	4650      	mov	r0, sl
 801387e:	b019      	add	sp, #100	@ 0x64
 8013880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013884:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013886:	2b01      	cmp	r3, #1
 8013888:	f77f ae37 	ble.w	80134fa <_dtoa_r+0x7b2>
 801388c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801388e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013890:	2001      	movs	r0, #1
 8013892:	e655      	b.n	8013540 <_dtoa_r+0x7f8>
 8013894:	9b00      	ldr	r3, [sp, #0]
 8013896:	2b00      	cmp	r3, #0
 8013898:	f77f aed6 	ble.w	8013648 <_dtoa_r+0x900>
 801389c:	4656      	mov	r6, sl
 801389e:	4621      	mov	r1, r4
 80138a0:	4648      	mov	r0, r9
 80138a2:	f7ff f9c6 	bl	8012c32 <quorem>
 80138a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80138aa:	f806 8b01 	strb.w	r8, [r6], #1
 80138ae:	9b00      	ldr	r3, [sp, #0]
 80138b0:	eba6 020a 	sub.w	r2, r6, sl
 80138b4:	4293      	cmp	r3, r2
 80138b6:	ddb3      	ble.n	8013820 <_dtoa_r+0xad8>
 80138b8:	4649      	mov	r1, r9
 80138ba:	2300      	movs	r3, #0
 80138bc:	220a      	movs	r2, #10
 80138be:	4658      	mov	r0, fp
 80138c0:	f000 f968 	bl	8013b94 <__multadd>
 80138c4:	4681      	mov	r9, r0
 80138c6:	e7ea      	b.n	801389e <_dtoa_r+0xb56>
 80138c8:	08014c1c 	.word	0x08014c1c
 80138cc:	08014ba0 	.word	0x08014ba0

080138d0 <_free_r>:
 80138d0:	b538      	push	{r3, r4, r5, lr}
 80138d2:	4605      	mov	r5, r0
 80138d4:	2900      	cmp	r1, #0
 80138d6:	d041      	beq.n	801395c <_free_r+0x8c>
 80138d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80138dc:	1f0c      	subs	r4, r1, #4
 80138de:	2b00      	cmp	r3, #0
 80138e0:	bfb8      	it	lt
 80138e2:	18e4      	addlt	r4, r4, r3
 80138e4:	f000 f8e8 	bl	8013ab8 <__malloc_lock>
 80138e8:	4a1d      	ldr	r2, [pc, #116]	@ (8013960 <_free_r+0x90>)
 80138ea:	6813      	ldr	r3, [r2, #0]
 80138ec:	b933      	cbnz	r3, 80138fc <_free_r+0x2c>
 80138ee:	6063      	str	r3, [r4, #4]
 80138f0:	6014      	str	r4, [r2, #0]
 80138f2:	4628      	mov	r0, r5
 80138f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80138f8:	f000 b8e4 	b.w	8013ac4 <__malloc_unlock>
 80138fc:	42a3      	cmp	r3, r4
 80138fe:	d908      	bls.n	8013912 <_free_r+0x42>
 8013900:	6820      	ldr	r0, [r4, #0]
 8013902:	1821      	adds	r1, r4, r0
 8013904:	428b      	cmp	r3, r1
 8013906:	bf01      	itttt	eq
 8013908:	6819      	ldreq	r1, [r3, #0]
 801390a:	685b      	ldreq	r3, [r3, #4]
 801390c:	1809      	addeq	r1, r1, r0
 801390e:	6021      	streq	r1, [r4, #0]
 8013910:	e7ed      	b.n	80138ee <_free_r+0x1e>
 8013912:	461a      	mov	r2, r3
 8013914:	685b      	ldr	r3, [r3, #4]
 8013916:	b10b      	cbz	r3, 801391c <_free_r+0x4c>
 8013918:	42a3      	cmp	r3, r4
 801391a:	d9fa      	bls.n	8013912 <_free_r+0x42>
 801391c:	6811      	ldr	r1, [r2, #0]
 801391e:	1850      	adds	r0, r2, r1
 8013920:	42a0      	cmp	r0, r4
 8013922:	d10b      	bne.n	801393c <_free_r+0x6c>
 8013924:	6820      	ldr	r0, [r4, #0]
 8013926:	4401      	add	r1, r0
 8013928:	1850      	adds	r0, r2, r1
 801392a:	4283      	cmp	r3, r0
 801392c:	6011      	str	r1, [r2, #0]
 801392e:	d1e0      	bne.n	80138f2 <_free_r+0x22>
 8013930:	6818      	ldr	r0, [r3, #0]
 8013932:	685b      	ldr	r3, [r3, #4]
 8013934:	6053      	str	r3, [r2, #4]
 8013936:	4408      	add	r0, r1
 8013938:	6010      	str	r0, [r2, #0]
 801393a:	e7da      	b.n	80138f2 <_free_r+0x22>
 801393c:	d902      	bls.n	8013944 <_free_r+0x74>
 801393e:	230c      	movs	r3, #12
 8013940:	602b      	str	r3, [r5, #0]
 8013942:	e7d6      	b.n	80138f2 <_free_r+0x22>
 8013944:	6820      	ldr	r0, [r4, #0]
 8013946:	1821      	adds	r1, r4, r0
 8013948:	428b      	cmp	r3, r1
 801394a:	bf04      	itt	eq
 801394c:	6819      	ldreq	r1, [r3, #0]
 801394e:	685b      	ldreq	r3, [r3, #4]
 8013950:	6063      	str	r3, [r4, #4]
 8013952:	bf04      	itt	eq
 8013954:	1809      	addeq	r1, r1, r0
 8013956:	6021      	streq	r1, [r4, #0]
 8013958:	6054      	str	r4, [r2, #4]
 801395a:	e7ca      	b.n	80138f2 <_free_r+0x22>
 801395c:	bd38      	pop	{r3, r4, r5, pc}
 801395e:	bf00      	nop
 8013960:	200024c8 	.word	0x200024c8

08013964 <malloc>:
 8013964:	4b02      	ldr	r3, [pc, #8]	@ (8013970 <malloc+0xc>)
 8013966:	4601      	mov	r1, r0
 8013968:	6818      	ldr	r0, [r3, #0]
 801396a:	f000 b825 	b.w	80139b8 <_malloc_r>
 801396e:	bf00      	nop
 8013970:	20000134 	.word	0x20000134

08013974 <sbrk_aligned>:
 8013974:	b570      	push	{r4, r5, r6, lr}
 8013976:	4e0f      	ldr	r6, [pc, #60]	@ (80139b4 <sbrk_aligned+0x40>)
 8013978:	460c      	mov	r4, r1
 801397a:	6831      	ldr	r1, [r6, #0]
 801397c:	4605      	mov	r5, r0
 801397e:	b911      	cbnz	r1, 8013986 <sbrk_aligned+0x12>
 8013980:	f000 fede 	bl	8014740 <_sbrk_r>
 8013984:	6030      	str	r0, [r6, #0]
 8013986:	4621      	mov	r1, r4
 8013988:	4628      	mov	r0, r5
 801398a:	f000 fed9 	bl	8014740 <_sbrk_r>
 801398e:	1c43      	adds	r3, r0, #1
 8013990:	d103      	bne.n	801399a <sbrk_aligned+0x26>
 8013992:	f04f 34ff 	mov.w	r4, #4294967295
 8013996:	4620      	mov	r0, r4
 8013998:	bd70      	pop	{r4, r5, r6, pc}
 801399a:	1cc4      	adds	r4, r0, #3
 801399c:	f024 0403 	bic.w	r4, r4, #3
 80139a0:	42a0      	cmp	r0, r4
 80139a2:	d0f8      	beq.n	8013996 <sbrk_aligned+0x22>
 80139a4:	1a21      	subs	r1, r4, r0
 80139a6:	4628      	mov	r0, r5
 80139a8:	f000 feca 	bl	8014740 <_sbrk_r>
 80139ac:	3001      	adds	r0, #1
 80139ae:	d1f2      	bne.n	8013996 <sbrk_aligned+0x22>
 80139b0:	e7ef      	b.n	8013992 <sbrk_aligned+0x1e>
 80139b2:	bf00      	nop
 80139b4:	200024c4 	.word	0x200024c4

080139b8 <_malloc_r>:
 80139b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80139bc:	1ccd      	adds	r5, r1, #3
 80139be:	f025 0503 	bic.w	r5, r5, #3
 80139c2:	3508      	adds	r5, #8
 80139c4:	2d0c      	cmp	r5, #12
 80139c6:	bf38      	it	cc
 80139c8:	250c      	movcc	r5, #12
 80139ca:	2d00      	cmp	r5, #0
 80139cc:	4606      	mov	r6, r0
 80139ce:	db01      	blt.n	80139d4 <_malloc_r+0x1c>
 80139d0:	42a9      	cmp	r1, r5
 80139d2:	d904      	bls.n	80139de <_malloc_r+0x26>
 80139d4:	230c      	movs	r3, #12
 80139d6:	6033      	str	r3, [r6, #0]
 80139d8:	2000      	movs	r0, #0
 80139da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013ab4 <_malloc_r+0xfc>
 80139e2:	f000 f869 	bl	8013ab8 <__malloc_lock>
 80139e6:	f8d8 3000 	ldr.w	r3, [r8]
 80139ea:	461c      	mov	r4, r3
 80139ec:	bb44      	cbnz	r4, 8013a40 <_malloc_r+0x88>
 80139ee:	4629      	mov	r1, r5
 80139f0:	4630      	mov	r0, r6
 80139f2:	f7ff ffbf 	bl	8013974 <sbrk_aligned>
 80139f6:	1c43      	adds	r3, r0, #1
 80139f8:	4604      	mov	r4, r0
 80139fa:	d158      	bne.n	8013aae <_malloc_r+0xf6>
 80139fc:	f8d8 4000 	ldr.w	r4, [r8]
 8013a00:	4627      	mov	r7, r4
 8013a02:	2f00      	cmp	r7, #0
 8013a04:	d143      	bne.n	8013a8e <_malloc_r+0xd6>
 8013a06:	2c00      	cmp	r4, #0
 8013a08:	d04b      	beq.n	8013aa2 <_malloc_r+0xea>
 8013a0a:	6823      	ldr	r3, [r4, #0]
 8013a0c:	4639      	mov	r1, r7
 8013a0e:	4630      	mov	r0, r6
 8013a10:	eb04 0903 	add.w	r9, r4, r3
 8013a14:	f000 fe94 	bl	8014740 <_sbrk_r>
 8013a18:	4581      	cmp	r9, r0
 8013a1a:	d142      	bne.n	8013aa2 <_malloc_r+0xea>
 8013a1c:	6821      	ldr	r1, [r4, #0]
 8013a1e:	1a6d      	subs	r5, r5, r1
 8013a20:	4629      	mov	r1, r5
 8013a22:	4630      	mov	r0, r6
 8013a24:	f7ff ffa6 	bl	8013974 <sbrk_aligned>
 8013a28:	3001      	adds	r0, #1
 8013a2a:	d03a      	beq.n	8013aa2 <_malloc_r+0xea>
 8013a2c:	6823      	ldr	r3, [r4, #0]
 8013a2e:	442b      	add	r3, r5
 8013a30:	6023      	str	r3, [r4, #0]
 8013a32:	f8d8 3000 	ldr.w	r3, [r8]
 8013a36:	685a      	ldr	r2, [r3, #4]
 8013a38:	bb62      	cbnz	r2, 8013a94 <_malloc_r+0xdc>
 8013a3a:	f8c8 7000 	str.w	r7, [r8]
 8013a3e:	e00f      	b.n	8013a60 <_malloc_r+0xa8>
 8013a40:	6822      	ldr	r2, [r4, #0]
 8013a42:	1b52      	subs	r2, r2, r5
 8013a44:	d420      	bmi.n	8013a88 <_malloc_r+0xd0>
 8013a46:	2a0b      	cmp	r2, #11
 8013a48:	d917      	bls.n	8013a7a <_malloc_r+0xc2>
 8013a4a:	1961      	adds	r1, r4, r5
 8013a4c:	42a3      	cmp	r3, r4
 8013a4e:	6025      	str	r5, [r4, #0]
 8013a50:	bf18      	it	ne
 8013a52:	6059      	strne	r1, [r3, #4]
 8013a54:	6863      	ldr	r3, [r4, #4]
 8013a56:	bf08      	it	eq
 8013a58:	f8c8 1000 	streq.w	r1, [r8]
 8013a5c:	5162      	str	r2, [r4, r5]
 8013a5e:	604b      	str	r3, [r1, #4]
 8013a60:	4630      	mov	r0, r6
 8013a62:	f000 f82f 	bl	8013ac4 <__malloc_unlock>
 8013a66:	f104 000b 	add.w	r0, r4, #11
 8013a6a:	1d23      	adds	r3, r4, #4
 8013a6c:	f020 0007 	bic.w	r0, r0, #7
 8013a70:	1ac2      	subs	r2, r0, r3
 8013a72:	bf1c      	itt	ne
 8013a74:	1a1b      	subne	r3, r3, r0
 8013a76:	50a3      	strne	r3, [r4, r2]
 8013a78:	e7af      	b.n	80139da <_malloc_r+0x22>
 8013a7a:	6862      	ldr	r2, [r4, #4]
 8013a7c:	42a3      	cmp	r3, r4
 8013a7e:	bf0c      	ite	eq
 8013a80:	f8c8 2000 	streq.w	r2, [r8]
 8013a84:	605a      	strne	r2, [r3, #4]
 8013a86:	e7eb      	b.n	8013a60 <_malloc_r+0xa8>
 8013a88:	4623      	mov	r3, r4
 8013a8a:	6864      	ldr	r4, [r4, #4]
 8013a8c:	e7ae      	b.n	80139ec <_malloc_r+0x34>
 8013a8e:	463c      	mov	r4, r7
 8013a90:	687f      	ldr	r7, [r7, #4]
 8013a92:	e7b6      	b.n	8013a02 <_malloc_r+0x4a>
 8013a94:	461a      	mov	r2, r3
 8013a96:	685b      	ldr	r3, [r3, #4]
 8013a98:	42a3      	cmp	r3, r4
 8013a9a:	d1fb      	bne.n	8013a94 <_malloc_r+0xdc>
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	6053      	str	r3, [r2, #4]
 8013aa0:	e7de      	b.n	8013a60 <_malloc_r+0xa8>
 8013aa2:	230c      	movs	r3, #12
 8013aa4:	6033      	str	r3, [r6, #0]
 8013aa6:	4630      	mov	r0, r6
 8013aa8:	f000 f80c 	bl	8013ac4 <__malloc_unlock>
 8013aac:	e794      	b.n	80139d8 <_malloc_r+0x20>
 8013aae:	6005      	str	r5, [r0, #0]
 8013ab0:	e7d6      	b.n	8013a60 <_malloc_r+0xa8>
 8013ab2:	bf00      	nop
 8013ab4:	200024c8 	.word	0x200024c8

08013ab8 <__malloc_lock>:
 8013ab8:	4801      	ldr	r0, [pc, #4]	@ (8013ac0 <__malloc_lock+0x8>)
 8013aba:	f7ff b8aa 	b.w	8012c12 <__retarget_lock_acquire_recursive>
 8013abe:	bf00      	nop
 8013ac0:	200024c0 	.word	0x200024c0

08013ac4 <__malloc_unlock>:
 8013ac4:	4801      	ldr	r0, [pc, #4]	@ (8013acc <__malloc_unlock+0x8>)
 8013ac6:	f7ff b8a5 	b.w	8012c14 <__retarget_lock_release_recursive>
 8013aca:	bf00      	nop
 8013acc:	200024c0 	.word	0x200024c0

08013ad0 <_Balloc>:
 8013ad0:	b570      	push	{r4, r5, r6, lr}
 8013ad2:	69c6      	ldr	r6, [r0, #28]
 8013ad4:	4604      	mov	r4, r0
 8013ad6:	460d      	mov	r5, r1
 8013ad8:	b976      	cbnz	r6, 8013af8 <_Balloc+0x28>
 8013ada:	2010      	movs	r0, #16
 8013adc:	f7ff ff42 	bl	8013964 <malloc>
 8013ae0:	4602      	mov	r2, r0
 8013ae2:	61e0      	str	r0, [r4, #28]
 8013ae4:	b920      	cbnz	r0, 8013af0 <_Balloc+0x20>
 8013ae6:	4b18      	ldr	r3, [pc, #96]	@ (8013b48 <_Balloc+0x78>)
 8013ae8:	4818      	ldr	r0, [pc, #96]	@ (8013b4c <_Balloc+0x7c>)
 8013aea:	216b      	movs	r1, #107	@ 0x6b
 8013aec:	f000 fe38 	bl	8014760 <__assert_func>
 8013af0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013af4:	6006      	str	r6, [r0, #0]
 8013af6:	60c6      	str	r6, [r0, #12]
 8013af8:	69e6      	ldr	r6, [r4, #28]
 8013afa:	68f3      	ldr	r3, [r6, #12]
 8013afc:	b183      	cbz	r3, 8013b20 <_Balloc+0x50>
 8013afe:	69e3      	ldr	r3, [r4, #28]
 8013b00:	68db      	ldr	r3, [r3, #12]
 8013b02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013b06:	b9b8      	cbnz	r0, 8013b38 <_Balloc+0x68>
 8013b08:	2101      	movs	r1, #1
 8013b0a:	fa01 f605 	lsl.w	r6, r1, r5
 8013b0e:	1d72      	adds	r2, r6, #5
 8013b10:	0092      	lsls	r2, r2, #2
 8013b12:	4620      	mov	r0, r4
 8013b14:	f000 fe42 	bl	801479c <_calloc_r>
 8013b18:	b160      	cbz	r0, 8013b34 <_Balloc+0x64>
 8013b1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013b1e:	e00e      	b.n	8013b3e <_Balloc+0x6e>
 8013b20:	2221      	movs	r2, #33	@ 0x21
 8013b22:	2104      	movs	r1, #4
 8013b24:	4620      	mov	r0, r4
 8013b26:	f000 fe39 	bl	801479c <_calloc_r>
 8013b2a:	69e3      	ldr	r3, [r4, #28]
 8013b2c:	60f0      	str	r0, [r6, #12]
 8013b2e:	68db      	ldr	r3, [r3, #12]
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d1e4      	bne.n	8013afe <_Balloc+0x2e>
 8013b34:	2000      	movs	r0, #0
 8013b36:	bd70      	pop	{r4, r5, r6, pc}
 8013b38:	6802      	ldr	r2, [r0, #0]
 8013b3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013b3e:	2300      	movs	r3, #0
 8013b40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013b44:	e7f7      	b.n	8013b36 <_Balloc+0x66>
 8013b46:	bf00      	nop
 8013b48:	08014bad 	.word	0x08014bad
 8013b4c:	08014c2d 	.word	0x08014c2d

08013b50 <_Bfree>:
 8013b50:	b570      	push	{r4, r5, r6, lr}
 8013b52:	69c6      	ldr	r6, [r0, #28]
 8013b54:	4605      	mov	r5, r0
 8013b56:	460c      	mov	r4, r1
 8013b58:	b976      	cbnz	r6, 8013b78 <_Bfree+0x28>
 8013b5a:	2010      	movs	r0, #16
 8013b5c:	f7ff ff02 	bl	8013964 <malloc>
 8013b60:	4602      	mov	r2, r0
 8013b62:	61e8      	str	r0, [r5, #28]
 8013b64:	b920      	cbnz	r0, 8013b70 <_Bfree+0x20>
 8013b66:	4b09      	ldr	r3, [pc, #36]	@ (8013b8c <_Bfree+0x3c>)
 8013b68:	4809      	ldr	r0, [pc, #36]	@ (8013b90 <_Bfree+0x40>)
 8013b6a:	218f      	movs	r1, #143	@ 0x8f
 8013b6c:	f000 fdf8 	bl	8014760 <__assert_func>
 8013b70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013b74:	6006      	str	r6, [r0, #0]
 8013b76:	60c6      	str	r6, [r0, #12]
 8013b78:	b13c      	cbz	r4, 8013b8a <_Bfree+0x3a>
 8013b7a:	69eb      	ldr	r3, [r5, #28]
 8013b7c:	6862      	ldr	r2, [r4, #4]
 8013b7e:	68db      	ldr	r3, [r3, #12]
 8013b80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013b84:	6021      	str	r1, [r4, #0]
 8013b86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013b8a:	bd70      	pop	{r4, r5, r6, pc}
 8013b8c:	08014bad 	.word	0x08014bad
 8013b90:	08014c2d 	.word	0x08014c2d

08013b94 <__multadd>:
 8013b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b98:	690d      	ldr	r5, [r1, #16]
 8013b9a:	4607      	mov	r7, r0
 8013b9c:	460c      	mov	r4, r1
 8013b9e:	461e      	mov	r6, r3
 8013ba0:	f101 0c14 	add.w	ip, r1, #20
 8013ba4:	2000      	movs	r0, #0
 8013ba6:	f8dc 3000 	ldr.w	r3, [ip]
 8013baa:	b299      	uxth	r1, r3
 8013bac:	fb02 6101 	mla	r1, r2, r1, r6
 8013bb0:	0c1e      	lsrs	r6, r3, #16
 8013bb2:	0c0b      	lsrs	r3, r1, #16
 8013bb4:	fb02 3306 	mla	r3, r2, r6, r3
 8013bb8:	b289      	uxth	r1, r1
 8013bba:	3001      	adds	r0, #1
 8013bbc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013bc0:	4285      	cmp	r5, r0
 8013bc2:	f84c 1b04 	str.w	r1, [ip], #4
 8013bc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013bca:	dcec      	bgt.n	8013ba6 <__multadd+0x12>
 8013bcc:	b30e      	cbz	r6, 8013c12 <__multadd+0x7e>
 8013bce:	68a3      	ldr	r3, [r4, #8]
 8013bd0:	42ab      	cmp	r3, r5
 8013bd2:	dc19      	bgt.n	8013c08 <__multadd+0x74>
 8013bd4:	6861      	ldr	r1, [r4, #4]
 8013bd6:	4638      	mov	r0, r7
 8013bd8:	3101      	adds	r1, #1
 8013bda:	f7ff ff79 	bl	8013ad0 <_Balloc>
 8013bde:	4680      	mov	r8, r0
 8013be0:	b928      	cbnz	r0, 8013bee <__multadd+0x5a>
 8013be2:	4602      	mov	r2, r0
 8013be4:	4b0c      	ldr	r3, [pc, #48]	@ (8013c18 <__multadd+0x84>)
 8013be6:	480d      	ldr	r0, [pc, #52]	@ (8013c1c <__multadd+0x88>)
 8013be8:	21ba      	movs	r1, #186	@ 0xba
 8013bea:	f000 fdb9 	bl	8014760 <__assert_func>
 8013bee:	6922      	ldr	r2, [r4, #16]
 8013bf0:	3202      	adds	r2, #2
 8013bf2:	f104 010c 	add.w	r1, r4, #12
 8013bf6:	0092      	lsls	r2, r2, #2
 8013bf8:	300c      	adds	r0, #12
 8013bfa:	f7ff f80c 	bl	8012c16 <memcpy>
 8013bfe:	4621      	mov	r1, r4
 8013c00:	4638      	mov	r0, r7
 8013c02:	f7ff ffa5 	bl	8013b50 <_Bfree>
 8013c06:	4644      	mov	r4, r8
 8013c08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013c0c:	3501      	adds	r5, #1
 8013c0e:	615e      	str	r6, [r3, #20]
 8013c10:	6125      	str	r5, [r4, #16]
 8013c12:	4620      	mov	r0, r4
 8013c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c18:	08014c1c 	.word	0x08014c1c
 8013c1c:	08014c2d 	.word	0x08014c2d

08013c20 <__hi0bits>:
 8013c20:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013c24:	4603      	mov	r3, r0
 8013c26:	bf36      	itet	cc
 8013c28:	0403      	lslcc	r3, r0, #16
 8013c2a:	2000      	movcs	r0, #0
 8013c2c:	2010      	movcc	r0, #16
 8013c2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013c32:	bf3c      	itt	cc
 8013c34:	021b      	lslcc	r3, r3, #8
 8013c36:	3008      	addcc	r0, #8
 8013c38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013c3c:	bf3c      	itt	cc
 8013c3e:	011b      	lslcc	r3, r3, #4
 8013c40:	3004      	addcc	r0, #4
 8013c42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013c46:	bf3c      	itt	cc
 8013c48:	009b      	lslcc	r3, r3, #2
 8013c4a:	3002      	addcc	r0, #2
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	db05      	blt.n	8013c5c <__hi0bits+0x3c>
 8013c50:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013c54:	f100 0001 	add.w	r0, r0, #1
 8013c58:	bf08      	it	eq
 8013c5a:	2020      	moveq	r0, #32
 8013c5c:	4770      	bx	lr

08013c5e <__lo0bits>:
 8013c5e:	6803      	ldr	r3, [r0, #0]
 8013c60:	4602      	mov	r2, r0
 8013c62:	f013 0007 	ands.w	r0, r3, #7
 8013c66:	d00b      	beq.n	8013c80 <__lo0bits+0x22>
 8013c68:	07d9      	lsls	r1, r3, #31
 8013c6a:	d421      	bmi.n	8013cb0 <__lo0bits+0x52>
 8013c6c:	0798      	lsls	r0, r3, #30
 8013c6e:	bf49      	itett	mi
 8013c70:	085b      	lsrmi	r3, r3, #1
 8013c72:	089b      	lsrpl	r3, r3, #2
 8013c74:	2001      	movmi	r0, #1
 8013c76:	6013      	strmi	r3, [r2, #0]
 8013c78:	bf5c      	itt	pl
 8013c7a:	6013      	strpl	r3, [r2, #0]
 8013c7c:	2002      	movpl	r0, #2
 8013c7e:	4770      	bx	lr
 8013c80:	b299      	uxth	r1, r3
 8013c82:	b909      	cbnz	r1, 8013c88 <__lo0bits+0x2a>
 8013c84:	0c1b      	lsrs	r3, r3, #16
 8013c86:	2010      	movs	r0, #16
 8013c88:	b2d9      	uxtb	r1, r3
 8013c8a:	b909      	cbnz	r1, 8013c90 <__lo0bits+0x32>
 8013c8c:	3008      	adds	r0, #8
 8013c8e:	0a1b      	lsrs	r3, r3, #8
 8013c90:	0719      	lsls	r1, r3, #28
 8013c92:	bf04      	itt	eq
 8013c94:	091b      	lsreq	r3, r3, #4
 8013c96:	3004      	addeq	r0, #4
 8013c98:	0799      	lsls	r1, r3, #30
 8013c9a:	bf04      	itt	eq
 8013c9c:	089b      	lsreq	r3, r3, #2
 8013c9e:	3002      	addeq	r0, #2
 8013ca0:	07d9      	lsls	r1, r3, #31
 8013ca2:	d403      	bmi.n	8013cac <__lo0bits+0x4e>
 8013ca4:	085b      	lsrs	r3, r3, #1
 8013ca6:	f100 0001 	add.w	r0, r0, #1
 8013caa:	d003      	beq.n	8013cb4 <__lo0bits+0x56>
 8013cac:	6013      	str	r3, [r2, #0]
 8013cae:	4770      	bx	lr
 8013cb0:	2000      	movs	r0, #0
 8013cb2:	4770      	bx	lr
 8013cb4:	2020      	movs	r0, #32
 8013cb6:	4770      	bx	lr

08013cb8 <__i2b>:
 8013cb8:	b510      	push	{r4, lr}
 8013cba:	460c      	mov	r4, r1
 8013cbc:	2101      	movs	r1, #1
 8013cbe:	f7ff ff07 	bl	8013ad0 <_Balloc>
 8013cc2:	4602      	mov	r2, r0
 8013cc4:	b928      	cbnz	r0, 8013cd2 <__i2b+0x1a>
 8013cc6:	4b05      	ldr	r3, [pc, #20]	@ (8013cdc <__i2b+0x24>)
 8013cc8:	4805      	ldr	r0, [pc, #20]	@ (8013ce0 <__i2b+0x28>)
 8013cca:	f240 1145 	movw	r1, #325	@ 0x145
 8013cce:	f000 fd47 	bl	8014760 <__assert_func>
 8013cd2:	2301      	movs	r3, #1
 8013cd4:	6144      	str	r4, [r0, #20]
 8013cd6:	6103      	str	r3, [r0, #16]
 8013cd8:	bd10      	pop	{r4, pc}
 8013cda:	bf00      	nop
 8013cdc:	08014c1c 	.word	0x08014c1c
 8013ce0:	08014c2d 	.word	0x08014c2d

08013ce4 <__multiply>:
 8013ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ce8:	4614      	mov	r4, r2
 8013cea:	690a      	ldr	r2, [r1, #16]
 8013cec:	6923      	ldr	r3, [r4, #16]
 8013cee:	429a      	cmp	r2, r3
 8013cf0:	bfa8      	it	ge
 8013cf2:	4623      	movge	r3, r4
 8013cf4:	460f      	mov	r7, r1
 8013cf6:	bfa4      	itt	ge
 8013cf8:	460c      	movge	r4, r1
 8013cfa:	461f      	movge	r7, r3
 8013cfc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013d00:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013d04:	68a3      	ldr	r3, [r4, #8]
 8013d06:	6861      	ldr	r1, [r4, #4]
 8013d08:	eb0a 0609 	add.w	r6, sl, r9
 8013d0c:	42b3      	cmp	r3, r6
 8013d0e:	b085      	sub	sp, #20
 8013d10:	bfb8      	it	lt
 8013d12:	3101      	addlt	r1, #1
 8013d14:	f7ff fedc 	bl	8013ad0 <_Balloc>
 8013d18:	b930      	cbnz	r0, 8013d28 <__multiply+0x44>
 8013d1a:	4602      	mov	r2, r0
 8013d1c:	4b44      	ldr	r3, [pc, #272]	@ (8013e30 <__multiply+0x14c>)
 8013d1e:	4845      	ldr	r0, [pc, #276]	@ (8013e34 <__multiply+0x150>)
 8013d20:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013d24:	f000 fd1c 	bl	8014760 <__assert_func>
 8013d28:	f100 0514 	add.w	r5, r0, #20
 8013d2c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013d30:	462b      	mov	r3, r5
 8013d32:	2200      	movs	r2, #0
 8013d34:	4543      	cmp	r3, r8
 8013d36:	d321      	bcc.n	8013d7c <__multiply+0x98>
 8013d38:	f107 0114 	add.w	r1, r7, #20
 8013d3c:	f104 0214 	add.w	r2, r4, #20
 8013d40:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013d44:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013d48:	9302      	str	r3, [sp, #8]
 8013d4a:	1b13      	subs	r3, r2, r4
 8013d4c:	3b15      	subs	r3, #21
 8013d4e:	f023 0303 	bic.w	r3, r3, #3
 8013d52:	3304      	adds	r3, #4
 8013d54:	f104 0715 	add.w	r7, r4, #21
 8013d58:	42ba      	cmp	r2, r7
 8013d5a:	bf38      	it	cc
 8013d5c:	2304      	movcc	r3, #4
 8013d5e:	9301      	str	r3, [sp, #4]
 8013d60:	9b02      	ldr	r3, [sp, #8]
 8013d62:	9103      	str	r1, [sp, #12]
 8013d64:	428b      	cmp	r3, r1
 8013d66:	d80c      	bhi.n	8013d82 <__multiply+0x9e>
 8013d68:	2e00      	cmp	r6, #0
 8013d6a:	dd03      	ble.n	8013d74 <__multiply+0x90>
 8013d6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d05b      	beq.n	8013e2c <__multiply+0x148>
 8013d74:	6106      	str	r6, [r0, #16]
 8013d76:	b005      	add	sp, #20
 8013d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d7c:	f843 2b04 	str.w	r2, [r3], #4
 8013d80:	e7d8      	b.n	8013d34 <__multiply+0x50>
 8013d82:	f8b1 a000 	ldrh.w	sl, [r1]
 8013d86:	f1ba 0f00 	cmp.w	sl, #0
 8013d8a:	d024      	beq.n	8013dd6 <__multiply+0xf2>
 8013d8c:	f104 0e14 	add.w	lr, r4, #20
 8013d90:	46a9      	mov	r9, r5
 8013d92:	f04f 0c00 	mov.w	ip, #0
 8013d96:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013d9a:	f8d9 3000 	ldr.w	r3, [r9]
 8013d9e:	fa1f fb87 	uxth.w	fp, r7
 8013da2:	b29b      	uxth	r3, r3
 8013da4:	fb0a 330b 	mla	r3, sl, fp, r3
 8013da8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013dac:	f8d9 7000 	ldr.w	r7, [r9]
 8013db0:	4463      	add	r3, ip
 8013db2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013db6:	fb0a c70b 	mla	r7, sl, fp, ip
 8013dba:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8013dbe:	b29b      	uxth	r3, r3
 8013dc0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013dc4:	4572      	cmp	r2, lr
 8013dc6:	f849 3b04 	str.w	r3, [r9], #4
 8013dca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013dce:	d8e2      	bhi.n	8013d96 <__multiply+0xb2>
 8013dd0:	9b01      	ldr	r3, [sp, #4]
 8013dd2:	f845 c003 	str.w	ip, [r5, r3]
 8013dd6:	9b03      	ldr	r3, [sp, #12]
 8013dd8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013ddc:	3104      	adds	r1, #4
 8013dde:	f1b9 0f00 	cmp.w	r9, #0
 8013de2:	d021      	beq.n	8013e28 <__multiply+0x144>
 8013de4:	682b      	ldr	r3, [r5, #0]
 8013de6:	f104 0c14 	add.w	ip, r4, #20
 8013dea:	46ae      	mov	lr, r5
 8013dec:	f04f 0a00 	mov.w	sl, #0
 8013df0:	f8bc b000 	ldrh.w	fp, [ip]
 8013df4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013df8:	fb09 770b 	mla	r7, r9, fp, r7
 8013dfc:	4457      	add	r7, sl
 8013dfe:	b29b      	uxth	r3, r3
 8013e00:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013e04:	f84e 3b04 	str.w	r3, [lr], #4
 8013e08:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013e0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013e10:	f8be 3000 	ldrh.w	r3, [lr]
 8013e14:	fb09 330a 	mla	r3, r9, sl, r3
 8013e18:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013e1c:	4562      	cmp	r2, ip
 8013e1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013e22:	d8e5      	bhi.n	8013df0 <__multiply+0x10c>
 8013e24:	9f01      	ldr	r7, [sp, #4]
 8013e26:	51eb      	str	r3, [r5, r7]
 8013e28:	3504      	adds	r5, #4
 8013e2a:	e799      	b.n	8013d60 <__multiply+0x7c>
 8013e2c:	3e01      	subs	r6, #1
 8013e2e:	e79b      	b.n	8013d68 <__multiply+0x84>
 8013e30:	08014c1c 	.word	0x08014c1c
 8013e34:	08014c2d 	.word	0x08014c2d

08013e38 <__pow5mult>:
 8013e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e3c:	4615      	mov	r5, r2
 8013e3e:	f012 0203 	ands.w	r2, r2, #3
 8013e42:	4607      	mov	r7, r0
 8013e44:	460e      	mov	r6, r1
 8013e46:	d007      	beq.n	8013e58 <__pow5mult+0x20>
 8013e48:	4c25      	ldr	r4, [pc, #148]	@ (8013ee0 <__pow5mult+0xa8>)
 8013e4a:	3a01      	subs	r2, #1
 8013e4c:	2300      	movs	r3, #0
 8013e4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013e52:	f7ff fe9f 	bl	8013b94 <__multadd>
 8013e56:	4606      	mov	r6, r0
 8013e58:	10ad      	asrs	r5, r5, #2
 8013e5a:	d03d      	beq.n	8013ed8 <__pow5mult+0xa0>
 8013e5c:	69fc      	ldr	r4, [r7, #28]
 8013e5e:	b97c      	cbnz	r4, 8013e80 <__pow5mult+0x48>
 8013e60:	2010      	movs	r0, #16
 8013e62:	f7ff fd7f 	bl	8013964 <malloc>
 8013e66:	4602      	mov	r2, r0
 8013e68:	61f8      	str	r0, [r7, #28]
 8013e6a:	b928      	cbnz	r0, 8013e78 <__pow5mult+0x40>
 8013e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8013ee4 <__pow5mult+0xac>)
 8013e6e:	481e      	ldr	r0, [pc, #120]	@ (8013ee8 <__pow5mult+0xb0>)
 8013e70:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013e74:	f000 fc74 	bl	8014760 <__assert_func>
 8013e78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013e7c:	6004      	str	r4, [r0, #0]
 8013e7e:	60c4      	str	r4, [r0, #12]
 8013e80:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013e84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013e88:	b94c      	cbnz	r4, 8013e9e <__pow5mult+0x66>
 8013e8a:	f240 2171 	movw	r1, #625	@ 0x271
 8013e8e:	4638      	mov	r0, r7
 8013e90:	f7ff ff12 	bl	8013cb8 <__i2b>
 8013e94:	2300      	movs	r3, #0
 8013e96:	f8c8 0008 	str.w	r0, [r8, #8]
 8013e9a:	4604      	mov	r4, r0
 8013e9c:	6003      	str	r3, [r0, #0]
 8013e9e:	f04f 0900 	mov.w	r9, #0
 8013ea2:	07eb      	lsls	r3, r5, #31
 8013ea4:	d50a      	bpl.n	8013ebc <__pow5mult+0x84>
 8013ea6:	4631      	mov	r1, r6
 8013ea8:	4622      	mov	r2, r4
 8013eaa:	4638      	mov	r0, r7
 8013eac:	f7ff ff1a 	bl	8013ce4 <__multiply>
 8013eb0:	4631      	mov	r1, r6
 8013eb2:	4680      	mov	r8, r0
 8013eb4:	4638      	mov	r0, r7
 8013eb6:	f7ff fe4b 	bl	8013b50 <_Bfree>
 8013eba:	4646      	mov	r6, r8
 8013ebc:	106d      	asrs	r5, r5, #1
 8013ebe:	d00b      	beq.n	8013ed8 <__pow5mult+0xa0>
 8013ec0:	6820      	ldr	r0, [r4, #0]
 8013ec2:	b938      	cbnz	r0, 8013ed4 <__pow5mult+0x9c>
 8013ec4:	4622      	mov	r2, r4
 8013ec6:	4621      	mov	r1, r4
 8013ec8:	4638      	mov	r0, r7
 8013eca:	f7ff ff0b 	bl	8013ce4 <__multiply>
 8013ece:	6020      	str	r0, [r4, #0]
 8013ed0:	f8c0 9000 	str.w	r9, [r0]
 8013ed4:	4604      	mov	r4, r0
 8013ed6:	e7e4      	b.n	8013ea2 <__pow5mult+0x6a>
 8013ed8:	4630      	mov	r0, r6
 8013eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ede:	bf00      	nop
 8013ee0:	08014c88 	.word	0x08014c88
 8013ee4:	08014bad 	.word	0x08014bad
 8013ee8:	08014c2d 	.word	0x08014c2d

08013eec <__lshift>:
 8013eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ef0:	460c      	mov	r4, r1
 8013ef2:	6849      	ldr	r1, [r1, #4]
 8013ef4:	6923      	ldr	r3, [r4, #16]
 8013ef6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013efa:	68a3      	ldr	r3, [r4, #8]
 8013efc:	4607      	mov	r7, r0
 8013efe:	4691      	mov	r9, r2
 8013f00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013f04:	f108 0601 	add.w	r6, r8, #1
 8013f08:	42b3      	cmp	r3, r6
 8013f0a:	db0b      	blt.n	8013f24 <__lshift+0x38>
 8013f0c:	4638      	mov	r0, r7
 8013f0e:	f7ff fddf 	bl	8013ad0 <_Balloc>
 8013f12:	4605      	mov	r5, r0
 8013f14:	b948      	cbnz	r0, 8013f2a <__lshift+0x3e>
 8013f16:	4602      	mov	r2, r0
 8013f18:	4b28      	ldr	r3, [pc, #160]	@ (8013fbc <__lshift+0xd0>)
 8013f1a:	4829      	ldr	r0, [pc, #164]	@ (8013fc0 <__lshift+0xd4>)
 8013f1c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013f20:	f000 fc1e 	bl	8014760 <__assert_func>
 8013f24:	3101      	adds	r1, #1
 8013f26:	005b      	lsls	r3, r3, #1
 8013f28:	e7ee      	b.n	8013f08 <__lshift+0x1c>
 8013f2a:	2300      	movs	r3, #0
 8013f2c:	f100 0114 	add.w	r1, r0, #20
 8013f30:	f100 0210 	add.w	r2, r0, #16
 8013f34:	4618      	mov	r0, r3
 8013f36:	4553      	cmp	r3, sl
 8013f38:	db33      	blt.n	8013fa2 <__lshift+0xb6>
 8013f3a:	6920      	ldr	r0, [r4, #16]
 8013f3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013f40:	f104 0314 	add.w	r3, r4, #20
 8013f44:	f019 091f 	ands.w	r9, r9, #31
 8013f48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013f4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013f50:	d02b      	beq.n	8013faa <__lshift+0xbe>
 8013f52:	f1c9 0e20 	rsb	lr, r9, #32
 8013f56:	468a      	mov	sl, r1
 8013f58:	2200      	movs	r2, #0
 8013f5a:	6818      	ldr	r0, [r3, #0]
 8013f5c:	fa00 f009 	lsl.w	r0, r0, r9
 8013f60:	4310      	orrs	r0, r2
 8013f62:	f84a 0b04 	str.w	r0, [sl], #4
 8013f66:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f6a:	459c      	cmp	ip, r3
 8013f6c:	fa22 f20e 	lsr.w	r2, r2, lr
 8013f70:	d8f3      	bhi.n	8013f5a <__lshift+0x6e>
 8013f72:	ebac 0304 	sub.w	r3, ip, r4
 8013f76:	3b15      	subs	r3, #21
 8013f78:	f023 0303 	bic.w	r3, r3, #3
 8013f7c:	3304      	adds	r3, #4
 8013f7e:	f104 0015 	add.w	r0, r4, #21
 8013f82:	4584      	cmp	ip, r0
 8013f84:	bf38      	it	cc
 8013f86:	2304      	movcc	r3, #4
 8013f88:	50ca      	str	r2, [r1, r3]
 8013f8a:	b10a      	cbz	r2, 8013f90 <__lshift+0xa4>
 8013f8c:	f108 0602 	add.w	r6, r8, #2
 8013f90:	3e01      	subs	r6, #1
 8013f92:	4638      	mov	r0, r7
 8013f94:	612e      	str	r6, [r5, #16]
 8013f96:	4621      	mov	r1, r4
 8013f98:	f7ff fdda 	bl	8013b50 <_Bfree>
 8013f9c:	4628      	mov	r0, r5
 8013f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fa2:	f842 0f04 	str.w	r0, [r2, #4]!
 8013fa6:	3301      	adds	r3, #1
 8013fa8:	e7c5      	b.n	8013f36 <__lshift+0x4a>
 8013faa:	3904      	subs	r1, #4
 8013fac:	f853 2b04 	ldr.w	r2, [r3], #4
 8013fb0:	f841 2f04 	str.w	r2, [r1, #4]!
 8013fb4:	459c      	cmp	ip, r3
 8013fb6:	d8f9      	bhi.n	8013fac <__lshift+0xc0>
 8013fb8:	e7ea      	b.n	8013f90 <__lshift+0xa4>
 8013fba:	bf00      	nop
 8013fbc:	08014c1c 	.word	0x08014c1c
 8013fc0:	08014c2d 	.word	0x08014c2d

08013fc4 <__mcmp>:
 8013fc4:	690a      	ldr	r2, [r1, #16]
 8013fc6:	4603      	mov	r3, r0
 8013fc8:	6900      	ldr	r0, [r0, #16]
 8013fca:	1a80      	subs	r0, r0, r2
 8013fcc:	b530      	push	{r4, r5, lr}
 8013fce:	d10e      	bne.n	8013fee <__mcmp+0x2a>
 8013fd0:	3314      	adds	r3, #20
 8013fd2:	3114      	adds	r1, #20
 8013fd4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013fd8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013fdc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013fe0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013fe4:	4295      	cmp	r5, r2
 8013fe6:	d003      	beq.n	8013ff0 <__mcmp+0x2c>
 8013fe8:	d205      	bcs.n	8013ff6 <__mcmp+0x32>
 8013fea:	f04f 30ff 	mov.w	r0, #4294967295
 8013fee:	bd30      	pop	{r4, r5, pc}
 8013ff0:	42a3      	cmp	r3, r4
 8013ff2:	d3f3      	bcc.n	8013fdc <__mcmp+0x18>
 8013ff4:	e7fb      	b.n	8013fee <__mcmp+0x2a>
 8013ff6:	2001      	movs	r0, #1
 8013ff8:	e7f9      	b.n	8013fee <__mcmp+0x2a>
	...

08013ffc <__mdiff>:
 8013ffc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014000:	4689      	mov	r9, r1
 8014002:	4606      	mov	r6, r0
 8014004:	4611      	mov	r1, r2
 8014006:	4648      	mov	r0, r9
 8014008:	4614      	mov	r4, r2
 801400a:	f7ff ffdb 	bl	8013fc4 <__mcmp>
 801400e:	1e05      	subs	r5, r0, #0
 8014010:	d112      	bne.n	8014038 <__mdiff+0x3c>
 8014012:	4629      	mov	r1, r5
 8014014:	4630      	mov	r0, r6
 8014016:	f7ff fd5b 	bl	8013ad0 <_Balloc>
 801401a:	4602      	mov	r2, r0
 801401c:	b928      	cbnz	r0, 801402a <__mdiff+0x2e>
 801401e:	4b3f      	ldr	r3, [pc, #252]	@ (801411c <__mdiff+0x120>)
 8014020:	f240 2137 	movw	r1, #567	@ 0x237
 8014024:	483e      	ldr	r0, [pc, #248]	@ (8014120 <__mdiff+0x124>)
 8014026:	f000 fb9b 	bl	8014760 <__assert_func>
 801402a:	2301      	movs	r3, #1
 801402c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014030:	4610      	mov	r0, r2
 8014032:	b003      	add	sp, #12
 8014034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014038:	bfbc      	itt	lt
 801403a:	464b      	movlt	r3, r9
 801403c:	46a1      	movlt	r9, r4
 801403e:	4630      	mov	r0, r6
 8014040:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014044:	bfba      	itte	lt
 8014046:	461c      	movlt	r4, r3
 8014048:	2501      	movlt	r5, #1
 801404a:	2500      	movge	r5, #0
 801404c:	f7ff fd40 	bl	8013ad0 <_Balloc>
 8014050:	4602      	mov	r2, r0
 8014052:	b918      	cbnz	r0, 801405c <__mdiff+0x60>
 8014054:	4b31      	ldr	r3, [pc, #196]	@ (801411c <__mdiff+0x120>)
 8014056:	f240 2145 	movw	r1, #581	@ 0x245
 801405a:	e7e3      	b.n	8014024 <__mdiff+0x28>
 801405c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014060:	6926      	ldr	r6, [r4, #16]
 8014062:	60c5      	str	r5, [r0, #12]
 8014064:	f109 0310 	add.w	r3, r9, #16
 8014068:	f109 0514 	add.w	r5, r9, #20
 801406c:	f104 0e14 	add.w	lr, r4, #20
 8014070:	f100 0b14 	add.w	fp, r0, #20
 8014074:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014078:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801407c:	9301      	str	r3, [sp, #4]
 801407e:	46d9      	mov	r9, fp
 8014080:	f04f 0c00 	mov.w	ip, #0
 8014084:	9b01      	ldr	r3, [sp, #4]
 8014086:	f85e 0b04 	ldr.w	r0, [lr], #4
 801408a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801408e:	9301      	str	r3, [sp, #4]
 8014090:	fa1f f38a 	uxth.w	r3, sl
 8014094:	4619      	mov	r1, r3
 8014096:	b283      	uxth	r3, r0
 8014098:	1acb      	subs	r3, r1, r3
 801409a:	0c00      	lsrs	r0, r0, #16
 801409c:	4463      	add	r3, ip
 801409e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80140a2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80140a6:	b29b      	uxth	r3, r3
 80140a8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80140ac:	4576      	cmp	r6, lr
 80140ae:	f849 3b04 	str.w	r3, [r9], #4
 80140b2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80140b6:	d8e5      	bhi.n	8014084 <__mdiff+0x88>
 80140b8:	1b33      	subs	r3, r6, r4
 80140ba:	3b15      	subs	r3, #21
 80140bc:	f023 0303 	bic.w	r3, r3, #3
 80140c0:	3415      	adds	r4, #21
 80140c2:	3304      	adds	r3, #4
 80140c4:	42a6      	cmp	r6, r4
 80140c6:	bf38      	it	cc
 80140c8:	2304      	movcc	r3, #4
 80140ca:	441d      	add	r5, r3
 80140cc:	445b      	add	r3, fp
 80140ce:	461e      	mov	r6, r3
 80140d0:	462c      	mov	r4, r5
 80140d2:	4544      	cmp	r4, r8
 80140d4:	d30e      	bcc.n	80140f4 <__mdiff+0xf8>
 80140d6:	f108 0103 	add.w	r1, r8, #3
 80140da:	1b49      	subs	r1, r1, r5
 80140dc:	f021 0103 	bic.w	r1, r1, #3
 80140e0:	3d03      	subs	r5, #3
 80140e2:	45a8      	cmp	r8, r5
 80140e4:	bf38      	it	cc
 80140e6:	2100      	movcc	r1, #0
 80140e8:	440b      	add	r3, r1
 80140ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80140ee:	b191      	cbz	r1, 8014116 <__mdiff+0x11a>
 80140f0:	6117      	str	r7, [r2, #16]
 80140f2:	e79d      	b.n	8014030 <__mdiff+0x34>
 80140f4:	f854 1b04 	ldr.w	r1, [r4], #4
 80140f8:	46e6      	mov	lr, ip
 80140fa:	0c08      	lsrs	r0, r1, #16
 80140fc:	fa1c fc81 	uxtah	ip, ip, r1
 8014100:	4471      	add	r1, lr
 8014102:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8014106:	b289      	uxth	r1, r1
 8014108:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801410c:	f846 1b04 	str.w	r1, [r6], #4
 8014110:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014114:	e7dd      	b.n	80140d2 <__mdiff+0xd6>
 8014116:	3f01      	subs	r7, #1
 8014118:	e7e7      	b.n	80140ea <__mdiff+0xee>
 801411a:	bf00      	nop
 801411c:	08014c1c 	.word	0x08014c1c
 8014120:	08014c2d 	.word	0x08014c2d

08014124 <__d2b>:
 8014124:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014128:	460f      	mov	r7, r1
 801412a:	2101      	movs	r1, #1
 801412c:	ec59 8b10 	vmov	r8, r9, d0
 8014130:	4616      	mov	r6, r2
 8014132:	f7ff fccd 	bl	8013ad0 <_Balloc>
 8014136:	4604      	mov	r4, r0
 8014138:	b930      	cbnz	r0, 8014148 <__d2b+0x24>
 801413a:	4602      	mov	r2, r0
 801413c:	4b23      	ldr	r3, [pc, #140]	@ (80141cc <__d2b+0xa8>)
 801413e:	4824      	ldr	r0, [pc, #144]	@ (80141d0 <__d2b+0xac>)
 8014140:	f240 310f 	movw	r1, #783	@ 0x30f
 8014144:	f000 fb0c 	bl	8014760 <__assert_func>
 8014148:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801414c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014150:	b10d      	cbz	r5, 8014156 <__d2b+0x32>
 8014152:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014156:	9301      	str	r3, [sp, #4]
 8014158:	f1b8 0300 	subs.w	r3, r8, #0
 801415c:	d023      	beq.n	80141a6 <__d2b+0x82>
 801415e:	4668      	mov	r0, sp
 8014160:	9300      	str	r3, [sp, #0]
 8014162:	f7ff fd7c 	bl	8013c5e <__lo0bits>
 8014166:	e9dd 1200 	ldrd	r1, r2, [sp]
 801416a:	b1d0      	cbz	r0, 80141a2 <__d2b+0x7e>
 801416c:	f1c0 0320 	rsb	r3, r0, #32
 8014170:	fa02 f303 	lsl.w	r3, r2, r3
 8014174:	430b      	orrs	r3, r1
 8014176:	40c2      	lsrs	r2, r0
 8014178:	6163      	str	r3, [r4, #20]
 801417a:	9201      	str	r2, [sp, #4]
 801417c:	9b01      	ldr	r3, [sp, #4]
 801417e:	61a3      	str	r3, [r4, #24]
 8014180:	2b00      	cmp	r3, #0
 8014182:	bf0c      	ite	eq
 8014184:	2201      	moveq	r2, #1
 8014186:	2202      	movne	r2, #2
 8014188:	6122      	str	r2, [r4, #16]
 801418a:	b1a5      	cbz	r5, 80141b6 <__d2b+0x92>
 801418c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8014190:	4405      	add	r5, r0
 8014192:	603d      	str	r5, [r7, #0]
 8014194:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014198:	6030      	str	r0, [r6, #0]
 801419a:	4620      	mov	r0, r4
 801419c:	b003      	add	sp, #12
 801419e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80141a2:	6161      	str	r1, [r4, #20]
 80141a4:	e7ea      	b.n	801417c <__d2b+0x58>
 80141a6:	a801      	add	r0, sp, #4
 80141a8:	f7ff fd59 	bl	8013c5e <__lo0bits>
 80141ac:	9b01      	ldr	r3, [sp, #4]
 80141ae:	6163      	str	r3, [r4, #20]
 80141b0:	3020      	adds	r0, #32
 80141b2:	2201      	movs	r2, #1
 80141b4:	e7e8      	b.n	8014188 <__d2b+0x64>
 80141b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80141ba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80141be:	6038      	str	r0, [r7, #0]
 80141c0:	6918      	ldr	r0, [r3, #16]
 80141c2:	f7ff fd2d 	bl	8013c20 <__hi0bits>
 80141c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80141ca:	e7e5      	b.n	8014198 <__d2b+0x74>
 80141cc:	08014c1c 	.word	0x08014c1c
 80141d0:	08014c2d 	.word	0x08014c2d

080141d4 <__sfputc_r>:
 80141d4:	6893      	ldr	r3, [r2, #8]
 80141d6:	3b01      	subs	r3, #1
 80141d8:	2b00      	cmp	r3, #0
 80141da:	b410      	push	{r4}
 80141dc:	6093      	str	r3, [r2, #8]
 80141de:	da08      	bge.n	80141f2 <__sfputc_r+0x1e>
 80141e0:	6994      	ldr	r4, [r2, #24]
 80141e2:	42a3      	cmp	r3, r4
 80141e4:	db01      	blt.n	80141ea <__sfputc_r+0x16>
 80141e6:	290a      	cmp	r1, #10
 80141e8:	d103      	bne.n	80141f2 <__sfputc_r+0x1e>
 80141ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80141ee:	f000 ba13 	b.w	8014618 <__swbuf_r>
 80141f2:	6813      	ldr	r3, [r2, #0]
 80141f4:	1c58      	adds	r0, r3, #1
 80141f6:	6010      	str	r0, [r2, #0]
 80141f8:	7019      	strb	r1, [r3, #0]
 80141fa:	4608      	mov	r0, r1
 80141fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014200:	4770      	bx	lr

08014202 <__sfputs_r>:
 8014202:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014204:	4606      	mov	r6, r0
 8014206:	460f      	mov	r7, r1
 8014208:	4614      	mov	r4, r2
 801420a:	18d5      	adds	r5, r2, r3
 801420c:	42ac      	cmp	r4, r5
 801420e:	d101      	bne.n	8014214 <__sfputs_r+0x12>
 8014210:	2000      	movs	r0, #0
 8014212:	e007      	b.n	8014224 <__sfputs_r+0x22>
 8014214:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014218:	463a      	mov	r2, r7
 801421a:	4630      	mov	r0, r6
 801421c:	f7ff ffda 	bl	80141d4 <__sfputc_r>
 8014220:	1c43      	adds	r3, r0, #1
 8014222:	d1f3      	bne.n	801420c <__sfputs_r+0xa>
 8014224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014228 <_vfiprintf_r>:
 8014228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801422c:	460d      	mov	r5, r1
 801422e:	b09d      	sub	sp, #116	@ 0x74
 8014230:	4614      	mov	r4, r2
 8014232:	4698      	mov	r8, r3
 8014234:	4606      	mov	r6, r0
 8014236:	b118      	cbz	r0, 8014240 <_vfiprintf_r+0x18>
 8014238:	6a03      	ldr	r3, [r0, #32]
 801423a:	b90b      	cbnz	r3, 8014240 <_vfiprintf_r+0x18>
 801423c:	f7fe fbd8 	bl	80129f0 <__sinit>
 8014240:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014242:	07d9      	lsls	r1, r3, #31
 8014244:	d405      	bmi.n	8014252 <_vfiprintf_r+0x2a>
 8014246:	89ab      	ldrh	r3, [r5, #12]
 8014248:	059a      	lsls	r2, r3, #22
 801424a:	d402      	bmi.n	8014252 <_vfiprintf_r+0x2a>
 801424c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801424e:	f7fe fce0 	bl	8012c12 <__retarget_lock_acquire_recursive>
 8014252:	89ab      	ldrh	r3, [r5, #12]
 8014254:	071b      	lsls	r3, r3, #28
 8014256:	d501      	bpl.n	801425c <_vfiprintf_r+0x34>
 8014258:	692b      	ldr	r3, [r5, #16]
 801425a:	b99b      	cbnz	r3, 8014284 <_vfiprintf_r+0x5c>
 801425c:	4629      	mov	r1, r5
 801425e:	4630      	mov	r0, r6
 8014260:	f000 fa18 	bl	8014694 <__swsetup_r>
 8014264:	b170      	cbz	r0, 8014284 <_vfiprintf_r+0x5c>
 8014266:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014268:	07dc      	lsls	r4, r3, #31
 801426a:	d504      	bpl.n	8014276 <_vfiprintf_r+0x4e>
 801426c:	f04f 30ff 	mov.w	r0, #4294967295
 8014270:	b01d      	add	sp, #116	@ 0x74
 8014272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014276:	89ab      	ldrh	r3, [r5, #12]
 8014278:	0598      	lsls	r0, r3, #22
 801427a:	d4f7      	bmi.n	801426c <_vfiprintf_r+0x44>
 801427c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801427e:	f7fe fcc9 	bl	8012c14 <__retarget_lock_release_recursive>
 8014282:	e7f3      	b.n	801426c <_vfiprintf_r+0x44>
 8014284:	2300      	movs	r3, #0
 8014286:	9309      	str	r3, [sp, #36]	@ 0x24
 8014288:	2320      	movs	r3, #32
 801428a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801428e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014292:	2330      	movs	r3, #48	@ 0x30
 8014294:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014444 <_vfiprintf_r+0x21c>
 8014298:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801429c:	f04f 0901 	mov.w	r9, #1
 80142a0:	4623      	mov	r3, r4
 80142a2:	469a      	mov	sl, r3
 80142a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80142a8:	b10a      	cbz	r2, 80142ae <_vfiprintf_r+0x86>
 80142aa:	2a25      	cmp	r2, #37	@ 0x25
 80142ac:	d1f9      	bne.n	80142a2 <_vfiprintf_r+0x7a>
 80142ae:	ebba 0b04 	subs.w	fp, sl, r4
 80142b2:	d00b      	beq.n	80142cc <_vfiprintf_r+0xa4>
 80142b4:	465b      	mov	r3, fp
 80142b6:	4622      	mov	r2, r4
 80142b8:	4629      	mov	r1, r5
 80142ba:	4630      	mov	r0, r6
 80142bc:	f7ff ffa1 	bl	8014202 <__sfputs_r>
 80142c0:	3001      	adds	r0, #1
 80142c2:	f000 80a7 	beq.w	8014414 <_vfiprintf_r+0x1ec>
 80142c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80142c8:	445a      	add	r2, fp
 80142ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80142cc:	f89a 3000 	ldrb.w	r3, [sl]
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	f000 809f 	beq.w	8014414 <_vfiprintf_r+0x1ec>
 80142d6:	2300      	movs	r3, #0
 80142d8:	f04f 32ff 	mov.w	r2, #4294967295
 80142dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80142e0:	f10a 0a01 	add.w	sl, sl, #1
 80142e4:	9304      	str	r3, [sp, #16]
 80142e6:	9307      	str	r3, [sp, #28]
 80142e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80142ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80142ee:	4654      	mov	r4, sl
 80142f0:	2205      	movs	r2, #5
 80142f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80142f6:	4853      	ldr	r0, [pc, #332]	@ (8014444 <_vfiprintf_r+0x21c>)
 80142f8:	f7eb ff42 	bl	8000180 <memchr>
 80142fc:	9a04      	ldr	r2, [sp, #16]
 80142fe:	b9d8      	cbnz	r0, 8014338 <_vfiprintf_r+0x110>
 8014300:	06d1      	lsls	r1, r2, #27
 8014302:	bf44      	itt	mi
 8014304:	2320      	movmi	r3, #32
 8014306:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801430a:	0713      	lsls	r3, r2, #28
 801430c:	bf44      	itt	mi
 801430e:	232b      	movmi	r3, #43	@ 0x2b
 8014310:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014314:	f89a 3000 	ldrb.w	r3, [sl]
 8014318:	2b2a      	cmp	r3, #42	@ 0x2a
 801431a:	d015      	beq.n	8014348 <_vfiprintf_r+0x120>
 801431c:	9a07      	ldr	r2, [sp, #28]
 801431e:	4654      	mov	r4, sl
 8014320:	2000      	movs	r0, #0
 8014322:	f04f 0c0a 	mov.w	ip, #10
 8014326:	4621      	mov	r1, r4
 8014328:	f811 3b01 	ldrb.w	r3, [r1], #1
 801432c:	3b30      	subs	r3, #48	@ 0x30
 801432e:	2b09      	cmp	r3, #9
 8014330:	d94b      	bls.n	80143ca <_vfiprintf_r+0x1a2>
 8014332:	b1b0      	cbz	r0, 8014362 <_vfiprintf_r+0x13a>
 8014334:	9207      	str	r2, [sp, #28]
 8014336:	e014      	b.n	8014362 <_vfiprintf_r+0x13a>
 8014338:	eba0 0308 	sub.w	r3, r0, r8
 801433c:	fa09 f303 	lsl.w	r3, r9, r3
 8014340:	4313      	orrs	r3, r2
 8014342:	9304      	str	r3, [sp, #16]
 8014344:	46a2      	mov	sl, r4
 8014346:	e7d2      	b.n	80142ee <_vfiprintf_r+0xc6>
 8014348:	9b03      	ldr	r3, [sp, #12]
 801434a:	1d19      	adds	r1, r3, #4
 801434c:	681b      	ldr	r3, [r3, #0]
 801434e:	9103      	str	r1, [sp, #12]
 8014350:	2b00      	cmp	r3, #0
 8014352:	bfbb      	ittet	lt
 8014354:	425b      	neglt	r3, r3
 8014356:	f042 0202 	orrlt.w	r2, r2, #2
 801435a:	9307      	strge	r3, [sp, #28]
 801435c:	9307      	strlt	r3, [sp, #28]
 801435e:	bfb8      	it	lt
 8014360:	9204      	strlt	r2, [sp, #16]
 8014362:	7823      	ldrb	r3, [r4, #0]
 8014364:	2b2e      	cmp	r3, #46	@ 0x2e
 8014366:	d10a      	bne.n	801437e <_vfiprintf_r+0x156>
 8014368:	7863      	ldrb	r3, [r4, #1]
 801436a:	2b2a      	cmp	r3, #42	@ 0x2a
 801436c:	d132      	bne.n	80143d4 <_vfiprintf_r+0x1ac>
 801436e:	9b03      	ldr	r3, [sp, #12]
 8014370:	1d1a      	adds	r2, r3, #4
 8014372:	681b      	ldr	r3, [r3, #0]
 8014374:	9203      	str	r2, [sp, #12]
 8014376:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801437a:	3402      	adds	r4, #2
 801437c:	9305      	str	r3, [sp, #20]
 801437e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014454 <_vfiprintf_r+0x22c>
 8014382:	7821      	ldrb	r1, [r4, #0]
 8014384:	2203      	movs	r2, #3
 8014386:	4650      	mov	r0, sl
 8014388:	f7eb fefa 	bl	8000180 <memchr>
 801438c:	b138      	cbz	r0, 801439e <_vfiprintf_r+0x176>
 801438e:	9b04      	ldr	r3, [sp, #16]
 8014390:	eba0 000a 	sub.w	r0, r0, sl
 8014394:	2240      	movs	r2, #64	@ 0x40
 8014396:	4082      	lsls	r2, r0
 8014398:	4313      	orrs	r3, r2
 801439a:	3401      	adds	r4, #1
 801439c:	9304      	str	r3, [sp, #16]
 801439e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143a2:	4829      	ldr	r0, [pc, #164]	@ (8014448 <_vfiprintf_r+0x220>)
 80143a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80143a8:	2206      	movs	r2, #6
 80143aa:	f7eb fee9 	bl	8000180 <memchr>
 80143ae:	2800      	cmp	r0, #0
 80143b0:	d03f      	beq.n	8014432 <_vfiprintf_r+0x20a>
 80143b2:	4b26      	ldr	r3, [pc, #152]	@ (801444c <_vfiprintf_r+0x224>)
 80143b4:	bb1b      	cbnz	r3, 80143fe <_vfiprintf_r+0x1d6>
 80143b6:	9b03      	ldr	r3, [sp, #12]
 80143b8:	3307      	adds	r3, #7
 80143ba:	f023 0307 	bic.w	r3, r3, #7
 80143be:	3308      	adds	r3, #8
 80143c0:	9303      	str	r3, [sp, #12]
 80143c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80143c4:	443b      	add	r3, r7
 80143c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80143c8:	e76a      	b.n	80142a0 <_vfiprintf_r+0x78>
 80143ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80143ce:	460c      	mov	r4, r1
 80143d0:	2001      	movs	r0, #1
 80143d2:	e7a8      	b.n	8014326 <_vfiprintf_r+0xfe>
 80143d4:	2300      	movs	r3, #0
 80143d6:	3401      	adds	r4, #1
 80143d8:	9305      	str	r3, [sp, #20]
 80143da:	4619      	mov	r1, r3
 80143dc:	f04f 0c0a 	mov.w	ip, #10
 80143e0:	4620      	mov	r0, r4
 80143e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80143e6:	3a30      	subs	r2, #48	@ 0x30
 80143e8:	2a09      	cmp	r2, #9
 80143ea:	d903      	bls.n	80143f4 <_vfiprintf_r+0x1cc>
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d0c6      	beq.n	801437e <_vfiprintf_r+0x156>
 80143f0:	9105      	str	r1, [sp, #20]
 80143f2:	e7c4      	b.n	801437e <_vfiprintf_r+0x156>
 80143f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80143f8:	4604      	mov	r4, r0
 80143fa:	2301      	movs	r3, #1
 80143fc:	e7f0      	b.n	80143e0 <_vfiprintf_r+0x1b8>
 80143fe:	ab03      	add	r3, sp, #12
 8014400:	9300      	str	r3, [sp, #0]
 8014402:	462a      	mov	r2, r5
 8014404:	4b12      	ldr	r3, [pc, #72]	@ (8014450 <_vfiprintf_r+0x228>)
 8014406:	a904      	add	r1, sp, #16
 8014408:	4630      	mov	r0, r6
 801440a:	f7fd fead 	bl	8012168 <_printf_float>
 801440e:	4607      	mov	r7, r0
 8014410:	1c78      	adds	r0, r7, #1
 8014412:	d1d6      	bne.n	80143c2 <_vfiprintf_r+0x19a>
 8014414:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014416:	07d9      	lsls	r1, r3, #31
 8014418:	d405      	bmi.n	8014426 <_vfiprintf_r+0x1fe>
 801441a:	89ab      	ldrh	r3, [r5, #12]
 801441c:	059a      	lsls	r2, r3, #22
 801441e:	d402      	bmi.n	8014426 <_vfiprintf_r+0x1fe>
 8014420:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014422:	f7fe fbf7 	bl	8012c14 <__retarget_lock_release_recursive>
 8014426:	89ab      	ldrh	r3, [r5, #12]
 8014428:	065b      	lsls	r3, r3, #25
 801442a:	f53f af1f 	bmi.w	801426c <_vfiprintf_r+0x44>
 801442e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014430:	e71e      	b.n	8014270 <_vfiprintf_r+0x48>
 8014432:	ab03      	add	r3, sp, #12
 8014434:	9300      	str	r3, [sp, #0]
 8014436:	462a      	mov	r2, r5
 8014438:	4b05      	ldr	r3, [pc, #20]	@ (8014450 <_vfiprintf_r+0x228>)
 801443a:	a904      	add	r1, sp, #16
 801443c:	4630      	mov	r0, r6
 801443e:	f7fe f92b 	bl	8012698 <_printf_i>
 8014442:	e7e4      	b.n	801440e <_vfiprintf_r+0x1e6>
 8014444:	08014d88 	.word	0x08014d88
 8014448:	08014d92 	.word	0x08014d92
 801444c:	08012169 	.word	0x08012169
 8014450:	08014203 	.word	0x08014203
 8014454:	08014d8e 	.word	0x08014d8e

08014458 <__sflush_r>:
 8014458:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801445c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014460:	0716      	lsls	r6, r2, #28
 8014462:	4605      	mov	r5, r0
 8014464:	460c      	mov	r4, r1
 8014466:	d454      	bmi.n	8014512 <__sflush_r+0xba>
 8014468:	684b      	ldr	r3, [r1, #4]
 801446a:	2b00      	cmp	r3, #0
 801446c:	dc02      	bgt.n	8014474 <__sflush_r+0x1c>
 801446e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014470:	2b00      	cmp	r3, #0
 8014472:	dd48      	ble.n	8014506 <__sflush_r+0xae>
 8014474:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014476:	2e00      	cmp	r6, #0
 8014478:	d045      	beq.n	8014506 <__sflush_r+0xae>
 801447a:	2300      	movs	r3, #0
 801447c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014480:	682f      	ldr	r7, [r5, #0]
 8014482:	6a21      	ldr	r1, [r4, #32]
 8014484:	602b      	str	r3, [r5, #0]
 8014486:	d030      	beq.n	80144ea <__sflush_r+0x92>
 8014488:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801448a:	89a3      	ldrh	r3, [r4, #12]
 801448c:	0759      	lsls	r1, r3, #29
 801448e:	d505      	bpl.n	801449c <__sflush_r+0x44>
 8014490:	6863      	ldr	r3, [r4, #4]
 8014492:	1ad2      	subs	r2, r2, r3
 8014494:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014496:	b10b      	cbz	r3, 801449c <__sflush_r+0x44>
 8014498:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801449a:	1ad2      	subs	r2, r2, r3
 801449c:	2300      	movs	r3, #0
 801449e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80144a0:	6a21      	ldr	r1, [r4, #32]
 80144a2:	4628      	mov	r0, r5
 80144a4:	47b0      	blx	r6
 80144a6:	1c43      	adds	r3, r0, #1
 80144a8:	89a3      	ldrh	r3, [r4, #12]
 80144aa:	d106      	bne.n	80144ba <__sflush_r+0x62>
 80144ac:	6829      	ldr	r1, [r5, #0]
 80144ae:	291d      	cmp	r1, #29
 80144b0:	d82b      	bhi.n	801450a <__sflush_r+0xb2>
 80144b2:	4a2a      	ldr	r2, [pc, #168]	@ (801455c <__sflush_r+0x104>)
 80144b4:	410a      	asrs	r2, r1
 80144b6:	07d6      	lsls	r6, r2, #31
 80144b8:	d427      	bmi.n	801450a <__sflush_r+0xb2>
 80144ba:	2200      	movs	r2, #0
 80144bc:	6062      	str	r2, [r4, #4]
 80144be:	04d9      	lsls	r1, r3, #19
 80144c0:	6922      	ldr	r2, [r4, #16]
 80144c2:	6022      	str	r2, [r4, #0]
 80144c4:	d504      	bpl.n	80144d0 <__sflush_r+0x78>
 80144c6:	1c42      	adds	r2, r0, #1
 80144c8:	d101      	bne.n	80144ce <__sflush_r+0x76>
 80144ca:	682b      	ldr	r3, [r5, #0]
 80144cc:	b903      	cbnz	r3, 80144d0 <__sflush_r+0x78>
 80144ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80144d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80144d2:	602f      	str	r7, [r5, #0]
 80144d4:	b1b9      	cbz	r1, 8014506 <__sflush_r+0xae>
 80144d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80144da:	4299      	cmp	r1, r3
 80144dc:	d002      	beq.n	80144e4 <__sflush_r+0x8c>
 80144de:	4628      	mov	r0, r5
 80144e0:	f7ff f9f6 	bl	80138d0 <_free_r>
 80144e4:	2300      	movs	r3, #0
 80144e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80144e8:	e00d      	b.n	8014506 <__sflush_r+0xae>
 80144ea:	2301      	movs	r3, #1
 80144ec:	4628      	mov	r0, r5
 80144ee:	47b0      	blx	r6
 80144f0:	4602      	mov	r2, r0
 80144f2:	1c50      	adds	r0, r2, #1
 80144f4:	d1c9      	bne.n	801448a <__sflush_r+0x32>
 80144f6:	682b      	ldr	r3, [r5, #0]
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d0c6      	beq.n	801448a <__sflush_r+0x32>
 80144fc:	2b1d      	cmp	r3, #29
 80144fe:	d001      	beq.n	8014504 <__sflush_r+0xac>
 8014500:	2b16      	cmp	r3, #22
 8014502:	d11e      	bne.n	8014542 <__sflush_r+0xea>
 8014504:	602f      	str	r7, [r5, #0]
 8014506:	2000      	movs	r0, #0
 8014508:	e022      	b.n	8014550 <__sflush_r+0xf8>
 801450a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801450e:	b21b      	sxth	r3, r3
 8014510:	e01b      	b.n	801454a <__sflush_r+0xf2>
 8014512:	690f      	ldr	r7, [r1, #16]
 8014514:	2f00      	cmp	r7, #0
 8014516:	d0f6      	beq.n	8014506 <__sflush_r+0xae>
 8014518:	0793      	lsls	r3, r2, #30
 801451a:	680e      	ldr	r6, [r1, #0]
 801451c:	bf08      	it	eq
 801451e:	694b      	ldreq	r3, [r1, #20]
 8014520:	600f      	str	r7, [r1, #0]
 8014522:	bf18      	it	ne
 8014524:	2300      	movne	r3, #0
 8014526:	eba6 0807 	sub.w	r8, r6, r7
 801452a:	608b      	str	r3, [r1, #8]
 801452c:	f1b8 0f00 	cmp.w	r8, #0
 8014530:	dde9      	ble.n	8014506 <__sflush_r+0xae>
 8014532:	6a21      	ldr	r1, [r4, #32]
 8014534:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014536:	4643      	mov	r3, r8
 8014538:	463a      	mov	r2, r7
 801453a:	4628      	mov	r0, r5
 801453c:	47b0      	blx	r6
 801453e:	2800      	cmp	r0, #0
 8014540:	dc08      	bgt.n	8014554 <__sflush_r+0xfc>
 8014542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014546:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801454a:	81a3      	strh	r3, [r4, #12]
 801454c:	f04f 30ff 	mov.w	r0, #4294967295
 8014550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014554:	4407      	add	r7, r0
 8014556:	eba8 0800 	sub.w	r8, r8, r0
 801455a:	e7e7      	b.n	801452c <__sflush_r+0xd4>
 801455c:	dfbffffe 	.word	0xdfbffffe

08014560 <_fflush_r>:
 8014560:	b538      	push	{r3, r4, r5, lr}
 8014562:	690b      	ldr	r3, [r1, #16]
 8014564:	4605      	mov	r5, r0
 8014566:	460c      	mov	r4, r1
 8014568:	b913      	cbnz	r3, 8014570 <_fflush_r+0x10>
 801456a:	2500      	movs	r5, #0
 801456c:	4628      	mov	r0, r5
 801456e:	bd38      	pop	{r3, r4, r5, pc}
 8014570:	b118      	cbz	r0, 801457a <_fflush_r+0x1a>
 8014572:	6a03      	ldr	r3, [r0, #32]
 8014574:	b90b      	cbnz	r3, 801457a <_fflush_r+0x1a>
 8014576:	f7fe fa3b 	bl	80129f0 <__sinit>
 801457a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801457e:	2b00      	cmp	r3, #0
 8014580:	d0f3      	beq.n	801456a <_fflush_r+0xa>
 8014582:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014584:	07d0      	lsls	r0, r2, #31
 8014586:	d404      	bmi.n	8014592 <_fflush_r+0x32>
 8014588:	0599      	lsls	r1, r3, #22
 801458a:	d402      	bmi.n	8014592 <_fflush_r+0x32>
 801458c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801458e:	f7fe fb40 	bl	8012c12 <__retarget_lock_acquire_recursive>
 8014592:	4628      	mov	r0, r5
 8014594:	4621      	mov	r1, r4
 8014596:	f7ff ff5f 	bl	8014458 <__sflush_r>
 801459a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801459c:	07da      	lsls	r2, r3, #31
 801459e:	4605      	mov	r5, r0
 80145a0:	d4e4      	bmi.n	801456c <_fflush_r+0xc>
 80145a2:	89a3      	ldrh	r3, [r4, #12]
 80145a4:	059b      	lsls	r3, r3, #22
 80145a6:	d4e1      	bmi.n	801456c <_fflush_r+0xc>
 80145a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80145aa:	f7fe fb33 	bl	8012c14 <__retarget_lock_release_recursive>
 80145ae:	e7dd      	b.n	801456c <_fflush_r+0xc>

080145b0 <_putc_r>:
 80145b0:	b570      	push	{r4, r5, r6, lr}
 80145b2:	460d      	mov	r5, r1
 80145b4:	4614      	mov	r4, r2
 80145b6:	4606      	mov	r6, r0
 80145b8:	b118      	cbz	r0, 80145c2 <_putc_r+0x12>
 80145ba:	6a03      	ldr	r3, [r0, #32]
 80145bc:	b90b      	cbnz	r3, 80145c2 <_putc_r+0x12>
 80145be:	f7fe fa17 	bl	80129f0 <__sinit>
 80145c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80145c4:	07d8      	lsls	r0, r3, #31
 80145c6:	d405      	bmi.n	80145d4 <_putc_r+0x24>
 80145c8:	89a3      	ldrh	r3, [r4, #12]
 80145ca:	0599      	lsls	r1, r3, #22
 80145cc:	d402      	bmi.n	80145d4 <_putc_r+0x24>
 80145ce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80145d0:	f7fe fb1f 	bl	8012c12 <__retarget_lock_acquire_recursive>
 80145d4:	68a3      	ldr	r3, [r4, #8]
 80145d6:	3b01      	subs	r3, #1
 80145d8:	2b00      	cmp	r3, #0
 80145da:	60a3      	str	r3, [r4, #8]
 80145dc:	da05      	bge.n	80145ea <_putc_r+0x3a>
 80145de:	69a2      	ldr	r2, [r4, #24]
 80145e0:	4293      	cmp	r3, r2
 80145e2:	db12      	blt.n	801460a <_putc_r+0x5a>
 80145e4:	b2eb      	uxtb	r3, r5
 80145e6:	2b0a      	cmp	r3, #10
 80145e8:	d00f      	beq.n	801460a <_putc_r+0x5a>
 80145ea:	6823      	ldr	r3, [r4, #0]
 80145ec:	1c5a      	adds	r2, r3, #1
 80145ee:	6022      	str	r2, [r4, #0]
 80145f0:	701d      	strb	r5, [r3, #0]
 80145f2:	b2ed      	uxtb	r5, r5
 80145f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80145f6:	07da      	lsls	r2, r3, #31
 80145f8:	d405      	bmi.n	8014606 <_putc_r+0x56>
 80145fa:	89a3      	ldrh	r3, [r4, #12]
 80145fc:	059b      	lsls	r3, r3, #22
 80145fe:	d402      	bmi.n	8014606 <_putc_r+0x56>
 8014600:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014602:	f7fe fb07 	bl	8012c14 <__retarget_lock_release_recursive>
 8014606:	4628      	mov	r0, r5
 8014608:	bd70      	pop	{r4, r5, r6, pc}
 801460a:	4629      	mov	r1, r5
 801460c:	4622      	mov	r2, r4
 801460e:	4630      	mov	r0, r6
 8014610:	f000 f802 	bl	8014618 <__swbuf_r>
 8014614:	4605      	mov	r5, r0
 8014616:	e7ed      	b.n	80145f4 <_putc_r+0x44>

08014618 <__swbuf_r>:
 8014618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801461a:	460e      	mov	r6, r1
 801461c:	4614      	mov	r4, r2
 801461e:	4605      	mov	r5, r0
 8014620:	b118      	cbz	r0, 801462a <__swbuf_r+0x12>
 8014622:	6a03      	ldr	r3, [r0, #32]
 8014624:	b90b      	cbnz	r3, 801462a <__swbuf_r+0x12>
 8014626:	f7fe f9e3 	bl	80129f0 <__sinit>
 801462a:	69a3      	ldr	r3, [r4, #24]
 801462c:	60a3      	str	r3, [r4, #8]
 801462e:	89a3      	ldrh	r3, [r4, #12]
 8014630:	071a      	lsls	r2, r3, #28
 8014632:	d501      	bpl.n	8014638 <__swbuf_r+0x20>
 8014634:	6923      	ldr	r3, [r4, #16]
 8014636:	b943      	cbnz	r3, 801464a <__swbuf_r+0x32>
 8014638:	4621      	mov	r1, r4
 801463a:	4628      	mov	r0, r5
 801463c:	f000 f82a 	bl	8014694 <__swsetup_r>
 8014640:	b118      	cbz	r0, 801464a <__swbuf_r+0x32>
 8014642:	f04f 37ff 	mov.w	r7, #4294967295
 8014646:	4638      	mov	r0, r7
 8014648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801464a:	6823      	ldr	r3, [r4, #0]
 801464c:	6922      	ldr	r2, [r4, #16]
 801464e:	1a98      	subs	r0, r3, r2
 8014650:	6963      	ldr	r3, [r4, #20]
 8014652:	b2f6      	uxtb	r6, r6
 8014654:	4283      	cmp	r3, r0
 8014656:	4637      	mov	r7, r6
 8014658:	dc05      	bgt.n	8014666 <__swbuf_r+0x4e>
 801465a:	4621      	mov	r1, r4
 801465c:	4628      	mov	r0, r5
 801465e:	f7ff ff7f 	bl	8014560 <_fflush_r>
 8014662:	2800      	cmp	r0, #0
 8014664:	d1ed      	bne.n	8014642 <__swbuf_r+0x2a>
 8014666:	68a3      	ldr	r3, [r4, #8]
 8014668:	3b01      	subs	r3, #1
 801466a:	60a3      	str	r3, [r4, #8]
 801466c:	6823      	ldr	r3, [r4, #0]
 801466e:	1c5a      	adds	r2, r3, #1
 8014670:	6022      	str	r2, [r4, #0]
 8014672:	701e      	strb	r6, [r3, #0]
 8014674:	6962      	ldr	r2, [r4, #20]
 8014676:	1c43      	adds	r3, r0, #1
 8014678:	429a      	cmp	r2, r3
 801467a:	d004      	beq.n	8014686 <__swbuf_r+0x6e>
 801467c:	89a3      	ldrh	r3, [r4, #12]
 801467e:	07db      	lsls	r3, r3, #31
 8014680:	d5e1      	bpl.n	8014646 <__swbuf_r+0x2e>
 8014682:	2e0a      	cmp	r6, #10
 8014684:	d1df      	bne.n	8014646 <__swbuf_r+0x2e>
 8014686:	4621      	mov	r1, r4
 8014688:	4628      	mov	r0, r5
 801468a:	f7ff ff69 	bl	8014560 <_fflush_r>
 801468e:	2800      	cmp	r0, #0
 8014690:	d0d9      	beq.n	8014646 <__swbuf_r+0x2e>
 8014692:	e7d6      	b.n	8014642 <__swbuf_r+0x2a>

08014694 <__swsetup_r>:
 8014694:	b538      	push	{r3, r4, r5, lr}
 8014696:	4b29      	ldr	r3, [pc, #164]	@ (801473c <__swsetup_r+0xa8>)
 8014698:	4605      	mov	r5, r0
 801469a:	6818      	ldr	r0, [r3, #0]
 801469c:	460c      	mov	r4, r1
 801469e:	b118      	cbz	r0, 80146a8 <__swsetup_r+0x14>
 80146a0:	6a03      	ldr	r3, [r0, #32]
 80146a2:	b90b      	cbnz	r3, 80146a8 <__swsetup_r+0x14>
 80146a4:	f7fe f9a4 	bl	80129f0 <__sinit>
 80146a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80146ac:	0719      	lsls	r1, r3, #28
 80146ae:	d422      	bmi.n	80146f6 <__swsetup_r+0x62>
 80146b0:	06da      	lsls	r2, r3, #27
 80146b2:	d407      	bmi.n	80146c4 <__swsetup_r+0x30>
 80146b4:	2209      	movs	r2, #9
 80146b6:	602a      	str	r2, [r5, #0]
 80146b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80146bc:	81a3      	strh	r3, [r4, #12]
 80146be:	f04f 30ff 	mov.w	r0, #4294967295
 80146c2:	e033      	b.n	801472c <__swsetup_r+0x98>
 80146c4:	0758      	lsls	r0, r3, #29
 80146c6:	d512      	bpl.n	80146ee <__swsetup_r+0x5a>
 80146c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80146ca:	b141      	cbz	r1, 80146de <__swsetup_r+0x4a>
 80146cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80146d0:	4299      	cmp	r1, r3
 80146d2:	d002      	beq.n	80146da <__swsetup_r+0x46>
 80146d4:	4628      	mov	r0, r5
 80146d6:	f7ff f8fb 	bl	80138d0 <_free_r>
 80146da:	2300      	movs	r3, #0
 80146dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80146de:	89a3      	ldrh	r3, [r4, #12]
 80146e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80146e4:	81a3      	strh	r3, [r4, #12]
 80146e6:	2300      	movs	r3, #0
 80146e8:	6063      	str	r3, [r4, #4]
 80146ea:	6923      	ldr	r3, [r4, #16]
 80146ec:	6023      	str	r3, [r4, #0]
 80146ee:	89a3      	ldrh	r3, [r4, #12]
 80146f0:	f043 0308 	orr.w	r3, r3, #8
 80146f4:	81a3      	strh	r3, [r4, #12]
 80146f6:	6923      	ldr	r3, [r4, #16]
 80146f8:	b94b      	cbnz	r3, 801470e <__swsetup_r+0x7a>
 80146fa:	89a3      	ldrh	r3, [r4, #12]
 80146fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014700:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014704:	d003      	beq.n	801470e <__swsetup_r+0x7a>
 8014706:	4621      	mov	r1, r4
 8014708:	4628      	mov	r0, r5
 801470a:	f000 f8b3 	bl	8014874 <__smakebuf_r>
 801470e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014712:	f013 0201 	ands.w	r2, r3, #1
 8014716:	d00a      	beq.n	801472e <__swsetup_r+0x9a>
 8014718:	2200      	movs	r2, #0
 801471a:	60a2      	str	r2, [r4, #8]
 801471c:	6962      	ldr	r2, [r4, #20]
 801471e:	4252      	negs	r2, r2
 8014720:	61a2      	str	r2, [r4, #24]
 8014722:	6922      	ldr	r2, [r4, #16]
 8014724:	b942      	cbnz	r2, 8014738 <__swsetup_r+0xa4>
 8014726:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801472a:	d1c5      	bne.n	80146b8 <__swsetup_r+0x24>
 801472c:	bd38      	pop	{r3, r4, r5, pc}
 801472e:	0799      	lsls	r1, r3, #30
 8014730:	bf58      	it	pl
 8014732:	6962      	ldrpl	r2, [r4, #20]
 8014734:	60a2      	str	r2, [r4, #8]
 8014736:	e7f4      	b.n	8014722 <__swsetup_r+0x8e>
 8014738:	2000      	movs	r0, #0
 801473a:	e7f7      	b.n	801472c <__swsetup_r+0x98>
 801473c:	20000134 	.word	0x20000134

08014740 <_sbrk_r>:
 8014740:	b538      	push	{r3, r4, r5, lr}
 8014742:	4d06      	ldr	r5, [pc, #24]	@ (801475c <_sbrk_r+0x1c>)
 8014744:	2300      	movs	r3, #0
 8014746:	4604      	mov	r4, r0
 8014748:	4608      	mov	r0, r1
 801474a:	602b      	str	r3, [r5, #0]
 801474c:	f7f0 f868 	bl	8004820 <_sbrk>
 8014750:	1c43      	adds	r3, r0, #1
 8014752:	d102      	bne.n	801475a <_sbrk_r+0x1a>
 8014754:	682b      	ldr	r3, [r5, #0]
 8014756:	b103      	cbz	r3, 801475a <_sbrk_r+0x1a>
 8014758:	6023      	str	r3, [r4, #0]
 801475a:	bd38      	pop	{r3, r4, r5, pc}
 801475c:	200024bc 	.word	0x200024bc

08014760 <__assert_func>:
 8014760:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014762:	4614      	mov	r4, r2
 8014764:	461a      	mov	r2, r3
 8014766:	4b09      	ldr	r3, [pc, #36]	@ (801478c <__assert_func+0x2c>)
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	4605      	mov	r5, r0
 801476c:	68d8      	ldr	r0, [r3, #12]
 801476e:	b954      	cbnz	r4, 8014786 <__assert_func+0x26>
 8014770:	4b07      	ldr	r3, [pc, #28]	@ (8014790 <__assert_func+0x30>)
 8014772:	461c      	mov	r4, r3
 8014774:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014778:	9100      	str	r1, [sp, #0]
 801477a:	462b      	mov	r3, r5
 801477c:	4905      	ldr	r1, [pc, #20]	@ (8014794 <__assert_func+0x34>)
 801477e:	f000 f841 	bl	8014804 <fiprintf>
 8014782:	f000 f8d5 	bl	8014930 <abort>
 8014786:	4b04      	ldr	r3, [pc, #16]	@ (8014798 <__assert_func+0x38>)
 8014788:	e7f4      	b.n	8014774 <__assert_func+0x14>
 801478a:	bf00      	nop
 801478c:	20000134 	.word	0x20000134
 8014790:	08014dde 	.word	0x08014dde
 8014794:	08014db0 	.word	0x08014db0
 8014798:	08014da3 	.word	0x08014da3

0801479c <_calloc_r>:
 801479c:	b570      	push	{r4, r5, r6, lr}
 801479e:	fba1 5402 	umull	r5, r4, r1, r2
 80147a2:	b93c      	cbnz	r4, 80147b4 <_calloc_r+0x18>
 80147a4:	4629      	mov	r1, r5
 80147a6:	f7ff f907 	bl	80139b8 <_malloc_r>
 80147aa:	4606      	mov	r6, r0
 80147ac:	b928      	cbnz	r0, 80147ba <_calloc_r+0x1e>
 80147ae:	2600      	movs	r6, #0
 80147b0:	4630      	mov	r0, r6
 80147b2:	bd70      	pop	{r4, r5, r6, pc}
 80147b4:	220c      	movs	r2, #12
 80147b6:	6002      	str	r2, [r0, #0]
 80147b8:	e7f9      	b.n	80147ae <_calloc_r+0x12>
 80147ba:	462a      	mov	r2, r5
 80147bc:	4621      	mov	r1, r4
 80147be:	f7fe f9aa 	bl	8012b16 <memset>
 80147c2:	e7f5      	b.n	80147b0 <_calloc_r+0x14>

080147c4 <__ascii_mbtowc>:
 80147c4:	b082      	sub	sp, #8
 80147c6:	b901      	cbnz	r1, 80147ca <__ascii_mbtowc+0x6>
 80147c8:	a901      	add	r1, sp, #4
 80147ca:	b142      	cbz	r2, 80147de <__ascii_mbtowc+0x1a>
 80147cc:	b14b      	cbz	r3, 80147e2 <__ascii_mbtowc+0x1e>
 80147ce:	7813      	ldrb	r3, [r2, #0]
 80147d0:	600b      	str	r3, [r1, #0]
 80147d2:	7812      	ldrb	r2, [r2, #0]
 80147d4:	1e10      	subs	r0, r2, #0
 80147d6:	bf18      	it	ne
 80147d8:	2001      	movne	r0, #1
 80147da:	b002      	add	sp, #8
 80147dc:	4770      	bx	lr
 80147de:	4610      	mov	r0, r2
 80147e0:	e7fb      	b.n	80147da <__ascii_mbtowc+0x16>
 80147e2:	f06f 0001 	mvn.w	r0, #1
 80147e6:	e7f8      	b.n	80147da <__ascii_mbtowc+0x16>

080147e8 <__ascii_wctomb>:
 80147e8:	4603      	mov	r3, r0
 80147ea:	4608      	mov	r0, r1
 80147ec:	b141      	cbz	r1, 8014800 <__ascii_wctomb+0x18>
 80147ee:	2aff      	cmp	r2, #255	@ 0xff
 80147f0:	d904      	bls.n	80147fc <__ascii_wctomb+0x14>
 80147f2:	228a      	movs	r2, #138	@ 0x8a
 80147f4:	601a      	str	r2, [r3, #0]
 80147f6:	f04f 30ff 	mov.w	r0, #4294967295
 80147fa:	4770      	bx	lr
 80147fc:	700a      	strb	r2, [r1, #0]
 80147fe:	2001      	movs	r0, #1
 8014800:	4770      	bx	lr
	...

08014804 <fiprintf>:
 8014804:	b40e      	push	{r1, r2, r3}
 8014806:	b503      	push	{r0, r1, lr}
 8014808:	4601      	mov	r1, r0
 801480a:	ab03      	add	r3, sp, #12
 801480c:	4805      	ldr	r0, [pc, #20]	@ (8014824 <fiprintf+0x20>)
 801480e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014812:	6800      	ldr	r0, [r0, #0]
 8014814:	9301      	str	r3, [sp, #4]
 8014816:	f7ff fd07 	bl	8014228 <_vfiprintf_r>
 801481a:	b002      	add	sp, #8
 801481c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014820:	b003      	add	sp, #12
 8014822:	4770      	bx	lr
 8014824:	20000134 	.word	0x20000134

08014828 <__swhatbuf_r>:
 8014828:	b570      	push	{r4, r5, r6, lr}
 801482a:	460c      	mov	r4, r1
 801482c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014830:	2900      	cmp	r1, #0
 8014832:	b096      	sub	sp, #88	@ 0x58
 8014834:	4615      	mov	r5, r2
 8014836:	461e      	mov	r6, r3
 8014838:	da0d      	bge.n	8014856 <__swhatbuf_r+0x2e>
 801483a:	89a3      	ldrh	r3, [r4, #12]
 801483c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014840:	f04f 0100 	mov.w	r1, #0
 8014844:	bf14      	ite	ne
 8014846:	2340      	movne	r3, #64	@ 0x40
 8014848:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801484c:	2000      	movs	r0, #0
 801484e:	6031      	str	r1, [r6, #0]
 8014850:	602b      	str	r3, [r5, #0]
 8014852:	b016      	add	sp, #88	@ 0x58
 8014854:	bd70      	pop	{r4, r5, r6, pc}
 8014856:	466a      	mov	r2, sp
 8014858:	f000 f848 	bl	80148ec <_fstat_r>
 801485c:	2800      	cmp	r0, #0
 801485e:	dbec      	blt.n	801483a <__swhatbuf_r+0x12>
 8014860:	9901      	ldr	r1, [sp, #4]
 8014862:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014866:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801486a:	4259      	negs	r1, r3
 801486c:	4159      	adcs	r1, r3
 801486e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014872:	e7eb      	b.n	801484c <__swhatbuf_r+0x24>

08014874 <__smakebuf_r>:
 8014874:	898b      	ldrh	r3, [r1, #12]
 8014876:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014878:	079d      	lsls	r5, r3, #30
 801487a:	4606      	mov	r6, r0
 801487c:	460c      	mov	r4, r1
 801487e:	d507      	bpl.n	8014890 <__smakebuf_r+0x1c>
 8014880:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014884:	6023      	str	r3, [r4, #0]
 8014886:	6123      	str	r3, [r4, #16]
 8014888:	2301      	movs	r3, #1
 801488a:	6163      	str	r3, [r4, #20]
 801488c:	b003      	add	sp, #12
 801488e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014890:	ab01      	add	r3, sp, #4
 8014892:	466a      	mov	r2, sp
 8014894:	f7ff ffc8 	bl	8014828 <__swhatbuf_r>
 8014898:	9f00      	ldr	r7, [sp, #0]
 801489a:	4605      	mov	r5, r0
 801489c:	4639      	mov	r1, r7
 801489e:	4630      	mov	r0, r6
 80148a0:	f7ff f88a 	bl	80139b8 <_malloc_r>
 80148a4:	b948      	cbnz	r0, 80148ba <__smakebuf_r+0x46>
 80148a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80148aa:	059a      	lsls	r2, r3, #22
 80148ac:	d4ee      	bmi.n	801488c <__smakebuf_r+0x18>
 80148ae:	f023 0303 	bic.w	r3, r3, #3
 80148b2:	f043 0302 	orr.w	r3, r3, #2
 80148b6:	81a3      	strh	r3, [r4, #12]
 80148b8:	e7e2      	b.n	8014880 <__smakebuf_r+0xc>
 80148ba:	89a3      	ldrh	r3, [r4, #12]
 80148bc:	6020      	str	r0, [r4, #0]
 80148be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80148c2:	81a3      	strh	r3, [r4, #12]
 80148c4:	9b01      	ldr	r3, [sp, #4]
 80148c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80148ca:	b15b      	cbz	r3, 80148e4 <__smakebuf_r+0x70>
 80148cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80148d0:	4630      	mov	r0, r6
 80148d2:	f000 f81d 	bl	8014910 <_isatty_r>
 80148d6:	b128      	cbz	r0, 80148e4 <__smakebuf_r+0x70>
 80148d8:	89a3      	ldrh	r3, [r4, #12]
 80148da:	f023 0303 	bic.w	r3, r3, #3
 80148de:	f043 0301 	orr.w	r3, r3, #1
 80148e2:	81a3      	strh	r3, [r4, #12]
 80148e4:	89a3      	ldrh	r3, [r4, #12]
 80148e6:	431d      	orrs	r5, r3
 80148e8:	81a5      	strh	r5, [r4, #12]
 80148ea:	e7cf      	b.n	801488c <__smakebuf_r+0x18>

080148ec <_fstat_r>:
 80148ec:	b538      	push	{r3, r4, r5, lr}
 80148ee:	4d07      	ldr	r5, [pc, #28]	@ (801490c <_fstat_r+0x20>)
 80148f0:	2300      	movs	r3, #0
 80148f2:	4604      	mov	r4, r0
 80148f4:	4608      	mov	r0, r1
 80148f6:	4611      	mov	r1, r2
 80148f8:	602b      	str	r3, [r5, #0]
 80148fa:	f7ef ff69 	bl	80047d0 <_fstat>
 80148fe:	1c43      	adds	r3, r0, #1
 8014900:	d102      	bne.n	8014908 <_fstat_r+0x1c>
 8014902:	682b      	ldr	r3, [r5, #0]
 8014904:	b103      	cbz	r3, 8014908 <_fstat_r+0x1c>
 8014906:	6023      	str	r3, [r4, #0]
 8014908:	bd38      	pop	{r3, r4, r5, pc}
 801490a:	bf00      	nop
 801490c:	200024bc 	.word	0x200024bc

08014910 <_isatty_r>:
 8014910:	b538      	push	{r3, r4, r5, lr}
 8014912:	4d06      	ldr	r5, [pc, #24]	@ (801492c <_isatty_r+0x1c>)
 8014914:	2300      	movs	r3, #0
 8014916:	4604      	mov	r4, r0
 8014918:	4608      	mov	r0, r1
 801491a:	602b      	str	r3, [r5, #0]
 801491c:	f7ef ff68 	bl	80047f0 <_isatty>
 8014920:	1c43      	adds	r3, r0, #1
 8014922:	d102      	bne.n	801492a <_isatty_r+0x1a>
 8014924:	682b      	ldr	r3, [r5, #0]
 8014926:	b103      	cbz	r3, 801492a <_isatty_r+0x1a>
 8014928:	6023      	str	r3, [r4, #0]
 801492a:	bd38      	pop	{r3, r4, r5, pc}
 801492c:	200024bc 	.word	0x200024bc

08014930 <abort>:
 8014930:	b508      	push	{r3, lr}
 8014932:	2006      	movs	r0, #6
 8014934:	f000 f82c 	bl	8014990 <raise>
 8014938:	2001      	movs	r0, #1
 801493a:	f7ef fef9 	bl	8004730 <_exit>

0801493e <_raise_r>:
 801493e:	291f      	cmp	r1, #31
 8014940:	b538      	push	{r3, r4, r5, lr}
 8014942:	4605      	mov	r5, r0
 8014944:	460c      	mov	r4, r1
 8014946:	d904      	bls.n	8014952 <_raise_r+0x14>
 8014948:	2316      	movs	r3, #22
 801494a:	6003      	str	r3, [r0, #0]
 801494c:	f04f 30ff 	mov.w	r0, #4294967295
 8014950:	bd38      	pop	{r3, r4, r5, pc}
 8014952:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014954:	b112      	cbz	r2, 801495c <_raise_r+0x1e>
 8014956:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801495a:	b94b      	cbnz	r3, 8014970 <_raise_r+0x32>
 801495c:	4628      	mov	r0, r5
 801495e:	f000 f831 	bl	80149c4 <_getpid_r>
 8014962:	4622      	mov	r2, r4
 8014964:	4601      	mov	r1, r0
 8014966:	4628      	mov	r0, r5
 8014968:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801496c:	f000 b818 	b.w	80149a0 <_kill_r>
 8014970:	2b01      	cmp	r3, #1
 8014972:	d00a      	beq.n	801498a <_raise_r+0x4c>
 8014974:	1c59      	adds	r1, r3, #1
 8014976:	d103      	bne.n	8014980 <_raise_r+0x42>
 8014978:	2316      	movs	r3, #22
 801497a:	6003      	str	r3, [r0, #0]
 801497c:	2001      	movs	r0, #1
 801497e:	e7e7      	b.n	8014950 <_raise_r+0x12>
 8014980:	2100      	movs	r1, #0
 8014982:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014986:	4620      	mov	r0, r4
 8014988:	4798      	blx	r3
 801498a:	2000      	movs	r0, #0
 801498c:	e7e0      	b.n	8014950 <_raise_r+0x12>
	...

08014990 <raise>:
 8014990:	4b02      	ldr	r3, [pc, #8]	@ (801499c <raise+0xc>)
 8014992:	4601      	mov	r1, r0
 8014994:	6818      	ldr	r0, [r3, #0]
 8014996:	f7ff bfd2 	b.w	801493e <_raise_r>
 801499a:	bf00      	nop
 801499c:	20000134 	.word	0x20000134

080149a0 <_kill_r>:
 80149a0:	b538      	push	{r3, r4, r5, lr}
 80149a2:	4d07      	ldr	r5, [pc, #28]	@ (80149c0 <_kill_r+0x20>)
 80149a4:	2300      	movs	r3, #0
 80149a6:	4604      	mov	r4, r0
 80149a8:	4608      	mov	r0, r1
 80149aa:	4611      	mov	r1, r2
 80149ac:	602b      	str	r3, [r5, #0]
 80149ae:	f7ef feaf 	bl	8004710 <_kill>
 80149b2:	1c43      	adds	r3, r0, #1
 80149b4:	d102      	bne.n	80149bc <_kill_r+0x1c>
 80149b6:	682b      	ldr	r3, [r5, #0]
 80149b8:	b103      	cbz	r3, 80149bc <_kill_r+0x1c>
 80149ba:	6023      	str	r3, [r4, #0]
 80149bc:	bd38      	pop	{r3, r4, r5, pc}
 80149be:	bf00      	nop
 80149c0:	200024bc 	.word	0x200024bc

080149c4 <_getpid_r>:
 80149c4:	f7ef be9c 	b.w	8004700 <_getpid>

080149c8 <_init>:
 80149c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149ca:	bf00      	nop
 80149cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80149ce:	bc08      	pop	{r3}
 80149d0:	469e      	mov	lr, r3
 80149d2:	4770      	bx	lr

080149d4 <_fini>:
 80149d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149d6:	bf00      	nop
 80149d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80149da:	bc08      	pop	{r3}
 80149dc:	469e      	mov	lr, r3
 80149de:	4770      	bx	lr
