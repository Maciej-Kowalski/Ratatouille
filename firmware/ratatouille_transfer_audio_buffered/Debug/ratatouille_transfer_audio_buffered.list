
ratatouille_transfer_audio_buffered.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011040  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  08011180  08011180  00012180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801166c  0801166c  0001266c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011674  08011674  00012674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08011678  08011678  00012678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002e4  20000008  0801167c  00013008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001f6c  200002ec  08011960  000132ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20002258  08011960  00014258  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000132ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   00028233  00000000  00000000  0001331c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000050fd  00000000  00000000  0003b54f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002648  00000000  00000000  00040650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001d6c  00000000  00000000  00042c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00007904  00000000  00000000  00044a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00029b04  00000000  00000000  0004c308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000fee7e  00000000  00000000  00075e0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00174c8a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b418  00000000  00000000  00174cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000094  00000000  00000000  001800e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002ec 	.word	0x200002ec
 800015c:	00000000 	.word	0x00000000
 8000160:	08011168 	.word	0x08011168

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002f0 	.word	0x200002f0
 800017c:	08011168 	.word	0x08011168

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b988 	b.w	8000e80 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	468e      	mov	lr, r1
 8000b90:	4604      	mov	r4, r0
 8000b92:	4688      	mov	r8, r1
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d14a      	bne.n	8000c2e <__udivmoddi4+0xa6>
 8000b98:	428a      	cmp	r2, r1
 8000b9a:	4617      	mov	r7, r2
 8000b9c:	d962      	bls.n	8000c64 <__udivmoddi4+0xdc>
 8000b9e:	fab2 f682 	clz	r6, r2
 8000ba2:	b14e      	cbz	r6, 8000bb8 <__udivmoddi4+0x30>
 8000ba4:	f1c6 0320 	rsb	r3, r6, #32
 8000ba8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bac:	fa20 f303 	lsr.w	r3, r0, r3
 8000bb0:	40b7      	lsls	r7, r6
 8000bb2:	ea43 0808 	orr.w	r8, r3, r8
 8000bb6:	40b4      	lsls	r4, r6
 8000bb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bbc:	fa1f fc87 	uxth.w	ip, r7
 8000bc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bc4:	0c23      	lsrs	r3, r4, #16
 8000bc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bce:	fb01 f20c 	mul.w	r2, r1, ip
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d909      	bls.n	8000bea <__udivmoddi4+0x62>
 8000bd6:	18fb      	adds	r3, r7, r3
 8000bd8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bdc:	f080 80ea 	bcs.w	8000db4 <__udivmoddi4+0x22c>
 8000be0:	429a      	cmp	r2, r3
 8000be2:	f240 80e7 	bls.w	8000db4 <__udivmoddi4+0x22c>
 8000be6:	3902      	subs	r1, #2
 8000be8:	443b      	add	r3, r7
 8000bea:	1a9a      	subs	r2, r3, r2
 8000bec:	b2a3      	uxth	r3, r4
 8000bee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bfe:	459c      	cmp	ip, r3
 8000c00:	d909      	bls.n	8000c16 <__udivmoddi4+0x8e>
 8000c02:	18fb      	adds	r3, r7, r3
 8000c04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c08:	f080 80d6 	bcs.w	8000db8 <__udivmoddi4+0x230>
 8000c0c:	459c      	cmp	ip, r3
 8000c0e:	f240 80d3 	bls.w	8000db8 <__udivmoddi4+0x230>
 8000c12:	443b      	add	r3, r7
 8000c14:	3802      	subs	r0, #2
 8000c16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c1a:	eba3 030c 	sub.w	r3, r3, ip
 8000c1e:	2100      	movs	r1, #0
 8000c20:	b11d      	cbz	r5, 8000c2a <__udivmoddi4+0xa2>
 8000c22:	40f3      	lsrs	r3, r6
 8000c24:	2200      	movs	r2, #0
 8000c26:	e9c5 3200 	strd	r3, r2, [r5]
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	428b      	cmp	r3, r1
 8000c30:	d905      	bls.n	8000c3e <__udivmoddi4+0xb6>
 8000c32:	b10d      	cbz	r5, 8000c38 <__udivmoddi4+0xb0>
 8000c34:	e9c5 0100 	strd	r0, r1, [r5]
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4608      	mov	r0, r1
 8000c3c:	e7f5      	b.n	8000c2a <__udivmoddi4+0xa2>
 8000c3e:	fab3 f183 	clz	r1, r3
 8000c42:	2900      	cmp	r1, #0
 8000c44:	d146      	bne.n	8000cd4 <__udivmoddi4+0x14c>
 8000c46:	4573      	cmp	r3, lr
 8000c48:	d302      	bcc.n	8000c50 <__udivmoddi4+0xc8>
 8000c4a:	4282      	cmp	r2, r0
 8000c4c:	f200 8105 	bhi.w	8000e5a <__udivmoddi4+0x2d2>
 8000c50:	1a84      	subs	r4, r0, r2
 8000c52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c56:	2001      	movs	r0, #1
 8000c58:	4690      	mov	r8, r2
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	d0e5      	beq.n	8000c2a <__udivmoddi4+0xa2>
 8000c5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000c62:	e7e2      	b.n	8000c2a <__udivmoddi4+0xa2>
 8000c64:	2a00      	cmp	r2, #0
 8000c66:	f000 8090 	beq.w	8000d8a <__udivmoddi4+0x202>
 8000c6a:	fab2 f682 	clz	r6, r2
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	f040 80a4 	bne.w	8000dbc <__udivmoddi4+0x234>
 8000c74:	1a8a      	subs	r2, r1, r2
 8000c76:	0c03      	lsrs	r3, r0, #16
 8000c78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c7c:	b280      	uxth	r0, r0
 8000c7e:	b2bc      	uxth	r4, r7
 8000c80:	2101      	movs	r1, #1
 8000c82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d907      	bls.n	8000ca6 <__udivmoddi4+0x11e>
 8000c96:	18fb      	adds	r3, r7, r3
 8000c98:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c9c:	d202      	bcs.n	8000ca4 <__udivmoddi4+0x11c>
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	f200 80e0 	bhi.w	8000e64 <__udivmoddi4+0x2dc>
 8000ca4:	46c4      	mov	ip, r8
 8000ca6:	1a9b      	subs	r3, r3, r2
 8000ca8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cb0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cb4:	fb02 f404 	mul.w	r4, r2, r4
 8000cb8:	429c      	cmp	r4, r3
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0x144>
 8000cbc:	18fb      	adds	r3, r7, r3
 8000cbe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x142>
 8000cc4:	429c      	cmp	r4, r3
 8000cc6:	f200 80ca 	bhi.w	8000e5e <__udivmoddi4+0x2d6>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	1b1b      	subs	r3, r3, r4
 8000cce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cd2:	e7a5      	b.n	8000c20 <__udivmoddi4+0x98>
 8000cd4:	f1c1 0620 	rsb	r6, r1, #32
 8000cd8:	408b      	lsls	r3, r1
 8000cda:	fa22 f706 	lsr.w	r7, r2, r6
 8000cde:	431f      	orrs	r7, r3
 8000ce0:	fa0e f401 	lsl.w	r4, lr, r1
 8000ce4:	fa20 f306 	lsr.w	r3, r0, r6
 8000ce8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000cec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cf0:	4323      	orrs	r3, r4
 8000cf2:	fa00 f801 	lsl.w	r8, r0, r1
 8000cf6:	fa1f fc87 	uxth.w	ip, r7
 8000cfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000cfe:	0c1c      	lsrs	r4, r3, #16
 8000d00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x1a0>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d1a:	f080 809c 	bcs.w	8000e56 <__udivmoddi4+0x2ce>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f240 8099 	bls.w	8000e56 <__udivmoddi4+0x2ce>
 8000d24:	3802      	subs	r0, #2
 8000d26:	443c      	add	r4, r7
 8000d28:	eba4 040e 	sub.w	r4, r4, lr
 8000d2c:	fa1f fe83 	uxth.w	lr, r3
 8000d30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d34:	fb09 4413 	mls	r4, r9, r3, r4
 8000d38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d40:	45a4      	cmp	ip, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x1ce>
 8000d44:	193c      	adds	r4, r7, r4
 8000d46:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d4a:	f080 8082 	bcs.w	8000e52 <__udivmoddi4+0x2ca>
 8000d4e:	45a4      	cmp	ip, r4
 8000d50:	d97f      	bls.n	8000e52 <__udivmoddi4+0x2ca>
 8000d52:	3b02      	subs	r3, #2
 8000d54:	443c      	add	r4, r7
 8000d56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d5a:	eba4 040c 	sub.w	r4, r4, ip
 8000d5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d62:	4564      	cmp	r4, ip
 8000d64:	4673      	mov	r3, lr
 8000d66:	46e1      	mov	r9, ip
 8000d68:	d362      	bcc.n	8000e30 <__udivmoddi4+0x2a8>
 8000d6a:	d05f      	beq.n	8000e2c <__udivmoddi4+0x2a4>
 8000d6c:	b15d      	cbz	r5, 8000d86 <__udivmoddi4+0x1fe>
 8000d6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000d72:	eb64 0409 	sbc.w	r4, r4, r9
 8000d76:	fa04 f606 	lsl.w	r6, r4, r6
 8000d7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000d7e:	431e      	orrs	r6, r3
 8000d80:	40cc      	lsrs	r4, r1
 8000d82:	e9c5 6400 	strd	r6, r4, [r5]
 8000d86:	2100      	movs	r1, #0
 8000d88:	e74f      	b.n	8000c2a <__udivmoddi4+0xa2>
 8000d8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d8e:	0c01      	lsrs	r1, r0, #16
 8000d90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d94:	b280      	uxth	r0, r0
 8000d96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	4638      	mov	r0, r7
 8000d9e:	463c      	mov	r4, r7
 8000da0:	46b8      	mov	r8, r7
 8000da2:	46be      	mov	lr, r7
 8000da4:	2620      	movs	r6, #32
 8000da6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000daa:	eba2 0208 	sub.w	r2, r2, r8
 8000dae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000db2:	e766      	b.n	8000c82 <__udivmoddi4+0xfa>
 8000db4:	4601      	mov	r1, r0
 8000db6:	e718      	b.n	8000bea <__udivmoddi4+0x62>
 8000db8:	4610      	mov	r0, r2
 8000dba:	e72c      	b.n	8000c16 <__udivmoddi4+0x8e>
 8000dbc:	f1c6 0220 	rsb	r2, r6, #32
 8000dc0:	fa2e f302 	lsr.w	r3, lr, r2
 8000dc4:	40b7      	lsls	r7, r6
 8000dc6:	40b1      	lsls	r1, r6
 8000dc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000dcc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000dd6:	b2bc      	uxth	r4, r7
 8000dd8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ddc:	0c11      	lsrs	r1, r2, #16
 8000dde:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de2:	fb08 f904 	mul.w	r9, r8, r4
 8000de6:	40b0      	lsls	r0, r6
 8000de8:	4589      	cmp	r9, r1
 8000dea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000dee:	b280      	uxth	r0, r0
 8000df0:	d93e      	bls.n	8000e70 <__udivmoddi4+0x2e8>
 8000df2:	1879      	adds	r1, r7, r1
 8000df4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000df8:	d201      	bcs.n	8000dfe <__udivmoddi4+0x276>
 8000dfa:	4589      	cmp	r9, r1
 8000dfc:	d81f      	bhi.n	8000e3e <__udivmoddi4+0x2b6>
 8000dfe:	eba1 0109 	sub.w	r1, r1, r9
 8000e02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e06:	fb09 f804 	mul.w	r8, r9, r4
 8000e0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e0e:	b292      	uxth	r2, r2
 8000e10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e14:	4542      	cmp	r2, r8
 8000e16:	d229      	bcs.n	8000e6c <__udivmoddi4+0x2e4>
 8000e18:	18ba      	adds	r2, r7, r2
 8000e1a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e1e:	d2c4      	bcs.n	8000daa <__udivmoddi4+0x222>
 8000e20:	4542      	cmp	r2, r8
 8000e22:	d2c2      	bcs.n	8000daa <__udivmoddi4+0x222>
 8000e24:	f1a9 0102 	sub.w	r1, r9, #2
 8000e28:	443a      	add	r2, r7
 8000e2a:	e7be      	b.n	8000daa <__udivmoddi4+0x222>
 8000e2c:	45f0      	cmp	r8, lr
 8000e2e:	d29d      	bcs.n	8000d6c <__udivmoddi4+0x1e4>
 8000e30:	ebbe 0302 	subs.w	r3, lr, r2
 8000e34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e38:	3801      	subs	r0, #1
 8000e3a:	46e1      	mov	r9, ip
 8000e3c:	e796      	b.n	8000d6c <__udivmoddi4+0x1e4>
 8000e3e:	eba7 0909 	sub.w	r9, r7, r9
 8000e42:	4449      	add	r1, r9
 8000e44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e4c:	fb09 f804 	mul.w	r8, r9, r4
 8000e50:	e7db      	b.n	8000e0a <__udivmoddi4+0x282>
 8000e52:	4673      	mov	r3, lr
 8000e54:	e77f      	b.n	8000d56 <__udivmoddi4+0x1ce>
 8000e56:	4650      	mov	r0, sl
 8000e58:	e766      	b.n	8000d28 <__udivmoddi4+0x1a0>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e6fd      	b.n	8000c5a <__udivmoddi4+0xd2>
 8000e5e:	443b      	add	r3, r7
 8000e60:	3a02      	subs	r2, #2
 8000e62:	e733      	b.n	8000ccc <__udivmoddi4+0x144>
 8000e64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e68:	443b      	add	r3, r7
 8000e6a:	e71c      	b.n	8000ca6 <__udivmoddi4+0x11e>
 8000e6c:	4649      	mov	r1, r9
 8000e6e:	e79c      	b.n	8000daa <__udivmoddi4+0x222>
 8000e70:	eba1 0109 	sub.w	r1, r1, r9
 8000e74:	46c4      	mov	ip, r8
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fb09 f804 	mul.w	r8, r9, r4
 8000e7e:	e7c4      	b.n	8000e0a <__udivmoddi4+0x282>

08000e80 <__aeabi_idiv0>:
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000e8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e90:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000e92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000e9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ea0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
}
 8000eaa:	bf00      	nop
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b085      	sub	sp, #20
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ebe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ec2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ec4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ece:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ed2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000eda:	68fb      	ldr	r3, [r7, #12]
}
 8000edc:	bf00      	nop
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2)
  {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(TIMING_GPIO_Port, TIMING_Pin);
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ef6:	f003 f813 	bl	8003f20 <HAL_GPIO_TogglePin>
	////this updates the X and Y axes of my joystick
	  for(uint8_t i = 0; i<hadc1.Init.NbrOfConversion; i++){
 8000efa:	2300      	movs	r3, #0
 8000efc:	73fb      	strb	r3, [r7, #15]
 8000efe:	e00a      	b.n	8000f16 <HAL_TIM_PeriodElapsedCallback+0x2e>
		  mic = (uint16_t) rawValues[0];
 8000f00:	4b0b      	ldr	r3, [pc, #44]	@ (8000f30 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000f02:	881a      	ldrh	r2, [r3, #0]
 8000f04:	4b0b      	ldr	r3, [pc, #44]	@ (8000f34 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000f06:	801a      	strh	r2, [r3, #0]
		  mic2 = mic;
 8000f08:	4b0a      	ldr	r3, [pc, #40]	@ (8000f34 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000f0a:	881a      	ldrh	r2, [r3, #0]
 8000f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f38 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000f0e:	801a      	strh	r2, [r3, #0]
	  for(uint8_t i = 0; i<hadc1.Init.NbrOfConversion; i++){
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	3301      	adds	r3, #1
 8000f14:	73fb      	strb	r3, [r7, #15]
 8000f16:	7bfa      	ldrb	r2, [r7, #15]
 8000f18:	4b08      	ldr	r3, [pc, #32]	@ (8000f3c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000f1a:	69db      	ldr	r3, [r3, #28]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d3ef      	bcc.n	8000f00 <HAL_TIM_PeriodElapsedCallback+0x18>
	  }
	  flag = 1;
 8000f20:	4b07      	ldr	r3, [pc, #28]	@ (8000f40 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	701a      	strb	r2, [r3, #0]

	  //HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin);
  }
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000484 	.word	0x20000484
 8000f34:	2000047e 	.word	0x2000047e
 8000f38:	20000480 	.word	0x20000480
 8000f3c:	20000318 	.word	0x20000318
 8000f40:	20000488 	.word	0x20000488

08000f44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f48:	f000 ff2a 	bl	8001da0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4c:	f000 f88e 	bl	800106c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f50:	f000 f8f0 	bl	8001134 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f54:	f000 fa34 	bl	80013c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f58:	f000 fa20 	bl	800139c <MX_DMA_Init>
  MX_ADC1_Init();
 8000f5c:	f000 f91c 	bl	8001198 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000f60:	f000 f9ce 	bl	8001300 <MX_TIM2_Init>
  MX_USB_Device_Init();
 8000f64:	f00c feee 	bl	800dd44 <MX_USB_Device_Init>
  MX_I2C1_Init();
 8000f68:	f000 f98a 	bl	8001280 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ////This begins the process of storing our ADC readings into the DMA. The DMA can be thought of a temporary storage location.
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) rawValues, 2);
 8000f6c:	2202      	movs	r2, #2
 8000f6e:	4936      	ldr	r1, [pc, #216]	@ (8001048 <main+0x104>)
 8000f70:	4836      	ldr	r0, [pc, #216]	@ (800104c <main+0x108>)
 8000f72:	f001 faf3 	bl	800255c <HAL_ADC_Start_DMA>
    ////This begins our timer 2
  HAL_TIM_Base_Start_IT(&htim2);
 8000f76:	4836      	ldr	r0, [pc, #216]	@ (8001050 <main+0x10c>)
 8000f78:	f007 fac2 	bl	8008500 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f000 fd9d 	bl	8001abc <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8000f82:	2001      	movs	r0, #1
 8000f84:	f000 fd9a 	bl	8001abc <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000f88:	2002      	movs	r0, #2
 8000f8a:	f000 fd97 	bl	8001abc <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8000f8e:	2101      	movs	r1, #1
 8000f90:	2000      	movs	r0, #0
 8000f92:	f000 fde7 	bl	8001b64 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8000f96:	2101      	movs	r1, #1
 8000f98:	2001      	movs	r0, #1
 8000f9a:	f000 fde3 	bl	8001b64 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	2002      	movs	r0, #2
 8000fa2:	f000 fddf 	bl	8001b64 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000fa6:	4b2b      	ldr	r3, [pc, #172]	@ (8001054 <main+0x110>)
 8000fa8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fac:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000fae:	4b29      	ldr	r3, [pc, #164]	@ (8001054 <main+0x110>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000fb4:	4b27      	ldr	r3, [pc, #156]	@ (8001054 <main+0x110>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000fba:	4b26      	ldr	r3, [pc, #152]	@ (8001054 <main+0x110>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000fc0:	4b24      	ldr	r3, [pc, #144]	@ (8001054 <main+0x110>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000fc6:	4923      	ldr	r1, [pc, #140]	@ (8001054 <main+0x110>)
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f000 fe3b 	bl	8001c44 <BSP_COM_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <main+0x94>
  {
    Error_Handler();
 8000fd4:	f000 fa51 	bl	800147a <Error_Handler>
  /*                                                                          ********************************************************************* */
  while (1)
  {
	  //bmi160ReadAccelGyro(&imu_t);

	  if (flag==1){
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	@ (8001058 <main+0x114>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d1fb      	bne.n	8000fd8 <main+0x94>

		  //HAL_GPIO_TogglePin(SIGNAL_GPIO_Port, SIGNAL_Pin);
		  //HAL_GPIO_WritePin(SIGNAL_GPIO_Port, SIGNAL_Pin,GPIO_PIN_SET);
		  if (counter == 32000){
 8000fe0:	4b1e      	ldr	r3, [pc, #120]	@ (800105c <main+0x118>)
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8000fe8:	d103      	bne.n	8000ff2 <main+0xae>
			  counter = 0;
 8000fea:	4b1c      	ldr	r3, [pc, #112]	@ (800105c <main+0x118>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	801a      	strh	r2, [r3, #0]
 8000ff0:	e005      	b.n	8000ffe <main+0xba>
		  }
		  else{
			  counter++;
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800105c <main+0x118>)
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	4b18      	ldr	r3, [pc, #96]	@ (800105c <main+0x118>)
 8000ffc:	801a      	strh	r2, [r3, #0]
		  }
		  update_data_packet_audio_buffered(counter, USB_buffer, &packet_length);
 8000ffe:	4b17      	ldr	r3, [pc, #92]	@ (800105c <main+0x118>)
 8001000:	881b      	ldrh	r3, [r3, #0]
 8001002:	4a17      	ldr	r2, [pc, #92]	@ (8001060 <main+0x11c>)
 8001004:	4917      	ldr	r1, [pc, #92]	@ (8001064 <main+0x120>)
 8001006:	4618      	mov	r0, r3
 8001008:	f000 fa13 	bl	8001432 <update_data_packet_audio_buffered>
		  //HAL_GPIO_WritePin(TIMING_GPIO_Port, TIMING_Pin,GPIO_PIN_RESET);
		  if (counter % 200 == 0){
 800100c:	4b13      	ldr	r3, [pc, #76]	@ (800105c <main+0x118>)
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	4a15      	ldr	r2, [pc, #84]	@ (8001068 <main+0x124>)
 8001012:	fba2 1203 	umull	r1, r2, r2, r3
 8001016:	0992      	lsrs	r2, r2, #6
 8001018:	21c8      	movs	r1, #200	@ 0xc8
 800101a:	fb01 f202 	mul.w	r2, r1, r2
 800101e:	1a9b      	subs	r3, r3, r2
 8001020:	b29b      	uxth	r3, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	d10c      	bne.n	8001040 <main+0xfc>
			  CDC_Transmit_FS(USB_buffer, packet_length);
 8001026:	4b0e      	ldr	r3, [pc, #56]	@ (8001060 <main+0x11c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	b29b      	uxth	r3, r3
 800102c:	4619      	mov	r1, r3
 800102e:	480d      	ldr	r0, [pc, #52]	@ (8001064 <main+0x120>)
 8001030:	f00c ff46 	bl	800dec0 <CDC_Transmit_FS>
			  packet_length = 0;
 8001034:	4b0a      	ldr	r3, [pc, #40]	@ (8001060 <main+0x11c>)
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
			  BSP_LED_Toggle(LED_GREEN);
 800103a:	2001      	movs	r0, #1
 800103c:	f000 fd78 	bl	8001b30 <BSP_LED_Toggle>

		  //HAL_GPIO_TogglePin(LED_GREEN_Port,LED_GREEN_Pin);
		  //snprintf(msg, sizeof(msg), "a: %.2f, g: %.2f", a_f32[0], g_f32[0]);
		  //CDC_Transmit_FS((uint8_t *)msg, strlen(msg));

		  flag = 0;
 8001040:	4b05      	ldr	r3, [pc, #20]	@ (8001058 <main+0x114>)
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
	  if (flag==1){
 8001046:	e7c7      	b.n	8000fd8 <main+0x94>
 8001048:	20000484 	.word	0x20000484
 800104c:	20000318 	.word	0x20000318
 8001050:	20000430 	.word	0x20000430
 8001054:	20000308 	.word	0x20000308
 8001058:	20000488 	.word	0x20000488
 800105c:	2000047c 	.word	0x2000047c
 8001060:	2000068c 	.word	0x2000068c
 8001064:	2000048c 	.word	0x2000048c
 8001068:	51eb851f 	.word	0x51eb851f

0800106c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b09a      	sub	sp, #104	@ 0x68
 8001070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001072:	f107 0320 	add.w	r3, r7, #32
 8001076:	2248      	movs	r2, #72	@ 0x48
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f00e f919 	bl	800f2b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
 800108c:	611a      	str	r2, [r3, #16]
 800108e:	615a      	str	r2, [r3, #20]
 8001090:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001092:	4b27      	ldr	r3, [pc, #156]	@ (8001130 <SystemClock_Config+0xc4>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800109a:	4a25      	ldr	r2, [pc, #148]	@ (8001130 <SystemClock_Config+0xc4>)
 800109c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010a0:	6013      	str	r3, [r2, #0]
 80010a2:	4b23      	ldr	r3, [pc, #140]	@ (8001130 <SystemClock_Config+0xc4>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80010ae:	2303      	movs	r3, #3
 80010b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010b6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010be:	2340      	movs	r3, #64	@ 0x40
 80010c0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c2:	2302      	movs	r3, #2
 80010c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010c6:	2303      	movs	r3, #3
 80010c8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80010ca:	2310      	movs	r3, #16
 80010cc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 80010ce:	2308      	movs	r3, #8
 80010d0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010d8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80010dc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010e2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e4:	f107 0320 	add.w	r3, r7, #32
 80010e8:	4618      	mov	r0, r3
 80010ea:	f005 ff79 	bl	8006fe0 <HAL_RCC_OscConfig>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80010f4:	f000 f9c1 	bl	800147a <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80010f8:	236f      	movs	r3, #111	@ 0x6f
 80010fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010fc:	2303      	movs	r3, #3
 80010fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001104:	2300      	movs	r3, #0
 8001106:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800110c:	2380      	movs	r3, #128	@ 0x80
 800110e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	2103      	movs	r1, #3
 8001118:	4618      	mov	r0, r3
 800111a:	f006 fad5 	bl	80076c8 <HAL_RCC_ClockConfig>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001124:	f000 f9a9 	bl	800147a <Error_Handler>
  }
}
 8001128:	bf00      	nop
 800112a:	3768      	adds	r7, #104	@ 0x68
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	58000400 	.word	0x58000400

08001134 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b094      	sub	sp, #80	@ 0x50
 8001138:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800113a:	463b      	mov	r3, r7
 800113c:	2250      	movs	r2, #80	@ 0x50
 800113e:	2100      	movs	r1, #0
 8001140:	4618      	mov	r0, r3
 8001142:	f00e f8b6 	bl	800f2b2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 8001146:	f44f 5314 	mov.w	r3, #9472	@ 0x2500
 800114a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 800114c:	2306      	movs	r3, #6
 800114e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001150:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001154:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001156:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800115a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800115c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001160:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8001162:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 8001166:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001168:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800116c:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800116e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001172:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001174:	2300      	movs	r3, #0
 8001176:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001178:	2300      	movs	r3, #0
 800117a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4618      	mov	r0, r3
 8001180:	f006 fedf 	bl	8007f42 <HAL_RCCEx_PeriphCLKConfig>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 800118a:	f000 f976 	bl	800147a <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800118e:	bf00      	nop
 8001190:	3750      	adds	r7, #80	@ 0x50
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800119e:	463b      	mov	r3, r7
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
 80011ac:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011ae:	4b30      	ldr	r3, [pc, #192]	@ (8001270 <MX_ADC1_Init+0xd8>)
 80011b0:	4a30      	ldr	r2, [pc, #192]	@ (8001274 <MX_ADC1_Init+0xdc>)
 80011b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80011b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001270 <MX_ADC1_Init+0xd8>)
 80011b6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001270 <MX_ADC1_Init+0xd8>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001270 <MX_ADC1_Init+0xd8>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011c8:	4b29      	ldr	r3, [pc, #164]	@ (8001270 <MX_ADC1_Init+0xd8>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011ce:	4b28      	ldr	r3, [pc, #160]	@ (8001270 <MX_ADC1_Init+0xd8>)
 80011d0:	2204      	movs	r2, #4
 80011d2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011d4:	4b26      	ldr	r3, [pc, #152]	@ (8001270 <MX_ADC1_Init+0xd8>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011da:	4b25      	ldr	r3, [pc, #148]	@ (8001270 <MX_ADC1_Init+0xd8>)
 80011dc:	2201      	movs	r2, #1
 80011de:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 80011e0:	4b23      	ldr	r3, [pc, #140]	@ (8001270 <MX_ADC1_Init+0xd8>)
 80011e2:	2202      	movs	r2, #2
 80011e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011e6:	4b22      	ldr	r3, [pc, #136]	@ (8001270 <MX_ADC1_Init+0xd8>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011ee:	4b20      	ldr	r3, [pc, #128]	@ (8001270 <MX_ADC1_Init+0xd8>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001270 <MX_ADC1_Init+0xd8>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001270 <MX_ADC1_Init+0xd8>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001202:	4b1b      	ldr	r3, [pc, #108]	@ (8001270 <MX_ADC1_Init+0xd8>)
 8001204:	2200      	movs	r2, #0
 8001206:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001208:	4b19      	ldr	r3, [pc, #100]	@ (8001270 <MX_ADC1_Init+0xd8>)
 800120a:	2200      	movs	r2, #0
 800120c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001210:	4817      	ldr	r0, [pc, #92]	@ (8001270 <MX_ADC1_Init+0xd8>)
 8001212:	f001 f857 	bl	80022c4 <HAL_ADC_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 800121c:	f000 f92d 	bl	800147a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001220:	4b15      	ldr	r3, [pc, #84]	@ (8001278 <MX_ADC1_Init+0xe0>)
 8001222:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001224:	2306      	movs	r3, #6
 8001226:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001228:	2306      	movs	r3, #6
 800122a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800122c:	237f      	movs	r3, #127	@ 0x7f
 800122e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001230:	2304      	movs	r3, #4
 8001232:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001238:	463b      	mov	r3, r7
 800123a:	4619      	mov	r1, r3
 800123c:	480c      	ldr	r0, [pc, #48]	@ (8001270 <MX_ADC1_Init+0xd8>)
 800123e:	f001 fbef 	bl	8002a20 <HAL_ADC_ConfigChannel>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001248:	f000 f917 	bl	800147a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800124c:	4b0b      	ldr	r3, [pc, #44]	@ (800127c <MX_ADC1_Init+0xe4>)
 800124e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001250:	230c      	movs	r3, #12
 8001252:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001254:	463b      	mov	r3, r7
 8001256:	4619      	mov	r1, r3
 8001258:	4805      	ldr	r0, [pc, #20]	@ (8001270 <MX_ADC1_Init+0xd8>)
 800125a:	f001 fbe1 	bl	8002a20 <HAL_ADC_ConfigChannel>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8001264:	f000 f909 	bl	800147a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000318 	.word	0x20000318
 8001274:	50040000 	.word	0x50040000
 8001278:	04300002 	.word	0x04300002
 800127c:	08600004 	.word	0x08600004

08001280 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001284:	4b1b      	ldr	r3, [pc, #108]	@ (80012f4 <MX_I2C1_Init+0x74>)
 8001286:	4a1c      	ldr	r2, [pc, #112]	@ (80012f8 <MX_I2C1_Init+0x78>)
 8001288:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 800128a:	4b1a      	ldr	r3, [pc, #104]	@ (80012f4 <MX_I2C1_Init+0x74>)
 800128c:	4a1b      	ldr	r2, [pc, #108]	@ (80012fc <MX_I2C1_Init+0x7c>)
 800128e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001290:	4b18      	ldr	r3, [pc, #96]	@ (80012f4 <MX_I2C1_Init+0x74>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001296:	4b17      	ldr	r3, [pc, #92]	@ (80012f4 <MX_I2C1_Init+0x74>)
 8001298:	2201      	movs	r2, #1
 800129a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800129c:	4b15      	ldr	r3, [pc, #84]	@ (80012f4 <MX_I2C1_Init+0x74>)
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012a2:	4b14      	ldr	r3, [pc, #80]	@ (80012f4 <MX_I2C1_Init+0x74>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012a8:	4b12      	ldr	r3, [pc, #72]	@ (80012f4 <MX_I2C1_Init+0x74>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012ae:	4b11      	ldr	r3, [pc, #68]	@ (80012f4 <MX_I2C1_Init+0x74>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	@ (80012f4 <MX_I2C1_Init+0x74>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012ba:	480e      	ldr	r0, [pc, #56]	@ (80012f4 <MX_I2C1_Init+0x74>)
 80012bc:	f002 fe6d 	bl	8003f9a <HAL_I2C_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012c6:	f000 f8d8 	bl	800147a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012ca:	2100      	movs	r1, #0
 80012cc:	4809      	ldr	r0, [pc, #36]	@ (80012f4 <MX_I2C1_Init+0x74>)
 80012ce:	f003 fd18 	bl	8004d02 <HAL_I2CEx_ConfigAnalogFilter>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012d8:	f000 f8cf 	bl	800147a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012dc:	2100      	movs	r1, #0
 80012de:	4805      	ldr	r0, [pc, #20]	@ (80012f4 <MX_I2C1_Init+0x74>)
 80012e0:	f003 fd5a 	bl	8004d98 <HAL_I2CEx_ConfigDigitalFilter>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012ea:	f000 f8c6 	bl	800147a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200003dc 	.word	0x200003dc
 80012f8:	40005400 	.word	0x40005400
 80012fc:	10b17db5 	.word	0x10b17db5

08001300 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001306:	f107 0310 	add.w	r3, r7, #16
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800131e:	4b1e      	ldr	r3, [pc, #120]	@ (8001398 <MX_TIM2_Init+0x98>)
 8001320:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001324:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001326:	4b1c      	ldr	r3, [pc, #112]	@ (8001398 <MX_TIM2_Init+0x98>)
 8001328:	2200      	movs	r2, #0
 800132a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132c:	4b1a      	ldr	r3, [pc, #104]	@ (8001398 <MX_TIM2_Init+0x98>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8001332:	4b19      	ldr	r3, [pc, #100]	@ (8001398 <MX_TIM2_Init+0x98>)
 8001334:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001338:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133a:	4b17      	ldr	r3, [pc, #92]	@ (8001398 <MX_TIM2_Init+0x98>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001340:	4b15      	ldr	r3, [pc, #84]	@ (8001398 <MX_TIM2_Init+0x98>)
 8001342:	2280      	movs	r2, #128	@ 0x80
 8001344:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001346:	4814      	ldr	r0, [pc, #80]	@ (8001398 <MX_TIM2_Init+0x98>)
 8001348:	f007 f882 	bl	8008450 <HAL_TIM_Base_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001352:	f000 f892 	bl	800147a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001356:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800135a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800135c:	f107 0310 	add.w	r3, r7, #16
 8001360:	4619      	mov	r1, r3
 8001362:	480d      	ldr	r0, [pc, #52]	@ (8001398 <MX_TIM2_Init+0x98>)
 8001364:	f007 fa21 	bl	80087aa <HAL_TIM_ConfigClockSource>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800136e:	f000 f884 	bl	800147a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001372:	2320      	movs	r3, #32
 8001374:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	4619      	mov	r1, r3
 800137e:	4806      	ldr	r0, [pc, #24]	@ (8001398 <MX_TIM2_Init+0x98>)
 8001380:	f007 fc10 	bl	8008ba4 <HAL_TIMEx_MasterConfigSynchronization>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800138a:	f000 f876 	bl	800147a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800138e:	bf00      	nop
 8001390:	3720      	adds	r7, #32
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000430 	.word	0x20000430

0800139c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80013a0:	2004      	movs	r0, #4
 80013a2:	f7ff fd6f 	bl	8000e84 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013a6:	2001      	movs	r0, #1
 80013a8:	f7ff fd6c 	bl	8000e84 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2100      	movs	r1, #0
 80013b0:	200b      	movs	r0, #11
 80013b2:	f002 f916 	bl	80035e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013b6:	200b      	movs	r0, #11
 80013b8:	f002 f92d 	bl	8003616 <HAL_NVIC_EnableIRQ>

}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}

080013c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d4:	2004      	movs	r0, #4
 80013d6:	f7ff fd6e 	bl	8000eb6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013da:	2002      	movs	r0, #2
 80013dc:	f7ff fd6b 	bl	8000eb6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e0:	2001      	movs	r0, #1
 80013e2:	f7ff fd68 	bl	8000eb6 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TIMING_Pin|SIGNAL_Pin, GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2103      	movs	r1, #3
 80013ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ee:	f002 fd7f 	bl	8003ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TIMING_Pin */
  GPIO_InitStruct.Pin = TIMING_Pin;
 80013f2:	2301      	movs	r3, #1
 80013f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f6:	2301      	movs	r3, #1
 80013f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80013fe:	2301      	movs	r3, #1
 8001400:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(TIMING_GPIO_Port, &GPIO_InitStruct);
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	4619      	mov	r1, r3
 8001406:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800140a:	f002 fc01 	bl	8003c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIGNAL_Pin */
  GPIO_InitStruct.Pin = SIGNAL_Pin;
 800140e:	2302      	movs	r3, #2
 8001410:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001412:	2301      	movs	r3, #1
 8001414:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SIGNAL_GPIO_Port, &GPIO_InitStruct);
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	4619      	mov	r1, r3
 8001422:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001426:	f002 fbf3 	bl	8003c10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800142a:	bf00      	nop
 800142c:	3718      	adds	r7, #24
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <update_data_packet_audio_buffered>:

/* USER CODE BEGIN 4 */

void update_data_packet_audio_buffered(uint16_t var1, uint8_t *buffer, size_t *length) {
 8001432:	b480      	push	{r7}
 8001434:	b085      	sub	sp, #20
 8001436:	af00      	add	r7, sp, #0
 8001438:	4603      	mov	r3, r0
 800143a:	60b9      	str	r1, [r7, #8]
 800143c:	607a      	str	r2, [r7, #4]
 800143e:	81fb      	strh	r3, [r7, #14]
    // Define the start byte
	if (*length == 0){
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d107      	bne.n	8001458 <update_data_packet_audio_buffered+0x26>
		buffer[0] = (uint8_t)-128;
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	2280      	movs	r2, #128	@ 0x80
 800144c:	701a      	strb	r2, [r3, #0]
		(*length)++;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	1c5a      	adds	r2, r3, #1
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	601a      	str	r2, [r3, #0]
	}
    memcpy(&buffer[*length], &var1, sizeof(uint16_t));
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	68ba      	ldr	r2, [r7, #8]
 800145e:	4413      	add	r3, r2
 8001460:	89fa      	ldrh	r2, [r7, #14]
 8001462:	801a      	strh	r2, [r3, #0]

    // Set the total length of the packet
    (*length) += sizeof(uint16_t);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	1c9a      	adds	r2, r3, #2
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	601a      	str	r2, [r3, #0]
}
 800146e:	bf00      	nop
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800147e:	b672      	cpsid	i
}
 8001480:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001482:	bf00      	nop
 8001484:	e7fd      	b.n	8001482 <Error_Handler+0x8>

08001486 <LL_AHB2_GRP1_EnableClock>:
{
 8001486:	b480      	push	{r7}
 8001488:	b085      	sub	sp, #20
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800148e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001492:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001494:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4313      	orrs	r3, r2
 800149c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800149e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4013      	ands	r3, r2
 80014a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014aa:	68fb      	ldr	r3, [r7, #12]
}
 80014ac:	bf00      	nop
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80014c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014c4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80014c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80014d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014d4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4013      	ands	r3, r2
 80014da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014dc:	68fb      	ldr	r3, [r7, #12]
}
 80014de:	bf00      	nop
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ee:	bf00      	nop
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 030c 	add.w	r3, r7, #12
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a26      	ldr	r2, [pc, #152]	@ (80015b0 <HAL_ADC_MspInit+0xb8>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d145      	bne.n	80015a6 <HAL_ADC_MspInit+0xae>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800151a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800151e:	f7ff ffb2 	bl	8001486 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001522:	2004      	movs	r0, #4
 8001524:	f7ff ffaf 	bl	8001486 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001528:	2303      	movs	r3, #3
 800152a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800152c:	2303      	movs	r3, #3
 800152e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001534:	f107 030c 	add.w	r3, r7, #12
 8001538:	4619      	mov	r1, r3
 800153a:	481e      	ldr	r0, [pc, #120]	@ (80015b4 <HAL_ADC_MspInit+0xbc>)
 800153c:	f002 fb68 	bl	8003c10 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001540:	4b1d      	ldr	r3, [pc, #116]	@ (80015b8 <HAL_ADC_MspInit+0xc0>)
 8001542:	4a1e      	ldr	r2, [pc, #120]	@ (80015bc <HAL_ADC_MspInit+0xc4>)
 8001544:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001546:	4b1c      	ldr	r3, [pc, #112]	@ (80015b8 <HAL_ADC_MspInit+0xc0>)
 8001548:	2205      	movs	r2, #5
 800154a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800154c:	4b1a      	ldr	r3, [pc, #104]	@ (80015b8 <HAL_ADC_MspInit+0xc0>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001552:	4b19      	ldr	r3, [pc, #100]	@ (80015b8 <HAL_ADC_MspInit+0xc0>)
 8001554:	2200      	movs	r2, #0
 8001556:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001558:	4b17      	ldr	r3, [pc, #92]	@ (80015b8 <HAL_ADC_MspInit+0xc0>)
 800155a:	2280      	movs	r2, #128	@ 0x80
 800155c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800155e:	4b16      	ldr	r3, [pc, #88]	@ (80015b8 <HAL_ADC_MspInit+0xc0>)
 8001560:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001564:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001566:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <HAL_ADC_MspInit+0xc0>)
 8001568:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800156c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800156e:	4b12      	ldr	r3, [pc, #72]	@ (80015b8 <HAL_ADC_MspInit+0xc0>)
 8001570:	2220      	movs	r2, #32
 8001572:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001574:	4b10      	ldr	r3, [pc, #64]	@ (80015b8 <HAL_ADC_MspInit+0xc0>)
 8001576:	2200      	movs	r2, #0
 8001578:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800157a:	480f      	ldr	r0, [pc, #60]	@ (80015b8 <HAL_ADC_MspInit+0xc0>)
 800157c:	f002 f866 	bl	800364c <HAL_DMA_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_ADC_MspInit+0x92>
    {
      Error_Handler();
 8001586:	f7ff ff78 	bl	800147a <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a0a      	ldr	r2, [pc, #40]	@ (80015b8 <HAL_ADC_MspInit+0xc0>)
 800158e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001590:	4a09      	ldr	r2, [pc, #36]	@ (80015b8 <HAL_ADC_MspInit+0xc0>)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 2, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	2102      	movs	r1, #2
 800159a:	2012      	movs	r0, #18
 800159c:	f002 f821 	bl	80035e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80015a0:	2012      	movs	r0, #18
 80015a2:	f002 f838 	bl	8003616 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80015a6:	bf00      	nop
 80015a8:	3720      	adds	r7, #32
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	50040000 	.word	0x50040000
 80015b4:	48000800 	.word	0x48000800
 80015b8:	2000037c 	.word	0x2000037c
 80015bc:	40020008 	.word	0x40020008

080015c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b09c      	sub	sp, #112	@ 0x70
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015d8:	f107 030c 	add.w	r3, r7, #12
 80015dc:	2250      	movs	r2, #80	@ 0x50
 80015de:	2100      	movs	r1, #0
 80015e0:	4618      	mov	r0, r3
 80015e2:	f00d fe66 	bl	800f2b2 <memset>
  if(hi2c->Instance==I2C1)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a1f      	ldr	r2, [pc, #124]	@ (8001668 <HAL_I2C_MspInit+0xa8>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d136      	bne.n	800165e <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015f0:	2304      	movs	r3, #4
 80015f2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015f4:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80015f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015fa:	f107 030c 	add.w	r3, r7, #12
 80015fe:	4618      	mov	r0, r3
 8001600:	f006 fc9f 	bl	8007f42 <HAL_RCCEx_PeriphCLKConfig>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800160a:	f7ff ff36 	bl	800147a <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160e:	2002      	movs	r0, #2
 8001610:	f7ff ff39 	bl	8001486 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001614:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001618:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800161a:	2312      	movs	r3, #18
 800161c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001622:	2300      	movs	r3, #0
 8001624:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001626:	2304      	movs	r3, #4
 8001628:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800162e:	4619      	mov	r1, r3
 8001630:	480e      	ldr	r0, [pc, #56]	@ (800166c <HAL_I2C_MspInit+0xac>)
 8001632:	f002 faed 	bl	8003c10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001636:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800163a:	f7ff ff3d 	bl	80014b8 <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2100      	movs	r1, #0
 8001642:	201e      	movs	r0, #30
 8001644:	f001 ffcd 	bl	80035e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001648:	201e      	movs	r0, #30
 800164a:	f001 ffe4 	bl	8003616 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2100      	movs	r1, #0
 8001652:	201f      	movs	r0, #31
 8001654:	f001 ffc5 	bl	80035e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001658:	201f      	movs	r0, #31
 800165a:	f001 ffdc 	bl	8003616 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800165e:	bf00      	nop
 8001660:	3770      	adds	r7, #112	@ 0x70
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40005400 	.word	0x40005400
 800166c:	48000400 	.word	0x48000400

08001670 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001680:	d10a      	bne.n	8001698 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001682:	2001      	movs	r0, #1
 8001684:	f7ff ff18 	bl	80014b8 <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001688:	2200      	movs	r2, #0
 800168a:	2100      	movs	r1, #0
 800168c:	201c      	movs	r0, #28
 800168e:	f001 ffa8 	bl	80035e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001692:	201c      	movs	r0, #28
 8001694:	f001 ffbf 	bl	8003616 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016a4:	bf00      	nop
 80016a6:	e7fd      	b.n	80016a4 <NMI_Handler+0x4>

080016a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ac:	bf00      	nop
 80016ae:	e7fd      	b.n	80016ac <HardFault_Handler+0x4>

080016b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b4:	bf00      	nop
 80016b6:	e7fd      	b.n	80016b4 <MemManage_Handler+0x4>

080016b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016bc:	bf00      	nop
 80016be:	e7fd      	b.n	80016bc <BusFault_Handler+0x4>

080016c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <UsageFault_Handler+0x4>

080016c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f6:	f000 fbad 	bl	8001e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}

080016fe <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 8001702:	2001      	movs	r0, #1
 8001704:	f002 fc26 	bl	8003f54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}

0800170c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 8001710:	2002      	movs	r0, #2
 8001712:	f002 fc1f 	bl	8003f54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}

0800171a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 800171e:	2010      	movs	r0, #16
 8001720:	f002 fc18 	bl	8003f54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}

08001728 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800172c:	4802      	ldr	r0, [pc, #8]	@ (8001738 <DMA1_Channel1_IRQHandler+0x10>)
 800172e:	f002 f90f 	bl	8003950 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	2000037c 	.word	0x2000037c

0800173c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001740:	4802      	ldr	r0, [pc, #8]	@ (800174c <ADC1_IRQHandler+0x10>)
 8001742:	f000 ff8f 	bl	8002664 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000318 	.word	0x20000318

08001750 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt.
  */
void USB_HP_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001754:	4802      	ldr	r0, [pc, #8]	@ (8001760 <USB_HP_IRQHandler+0x10>)
 8001756:	f003 fc5b 	bl	8005010 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20001c10 	.word	0x20001c10

08001764 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001768:	4802      	ldr	r0, [pc, #8]	@ (8001774 <USB_LP_IRQHandler+0x10>)
 800176a:	f003 fc51 	bl	8005010 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20001c10 	.word	0x20001c10

08001778 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800177c:	4802      	ldr	r0, [pc, #8]	@ (8001788 <TIM2_IRQHandler+0x10>)
 800177e:	f006 ff0d 	bl	800859c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000430 	.word	0x20000430

0800178c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001790:	4802      	ldr	r0, [pc, #8]	@ (800179c <I2C1_EV_IRQHandler+0x10>)
 8001792:	f002 fc9d 	bl	80040d0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200003dc 	.word	0x200003dc

080017a0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80017a4:	4802      	ldr	r0, [pc, #8]	@ (80017b0 <I2C1_ER_IRQHandler+0x10>)
 80017a6:	f002 fcad 	bl	8004104 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200003dc 	.word	0x200003dc

080017b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return 1;
 80017b8:	2301      	movs	r3, #1
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <_kill>:

int _kill(int pid, int sig)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017ce:	f00d fdc3 	bl	800f358 <__errno>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2216      	movs	r2, #22
 80017d6:	601a      	str	r2, [r3, #0]
  return -1;
 80017d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <_exit>:

void _exit (int status)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017ec:	f04f 31ff 	mov.w	r1, #4294967295
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff ffe7 	bl	80017c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017f6:	bf00      	nop
 80017f8:	e7fd      	b.n	80017f6 <_exit+0x12>

080017fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b086      	sub	sp, #24
 80017fe:	af00      	add	r7, sp, #0
 8001800:	60f8      	str	r0, [r7, #12]
 8001802:	60b9      	str	r1, [r7, #8]
 8001804:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
 800180a:	e00a      	b.n	8001822 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800180c:	f3af 8000 	nop.w
 8001810:	4601      	mov	r1, r0
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	1c5a      	adds	r2, r3, #1
 8001816:	60ba      	str	r2, [r7, #8]
 8001818:	b2ca      	uxtb	r2, r1
 800181a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	3301      	adds	r3, #1
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	697a      	ldr	r2, [r7, #20]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	429a      	cmp	r2, r3
 8001828:	dbf0      	blt.n	800180c <_read+0x12>
  }

  return len;
 800182a:	687b      	ldr	r3, [r7, #4]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	e009      	b.n	800185a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	1c5a      	adds	r2, r3, #1
 800184a:	60ba      	str	r2, [r7, #8]
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f000 fa5a 	bl	8001d08 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	3301      	adds	r3, #1
 8001858:	617b      	str	r3, [r7, #20]
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	429a      	cmp	r2, r3
 8001860:	dbf1      	blt.n	8001846 <_write+0x12>
  }
  return len;
 8001862:	687b      	ldr	r3, [r7, #4]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <_close>:

int _close(int file)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001874:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001878:	4618      	mov	r0, r3
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001894:	605a      	str	r2, [r3, #4]
  return 0;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <_isatty>:

int _isatty(int file)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018ac:	2301      	movs	r3, #1
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b085      	sub	sp, #20
 80018be:	af00      	add	r7, sp, #0
 80018c0:	60f8      	str	r0, [r7, #12]
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018dc:	4a14      	ldr	r2, [pc, #80]	@ (8001930 <_sbrk+0x5c>)
 80018de:	4b15      	ldr	r3, [pc, #84]	@ (8001934 <_sbrk+0x60>)
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e8:	4b13      	ldr	r3, [pc, #76]	@ (8001938 <_sbrk+0x64>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d102      	bne.n	80018f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018f0:	4b11      	ldr	r3, [pc, #68]	@ (8001938 <_sbrk+0x64>)
 80018f2:	4a12      	ldr	r2, [pc, #72]	@ (800193c <_sbrk+0x68>)
 80018f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018f6:	4b10      	ldr	r3, [pc, #64]	@ (8001938 <_sbrk+0x64>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	429a      	cmp	r2, r3
 8001902:	d207      	bcs.n	8001914 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001904:	f00d fd28 	bl	800f358 <__errno>
 8001908:	4603      	mov	r3, r0
 800190a:	220c      	movs	r2, #12
 800190c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800190e:	f04f 33ff 	mov.w	r3, #4294967295
 8001912:	e009      	b.n	8001928 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001914:	4b08      	ldr	r3, [pc, #32]	@ (8001938 <_sbrk+0x64>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800191a:	4b07      	ldr	r3, [pc, #28]	@ (8001938 <_sbrk+0x64>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	4a05      	ldr	r2, [pc, #20]	@ (8001938 <_sbrk+0x64>)
 8001924:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001926:	68fb      	ldr	r3, [r7, #12]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20030000 	.word	0x20030000
 8001934:	00000400 	.word	0x00000400
 8001938:	20000690 	.word	0x20000690
 800193c:	20002258 	.word	0x20002258

08001940 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001944:	4b24      	ldr	r3, [pc, #144]	@ (80019d8 <SystemInit+0x98>)
 8001946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800194a:	4a23      	ldr	r2, [pc, #140]	@ (80019d8 <SystemInit+0x98>)
 800194c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001950:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001954:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001964:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001968:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800196c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800196e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001978:	4b18      	ldr	r3, [pc, #96]	@ (80019dc <SystemInit+0x9c>)
 800197a:	4013      	ands	r3, r2
 800197c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800197e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001982:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001986:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800198a:	f023 0305 	bic.w	r3, r3, #5
 800198e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001992:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001996:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800199a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800199e:	f023 0301 	bic.w	r3, r3, #1
 80019a2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80019a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019aa:	4a0d      	ldr	r2, [pc, #52]	@ (80019e0 <SystemInit+0xa0>)
 80019ac:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80019ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019b2:	4a0b      	ldr	r2, [pc, #44]	@ (80019e0 <SystemInit+0xa0>)
 80019b4:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019c4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80019c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019ca:	2200      	movs	r2, #0
 80019cc:	619a      	str	r2, [r3, #24]
}
 80019ce:	bf00      	nop
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	e000ed00 	.word	0xe000ed00
 80019dc:	faf6fefb 	.word	0xfaf6fefb
 80019e0:	22041000 	.word	0x22041000

080019e4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80019e4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019e8:	3304      	adds	r3, #4

080019ea <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019ea:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ec:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80019ee:	d3f9      	bcc.n	80019e4 <CopyDataInit>
  bx lr
 80019f0:	4770      	bx	lr

080019f2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80019f2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80019f4:	3004      	adds	r0, #4

080019f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80019f6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80019f8:	d3fb      	bcc.n	80019f2 <FillZerobss>
  bx lr
 80019fa:	4770      	bx	lr

080019fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019fc:	480c      	ldr	r0, [pc, #48]	@ (8001a30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a00:	f7ff ff9e 	bl	8001940 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001a04:	480b      	ldr	r0, [pc, #44]	@ (8001a34 <LoopForever+0x6>)
 8001a06:	490c      	ldr	r1, [pc, #48]	@ (8001a38 <LoopForever+0xa>)
 8001a08:	4a0c      	ldr	r2, [pc, #48]	@ (8001a3c <LoopForever+0xe>)
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	f7ff ffed 	bl	80019ea <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001a10:	480b      	ldr	r0, [pc, #44]	@ (8001a40 <LoopForever+0x12>)
 8001a12:	490c      	ldr	r1, [pc, #48]	@ (8001a44 <LoopForever+0x16>)
 8001a14:	4a0c      	ldr	r2, [pc, #48]	@ (8001a48 <LoopForever+0x1a>)
 8001a16:	2300      	movs	r3, #0
 8001a18:	f7ff ffe7 	bl	80019ea <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001a1c:	480b      	ldr	r0, [pc, #44]	@ (8001a4c <LoopForever+0x1e>)
 8001a1e:	490c      	ldr	r1, [pc, #48]	@ (8001a50 <LoopForever+0x22>)
 8001a20:	2300      	movs	r3, #0
 8001a22:	f7ff ffe8 	bl	80019f6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a26:	f00d fc9d 	bl	800f364 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001a2a:	f7ff fa8b 	bl	8000f44 <main>

08001a2e <LoopForever>:

LoopForever:
  b LoopForever
 8001a2e:	e7fe      	b.n	8001a2e <LoopForever>
  ldr   r0, =_estack
 8001a30:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001a34:	20000008 	.word	0x20000008
 8001a38:	200002ec 	.word	0x200002ec
 8001a3c:	0801167c 	.word	0x0801167c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001a40:	20030000 	.word	0x20030000
 8001a44:	20030000 	.word	0x20030000
 8001a48:	08011960 	.word	0x08011960
  INIT_BSS _sbss, _ebss
 8001a4c:	200002ec 	.word	0x200002ec
 8001a50:	20002258 	.word	0x20002258

08001a54 <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a54:	e7fe      	b.n	8001a54 <AES1_IRQHandler>

08001a56 <LL_AHB2_GRP1_EnableClock>:
{
 8001a56:	b480      	push	{r7}
 8001a58:	b085      	sub	sp, #20
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a64:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4013      	ands	r3, r2
 8001a78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
}
 8001a7c:	bf00      	nop
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001a90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a94:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001aa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001aa4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001aac:	68fb      	ldr	r3, [r7, #12]
}
 8001aae:	bf00      	nop
 8001ab0:	3714      	adds	r7, #20
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b088      	sub	sp, #32
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
 8001ad4:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001ad6:	2002      	movs	r0, #2
 8001ad8:	f7ff ffbd 	bl	8001a56 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	4a12      	ldr	r2, [pc, #72]	@ (8001b28 <BSP_LED_Init+0x6c>)
 8001ae0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ae4:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aee:	2302      	movs	r3, #2
 8001af0:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	4a0d      	ldr	r2, [pc, #52]	@ (8001b2c <BSP_LED_Init+0x70>)
 8001af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afa:	f107 020c 	add.w	r2, r7, #12
 8001afe:	4611      	mov	r1, r2
 8001b00:	4618      	mov	r0, r3
 8001b02:	f002 f885 	bl	8003c10 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	4a08      	ldr	r2, [pc, #32]	@ (8001b2c <BSP_LED_Init+0x70>)
 8001b0a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	4a05      	ldr	r2, [pc, #20]	@ (8001b28 <BSP_LED_Init+0x6c>)
 8001b12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b16:	2200      	movs	r2, #0
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f002 f9e9 	bl	8003ef0 <HAL_GPIO_WritePin>
}
 8001b1e:	bf00      	nop
 8001b20:	3720      	adds	r7, #32
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	080112cc 	.word	0x080112cc
 8001b2c:	2000000c 	.word	0x2000000c

08001b30 <BSP_LED_Toggle>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	4a07      	ldr	r2, [pc, #28]	@ (8001b5c <BSP_LED_Toggle+0x2c>)
 8001b3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	4906      	ldr	r1, [pc, #24]	@ (8001b60 <BSP_LED_Toggle+0x30>)
 8001b46:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	f002 f9e7 	bl	8003f20 <HAL_GPIO_TogglePin>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	2000000c 	.word	0x2000000c
 8001b60:	080112cc 	.word	0x080112cc

08001b64 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b088      	sub	sp, #32
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	460a      	mov	r2, r1
 8001b6e:	71fb      	strb	r3, [r7, #7]
 8001b70:	4613      	mov	r3, r2
 8001b72:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8001b74:	f107 030c 	add.w	r3, r7, #12
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d103      	bne.n	8001b92 <BSP_PB_Init+0x2e>
 8001b8a:	2004      	movs	r0, #4
 8001b8c:	f7ff ff63 	bl	8001a56 <LL_AHB2_GRP1_EnableClock>
 8001b90:	e00c      	b.n	8001bac <BSP_PB_Init+0x48>
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d103      	bne.n	8001ba0 <BSP_PB_Init+0x3c>
 8001b98:	2008      	movs	r0, #8
 8001b9a:	f7ff ff5c 	bl	8001a56 <LL_AHB2_GRP1_EnableClock>
 8001b9e:	e005      	b.n	8001bac <BSP_PB_Init+0x48>
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d102      	bne.n	8001bac <BSP_PB_Init+0x48>
 8001ba6:	2008      	movs	r0, #8
 8001ba8:	f7ff ff55 	bl	8001a56 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8001bac:	79bb      	ldrb	r3, [r7, #6]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d117      	bne.n	8001be2 <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	4a20      	ldr	r2, [pc, #128]	@ (8001c38 <BSP_PB_Init+0xd4>)
 8001bb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bba:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	4a1c      	ldr	r2, [pc, #112]	@ (8001c3c <BSP_PB_Init+0xd8>)
 8001bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd0:	f107 020c 	add.w	r2, r7, #12
 8001bd4:	4611      	mov	r1, r2
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f002 f81a 	bl	8003c10 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8001bdc:	2001      	movs	r0, #1
 8001bde:	f000 f965 	bl	8001eac <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8001be2:	79bb      	ldrb	r3, [r7, #6]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d123      	bne.n	8001c30 <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	4a13      	ldr	r2, [pc, #76]	@ (8001c38 <BSP_PB_Init+0xd4>)
 8001bec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bf0:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8001bf6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001bfa:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	4a0f      	ldr	r2, [pc, #60]	@ (8001c3c <BSP_PB_Init+0xd8>)
 8001c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c04:	f107 020c 	add.w	r2, r7, #12
 8001c08:	4611      	mov	r1, r2
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f002 f800 	bl	8003c10 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	4a0b      	ldr	r2, [pc, #44]	@ (8001c40 <BSP_PB_Init+0xdc>)
 8001c14:	5cd3      	ldrb	r3, [r2, r3]
 8001c16:	b25b      	sxtb	r3, r3
 8001c18:	2200      	movs	r2, #0
 8001c1a:	210f      	movs	r1, #15
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f001 fce0 	bl	80035e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	4a06      	ldr	r2, [pc, #24]	@ (8001c40 <BSP_PB_Init+0xdc>)
 8001c26:	5cd3      	ldrb	r3, [r2, r3]
 8001c28:	b25b      	sxtb	r3, r3
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f001 fcf3 	bl	8003616 <HAL_NVIC_EnableIRQ>
  }
}
 8001c30:	bf00      	nop
 8001c32:	3720      	adds	r7, #32
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	080112d4 	.word	0x080112d4
 8001c3c:	20000018 	.word	0x20000018
 8001c40:	080112dc 	.word	0x080112dc

08001c44 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	6039      	str	r1, [r7, #0]
 8001c4e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001c50:	2300      	movs	r3, #0
 8001c52:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d903      	bls.n	8001c62 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001c5a:	f06f 0301 	mvn.w	r3, #1
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	e018      	b.n	8001c94 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	2294      	movs	r2, #148	@ 0x94
 8001c66:	fb02 f303 	mul.w	r3, r2, r3
 8001c6a:	4a0d      	ldr	r2, [pc, #52]	@ (8001ca0 <BSP_COM_Init+0x5c>)
 8001c6c:	4413      	add	r3, r2
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f000 f866 	bl	8001d40 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	2294      	movs	r2, #148	@ 0x94
 8001c78:	fb02 f303 	mul.w	r3, r2, r3
 8001c7c:	4a08      	ldr	r2, [pc, #32]	@ (8001ca0 <BSP_COM_Init+0x5c>)
 8001c7e:	4413      	add	r3, r2
 8001c80:	6839      	ldr	r1, [r7, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f000 f80e 	bl	8001ca4 <MX_LPUART1_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d002      	beq.n	8001c94 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8001c8e:	f06f 0303 	mvn.w	r3, #3
 8001c92:	e000      	b.n	8001c96 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8001c94:	68fb      	ldr	r3, [r7, #12]
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000694 	.word	0x20000694

08001ca4 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001cae:	4b15      	ldr	r3, [pc, #84]	@ (8001d04 <MX_LPUART1_Init+0x60>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	220c      	movs	r2, #12
 8001cc2:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	895b      	ldrh	r3, [r3, #10]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	891b      	ldrh	r3, [r3, #8]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	899b      	ldrh	r3, [r3, #12]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001cf0:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f006 fff4 	bl	8008ce0 <HAL_UART_Init>
 8001cf8:	4603      	mov	r3, r0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000024 	.word	0x20000024

08001d08 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001d10:	4b09      	ldr	r3, [pc, #36]	@ (8001d38 <__io_putchar+0x30>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	461a      	mov	r2, r3
 8001d16:	2394      	movs	r3, #148	@ 0x94
 8001d18:	fb02 f303 	mul.w	r3, r2, r3
 8001d1c:	4a07      	ldr	r2, [pc, #28]	@ (8001d3c <__io_putchar+0x34>)
 8001d1e:	1898      	adds	r0, r3, r2
 8001d20:	1d39      	adds	r1, r7, #4
 8001d22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d26:	2201      	movs	r2, #1
 8001d28:	f007 f834 	bl	8008d94 <HAL_UART_Transmit>
  return ch;
 8001d2c:	687b      	ldr	r3, [r7, #4]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000728 	.word	0x20000728
 8001d3c:	20000694 	.word	0x20000694

08001d40 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b088      	sub	sp, #32
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001d48:	2002      	movs	r0, #2
 8001d4a:	f7ff fe84 	bl	8001a56 <LL_AHB2_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
 8001d4e:	2002      	movs	r0, #2
 8001d50:	f7ff fe81 	bl	8001a56 <LL_AHB2_GRP1_EnableClock>

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001d54:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001d58:	f7ff fe96 	bl	8001a88 <LL_APB2_GRP1_EnableClock>

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001d5c:	2340      	movs	r3, #64	@ 0x40
 8001d5e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001d60:	2302      	movs	r3, #2
 8001d62:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001d64:	2302      	movs	r3, #2
 8001d66:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001d6c:	2307      	movs	r3, #7
 8001d6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001d70:	f107 030c 	add.w	r3, r7, #12
 8001d74:	4619      	mov	r1, r3
 8001d76:	4809      	ldr	r0, [pc, #36]	@ (8001d9c <COM1_MspInit+0x5c>)
 8001d78:	f001 ff4a 	bl	8003c10 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001d7c:	2380      	movs	r3, #128	@ 0x80
 8001d7e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001d80:	2302      	movs	r3, #2
 8001d82:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001d84:	2307      	movs	r3, #7
 8001d86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001d88:	f107 030c 	add.w	r3, r7, #12
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4803      	ldr	r0, [pc, #12]	@ (8001d9c <COM1_MspInit+0x5c>)
 8001d90:	f001 ff3e 	bl	8003c10 <HAL_GPIO_Init>
}
 8001d94:	bf00      	nop
 8001d96:	3720      	adds	r7, #32
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	48000400 	.word	0x48000400

08001da0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001da6:	2300      	movs	r3, #0
 8001da8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001daa:	4b0c      	ldr	r3, [pc, #48]	@ (8001ddc <HAL_Init+0x3c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a0b      	ldr	r2, [pc, #44]	@ (8001ddc <HAL_Init+0x3c>)
 8001db0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001db4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001db6:	2003      	movs	r0, #3
 8001db8:	f001 fc08 	bl	80035cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	f000 f80f 	bl	8001de0 <HAL_InitTick>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d002      	beq.n	8001dce <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	71fb      	strb	r3, [r7, #7]
 8001dcc:	e001      	b.n	8001dd2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001dce:	f7ff fb8c 	bl	80014ea <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	58004000 	.word	0x58004000

08001de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001de8:	2300      	movs	r3, #0
 8001dea:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001dec:	4b17      	ldr	r3, [pc, #92]	@ (8001e4c <HAL_InitTick+0x6c>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d024      	beq.n	8001e3e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001df4:	f005 fe14 	bl	8007a20 <HAL_RCC_GetHCLKFreq>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	4b14      	ldr	r3, [pc, #80]	@ (8001e4c <HAL_InitTick+0x6c>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	4619      	mov	r1, r3
 8001e00:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e04:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f001 fc10 	bl	8003632 <HAL_SYSTICK_Config>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d10f      	bne.n	8001e38 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b0f      	cmp	r3, #15
 8001e1c:	d809      	bhi.n	8001e32 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	6879      	ldr	r1, [r7, #4]
 8001e22:	f04f 30ff 	mov.w	r0, #4294967295
 8001e26:	f001 fbdc 	bl	80035e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e2a:	4a09      	ldr	r2, [pc, #36]	@ (8001e50 <HAL_InitTick+0x70>)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	e007      	b.n	8001e42 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	73fb      	strb	r3, [r7, #15]
 8001e36:	e004      	b.n	8001e42 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	73fb      	strb	r3, [r7, #15]
 8001e3c:	e001      	b.n	8001e42 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	2000002c 	.word	0x2000002c
 8001e50:	20000028 	.word	0x20000028

08001e54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e58:	4b06      	ldr	r3, [pc, #24]	@ (8001e74 <HAL_IncTick+0x20>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4b06      	ldr	r3, [pc, #24]	@ (8001e78 <HAL_IncTick+0x24>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4413      	add	r3, r2
 8001e64:	4a04      	ldr	r2, [pc, #16]	@ (8001e78 <HAL_IncTick+0x24>)
 8001e66:	6013      	str	r3, [r2, #0]
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	2000002c 	.word	0x2000002c
 8001e78:	2000072c 	.word	0x2000072c

08001e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e80:	4b03      	ldr	r3, [pc, #12]	@ (8001e90 <HAL_GetTick+0x14>)
 8001e82:	681b      	ldr	r3, [r3, #0]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	2000072c 	.word	0x2000072c

08001e94 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001e98:	4b03      	ldr	r3, [pc, #12]	@ (8001ea8 <HAL_GetTickPrio+0x14>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	20000028 	.word	0x20000028

08001eac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eb4:	f7ff ffe2 	bl	8001e7c <HAL_GetTick>
 8001eb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec4:	d005      	beq.n	8001ed2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef0 <HAL_Delay+0x44>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4413      	add	r3, r2
 8001ed0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ed2:	bf00      	nop
 8001ed4:	f7ff ffd2 	bl	8001e7c <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d8f7      	bhi.n	8001ed4 <HAL_Delay+0x28>
  {
  }
}
 8001ee4:	bf00      	nop
 8001ee6:	bf00      	nop
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	2000002c 	.word	0x2000002c

08001ef4 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
 8001f22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	609a      	str	r2, [r3, #8]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b087      	sub	sp, #28
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
 8001f68:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	3360      	adds	r3, #96	@ 0x60
 8001f6e:	461a      	mov	r2, r3
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	4b08      	ldr	r3, [pc, #32]	@ (8001fa0 <LL_ADC_SetOffset+0x44>)
 8001f7e:	4013      	ands	r3, r2
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f94:	bf00      	nop
 8001f96:	371c      	adds	r7, #28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	03fff000 	.word	0x03fff000

08001fa4 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3360      	adds	r3, #96	@ 0x60
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4413      	add	r3, r2
 8001fba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b087      	sub	sp, #28
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	3360      	adds	r3, #96	@ 0x60
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001ffa:	bf00      	nop
 8001ffc:	371c      	adds	r7, #28
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800201a:	2301      	movs	r3, #1
 800201c:	e000      	b.n	8002020 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800201e:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002020:	4618      	mov	r0, r3
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800202c:	b480      	push	{r7}
 800202e:	b087      	sub	sp, #28
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	3330      	adds	r3, #48	@ 0x30
 800203c:	461a      	mov	r2, r3
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	0a1b      	lsrs	r3, r3, #8
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	f003 030c 	and.w	r3, r3, #12
 8002048:	4413      	add	r3, r2
 800204a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	f003 031f 	and.w	r3, r3, #31
 8002056:	211f      	movs	r1, #31
 8002058:	fa01 f303 	lsl.w	r3, r1, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	401a      	ands	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	0e9b      	lsrs	r3, r3, #26
 8002064:	f003 011f 	and.w	r1, r3, #31
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	f003 031f 	and.w	r3, r3, #31
 800206e:	fa01 f303 	lsl.w	r3, r1, r3
 8002072:	431a      	orrs	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002078:	bf00      	nop
 800207a:	371c      	adds	r7, #28
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	f003 0303 	and.w	r3, r3, #3
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002094:	4618      	mov	r0, r3
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ac:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80020b4:	2301      	movs	r3, #1
 80020b6:	e000      	b.n	80020ba <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b087      	sub	sp, #28
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	60f8      	str	r0, [r7, #12]
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	3314      	adds	r3, #20
 80020d6:	461a      	mov	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	0e5b      	lsrs	r3, r3, #25
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	4413      	add	r3, r2
 80020e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	0d1b      	lsrs	r3, r3, #20
 80020ee:	f003 031f 	and.w	r3, r3, #31
 80020f2:	2107      	movs	r1, #7
 80020f4:	fa01 f303 	lsl.w	r3, r1, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	401a      	ands	r2, r3
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	0d1b      	lsrs	r3, r3, #20
 8002100:	f003 031f 	and.w	r3, r3, #31
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	fa01 f303 	lsl.w	r3, r1, r3
 800210a:	431a      	orrs	r2, r3
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002110:	bf00      	nop
 8002112:	371c      	adds	r7, #28
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002134:	43db      	mvns	r3, r3
 8002136:	401a      	ands	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f003 0318 	and.w	r3, r3, #24
 800213e:	4908      	ldr	r1, [pc, #32]	@ (8002160 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002140:	40d9      	lsrs	r1, r3
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	400b      	ands	r3, r1
 8002146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800214a:	431a      	orrs	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002152:	bf00      	nop
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	0007ffff 	.word	0x0007ffff

08002164 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002174:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6093      	str	r3, [r2, #8]
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002198:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800219c:	d101      	bne.n	80021a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800219e:	2301      	movs	r3, #1
 80021a0:	e000      	b.n	80021a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80021c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021c4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80021ec:	d101      	bne.n	80021f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021ee:	2301      	movs	r3, #1
 80021f0:	e000      	b.n	80021f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002210:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002214:	f043 0201 	orr.w	r2, r3, #1
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b01      	cmp	r3, #1
 800223a:	d101      	bne.n	8002240 <LL_ADC_IsEnabled+0x18>
 800223c:	2301      	movs	r3, #1
 800223e:	e000      	b.n	8002242 <LL_ADC_IsEnabled+0x1a>
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800225e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002262:	f043 0204 	orr.w	r2, r3, #4
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	2b04      	cmp	r3, #4
 8002288:	d101      	bne.n	800228e <LL_ADC_REG_IsConversionOngoing+0x18>
 800228a:	2301      	movs	r3, #1
 800228c:	e000      	b.n	8002290 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 0308 	and.w	r3, r3, #8
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d101      	bne.n	80022b4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80022b0:	2301      	movs	r3, #1
 80022b2:	e000      	b.n	80022b6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
	...

080022c4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b088      	sub	sp, #32
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e12e      	b.n	8002540 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d109      	bne.n	8002304 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7ff f901 	bl	80014f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff ff3d 	bl	8002188 <LL_ADC_IsDeepPowerDownEnabled>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d004      	beq.n	800231e <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff ff23 	bl	8002164 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff ff58 	bl	80021d8 <LL_ADC_IsInternalRegulatorEnabled>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d115      	bne.n	800235a <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff ff3c 	bl	80021b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002338:	4b83      	ldr	r3, [pc, #524]	@ (8002548 <HAL_ADC_Init+0x284>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	099b      	lsrs	r3, r3, #6
 800233e:	4a83      	ldr	r2, [pc, #524]	@ (800254c <HAL_ADC_Init+0x288>)
 8002340:	fba2 2303 	umull	r2, r3, r2, r3
 8002344:	099b      	lsrs	r3, r3, #6
 8002346:	3301      	adds	r3, #1
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800234c:	e002      	b.n	8002354 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	3b01      	subs	r3, #1
 8002352:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f9      	bne.n	800234e <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff ff3a 	bl	80021d8 <LL_ADC_IsInternalRegulatorEnabled>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10d      	bne.n	8002386 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800236e:	f043 0210 	orr.w	r2, r3, #16
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237a:	f043 0201 	orr.w	r2, r3, #1
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff ff73 	bl	8002276 <LL_ADC_REG_IsConversionOngoing>
 8002390:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002396:	f003 0310 	and.w	r3, r3, #16
 800239a:	2b00      	cmp	r3, #0
 800239c:	f040 80c7 	bne.w	800252e <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f040 80c3 	bne.w	800252e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ac:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80023b0:	f043 0202 	orr.w	r2, r3, #2
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff ff33 	bl	8002228 <LL_ADC_IsEnabled>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10b      	bne.n	80023e0 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023c8:	4861      	ldr	r0, [pc, #388]	@ (8002550 <HAL_ADC_Init+0x28c>)
 80023ca:	f7ff ff2d 	bl	8002228 <LL_ADC_IsEnabled>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d105      	bne.n	80023e0 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	4619      	mov	r1, r3
 80023da:	485e      	ldr	r0, [pc, #376]	@ (8002554 <HAL_ADC_Init+0x290>)
 80023dc:	f7ff fd8a 	bl	8001ef4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	7e5b      	ldrb	r3, [r3, #25]
 80023e4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023ea:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80023f0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80023f6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023fe:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8002400:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4313      	orrs	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d106      	bne.n	8002420 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002416:	3b01      	subs	r3, #1
 8002418:	045b      	lsls	r3, r3, #17
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4313      	orrs	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002424:	2b00      	cmp	r3, #0
 8002426:	d009      	beq.n	800243c <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800242c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002434:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	4b45      	ldr	r3, [pc, #276]	@ (8002558 <HAL_ADC_Init+0x294>)
 8002444:	4013      	ands	r3, r2
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6812      	ldr	r2, [r2, #0]
 800244a:	69b9      	ldr	r1, [r7, #24]
 800244c:	430b      	orrs	r3, r1
 800244e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff ff0e 	bl	8002276 <LL_ADC_REG_IsConversionOngoing>
 800245a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff ff1b 	bl	800229c <LL_ADC_INJ_IsConversionOngoing>
 8002466:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d13d      	bne.n	80024ea <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d13a      	bne.n	80024ea <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002478:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002480:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002482:	4313      	orrs	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002490:	f023 0302 	bic.w	r3, r3, #2
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	69b9      	ldr	r1, [r7, #24]
 800249a:	430b      	orrs	r3, r1
 800249c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d118      	bne.n	80024da <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80024b2:	f023 0304 	bic.w	r3, r3, #4
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80024be:	4311      	orrs	r1, r2
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80024c4:	4311      	orrs	r1, r2
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80024ca:	430a      	orrs	r2, r1
 80024cc:	431a      	orrs	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0201 	orr.w	r2, r2, #1
 80024d6:	611a      	str	r2, [r3, #16]
 80024d8:	e007      	b.n	80024ea <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	691a      	ldr	r2, [r3, #16]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 0201 	bic.w	r2, r2, #1
 80024e8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d10c      	bne.n	800250c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f8:	f023 010f 	bic.w	r1, r3, #15
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	1e5a      	subs	r2, r3, #1
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	631a      	str	r2, [r3, #48]	@ 0x30
 800250a:	e007      	b.n	800251c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 020f 	bic.w	r2, r2, #15
 800251a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002520:	f023 0303 	bic.w	r3, r3, #3
 8002524:	f043 0201 	orr.w	r2, r3, #1
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	655a      	str	r2, [r3, #84]	@ 0x54
 800252c:	e007      	b.n	800253e <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002532:	f043 0210 	orr.w	r2, r3, #16
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800253e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3720      	adds	r7, #32
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	20000008 	.word	0x20000008
 800254c:	053e2d63 	.word	0x053e2d63
 8002550:	50040000 	.word	0x50040000
 8002554:	50040300 	.word	0x50040300
 8002558:	fff0c007 	.word	0xfff0c007

0800255c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff fe82 	bl	8002276 <LL_ADC_REG_IsConversionOngoing>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d167      	bne.n	8002648 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800257e:	2b01      	cmp	r3, #1
 8002580:	d101      	bne.n	8002586 <HAL_ADC_Start_DMA+0x2a>
 8002582:	2302      	movs	r3, #2
 8002584:	e063      	b.n	800264e <HAL_ADC_Start_DMA+0xf2>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f000 fe0c 	bl	80031ac <ADC_Enable>
 8002594:	4603      	mov	r3, r0
 8002596:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002598:	7dfb      	ldrb	r3, [r7, #23]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d14f      	bne.n	800263e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025a2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80025a6:	f023 0301 	bic.w	r3, r3, #1
 80025aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d006      	beq.n	80025cc <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c2:	f023 0206 	bic.w	r2, r3, #6
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	659a      	str	r2, [r3, #88]	@ 0x58
 80025ca:	e002      	b.n	80025d2 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025d6:	4a20      	ldr	r2, [pc, #128]	@ (8002658 <HAL_ADC_Start_DMA+0xfc>)
 80025d8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025de:	4a1f      	ldr	r2, [pc, #124]	@ (800265c <HAL_ADC_Start_DMA+0x100>)
 80025e0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025e6:	4a1e      	ldr	r2, [pc, #120]	@ (8002660 <HAL_ADC_Start_DMA+0x104>)
 80025e8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	221c      	movs	r2, #28
 80025f0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f042 0210 	orr.w	r2, r2, #16
 8002608:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68da      	ldr	r2, [r3, #12]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f042 0201 	orr.w	r2, r2, #1
 8002618:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	3340      	adds	r3, #64	@ 0x40
 8002624:	4619      	mov	r1, r3
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f001 f8b7 	bl	800379c <HAL_DMA_Start_IT>
 800262e:	4603      	mov	r3, r0
 8002630:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff fe09 	bl	800224e <LL_ADC_REG_StartConversion>
 800263c:	e006      	b.n	800264c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002646:	e001      	b.n	800264c <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002648:	2302      	movs	r3, #2
 800264a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800264c:	7dfb      	ldrb	r3, [r7, #23]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	080032a1 	.word	0x080032a1
 800265c:	08003379 	.word	0x08003379
 8002660:	08003395 	.word	0x08003395

08002664 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b088      	sub	sp, #32
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800266c:	2300      	movs	r3, #0
 800266e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d017      	beq.n	80026ba <HAL_ADC_IRQHandler+0x56>
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d012      	beq.n	80026ba <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002698:	f003 0310 	and.w	r3, r3, #16
 800269c:	2b00      	cmp	r3, #0
 800269e:	d105      	bne.n	80026ac <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a4:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 feb3 	bl	8003418 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2202      	movs	r2, #2
 80026b8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d004      	beq.n	80026ce <HAL_ADC_IRQHandler+0x6a>
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f003 0304 	and.w	r3, r3, #4
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d109      	bne.n	80026e2 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d05d      	beq.n	8002794 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d058      	beq.n	8002794 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e6:	f003 0310 	and.w	r3, r3, #16
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d105      	bne.n	80026fa <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff fc81 	bl	8002006 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d03d      	beq.n	8002786 <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002714:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002718:	d035      	beq.n	8002786 <HAL_ADC_IRQHandler+0x122>
#endif /* ADC_SUPPORT_2_5_MSPS */
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	2b08      	cmp	r3, #8
 8002726:	d12e      	bne.n	8002786 <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff fda2 	bl	8002276 <LL_ADC_REG_IsConversionOngoing>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d11a      	bne.n	800276e <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 020c 	bic.w	r2, r2, #12
 8002746:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800274c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002758:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d112      	bne.n	8002786 <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002764:	f043 0201 	orr.w	r2, r3, #1
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	655a      	str	r2, [r3, #84]	@ 0x54
 800276c:	e00b      	b.n	8002786 <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002772:	f043 0210 	orr.w	r2, r3, #16
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800277e:	f043 0201 	orr.w	r2, r3, #1
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f922 	bl	80029d0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	220c      	movs	r2, #12
 8002792:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	f003 0320 	and.w	r3, r3, #32
 800279a:	2b00      	cmp	r3, #0
 800279c:	d004      	beq.n	80027a8 <HAL_ADC_IRQHandler+0x144>
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f003 0320 	and.w	r3, r3, #32
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d109      	bne.n	80027bc <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d074      	beq.n	800289c <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d06f      	beq.n	800289c <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c0:	f003 0310 	and.w	r3, r3, #16
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d105      	bne.n	80027d4 <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027cc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff fc61 	bl	80020a0 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80027de:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff fc0e 	bl	8002006 <LL_ADC_REG_IsTriggerSourceSWStart>
 80027ea:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d049      	beq.n	800288e <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d007      	beq.n	8002814 <HAL_ADC_IRQHandler+0x1b0>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d041      	beq.n	800288e <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002810:	2b00      	cmp	r3, #0
 8002812:	d13c      	bne.n	800288e <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800281e:	2b40      	cmp	r3, #64	@ 0x40
 8002820:	d135      	bne.n	800288e <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d12e      	bne.n	800288e <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff fd31 	bl	800229c <LL_ADC_INJ_IsConversionOngoing>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d11a      	bne.n	8002876 <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800284e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002854:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002860:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002864:	2b00      	cmp	r3, #0
 8002866:	d112      	bne.n	800288e <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800286c:	f043 0201 	orr.w	r2, r3, #1
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	655a      	str	r2, [r3, #84]	@ 0x54
 8002874:	e00b      	b.n	800288e <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800287a:	f043 0210 	orr.w	r2, r3, #16
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002886:	f043 0201 	orr.w	r2, r3, #1
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fd9a 	bl	80033c8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2260      	movs	r2, #96	@ 0x60
 800289a:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d011      	beq.n	80028ca <HAL_ADC_IRQHandler+0x266>
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00c      	beq.n	80028ca <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028b4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 f89b 	bl	80029f8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2280      	movs	r2, #128	@ 0x80
 80028c8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d012      	beq.n	80028fa <HAL_ADC_IRQHandler+0x296>
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00d      	beq.n	80028fa <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028e2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 fd80 	bl	80033f0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028f8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002900:	2b00      	cmp	r3, #0
 8002902:	d012      	beq.n	800292a <HAL_ADC_IRQHandler+0x2c6>
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00d      	beq.n	800292a <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002912:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 fd72 	bl	8003404 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002928:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	f003 0310 	and.w	r3, r3, #16
 8002930:	2b00      	cmp	r3, #0
 8002932:	d02b      	beq.n	800298c <HAL_ADC_IRQHandler+0x328>
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	f003 0310 	and.w	r3, r3, #16
 800293a:	2b00      	cmp	r3, #0
 800293c:	d026      	beq.n	800298c <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002942:	2b00      	cmp	r3, #0
 8002944:	d102      	bne.n	800294c <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 8002946:	2301      	movs	r3, #1
 8002948:	61fb      	str	r3, [r7, #28]
 800294a:	e009      	b.n	8002960 <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff fb97 	bl	8002084 <LL_ADC_REG_GetDMATransfer>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 800295c:	2301      	movs	r3, #1
 800295e:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d10e      	bne.n	8002984 <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800296a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002976:	f043 0202 	orr.w	r2, r3, #2
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f844 	bl	8002a0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2210      	movs	r2, #16
 800298a:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002992:	2b00      	cmp	r3, #0
 8002994:	d018      	beq.n	80029c8 <HAL_ADC_IRQHandler+0x364>
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800299c:	2b00      	cmp	r3, #0
 800299e:	d013      	beq.n	80029c8 <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a4:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b0:	f043 0208 	orr.w	r2, r3, #8
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029c0:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 fd0a 	bl	80033dc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 80029c8:	bf00      	nop
 80029ca:	3720      	adds	r7, #32
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b0b6      	sub	sp, #216	@ 0xd8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002a30:	2300      	movs	r3, #0
 8002a32:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d101      	bne.n	8002a42 <HAL_ADC_ConfigChannel+0x22>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e39f      	b.n	8003182 <HAL_ADC_ConfigChannel+0x762>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff fc11 	bl	8002276 <LL_ADC_REG_IsConversionOngoing>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f040 8384 	bne.w	8003164 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6818      	ldr	r0, [r3, #0]
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	6859      	ldr	r1, [r3, #4]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	f7ff fadf 	bl	800202c <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff fbff 	bl	8002276 <LL_ADC_REG_IsConversionOngoing>
 8002a78:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff fc0b 	bl	800229c <LL_ADC_INJ_IsConversionOngoing>
 8002a86:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a8a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f040 81a6 	bne.w	8002de0 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f040 81a1 	bne.w	8002de0 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6818      	ldr	r0, [r3, #0]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	6819      	ldr	r1, [r3, #0]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	f7ff fb0b 	bl	80020c6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	695a      	ldr	r2, [r3, #20]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	08db      	lsrs	r3, r3, #3
 8002abc:	f003 0303 	and.w	r3, r3, #3
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d00a      	beq.n	8002ae8 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6818      	ldr	r0, [r3, #0]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	6919      	ldr	r1, [r3, #16]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002ae2:	f7ff fa3b 	bl	8001f5c <LL_ADC_SetOffset>
 8002ae6:	e17b      	b.n	8002de0 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2100      	movs	r1, #0
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff fa58 	bl	8001fa4 <LL_ADC_GetOffsetChannel>
 8002af4:	4603      	mov	r3, r0
 8002af6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10a      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0xf4>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2100      	movs	r1, #0
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff fa4d 	bl	8001fa4 <LL_ADC_GetOffsetChannel>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	0e9b      	lsrs	r3, r3, #26
 8002b0e:	f003 021f 	and.w	r2, r3, #31
 8002b12:	e01e      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x132>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2100      	movs	r1, #0
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff fa42 	bl	8001fa4 <LL_ADC_GetOffsetChannel>
 8002b20:	4603      	mov	r3, r0
 8002b22:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002b2a:	fa93 f3a3 	rbit	r3, r3
 8002b2e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b36:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8002b42:	2320      	movs	r3, #32
 8002b44:	e004      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8002b46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b4a:	fab3 f383 	clz	r3, r3
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	461a      	mov	r2, r3
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d105      	bne.n	8002b6a <HAL_ADC_ConfigChannel+0x14a>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	0e9b      	lsrs	r3, r3, #26
 8002b64:	f003 031f 	and.w	r3, r3, #31
 8002b68:	e018      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x17c>
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b72:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b76:	fa93 f3a3 	rbit	r3, r3
 8002b7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002b7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002b86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8002b8e:	2320      	movs	r3, #32
 8002b90:	e004      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8002b92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b96:	fab3 f383 	clz	r3, r3
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d106      	bne.n	8002bae <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff fa11 	bl	8001fd0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff f9f5 	bl	8001fa4 <LL_ADC_GetOffsetChannel>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10a      	bne.n	8002bda <HAL_ADC_ConfigChannel+0x1ba>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2101      	movs	r1, #1
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff f9ea 	bl	8001fa4 <LL_ADC_GetOffsetChannel>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	0e9b      	lsrs	r3, r3, #26
 8002bd4:	f003 021f 	and.w	r2, r3, #31
 8002bd8:	e01e      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x1f8>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2101      	movs	r1, #1
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff f9df 	bl	8001fa4 <LL_ADC_GetOffsetChannel>
 8002be6:	4603      	mov	r3, r0
 8002be8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002bf0:	fa93 f3a3 	rbit	r3, r3
 8002bf4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002bf8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002bfc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002c00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8002c08:	2320      	movs	r3, #32
 8002c0a:	e004      	b.n	8002c16 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8002c0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c10:	fab3 f383 	clz	r3, r3
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	461a      	mov	r2, r3
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d105      	bne.n	8002c30 <HAL_ADC_ConfigChannel+0x210>
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	0e9b      	lsrs	r3, r3, #26
 8002c2a:	f003 031f 	and.w	r3, r3, #31
 8002c2e:	e018      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x242>
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c3c:	fa93 f3a3 	rbit	r3, r3
 8002c40:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002c44:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002c4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8002c54:	2320      	movs	r3, #32
 8002c56:	e004      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8002c58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c5c:	fab3 f383 	clz	r3, r3
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d106      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff f9ae 	bl	8001fd0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2102      	movs	r1, #2
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff f992 	bl	8001fa4 <LL_ADC_GetOffsetChannel>
 8002c80:	4603      	mov	r3, r0
 8002c82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10a      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x280>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2102      	movs	r1, #2
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff f987 	bl	8001fa4 <LL_ADC_GetOffsetChannel>
 8002c96:	4603      	mov	r3, r0
 8002c98:	0e9b      	lsrs	r3, r3, #26
 8002c9a:	f003 021f 	and.w	r2, r3, #31
 8002c9e:	e01e      	b.n	8002cde <HAL_ADC_ConfigChannel+0x2be>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2102      	movs	r1, #2
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff f97c 	bl	8001fa4 <LL_ADC_GetOffsetChannel>
 8002cac:	4603      	mov	r3, r0
 8002cae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cb6:	fa93 f3a3 	rbit	r3, r3
 8002cba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002cbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002cc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002cc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8002cce:	2320      	movs	r3, #32
 8002cd0:	e004      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002cd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002cd6:	fab3 f383 	clz	r3, r3
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	461a      	mov	r2, r3
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d105      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0x2d6>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	0e9b      	lsrs	r3, r3, #26
 8002cf0:	f003 031f 	and.w	r3, r3, #31
 8002cf4:	e016      	b.n	8002d24 <HAL_ADC_ConfigChannel+0x304>
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d02:	fa93 f3a3 	rbit	r3, r3
 8002d06:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002d08:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002d0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8002d16:	2320      	movs	r3, #32
 8002d18:	e004      	b.n	8002d24 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8002d1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d1e:	fab3 f383 	clz	r3, r3
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d106      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	2102      	movs	r1, #2
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff f94d 	bl	8001fd0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2103      	movs	r1, #3
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff f931 	bl	8001fa4 <LL_ADC_GetOffsetChannel>
 8002d42:	4603      	mov	r3, r0
 8002d44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10a      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x342>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2103      	movs	r1, #3
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff f926 	bl	8001fa4 <LL_ADC_GetOffsetChannel>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	0e9b      	lsrs	r3, r3, #26
 8002d5c:	f003 021f 	and.w	r2, r3, #31
 8002d60:	e017      	b.n	8002d92 <HAL_ADC_ConfigChannel+0x372>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2103      	movs	r1, #3
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff f91b 	bl	8001fa4 <LL_ADC_GetOffsetChannel>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d74:	fa93 f3a3 	rbit	r3, r3
 8002d78:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002d7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d7c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002d7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8002d84:	2320      	movs	r3, #32
 8002d86:	e003      	b.n	8002d90 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8002d88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d8a:	fab3 f383 	clz	r3, r3
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	461a      	mov	r2, r3
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d105      	bne.n	8002daa <HAL_ADC_ConfigChannel+0x38a>
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	0e9b      	lsrs	r3, r3, #26
 8002da4:	f003 031f 	and.w	r3, r3, #31
 8002da8:	e011      	b.n	8002dce <HAL_ADC_ConfigChannel+0x3ae>
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002db2:	fa93 f3a3 	rbit	r3, r3
 8002db6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002db8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002dba:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002dbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8002dc2:	2320      	movs	r3, #32
 8002dc4:	e003      	b.n	8002dce <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8002dc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dc8:	fab3 f383 	clz	r3, r3
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d106      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	2103      	movs	r1, #3
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff f8f8 	bl	8001fd0 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff fa1f 	bl	8002228 <LL_ADC_IsEnabled>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f040 81c2 	bne.w	8003176 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6818      	ldr	r0, [r3, #0]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	6819      	ldr	r1, [r3, #0]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	f7ff f98c 	bl	800211c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	4a8e      	ldr	r2, [pc, #568]	@ (8003044 <HAL_ADC_ConfigChannel+0x624>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	f040 8130 	bne.w	8003070 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10b      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x418>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	0e9b      	lsrs	r3, r3, #26
 8002e26:	3301      	adds	r3, #1
 8002e28:	f003 031f 	and.w	r3, r3, #31
 8002e2c:	2b09      	cmp	r3, #9
 8002e2e:	bf94      	ite	ls
 8002e30:	2301      	movls	r3, #1
 8002e32:	2300      	movhi	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	e019      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x44c>
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e40:	fa93 f3a3 	rbit	r3, r3
 8002e44:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002e46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e48:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002e4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8002e50:	2320      	movs	r3, #32
 8002e52:	e003      	b.n	8002e5c <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8002e54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e56:	fab3 f383 	clz	r3, r3
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	f003 031f 	and.w	r3, r3, #31
 8002e62:	2b09      	cmp	r3, #9
 8002e64:	bf94      	ite	ls
 8002e66:	2301      	movls	r3, #1
 8002e68:	2300      	movhi	r3, #0
 8002e6a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d079      	beq.n	8002f64 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d107      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x46c>
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	0e9b      	lsrs	r3, r3, #26
 8002e82:	3301      	adds	r3, #1
 8002e84:	069b      	lsls	r3, r3, #26
 8002e86:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e8a:	e015      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0x498>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e94:	fa93 f3a3 	rbit	r3, r3
 8002e98:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002e9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e9c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002e9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002ea4:	2320      	movs	r3, #32
 8002ea6:	e003      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002ea8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eaa:	fab3 f383 	clz	r3, r3
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	069b      	lsls	r3, r3, #26
 8002eb4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d109      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x4b8>
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	0e9b      	lsrs	r3, r3, #26
 8002eca:	3301      	adds	r3, #1
 8002ecc:	f003 031f 	and.w	r3, r3, #31
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed6:	e017      	b.n	8002f08 <HAL_ADC_ConfigChannel+0x4e8>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ede:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ee0:	fa93 f3a3 	rbit	r3, r3
 8002ee4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002ee6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002eea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002ef0:	2320      	movs	r3, #32
 8002ef2:	e003      	b.n	8002efc <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002ef4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ef6:	fab3 f383 	clz	r3, r3
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	3301      	adds	r3, #1
 8002efe:	f003 031f 	and.w	r3, r3, #31
 8002f02:	2101      	movs	r1, #1
 8002f04:	fa01 f303 	lsl.w	r3, r1, r3
 8002f08:	ea42 0103 	orr.w	r1, r2, r3
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10a      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x50e>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	0e9b      	lsrs	r3, r3, #26
 8002f1e:	3301      	adds	r3, #1
 8002f20:	f003 021f 	and.w	r2, r3, #31
 8002f24:	4613      	mov	r3, r2
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	4413      	add	r3, r2
 8002f2a:	051b      	lsls	r3, r3, #20
 8002f2c:	e018      	b.n	8002f60 <HAL_ADC_ConfigChannel+0x540>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f36:	fa93 f3a3 	rbit	r3, r3
 8002f3a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002f40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002f46:	2320      	movs	r3, #32
 8002f48:	e003      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002f4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f4c:	fab3 f383 	clz	r3, r3
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	3301      	adds	r3, #1
 8002f54:	f003 021f 	and.w	r2, r3, #31
 8002f58:	4613      	mov	r3, r2
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	4413      	add	r3, r2
 8002f5e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f60:	430b      	orrs	r3, r1
 8002f62:	e080      	b.n	8003066 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d107      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x560>
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	0e9b      	lsrs	r3, r3, #26
 8002f76:	3301      	adds	r3, #1
 8002f78:	069b      	lsls	r3, r3, #26
 8002f7a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f7e:	e015      	b.n	8002fac <HAL_ADC_ConfigChannel+0x58c>
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f88:	fa93 f3a3 	rbit	r3, r3
 8002f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f90:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8002f98:	2320      	movs	r3, #32
 8002f9a:	e003      	b.n	8002fa4 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8002f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f9e:	fab3 f383 	clz	r3, r3
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	069b      	lsls	r3, r3, #26
 8002fa8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d109      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x5ac>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	0e9b      	lsrs	r3, r3, #26
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	f003 031f 	and.w	r3, r3, #31
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fca:	e017      	b.n	8002ffc <HAL_ADC_ConfigChannel+0x5dc>
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd2:	6a3b      	ldr	r3, [r7, #32]
 8002fd4:	fa93 f3a3 	rbit	r3, r3
 8002fd8:	61fb      	str	r3, [r7, #28]
  return result;
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8002fe4:	2320      	movs	r3, #32
 8002fe6:	e003      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fea:	fab3 f383 	clz	r3, r3
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	f003 031f 	and.w	r3, r3, #31
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffc:	ea42 0103 	orr.w	r1, r2, r3
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10d      	bne.n	8003028 <HAL_ADC_ConfigChannel+0x608>
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	0e9b      	lsrs	r3, r3, #26
 8003012:	3301      	adds	r3, #1
 8003014:	f003 021f 	and.w	r2, r3, #31
 8003018:	4613      	mov	r3, r2
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	4413      	add	r3, r2
 800301e:	3b1e      	subs	r3, #30
 8003020:	051b      	lsls	r3, r3, #20
 8003022:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003026:	e01d      	b.n	8003064 <HAL_ADC_ConfigChannel+0x644>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	fa93 f3a3 	rbit	r3, r3
 8003034:	613b      	str	r3, [r7, #16]
  return result;
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d103      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8003040:	2320      	movs	r3, #32
 8003042:	e005      	b.n	8003050 <HAL_ADC_ConfigChannel+0x630>
 8003044:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	fab3 f383 	clz	r3, r3
 800304e:	b2db      	uxtb	r3, r3
 8003050:	3301      	adds	r3, #1
 8003052:	f003 021f 	and.w	r2, r3, #31
 8003056:	4613      	mov	r3, r2
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	4413      	add	r3, r2
 800305c:	3b1e      	subs	r3, #30
 800305e:	051b      	lsls	r3, r3, #20
 8003060:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003064:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800306a:	4619      	mov	r1, r3
 800306c:	f7ff f82b 	bl	80020c6 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	4b45      	ldr	r3, [pc, #276]	@ (800318c <HAL_ADC_ConfigChannel+0x76c>)
 8003076:	4013      	ands	r3, r2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d07c      	beq.n	8003176 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800307c:	4844      	ldr	r0, [pc, #272]	@ (8003190 <HAL_ADC_ConfigChannel+0x770>)
 800307e:	f7fe ff5f 	bl	8001f40 <LL_ADC_GetCommonPathInternalCh>
 8003082:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003086:	4843      	ldr	r0, [pc, #268]	@ (8003194 <HAL_ADC_ConfigChannel+0x774>)
 8003088:	f7ff f8ce 	bl	8002228 <LL_ADC_IsEnabled>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d15e      	bne.n	8003150 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a40      	ldr	r2, [pc, #256]	@ (8003198 <HAL_ADC_ConfigChannel+0x778>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d127      	bne.n	80030ec <HAL_ADC_ConfigChannel+0x6cc>
 800309c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d121      	bne.n	80030ec <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a39      	ldr	r2, [pc, #228]	@ (8003194 <HAL_ADC_ConfigChannel+0x774>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d161      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80030b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80030ba:	4619      	mov	r1, r3
 80030bc:	4834      	ldr	r0, [pc, #208]	@ (8003190 <HAL_ADC_ConfigChannel+0x770>)
 80030be:	f7fe ff2c 	bl	8001f1a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030c2:	4b36      	ldr	r3, [pc, #216]	@ (800319c <HAL_ADC_ConfigChannel+0x77c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	099b      	lsrs	r3, r3, #6
 80030c8:	4a35      	ldr	r2, [pc, #212]	@ (80031a0 <HAL_ADC_ConfigChannel+0x780>)
 80030ca:	fba2 2303 	umull	r2, r3, r2, r3
 80030ce:	099b      	lsrs	r3, r3, #6
 80030d0:	1c5a      	adds	r2, r3, #1
 80030d2:	4613      	mov	r3, r2
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	4413      	add	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80030dc:	e002      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	3b01      	subs	r3, #1
 80030e2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f9      	bne.n	80030de <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030ea:	e044      	b.n	8003176 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a2c      	ldr	r2, [pc, #176]	@ (80031a4 <HAL_ADC_ConfigChannel+0x784>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d113      	bne.n	800311e <HAL_ADC_ConfigChannel+0x6fe>
 80030f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10d      	bne.n	800311e <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a23      	ldr	r2, [pc, #140]	@ (8003194 <HAL_ADC_ConfigChannel+0x774>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d134      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800310c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003110:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003114:	4619      	mov	r1, r3
 8003116:	481e      	ldr	r0, [pc, #120]	@ (8003190 <HAL_ADC_ConfigChannel+0x770>)
 8003118:	f7fe feff 	bl	8001f1a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800311c:	e02b      	b.n	8003176 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a21      	ldr	r2, [pc, #132]	@ (80031a8 <HAL_ADC_ConfigChannel+0x788>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d126      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x756>
 8003128:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800312c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d120      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a16      	ldr	r2, [pc, #88]	@ (8003194 <HAL_ADC_ConfigChannel+0x774>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d11b      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800313e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003142:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003146:	4619      	mov	r1, r3
 8003148:	4811      	ldr	r0, [pc, #68]	@ (8003190 <HAL_ADC_ConfigChannel+0x770>)
 800314a:	f7fe fee6 	bl	8001f1a <LL_ADC_SetCommonPathInternalCh>
 800314e:	e012      	b.n	8003176 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003154:	f043 0220 	orr.w	r2, r3, #32
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003162:	e008      	b.n	8003176 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003168:	f043 0220 	orr.w	r2, r3, #32
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 800317e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003182:	4618      	mov	r0, r3
 8003184:	37d8      	adds	r7, #216	@ 0xd8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	80080000 	.word	0x80080000
 8003190:	50040300 	.word	0x50040300
 8003194:	50040000 	.word	0x50040000
 8003198:	c7520000 	.word	0xc7520000
 800319c:	20000008 	.word	0x20000008
 80031a0:	053e2d63 	.word	0x053e2d63
 80031a4:	cb840000 	.word	0xcb840000
 80031a8:	80000001 	.word	0x80000001

080031ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80031b4:	2300      	movs	r3, #0
 80031b6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff f833 	bl	8002228 <LL_ADC_IsEnabled>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d15e      	bne.n	8003286 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	4b30      	ldr	r3, [pc, #192]	@ (8003290 <ADC_Enable+0xe4>)
 80031d0:	4013      	ands	r3, r2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00d      	beq.n	80031f2 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031da:	f043 0210 	orr.w	r2, r3, #16
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e6:	f043 0201 	orr.w	r2, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e04a      	b.n	8003288 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff f802 	bl	8002200 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80031fc:	4825      	ldr	r0, [pc, #148]	@ (8003294 <ADC_Enable+0xe8>)
 80031fe:	f7fe fe9f 	bl	8001f40 <LL_ADC_GetCommonPathInternalCh>
 8003202:	4603      	mov	r3, r0
 8003204:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00f      	beq.n	800322c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800320c:	4b22      	ldr	r3, [pc, #136]	@ (8003298 <ADC_Enable+0xec>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	099b      	lsrs	r3, r3, #6
 8003212:	4a22      	ldr	r2, [pc, #136]	@ (800329c <ADC_Enable+0xf0>)
 8003214:	fba2 2303 	umull	r2, r3, r2, r3
 8003218:	099b      	lsrs	r3, r3, #6
 800321a:	3301      	adds	r3, #1
 800321c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800321e:	e002      	b.n	8003226 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	3b01      	subs	r3, #1
 8003224:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1f9      	bne.n	8003220 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800322c:	f7fe fe26 	bl	8001e7c <HAL_GetTick>
 8003230:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003232:	e021      	b.n	8003278 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f7fe fff5 	bl	8002228 <LL_ADC_IsEnabled>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d104      	bne.n	800324e <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f7fe ffd9 	bl	8002200 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800324e:	f7fe fe15 	bl	8001e7c <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d90d      	bls.n	8003278 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003260:	f043 0210 	orr.w	r2, r3, #16
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326c:	f043 0201 	orr.w	r2, r3, #1
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e007      	b.n	8003288 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b01      	cmp	r3, #1
 8003284:	d1d6      	bne.n	8003234 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	8000003f 	.word	0x8000003f
 8003294:	50040300 	.word	0x50040300
 8003298:	20000008 	.word	0x20000008
 800329c:	053e2d63 	.word	0x053e2d63

080032a0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ac:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032b2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d14b      	bne.n	8003352 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032be:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0308 	and.w	r3, r3, #8
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d021      	beq.n	8003318 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f7fe fe94 	bl	8002006 <LL_ADC_REG_IsTriggerSourceSWStart>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d032      	beq.n	800334a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d12b      	bne.n	800334a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003302:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d11f      	bne.n	800334a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800330e:	f043 0201 	orr.w	r2, r3, #1
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	655a      	str	r2, [r3, #84]	@ 0x54
 8003316:	e018      	b.n	800334a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d111      	bne.n	800334a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800332a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003336:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d105      	bne.n	800334a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003342:	f043 0201 	orr.w	r2, r3, #1
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f7ff fb40 	bl	80029d0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003350:	e00e      	b.n	8003370 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003356:	f003 0310 	and.w	r3, r3, #16
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f7ff fb54 	bl	8002a0c <HAL_ADC_ErrorCallback>
}
 8003364:	e004      	b.n	8003370 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800336a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	4798      	blx	r3
}
 8003370:	bf00      	nop
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003384:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f7ff fb2c 	bl	80029e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800338c:	bf00      	nop
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b2:	f043 0204 	orr.w	r2, r3, #4
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f7ff fb26 	bl	8002a0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033c0:	bf00      	nop
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800343c:	4b0c      	ldr	r3, [pc, #48]	@ (8003470 <__NVIC_SetPriorityGrouping+0x44>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003448:	4013      	ands	r3, r2
 800344a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003454:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003458:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800345c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800345e:	4a04      	ldr	r2, [pc, #16]	@ (8003470 <__NVIC_SetPriorityGrouping+0x44>)
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	60d3      	str	r3, [r2, #12]
}
 8003464:	bf00      	nop
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	e000ed00 	.word	0xe000ed00

08003474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003478:	4b04      	ldr	r3, [pc, #16]	@ (800348c <__NVIC_GetPriorityGrouping+0x18>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	0a1b      	lsrs	r3, r3, #8
 800347e:	f003 0307 	and.w	r3, r3, #7
}
 8003482:	4618      	mov	r0, r3
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	e000ed00 	.word	0xe000ed00

08003490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	4603      	mov	r3, r0
 8003498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800349a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	db0b      	blt.n	80034ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034a2:	79fb      	ldrb	r3, [r7, #7]
 80034a4:	f003 021f 	and.w	r2, r3, #31
 80034a8:	4907      	ldr	r1, [pc, #28]	@ (80034c8 <__NVIC_EnableIRQ+0x38>)
 80034aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ae:	095b      	lsrs	r3, r3, #5
 80034b0:	2001      	movs	r0, #1
 80034b2:	fa00 f202 	lsl.w	r2, r0, r2
 80034b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	e000e100 	.word	0xe000e100

080034cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	4603      	mov	r3, r0
 80034d4:	6039      	str	r1, [r7, #0]
 80034d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	db0a      	blt.n	80034f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	490c      	ldr	r1, [pc, #48]	@ (8003518 <__NVIC_SetPriority+0x4c>)
 80034e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ea:	0112      	lsls	r2, r2, #4
 80034ec:	b2d2      	uxtb	r2, r2
 80034ee:	440b      	add	r3, r1
 80034f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034f4:	e00a      	b.n	800350c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	4908      	ldr	r1, [pc, #32]	@ (800351c <__NVIC_SetPriority+0x50>)
 80034fc:	79fb      	ldrb	r3, [r7, #7]
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	3b04      	subs	r3, #4
 8003504:	0112      	lsls	r2, r2, #4
 8003506:	b2d2      	uxtb	r2, r2
 8003508:	440b      	add	r3, r1
 800350a:	761a      	strb	r2, [r3, #24]
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	e000e100 	.word	0xe000e100
 800351c:	e000ed00 	.word	0xe000ed00

08003520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003520:	b480      	push	{r7}
 8003522:	b089      	sub	sp, #36	@ 0x24
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f003 0307 	and.w	r3, r3, #7
 8003532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	f1c3 0307 	rsb	r3, r3, #7
 800353a:	2b04      	cmp	r3, #4
 800353c:	bf28      	it	cs
 800353e:	2304      	movcs	r3, #4
 8003540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	3304      	adds	r3, #4
 8003546:	2b06      	cmp	r3, #6
 8003548:	d902      	bls.n	8003550 <NVIC_EncodePriority+0x30>
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	3b03      	subs	r3, #3
 800354e:	e000      	b.n	8003552 <NVIC_EncodePriority+0x32>
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003554:	f04f 32ff 	mov.w	r2, #4294967295
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	43da      	mvns	r2, r3
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	401a      	ands	r2, r3
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003568:	f04f 31ff 	mov.w	r1, #4294967295
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	fa01 f303 	lsl.w	r3, r1, r3
 8003572:	43d9      	mvns	r1, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003578:	4313      	orrs	r3, r2
         );
}
 800357a:	4618      	mov	r0, r3
 800357c:	3724      	adds	r7, #36	@ 0x24
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
	...

08003588 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3b01      	subs	r3, #1
 8003594:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003598:	d301      	bcc.n	800359e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800359a:	2301      	movs	r3, #1
 800359c:	e00f      	b.n	80035be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800359e:	4a0a      	ldr	r2, [pc, #40]	@ (80035c8 <SysTick_Config+0x40>)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3b01      	subs	r3, #1
 80035a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035a6:	210f      	movs	r1, #15
 80035a8:	f04f 30ff 	mov.w	r0, #4294967295
 80035ac:	f7ff ff8e 	bl	80034cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035b0:	4b05      	ldr	r3, [pc, #20]	@ (80035c8 <SysTick_Config+0x40>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035b6:	4b04      	ldr	r3, [pc, #16]	@ (80035c8 <SysTick_Config+0x40>)
 80035b8:	2207      	movs	r2, #7
 80035ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	e000e010 	.word	0xe000e010

080035cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f7ff ff29 	bl	800342c <__NVIC_SetPriorityGrouping>
}
 80035da:	bf00      	nop
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b086      	sub	sp, #24
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	4603      	mov	r3, r0
 80035ea:	60b9      	str	r1, [r7, #8]
 80035ec:	607a      	str	r2, [r7, #4]
 80035ee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035f0:	f7ff ff40 	bl	8003474 <__NVIC_GetPriorityGrouping>
 80035f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	68b9      	ldr	r1, [r7, #8]
 80035fa:	6978      	ldr	r0, [r7, #20]
 80035fc:	f7ff ff90 	bl	8003520 <NVIC_EncodePriority>
 8003600:	4602      	mov	r2, r0
 8003602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003606:	4611      	mov	r1, r2
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff ff5f 	bl	80034cc <__NVIC_SetPriority>
}
 800360e:	bf00      	nop
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b082      	sub	sp, #8
 800361a:	af00      	add	r7, sp, #0
 800361c:	4603      	mov	r3, r0
 800361e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003624:	4618      	mov	r0, r3
 8003626:	f7ff ff33 	bl	8003490 <__NVIC_EnableIRQ>
}
 800362a:	bf00      	nop
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003632:	b580      	push	{r7, lr}
 8003634:	b082      	sub	sp, #8
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7ff ffa4 	bl	8003588 <SysTick_Config>
 8003640:	4603      	mov	r3, r0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
	...

0800364c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e08e      	b.n	800377c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	461a      	mov	r2, r3
 8003664:	4b47      	ldr	r3, [pc, #284]	@ (8003784 <HAL_DMA_Init+0x138>)
 8003666:	429a      	cmp	r2, r3
 8003668:	d80f      	bhi.n	800368a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	461a      	mov	r2, r3
 8003670:	4b45      	ldr	r3, [pc, #276]	@ (8003788 <HAL_DMA_Init+0x13c>)
 8003672:	4413      	add	r3, r2
 8003674:	4a45      	ldr	r2, [pc, #276]	@ (800378c <HAL_DMA_Init+0x140>)
 8003676:	fba2 2303 	umull	r2, r3, r2, r3
 800367a:	091b      	lsrs	r3, r3, #4
 800367c:	009a      	lsls	r2, r3, #2
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a42      	ldr	r2, [pc, #264]	@ (8003790 <HAL_DMA_Init+0x144>)
 8003686:	641a      	str	r2, [r3, #64]	@ 0x40
 8003688:	e00e      	b.n	80036a8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	461a      	mov	r2, r3
 8003690:	4b40      	ldr	r3, [pc, #256]	@ (8003794 <HAL_DMA_Init+0x148>)
 8003692:	4413      	add	r3, r2
 8003694:	4a3d      	ldr	r2, [pc, #244]	@ (800378c <HAL_DMA_Init+0x140>)
 8003696:	fba2 2303 	umull	r2, r3, r2, r3
 800369a:	091b      	lsrs	r3, r3, #4
 800369c:	009a      	lsls	r2, r3, #2
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a3c      	ldr	r2, [pc, #240]	@ (8003798 <HAL_DMA_Init+0x14c>)
 80036a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2202      	movs	r2, #2
 80036ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80036be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80036cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 fa24 	bl	8003b48 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003708:	d102      	bne.n	8003710 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003718:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800371c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003726:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d010      	beq.n	8003752 <HAL_DMA_Init+0x106>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2b04      	cmp	r3, #4
 8003736:	d80c      	bhi.n	8003752 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 fa43 	bl	8003bc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800374e:	605a      	str	r2, [r3, #4]
 8003750:	e008      	b.n	8003764 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40020407 	.word	0x40020407
 8003788:	bffdfff8 	.word	0xbffdfff8
 800378c:	cccccccd 	.word	0xcccccccd
 8003790:	40020000 	.word	0x40020000
 8003794:	bffdfbf8 	.word	0xbffdfbf8
 8003798:	40020400 	.word	0x40020400

0800379c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
 80037a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d101      	bne.n	80037bc <HAL_DMA_Start_IT+0x20>
 80037b8:	2302      	movs	r3, #2
 80037ba:	e066      	b.n	800388a <HAL_DMA_Start_IT+0xee>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d155      	bne.n	800387c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2202      	movs	r2, #2
 80037d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 0201 	bic.w	r2, r2, #1
 80037ec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	68b9      	ldr	r1, [r7, #8]
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f000 f968 	bl	8003aca <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d008      	beq.n	8003814 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f042 020e 	orr.w	r2, r2, #14
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	e00f      	b.n	8003834 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 0204 	bic.w	r2, r2, #4
 8003822:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 020a 	orr.w	r2, r2, #10
 8003832:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d007      	beq.n	8003852 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800384c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003850:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003856:	2b00      	cmp	r3, #0
 8003858:	d007      	beq.n	800386a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003864:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003868:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f042 0201 	orr.w	r2, r2, #1
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	e005      	b.n	8003888 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003884:	2302      	movs	r3, #2
 8003886:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003888:	7dfb      	ldrb	r3, [r7, #23]
}
 800388a:	4618      	mov	r0, r3
 800388c:	3718      	adds	r7, #24
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b084      	sub	sp, #16
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800389a:	2300      	movs	r3, #0
 800389c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d005      	beq.n	80038b6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2204      	movs	r2, #4
 80038ae:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	73fb      	strb	r3, [r7, #15]
 80038b4:	e047      	b.n	8003946 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 020e 	bic.w	r2, r2, #14
 80038c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0201 	bic.w	r2, r2, #1
 80038d4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ea:	f003 021c 	and.w	r2, r3, #28
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f2:	2101      	movs	r1, #1
 80038f4:	fa01 f202 	lsl.w	r2, r1, r2
 80038f8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003902:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00c      	beq.n	8003926 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003916:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800391a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003924:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	4798      	blx	r3
    }
  }
  return status;
 8003946:	7bfb      	ldrb	r3, [r7, #15]
}
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396c:	f003 031c 	and.w	r3, r3, #28
 8003970:	2204      	movs	r2, #4
 8003972:	409a      	lsls	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4013      	ands	r3, r2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d026      	beq.n	80039ca <HAL_DMA_IRQHandler+0x7a>
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	f003 0304 	and.w	r3, r3, #4
 8003982:	2b00      	cmp	r3, #0
 8003984:	d021      	beq.n	80039ca <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0320 	and.w	r3, r3, #32
 8003990:	2b00      	cmp	r3, #0
 8003992:	d107      	bne.n	80039a4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0204 	bic.w	r2, r2, #4
 80039a2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039a8:	f003 021c 	and.w	r2, r3, #28
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b0:	2104      	movs	r1, #4
 80039b2:	fa01 f202 	lsl.w	r2, r1, r2
 80039b6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d071      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80039c8:	e06c      	b.n	8003aa4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ce:	f003 031c 	and.w	r3, r3, #28
 80039d2:	2202      	movs	r2, #2
 80039d4:	409a      	lsls	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	4013      	ands	r3, r2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d02e      	beq.n	8003a3c <HAL_DMA_IRQHandler+0xec>
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d029      	beq.n	8003a3c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0320 	and.w	r3, r3, #32
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10b      	bne.n	8003a0e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 020a 	bic.w	r2, r2, #10
 8003a04:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a12:	f003 021c 	and.w	r2, r3, #28
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1a:	2102      	movs	r1, #2
 8003a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a20:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d038      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003a3a:	e033      	b.n	8003aa4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a40:	f003 031c 	and.w	r3, r3, #28
 8003a44:	2208      	movs	r2, #8
 8003a46:	409a      	lsls	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d02a      	beq.n	8003aa6 <HAL_DMA_IRQHandler+0x156>
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	f003 0308 	and.w	r3, r3, #8
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d025      	beq.n	8003aa6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 020e 	bic.w	r2, r2, #14
 8003a68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a6e:	f003 021c 	and.w	r2, r3, #28
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a76:	2101      	movs	r1, #1
 8003a78:	fa01 f202 	lsl.w	r2, r1, r2
 8003a7c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d004      	beq.n	8003aa6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003aa4:	bf00      	nop
 8003aa6:	bf00      	nop
}
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b083      	sub	sp, #12
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003abc:	b2db      	uxtb	r3, r3
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b085      	sub	sp, #20
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	60f8      	str	r0, [r7, #12]
 8003ad2:	60b9      	str	r1, [r7, #8]
 8003ad4:	607a      	str	r2, [r7, #4]
 8003ad6:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003ae0:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d004      	beq.n	8003af4 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003af2:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af8:	f003 021c 	and.w	r2, r3, #28
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b00:	2101      	movs	r1, #1
 8003b02:	fa01 f202 	lsl.w	r2, r1, r2
 8003b06:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	2b10      	cmp	r3, #16
 8003b16:	d108      	bne.n	8003b2a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b28:	e007      	b.n	8003b3a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	60da      	str	r2, [r3, #12]
}
 8003b3a:	bf00      	nop
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
	...

08003b48 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	461a      	mov	r2, r3
 8003b56:	4b17      	ldr	r3, [pc, #92]	@ (8003bb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d80a      	bhi.n	8003b72 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b60:	089b      	lsrs	r3, r3, #2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b68:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6493      	str	r3, [r2, #72]	@ 0x48
 8003b70:	e007      	b.n	8003b82 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b76:	089b      	lsrs	r3, r3, #2
 8003b78:	009a      	lsls	r2, r3, #2
 8003b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8003bb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003b7c:	4413      	add	r3, r2
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	3b08      	subs	r3, #8
 8003b8a:	4a0c      	ldr	r2, [pc, #48]	@ (8003bbc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b90:	091b      	lsrs	r3, r3, #4
 8003b92:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a0a      	ldr	r2, [pc, #40]	@ (8003bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003b98:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f003 031f 	and.w	r3, r3, #31
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	409a      	lsls	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003ba8:	bf00      	nop
 8003baa:	3714      	adds	r7, #20
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	40020407 	.word	0x40020407
 8003bb8:	4002081c 	.word	0x4002081c
 8003bbc:	cccccccd 	.word	0xcccccccd
 8003bc0:	40020880 	.word	0x40020880

08003bc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bd4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8003c08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003bda:	4413      	add	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	461a      	mov	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a09      	ldr	r2, [pc, #36]	@ (8003c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003be8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	3b01      	subs	r3, #1
 8003bee:	f003 0303 	and.w	r3, r3, #3
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	409a      	lsls	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003bfa:	bf00      	nop
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	1000823f 	.word	0x1000823f
 8003c0c:	40020940 	.word	0x40020940

08003c10 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b087      	sub	sp, #28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c1e:	e14c      	b.n	8003eba <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	2101      	movs	r1, #1
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 813e 	beq.w	8003eb4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f003 0303 	and.w	r3, r3, #3
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d005      	beq.n	8003c50 <HAL_GPIO_Init+0x40>
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f003 0303 	and.w	r3, r3, #3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d130      	bne.n	8003cb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	2203      	movs	r2, #3
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	43db      	mvns	r3, r3
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	4013      	ands	r3, r2
 8003c66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	68da      	ldr	r2, [r3, #12]
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c86:	2201      	movs	r2, #1
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8e:	43db      	mvns	r3, r3
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	4013      	ands	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	091b      	lsrs	r3, r3, #4
 8003c9c:	f003 0201 	and.w	r2, r3, #1
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f003 0303 	and.w	r3, r3, #3
 8003cba:	2b03      	cmp	r3, #3
 8003cbc:	d017      	beq.n	8003cee <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	2203      	movs	r2, #3
 8003cca:	fa02 f303 	lsl.w	r3, r2, r3
 8003cce:	43db      	mvns	r3, r3
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	689a      	ldr	r2, [r3, #8]
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f003 0303 	and.w	r3, r3, #3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d123      	bne.n	8003d42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	08da      	lsrs	r2, r3, #3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	3208      	adds	r2, #8
 8003d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	f003 0307 	and.w	r3, r3, #7
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	220f      	movs	r2, #15
 8003d12:	fa02 f303 	lsl.w	r3, r2, r3
 8003d16:	43db      	mvns	r3, r3
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	691a      	ldr	r2, [r3, #16]
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	08da      	lsrs	r2, r3, #3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3208      	adds	r2, #8
 8003d3c:	6939      	ldr	r1, [r7, #16]
 8003d3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	2203      	movs	r2, #3
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	43db      	mvns	r3, r3
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	4013      	ands	r3, r2
 8003d58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f003 0203 	and.w	r2, r3, #3
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 8098 	beq.w	8003eb4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003d84:	4a54      	ldr	r2, [pc, #336]	@ (8003ed8 <HAL_GPIO_Init+0x2c8>)
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	089b      	lsrs	r3, r3, #2
 8003d8a:	3302      	adds	r3, #2
 8003d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f003 0303 	and.w	r3, r3, #3
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	220f      	movs	r2, #15
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	43db      	mvns	r3, r3
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4013      	ands	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003dae:	d019      	beq.n	8003de4 <HAL_GPIO_Init+0x1d4>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a4a      	ldr	r2, [pc, #296]	@ (8003edc <HAL_GPIO_Init+0x2cc>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d013      	beq.n	8003de0 <HAL_GPIO_Init+0x1d0>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a49      	ldr	r2, [pc, #292]	@ (8003ee0 <HAL_GPIO_Init+0x2d0>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d00d      	beq.n	8003ddc <HAL_GPIO_Init+0x1cc>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a48      	ldr	r2, [pc, #288]	@ (8003ee4 <HAL_GPIO_Init+0x2d4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d007      	beq.n	8003dd8 <HAL_GPIO_Init+0x1c8>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a47      	ldr	r2, [pc, #284]	@ (8003ee8 <HAL_GPIO_Init+0x2d8>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d101      	bne.n	8003dd4 <HAL_GPIO_Init+0x1c4>
 8003dd0:	2304      	movs	r3, #4
 8003dd2:	e008      	b.n	8003de6 <HAL_GPIO_Init+0x1d6>
 8003dd4:	2307      	movs	r3, #7
 8003dd6:	e006      	b.n	8003de6 <HAL_GPIO_Init+0x1d6>
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e004      	b.n	8003de6 <HAL_GPIO_Init+0x1d6>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	e002      	b.n	8003de6 <HAL_GPIO_Init+0x1d6>
 8003de0:	2301      	movs	r3, #1
 8003de2:	e000      	b.n	8003de6 <HAL_GPIO_Init+0x1d6>
 8003de4:	2300      	movs	r3, #0
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	f002 0203 	and.w	r2, r2, #3
 8003dec:	0092      	lsls	r2, r2, #2
 8003dee:	4093      	lsls	r3, r2
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003df6:	4938      	ldr	r1, [pc, #224]	@ (8003ed8 <HAL_GPIO_Init+0x2c8>)
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	089b      	lsrs	r3, r3, #2
 8003dfc:	3302      	adds	r3, #2
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e04:	4b39      	ldr	r3, [pc, #228]	@ (8003eec <HAL_GPIO_Init+0x2dc>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	4013      	ands	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e28:	4a30      	ldr	r2, [pc, #192]	@ (8003eec <HAL_GPIO_Init+0x2dc>)
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003e2e:	4b2f      	ldr	r3, [pc, #188]	@ (8003eec <HAL_GPIO_Init+0x2dc>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	43db      	mvns	r3, r3
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e52:	4a26      	ldr	r2, [pc, #152]	@ (8003eec <HAL_GPIO_Init+0x2dc>)
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003e58:	4b24      	ldr	r3, [pc, #144]	@ (8003eec <HAL_GPIO_Init+0x2dc>)
 8003e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	43db      	mvns	r3, r3
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	4013      	ands	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e7e:	4a1b      	ldr	r2, [pc, #108]	@ (8003eec <HAL_GPIO_Init+0x2dc>)
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8003e86:	4b19      	ldr	r3, [pc, #100]	@ (8003eec <HAL_GPIO_Init+0x2dc>)
 8003e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	43db      	mvns	r3, r3
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	4013      	ands	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d003      	beq.n	8003eac <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003eac:	4a0f      	ldr	r2, [pc, #60]	@ (8003eec <HAL_GPIO_Init+0x2dc>)
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f47f aeab 	bne.w	8003c20 <HAL_GPIO_Init+0x10>
  }
}
 8003eca:	bf00      	nop
 8003ecc:	bf00      	nop
 8003ece:	371c      	adds	r7, #28
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	40010000 	.word	0x40010000
 8003edc:	48000400 	.word	0x48000400
 8003ee0:	48000800 	.word	0x48000800
 8003ee4:	48000c00 	.word	0x48000c00
 8003ee8:	48001000 	.word	0x48001000
 8003eec:	58000800 	.word	0x58000800

08003ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	460b      	mov	r3, r1
 8003efa:	807b      	strh	r3, [r7, #2]
 8003efc:	4613      	mov	r3, r2
 8003efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f00:	787b      	ldrb	r3, [r7, #1]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f06:	887a      	ldrh	r2, [r7, #2]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f0c:	e002      	b.n	8003f14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f0e:	887a      	ldrh	r2, [r7, #2]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	460b      	mov	r3, r1
 8003f2a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f32:	887a      	ldrh	r2, [r7, #2]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4013      	ands	r3, r2
 8003f38:	041a      	lsls	r2, r3, #16
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	43d9      	mvns	r1, r3
 8003f3e:	887b      	ldrh	r3, [r7, #2]
 8003f40:	400b      	ands	r3, r1
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	619a      	str	r2, [r3, #24]
}
 8003f48:	bf00      	nop
 8003f4a:	3714      	adds	r7, #20
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f5e:	4b08      	ldr	r3, [pc, #32]	@ (8003f80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	88fb      	ldrh	r3, [r7, #6]
 8003f64:	4013      	ands	r3, r2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d006      	beq.n	8003f78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f6a:	4a05      	ldr	r2, [pc, #20]	@ (8003f80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f6c:	88fb      	ldrh	r3, [r7, #6]
 8003f6e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f70:	88fb      	ldrh	r3, [r7, #6]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 f806 	bl	8003f84 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f78:	bf00      	nop
 8003f7a:	3708      	adds	r7, #8
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	58000800 	.word	0x58000800

08003f84 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b082      	sub	sp, #8
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e08d      	b.n	80040c8 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d106      	bne.n	8003fc6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7fd fafd 	bl	80015c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2224      	movs	r2, #36	@ 0x24
 8003fca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 0201 	bic.w	r2, r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003fea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689a      	ldr	r2, [r3, #8]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ffa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d107      	bne.n	8004014 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004010:	609a      	str	r2, [r3, #8]
 8004012:	e006      	b.n	8004022 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689a      	ldr	r2, [r3, #8]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004020:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	2b02      	cmp	r3, #2
 8004028:	d108      	bne.n	800403c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004038:	605a      	str	r2, [r3, #4]
 800403a:	e007      	b.n	800404c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800404a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	6812      	ldr	r2, [r2, #0]
 8004056:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800405a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800405e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68da      	ldr	r2, [r3, #12]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800406e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	691a      	ldr	r2, [r3, #16]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	69d9      	ldr	r1, [r3, #28]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1a      	ldr	r2, [r3, #32]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f042 0201 	orr.w	r2, r2, #1
 80040a8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3708      	adds	r7, #8
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040f4:	68ba      	ldr	r2, [r7, #8]
 80040f6:	68f9      	ldr	r1, [r7, #12]
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	4798      	blx	r3
  }
}
 80040fc:	bf00      	nop
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	0a1b      	lsrs	r3, r3, #8
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b00      	cmp	r3, #0
 8004126:	d010      	beq.n	800414a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	09db      	lsrs	r3, r3, #7
 800412c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00a      	beq.n	800414a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004138:	f043 0201 	orr.w	r2, r3, #1
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004148:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	0a9b      	lsrs	r3, r3, #10
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d010      	beq.n	8004178 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	09db      	lsrs	r3, r3, #7
 800415a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004166:	f043 0208 	orr.w	r2, r3, #8
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004176:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	0a5b      	lsrs	r3, r3, #9
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b00      	cmp	r3, #0
 8004182:	d010      	beq.n	80041a6 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	09db      	lsrs	r3, r3, #7
 8004188:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00a      	beq.n	80041a6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004194:	f043 0202 	orr.w	r2, r3, #2
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041a4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041aa:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f003 030b 	and.w	r3, r3, #11
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80041b6:	68f9      	ldr	r1, [r7, #12]
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 fbeb 	bl	8004994 <I2C_ITError>
  }
}
 80041be:	bf00      	nop
 80041c0:	3718      	adds	r7, #24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b083      	sub	sp, #12
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80041ce:	bf00      	nop
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041da:	b480      	push	{r7}
 80041dc:	b083      	sub	sp, #12
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80041e2:	bf00      	nop
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b083      	sub	sp, #12
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
 80041f6:	460b      	mov	r3, r1
 80041f8:	70fb      	strb	r3, [r7, #3]
 80041fa:	4613      	mov	r3, r2
 80041fc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80041fe:	bf00      	nop
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800420a:	b480      	push	{r7}
 800420c:	b083      	sub	sp, #12
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800421e:	b480      	push	{r7}
 8004220:	b083      	sub	sp, #12
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004232:	b480      	push	{r7}
 8004234:	b083      	sub	sp, #12
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800423a:	bf00      	nop
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr

08004246 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b086      	sub	sp, #24
 800424a:	af00      	add	r7, sp, #0
 800424c:	60f8      	str	r0, [r7, #12]
 800424e:	60b9      	str	r1, [r7, #8]
 8004250:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004256:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004262:	2b01      	cmp	r3, #1
 8004264:	d101      	bne.n	800426a <I2C_Slave_ISR_IT+0x24>
 8004266:	2302      	movs	r3, #2
 8004268:	e0ed      	b.n	8004446 <I2C_Slave_ISR_IT+0x200>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	095b      	lsrs	r3, r3, #5
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00a      	beq.n	8004294 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	095b      	lsrs	r3, r3, #5
 8004282:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004286:	2b00      	cmp	r3, #0
 8004288:	d004      	beq.n	8004294 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800428a:	6939      	ldr	r1, [r7, #16]
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f000 f9c1 	bl	8004614 <I2C_ITSlaveCplt>
 8004292:	e0d3      	b.n	800443c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	091b      	lsrs	r3, r3, #4
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b00      	cmp	r3, #0
 800429e:	d04d      	beq.n	800433c <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	091b      	lsrs	r3, r3, #4
 80042a4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d047      	beq.n	800433c <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d128      	bne.n	8004308 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b28      	cmp	r3, #40	@ 0x28
 80042c0:	d108      	bne.n	80042d4 <I2C_Slave_ISR_IT+0x8e>
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80042c8:	d104      	bne.n	80042d4 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80042ca:	6939      	ldr	r1, [r7, #16]
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f000 fb0b 	bl	80048e8 <I2C_ITListenCplt>
 80042d2:	e032      	b.n	800433a <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b29      	cmp	r3, #41	@ 0x29
 80042de:	d10e      	bne.n	80042fe <I2C_Slave_ISR_IT+0xb8>
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80042e6:	d00a      	beq.n	80042fe <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2210      	movs	r2, #16
 80042ee:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 fc66 	bl	8004bc2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 f92d 	bl	8004556 <I2C_ITSlaveSeqCplt>
 80042fc:	e01d      	b.n	800433a <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2210      	movs	r2, #16
 8004304:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004306:	e096      	b.n	8004436 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2210      	movs	r2, #16
 800430e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004314:	f043 0204 	orr.w	r2, r3, #4
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d004      	beq.n	800432c <I2C_Slave_ISR_IT+0xe6>
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004328:	f040 8085 	bne.w	8004436 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004330:	4619      	mov	r1, r3
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 fb2e 	bl	8004994 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004338:	e07d      	b.n	8004436 <I2C_Slave_ISR_IT+0x1f0>
 800433a:	e07c      	b.n	8004436 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	089b      	lsrs	r3, r3, #2
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b00      	cmp	r3, #0
 8004346:	d030      	beq.n	80043aa <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	089b      	lsrs	r3, r3, #2
 800434c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004350:	2b00      	cmp	r3, #0
 8004352:	d02a      	beq.n	80043aa <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004358:	b29b      	uxth	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d018      	beq.n	8004390 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004368:	b2d2      	uxtb	r2, r2
 800436a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004370:	1c5a      	adds	r2, r3, #1
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800437a:	3b01      	subs	r3, #1
 800437c:	b29a      	uxth	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004386:	b29b      	uxth	r3, r3
 8004388:	3b01      	subs	r3, #1
 800438a:	b29a      	uxth	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004394:	b29b      	uxth	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d14f      	bne.n	800443a <I2C_Slave_ISR_IT+0x1f4>
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80043a0:	d04b      	beq.n	800443a <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f000 f8d7 	bl	8004556 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80043a8:	e047      	b.n	800443a <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	08db      	lsrs	r3, r3, #3
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00a      	beq.n	80043cc <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	08db      	lsrs	r3, r3, #3
 80043ba:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d004      	beq.n	80043cc <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80043c2:	6939      	ldr	r1, [r7, #16]
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f000 f842 	bl	800444e <I2C_ITAddrCplt>
 80043ca:	e037      	b.n	800443c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	085b      	lsrs	r3, r3, #1
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d031      	beq.n	800443c <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	085b      	lsrs	r3, r3, #1
 80043dc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d02b      	beq.n	800443c <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d018      	beq.n	8004420 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f2:	781a      	ldrb	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fe:	1c5a      	adds	r2, r3, #1
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004408:	b29b      	uxth	r3, r3
 800440a:	3b01      	subs	r3, #1
 800440c:	b29a      	uxth	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004416:	3b01      	subs	r3, #1
 8004418:	b29a      	uxth	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800441e:	e00d      	b.n	800443c <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004426:	d002      	beq.n	800442e <I2C_Slave_ISR_IT+0x1e8>
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d106      	bne.n	800443c <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f000 f891 	bl	8004556 <I2C_ITSlaveSeqCplt>
 8004434:	e002      	b.n	800443c <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8004436:	bf00      	nop
 8004438:	e000      	b.n	800443c <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800443a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3718      	adds	r7, #24
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b084      	sub	sp, #16
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800445e:	b2db      	uxtb	r3, r3
 8004460:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004464:	2b28      	cmp	r3, #40	@ 0x28
 8004466:	d16a      	bne.n	800453e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	0c1b      	lsrs	r3, r3, #16
 8004470:	b2db      	uxtb	r3, r3
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	0c1b      	lsrs	r3, r3, #16
 8004480:	b29b      	uxth	r3, r3
 8004482:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004486:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	b29b      	uxth	r3, r3
 8004490:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004494:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	b29b      	uxth	r3, r3
 800449e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80044a2:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d138      	bne.n	800451e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80044ac:	897b      	ldrh	r3, [r7, #10]
 80044ae:	09db      	lsrs	r3, r3, #7
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	89bb      	ldrh	r3, [r7, #12]
 80044b4:	4053      	eors	r3, r2
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	f003 0306 	and.w	r3, r3, #6
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d11c      	bne.n	80044fa <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80044c0:	897b      	ldrh	r3, [r7, #10]
 80044c2:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044c8:	1c5a      	adds	r2, r3, #1
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d13b      	bne.n	800454e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2208      	movs	r2, #8
 80044e2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80044ec:	89ba      	ldrh	r2, [r7, #12]
 80044ee:	7bfb      	ldrb	r3, [r7, #15]
 80044f0:	4619      	mov	r1, r3
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7ff fe7b 	bl	80041ee <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80044f8:	e029      	b.n	800454e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80044fa:	893b      	ldrh	r3, [r7, #8]
 80044fc:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80044fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 fb9f 	bl	8004c46 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004510:	89ba      	ldrh	r2, [r7, #12]
 8004512:	7bfb      	ldrb	r3, [r7, #15]
 8004514:	4619      	mov	r1, r3
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7ff fe69 	bl	80041ee <HAL_I2C_AddrCallback>
}
 800451c:	e017      	b.n	800454e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800451e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 fb8f 	bl	8004c46 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004530:	89ba      	ldrh	r2, [r7, #12]
 8004532:	7bfb      	ldrb	r3, [r7, #15]
 8004534:	4619      	mov	r1, r3
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7ff fe59 	bl	80041ee <HAL_I2C_AddrCallback>
}
 800453c:	e007      	b.n	800454e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2208      	movs	r2, #8
 8004544:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800454e:	bf00      	nop
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b084      	sub	sp, #16
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	0b9b      	lsrs	r3, r3, #14
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d008      	beq.n	800458c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	e00d      	b.n	80045a8 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	0bdb      	lsrs	r3, r3, #15
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b00      	cmp	r3, #0
 8004596:	d007      	beq.n	80045a8 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80045a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b29      	cmp	r3, #41	@ 0x29
 80045b2:	d112      	bne.n	80045da <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2228      	movs	r2, #40	@ 0x28
 80045b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2221      	movs	r2, #33	@ 0x21
 80045c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80045c2:	2101      	movs	r1, #1
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 fb3e 	bl	8004c46 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7ff fdf7 	bl	80041c6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80045d8:	e017      	b.n	800460a <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80045e4:	d111      	bne.n	800460a <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2228      	movs	r2, #40	@ 0x28
 80045ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2222      	movs	r2, #34	@ 0x22
 80045f2:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80045f4:	2102      	movs	r1, #2
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 fb25 	bl	8004c46 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7ff fde8 	bl	80041da <HAL_I2C_SlaveRxCpltCallback>
}
 800460a:	bf00      	nop
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
	...

08004614 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800462e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004636:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2220      	movs	r2, #32
 800463e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004640:	7afb      	ldrb	r3, [r7, #11]
 8004642:	2b21      	cmp	r3, #33	@ 0x21
 8004644:	d002      	beq.n	800464c <I2C_ITSlaveCplt+0x38>
 8004646:	7afb      	ldrb	r3, [r7, #11]
 8004648:	2b29      	cmp	r3, #41	@ 0x29
 800464a:	d108      	bne.n	800465e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800464c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 faf8 	bl	8004c46 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2221      	movs	r2, #33	@ 0x21
 800465a:	631a      	str	r2, [r3, #48]	@ 0x30
 800465c:	e019      	b.n	8004692 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800465e:	7afb      	ldrb	r3, [r7, #11]
 8004660:	2b22      	cmp	r3, #34	@ 0x22
 8004662:	d002      	beq.n	800466a <I2C_ITSlaveCplt+0x56>
 8004664:	7afb      	ldrb	r3, [r7, #11]
 8004666:	2b2a      	cmp	r3, #42	@ 0x2a
 8004668:	d108      	bne.n	800467c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800466a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 fae9 	bl	8004c46 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2222      	movs	r2, #34	@ 0x22
 8004678:	631a      	str	r2, [r3, #48]	@ 0x30
 800467a:	e00a      	b.n	8004692 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800467c:	7afb      	ldrb	r3, [r7, #11]
 800467e:	2b28      	cmp	r3, #40	@ 0x28
 8004680:	d107      	bne.n	8004692 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004682:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 fadd 	bl	8004c46 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80046a0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6859      	ldr	r1, [r3, #4]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	4b8c      	ldr	r3, [pc, #560]	@ (80048e0 <I2C_ITSlaveCplt+0x2cc>)
 80046ae:	400b      	ands	r3, r1
 80046b0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 fa85 	bl	8004bc2 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	0b9b      	lsrs	r3, r3, #14
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d013      	beq.n	80046ec <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80046d2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d020      	beq.n	800471e <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80046ea:	e018      	b.n	800471e <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	0bdb      	lsrs	r3, r3, #15
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d012      	beq.n	800471e <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004706:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800470c:	2b00      	cmp	r3, #0
 800470e:	d006      	beq.n	800471e <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	b29a      	uxth	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	089b      	lsrs	r3, r3, #2
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b00      	cmp	r3, #0
 8004728:	d020      	beq.n	800476c <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f023 0304 	bic.w	r3, r3, #4
 8004730:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473c:	b2d2      	uxtb	r2, r2
 800473e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004744:	1c5a      	adds	r2, r3, #1
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00c      	beq.n	800476c <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004756:	3b01      	subs	r3, #1
 8004758:	b29a      	uxth	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004762:	b29b      	uxth	r3, r3
 8004764:	3b01      	subs	r3, #1
 8004766:	b29a      	uxth	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004770:	b29b      	uxth	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d005      	beq.n	8004782 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800477a:	f043 0204 	orr.w	r2, r3, #4
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	091b      	lsrs	r3, r3, #4
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d04a      	beq.n	8004824 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	091b      	lsrs	r3, r3, #4
 8004792:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004796:	2b00      	cmp	r3, #0
 8004798:	d044      	beq.n	8004824 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800479e:	b29b      	uxth	r3, r3
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d128      	bne.n	80047f6 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b28      	cmp	r3, #40	@ 0x28
 80047ae:	d108      	bne.n	80047c2 <I2C_ITSlaveCplt+0x1ae>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80047b6:	d104      	bne.n	80047c2 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80047b8:	6979      	ldr	r1, [r7, #20]
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f894 	bl	80048e8 <I2C_ITListenCplt>
 80047c0:	e030      	b.n	8004824 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b29      	cmp	r3, #41	@ 0x29
 80047cc:	d10e      	bne.n	80047ec <I2C_ITSlaveCplt+0x1d8>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80047d4:	d00a      	beq.n	80047ec <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2210      	movs	r2, #16
 80047dc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f9ef 	bl	8004bc2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7ff feb6 	bl	8004556 <I2C_ITSlaveSeqCplt>
 80047ea:	e01b      	b.n	8004824 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2210      	movs	r2, #16
 80047f2:	61da      	str	r2, [r3, #28]
 80047f4:	e016      	b.n	8004824 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2210      	movs	r2, #16
 80047fc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004802:	f043 0204 	orr.w	r2, r3, #4
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d003      	beq.n	8004818 <I2C_ITSlaveCplt+0x204>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004816:	d105      	bne.n	8004824 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800481c:	4619      	mov	r1, r3
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 f8b8 	bl	8004994 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004836:	2b00      	cmp	r3, #0
 8004838:	d010      	beq.n	800485c <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800483e:	4619      	mov	r1, r3
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 f8a7 	bl	8004994 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b28      	cmp	r3, #40	@ 0x28
 8004850:	d141      	bne.n	80048d6 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004852:	6979      	ldr	r1, [r7, #20]
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 f847 	bl	80048e8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800485a:	e03c      	b.n	80048d6 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004860:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004864:	d014      	beq.n	8004890 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7ff fe75 	bl	8004556 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a1d      	ldr	r2, [pc, #116]	@ (80048e4 <I2C_ITSlaveCplt+0x2d0>)
 8004870:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2220      	movs	r2, #32
 8004876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f7ff fcbe 	bl	800420a <HAL_I2C_ListenCpltCallback>
}
 800488e:	e022      	b.n	80048d6 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b22      	cmp	r3, #34	@ 0x22
 800489a:	d10e      	bne.n	80048ba <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2220      	movs	r2, #32
 80048a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7ff fc91 	bl	80041da <HAL_I2C_SlaveRxCpltCallback>
}
 80048b8:	e00d      	b.n	80048d6 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2220      	movs	r2, #32
 80048be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f7ff fc78 	bl	80041c6 <HAL_I2C_SlaveTxCpltCallback>
}
 80048d6:	bf00      	nop
 80048d8:	3718      	adds	r7, #24
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	fe00e800 	.word	0xfe00e800
 80048e4:	ffff0000 	.word	0xffff0000

080048e8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a26      	ldr	r2, [pc, #152]	@ (8004990 <I2C_ITListenCplt+0xa8>)
 80048f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2220      	movs	r2, #32
 8004902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	089b      	lsrs	r3, r3, #2
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	2b00      	cmp	r3, #0
 800491e:	d022      	beq.n	8004966 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492a:	b2d2      	uxtb	r2, r2
 800492c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004932:	1c5a      	adds	r2, r3, #1
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800493c:	2b00      	cmp	r3, #0
 800493e:	d012      	beq.n	8004966 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004944:	3b01      	subs	r3, #1
 8004946:	b29a      	uxth	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004950:	b29b      	uxth	r3, r3
 8004952:	3b01      	subs	r3, #1
 8004954:	b29a      	uxth	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800495e:	f043 0204 	orr.w	r2, r3, #4
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004966:	f248 0103 	movw	r1, #32771	@ 0x8003
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f96b 	bl	8004c46 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2210      	movs	r2, #16
 8004976:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f7ff fc42 	bl	800420a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004986:	bf00      	nop
 8004988:	3708      	adds	r7, #8
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	ffff0000 	.word	0xffff0000

08004994 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049a4:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a6d      	ldr	r2, [pc, #436]	@ (8004b68 <I2C_ITError+0x1d4>)
 80049b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	431a      	orrs	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
 80049c8:	2b28      	cmp	r3, #40	@ 0x28
 80049ca:	d005      	beq.n	80049d8 <I2C_ITError+0x44>
 80049cc:	7bfb      	ldrb	r3, [r7, #15]
 80049ce:	2b29      	cmp	r3, #41	@ 0x29
 80049d0:	d002      	beq.n	80049d8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80049d2:	7bfb      	ldrb	r3, [r7, #15]
 80049d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80049d6:	d10b      	bne.n	80049f0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80049d8:	2103      	movs	r1, #3
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f933 	bl	8004c46 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2228      	movs	r2, #40	@ 0x28
 80049e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a60      	ldr	r2, [pc, #384]	@ (8004b6c <I2C_ITError+0x1d8>)
 80049ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80049ee:	e030      	b.n	8004a52 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80049f0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 f926 	bl	8004c46 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f8e1 	bl	8004bc2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	2b60      	cmp	r3, #96	@ 0x60
 8004a0a:	d01f      	beq.n	8004a4c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	f003 0320 	and.w	r3, r3, #32
 8004a1e:	2b20      	cmp	r3, #32
 8004a20:	d114      	bne.n	8004a4c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	f003 0310 	and.w	r3, r3, #16
 8004a2c:	2b10      	cmp	r3, #16
 8004a2e:	d109      	bne.n	8004a44 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2210      	movs	r2, #16
 8004a36:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a3c:	f043 0204 	orr.w	r2, r3, #4
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a56:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d039      	beq.n	8004ad4 <I2C_ITError+0x140>
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	2b11      	cmp	r3, #17
 8004a64:	d002      	beq.n	8004a6c <I2C_ITError+0xd8>
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	2b21      	cmp	r3, #33	@ 0x21
 8004a6a:	d133      	bne.n	8004ad4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a7a:	d107      	bne.n	8004a8c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004a8a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7ff f80c 	bl	8003aae <HAL_DMA_GetState>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d017      	beq.n	8004acc <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa0:	4a33      	ldr	r2, [pc, #204]	@ (8004b70 <I2C_ITError+0x1dc>)
 8004aa2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7fe feee 	bl	8003892 <HAL_DMA_Abort_IT>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d04d      	beq.n	8004b58 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004ac6:	4610      	mov	r0, r2
 8004ac8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004aca:	e045      	b.n	8004b58 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f851 	bl	8004b74 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ad2:	e041      	b.n	8004b58 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d039      	beq.n	8004b50 <I2C_ITError+0x1bc>
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	2b12      	cmp	r3, #18
 8004ae0:	d002      	beq.n	8004ae8 <I2C_ITError+0x154>
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	2b22      	cmp	r3, #34	@ 0x22
 8004ae6:	d133      	bne.n	8004b50 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004af2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004af6:	d107      	bne.n	8004b08 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b06:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7fe ffce 	bl	8003aae <HAL_DMA_GetState>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d017      	beq.n	8004b48 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b1c:	4a14      	ldr	r2, [pc, #80]	@ (8004b70 <I2C_ITError+0x1dc>)
 8004b1e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7fe feb0 	bl	8003892 <HAL_DMA_Abort_IT>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d011      	beq.n	8004b5c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004b42:	4610      	mov	r0, r2
 8004b44:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b46:	e009      	b.n	8004b5c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 f813 	bl	8004b74 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b4e:	e005      	b.n	8004b5c <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f80f 	bl	8004b74 <I2C_TreatErrorCallback>
  }
}
 8004b56:	e002      	b.n	8004b5e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b58:	bf00      	nop
 8004b5a:	e000      	b.n	8004b5e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b5c:	bf00      	nop
}
 8004b5e:	bf00      	nop
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	ffff0000 	.word	0xffff0000
 8004b6c:	08004247 	.word	0x08004247
 8004b70:	08004c0b 	.word	0x08004c0b

08004b74 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b60      	cmp	r3, #96	@ 0x60
 8004b86:	d10e      	bne.n	8004ba6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7ff fb47 	bl	8004232 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ba4:	e009      	b.n	8004bba <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f7ff fb32 	bl	800421e <HAL_I2C_ErrorCallback>
}
 8004bba:	bf00      	nop
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b083      	sub	sp, #12
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d103      	bne.n	8004be0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d007      	beq.n	8004bfe <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	699a      	ldr	r2, [r3, #24]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f042 0201 	orr.w	r2, r2, #1
 8004bfc:	619a      	str	r2, [r3, #24]
  }
}
 8004bfe:	bf00      	nop
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b084      	sub	sp, #16
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c16:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d003      	beq.n	8004c28 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c24:	2200      	movs	r2, #0
 8004c26:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d003      	beq.n	8004c38 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c34:	2200      	movs	r2, #0
 8004c36:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f7ff ff9b 	bl	8004b74 <I2C_TreatErrorCallback>
}
 8004c3e:	bf00      	nop
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b085      	sub	sp, #20
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
 8004c4e:	460b      	mov	r3, r1
 8004c50:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004c56:	887b      	ldrh	r3, [r7, #2]
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00f      	beq.n	8004c80 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8004c66:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004c74:	2b28      	cmp	r3, #40	@ 0x28
 8004c76:	d003      	beq.n	8004c80 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004c7e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004c80:	887b      	ldrh	r3, [r7, #2]
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00f      	beq.n	8004caa <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8004c90:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004c9e:	2b28      	cmp	r3, #40	@ 0x28
 8004ca0:	d003      	beq.n	8004caa <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004ca8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004caa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	da03      	bge.n	8004cba <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004cb8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004cba:	887b      	ldrh	r3, [r7, #2]
 8004cbc:	2b10      	cmp	r3, #16
 8004cbe:	d103      	bne.n	8004cc8 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004cc6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004cc8:	887b      	ldrh	r3, [r7, #2]
 8004cca:	2b20      	cmp	r3, #32
 8004ccc:	d103      	bne.n	8004cd6 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f043 0320 	orr.w	r3, r3, #32
 8004cd4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004cd6:	887b      	ldrh	r3, [r7, #2]
 8004cd8:	2b40      	cmp	r3, #64	@ 0x40
 8004cda:	d103      	bne.n	8004ce4 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ce2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6819      	ldr	r1, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	43da      	mvns	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	400a      	ands	r2, r1
 8004cf4:	601a      	str	r2, [r3, #0]
}
 8004cf6:	bf00      	nop
 8004cf8:	3714      	adds	r7, #20
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
 8004d0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2b20      	cmp	r3, #32
 8004d16:	d138      	bne.n	8004d8a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d101      	bne.n	8004d26 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d22:	2302      	movs	r3, #2
 8004d24:	e032      	b.n	8004d8c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2224      	movs	r2, #36	@ 0x24
 8004d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 0201 	bic.w	r2, r2, #1
 8004d44:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004d54:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	6819      	ldr	r1, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f042 0201 	orr.w	r2, r2, #1
 8004d74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d86:	2300      	movs	r3, #0
 8004d88:	e000      	b.n	8004d8c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d8a:	2302      	movs	r3, #2
  }
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b20      	cmp	r3, #32
 8004dac:	d139      	bne.n	8004e22 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d101      	bne.n	8004dbc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004db8:	2302      	movs	r3, #2
 8004dba:	e033      	b.n	8004e24 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2224      	movs	r2, #36	@ 0x24
 8004dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 0201 	bic.w	r2, r2, #1
 8004dda:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004dea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	021b      	lsls	r3, r3, #8
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f042 0201 	orr.w	r2, r2, #1
 8004e0c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2220      	movs	r2, #32
 8004e12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	e000      	b.n	8004e24 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004e22:	2302      	movs	r3, #2
  }
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3714      	adds	r7, #20
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e0c0      	b.n	8004fc4 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d106      	bne.n	8004e5c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f009 f9ac 	bl	800e1b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2203      	movs	r2, #3
 8004e60:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f004 fc7f 	bl	800976c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e6e:	2300      	movs	r3, #0
 8004e70:	73fb      	strb	r3, [r7, #15]
 8004e72:	e03e      	b.n	8004ef2 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004e74:	7bfa      	ldrb	r2, [r7, #15]
 8004e76:	6879      	ldr	r1, [r7, #4]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4413      	add	r3, r2
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	440b      	add	r3, r1
 8004e82:	3311      	adds	r3, #17
 8004e84:	2201      	movs	r2, #1
 8004e86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004e88:	7bfa      	ldrb	r2, [r7, #15]
 8004e8a:	6879      	ldr	r1, [r7, #4]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4413      	add	r3, r2
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	440b      	add	r3, r1
 8004e96:	3310      	adds	r3, #16
 8004e98:	7bfa      	ldrb	r2, [r7, #15]
 8004e9a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004e9c:	7bfa      	ldrb	r2, [r7, #15]
 8004e9e:	6879      	ldr	r1, [r7, #4]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	4413      	add	r3, r2
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	440b      	add	r3, r1
 8004eaa:	3313      	adds	r3, #19
 8004eac:	2200      	movs	r2, #0
 8004eae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004eb0:	7bfa      	ldrb	r2, [r7, #15]
 8004eb2:	6879      	ldr	r1, [r7, #4]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4413      	add	r3, r2
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	440b      	add	r3, r1
 8004ebe:	3320      	adds	r3, #32
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004ec4:	7bfa      	ldrb	r2, [r7, #15]
 8004ec6:	6879      	ldr	r1, [r7, #4]
 8004ec8:	4613      	mov	r3, r2
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	4413      	add	r3, r2
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	440b      	add	r3, r1
 8004ed2:	3324      	adds	r3, #36	@ 0x24
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004ed8:	7bfb      	ldrb	r3, [r7, #15]
 8004eda:	6879      	ldr	r1, [r7, #4]
 8004edc:	1c5a      	adds	r2, r3, #1
 8004ede:	4613      	mov	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4413      	add	r3, r2
 8004ee4:	00db      	lsls	r3, r3, #3
 8004ee6:	440b      	add	r3, r1
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004eec:	7bfb      	ldrb	r3, [r7, #15]
 8004eee:	3301      	adds	r3, #1
 8004ef0:	73fb      	strb	r3, [r7, #15]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	791b      	ldrb	r3, [r3, #4]
 8004ef6:	7bfa      	ldrb	r2, [r7, #15]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d3bb      	bcc.n	8004e74 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004efc:	2300      	movs	r3, #0
 8004efe:	73fb      	strb	r3, [r7, #15]
 8004f00:	e044      	b.n	8004f8c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004f02:	7bfa      	ldrb	r2, [r7, #15]
 8004f04:	6879      	ldr	r1, [r7, #4]
 8004f06:	4613      	mov	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4413      	add	r3, r2
 8004f0c:	00db      	lsls	r3, r3, #3
 8004f0e:	440b      	add	r3, r1
 8004f10:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8004f14:	2200      	movs	r2, #0
 8004f16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004f18:	7bfa      	ldrb	r2, [r7, #15]
 8004f1a:	6879      	ldr	r1, [r7, #4]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	440b      	add	r3, r1
 8004f26:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004f2a:	7bfa      	ldrb	r2, [r7, #15]
 8004f2c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004f2e:	7bfa      	ldrb	r2, [r7, #15]
 8004f30:	6879      	ldr	r1, [r7, #4]
 8004f32:	4613      	mov	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4413      	add	r3, r2
 8004f38:	00db      	lsls	r3, r3, #3
 8004f3a:	440b      	add	r3, r1
 8004f3c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004f40:	2200      	movs	r2, #0
 8004f42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004f44:	7bfa      	ldrb	r2, [r7, #15]
 8004f46:	6879      	ldr	r1, [r7, #4]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	440b      	add	r3, r1
 8004f52:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004f56:	2200      	movs	r2, #0
 8004f58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004f5a:	7bfa      	ldrb	r2, [r7, #15]
 8004f5c:	6879      	ldr	r1, [r7, #4]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4413      	add	r3, r2
 8004f64:	00db      	lsls	r3, r3, #3
 8004f66:	440b      	add	r3, r1
 8004f68:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004f70:	7bfa      	ldrb	r2, [r7, #15]
 8004f72:	6879      	ldr	r1, [r7, #4]
 8004f74:	4613      	mov	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	00db      	lsls	r3, r3, #3
 8004f7c:	440b      	add	r3, r1
 8004f7e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004f82:	2200      	movs	r2, #0
 8004f84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f86:	7bfb      	ldrb	r3, [r7, #15]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	73fb      	strb	r3, [r7, #15]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	791b      	ldrb	r3, [r3, #4]
 8004f90:	7bfa      	ldrb	r2, [r7, #15]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d3b5      	bcc.n	8004f02 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6818      	ldr	r0, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004fa2:	f004 fbfe 	bl	80097a2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	7a9b      	ldrb	r3, [r3, #10]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d102      	bne.n	8004fc2 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f001 fc40 	bl	8006842 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d101      	bne.n	8004fe2 <HAL_PCD_Start+0x16>
 8004fde:	2302      	movs	r3, #2
 8004fe0:	e012      	b.n	8005008 <HAL_PCD_Start+0x3c>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f004 fba5 	bl	800973e <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f006 fe66 	bl	800bcca <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3708      	adds	r7, #8
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4618      	mov	r0, r3
 800501e:	f006 fe6b 	bl	800bcf8 <USB_ReadInterrupts>
 8005022:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 fb04 	bl	800563c <PCD_EP_ISR_Handler>

    return;
 8005034:	e110      	b.n	8005258 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800503c:	2b00      	cmp	r3, #0
 800503e:	d013      	beq.n	8005068 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005048:	b29a      	uxth	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005052:	b292      	uxth	r2, r2
 8005054:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f009 f940 	bl	800e2de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800505e:	2100      	movs	r1, #0
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f8fc 	bl	800525e <HAL_PCD_SetAddress>

    return;
 8005066:	e0f7      	b.n	8005258 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00c      	beq.n	800508c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800507a:	b29a      	uxth	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005084:	b292      	uxth	r2, r2
 8005086:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800508a:	e0e5      	b.n	8005258 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00c      	beq.n	80050b0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800509e:	b29a      	uxth	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050a8:	b292      	uxth	r2, r2
 80050aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80050ae:	e0d3      	b.n	8005258 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d034      	beq.n	8005124 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 0204 	bic.w	r2, r2, #4
 80050cc:	b292      	uxth	r2, r2
 80050ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80050da:	b29a      	uxth	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f022 0208 	bic.w	r2, r2, #8
 80050e4:	b292      	uxth	r2, r2
 80050e6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d107      	bne.n	8005104 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80050fc:	2100      	movs	r1, #0
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f009 fae2 	bl	800e6c8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f009 f923 	bl	800e350 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005112:	b29a      	uxth	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800511c:	b292      	uxth	r2, r2
 800511e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005122:	e099      	b.n	8005258 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800512a:	2b00      	cmp	r3, #0
 800512c:	d027      	beq.n	800517e <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005136:	b29a      	uxth	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f042 0208 	orr.w	r2, r2, #8
 8005140:	b292      	uxth	r2, r2
 8005142:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800514e:	b29a      	uxth	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005158:	b292      	uxth	r2, r2
 800515a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005166:	b29a      	uxth	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f042 0204 	orr.w	r2, r2, #4
 8005170:	b292      	uxth	r2, r2
 8005172:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f009 f8d0 	bl	800e31c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800517c:	e06c      	b.n	8005258 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005184:	2b00      	cmp	r3, #0
 8005186:	d040      	beq.n	800520a <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005190:	b29a      	uxth	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800519a:	b292      	uxth	r2, r2
 800519c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d12b      	bne.n	8005202 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f042 0204 	orr.w	r2, r2, #4
 80051bc:	b292      	uxth	r2, r2
 80051be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f042 0208 	orr.w	r2, r2, #8
 80051d4:	b292      	uxth	r2, r2
 80051d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	089b      	lsrs	r3, r3, #2
 80051ee:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80051f8:	2101      	movs	r1, #1
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f009 fa64 	bl	800e6c8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8005200:	e02a      	b.n	8005258 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f009 f88a 	bl	800e31c <HAL_PCD_SuspendCallback>
    return;
 8005208:	e026      	b.n	8005258 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00f      	beq.n	8005234 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800521c:	b29a      	uxth	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005226:	b292      	uxth	r2, r2
 8005228:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f009 f848 	bl	800e2c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005232:	e011      	b.n	8005258 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00c      	beq.n	8005258 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005246:	b29a      	uxth	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005250:	b292      	uxth	r2, r2
 8005252:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005256:	bf00      	nop
  }
}
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b082      	sub	sp, #8
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
 8005266:	460b      	mov	r3, r1
 8005268:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005270:	2b01      	cmp	r3, #1
 8005272:	d101      	bne.n	8005278 <HAL_PCD_SetAddress+0x1a>
 8005274:	2302      	movs	r3, #2
 8005276:	e012      	b.n	800529e <HAL_PCD_SetAddress+0x40>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	78fa      	ldrb	r2, [r7, #3]
 8005284:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	78fa      	ldrb	r2, [r7, #3]
 800528c:	4611      	mov	r1, r2
 800528e:	4618      	mov	r0, r3
 8005290:	f006 fd07 	bl	800bca2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3708      	adds	r7, #8
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b084      	sub	sp, #16
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
 80052ae:	4608      	mov	r0, r1
 80052b0:	4611      	mov	r1, r2
 80052b2:	461a      	mov	r2, r3
 80052b4:	4603      	mov	r3, r0
 80052b6:	70fb      	strb	r3, [r7, #3]
 80052b8:	460b      	mov	r3, r1
 80052ba:	803b      	strh	r3, [r7, #0]
 80052bc:	4613      	mov	r3, r2
 80052be:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80052c0:	2300      	movs	r3, #0
 80052c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80052c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	da0e      	bge.n	80052ea <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052cc:	78fb      	ldrb	r3, [r7, #3]
 80052ce:	f003 0207 	and.w	r2, r3, #7
 80052d2:	4613      	mov	r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	4413      	add	r3, r2
 80052d8:	00db      	lsls	r3, r3, #3
 80052da:	3310      	adds	r3, #16
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	4413      	add	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2201      	movs	r2, #1
 80052e6:	705a      	strb	r2, [r3, #1]
 80052e8:	e00e      	b.n	8005308 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052ea:	78fb      	ldrb	r3, [r7, #3]
 80052ec:	f003 0207 	and.w	r2, r3, #7
 80052f0:	4613      	mov	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4413      	add	r3, r2
 80052f6:	00db      	lsls	r3, r3, #3
 80052f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	4413      	add	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005308:	78fb      	ldrb	r3, [r7, #3]
 800530a:	f003 0307 	and.w	r3, r3, #7
 800530e:	b2da      	uxtb	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005314:	883a      	ldrh	r2, [r7, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	78ba      	ldrb	r2, [r7, #2]
 800531e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005320:	78bb      	ldrb	r3, [r7, #2]
 8005322:	2b02      	cmp	r3, #2
 8005324:	d102      	bne.n	800532c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005332:	2b01      	cmp	r3, #1
 8005334:	d101      	bne.n	800533a <HAL_PCD_EP_Open+0x94>
 8005336:	2302      	movs	r3, #2
 8005338:	e00e      	b.n	8005358 <HAL_PCD_EP_Open+0xb2>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68f9      	ldr	r1, [r7, #12]
 8005348:	4618      	mov	r0, r3
 800534a:	f004 fa49 	bl	80097e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8005356:	7afb      	ldrb	r3, [r7, #11]
}
 8005358:	4618      	mov	r0, r3
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	460b      	mov	r3, r1
 800536a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800536c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005370:	2b00      	cmp	r3, #0
 8005372:	da0e      	bge.n	8005392 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005374:	78fb      	ldrb	r3, [r7, #3]
 8005376:	f003 0207 	and.w	r2, r3, #7
 800537a:	4613      	mov	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	4413      	add	r3, r2
 8005380:	00db      	lsls	r3, r3, #3
 8005382:	3310      	adds	r3, #16
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	4413      	add	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2201      	movs	r2, #1
 800538e:	705a      	strb	r2, [r3, #1]
 8005390:	e00e      	b.n	80053b0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005392:	78fb      	ldrb	r3, [r7, #3]
 8005394:	f003 0207 	and.w	r2, r3, #7
 8005398:	4613      	mov	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4413      	add	r3, r2
 800539e:	00db      	lsls	r3, r3, #3
 80053a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	4413      	add	r3, r2
 80053a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80053b0:	78fb      	ldrb	r3, [r7, #3]
 80053b2:	f003 0307 	and.w	r3, r3, #7
 80053b6:	b2da      	uxtb	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d101      	bne.n	80053ca <HAL_PCD_EP_Close+0x6a>
 80053c6:	2302      	movs	r3, #2
 80053c8:	e00e      	b.n	80053e8 <HAL_PCD_EP_Close+0x88>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68f9      	ldr	r1, [r7, #12]
 80053d8:	4618      	mov	r0, r3
 80053da:	f004 fdc5 	bl	8009f68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	607a      	str	r2, [r7, #4]
 80053fa:	603b      	str	r3, [r7, #0]
 80053fc:	460b      	mov	r3, r1
 80053fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005400:	7afb      	ldrb	r3, [r7, #11]
 8005402:	f003 0207 	and.w	r2, r3, #7
 8005406:	4613      	mov	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	00db      	lsls	r3, r3, #3
 800540e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	4413      	add	r3, r2
 8005416:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	2200      	movs	r2, #0
 8005428:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	2200      	movs	r2, #0
 800542e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005430:	7afb      	ldrb	r3, [r7, #11]
 8005432:	f003 0307 	and.w	r3, r3, #7
 8005436:	b2da      	uxtb	r2, r3
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6979      	ldr	r1, [r7, #20]
 8005442:	4618      	mov	r0, r3
 8005444:	f004 ff7d 	bl	800a342 <USB_EPStartXfer>

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3718      	adds	r7, #24
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005452:	b480      	push	{r7}
 8005454:	b083      	sub	sp, #12
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
 800545a:	460b      	mov	r3, r1
 800545c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800545e:	78fb      	ldrb	r3, [r7, #3]
 8005460:	f003 0207 	and.w	r2, r3, #7
 8005464:	6879      	ldr	r1, [r7, #4]
 8005466:	4613      	mov	r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	4413      	add	r3, r2
 800546c:	00db      	lsls	r3, r3, #3
 800546e:	440b      	add	r3, r1
 8005470:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8005474:	681b      	ldr	r3, [r3, #0]
}
 8005476:	4618      	mov	r0, r3
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b086      	sub	sp, #24
 8005486:	af00      	add	r7, sp, #0
 8005488:	60f8      	str	r0, [r7, #12]
 800548a:	607a      	str	r2, [r7, #4]
 800548c:	603b      	str	r3, [r7, #0]
 800548e:	460b      	mov	r3, r1
 8005490:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005492:	7afb      	ldrb	r3, [r7, #11]
 8005494:	f003 0207 	and.w	r2, r3, #7
 8005498:	4613      	mov	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	3310      	adds	r3, #16
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	4413      	add	r3, r2
 80054a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	683a      	ldr	r2, [r7, #0]
 80054c0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	2200      	movs	r2, #0
 80054c6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	2201      	movs	r2, #1
 80054cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054ce:	7afb      	ldrb	r3, [r7, #11]
 80054d0:	f003 0307 	and.w	r3, r3, #7
 80054d4:	b2da      	uxtb	r2, r3
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	6979      	ldr	r1, [r7, #20]
 80054e0:	4618      	mov	r0, r3
 80054e2:	f004 ff2e 	bl	800a342 <USB_EPStartXfer>

  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3718      	adds	r7, #24
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	460b      	mov	r3, r1
 80054fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80054fc:	78fb      	ldrb	r3, [r7, #3]
 80054fe:	f003 0307 	and.w	r3, r3, #7
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	7912      	ldrb	r2, [r2, #4]
 8005506:	4293      	cmp	r3, r2
 8005508:	d901      	bls.n	800550e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e03e      	b.n	800558c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800550e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005512:	2b00      	cmp	r3, #0
 8005514:	da0e      	bge.n	8005534 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005516:	78fb      	ldrb	r3, [r7, #3]
 8005518:	f003 0207 	and.w	r2, r3, #7
 800551c:	4613      	mov	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4413      	add	r3, r2
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	3310      	adds	r3, #16
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	4413      	add	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2201      	movs	r2, #1
 8005530:	705a      	strb	r2, [r3, #1]
 8005532:	e00c      	b.n	800554e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005534:	78fa      	ldrb	r2, [r7, #3]
 8005536:	4613      	mov	r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4413      	add	r3, r2
 800553c:	00db      	lsls	r3, r3, #3
 800553e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	4413      	add	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2201      	movs	r2, #1
 8005552:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005554:	78fb      	ldrb	r3, [r7, #3]
 8005556:	f003 0307 	and.w	r3, r3, #7
 800555a:	b2da      	uxtb	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005566:	2b01      	cmp	r3, #1
 8005568:	d101      	bne.n	800556e <HAL_PCD_EP_SetStall+0x7e>
 800556a:	2302      	movs	r3, #2
 800556c:	e00e      	b.n	800558c <HAL_PCD_EP_SetStall+0x9c>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68f9      	ldr	r1, [r7, #12]
 800557c:	4618      	mov	r0, r3
 800557e:	f006 fa91 	bl	800baa4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	460b      	mov	r3, r1
 800559e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80055a0:	78fb      	ldrb	r3, [r7, #3]
 80055a2:	f003 030f 	and.w	r3, r3, #15
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	7912      	ldrb	r2, [r2, #4]
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d901      	bls.n	80055b2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e040      	b.n	8005634 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80055b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	da0e      	bge.n	80055d8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055ba:	78fb      	ldrb	r3, [r7, #3]
 80055bc:	f003 0207 	and.w	r2, r3, #7
 80055c0:	4613      	mov	r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4413      	add	r3, r2
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	3310      	adds	r3, #16
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	4413      	add	r3, r2
 80055ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2201      	movs	r2, #1
 80055d4:	705a      	strb	r2, [r3, #1]
 80055d6:	e00e      	b.n	80055f6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055d8:	78fb      	ldrb	r3, [r7, #3]
 80055da:	f003 0207 	and.w	r2, r3, #7
 80055de:	4613      	mov	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4413      	add	r3, r2
 80055e4:	00db      	lsls	r3, r3, #3
 80055e6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	4413      	add	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80055fc:	78fb      	ldrb	r3, [r7, #3]
 80055fe:	f003 0307 	and.w	r3, r3, #7
 8005602:	b2da      	uxtb	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800560e:	2b01      	cmp	r3, #1
 8005610:	d101      	bne.n	8005616 <HAL_PCD_EP_ClrStall+0x82>
 8005612:	2302      	movs	r3, #2
 8005614:	e00e      	b.n	8005634 <HAL_PCD_EP_ClrStall+0xa0>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68f9      	ldr	r1, [r7, #12]
 8005624:	4618      	mov	r0, r3
 8005626:	f006 fa8e 	bl	800bb46 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3710      	adds	r7, #16
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b096      	sub	sp, #88	@ 0x58
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005644:	e3ad      	b.n	8005da2 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800564e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005652:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005656:	b2db      	uxtb	r3, r3
 8005658:	f003 030f 	and.w	r3, r3, #15
 800565c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8005660:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005664:	2b00      	cmp	r3, #0
 8005666:	f040 816f 	bne.w	8005948 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800566a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800566e:	f003 0310 	and.w	r3, r3, #16
 8005672:	2b00      	cmp	r3, #0
 8005674:	d14c      	bne.n	8005710 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	881b      	ldrh	r3, [r3, #0]
 800567c:	b29b      	uxth	r3, r3
 800567e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005682:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005686:	81fb      	strh	r3, [r7, #14]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	89fb      	ldrh	r3, [r7, #14]
 800568e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005692:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005696:	b29b      	uxth	r3, r3
 8005698:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	3310      	adds	r3, #16
 800569e:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	461a      	mov	r2, r3
 80056ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	00db      	lsls	r3, r3, #3
 80056b2:	4413      	add	r3, r2
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	6812      	ldr	r2, [r2, #0]
 80056b8:	4413      	add	r3, r2
 80056ba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80056be:	881b      	ldrh	r3, [r3, #0]
 80056c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80056c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056c6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80056c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056ca:	695a      	ldr	r2, [r3, #20]
 80056cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056ce:	69db      	ldr	r3, [r3, #28]
 80056d0:	441a      	add	r2, r3
 80056d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056d4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80056d6:	2100      	movs	r1, #0
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f008 fdd8 	bl	800e28e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	7b1b      	ldrb	r3, [r3, #12]
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f000 835c 	beq.w	8005da2 <PCD_EP_ISR_Handler+0x766>
 80056ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f040 8357 	bne.w	8005da2 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	7b1b      	ldrb	r3, [r3, #12]
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80056fe:	b2da      	uxtb	r2, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	731a      	strb	r2, [r3, #12]
 800570e:	e348      	b.n	8005da2 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005716:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005722:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005726:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800572a:	2b00      	cmp	r3, #0
 800572c:	d032      	beq.n	8005794 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005736:	b29b      	uxth	r3, r3
 8005738:	461a      	mov	r2, r3
 800573a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	4413      	add	r3, r2
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	6812      	ldr	r2, [r2, #0]
 8005746:	4413      	add	r3, r2
 8005748:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800574c:	881b      	ldrh	r3, [r3, #0]
 800574e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005752:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005754:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6818      	ldr	r0, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8005760:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005762:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005764:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005766:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005768:	b29b      	uxth	r3, r3
 800576a:	f006 fb18 	bl	800bd9e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	881b      	ldrh	r3, [r3, #0]
 8005774:	b29a      	uxth	r2, r3
 8005776:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800577a:	4013      	ands	r3, r2
 800577c:	823b      	strh	r3, [r7, #16]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	8a3a      	ldrh	r2, [r7, #16]
 8005784:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005788:	b292      	uxth	r2, r2
 800578a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f008 fd51 	bl	800e234 <HAL_PCD_SetupStageCallback>
 8005792:	e306      	b.n	8005da2 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005794:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8005798:	2b00      	cmp	r3, #0
 800579a:	f280 8302 	bge.w	8005da2 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	881b      	ldrh	r3, [r3, #0]
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80057aa:	4013      	ands	r3, r2
 80057ac:	83fb      	strh	r3, [r7, #30]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	8bfa      	ldrh	r2, [r7, #30]
 80057b4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80057b8:	b292      	uxth	r2, r2
 80057ba:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	461a      	mov	r2, r3
 80057c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	00db      	lsls	r3, r3, #3
 80057ce:	4413      	add	r3, r2
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	6812      	ldr	r2, [r2, #0]
 80057d4:	4413      	add	r3, r2
 80057d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80057da:	881b      	ldrh	r3, [r3, #0]
 80057dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80057e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057e2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80057e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057e6:	69db      	ldr	r3, [r3, #28]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d019      	beq.n	8005820 <PCD_EP_ISR_Handler+0x1e4>
 80057ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d015      	beq.n	8005820 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6818      	ldr	r0, [r3, #0]
 80057f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057fa:	6959      	ldr	r1, [r3, #20]
 80057fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057fe:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005800:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005802:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005804:	b29b      	uxth	r3, r3
 8005806:	f006 faca 	bl	800bd9e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800580a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800580c:	695a      	ldr	r2, [r3, #20]
 800580e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005810:	69db      	ldr	r3, [r3, #28]
 8005812:	441a      	add	r2, r3
 8005814:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005816:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005818:	2100      	movs	r1, #0
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f008 fd1c 	bl	800e258 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800582a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800582e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005832:	2b00      	cmp	r3, #0
 8005834:	f040 82b5 	bne.w	8005da2 <PCD_EP_ISR_Handler+0x766>
 8005838:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800583c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005840:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005844:	f000 82ad 	beq.w	8005da2 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	61bb      	str	r3, [r7, #24]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005856:	b29b      	uxth	r3, r3
 8005858:	461a      	mov	r2, r3
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	4413      	add	r3, r2
 800585e:	61bb      	str	r3, [r7, #24]
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005866:	617b      	str	r3, [r7, #20]
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	881b      	ldrh	r3, [r3, #0]
 800586c:	b29b      	uxth	r3, r3
 800586e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005872:	b29a      	uxth	r2, r3
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	801a      	strh	r2, [r3, #0]
 8005878:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	2b3e      	cmp	r3, #62	@ 0x3e
 800587e:	d91d      	bls.n	80058bc <PCD_EP_ISR_Handler+0x280>
 8005880:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	095b      	lsrs	r3, r3, #5
 8005886:	647b      	str	r3, [r7, #68]	@ 0x44
 8005888:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	f003 031f 	and.w	r3, r3, #31
 8005890:	2b00      	cmp	r3, #0
 8005892:	d102      	bne.n	800589a <PCD_EP_ISR_Handler+0x25e>
 8005894:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005896:	3b01      	subs	r3, #1
 8005898:	647b      	str	r3, [r7, #68]	@ 0x44
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	b29a      	uxth	r2, r3
 80058a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	029b      	lsls	r3, r3, #10
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	4313      	orrs	r3, r2
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	801a      	strh	r2, [r3, #0]
 80058ba:	e026      	b.n	800590a <PCD_EP_ISR_Handler+0x2ce>
 80058bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10a      	bne.n	80058da <PCD_EP_ISR_Handler+0x29e>
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	881b      	ldrh	r3, [r3, #0]
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	801a      	strh	r2, [r3, #0]
 80058d8:	e017      	b.n	800590a <PCD_EP_ISR_Handler+0x2ce>
 80058da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	085b      	lsrs	r3, r3, #1
 80058e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80058e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d002      	beq.n	80058f4 <PCD_EP_ISR_Handler+0x2b8>
 80058ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058f0:	3301      	adds	r3, #1
 80058f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	881b      	ldrh	r3, [r3, #0]
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	029b      	lsls	r3, r3, #10
 8005900:	b29b      	uxth	r3, r3
 8005902:	4313      	orrs	r3, r2
 8005904:	b29a      	uxth	r2, r3
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	b29b      	uxth	r3, r3
 8005912:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005916:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800591a:	827b      	strh	r3, [r7, #18]
 800591c:	8a7b      	ldrh	r3, [r7, #18]
 800591e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005922:	827b      	strh	r3, [r7, #18]
 8005924:	8a7b      	ldrh	r3, [r7, #18]
 8005926:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800592a:	827b      	strh	r3, [r7, #18]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	8a7b      	ldrh	r3, [r7, #18]
 8005932:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005936:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800593a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800593e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005942:	b29b      	uxth	r3, r3
 8005944:	8013      	strh	r3, [r2, #0]
 8005946:	e22c      	b.n	8005da2 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	461a      	mov	r2, r3
 800594e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4413      	add	r3, r2
 8005956:	881b      	ldrh	r3, [r3, #0]
 8005958:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800595c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8005960:	2b00      	cmp	r3, #0
 8005962:	f280 80f6 	bge.w	8005b52 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	461a      	mov	r2, r3
 800596c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4413      	add	r3, r2
 8005974:	881b      	ldrh	r3, [r3, #0]
 8005976:	b29a      	uxth	r2, r3
 8005978:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800597c:	4013      	ands	r3, r2
 800597e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	461a      	mov	r2, r3
 8005988:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4413      	add	r3, r2
 8005990:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8005994:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005998:	b292      	uxth	r2, r2
 800599a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800599c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80059a0:	4613      	mov	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4413      	add	r3, r2
 80059a6:	00db      	lsls	r3, r3, #3
 80059a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	4413      	add	r3, r2
 80059b0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80059b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059b4:	7b1b      	ldrb	r3, [r3, #12]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d123      	bne.n	8005a02 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	461a      	mov	r2, r3
 80059c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	00db      	lsls	r3, r3, #3
 80059cc:	4413      	add	r3, r2
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	6812      	ldr	r2, [r2, #0]
 80059d2:	4413      	add	r3, r2
 80059d4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80059d8:	881b      	ldrh	r3, [r3, #0]
 80059da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059de:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80059e2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f000 808e 	beq.w	8005b08 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6818      	ldr	r0, [r3, #0]
 80059f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059f2:	6959      	ldr	r1, [r3, #20]
 80059f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059f6:	88da      	ldrh	r2, [r3, #6]
 80059f8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80059fc:	f006 f9cf 	bl	800bd9e <USB_ReadPMA>
 8005a00:	e082      	b.n	8005b08 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005a02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a04:	78db      	ldrb	r3, [r3, #3]
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d10a      	bne.n	8005a20 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005a0a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005a0e:	461a      	mov	r2, r3
 8005a10:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f9d3 	bl	8005dbe <HAL_PCD_EP_DB_Receive>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8005a1e:	e073      	b.n	8005b08 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	461a      	mov	r2, r3
 8005a26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	881b      	ldrh	r3, [r3, #0]
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a3a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	461a      	mov	r2, r3
 8005a44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	441a      	add	r2, r3
 8005a4c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8005a50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a5c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	461a      	mov	r2, r3
 8005a6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4413      	add	r3, r2
 8005a72:	881b      	ldrh	r3, [r3, #0]
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d022      	beq.n	8005ac4 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	461a      	mov	r2, r3
 8005a8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	00db      	lsls	r3, r3, #3
 8005a90:	4413      	add	r3, r2
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	6812      	ldr	r2, [r2, #0]
 8005a96:	4413      	add	r3, r2
 8005a98:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005a9c:	881b      	ldrh	r3, [r3, #0]
 8005a9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005aa2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8005aa6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d02c      	beq.n	8005b08 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6818      	ldr	r0, [r3, #0]
 8005ab2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ab4:	6959      	ldr	r1, [r3, #20]
 8005ab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ab8:	891a      	ldrh	r2, [r3, #8]
 8005aba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005abe:	f006 f96e 	bl	800bd9e <USB_ReadPMA>
 8005ac2:	e021      	b.n	8005b08 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	461a      	mov	r2, r3
 8005ad0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	00db      	lsls	r3, r3, #3
 8005ad6:	4413      	add	r3, r2
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	6812      	ldr	r2, [r2, #0]
 8005adc:	4413      	add	r3, r2
 8005ade:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005ae2:	881b      	ldrh	r3, [r3, #0]
 8005ae4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ae8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8005aec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d009      	beq.n	8005b08 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6818      	ldr	r0, [r3, #0]
 8005af8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005afa:	6959      	ldr	r1, [r3, #20]
 8005afc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005afe:	895a      	ldrh	r2, [r3, #10]
 8005b00:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005b04:	f006 f94b 	bl	800bd9e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005b08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b0a:	69da      	ldr	r2, [r3, #28]
 8005b0c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005b10:	441a      	add	r2, r3
 8005b12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b14:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005b16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b18:	695a      	ldr	r2, [r3, #20]
 8005b1a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005b1e:	441a      	add	r2, r3
 8005b20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b22:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005b24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d005      	beq.n	8005b38 <PCD_EP_ISR_Handler+0x4fc>
 8005b2c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8005b30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d206      	bcs.n	8005b46 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005b38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f008 fb8a 	bl	800e258 <HAL_PCD_DataOutStageCallback>
 8005b44:	e005      	b.n	8005b52 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f004 fbf8 	bl	800a342 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005b52:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005b56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f000 8121 	beq.w	8005da2 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8005b60:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8005b64:	4613      	mov	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4413      	add	r3, r2
 8005b6a:	00db      	lsls	r3, r3, #3
 8005b6c:	3310      	adds	r3, #16
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	4413      	add	r3, r2
 8005b72:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	461a      	mov	r2, r3
 8005b7a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4413      	add	r3, r2
 8005b82:	881b      	ldrh	r3, [r3, #0]
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005b8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b8e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	461a      	mov	r2, r3
 8005b98:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	441a      	add	r2, r3
 8005ba0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005ba4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ba8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005bb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bb2:	78db      	ldrb	r3, [r3, #3]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	f040 80a2 	bne.w	8005cfe <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8005bba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005bc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bc2:	7b1b      	ldrb	r3, [r3, #12]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f000 8093 	beq.w	8005cf0 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005bca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d046      	beq.n	8005c64 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005bd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bd8:	785b      	ldrb	r3, [r3, #1]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d126      	bne.n	8005c2c <PCD_EP_ISR_Handler+0x5f0>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	461a      	mov	r2, r3
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf2:	4413      	add	r3, r2
 8005bf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	00da      	lsls	r2, r3, #3
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfe:	4413      	add	r3, r2
 8005c00:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005c04:	623b      	str	r3, [r7, #32]
 8005c06:	6a3b      	ldr	r3, [r7, #32]
 8005c08:	881b      	ldrh	r3, [r3, #0]
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	6a3b      	ldr	r3, [r7, #32]
 8005c14:	801a      	strh	r2, [r3, #0]
 8005c16:	6a3b      	ldr	r3, [r7, #32]
 8005c18:	881b      	ldrh	r3, [r3, #0]
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	6a3b      	ldr	r3, [r7, #32]
 8005c28:	801a      	strh	r2, [r3, #0]
 8005c2a:	e061      	b.n	8005cf0 <PCD_EP_ISR_Handler+0x6b4>
 8005c2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c2e:	785b      	ldrb	r3, [r3, #1]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d15d      	bne.n	8005cf0 <PCD_EP_ISR_Handler+0x6b4>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	461a      	mov	r2, r3
 8005c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c48:	4413      	add	r3, r2
 8005c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	00da      	lsls	r2, r3, #3
 8005c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c54:	4413      	add	r3, r2
 8005c56:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c5e:	2200      	movs	r2, #0
 8005c60:	801a      	strh	r2, [r3, #0]
 8005c62:	e045      	b.n	8005cf0 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c6c:	785b      	ldrb	r3, [r3, #1]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d126      	bne.n	8005cc0 <PCD_EP_ISR_Handler+0x684>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	461a      	mov	r2, r3
 8005c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c86:	4413      	add	r3, r2
 8005c88:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	00da      	lsls	r2, r3, #3
 8005c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c92:	4413      	add	r3, r2
 8005c94:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005c98:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c9c:	881b      	ldrh	r3, [r3, #0]
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca8:	801a      	strh	r2, [r3, #0]
 8005caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cac:	881b      	ldrh	r3, [r3, #0]
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cbc:	801a      	strh	r2, [r3, #0]
 8005cbe:	e017      	b.n	8005cf0 <PCD_EP_ISR_Handler+0x6b4>
 8005cc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cc2:	785b      	ldrb	r3, [r3, #1]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d113      	bne.n	8005cf0 <PCD_EP_ISR_Handler+0x6b4>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cd6:	4413      	add	r3, r2
 8005cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	00da      	lsls	r2, r3, #3
 8005ce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cec:	2200      	movs	r2, #0
 8005cee:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005cf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f008 fac9 	bl	800e28e <HAL_PCD_DataInStageCallback>
 8005cfc:	e051      	b.n	8005da2 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005cfe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d144      	bne.n	8005d94 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	461a      	mov	r2, r3
 8005d16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	00db      	lsls	r3, r3, #3
 8005d1c:	4413      	add	r3, r2
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	6812      	ldr	r2, [r2, #0]
 8005d22:	4413      	add	r3, r2
 8005d24:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005d28:	881b      	ldrh	r3, [r3, #0]
 8005d2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d2e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8005d32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d34:	699a      	ldr	r2, [r3, #24]
 8005d36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d907      	bls.n	8005d4e <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8005d3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d40:	699a      	ldr	r2, [r3, #24]
 8005d42:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005d46:	1ad2      	subs	r2, r2, r3
 8005d48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d4a:	619a      	str	r2, [r3, #24]
 8005d4c:	e002      	b.n	8005d54 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8005d4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d50:	2200      	movs	r2, #0
 8005d52:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005d54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d106      	bne.n	8005d6a <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005d5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	4619      	mov	r1, r3
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f008 fa93 	bl	800e28e <HAL_PCD_DataInStageCallback>
 8005d68:	e01b      	b.n	8005da2 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005d6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d6c:	695a      	ldr	r2, [r3, #20]
 8005d6e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005d72:	441a      	add	r2, r3
 8005d74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d76:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005d78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d7a:	69da      	ldr	r2, [r3, #28]
 8005d7c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005d80:	441a      	add	r2, r3
 8005d82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d84:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f004 fad8 	bl	800a342 <USB_EPStartXfer>
 8005d92:	e006      	b.n	8005da2 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005d94:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005d98:	461a      	mov	r2, r3
 8005d9a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f917 	bl	8005fd0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	b21b      	sxth	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f6ff ac49 	blt.w	8005646 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3758      	adds	r7, #88	@ 0x58
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b088      	sub	sp, #32
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	60f8      	str	r0, [r7, #12]
 8005dc6:	60b9      	str	r1, [r7, #8]
 8005dc8:	4613      	mov	r3, r2
 8005dca:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005dcc:	88fb      	ldrh	r3, [r7, #6]
 8005dce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d07c      	beq.n	8005ed0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	461a      	mov	r2, r3
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	00db      	lsls	r3, r3, #3
 8005de8:	4413      	add	r3, r2
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	6812      	ldr	r2, [r2, #0]
 8005dee:	4413      	add	r3, r2
 8005df0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005df4:	881b      	ldrh	r3, [r3, #0]
 8005df6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dfa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	699a      	ldr	r2, [r3, #24]
 8005e00:	8b7b      	ldrh	r3, [r7, #26]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d306      	bcc.n	8005e14 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	699a      	ldr	r2, [r3, #24]
 8005e0a:	8b7b      	ldrh	r3, [r7, #26]
 8005e0c:	1ad2      	subs	r2, r2, r3
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	619a      	str	r2, [r3, #24]
 8005e12:	e002      	b.n	8005e1a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	2200      	movs	r2, #0
 8005e18:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d123      	bne.n	8005e6a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	461a      	mov	r2, r3
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	4413      	add	r3, r2
 8005e30:	881b      	ldrh	r3, [r3, #0]
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e3c:	833b      	strh	r3, [r7, #24]
 8005e3e:	8b3b      	ldrh	r3, [r7, #24]
 8005e40:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005e44:	833b      	strh	r3, [r7, #24]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	441a      	add	r2, r3
 8005e54:	8b3b      	ldrh	r3, [r7, #24]
 8005e56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005e6a:	88fb      	ldrh	r3, [r7, #6]
 8005e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d01f      	beq.n	8005eb4 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	461a      	mov	r2, r3
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4413      	add	r3, r2
 8005e82:	881b      	ldrh	r3, [r3, #0]
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e8e:	82fb      	strh	r3, [r7, #22]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	461a      	mov	r2, r3
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	441a      	add	r2, r3
 8005e9e:	8afb      	ldrh	r3, [r7, #22]
 8005ea0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ea4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ea8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005eac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005eb4:	8b7b      	ldrh	r3, [r7, #26]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f000 8085 	beq.w	8005fc6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6818      	ldr	r0, [r3, #0]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	6959      	ldr	r1, [r3, #20]
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	891a      	ldrh	r2, [r3, #8]
 8005ec8:	8b7b      	ldrh	r3, [r7, #26]
 8005eca:	f005 ff68 	bl	800bd9e <USB_ReadPMA>
 8005ece:	e07a      	b.n	8005fc6 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	461a      	mov	r2, r3
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	00db      	lsls	r3, r3, #3
 8005ee2:	4413      	add	r3, r2
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	6812      	ldr	r2, [r2, #0]
 8005ee8:	4413      	add	r3, r2
 8005eea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005eee:	881b      	ldrh	r3, [r3, #0]
 8005ef0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ef4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	699a      	ldr	r2, [r3, #24]
 8005efa:	8b7b      	ldrh	r3, [r7, #26]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d306      	bcc.n	8005f0e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	699a      	ldr	r2, [r3, #24]
 8005f04:	8b7b      	ldrh	r3, [r7, #26]
 8005f06:	1ad2      	subs	r2, r2, r3
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	619a      	str	r2, [r3, #24]
 8005f0c:	e002      	b.n	8005f14 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2200      	movs	r2, #0
 8005f12:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d123      	bne.n	8005f64 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	461a      	mov	r2, r3
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	4413      	add	r3, r2
 8005f2a:	881b      	ldrh	r3, [r3, #0]
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f36:	83fb      	strh	r3, [r7, #30]
 8005f38:	8bfb      	ldrh	r3, [r7, #30]
 8005f3a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005f3e:	83fb      	strh	r3, [r7, #30]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	461a      	mov	r2, r3
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	441a      	add	r2, r3
 8005f4e:	8bfb      	ldrh	r3, [r7, #30]
 8005f50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005f64:	88fb      	ldrh	r3, [r7, #6]
 8005f66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d11f      	bne.n	8005fae <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	461a      	mov	r2, r3
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4413      	add	r3, r2
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f88:	83bb      	strh	r3, [r7, #28]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	461a      	mov	r2, r3
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	441a      	add	r2, r3
 8005f98:	8bbb      	ldrh	r3, [r7, #28]
 8005f9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fa2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fa6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005fae:	8b7b      	ldrh	r3, [r7, #26]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d008      	beq.n	8005fc6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6818      	ldr	r0, [r3, #0]
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	6959      	ldr	r1, [r3, #20]
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	895a      	ldrh	r2, [r3, #10]
 8005fc0:	8b7b      	ldrh	r3, [r7, #26]
 8005fc2:	f005 feec 	bl	800bd9e <USB_ReadPMA>
    }
  }

  return count;
 8005fc6:	8b7b      	ldrh	r3, [r7, #26]
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3720      	adds	r7, #32
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b0a4      	sub	sp, #144	@ 0x90
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005fde:	88fb      	ldrh	r3, [r7, #6]
 8005fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f000 81db 	beq.w	80063a0 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	00db      	lsls	r3, r3, #3
 8005ffc:	4413      	add	r3, r2
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	6812      	ldr	r2, [r2, #0]
 8006002:	4413      	add	r3, r2
 8006004:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800600e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	699a      	ldr	r2, [r3, #24]
 8006016:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800601a:	429a      	cmp	r2, r3
 800601c:	d907      	bls.n	800602e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	699a      	ldr	r2, [r3, #24]
 8006022:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006026:	1ad2      	subs	r2, r2, r3
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	619a      	str	r2, [r3, #24]
 800602c:	e002      	b.n	8006034 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	2200      	movs	r2, #0
 8006032:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	2b00      	cmp	r3, #0
 800603a:	f040 80b9 	bne.w	80061b0 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	785b      	ldrb	r3, [r3, #1]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d126      	bne.n	8006094 <HAL_PCD_EP_DB_Transmit+0xc4>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006054:	b29b      	uxth	r3, r3
 8006056:	461a      	mov	r2, r3
 8006058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800605a:	4413      	add	r3, r2
 800605c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	00da      	lsls	r2, r3, #3
 8006064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006066:	4413      	add	r3, r2
 8006068:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800606c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800606e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006070:	881b      	ldrh	r3, [r3, #0]
 8006072:	b29b      	uxth	r3, r3
 8006074:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006078:	b29a      	uxth	r2, r3
 800607a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800607c:	801a      	strh	r2, [r3, #0]
 800607e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006080:	881b      	ldrh	r3, [r3, #0]
 8006082:	b29b      	uxth	r3, r3
 8006084:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006088:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800608c:	b29a      	uxth	r2, r3
 800608e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006090:	801a      	strh	r2, [r3, #0]
 8006092:	e01a      	b.n	80060ca <HAL_PCD_EP_DB_Transmit+0xfa>
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	785b      	ldrb	r3, [r3, #1]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d116      	bne.n	80060ca <HAL_PCD_EP_DB_Transmit+0xfa>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	461a      	mov	r2, r3
 80060ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060b0:	4413      	add	r3, r2
 80060b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	00da      	lsls	r2, r3, #3
 80060ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060bc:	4413      	add	r3, r2
 80060be:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80060c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80060c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c6:	2200      	movs	r2, #0
 80060c8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	785b      	ldrb	r3, [r3, #1]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d126      	bne.n	8006126 <HAL_PCD_EP_DB_Transmit+0x156>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	61fb      	str	r3, [r7, #28]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	461a      	mov	r2, r3
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	4413      	add	r3, r2
 80060ee:	61fb      	str	r3, [r7, #28]
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	00da      	lsls	r2, r3, #3
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	4413      	add	r3, r2
 80060fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80060fe:	61bb      	str	r3, [r7, #24]
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	881b      	ldrh	r3, [r3, #0]
 8006104:	b29b      	uxth	r3, r3
 8006106:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800610a:	b29a      	uxth	r2, r3
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	801a      	strh	r2, [r3, #0]
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	881b      	ldrh	r3, [r3, #0]
 8006114:	b29b      	uxth	r3, r3
 8006116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800611a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800611e:	b29a      	uxth	r2, r3
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	801a      	strh	r2, [r3, #0]
 8006124:	e017      	b.n	8006156 <HAL_PCD_EP_DB_Transmit+0x186>
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	785b      	ldrb	r3, [r3, #1]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d113      	bne.n	8006156 <HAL_PCD_EP_DB_Transmit+0x186>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006136:	b29b      	uxth	r3, r3
 8006138:	461a      	mov	r2, r3
 800613a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613c:	4413      	add	r3, r2
 800613e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	00da      	lsls	r2, r3, #3
 8006146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006148:	4413      	add	r3, r2
 800614a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800614e:	623b      	str	r3, [r7, #32]
 8006150:	6a3b      	ldr	r3, [r7, #32]
 8006152:	2200      	movs	r2, #0
 8006154:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	4619      	mov	r1, r3
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f008 f896 	bl	800e28e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006162:	88fb      	ldrh	r3, [r7, #6]
 8006164:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 82fa 	beq.w	8006762 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	461a      	mov	r2, r3
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4413      	add	r3, r2
 800617c:	881b      	ldrh	r3, [r3, #0]
 800617e:	b29b      	uxth	r3, r3
 8006180:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006184:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006188:	82fb      	strh	r3, [r7, #22]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	461a      	mov	r2, r3
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	441a      	add	r2, r3
 8006198:	8afb      	ldrh	r3, [r7, #22]
 800619a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800619e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80061a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	8013      	strh	r3, [r2, #0]
 80061ae:	e2d8      	b.n	8006762 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80061b0:	88fb      	ldrh	r3, [r7, #6]
 80061b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d021      	beq.n	80061fe <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	461a      	mov	r2, r3
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	4413      	add	r3, r2
 80061c8:	881b      	ldrh	r3, [r3, #0]
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061d4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	461a      	mov	r2, r3
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	441a      	add	r2, r3
 80061e6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80061ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80061f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006204:	2b01      	cmp	r3, #1
 8006206:	f040 82ac 	bne.w	8006762 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	695a      	ldr	r2, [r3, #20]
 800620e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006212:	441a      	add	r2, r3
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	69da      	ldr	r2, [r3, #28]
 800621c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006220:	441a      	add	r2, r3
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	6a1a      	ldr	r2, [r3, #32]
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	429a      	cmp	r2, r3
 8006230:	d30b      	bcc.n	800624a <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	6a1a      	ldr	r2, [r3, #32]
 800623e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006242:	1ad2      	subs	r2, r2, r3
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	621a      	str	r2, [r3, #32]
 8006248:	e017      	b.n	800627a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	6a1b      	ldr	r3, [r3, #32]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d108      	bne.n	8006264 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8006252:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006256:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006262:	e00a      	b.n	800627a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	6a1b      	ldr	r3, [r3, #32]
 8006270:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	2200      	movs	r2, #0
 8006278:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	785b      	ldrb	r3, [r3, #1]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d165      	bne.n	800634e <HAL_PCD_EP_DB_Transmit+0x37e>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006290:	b29b      	uxth	r3, r3
 8006292:	461a      	mov	r2, r3
 8006294:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006296:	4413      	add	r3, r2
 8006298:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	00da      	lsls	r2, r3, #3
 80062a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062a2:	4413      	add	r3, r2
 80062a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80062a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80062aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ac:	881b      	ldrh	r3, [r3, #0]
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b8:	801a      	strh	r2, [r3, #0]
 80062ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062be:	2b3e      	cmp	r3, #62	@ 0x3e
 80062c0:	d91d      	bls.n	80062fe <HAL_PCD_EP_DB_Transmit+0x32e>
 80062c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062c6:	095b      	lsrs	r3, r3, #5
 80062c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062ce:	f003 031f 	and.w	r3, r3, #31
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d102      	bne.n	80062dc <HAL_PCD_EP_DB_Transmit+0x30c>
 80062d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062d8:	3b01      	subs	r3, #1
 80062da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062de:	881b      	ldrh	r3, [r3, #0]
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	029b      	lsls	r3, r3, #10
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	4313      	orrs	r3, r2
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062fa:	801a      	strh	r2, [r3, #0]
 80062fc:	e044      	b.n	8006388 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80062fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10a      	bne.n	800631c <HAL_PCD_EP_DB_Transmit+0x34c>
 8006306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006308:	881b      	ldrh	r3, [r3, #0]
 800630a:	b29b      	uxth	r3, r3
 800630c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006314:	b29a      	uxth	r2, r3
 8006316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006318:	801a      	strh	r2, [r3, #0]
 800631a:	e035      	b.n	8006388 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800631c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006320:	085b      	lsrs	r3, r3, #1
 8006322:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006324:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006328:	f003 0301 	and.w	r3, r3, #1
 800632c:	2b00      	cmp	r3, #0
 800632e:	d002      	beq.n	8006336 <HAL_PCD_EP_DB_Transmit+0x366>
 8006330:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006332:	3301      	adds	r3, #1
 8006334:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006338:	881b      	ldrh	r3, [r3, #0]
 800633a:	b29a      	uxth	r2, r3
 800633c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800633e:	b29b      	uxth	r3, r3
 8006340:	029b      	lsls	r3, r3, #10
 8006342:	b29b      	uxth	r3, r3
 8006344:	4313      	orrs	r3, r2
 8006346:	b29a      	uxth	r2, r3
 8006348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800634a:	801a      	strh	r2, [r3, #0]
 800634c:	e01c      	b.n	8006388 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	785b      	ldrb	r3, [r3, #1]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d118      	bne.n	8006388 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	647b      	str	r3, [r7, #68]	@ 0x44
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006364:	b29b      	uxth	r3, r3
 8006366:	461a      	mov	r2, r3
 8006368:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800636a:	4413      	add	r3, r2
 800636c:	647b      	str	r3, [r7, #68]	@ 0x44
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	00da      	lsls	r2, r3, #3
 8006374:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006376:	4413      	add	r3, r2
 8006378:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800637c:	643b      	str	r3, [r7, #64]	@ 0x40
 800637e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006382:	b29a      	uxth	r2, r3
 8006384:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006386:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6818      	ldr	r0, [r3, #0]
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	6959      	ldr	r1, [r3, #20]
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	891a      	ldrh	r2, [r3, #8]
 8006394:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006398:	b29b      	uxth	r3, r3
 800639a:	f005 fcbd 	bl	800bd18 <USB_WritePMA>
 800639e:	e1e0      	b.n	8006762 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	461a      	mov	r2, r3
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	00db      	lsls	r3, r3, #3
 80063b2:	4413      	add	r3, r2
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	6812      	ldr	r2, [r2, #0]
 80063b8:	4413      	add	r3, r2
 80063ba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80063be:	881b      	ldrh	r3, [r3, #0]
 80063c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063c4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	699a      	ldr	r2, [r3, #24]
 80063cc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d307      	bcc.n	80063e4 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	699a      	ldr	r2, [r3, #24]
 80063d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80063dc:	1ad2      	subs	r2, r2, r3
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	619a      	str	r2, [r3, #24]
 80063e2:	e002      	b.n	80063ea <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	2200      	movs	r2, #0
 80063e8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	f040 80c0 	bne.w	8006574 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	785b      	ldrb	r3, [r3, #1]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d126      	bne.n	800644a <HAL_PCD_EP_DB_Transmit+0x47a>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800640a:	b29b      	uxth	r3, r3
 800640c:	461a      	mov	r2, r3
 800640e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006410:	4413      	add	r3, r2
 8006412:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	00da      	lsls	r2, r3, #3
 800641a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800641c:	4413      	add	r3, r2
 800641e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006422:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006424:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006426:	881b      	ldrh	r3, [r3, #0]
 8006428:	b29b      	uxth	r3, r3
 800642a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800642e:	b29a      	uxth	r2, r3
 8006430:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006432:	801a      	strh	r2, [r3, #0]
 8006434:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006436:	881b      	ldrh	r3, [r3, #0]
 8006438:	b29b      	uxth	r3, r3
 800643a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800643e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006442:	b29a      	uxth	r2, r3
 8006444:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006446:	801a      	strh	r2, [r3, #0]
 8006448:	e01a      	b.n	8006480 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	785b      	ldrb	r3, [r3, #1]
 800644e:	2b01      	cmp	r3, #1
 8006450:	d116      	bne.n	8006480 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	667b      	str	r3, [r7, #100]	@ 0x64
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006460:	b29b      	uxth	r3, r3
 8006462:	461a      	mov	r2, r3
 8006464:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006466:	4413      	add	r3, r2
 8006468:	667b      	str	r3, [r7, #100]	@ 0x64
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	00da      	lsls	r2, r3, #3
 8006470:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006472:	4413      	add	r3, r2
 8006474:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006478:	663b      	str	r3, [r7, #96]	@ 0x60
 800647a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800647c:	2200      	movs	r2, #0
 800647e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	677b      	str	r3, [r7, #116]	@ 0x74
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	785b      	ldrb	r3, [r3, #1]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d12b      	bne.n	80064e6 <HAL_PCD_EP_DB_Transmit+0x516>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800649c:	b29b      	uxth	r3, r3
 800649e:	461a      	mov	r2, r3
 80064a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064a2:	4413      	add	r3, r2
 80064a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	00da      	lsls	r2, r3, #3
 80064ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064ae:	4413      	add	r3, r2
 80064b0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80064b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80064b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80064bc:	881b      	ldrh	r3, [r3, #0]
 80064be:	b29b      	uxth	r3, r3
 80064c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80064ca:	801a      	strh	r2, [r3, #0]
 80064cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80064d0:	881b      	ldrh	r3, [r3, #0]
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064dc:	b29a      	uxth	r2, r3
 80064de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80064e2:	801a      	strh	r2, [r3, #0]
 80064e4:	e017      	b.n	8006516 <HAL_PCD_EP_DB_Transmit+0x546>
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	785b      	ldrb	r3, [r3, #1]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d113      	bne.n	8006516 <HAL_PCD_EP_DB_Transmit+0x546>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	461a      	mov	r2, r3
 80064fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80064fc:	4413      	add	r3, r2
 80064fe:	677b      	str	r3, [r7, #116]	@ 0x74
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	00da      	lsls	r2, r3, #3
 8006506:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006508:	4413      	add	r3, r2
 800650a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800650e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006510:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006512:	2200      	movs	r2, #0
 8006514:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	4619      	mov	r1, r3
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f007 feb6 	bl	800e28e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006522:	88fb      	ldrh	r3, [r7, #6]
 8006524:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006528:	2b00      	cmp	r3, #0
 800652a:	f040 811a 	bne.w	8006762 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	461a      	mov	r2, r3
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4413      	add	r3, r2
 800653c:	881b      	ldrh	r3, [r3, #0]
 800653e:	b29b      	uxth	r3, r3
 8006540:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006544:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006548:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	461a      	mov	r2, r3
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	441a      	add	r2, r3
 800655a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800655e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006562:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006566:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800656a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800656e:	b29b      	uxth	r3, r3
 8006570:	8013      	strh	r3, [r2, #0]
 8006572:	e0f6      	b.n	8006762 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006574:	88fb      	ldrh	r3, [r7, #6]
 8006576:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d121      	bne.n	80065c2 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	461a      	mov	r2, r3
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4413      	add	r3, r2
 800658c:	881b      	ldrh	r3, [r3, #0]
 800658e:	b29b      	uxth	r3, r3
 8006590:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006594:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006598:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	461a      	mov	r2, r3
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	441a      	add	r2, r3
 80065aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80065ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80065ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065be:	b29b      	uxth	r3, r3
 80065c0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	f040 80ca 	bne.w	8006762 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	695a      	ldr	r2, [r3, #20]
 80065d2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80065d6:	441a      	add	r2, r3
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	69da      	ldr	r2, [r3, #28]
 80065e0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80065e4:	441a      	add	r2, r3
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	6a1a      	ldr	r2, [r3, #32]
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d30b      	bcc.n	800660e <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	6a1a      	ldr	r2, [r3, #32]
 8006602:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006606:	1ad2      	subs	r2, r2, r3
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	621a      	str	r2, [r3, #32]
 800660c:	e017      	b.n	800663e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d108      	bne.n	8006628 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8006616:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800661a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006626:	e00a      	b.n	800663e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	6a1b      	ldr	r3, [r3, #32]
 800662c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	2200      	movs	r2, #0
 8006634:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	657b      	str	r3, [r7, #84]	@ 0x54
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	785b      	ldrb	r3, [r3, #1]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d165      	bne.n	8006718 <HAL_PCD_EP_DB_Transmit+0x748>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800665a:	b29b      	uxth	r3, r3
 800665c:	461a      	mov	r2, r3
 800665e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006660:	4413      	add	r3, r2
 8006662:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	00da      	lsls	r2, r3, #3
 800666a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800666c:	4413      	add	r3, r2
 800666e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006672:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006674:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006676:	881b      	ldrh	r3, [r3, #0]
 8006678:	b29b      	uxth	r3, r3
 800667a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800667e:	b29a      	uxth	r2, r3
 8006680:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006682:	801a      	strh	r2, [r3, #0]
 8006684:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006688:	2b3e      	cmp	r3, #62	@ 0x3e
 800668a:	d91d      	bls.n	80066c8 <HAL_PCD_EP_DB_Transmit+0x6f8>
 800668c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006690:	095b      	lsrs	r3, r3, #5
 8006692:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006694:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006698:	f003 031f 	and.w	r3, r3, #31
 800669c:	2b00      	cmp	r3, #0
 800669e:	d102      	bne.n	80066a6 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80066a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80066a2:	3b01      	subs	r3, #1
 80066a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80066a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80066a8:	881b      	ldrh	r3, [r3, #0]
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	029b      	lsls	r3, r3, #10
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	4313      	orrs	r3, r2
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80066c4:	801a      	strh	r2, [r3, #0]
 80066c6:	e041      	b.n	800674c <HAL_PCD_EP_DB_Transmit+0x77c>
 80066c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10a      	bne.n	80066e6 <HAL_PCD_EP_DB_Transmit+0x716>
 80066d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80066d2:	881b      	ldrh	r3, [r3, #0]
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066de:	b29a      	uxth	r2, r3
 80066e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80066e2:	801a      	strh	r2, [r3, #0]
 80066e4:	e032      	b.n	800674c <HAL_PCD_EP_DB_Transmit+0x77c>
 80066e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066ea:	085b      	lsrs	r3, r3, #1
 80066ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80066ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d002      	beq.n	8006700 <HAL_PCD_EP_DB_Transmit+0x730>
 80066fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80066fc:	3301      	adds	r3, #1
 80066fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006700:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006702:	881b      	ldrh	r3, [r3, #0]
 8006704:	b29a      	uxth	r2, r3
 8006706:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006708:	b29b      	uxth	r3, r3
 800670a:	029b      	lsls	r3, r3, #10
 800670c:	b29b      	uxth	r3, r3
 800670e:	4313      	orrs	r3, r2
 8006710:	b29a      	uxth	r2, r3
 8006712:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006714:	801a      	strh	r2, [r3, #0]
 8006716:	e019      	b.n	800674c <HAL_PCD_EP_DB_Transmit+0x77c>
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	785b      	ldrb	r3, [r3, #1]
 800671c:	2b01      	cmp	r3, #1
 800671e:	d115      	bne.n	800674c <HAL_PCD_EP_DB_Transmit+0x77c>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006728:	b29b      	uxth	r3, r3
 800672a:	461a      	mov	r2, r3
 800672c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800672e:	4413      	add	r3, r2
 8006730:	657b      	str	r3, [r7, #84]	@ 0x54
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	00da      	lsls	r2, r3, #3
 8006738:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800673a:	4413      	add	r3, r2
 800673c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006740:	653b      	str	r3, [r7, #80]	@ 0x50
 8006742:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006746:	b29a      	uxth	r2, r3
 8006748:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800674a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6818      	ldr	r0, [r3, #0]
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	6959      	ldr	r1, [r3, #20]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	895a      	ldrh	r2, [r3, #10]
 8006758:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800675c:	b29b      	uxth	r3, r3
 800675e:	f005 fadb 	bl	800bd18 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	461a      	mov	r2, r3
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	4413      	add	r3, r2
 8006770:	881b      	ldrh	r3, [r3, #0]
 8006772:	b29b      	uxth	r3, r3
 8006774:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006778:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800677c:	82bb      	strh	r3, [r7, #20]
 800677e:	8abb      	ldrh	r3, [r7, #20]
 8006780:	f083 0310 	eor.w	r3, r3, #16
 8006784:	82bb      	strh	r3, [r7, #20]
 8006786:	8abb      	ldrh	r3, [r7, #20]
 8006788:	f083 0320 	eor.w	r3, r3, #32
 800678c:	82bb      	strh	r3, [r7, #20]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	461a      	mov	r2, r3
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	441a      	add	r2, r3
 800679c:	8abb      	ldrh	r3, [r7, #20]
 800679e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3790      	adds	r7, #144	@ 0x90
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80067bc:	b480      	push	{r7}
 80067be:	b087      	sub	sp, #28
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	607b      	str	r3, [r7, #4]
 80067c6:	460b      	mov	r3, r1
 80067c8:	817b      	strh	r3, [r7, #10]
 80067ca:	4613      	mov	r3, r2
 80067cc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80067ce:	897b      	ldrh	r3, [r7, #10]
 80067d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00b      	beq.n	80067f2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067da:	897b      	ldrh	r3, [r7, #10]
 80067dc:	f003 0207 	and.w	r2, r3, #7
 80067e0:	4613      	mov	r3, r2
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	4413      	add	r3, r2
 80067e6:	00db      	lsls	r3, r3, #3
 80067e8:	3310      	adds	r3, #16
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	4413      	add	r3, r2
 80067ee:	617b      	str	r3, [r7, #20]
 80067f0:	e009      	b.n	8006806 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80067f2:	897a      	ldrh	r2, [r7, #10]
 80067f4:	4613      	mov	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	00db      	lsls	r3, r3, #3
 80067fc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	4413      	add	r3, r2
 8006804:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006806:	893b      	ldrh	r3, [r7, #8]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d107      	bne.n	800681c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	2200      	movs	r2, #0
 8006810:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	b29a      	uxth	r2, r3
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	80da      	strh	r2, [r3, #6]
 800681a:	e00b      	b.n	8006834 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	2201      	movs	r2, #1
 8006820:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	b29a      	uxth	r2, r3
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	0c1b      	lsrs	r3, r3, #16
 800682e:	b29a      	uxth	r2, r3
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	371c      	adds	r7, #28
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr

08006842 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006842:	b480      	push	{r7}
 8006844:	b085      	sub	sp, #20
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006866:	b29b      	uxth	r3, r3
 8006868:	f043 0301 	orr.w	r3, r3, #1
 800686c:	b29a      	uxth	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800687a:	b29b      	uxth	r3, r3
 800687c:	f043 0302 	orr.w	r3, r3, #2
 8006880:	b29a      	uxth	r2, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3714      	adds	r7, #20
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
	...

08006898 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006898:	b480      	push	{r7}
 800689a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800689c:	4b05      	ldr	r3, [pc, #20]	@ (80068b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a04      	ldr	r2, [pc, #16]	@ (80068b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80068a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068a6:	6013      	str	r3, [r2, #0]
}
 80068a8:	bf00      	nop
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	58000400 	.word	0x58000400

080068b8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80068b8:	b480      	push	{r7}
 80068ba:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80068bc:	4b04      	ldr	r3, [pc, #16]	@ (80068d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	58000400 	.word	0x58000400

080068d4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80068d4:	b480      	push	{r7}
 80068d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80068d8:	4b05      	ldr	r3, [pc, #20]	@ (80068f0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	4a04      	ldr	r2, [pc, #16]	@ (80068f0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80068de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80068e2:	6053      	str	r3, [r2, #4]
}
 80068e4:	bf00      	nop
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	58000400 	.word	0x58000400

080068f4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80068f4:	b480      	push	{r7}
 80068f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80068f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006902:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006906:	d101      	bne.n	800690c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006908:	2301      	movs	r3, #1
 800690a:	e000      	b.n	800690e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8006918:	b480      	push	{r7}
 800691a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800691c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006926:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800692a:	6013      	str	r3, [r2, #0]
}
 800692c:	bf00      	nop
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr

08006936 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8006936:	b480      	push	{r7}
 8006938:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800693a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006944:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006948:	6013      	str	r3, [r2, #0]
}
 800694a:	bf00      	nop
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8006954:	b480      	push	{r7}
 8006956:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006958:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006962:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006966:	d101      	bne.n	800696c <LL_RCC_HSE_IsReady+0x18>
 8006968:	2301      	movs	r3, #1
 800696a:	e000      	b.n	800696e <LL_RCC_HSE_IsReady+0x1a>
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8006978:	b480      	push	{r7}
 800697a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800697c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006986:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800698a:	6013      	str	r3, [r2, #0]
}
 800698c:	bf00      	nop
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr

08006996 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8006996:	b480      	push	{r7}
 8006998:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800699a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80069a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069a8:	6013      	str	r3, [r2, #0]
}
 80069aa:	bf00      	nop
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80069b4:	b480      	push	{r7}
 80069b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80069b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069c6:	d101      	bne.n	80069cc <LL_RCC_HSI_IsReady+0x18>
 80069c8:	2301      	movs	r3, #1
 80069ca:	e000      	b.n	80069ce <LL_RCC_HSI_IsReady+0x1a>
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80069e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	061b      	lsls	r3, r3, #24
 80069ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069f2:	4313      	orrs	r3, r2
 80069f4:	604b      	str	r3, [r1, #4]
}
 80069f6:	bf00      	nop
 80069f8:	370c      	adds	r7, #12
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr

08006a02 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8006a02:	b480      	push	{r7}
 8006a04:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006a06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a12:	f043 0301 	orr.w	r3, r3, #1
 8006a16:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8006a1a:	bf00      	nop
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8006a24:	b480      	push	{r7}
 8006a26:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006a28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a34:	f023 0301 	bic.w	r3, r3, #1
 8006a38:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8006a3c:	bf00      	nop
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8006a46:	b480      	push	{r7}
 8006a48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8006a4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a52:	f003 0302 	and.w	r3, r3, #2
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d101      	bne.n	8006a5e <LL_RCC_HSI48_IsReady+0x18>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e000      	b.n	8006a60 <LL_RCC_HSI48_IsReady+0x1a>
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006a6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a7a:	f043 0301 	orr.w	r3, r3, #1
 8006a7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006a82:	bf00      	nop
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006a90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a9c:	f023 0301 	bic.w	r3, r3, #1
 8006aa0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006aa4:	bf00      	nop
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr

08006aae <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8006aae:	b480      	push	{r7}
 8006ab0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006ab2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006abe:	f043 0304 	orr.w	r3, r3, #4
 8006ac2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006ac6:	bf00      	nop
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006ad4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006adc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ae0:	f023 0304 	bic.w	r3, r3, #4
 8006ae4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006ae8:	bf00      	nop
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr

08006af2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8006af2:	b480      	push	{r7}
 8006af4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006af6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006afe:	f003 0302 	and.w	r3, r3, #2
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d101      	bne.n	8006b0a <LL_RCC_LSE_IsReady+0x18>
 8006b06:	2301      	movs	r3, #1
 8006b08:	e000      	b.n	8006b0c <LL_RCC_LSE_IsReady+0x1a>
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr

08006b16 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8006b16:	b480      	push	{r7}
 8006b18:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006b1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b26:	f043 0301 	orr.w	r3, r3, #1
 8006b2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006b2e:	bf00      	nop
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006b3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b48:	f023 0301 	bic.w	r3, r3, #1
 8006b4c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006b50:	bf00      	nop
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8006b5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b66:	f003 0302 	and.w	r3, r3, #2
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d101      	bne.n	8006b72 <LL_RCC_LSI1_IsReady+0x18>
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e000      	b.n	8006b74 <LL_RCC_LSI1_IsReady+0x1a>
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr

08006b7e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8006b7e:	b480      	push	{r7}
 8006b80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006b82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b8e:	f043 0304 	orr.w	r3, r3, #4
 8006b92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006b96:	bf00      	nop
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006ba4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006bb0:	f023 0304 	bic.w	r3, r3, #4
 8006bb4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006bb8:	bf00      	nop
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr

08006bc2 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8006bc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bce:	f003 0308 	and.w	r3, r3, #8
 8006bd2:	2b08      	cmp	r3, #8
 8006bd4:	d101      	bne.n	8006bda <LL_RCC_LSI2_IsReady+0x18>
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e000      	b.n	8006bdc <LL_RCC_LSI2_IsReady+0x1a>
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr

08006be6 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8006be6:	b480      	push	{r7}
 8006be8:	b083      	sub	sp, #12
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8006bee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bf6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	021b      	lsls	r3, r3, #8
 8006bfe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c02:	4313      	orrs	r3, r2
 8006c04:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8006c08:	bf00      	nop
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8006c14:	b480      	push	{r7}
 8006c16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006c18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c22:	f043 0301 	orr.w	r3, r3, #1
 8006c26:	6013      	str	r3, [r2, #0]
}
 8006c28:	bf00      	nop
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr

08006c32 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8006c32:	b480      	push	{r7}
 8006c34:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006c36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c40:	f023 0301 	bic.w	r3, r3, #1
 8006c44:	6013      	str	r3, [r2, #0]
}
 8006c46:	bf00      	nop
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8006c50:	b480      	push	{r7}
 8006c52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006c54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0302 	and.w	r3, r3, #2
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d101      	bne.n	8006c66 <LL_RCC_MSI_IsReady+0x16>
 8006c62:	2301      	movs	r3, #1
 8006c64:	e000      	b.n	8006c68 <LL_RCC_MSI_IsReady+0x18>
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8006c72:	b480      	push	{r7}
 8006c74:	b083      	sub	sp, #12
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8006c7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c84:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	600b      	str	r3, [r1, #0]
}
 8006c8e:	bf00      	nop
 8006c90:	370c      	adds	r7, #12
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr

08006c9a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b083      	sub	sp, #12
 8006c9e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8006ca0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006caa:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2bb0      	cmp	r3, #176	@ 0xb0
 8006cb0:	d901      	bls.n	8006cb6 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8006cb2:	23b0      	movs	r3, #176	@ 0xb0
 8006cb4:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8006cb6:	687b      	ldr	r3, [r7, #4]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006ccc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	021b      	lsls	r3, r3, #8
 8006cda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	604b      	str	r3, [r1, #4]
}
 8006ce2:	bf00      	nop
 8006ce4:	370c      	adds	r7, #12
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr

08006cee <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8006cee:	b480      	push	{r7}
 8006cf0:	b083      	sub	sp, #12
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006cf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	f023 0203 	bic.w	r2, r3, #3
 8006d00:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	608b      	str	r3, [r1, #8]
}
 8006d0a:	bf00      	nop
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8006d16:	b480      	push	{r7}
 8006d18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006d1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	f003 030c 	and.w	r3, r3, #12
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8006d2e:	b480      	push	{r7}
 8006d30:	b083      	sub	sp, #12
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006d36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d40:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	608b      	str	r3, [r1, #8]
}
 8006d4a:	bf00      	nop
 8006d4c:	370c      	adds	r7, #12
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b083      	sub	sp, #12
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8006d5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d62:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006d66:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d6a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8006d76:	bf00      	nop
 8006d78:	370c      	adds	r7, #12
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8006d82:	b480      	push	{r7}
 8006d84:	b083      	sub	sp, #12
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006d8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d8e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006d92:	f023 020f 	bic.w	r2, r3, #15
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	091b      	lsrs	r3, r3, #4
 8006d9a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006db8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006dc2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	608b      	str	r3, [r1, #8]
}
 8006dcc:	bf00      	nop
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006de0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006dea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	608b      	str	r3, [r1, #8]
}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8006e00:	b480      	push	{r7}
 8006e02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006e04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006e1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e20:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006e24:	011b      	lsls	r3, r3, #4
 8006e26:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006e34:	b480      	push	{r7}
 8006e36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006e38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006e50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006e64:	b480      	push	{r7}
 8006e66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006e68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e76:	6013      	str	r3, [r2, #0]
}
 8006e78:	bf00      	nop
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr

08006e82 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8006e82:	b480      	push	{r7}
 8006e84:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006e86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e90:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e94:	6013      	str	r3, [r2, #0]
}
 8006e96:	bf00      	nop
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006ea4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006eae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006eb2:	d101      	bne.n	8006eb8 <LL_RCC_PLL_IsReady+0x18>
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e000      	b.n	8006eba <LL_RCC_PLL_IsReady+0x1a>
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006ec8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	0a1b      	lsrs	r3, r3, #8
 8006ed0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr

08006ede <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006ede:	b480      	push	{r7}
 8006ee0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006ee2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr

08006ef6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006efa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr

08006f0e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006f0e:	b480      	push	{r7}
 8006f10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006f12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	f003 0303 	and.w	r3, r3, #3
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr

08006f26 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8006f26:	b480      	push	{r7}
 8006f28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006f2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f38:	d101      	bne.n	8006f3e <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e000      	b.n	8006f40 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr

08006f4a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8006f4a:	b480      	push	{r7}
 8006f4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8006f4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f52:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f5e:	d101      	bne.n	8006f64 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8006f60:	2301      	movs	r3, #1
 8006f62:	e000      	b.n	8006f66 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8006f70:	b480      	push	{r7}
 8006f72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006f74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f78:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006f7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f84:	d101      	bne.n	8006f8a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006f86:	2301      	movs	r3, #1
 8006f88:	e000      	b.n	8006f8c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr

08006f96 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006f96:	b480      	push	{r7}
 8006f98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006f9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fa4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006fa8:	d101      	bne.n	8006fae <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006faa:	2301      	movs	r3, #1
 8006fac:	e000      	b.n	8006fb0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr

08006fba <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8006fba:	b480      	push	{r7}
 8006fbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006fbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006fc8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006fcc:	d101      	bne.n	8006fd2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e000      	b.n	8006fd4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
	...

08006fe0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fe0:	b590      	push	{r4, r7, lr}
 8006fe2:	b08d      	sub	sp, #52	@ 0x34
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d101      	bne.n	8006ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e363      	b.n	80076ba <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 0320 	and.w	r3, r3, #32
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f000 808d 	beq.w	800711a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007000:	f7ff fe89 	bl	8006d16 <LL_RCC_GetSysClkSource>
 8007004:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007006:	f7ff ff82 	bl	8006f0e <LL_RCC_PLL_GetMainSource>
 800700a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800700c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800700e:	2b00      	cmp	r3, #0
 8007010:	d005      	beq.n	800701e <HAL_RCC_OscConfig+0x3e>
 8007012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007014:	2b0c      	cmp	r3, #12
 8007016:	d147      	bne.n	80070a8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8007018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800701a:	2b01      	cmp	r3, #1
 800701c:	d144      	bne.n	80070a8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	69db      	ldr	r3, [r3, #28]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d101      	bne.n	800702a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e347      	b.n	80076ba <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800702e:	f7ff fe34 	bl	8006c9a <LL_RCC_MSI_GetRange>
 8007032:	4603      	mov	r3, r0
 8007034:	429c      	cmp	r4, r3
 8007036:	d914      	bls.n	8007062 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800703c:	4618      	mov	r0, r3
 800703e:	f000 fd2f 	bl	8007aa0 <RCC_SetFlashLatencyFromMSIRange>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d001      	beq.n	800704c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	e336      	b.n	80076ba <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007050:	4618      	mov	r0, r3
 8007052:	f7ff fe0e 	bl	8006c72 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	4618      	mov	r0, r3
 800705c:	f7ff fe32 	bl	8006cc4 <LL_RCC_MSI_SetCalibTrimming>
 8007060:	e013      	b.n	800708a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007066:	4618      	mov	r0, r3
 8007068:	f7ff fe03 	bl	8006c72 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	4618      	mov	r0, r3
 8007072:	f7ff fe27 	bl	8006cc4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800707a:	4618      	mov	r0, r3
 800707c:	f000 fd10 	bl	8007aa0 <RCC_SetFlashLatencyFromMSIRange>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d001      	beq.n	800708a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e317      	b.n	80076ba <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800708a:	f000 fcc9 	bl	8007a20 <HAL_RCC_GetHCLKFreq>
 800708e:	4603      	mov	r3, r0
 8007090:	4aa4      	ldr	r2, [pc, #656]	@ (8007324 <HAL_RCC_OscConfig+0x344>)
 8007092:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007094:	4ba4      	ldr	r3, [pc, #656]	@ (8007328 <HAL_RCC_OscConfig+0x348>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4618      	mov	r0, r3
 800709a:	f7fa fea1 	bl	8001de0 <HAL_InitTick>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d039      	beq.n	8007118 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e308      	b.n	80076ba <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	69db      	ldr	r3, [r3, #28]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d01e      	beq.n	80070ee <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80070b0:	f7ff fdb0 	bl	8006c14 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80070b4:	f7fa fee2 	bl	8001e7c <HAL_GetTick>
 80070b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80070ba:	e008      	b.n	80070ce <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80070bc:	f7fa fede 	bl	8001e7c <HAL_GetTick>
 80070c0:	4602      	mov	r2, r0
 80070c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d901      	bls.n	80070ce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80070ca:	2303      	movs	r3, #3
 80070cc:	e2f5      	b.n	80076ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80070ce:	f7ff fdbf 	bl	8006c50 <LL_RCC_MSI_IsReady>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d0f1      	beq.n	80070bc <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070dc:	4618      	mov	r0, r3
 80070de:	f7ff fdc8 	bl	8006c72 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7ff fdec 	bl	8006cc4 <LL_RCC_MSI_SetCalibTrimming>
 80070ec:	e015      	b.n	800711a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80070ee:	f7ff fda0 	bl	8006c32 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80070f2:	f7fa fec3 	bl	8001e7c <HAL_GetTick>
 80070f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80070f8:	e008      	b.n	800710c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80070fa:	f7fa febf 	bl	8001e7c <HAL_GetTick>
 80070fe:	4602      	mov	r2, r0
 8007100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007102:	1ad3      	subs	r3, r2, r3
 8007104:	2b02      	cmp	r3, #2
 8007106:	d901      	bls.n	800710c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007108:	2303      	movs	r3, #3
 800710a:	e2d6      	b.n	80076ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800710c:	f7ff fda0 	bl	8006c50 <LL_RCC_MSI_IsReady>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1f1      	bne.n	80070fa <HAL_RCC_OscConfig+0x11a>
 8007116:	e000      	b.n	800711a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007118:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	2b00      	cmp	r3, #0
 8007124:	d047      	beq.n	80071b6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007126:	f7ff fdf6 	bl	8006d16 <LL_RCC_GetSysClkSource>
 800712a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800712c:	f7ff feef 	bl	8006f0e <LL_RCC_PLL_GetMainSource>
 8007130:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007132:	6a3b      	ldr	r3, [r7, #32]
 8007134:	2b08      	cmp	r3, #8
 8007136:	d005      	beq.n	8007144 <HAL_RCC_OscConfig+0x164>
 8007138:	6a3b      	ldr	r3, [r7, #32]
 800713a:	2b0c      	cmp	r3, #12
 800713c:	d108      	bne.n	8007150 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	2b03      	cmp	r3, #3
 8007142:	d105      	bne.n	8007150 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d134      	bne.n	80071b6 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	e2b4      	b.n	80076ba <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007158:	d102      	bne.n	8007160 <HAL_RCC_OscConfig+0x180>
 800715a:	f7ff fbdd 	bl	8006918 <LL_RCC_HSE_Enable>
 800715e:	e001      	b.n	8007164 <HAL_RCC_OscConfig+0x184>
 8007160:	f7ff fbe9 	bl	8006936 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d012      	beq.n	8007192 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800716c:	f7fa fe86 	bl	8001e7c <HAL_GetTick>
 8007170:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8007172:	e008      	b.n	8007186 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007174:	f7fa fe82 	bl	8001e7c <HAL_GetTick>
 8007178:	4602      	mov	r2, r0
 800717a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800717c:	1ad3      	subs	r3, r2, r3
 800717e:	2b64      	cmp	r3, #100	@ 0x64
 8007180:	d901      	bls.n	8007186 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007182:	2303      	movs	r3, #3
 8007184:	e299      	b.n	80076ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8007186:	f7ff fbe5 	bl	8006954 <LL_RCC_HSE_IsReady>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d0f1      	beq.n	8007174 <HAL_RCC_OscConfig+0x194>
 8007190:	e011      	b.n	80071b6 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007192:	f7fa fe73 	bl	8001e7c <HAL_GetTick>
 8007196:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8007198:	e008      	b.n	80071ac <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800719a:	f7fa fe6f 	bl	8001e7c <HAL_GetTick>
 800719e:	4602      	mov	r2, r0
 80071a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	2b64      	cmp	r3, #100	@ 0x64
 80071a6:	d901      	bls.n	80071ac <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80071a8:	2303      	movs	r3, #3
 80071aa:	e286      	b.n	80076ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80071ac:	f7ff fbd2 	bl	8006954 <LL_RCC_HSE_IsReady>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1f1      	bne.n	800719a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0302 	and.w	r3, r3, #2
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d04c      	beq.n	800725c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071c2:	f7ff fda8 	bl	8006d16 <LL_RCC_GetSysClkSource>
 80071c6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80071c8:	f7ff fea1 	bl	8006f0e <LL_RCC_PLL_GetMainSource>
 80071cc:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	2b04      	cmp	r3, #4
 80071d2:	d005      	beq.n	80071e0 <HAL_RCC_OscConfig+0x200>
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	2b0c      	cmp	r3, #12
 80071d8:	d10e      	bne.n	80071f8 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d10b      	bne.n	80071f8 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d101      	bne.n	80071ec <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e266      	b.n	80076ba <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	4618      	mov	r0, r3
 80071f2:	f7ff fbf1 	bl	80069d8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80071f6:	e031      	b.n	800725c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d019      	beq.n	8007234 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007200:	f7ff fbba 	bl	8006978 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007204:	f7fa fe3a 	bl	8001e7c <HAL_GetTick>
 8007208:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800720a:	e008      	b.n	800721e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800720c:	f7fa fe36 	bl	8001e7c <HAL_GetTick>
 8007210:	4602      	mov	r2, r0
 8007212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	2b02      	cmp	r3, #2
 8007218:	d901      	bls.n	800721e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e24d      	b.n	80076ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800721e:	f7ff fbc9 	bl	80069b4 <LL_RCC_HSI_IsReady>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d0f1      	beq.n	800720c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	691b      	ldr	r3, [r3, #16]
 800722c:	4618      	mov	r0, r3
 800722e:	f7ff fbd3 	bl	80069d8 <LL_RCC_HSI_SetCalibTrimming>
 8007232:	e013      	b.n	800725c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007234:	f7ff fbaf 	bl	8006996 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007238:	f7fa fe20 	bl	8001e7c <HAL_GetTick>
 800723c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800723e:	e008      	b.n	8007252 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007240:	f7fa fe1c 	bl	8001e7c <HAL_GetTick>
 8007244:	4602      	mov	r2, r0
 8007246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	2b02      	cmp	r3, #2
 800724c:	d901      	bls.n	8007252 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e233      	b.n	80076ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8007252:	f7ff fbaf 	bl	80069b4 <LL_RCC_HSI_IsReady>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d1f1      	bne.n	8007240 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 0308 	and.w	r3, r3, #8
 8007264:	2b00      	cmp	r3, #0
 8007266:	d106      	bne.n	8007276 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8007270:	2b00      	cmp	r3, #0
 8007272:	f000 80a3 	beq.w	80073bc <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d076      	beq.n	800736c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 0310 	and.w	r3, r3, #16
 8007286:	2b00      	cmp	r3, #0
 8007288:	d046      	beq.n	8007318 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800728a:	f7ff fc66 	bl	8006b5a <LL_RCC_LSI1_IsReady>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d113      	bne.n	80072bc <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8007294:	f7ff fc3f 	bl	8006b16 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007298:	f7fa fdf0 	bl	8001e7c <HAL_GetTick>
 800729c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800729e:	e008      	b.n	80072b2 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80072a0:	f7fa fdec 	bl	8001e7c <HAL_GetTick>
 80072a4:	4602      	mov	r2, r0
 80072a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a8:	1ad3      	subs	r3, r2, r3
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	d901      	bls.n	80072b2 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	e203      	b.n	80076ba <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80072b2:	f7ff fc52 	bl	8006b5a <LL_RCC_LSI1_IsReady>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d0f1      	beq.n	80072a0 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80072bc:	f7ff fc5f 	bl	8006b7e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072c0:	f7fa fddc 	bl	8001e7c <HAL_GetTick>
 80072c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80072c6:	e008      	b.n	80072da <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80072c8:	f7fa fdd8 	bl	8001e7c <HAL_GetTick>
 80072cc:	4602      	mov	r2, r0
 80072ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d0:	1ad3      	subs	r3, r2, r3
 80072d2:	2b03      	cmp	r3, #3
 80072d4:	d901      	bls.n	80072da <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80072d6:	2303      	movs	r3, #3
 80072d8:	e1ef      	b.n	80076ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80072da:	f7ff fc72 	bl	8006bc2 <LL_RCC_LSI2_IsReady>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d0f1      	beq.n	80072c8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	699b      	ldr	r3, [r3, #24]
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7ff fc7c 	bl	8006be6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80072ee:	f7ff fc23 	bl	8006b38 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072f2:	f7fa fdc3 	bl	8001e7c <HAL_GetTick>
 80072f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80072f8:	e008      	b.n	800730c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80072fa:	f7fa fdbf 	bl	8001e7c <HAL_GetTick>
 80072fe:	4602      	mov	r2, r0
 8007300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007302:	1ad3      	subs	r3, r2, r3
 8007304:	2b02      	cmp	r3, #2
 8007306:	d901      	bls.n	800730c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8007308:	2303      	movs	r3, #3
 800730a:	e1d6      	b.n	80076ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800730c:	f7ff fc25 	bl	8006b5a <LL_RCC_LSI1_IsReady>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1f1      	bne.n	80072fa <HAL_RCC_OscConfig+0x31a>
 8007316:	e051      	b.n	80073bc <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8007318:	f7ff fbfd 	bl	8006b16 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800731c:	f7fa fdae 	bl	8001e7c <HAL_GetTick>
 8007320:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8007322:	e00c      	b.n	800733e <HAL_RCC_OscConfig+0x35e>
 8007324:	20000008 	.word	0x20000008
 8007328:	20000028 	.word	0x20000028
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800732c:	f7fa fda6 	bl	8001e7c <HAL_GetTick>
 8007330:	4602      	mov	r2, r0
 8007332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	2b02      	cmp	r3, #2
 8007338:	d901      	bls.n	800733e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	e1bd      	b.n	80076ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800733e:	f7ff fc0c 	bl	8006b5a <LL_RCC_LSI1_IsReady>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d0f1      	beq.n	800732c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8007348:	f7ff fc2a 	bl	8006ba0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800734c:	e008      	b.n	8007360 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800734e:	f7fa fd95 	bl	8001e7c <HAL_GetTick>
 8007352:	4602      	mov	r2, r0
 8007354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	2b03      	cmp	r3, #3
 800735a:	d901      	bls.n	8007360 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800735c:	2303      	movs	r3, #3
 800735e:	e1ac      	b.n	80076ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8007360:	f7ff fc2f 	bl	8006bc2 <LL_RCC_LSI2_IsReady>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1f1      	bne.n	800734e <HAL_RCC_OscConfig+0x36e>
 800736a:	e027      	b.n	80073bc <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800736c:	f7ff fc18 	bl	8006ba0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007370:	f7fa fd84 	bl	8001e7c <HAL_GetTick>
 8007374:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8007376:	e008      	b.n	800738a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007378:	f7fa fd80 	bl	8001e7c <HAL_GetTick>
 800737c:	4602      	mov	r2, r0
 800737e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	2b03      	cmp	r3, #3
 8007384:	d901      	bls.n	800738a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007386:	2303      	movs	r3, #3
 8007388:	e197      	b.n	80076ba <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800738a:	f7ff fc1a 	bl	8006bc2 <LL_RCC_LSI2_IsReady>
 800738e:	4603      	mov	r3, r0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1f1      	bne.n	8007378 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8007394:	f7ff fbd0 	bl	8006b38 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007398:	f7fa fd70 	bl	8001e7c <HAL_GetTick>
 800739c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800739e:	e008      	b.n	80073b2 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80073a0:	f7fa fd6c 	bl	8001e7c <HAL_GetTick>
 80073a4:	4602      	mov	r2, r0
 80073a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	d901      	bls.n	80073b2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e183      	b.n	80076ba <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80073b2:	f7ff fbd2 	bl	8006b5a <LL_RCC_LSI1_IsReady>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1f1      	bne.n	80073a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 0304 	and.w	r3, r3, #4
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d05b      	beq.n	8007480 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073c8:	4ba7      	ldr	r3, [pc, #668]	@ (8007668 <HAL_RCC_OscConfig+0x688>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d114      	bne.n	80073fe <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80073d4:	f7ff fa60 	bl	8006898 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073d8:	f7fa fd50 	bl	8001e7c <HAL_GetTick>
 80073dc:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073de:	e008      	b.n	80073f2 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073e0:	f7fa fd4c 	bl	8001e7c <HAL_GetTick>
 80073e4:	4602      	mov	r2, r0
 80073e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e8:	1ad3      	subs	r3, r2, r3
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d901      	bls.n	80073f2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80073ee:	2303      	movs	r3, #3
 80073f0:	e163      	b.n	80076ba <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073f2:	4b9d      	ldr	r3, [pc, #628]	@ (8007668 <HAL_RCC_OscConfig+0x688>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d0f0      	beq.n	80073e0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	2b01      	cmp	r3, #1
 8007404:	d102      	bne.n	800740c <HAL_RCC_OscConfig+0x42c>
 8007406:	f7ff fb30 	bl	8006a6a <LL_RCC_LSE_Enable>
 800740a:	e00c      	b.n	8007426 <HAL_RCC_OscConfig+0x446>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	2b05      	cmp	r3, #5
 8007412:	d104      	bne.n	800741e <HAL_RCC_OscConfig+0x43e>
 8007414:	f7ff fb4b 	bl	8006aae <LL_RCC_LSE_EnableBypass>
 8007418:	f7ff fb27 	bl	8006a6a <LL_RCC_LSE_Enable>
 800741c:	e003      	b.n	8007426 <HAL_RCC_OscConfig+0x446>
 800741e:	f7ff fb35 	bl	8006a8c <LL_RCC_LSE_Disable>
 8007422:	f7ff fb55 	bl	8006ad0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d014      	beq.n	8007458 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800742e:	f7fa fd25 	bl	8001e7c <HAL_GetTick>
 8007432:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8007434:	e00a      	b.n	800744c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007436:	f7fa fd21 	bl	8001e7c <HAL_GetTick>
 800743a:	4602      	mov	r2, r0
 800743c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007444:	4293      	cmp	r3, r2
 8007446:	d901      	bls.n	800744c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8007448:	2303      	movs	r3, #3
 800744a:	e136      	b.n	80076ba <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800744c:	f7ff fb51 	bl	8006af2 <LL_RCC_LSE_IsReady>
 8007450:	4603      	mov	r3, r0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d0ef      	beq.n	8007436 <HAL_RCC_OscConfig+0x456>
 8007456:	e013      	b.n	8007480 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007458:	f7fa fd10 	bl	8001e7c <HAL_GetTick>
 800745c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800745e:	e00a      	b.n	8007476 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007460:	f7fa fd0c 	bl	8001e7c <HAL_GetTick>
 8007464:	4602      	mov	r2, r0
 8007466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800746e:	4293      	cmp	r3, r2
 8007470:	d901      	bls.n	8007476 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8007472:	2303      	movs	r3, #3
 8007474:	e121      	b.n	80076ba <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8007476:	f7ff fb3c 	bl	8006af2 <LL_RCC_LSE_IsReady>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1ef      	bne.n	8007460 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007488:	2b00      	cmp	r3, #0
 800748a:	d02c      	beq.n	80074e6 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007490:	2b00      	cmp	r3, #0
 8007492:	d014      	beq.n	80074be <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007494:	f7ff fab5 	bl	8006a02 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007498:	f7fa fcf0 	bl	8001e7c <HAL_GetTick>
 800749c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800749e:	e008      	b.n	80074b2 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80074a0:	f7fa fcec 	bl	8001e7c <HAL_GetTick>
 80074a4:	4602      	mov	r2, r0
 80074a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d901      	bls.n	80074b2 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80074ae:	2303      	movs	r3, #3
 80074b0:	e103      	b.n	80076ba <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80074b2:	f7ff fac8 	bl	8006a46 <LL_RCC_HSI48_IsReady>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d0f1      	beq.n	80074a0 <HAL_RCC_OscConfig+0x4c0>
 80074bc:	e013      	b.n	80074e6 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80074be:	f7ff fab1 	bl	8006a24 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074c2:	f7fa fcdb 	bl	8001e7c <HAL_GetTick>
 80074c6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80074c8:	e008      	b.n	80074dc <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80074ca:	f7fa fcd7 	bl	8001e7c <HAL_GetTick>
 80074ce:	4602      	mov	r2, r0
 80074d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d901      	bls.n	80074dc <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80074d8:	2303      	movs	r3, #3
 80074da:	e0ee      	b.n	80076ba <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80074dc:	f7ff fab3 	bl	8006a46 <LL_RCC_HSI48_IsReady>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d1f1      	bne.n	80074ca <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	f000 80e4 	beq.w	80076b8 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074f0:	f7ff fc11 	bl	8006d16 <LL_RCC_GetSysClkSource>
 80074f4:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80074f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007502:	2b02      	cmp	r3, #2
 8007504:	f040 80b4 	bne.w	8007670 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f003 0203 	and.w	r2, r3, #3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007512:	429a      	cmp	r2, r3
 8007514:	d123      	bne.n	800755e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007520:	429a      	cmp	r2, r3
 8007522:	d11c      	bne.n	800755e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	0a1b      	lsrs	r3, r3, #8
 8007528:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007530:	429a      	cmp	r2, r3
 8007532:	d114      	bne.n	800755e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800753e:	429a      	cmp	r2, r3
 8007540:	d10d      	bne.n	800755e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800754c:	429a      	cmp	r2, r3
 800754e:	d106      	bne.n	800755e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800755a:	429a      	cmp	r2, r3
 800755c:	d05d      	beq.n	800761a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	2b0c      	cmp	r3, #12
 8007562:	d058      	beq.n	8007616 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800756e:	2b00      	cmp	r3, #0
 8007570:	d001      	beq.n	8007576 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e0a1      	b.n	80076ba <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007576:	f7ff fc84 	bl	8006e82 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800757a:	f7fa fc7f 	bl	8001e7c <HAL_GetTick>
 800757e:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007580:	e008      	b.n	8007594 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007582:	f7fa fc7b 	bl	8001e7c <HAL_GetTick>
 8007586:	4602      	mov	r2, r0
 8007588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758a:	1ad3      	subs	r3, r2, r3
 800758c:	2b02      	cmp	r3, #2
 800758e:	d901      	bls.n	8007594 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8007590:	2303      	movs	r3, #3
 8007592:	e092      	b.n	80076ba <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007594:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d1ef      	bne.n	8007582 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80075a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075a6:	68da      	ldr	r2, [r3, #12]
 80075a8:	4b30      	ldr	r3, [pc, #192]	@ (800766c <HAL_RCC_OscConfig+0x68c>)
 80075aa:	4013      	ands	r3, r2
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80075b4:	4311      	orrs	r1, r2
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80075ba:	0212      	lsls	r2, r2, #8
 80075bc:	4311      	orrs	r1, r2
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80075c2:	4311      	orrs	r1, r2
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80075c8:	4311      	orrs	r1, r2
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80075ce:	430a      	orrs	r2, r1
 80075d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80075d4:	4313      	orrs	r3, r2
 80075d6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80075d8:	f7ff fc44 	bl	8006e64 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80075dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80075e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80075ec:	f7fa fc46 	bl	8001e7c <HAL_GetTick>
 80075f0:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075f2:	e008      	b.n	8007606 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075f4:	f7fa fc42 	bl	8001e7c <HAL_GetTick>
 80075f8:	4602      	mov	r2, r0
 80075fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d901      	bls.n	8007606 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	e059      	b.n	80076ba <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007606:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007610:	2b00      	cmp	r3, #0
 8007612:	d0ef      	beq.n	80075f4 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007614:	e050      	b.n	80076b8 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e04f      	b.n	80076ba <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800761a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007624:	2b00      	cmp	r3, #0
 8007626:	d147      	bne.n	80076b8 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007628:	f7ff fc1c 	bl	8006e64 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800762c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007636:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800763a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800763c:	f7fa fc1e 	bl	8001e7c <HAL_GetTick>
 8007640:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007642:	e008      	b.n	8007656 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007644:	f7fa fc1a 	bl	8001e7c <HAL_GetTick>
 8007648:	4602      	mov	r2, r0
 800764a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	2b02      	cmp	r3, #2
 8007650:	d901      	bls.n	8007656 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8007652:	2303      	movs	r3, #3
 8007654:	e031      	b.n	80076ba <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007656:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007660:	2b00      	cmp	r3, #0
 8007662:	d0ef      	beq.n	8007644 <HAL_RCC_OscConfig+0x664>
 8007664:	e028      	b.n	80076b8 <HAL_RCC_OscConfig+0x6d8>
 8007666:	bf00      	nop
 8007668:	58000400 	.word	0x58000400
 800766c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	2b0c      	cmp	r3, #12
 8007674:	d01e      	beq.n	80076b4 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007676:	f7ff fc04 	bl	8006e82 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800767a:	f7fa fbff 	bl	8001e7c <HAL_GetTick>
 800767e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007680:	e008      	b.n	8007694 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007682:	f7fa fbfb 	bl	8001e7c <HAL_GetTick>
 8007686:	4602      	mov	r2, r0
 8007688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800768a:	1ad3      	subs	r3, r2, r3
 800768c:	2b02      	cmp	r3, #2
 800768e:	d901      	bls.n	8007694 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8007690:	2303      	movs	r3, #3
 8007692:	e012      	b.n	80076ba <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007694:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1ef      	bne.n	8007682 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80076a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076a6:	68da      	ldr	r2, [r3, #12]
 80076a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80076ac:	4b05      	ldr	r3, [pc, #20]	@ (80076c4 <HAL_RCC_OscConfig+0x6e4>)
 80076ae:	4013      	ands	r3, r2
 80076b0:	60cb      	str	r3, [r1, #12]
 80076b2:	e001      	b.n	80076b8 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	e000      	b.n	80076ba <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3734      	adds	r7, #52	@ 0x34
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd90      	pop	{r4, r7, pc}
 80076c2:	bf00      	nop
 80076c4:	eefefffc 	.word	0xeefefffc

080076c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e12d      	b.n	8007938 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80076dc:	4b98      	ldr	r3, [pc, #608]	@ (8007940 <HAL_RCC_ClockConfig+0x278>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0307 	and.w	r3, r3, #7
 80076e4:	683a      	ldr	r2, [r7, #0]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d91b      	bls.n	8007722 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076ea:	4b95      	ldr	r3, [pc, #596]	@ (8007940 <HAL_RCC_ClockConfig+0x278>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f023 0207 	bic.w	r2, r3, #7
 80076f2:	4993      	ldr	r1, [pc, #588]	@ (8007940 <HAL_RCC_ClockConfig+0x278>)
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076fa:	f7fa fbbf 	bl	8001e7c <HAL_GetTick>
 80076fe:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007700:	e008      	b.n	8007714 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007702:	f7fa fbbb 	bl	8001e7c <HAL_GetTick>
 8007706:	4602      	mov	r2, r0
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	1ad3      	subs	r3, r2, r3
 800770c:	2b02      	cmp	r3, #2
 800770e:	d901      	bls.n	8007714 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8007710:	2303      	movs	r3, #3
 8007712:	e111      	b.n	8007938 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007714:	4b8a      	ldr	r3, [pc, #552]	@ (8007940 <HAL_RCC_ClockConfig+0x278>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 0307 	and.w	r3, r3, #7
 800771c:	683a      	ldr	r2, [r7, #0]
 800771e:	429a      	cmp	r2, r3
 8007720:	d1ef      	bne.n	8007702 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 0302 	and.w	r3, r3, #2
 800772a:	2b00      	cmp	r3, #0
 800772c:	d016      	beq.n	800775c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	4618      	mov	r0, r3
 8007734:	f7ff fafb 	bl	8006d2e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007738:	f7fa fba0 	bl	8001e7c <HAL_GetTick>
 800773c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800773e:	e008      	b.n	8007752 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007740:	f7fa fb9c 	bl	8001e7c <HAL_GetTick>
 8007744:	4602      	mov	r2, r0
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	2b02      	cmp	r3, #2
 800774c:	d901      	bls.n	8007752 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800774e:	2303      	movs	r3, #3
 8007750:	e0f2      	b.n	8007938 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007752:	f7ff fbe8 	bl	8006f26 <LL_RCC_IsActiveFlag_HPRE>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d0f1      	beq.n	8007740 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0320 	and.w	r3, r3, #32
 8007764:	2b00      	cmp	r3, #0
 8007766:	d016      	beq.n	8007796 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	695b      	ldr	r3, [r3, #20]
 800776c:	4618      	mov	r0, r3
 800776e:	f7ff faf2 	bl	8006d56 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007772:	f7fa fb83 	bl	8001e7c <HAL_GetTick>
 8007776:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007778:	e008      	b.n	800778c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800777a:	f7fa fb7f 	bl	8001e7c <HAL_GetTick>
 800777e:	4602      	mov	r2, r0
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	2b02      	cmp	r3, #2
 8007786:	d901      	bls.n	800778c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	e0d5      	b.n	8007938 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800778c:	f7ff fbdd 	bl	8006f4a <LL_RCC_IsActiveFlag_C2HPRE>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d0f1      	beq.n	800777a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d016      	beq.n	80077d0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	699b      	ldr	r3, [r3, #24]
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7ff faeb 	bl	8006d82 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80077ac:	f7fa fb66 	bl	8001e7c <HAL_GetTick>
 80077b0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80077b2:	e008      	b.n	80077c6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80077b4:	f7fa fb62 	bl	8001e7c <HAL_GetTick>
 80077b8:	4602      	mov	r2, r0
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d901      	bls.n	80077c6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80077c2:	2303      	movs	r3, #3
 80077c4:	e0b8      	b.n	8007938 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80077c6:	f7ff fbd3 	bl	8006f70 <LL_RCC_IsActiveFlag_SHDHPRE>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d0f1      	beq.n	80077b4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 0304 	and.w	r3, r3, #4
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d016      	beq.n	800780a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	4618      	mov	r0, r3
 80077e2:	f7ff fae5 	bl	8006db0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80077e6:	f7fa fb49 	bl	8001e7c <HAL_GetTick>
 80077ea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80077ec:	e008      	b.n	8007800 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80077ee:	f7fa fb45 	bl	8001e7c <HAL_GetTick>
 80077f2:	4602      	mov	r2, r0
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d901      	bls.n	8007800 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80077fc:	2303      	movs	r3, #3
 80077fe:	e09b      	b.n	8007938 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007800:	f7ff fbc9 	bl	8006f96 <LL_RCC_IsActiveFlag_PPRE1>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d0f1      	beq.n	80077ee <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f003 0308 	and.w	r3, r3, #8
 8007812:	2b00      	cmp	r3, #0
 8007814:	d017      	beq.n	8007846 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	00db      	lsls	r3, r3, #3
 800781c:	4618      	mov	r0, r3
 800781e:	f7ff fadb 	bl	8006dd8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007822:	f7fa fb2b 	bl	8001e7c <HAL_GetTick>
 8007826:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007828:	e008      	b.n	800783c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800782a:	f7fa fb27 	bl	8001e7c <HAL_GetTick>
 800782e:	4602      	mov	r2, r0
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	2b02      	cmp	r3, #2
 8007836:	d901      	bls.n	800783c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8007838:	2303      	movs	r3, #3
 800783a:	e07d      	b.n	8007938 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800783c:	f7ff fbbd 	bl	8006fba <LL_RCC_IsActiveFlag_PPRE2>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d0f1      	beq.n	800782a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f003 0301 	and.w	r3, r3, #1
 800784e:	2b00      	cmp	r3, #0
 8007850:	d043      	beq.n	80078da <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	2b02      	cmp	r3, #2
 8007858:	d106      	bne.n	8007868 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800785a:	f7ff f87b 	bl	8006954 <LL_RCC_HSE_IsReady>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d11e      	bne.n	80078a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	e067      	b.n	8007938 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	2b03      	cmp	r3, #3
 800786e:	d106      	bne.n	800787e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8007870:	f7ff fb16 	bl	8006ea0 <LL_RCC_PLL_IsReady>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d113      	bne.n	80078a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	e05c      	b.n	8007938 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d106      	bne.n	8007894 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8007886:	f7ff f9e3 	bl	8006c50 <LL_RCC_MSI_IsReady>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d108      	bne.n	80078a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	e051      	b.n	8007938 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007894:	f7ff f88e 	bl	80069b4 <LL_RCC_HSI_IsReady>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d101      	bne.n	80078a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e04a      	b.n	8007938 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7ff fa21 	bl	8006cee <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078ac:	f7fa fae6 	bl	8001e7c <HAL_GetTick>
 80078b0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078b2:	e00a      	b.n	80078ca <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078b4:	f7fa fae2 	bl	8001e7c <HAL_GetTick>
 80078b8:	4602      	mov	r2, r0
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	1ad3      	subs	r3, r2, r3
 80078be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d901      	bls.n	80078ca <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80078c6:	2303      	movs	r3, #3
 80078c8:	e036      	b.n	8007938 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078ca:	f7ff fa24 	bl	8006d16 <LL_RCC_GetSysClkSource>
 80078ce:	4602      	mov	r2, r0
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d1ec      	bne.n	80078b4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078da:	4b19      	ldr	r3, [pc, #100]	@ (8007940 <HAL_RCC_ClockConfig+0x278>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 0307 	and.w	r3, r3, #7
 80078e2:	683a      	ldr	r2, [r7, #0]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d21b      	bcs.n	8007920 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078e8:	4b15      	ldr	r3, [pc, #84]	@ (8007940 <HAL_RCC_ClockConfig+0x278>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f023 0207 	bic.w	r2, r3, #7
 80078f0:	4913      	ldr	r1, [pc, #76]	@ (8007940 <HAL_RCC_ClockConfig+0x278>)
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078f8:	f7fa fac0 	bl	8001e7c <HAL_GetTick>
 80078fc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078fe:	e008      	b.n	8007912 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007900:	f7fa fabc 	bl	8001e7c <HAL_GetTick>
 8007904:	4602      	mov	r2, r0
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	2b02      	cmp	r3, #2
 800790c:	d901      	bls.n	8007912 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e012      	b.n	8007938 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007912:	4b0b      	ldr	r3, [pc, #44]	@ (8007940 <HAL_RCC_ClockConfig+0x278>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 0307 	and.w	r3, r3, #7
 800791a:	683a      	ldr	r2, [r7, #0]
 800791c:	429a      	cmp	r2, r3
 800791e:	d1ef      	bne.n	8007900 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007920:	f000 f87e 	bl	8007a20 <HAL_RCC_GetHCLKFreq>
 8007924:	4603      	mov	r3, r0
 8007926:	4a07      	ldr	r2, [pc, #28]	@ (8007944 <HAL_RCC_ClockConfig+0x27c>)
 8007928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800792a:	f7fa fab3 	bl	8001e94 <HAL_GetTickPrio>
 800792e:	4603      	mov	r3, r0
 8007930:	4618      	mov	r0, r3
 8007932:	f7fa fa55 	bl	8001de0 <HAL_InitTick>
 8007936:	4603      	mov	r3, r0
}
 8007938:	4618      	mov	r0, r3
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}
 8007940:	58004000 	.word	0x58004000
 8007944:	20000008 	.word	0x20000008

08007948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007948:	b590      	push	{r4, r7, lr}
 800794a:	b085      	sub	sp, #20
 800794c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800794e:	f7ff f9e2 	bl	8006d16 <LL_RCC_GetSysClkSource>
 8007952:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d10a      	bne.n	8007970 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800795a:	f7ff f99e 	bl	8006c9a <LL_RCC_MSI_GetRange>
 800795e:	4603      	mov	r3, r0
 8007960:	091b      	lsrs	r3, r3, #4
 8007962:	f003 030f 	and.w	r3, r3, #15
 8007966:	4a2b      	ldr	r2, [pc, #172]	@ (8007a14 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800796c:	60fb      	str	r3, [r7, #12]
 800796e:	e04b      	b.n	8007a08 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2b04      	cmp	r3, #4
 8007974:	d102      	bne.n	800797c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007976:	4b28      	ldr	r3, [pc, #160]	@ (8007a18 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007978:	60fb      	str	r3, [r7, #12]
 800797a:	e045      	b.n	8007a08 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2b08      	cmp	r3, #8
 8007980:	d10a      	bne.n	8007998 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007982:	f7fe ffb7 	bl	80068f4 <LL_RCC_HSE_IsEnabledDiv2>
 8007986:	4603      	mov	r3, r0
 8007988:	2b01      	cmp	r3, #1
 800798a:	d102      	bne.n	8007992 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800798c:	4b22      	ldr	r3, [pc, #136]	@ (8007a18 <HAL_RCC_GetSysClockFreq+0xd0>)
 800798e:	60fb      	str	r3, [r7, #12]
 8007990:	e03a      	b.n	8007a08 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8007992:	4b22      	ldr	r3, [pc, #136]	@ (8007a1c <HAL_RCC_GetSysClockFreq+0xd4>)
 8007994:	60fb      	str	r3, [r7, #12]
 8007996:	e037      	b.n	8007a08 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8007998:	f7ff fab9 	bl	8006f0e <LL_RCC_PLL_GetMainSource>
 800799c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d003      	beq.n	80079ac <HAL_RCC_GetSysClockFreq+0x64>
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	2b03      	cmp	r3, #3
 80079a8:	d003      	beq.n	80079b2 <HAL_RCC_GetSysClockFreq+0x6a>
 80079aa:	e00d      	b.n	80079c8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80079ac:	4b1a      	ldr	r3, [pc, #104]	@ (8007a18 <HAL_RCC_GetSysClockFreq+0xd0>)
 80079ae:	60bb      	str	r3, [r7, #8]
        break;
 80079b0:	e015      	b.n	80079de <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80079b2:	f7fe ff9f 	bl	80068f4 <LL_RCC_HSE_IsEnabledDiv2>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d102      	bne.n	80079c2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80079bc:	4b16      	ldr	r3, [pc, #88]	@ (8007a18 <HAL_RCC_GetSysClockFreq+0xd0>)
 80079be:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80079c0:	e00d      	b.n	80079de <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80079c2:	4b16      	ldr	r3, [pc, #88]	@ (8007a1c <HAL_RCC_GetSysClockFreq+0xd4>)
 80079c4:	60bb      	str	r3, [r7, #8]
        break;
 80079c6:	e00a      	b.n	80079de <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80079c8:	f7ff f967 	bl	8006c9a <LL_RCC_MSI_GetRange>
 80079cc:	4603      	mov	r3, r0
 80079ce:	091b      	lsrs	r3, r3, #4
 80079d0:	f003 030f 	and.w	r3, r3, #15
 80079d4:	4a0f      	ldr	r2, [pc, #60]	@ (8007a14 <HAL_RCC_GetSysClockFreq+0xcc>)
 80079d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079da:	60bb      	str	r3, [r7, #8]
        break;
 80079dc:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80079de:	f7ff fa71 	bl	8006ec4 <LL_RCC_PLL_GetN>
 80079e2:	4602      	mov	r2, r0
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	fb03 f402 	mul.w	r4, r3, r2
 80079ea:	f7ff fa84 	bl	8006ef6 <LL_RCC_PLL_GetDivider>
 80079ee:	4603      	mov	r3, r0
 80079f0:	091b      	lsrs	r3, r3, #4
 80079f2:	3301      	adds	r3, #1
 80079f4:	fbb4 f4f3 	udiv	r4, r4, r3
 80079f8:	f7ff fa71 	bl	8006ede <LL_RCC_PLL_GetR>
 80079fc:	4603      	mov	r3, r0
 80079fe:	0f5b      	lsrs	r3, r3, #29
 8007a00:	3301      	adds	r3, #1
 8007a02:	fbb4 f3f3 	udiv	r3, r4, r3
 8007a06:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8007a08:	68fb      	ldr	r3, [r7, #12]
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3714      	adds	r7, #20
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd90      	pop	{r4, r7, pc}
 8007a12:	bf00      	nop
 8007a14:	0801128c 	.word	0x0801128c
 8007a18:	00f42400 	.word	0x00f42400
 8007a1c:	01e84800 	.word	0x01e84800

08007a20 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a20:	b598      	push	{r3, r4, r7, lr}
 8007a22:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007a24:	f7ff ff90 	bl	8007948 <HAL_RCC_GetSysClockFreq>
 8007a28:	4604      	mov	r4, r0
 8007a2a:	f7ff f9e9 	bl	8006e00 <LL_RCC_GetAHBPrescaler>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	091b      	lsrs	r3, r3, #4
 8007a32:	f003 030f 	and.w	r3, r3, #15
 8007a36:	4a03      	ldr	r2, [pc, #12]	@ (8007a44 <HAL_RCC_GetHCLKFreq+0x24>)
 8007a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a3c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	bd98      	pop	{r3, r4, r7, pc}
 8007a44:	0801122c 	.word	0x0801122c

08007a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a48:	b598      	push	{r3, r4, r7, lr}
 8007a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007a4c:	f7ff ffe8 	bl	8007a20 <HAL_RCC_GetHCLKFreq>
 8007a50:	4604      	mov	r4, r0
 8007a52:	f7ff f9ef 	bl	8006e34 <LL_RCC_GetAPB1Prescaler>
 8007a56:	4603      	mov	r3, r0
 8007a58:	0a1b      	lsrs	r3, r3, #8
 8007a5a:	f003 0307 	and.w	r3, r3, #7
 8007a5e:	4a04      	ldr	r2, [pc, #16]	@ (8007a70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a64:	f003 031f 	and.w	r3, r3, #31
 8007a68:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	bd98      	pop	{r3, r4, r7, pc}
 8007a70:	0801126c 	.word	0x0801126c

08007a74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a74:	b598      	push	{r3, r4, r7, lr}
 8007a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8007a78:	f7ff ffd2 	bl	8007a20 <HAL_RCC_GetHCLKFreq>
 8007a7c:	4604      	mov	r4, r0
 8007a7e:	f7ff f9e5 	bl	8006e4c <LL_RCC_GetAPB2Prescaler>
 8007a82:	4603      	mov	r3, r0
 8007a84:	0adb      	lsrs	r3, r3, #11
 8007a86:	f003 0307 	and.w	r3, r3, #7
 8007a8a:	4a04      	ldr	r2, [pc, #16]	@ (8007a9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8007a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a90:	f003 031f 	and.w	r3, r3, #31
 8007a94:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	bd98      	pop	{r3, r4, r7, pc}
 8007a9c:	0801126c 	.word	0x0801126c

08007aa0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8007aa0:	b590      	push	{r4, r7, lr}
 8007aa2:	b085      	sub	sp, #20
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2bb0      	cmp	r3, #176	@ 0xb0
 8007aac:	d903      	bls.n	8007ab6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8007aae:	4b15      	ldr	r3, [pc, #84]	@ (8007b04 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ab2:	60fb      	str	r3, [r7, #12]
 8007ab4:	e007      	b.n	8007ac6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	091b      	lsrs	r3, r3, #4
 8007aba:	f003 030f 	and.w	r3, r3, #15
 8007abe:	4a11      	ldr	r2, [pc, #68]	@ (8007b04 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ac4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8007ac6:	f7ff f9a7 	bl	8006e18 <LL_RCC_GetAHB4Prescaler>
 8007aca:	4603      	mov	r3, r0
 8007acc:	091b      	lsrs	r3, r3, #4
 8007ace:	f003 030f 	and.w	r3, r3, #15
 8007ad2:	4a0d      	ldr	r2, [pc, #52]	@ (8007b08 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8007ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ade:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8007b0c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8007ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ae8:	0c9c      	lsrs	r4, r3, #18
 8007aea:	f7fe fee5 	bl	80068b8 <HAL_PWREx_GetVoltageRange>
 8007aee:	4603      	mov	r3, r0
 8007af0:	4619      	mov	r1, r3
 8007af2:	4620      	mov	r0, r4
 8007af4:	f000 f80c 	bl	8007b10 <RCC_SetFlashLatency>
 8007af8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3714      	adds	r7, #20
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd90      	pop	{r4, r7, pc}
 8007b02:	bf00      	nop
 8007b04:	0801128c 	.word	0x0801128c
 8007b08:	0801122c 	.word	0x0801122c
 8007b0c:	431bde83 	.word	0x431bde83

08007b10 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007b10:	b590      	push	{r4, r7, lr}
 8007b12:	b093      	sub	sp, #76	@ 0x4c
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8007b1a:	4b37      	ldr	r3, [pc, #220]	@ (8007bf8 <RCC_SetFlashLatency+0xe8>)
 8007b1c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8007b20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007b22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8007b26:	4a35      	ldr	r2, [pc, #212]	@ (8007bfc <RCC_SetFlashLatency+0xec>)
 8007b28:	f107 031c 	add.w	r3, r7, #28
 8007b2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8007b2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8007b32:	4b33      	ldr	r3, [pc, #204]	@ (8007c00 <RCC_SetFlashLatency+0xf0>)
 8007b34:	f107 040c 	add.w	r4, r7, #12
 8007b38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007b3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007b3e:	2300      	movs	r3, #0
 8007b40:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b48:	d11a      	bne.n	8007b80 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b4e:	e013      	b.n	8007b78 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007b50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	3348      	adds	r3, #72	@ 0x48
 8007b56:	443b      	add	r3, r7
 8007b58:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d807      	bhi.n	8007b72 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007b62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	3348      	adds	r3, #72	@ 0x48
 8007b68:	443b      	add	r3, r7
 8007b6a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007b6e:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8007b70:	e020      	b.n	8007bb4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007b72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b74:	3301      	adds	r3, #1
 8007b76:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b7a:	2b03      	cmp	r3, #3
 8007b7c:	d9e8      	bls.n	8007b50 <RCC_SetFlashLatency+0x40>
 8007b7e:	e019      	b.n	8007bb4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007b80:	2300      	movs	r3, #0
 8007b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b84:	e013      	b.n	8007bae <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007b86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	3348      	adds	r3, #72	@ 0x48
 8007b8c:	443b      	add	r3, r7
 8007b8e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d807      	bhi.n	8007ba8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007b98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	3348      	adds	r3, #72	@ 0x48
 8007b9e:	443b      	add	r3, r7
 8007ba0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007ba4:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8007ba6:	e005      	b.n	8007bb4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007ba8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007baa:	3301      	adds	r3, #1
 8007bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007bae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d9e8      	bls.n	8007b86 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8007bb4:	4b13      	ldr	r3, [pc, #76]	@ (8007c04 <RCC_SetFlashLatency+0xf4>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f023 0207 	bic.w	r2, r3, #7
 8007bbc:	4911      	ldr	r1, [pc, #68]	@ (8007c04 <RCC_SetFlashLatency+0xf4>)
 8007bbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007bc4:	f7fa f95a 	bl	8001e7c <HAL_GetTick>
 8007bc8:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007bca:	e008      	b.n	8007bde <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007bcc:	f7fa f956 	bl	8001e7c <HAL_GetTick>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bd4:	1ad3      	subs	r3, r2, r3
 8007bd6:	2b02      	cmp	r3, #2
 8007bd8:	d901      	bls.n	8007bde <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	e007      	b.n	8007bee <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007bde:	4b09      	ldr	r3, [pc, #36]	@ (8007c04 <RCC_SetFlashLatency+0xf4>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 0307 	and.w	r3, r3, #7
 8007be6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d1ef      	bne.n	8007bcc <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	374c      	adds	r7, #76	@ 0x4c
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd90      	pop	{r4, r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	08011180 	.word	0x08011180
 8007bfc:	08011190 	.word	0x08011190
 8007c00:	0801119c 	.word	0x0801119c
 8007c04:	58004000 	.word	0x58004000

08007c08 <LL_RCC_LSE_IsEnabled>:
{
 8007c08:	b480      	push	{r7}
 8007c0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8007c0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c14:	f003 0301 	and.w	r3, r3, #1
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d101      	bne.n	8007c20 <LL_RCC_LSE_IsEnabled+0x18>
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e000      	b.n	8007c22 <LL_RCC_LSE_IsEnabled+0x1a>
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <LL_RCC_LSE_IsReady>:
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007c30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c38:	f003 0302 	and.w	r3, r3, #2
 8007c3c:	2b02      	cmp	r3, #2
 8007c3e:	d101      	bne.n	8007c44 <LL_RCC_LSE_IsReady+0x18>
 8007c40:	2301      	movs	r3, #1
 8007c42:	e000      	b.n	8007c46 <LL_RCC_LSE_IsReady+0x1a>
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <LL_RCC_SetRFWKPClockSource>:
{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8007c58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c60:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007c64:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8007c70:	bf00      	nop
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <LL_RCC_SetSMPSClockSource>:
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8007c84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c8a:	f023 0203 	bic.w	r2, r3, #3
 8007c8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8007c98:	bf00      	nop
 8007c9a:	370c      	adds	r7, #12
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <LL_RCC_SetSMPSPrescaler>:
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8007cac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cb2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007cb6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8007cc0:	bf00      	nop
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <LL_RCC_SetUSARTClockSource>:
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8007cd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cdc:	f023 0203 	bic.w	r2, r3, #3
 8007ce0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007cec:	bf00      	nop
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <LL_RCC_SetLPUARTClockSource>:
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007d00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d08:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007d0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007d18:	bf00      	nop
 8007d1a:	370c      	adds	r7, #12
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <LL_RCC_SetI2CClockSource>:
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007d2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d30:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	091b      	lsrs	r3, r3, #4
 8007d38:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007d3c:	43db      	mvns	r3, r3
 8007d3e:	401a      	ands	r2, r3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	011b      	lsls	r3, r3, #4
 8007d44:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007d48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007d52:	bf00      	nop
 8007d54:	370c      	adds	r7, #12
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr

08007d5e <LL_RCC_SetLPTIMClockSource>:
{
 8007d5e:	b480      	push	{r7}
 8007d60:	b083      	sub	sp, #12
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007d66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	0c1b      	lsrs	r3, r3, #16
 8007d72:	041b      	lsls	r3, r3, #16
 8007d74:	43db      	mvns	r3, r3
 8007d76:	401a      	ands	r2, r3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	041b      	lsls	r3, r3, #16
 8007d7c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007d80:	4313      	orrs	r3, r2
 8007d82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007d86:	bf00      	nop
 8007d88:	370c      	adds	r7, #12
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr

08007d92 <LL_RCC_SetSAIClockSource>:
{
 8007d92:	b480      	push	{r7}
 8007d94:	b083      	sub	sp, #12
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8007d9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007da2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007da6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4313      	orrs	r3, r2
 8007dae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007db2:	bf00      	nop
 8007db4:	370c      	adds	r7, #12
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr

08007dbe <LL_RCC_SetRNGClockSource>:
{
 8007dbe:	b480      	push	{r7}
 8007dc0:	b083      	sub	sp, #12
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007dc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dce:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007dd2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007dde:	bf00      	nop
 8007de0:	370c      	adds	r7, #12
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr

08007dea <LL_RCC_SetCLK48ClockSource>:
{
 8007dea:	b480      	push	{r7}
 8007dec:	b083      	sub	sp, #12
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8007df2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dfa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007dfe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4313      	orrs	r3, r2
 8007e06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007e0a:	bf00      	nop
 8007e0c:	370c      	adds	r7, #12
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr

08007e16 <LL_RCC_SetUSBClockSource>:
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b082      	sub	sp, #8
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f7ff ffe3 	bl	8007dea <LL_RCC_SetCLK48ClockSource>
}
 8007e24:	bf00      	nop
 8007e26:	3708      	adds	r7, #8
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <LL_RCC_SetADCClockSource>:
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007e34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e3c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007e40:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007e4c:	bf00      	nop
 8007e4e:	370c      	adds	r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <LL_RCC_SetRTCClockSource>:
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007e60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007e6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8007e78:	bf00      	nop
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <LL_RCC_GetRTCClockSource>:
{
 8007e84:	b480      	push	{r7}
 8007e86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007e88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr

08007e9e <LL_RCC_ForceBackupDomainReset>:
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007ea2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007eaa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007eae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007eb2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007eb6:	bf00      	nop
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <LL_RCC_ReleaseBackupDomainReset>:
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007ec4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ecc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007ed0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ed4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007ed8:	bf00      	nop
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr

08007ee2 <LL_RCC_PLLSAI1_Enable>:
{
 8007ee2:	b480      	push	{r7}
 8007ee4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007ee6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007ef0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007ef4:	6013      	str	r3, [r2, #0]
}
 8007ef6:	bf00      	nop
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <LL_RCC_PLLSAI1_Disable>:
{
 8007f00:	b480      	push	{r7}
 8007f02:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007f04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f0e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007f12:	6013      	str	r3, [r2, #0]
}
 8007f14:	bf00      	nop
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr

08007f1e <LL_RCC_PLLSAI1_IsReady>:
{
 8007f1e:	b480      	push	{r7}
 8007f20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8007f22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f30:	d101      	bne.n	8007f36 <LL_RCC_PLLSAI1_IsReady+0x18>
 8007f32:	2301      	movs	r3, #1
 8007f34:	e000      	b.n	8007f38 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr

08007f42 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b088      	sub	sp, #32
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007f4e:	2300      	movs	r3, #0
 8007f50:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d034      	beq.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f62:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007f66:	d021      	beq.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8007f68:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007f6c:	d81b      	bhi.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007f6e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007f72:	d01d      	beq.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8007f74:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007f78:	d815      	bhi.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00b      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8007f7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f82:	d110      	bne.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8007f84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f92:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8007f94:	e00d      	b.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	3304      	adds	r3, #4
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f000 f947 	bl	800822e <RCCEx_PLLSAI1_ConfigNP>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007fa4:	e005      	b.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	77fb      	strb	r3, [r7, #31]
        break;
 8007faa:	e002      	b.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007fac:	bf00      	nop
 8007fae:	e000      	b.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007fb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fb2:	7ffb      	ldrb	r3, [r7, #31]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d105      	bne.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7ff fee8 	bl	8007d92 <LL_RCC_SetSAIClockSource>
 8007fc2:	e001      	b.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fc4:	7ffb      	ldrb	r3, [r7, #31]
 8007fc6:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d046      	beq.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8007fd4:	f7ff ff56 	bl	8007e84 <LL_RCC_GetRTCClockSource>
 8007fd8:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fde:	69ba      	ldr	r2, [r7, #24]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d03c      	beq.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007fe4:	f7fe fc58 	bl	8006898 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d105      	bne.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7ff ff30 	bl	8007e58 <LL_RCC_SetRTCClockSource>
 8007ff8:	e02e      	b.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8007ffa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008002:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8008004:	f7ff ff4b 	bl	8007e9e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8008008:	f7ff ff5a 	bl	8007ec0 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008016:	4313      	orrs	r3, r2
 8008018:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800801a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8008024:	f7ff fdf0 	bl	8007c08 <LL_RCC_LSE_IsEnabled>
 8008028:	4603      	mov	r3, r0
 800802a:	2b01      	cmp	r3, #1
 800802c:	d114      	bne.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800802e:	f7f9 ff25 	bl	8001e7c <HAL_GetTick>
 8008032:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8008034:	e00b      	b.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008036:	f7f9 ff21 	bl	8001e7c <HAL_GetTick>
 800803a:	4602      	mov	r2, r0
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	1ad3      	subs	r3, r2, r3
 8008040:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008044:	4293      	cmp	r3, r2
 8008046:	d902      	bls.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8008048:	2303      	movs	r3, #3
 800804a:	77fb      	strb	r3, [r7, #31]
              break;
 800804c:	e004      	b.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800804e:	f7ff fded 	bl	8007c2c <LL_RCC_LSE_IsReady>
 8008052:	4603      	mov	r3, r0
 8008054:	2b01      	cmp	r3, #1
 8008056:	d1ee      	bne.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8008058:	7ffb      	ldrb	r3, [r7, #31]
 800805a:	77bb      	strb	r3, [r7, #30]
 800805c:	e001      	b.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800805e:	7ffb      	ldrb	r3, [r7, #31]
 8008060:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f003 0301 	and.w	r3, r3, #1
 800806a:	2b00      	cmp	r3, #0
 800806c:	d004      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	699b      	ldr	r3, [r3, #24]
 8008072:	4618      	mov	r0, r3
 8008074:	f7ff fe2a 	bl	8007ccc <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f003 0302 	and.w	r3, r3, #2
 8008080:	2b00      	cmp	r3, #0
 8008082:	d004      	beq.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	69db      	ldr	r3, [r3, #28]
 8008088:	4618      	mov	r0, r3
 800808a:	f7ff fe35 	bl	8007cf8 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 0310 	and.w	r3, r3, #16
 8008096:	2b00      	cmp	r3, #0
 8008098:	d004      	beq.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800809e:	4618      	mov	r0, r3
 80080a0:	f7ff fe5d 	bl	8007d5e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 0320 	and.w	r3, r3, #32
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d004      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7ff fe52 	bl	8007d5e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f003 0304 	and.w	r3, r3, #4
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d004      	beq.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a1b      	ldr	r3, [r3, #32]
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7ff fe2a 	bl	8007d24 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f003 0308 	and.w	r3, r3, #8
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d004      	beq.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7ff fe1f 	bl	8007d24 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d022      	beq.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7ff fe8d 	bl	8007e16 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008100:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008104:	d107      	bne.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8008106:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008110:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008114:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800811a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800811e:	d10b      	bne.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	3304      	adds	r3, #4
 8008124:	4618      	mov	r0, r3
 8008126:	f000 f8dd 	bl	80082e4 <RCCEx_PLLSAI1_ConfigNQ>
 800812a:	4603      	mov	r3, r0
 800812c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800812e:	7ffb      	ldrb	r3, [r7, #31]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d001      	beq.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8008134:	7ffb      	ldrb	r3, [r7, #31]
 8008136:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008140:	2b00      	cmp	r3, #0
 8008142:	d02b      	beq.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008148:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800814c:	d008      	beq.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008152:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008156:	d003      	beq.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800815c:	2b00      	cmp	r3, #0
 800815e:	d105      	bne.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008164:	4618      	mov	r0, r3
 8008166:	f7ff fe2a 	bl	8007dbe <LL_RCC_SetRNGClockSource>
 800816a:	e00a      	b.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008170:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008174:	60fb      	str	r3, [r7, #12]
 8008176:	2000      	movs	r0, #0
 8008178:	f7ff fe21 	bl	8007dbe <LL_RCC_SetRNGClockSource>
 800817c:	68f8      	ldr	r0, [r7, #12]
 800817e:	f7ff fe34 	bl	8007dea <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008186:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800818a:	d107      	bne.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800818c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008196:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800819a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d022      	beq.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081ac:	4618      	mov	r0, r3
 80081ae:	f7ff fe3d 	bl	8007e2c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081ba:	d107      	bne.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80081bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80081c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80081ca:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081d4:	d10b      	bne.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	3304      	adds	r3, #4
 80081da:	4618      	mov	r0, r3
 80081dc:	f000 f8dd 	bl	800839a <RCCEx_PLLSAI1_ConfigNR>
 80081e0:	4603      	mov	r3, r0
 80081e2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80081e4:	7ffb      	ldrb	r3, [r7, #31]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d001      	beq.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80081ea:	7ffb      	ldrb	r3, [r7, #31]
 80081ec:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d004      	beq.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081fe:	4618      	mov	r0, r3
 8008200:	f7ff fd26 	bl	8007c50 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800820c:	2b00      	cmp	r3, #0
 800820e:	d009      	beq.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008214:	4618      	mov	r0, r3
 8008216:	f7ff fd45 	bl	8007ca4 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800821e:	4618      	mov	r0, r3
 8008220:	f7ff fd2c 	bl	8007c7c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8008224:	7fbb      	ldrb	r3, [r7, #30]
}
 8008226:	4618      	mov	r0, r3
 8008228:	3720      	adds	r7, #32
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800822e:	b580      	push	{r7, lr}
 8008230:	b084      	sub	sp, #16
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008236:	2300      	movs	r3, #0
 8008238:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800823a:	f7ff fe61 	bl	8007f00 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800823e:	f7f9 fe1d 	bl	8001e7c <HAL_GetTick>
 8008242:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008244:	e009      	b.n	800825a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008246:	f7f9 fe19 	bl	8001e7c <HAL_GetTick>
 800824a:	4602      	mov	r2, r0
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	1ad3      	subs	r3, r2, r3
 8008250:	2b02      	cmp	r3, #2
 8008252:	d902      	bls.n	800825a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8008254:	2303      	movs	r3, #3
 8008256:	73fb      	strb	r3, [r7, #15]
      break;
 8008258:	e004      	b.n	8008264 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800825a:	f7ff fe60 	bl	8007f1e <LL_RCC_PLLSAI1_IsReady>
 800825e:	4603      	mov	r3, r0
 8008260:	2b00      	cmp	r3, #0
 8008262:	d1f0      	bne.n	8008246 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8008264:	7bfb      	ldrb	r3, [r7, #15]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d137      	bne.n	80082da <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800826a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	021b      	lsls	r3, r3, #8
 800827a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800827e:	4313      	orrs	r3, r2
 8008280:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8008282:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008294:	4313      	orrs	r3, r2
 8008296:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008298:	f7ff fe23 	bl	8007ee2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800829c:	f7f9 fdee 	bl	8001e7c <HAL_GetTick>
 80082a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80082a2:	e009      	b.n	80082b8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80082a4:	f7f9 fdea 	bl	8001e7c <HAL_GetTick>
 80082a8:	4602      	mov	r2, r0
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	1ad3      	subs	r3, r2, r3
 80082ae:	2b02      	cmp	r3, #2
 80082b0:	d902      	bls.n	80082b8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80082b2:	2303      	movs	r3, #3
 80082b4:	73fb      	strb	r3, [r7, #15]
        break;
 80082b6:	e004      	b.n	80082c2 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80082b8:	f7ff fe31 	bl	8007f1e <LL_RCC_PLLSAI1_IsReady>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d1f0      	bne.n	80082a4 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80082c2:	7bfb      	ldrb	r3, [r7, #15]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d108      	bne.n	80082da <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80082c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082cc:	691a      	ldr	r2, [r3, #16]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80082d6:	4313      	orrs	r3, r2
 80082d8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80082da:	7bfb      	ldrb	r3, [r7, #15]
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3710      	adds	r7, #16
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80082ec:	2300      	movs	r3, #0
 80082ee:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80082f0:	f7ff fe06 	bl	8007f00 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80082f4:	f7f9 fdc2 	bl	8001e7c <HAL_GetTick>
 80082f8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80082fa:	e009      	b.n	8008310 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80082fc:	f7f9 fdbe 	bl	8001e7c <HAL_GetTick>
 8008300:	4602      	mov	r2, r0
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	1ad3      	subs	r3, r2, r3
 8008306:	2b02      	cmp	r3, #2
 8008308:	d902      	bls.n	8008310 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800830a:	2303      	movs	r3, #3
 800830c:	73fb      	strb	r3, [r7, #15]
      break;
 800830e:	e004      	b.n	800831a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008310:	f7ff fe05 	bl	8007f1e <LL_RCC_PLLSAI1_IsReady>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d1f0      	bne.n	80082fc <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800831a:	7bfb      	ldrb	r3, [r7, #15]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d137      	bne.n	8008390 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008320:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	021b      	lsls	r3, r3, #8
 8008330:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008334:	4313      	orrs	r3, r2
 8008336:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8008338:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800833c:	691b      	ldr	r3, [r3, #16]
 800833e:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800834a:	4313      	orrs	r3, r2
 800834c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800834e:	f7ff fdc8 	bl	8007ee2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008352:	f7f9 fd93 	bl	8001e7c <HAL_GetTick>
 8008356:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008358:	e009      	b.n	800836e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800835a:	f7f9 fd8f 	bl	8001e7c <HAL_GetTick>
 800835e:	4602      	mov	r2, r0
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	1ad3      	subs	r3, r2, r3
 8008364:	2b02      	cmp	r3, #2
 8008366:	d902      	bls.n	800836e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8008368:	2303      	movs	r3, #3
 800836a:	73fb      	strb	r3, [r7, #15]
        break;
 800836c:	e004      	b.n	8008378 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800836e:	f7ff fdd6 	bl	8007f1e <LL_RCC_PLLSAI1_IsReady>
 8008372:	4603      	mov	r3, r0
 8008374:	2b01      	cmp	r3, #1
 8008376:	d1f0      	bne.n	800835a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8008378:	7bfb      	ldrb	r3, [r7, #15]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d108      	bne.n	8008390 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800837e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008382:	691a      	ldr	r2, [r3, #16]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	691b      	ldr	r3, [r3, #16]
 8008388:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800838c:	4313      	orrs	r3, r2
 800838e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008390:	7bfb      	ldrb	r3, [r7, #15]
}
 8008392:	4618      	mov	r0, r3
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b084      	sub	sp, #16
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80083a2:	2300      	movs	r3, #0
 80083a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80083a6:	f7ff fdab 	bl	8007f00 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80083aa:	f7f9 fd67 	bl	8001e7c <HAL_GetTick>
 80083ae:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80083b0:	e009      	b.n	80083c6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80083b2:	f7f9 fd63 	bl	8001e7c <HAL_GetTick>
 80083b6:	4602      	mov	r2, r0
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	1ad3      	subs	r3, r2, r3
 80083bc:	2b02      	cmp	r3, #2
 80083be:	d902      	bls.n	80083c6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80083c0:	2303      	movs	r3, #3
 80083c2:	73fb      	strb	r3, [r7, #15]
      break;
 80083c4:	e004      	b.n	80083d0 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80083c6:	f7ff fdaa 	bl	8007f1e <LL_RCC_PLLSAI1_IsReady>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d1f0      	bne.n	80083b2 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80083d0:	7bfb      	ldrb	r3, [r7, #15]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d137      	bne.n	8008446 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80083d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083da:	691b      	ldr	r3, [r3, #16]
 80083dc:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	021b      	lsls	r3, r3, #8
 80083e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80083ea:	4313      	orrs	r3, r2
 80083ec:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80083ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	68db      	ldr	r3, [r3, #12]
 80083fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008400:	4313      	orrs	r3, r2
 8008402:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008404:	f7ff fd6d 	bl	8007ee2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008408:	f7f9 fd38 	bl	8001e7c <HAL_GetTick>
 800840c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800840e:	e009      	b.n	8008424 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008410:	f7f9 fd34 	bl	8001e7c <HAL_GetTick>
 8008414:	4602      	mov	r2, r0
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	1ad3      	subs	r3, r2, r3
 800841a:	2b02      	cmp	r3, #2
 800841c:	d902      	bls.n	8008424 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800841e:	2303      	movs	r3, #3
 8008420:	73fb      	strb	r3, [r7, #15]
        break;
 8008422:	e004      	b.n	800842e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008424:	f7ff fd7b 	bl	8007f1e <LL_RCC_PLLSAI1_IsReady>
 8008428:	4603      	mov	r3, r0
 800842a:	2b01      	cmp	r3, #1
 800842c:	d1f0      	bne.n	8008410 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800842e:	7bfb      	ldrb	r3, [r7, #15]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d108      	bne.n	8008446 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008434:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008438:	691a      	ldr	r2, [r3, #16]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008442:	4313      	orrs	r3, r2
 8008444:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008446:	7bfb      	ldrb	r3, [r7, #15]
}
 8008448:	4618      	mov	r0, r3
 800844a:	3710      	adds	r7, #16
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d101      	bne.n	8008462 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	e049      	b.n	80084f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008468:	b2db      	uxtb	r3, r3
 800846a:	2b00      	cmp	r3, #0
 800846c:	d106      	bne.n	800847c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f7f9 f8fa 	bl	8001670 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2202      	movs	r2, #2
 8008480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	3304      	adds	r3, #4
 800848c:	4619      	mov	r1, r3
 800848e:	4610      	mov	r0, r2
 8008490:	f000 fa7c 	bl	800898c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2201      	movs	r2, #1
 80084a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2201      	movs	r2, #1
 80084a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2201      	movs	r2, #1
 80084d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2201      	movs	r2, #1
 80084e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3708      	adds	r7, #8
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
	...

08008500 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008500:	b480      	push	{r7}
 8008502:	b085      	sub	sp, #20
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800850e:	b2db      	uxtb	r3, r3
 8008510:	2b01      	cmp	r3, #1
 8008512:	d001      	beq.n	8008518 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	e036      	b.n	8008586 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2202      	movs	r2, #2
 800851c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	68da      	ldr	r2, [r3, #12]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f042 0201 	orr.w	r2, r2, #1
 800852e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a17      	ldr	r2, [pc, #92]	@ (8008594 <HAL_TIM_Base_Start_IT+0x94>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d004      	beq.n	8008544 <HAL_TIM_Base_Start_IT+0x44>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008542:	d115      	bne.n	8008570 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	689a      	ldr	r2, [r3, #8]
 800854a:	4b13      	ldr	r3, [pc, #76]	@ (8008598 <HAL_TIM_Base_Start_IT+0x98>)
 800854c:	4013      	ands	r3, r2
 800854e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2b06      	cmp	r3, #6
 8008554:	d015      	beq.n	8008582 <HAL_TIM_Base_Start_IT+0x82>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800855c:	d011      	beq.n	8008582 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f042 0201 	orr.w	r2, r2, #1
 800856c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800856e:	e008      	b.n	8008582 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f042 0201 	orr.w	r2, r2, #1
 800857e:	601a      	str	r2, [r3, #0]
 8008580:	e000      	b.n	8008584 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008582:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	3714      	adds	r7, #20
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop
 8008594:	40012c00 	.word	0x40012c00
 8008598:	00010007 	.word	0x00010007

0800859c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	f003 0302 	and.w	r3, r3, #2
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d020      	beq.n	8008600 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f003 0302 	and.w	r3, r3, #2
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d01b      	beq.n	8008600 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f06f 0202 	mvn.w	r2, #2
 80085d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2201      	movs	r2, #1
 80085d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	f003 0303 	and.w	r3, r3, #3
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d003      	beq.n	80085ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 f9b2 	bl	8008950 <HAL_TIM_IC_CaptureCallback>
 80085ec:	e005      	b.n	80085fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 f9a4 	bl	800893c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 f9b5 	bl	8008964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2200      	movs	r2, #0
 80085fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	f003 0304 	and.w	r3, r3, #4
 8008606:	2b00      	cmp	r3, #0
 8008608:	d020      	beq.n	800864c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f003 0304 	and.w	r3, r3, #4
 8008610:	2b00      	cmp	r3, #0
 8008612:	d01b      	beq.n	800864c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f06f 0204 	mvn.w	r2, #4
 800861c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2202      	movs	r2, #2
 8008622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	699b      	ldr	r3, [r3, #24]
 800862a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800862e:	2b00      	cmp	r3, #0
 8008630:	d003      	beq.n	800863a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 f98c 	bl	8008950 <HAL_TIM_IC_CaptureCallback>
 8008638:	e005      	b.n	8008646 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 f97e 	bl	800893c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 f98f 	bl	8008964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	f003 0308 	and.w	r3, r3, #8
 8008652:	2b00      	cmp	r3, #0
 8008654:	d020      	beq.n	8008698 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	f003 0308 	and.w	r3, r3, #8
 800865c:	2b00      	cmp	r3, #0
 800865e:	d01b      	beq.n	8008698 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f06f 0208 	mvn.w	r2, #8
 8008668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2204      	movs	r2, #4
 800866e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	69db      	ldr	r3, [r3, #28]
 8008676:	f003 0303 	and.w	r3, r3, #3
 800867a:	2b00      	cmp	r3, #0
 800867c:	d003      	beq.n	8008686 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 f966 	bl	8008950 <HAL_TIM_IC_CaptureCallback>
 8008684:	e005      	b.n	8008692 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 f958 	bl	800893c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 f969 	bl	8008964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2200      	movs	r2, #0
 8008696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	f003 0310 	and.w	r3, r3, #16
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d020      	beq.n	80086e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f003 0310 	and.w	r3, r3, #16
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d01b      	beq.n	80086e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f06f 0210 	mvn.w	r2, #16
 80086b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2208      	movs	r2, #8
 80086ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	69db      	ldr	r3, [r3, #28]
 80086c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d003      	beq.n	80086d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 f940 	bl	8008950 <HAL_TIM_IC_CaptureCallback>
 80086d0:	e005      	b.n	80086de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 f932 	bl	800893c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 f943 	bl	8008964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2200      	movs	r2, #0
 80086e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	f003 0301 	and.w	r3, r3, #1
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00c      	beq.n	8008708 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f003 0301 	and.w	r3, r3, #1
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d007      	beq.n	8008708 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f06f 0201 	mvn.w	r2, #1
 8008700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f7f8 fbf0 	bl	8000ee8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800870e:	2b00      	cmp	r3, #0
 8008710:	d104      	bne.n	800871c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008718:	2b00      	cmp	r3, #0
 800871a:	d00c      	beq.n	8008736 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008722:	2b00      	cmp	r3, #0
 8008724:	d007      	beq.n	8008736 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800872e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 faa1 	bl	8008c78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800873c:	2b00      	cmp	r3, #0
 800873e:	d00c      	beq.n	800875a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008746:	2b00      	cmp	r3, #0
 8008748:	d007      	beq.n	800875a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 fa99 	bl	8008c8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008760:	2b00      	cmp	r3, #0
 8008762:	d00c      	beq.n	800877e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800876a:	2b00      	cmp	r3, #0
 800876c:	d007      	beq.n	800877e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 f8fd 	bl	8008978 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	f003 0320 	and.w	r3, r3, #32
 8008784:	2b00      	cmp	r3, #0
 8008786:	d00c      	beq.n	80087a2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f003 0320 	and.w	r3, r3, #32
 800878e:	2b00      	cmp	r3, #0
 8008790:	d007      	beq.n	80087a2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f06f 0220 	mvn.w	r2, #32
 800879a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 fa61 	bl	8008c64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80087a2:	bf00      	nop
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b084      	sub	sp, #16
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
 80087b2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80087b4:	2300      	movs	r3, #0
 80087b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d101      	bne.n	80087c6 <HAL_TIM_ConfigClockSource+0x1c>
 80087c2:	2302      	movs	r3, #2
 80087c4:	e0b6      	b.n	8008934 <HAL_TIM_ConfigClockSource+0x18a>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2201      	movs	r2, #1
 80087ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2202      	movs	r2, #2
 80087d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80087e4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80087e8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80087f0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	68ba      	ldr	r2, [r7, #8]
 80087f8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008802:	d03e      	beq.n	8008882 <HAL_TIM_ConfigClockSource+0xd8>
 8008804:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008808:	f200 8087 	bhi.w	800891a <HAL_TIM_ConfigClockSource+0x170>
 800880c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008810:	f000 8086 	beq.w	8008920 <HAL_TIM_ConfigClockSource+0x176>
 8008814:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008818:	d87f      	bhi.n	800891a <HAL_TIM_ConfigClockSource+0x170>
 800881a:	2b70      	cmp	r3, #112	@ 0x70
 800881c:	d01a      	beq.n	8008854 <HAL_TIM_ConfigClockSource+0xaa>
 800881e:	2b70      	cmp	r3, #112	@ 0x70
 8008820:	d87b      	bhi.n	800891a <HAL_TIM_ConfigClockSource+0x170>
 8008822:	2b60      	cmp	r3, #96	@ 0x60
 8008824:	d050      	beq.n	80088c8 <HAL_TIM_ConfigClockSource+0x11e>
 8008826:	2b60      	cmp	r3, #96	@ 0x60
 8008828:	d877      	bhi.n	800891a <HAL_TIM_ConfigClockSource+0x170>
 800882a:	2b50      	cmp	r3, #80	@ 0x50
 800882c:	d03c      	beq.n	80088a8 <HAL_TIM_ConfigClockSource+0xfe>
 800882e:	2b50      	cmp	r3, #80	@ 0x50
 8008830:	d873      	bhi.n	800891a <HAL_TIM_ConfigClockSource+0x170>
 8008832:	2b40      	cmp	r3, #64	@ 0x40
 8008834:	d058      	beq.n	80088e8 <HAL_TIM_ConfigClockSource+0x13e>
 8008836:	2b40      	cmp	r3, #64	@ 0x40
 8008838:	d86f      	bhi.n	800891a <HAL_TIM_ConfigClockSource+0x170>
 800883a:	2b30      	cmp	r3, #48	@ 0x30
 800883c:	d064      	beq.n	8008908 <HAL_TIM_ConfigClockSource+0x15e>
 800883e:	2b30      	cmp	r3, #48	@ 0x30
 8008840:	d86b      	bhi.n	800891a <HAL_TIM_ConfigClockSource+0x170>
 8008842:	2b20      	cmp	r3, #32
 8008844:	d060      	beq.n	8008908 <HAL_TIM_ConfigClockSource+0x15e>
 8008846:	2b20      	cmp	r3, #32
 8008848:	d867      	bhi.n	800891a <HAL_TIM_ConfigClockSource+0x170>
 800884a:	2b00      	cmp	r3, #0
 800884c:	d05c      	beq.n	8008908 <HAL_TIM_ConfigClockSource+0x15e>
 800884e:	2b10      	cmp	r3, #16
 8008850:	d05a      	beq.n	8008908 <HAL_TIM_ConfigClockSource+0x15e>
 8008852:	e062      	b.n	800891a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008864:	f000 f97e 	bl	8008b64 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008876:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	68ba      	ldr	r2, [r7, #8]
 800887e:	609a      	str	r2, [r3, #8]
      break;
 8008880:	e04f      	b.n	8008922 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008892:	f000 f967 	bl	8008b64 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	689a      	ldr	r2, [r3, #8]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80088a4:	609a      	str	r2, [r3, #8]
      break;
 80088a6:	e03c      	b.n	8008922 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80088b4:	461a      	mov	r2, r3
 80088b6:	f000 f8d9 	bl	8008a6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	2150      	movs	r1, #80	@ 0x50
 80088c0:	4618      	mov	r0, r3
 80088c2:	f000 f932 	bl	8008b2a <TIM_ITRx_SetConfig>
      break;
 80088c6:	e02c      	b.n	8008922 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80088d4:	461a      	mov	r2, r3
 80088d6:	f000 f8f8 	bl	8008aca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2160      	movs	r1, #96	@ 0x60
 80088e0:	4618      	mov	r0, r3
 80088e2:	f000 f922 	bl	8008b2a <TIM_ITRx_SetConfig>
      break;
 80088e6:	e01c      	b.n	8008922 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80088f4:	461a      	mov	r2, r3
 80088f6:	f000 f8b9 	bl	8008a6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2140      	movs	r1, #64	@ 0x40
 8008900:	4618      	mov	r0, r3
 8008902:	f000 f912 	bl	8008b2a <TIM_ITRx_SetConfig>
      break;
 8008906:	e00c      	b.n	8008922 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4619      	mov	r1, r3
 8008912:	4610      	mov	r0, r2
 8008914:	f000 f909 	bl	8008b2a <TIM_ITRx_SetConfig>
      break;
 8008918:	e003      	b.n	8008922 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	73fb      	strb	r3, [r7, #15]
      break;
 800891e:	e000      	b.n	8008922 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008920:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2201      	movs	r2, #1
 8008926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008932:	7bfb      	ldrb	r3, [r7, #15]
}
 8008934:	4618      	mov	r0, r3
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008944:	bf00      	nop
 8008946:	370c      	adds	r7, #12
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008958:	bf00      	nop
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800896c:	bf00      	nop
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008980:	bf00      	nop
 8008982:	370c      	adds	r7, #12
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a30      	ldr	r2, [pc, #192]	@ (8008a60 <TIM_Base_SetConfig+0xd4>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d003      	beq.n	80089ac <TIM_Base_SetConfig+0x20>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089aa:	d108      	bne.n	80089be <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	68fa      	ldr	r2, [r7, #12]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	4a27      	ldr	r2, [pc, #156]	@ (8008a60 <TIM_Base_SetConfig+0xd4>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d00b      	beq.n	80089de <TIM_Base_SetConfig+0x52>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089cc:	d007      	beq.n	80089de <TIM_Base_SetConfig+0x52>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	4a24      	ldr	r2, [pc, #144]	@ (8008a64 <TIM_Base_SetConfig+0xd8>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d003      	beq.n	80089de <TIM_Base_SetConfig+0x52>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	4a23      	ldr	r2, [pc, #140]	@ (8008a68 <TIM_Base_SetConfig+0xdc>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d108      	bne.n	80089f0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	68fa      	ldr	r2, [r7, #12]
 80089ec:	4313      	orrs	r3, r2
 80089ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	695b      	ldr	r3, [r3, #20]
 80089fa:	4313      	orrs	r3, r2
 80089fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	68fa      	ldr	r2, [r7, #12]
 8008a02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	689a      	ldr	r2, [r3, #8]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	4a12      	ldr	r2, [pc, #72]	@ (8008a60 <TIM_Base_SetConfig+0xd4>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d007      	beq.n	8008a2c <TIM_Base_SetConfig+0xa0>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4a11      	ldr	r2, [pc, #68]	@ (8008a64 <TIM_Base_SetConfig+0xd8>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d003      	beq.n	8008a2c <TIM_Base_SetConfig+0xa0>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	4a10      	ldr	r2, [pc, #64]	@ (8008a68 <TIM_Base_SetConfig+0xdc>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d103      	bne.n	8008a34 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	691a      	ldr	r2, [r3, #16]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	691b      	ldr	r3, [r3, #16]
 8008a3e:	f003 0301 	and.w	r3, r3, #1
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d105      	bne.n	8008a52 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	691b      	ldr	r3, [r3, #16]
 8008a4a:	f023 0201 	bic.w	r2, r3, #1
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	611a      	str	r2, [r3, #16]
  }
}
 8008a52:	bf00      	nop
 8008a54:	3714      	adds	r7, #20
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop
 8008a60:	40012c00 	.word	0x40012c00
 8008a64:	40014400 	.word	0x40014400
 8008a68:	40014800 	.word	0x40014800

08008a6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b087      	sub	sp, #28
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	6a1b      	ldr	r3, [r3, #32]
 8008a7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	6a1b      	ldr	r3, [r3, #32]
 8008a82:	f023 0201 	bic.w	r2, r3, #1
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	699b      	ldr	r3, [r3, #24]
 8008a8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008a96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	011b      	lsls	r3, r3, #4
 8008a9c:	693a      	ldr	r2, [r7, #16]
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	f023 030a 	bic.w	r3, r3, #10
 8008aa8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008aaa:	697a      	ldr	r2, [r7, #20]
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	693a      	ldr	r2, [r7, #16]
 8008ab6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	697a      	ldr	r2, [r7, #20]
 8008abc:	621a      	str	r2, [r3, #32]
}
 8008abe:	bf00      	nop
 8008ac0:	371c      	adds	r7, #28
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr

08008aca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008aca:	b480      	push	{r7}
 8008acc:	b087      	sub	sp, #28
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	60f8      	str	r0, [r7, #12]
 8008ad2:	60b9      	str	r1, [r7, #8]
 8008ad4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6a1b      	ldr	r3, [r3, #32]
 8008ada:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	6a1b      	ldr	r3, [r3, #32]
 8008ae0:	f023 0210 	bic.w	r2, r3, #16
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	699b      	ldr	r3, [r3, #24]
 8008aec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008af4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	031b      	lsls	r3, r3, #12
 8008afa:	693a      	ldr	r2, [r7, #16]
 8008afc:	4313      	orrs	r3, r2
 8008afe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008b06:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	011b      	lsls	r3, r3, #4
 8008b0c:	697a      	ldr	r2, [r7, #20]
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	693a      	ldr	r2, [r7, #16]
 8008b16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	697a      	ldr	r2, [r7, #20]
 8008b1c:	621a      	str	r2, [r3, #32]
}
 8008b1e:	bf00      	nop
 8008b20:	371c      	adds	r7, #28
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr

08008b2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008b2a:	b480      	push	{r7}
 8008b2c:	b085      	sub	sp, #20
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
 8008b32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008b40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b46:	683a      	ldr	r2, [r7, #0]
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	f043 0307 	orr.w	r3, r3, #7
 8008b50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	609a      	str	r2, [r3, #8]
}
 8008b58:	bf00      	nop
 8008b5a:	3714      	adds	r7, #20
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b087      	sub	sp, #28
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	60b9      	str	r1, [r7, #8]
 8008b6e:	607a      	str	r2, [r7, #4]
 8008b70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008b7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	021a      	lsls	r2, r3, #8
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	431a      	orrs	r2, r3
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	697a      	ldr	r2, [r7, #20]
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	697a      	ldr	r2, [r7, #20]
 8008b96:	609a      	str	r2, [r3, #8]
}
 8008b98:	bf00      	nop
 8008b9a:	371c      	adds	r7, #28
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr

08008ba4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b085      	sub	sp, #20
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d101      	bne.n	8008bbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008bb8:	2302      	movs	r3, #2
 8008bba:	e04a      	b.n	8008c52 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2202      	movs	r2, #2
 8008bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a1f      	ldr	r2, [pc, #124]	@ (8008c60 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d108      	bne.n	8008bf8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008bec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bfe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	68fa      	ldr	r2, [r7, #12]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a12      	ldr	r2, [pc, #72]	@ (8008c60 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d004      	beq.n	8008c26 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c24:	d10c      	bne.n	8008c40 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	68ba      	ldr	r2, [r7, #8]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	68ba      	ldr	r2, [r7, #8]
 8008c3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2201      	movs	r2, #1
 8008c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008c50:	2300      	movs	r3, #0
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3714      	adds	r7, #20
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr
 8008c5e:	bf00      	nop
 8008c60:	40012c00 	.word	0x40012c00

08008c64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c6c:	bf00      	nop
 8008c6e:	370c      	adds	r7, #12
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c80:	bf00      	nop
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008c94:	bf00      	nop
 8008c96:	370c      	adds	r7, #12
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <LL_RCC_GetUSARTClockSource>:
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8008ca8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008cac:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4013      	ands	r3, r2
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	370c      	adds	r7, #12
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <LL_RCC_GetLPUARTClockSource>:
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008cc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008ccc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	4013      	ands	r3, r2
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	370c      	adds	r7, #12
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr

08008ce0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d101      	bne.n	8008cf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	e042      	b.n	8008d78 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d106      	bne.n	8008d0a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 f83b 	bl	8008d80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2224      	movs	r2, #36	@ 0x24
 8008d0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f022 0201 	bic.w	r2, r2, #1
 8008d20:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d002      	beq.n	8008d30 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 fae8 	bl	8009300 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 f8bd 	bl	8008eb0 <UART_SetConfig>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d101      	bne.n	8008d40 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e01b      	b.n	8008d78 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	685a      	ldr	r2, [r3, #4]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008d4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	689a      	ldr	r2, [r3, #8]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008d5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f042 0201 	orr.w	r2, r2, #1
 8008d6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 fb67 	bl	8009444 <UART_CheckIdleState>
 8008d76:	4603      	mov	r3, r0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3708      	adds	r7, #8
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8008d88:	bf00      	nop
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b08a      	sub	sp, #40	@ 0x28
 8008d98:	af02      	add	r7, sp, #8
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	60b9      	str	r1, [r7, #8]
 8008d9e:	603b      	str	r3, [r7, #0]
 8008da0:	4613      	mov	r3, r2
 8008da2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008daa:	2b20      	cmp	r3, #32
 8008dac:	d17b      	bne.n	8008ea6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d002      	beq.n	8008dba <HAL_UART_Transmit+0x26>
 8008db4:	88fb      	ldrh	r3, [r7, #6]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d101      	bne.n	8008dbe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e074      	b.n	8008ea8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2221      	movs	r2, #33	@ 0x21
 8008dca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008dce:	f7f9 f855 	bl	8001e7c <HAL_GetTick>
 8008dd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	88fa      	ldrh	r2, [r7, #6]
 8008dd8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	88fa      	ldrh	r2, [r7, #6]
 8008de0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008dec:	d108      	bne.n	8008e00 <HAL_UART_Transmit+0x6c>
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	691b      	ldr	r3, [r3, #16]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d104      	bne.n	8008e00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008df6:	2300      	movs	r3, #0
 8008df8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	61bb      	str	r3, [r7, #24]
 8008dfe:	e003      	b.n	8008e08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e04:	2300      	movs	r3, #0
 8008e06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008e08:	e030      	b.n	8008e6c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	9300      	str	r3, [sp, #0]
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	2200      	movs	r2, #0
 8008e12:	2180      	movs	r1, #128	@ 0x80
 8008e14:	68f8      	ldr	r0, [r7, #12]
 8008e16:	f000 fbbf 	bl	8009598 <UART_WaitOnFlagUntilTimeout>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d005      	beq.n	8008e2c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2220      	movs	r2, #32
 8008e24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008e28:	2303      	movs	r3, #3
 8008e2a:	e03d      	b.n	8008ea8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d10b      	bne.n	8008e4a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008e32:	69bb      	ldr	r3, [r7, #24]
 8008e34:	881b      	ldrh	r3, [r3, #0]
 8008e36:	461a      	mov	r2, r3
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e40:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	3302      	adds	r3, #2
 8008e46:	61bb      	str	r3, [r7, #24]
 8008e48:	e007      	b.n	8008e5a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e4a:	69fb      	ldr	r3, [r7, #28]
 8008e4c:	781a      	ldrb	r2, [r3, #0]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008e54:	69fb      	ldr	r3, [r7, #28]
 8008e56:	3301      	adds	r3, #1
 8008e58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	3b01      	subs	r3, #1
 8008e64:	b29a      	uxth	r2, r3
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d1c8      	bne.n	8008e0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	9300      	str	r3, [sp, #0]
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	2140      	movs	r1, #64	@ 0x40
 8008e82:	68f8      	ldr	r0, [r7, #12]
 8008e84:	f000 fb88 	bl	8009598 <UART_WaitOnFlagUntilTimeout>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d005      	beq.n	8008e9a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2220      	movs	r2, #32
 8008e92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008e96:	2303      	movs	r3, #3
 8008e98:	e006      	b.n	8008ea8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2220      	movs	r2, #32
 8008e9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	e000      	b.n	8008ea8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008ea6:	2302      	movs	r3, #2
  }
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3720      	adds	r7, #32
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008eb4:	b08c      	sub	sp, #48	@ 0x30
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	689a      	ldr	r2, [r3, #8]
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	691b      	ldr	r3, [r3, #16]
 8008ec8:	431a      	orrs	r2, r3
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	695b      	ldr	r3, [r3, #20]
 8008ece:	431a      	orrs	r2, r3
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	69db      	ldr	r3, [r3, #28]
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	4baf      	ldr	r3, [pc, #700]	@ (800919c <UART_SetConfig+0x2ec>)
 8008ee0:	4013      	ands	r3, r2
 8008ee2:	697a      	ldr	r2, [r7, #20]
 8008ee4:	6812      	ldr	r2, [r2, #0]
 8008ee6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ee8:	430b      	orrs	r3, r1
 8008eea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	68da      	ldr	r2, [r3, #12]
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	430a      	orrs	r2, r1
 8008f00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	699b      	ldr	r3, [r3, #24]
 8008f06:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4aa4      	ldr	r2, [pc, #656]	@ (80091a0 <UART_SetConfig+0x2f0>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d004      	beq.n	8008f1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	6a1b      	ldr	r3, [r3, #32]
 8008f16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	689b      	ldr	r3, [r3, #8]
 8008f22:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008f26:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008f2a:	697a      	ldr	r2, [r7, #20]
 8008f2c:	6812      	ldr	r2, [r2, #0]
 8008f2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f30:	430b      	orrs	r3, r1
 8008f32:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f3a:	f023 010f 	bic.w	r1, r3, #15
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	430a      	orrs	r2, r1
 8008f48:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a95      	ldr	r2, [pc, #596]	@ (80091a4 <UART_SetConfig+0x2f4>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d125      	bne.n	8008fa0 <UART_SetConfig+0xf0>
 8008f54:	2003      	movs	r0, #3
 8008f56:	f7ff fea3 	bl	8008ca0 <LL_RCC_GetUSARTClockSource>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b03      	cmp	r3, #3
 8008f5e:	d81b      	bhi.n	8008f98 <UART_SetConfig+0xe8>
 8008f60:	a201      	add	r2, pc, #4	@ (adr r2, 8008f68 <UART_SetConfig+0xb8>)
 8008f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f66:	bf00      	nop
 8008f68:	08008f79 	.word	0x08008f79
 8008f6c:	08008f89 	.word	0x08008f89
 8008f70:	08008f81 	.word	0x08008f81
 8008f74:	08008f91 	.word	0x08008f91
 8008f78:	2301      	movs	r3, #1
 8008f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f7e:	e042      	b.n	8009006 <UART_SetConfig+0x156>
 8008f80:	2302      	movs	r3, #2
 8008f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f86:	e03e      	b.n	8009006 <UART_SetConfig+0x156>
 8008f88:	2304      	movs	r3, #4
 8008f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f8e:	e03a      	b.n	8009006 <UART_SetConfig+0x156>
 8008f90:	2308      	movs	r3, #8
 8008f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f96:	e036      	b.n	8009006 <UART_SetConfig+0x156>
 8008f98:	2310      	movs	r3, #16
 8008f9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f9e:	e032      	b.n	8009006 <UART_SetConfig+0x156>
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a7e      	ldr	r2, [pc, #504]	@ (80091a0 <UART_SetConfig+0x2f0>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d12a      	bne.n	8009000 <UART_SetConfig+0x150>
 8008faa:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8008fae:	f7ff fe87 	bl	8008cc0 <LL_RCC_GetLPUARTClockSource>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008fb8:	d01a      	beq.n	8008ff0 <UART_SetConfig+0x140>
 8008fba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008fbe:	d81b      	bhi.n	8008ff8 <UART_SetConfig+0x148>
 8008fc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008fc4:	d00c      	beq.n	8008fe0 <UART_SetConfig+0x130>
 8008fc6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008fca:	d815      	bhi.n	8008ff8 <UART_SetConfig+0x148>
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d003      	beq.n	8008fd8 <UART_SetConfig+0x128>
 8008fd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fd4:	d008      	beq.n	8008fe8 <UART_SetConfig+0x138>
 8008fd6:	e00f      	b.n	8008ff8 <UART_SetConfig+0x148>
 8008fd8:	2300      	movs	r3, #0
 8008fda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fde:	e012      	b.n	8009006 <UART_SetConfig+0x156>
 8008fe0:	2302      	movs	r3, #2
 8008fe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fe6:	e00e      	b.n	8009006 <UART_SetConfig+0x156>
 8008fe8:	2304      	movs	r3, #4
 8008fea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fee:	e00a      	b.n	8009006 <UART_SetConfig+0x156>
 8008ff0:	2308      	movs	r3, #8
 8008ff2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ff6:	e006      	b.n	8009006 <UART_SetConfig+0x156>
 8008ff8:	2310      	movs	r3, #16
 8008ffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ffe:	e002      	b.n	8009006 <UART_SetConfig+0x156>
 8009000:	2310      	movs	r3, #16
 8009002:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a65      	ldr	r2, [pc, #404]	@ (80091a0 <UART_SetConfig+0x2f0>)
 800900c:	4293      	cmp	r3, r2
 800900e:	f040 8097 	bne.w	8009140 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009012:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009016:	2b08      	cmp	r3, #8
 8009018:	d823      	bhi.n	8009062 <UART_SetConfig+0x1b2>
 800901a:	a201      	add	r2, pc, #4	@ (adr r2, 8009020 <UART_SetConfig+0x170>)
 800901c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009020:	08009045 	.word	0x08009045
 8009024:	08009063 	.word	0x08009063
 8009028:	0800904d 	.word	0x0800904d
 800902c:	08009063 	.word	0x08009063
 8009030:	08009053 	.word	0x08009053
 8009034:	08009063 	.word	0x08009063
 8009038:	08009063 	.word	0x08009063
 800903c:	08009063 	.word	0x08009063
 8009040:	0800905b 	.word	0x0800905b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009044:	f7fe fd00 	bl	8007a48 <HAL_RCC_GetPCLK1Freq>
 8009048:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800904a:	e010      	b.n	800906e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800904c:	4b56      	ldr	r3, [pc, #344]	@ (80091a8 <UART_SetConfig+0x2f8>)
 800904e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009050:	e00d      	b.n	800906e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009052:	f7fe fc79 	bl	8007948 <HAL_RCC_GetSysClockFreq>
 8009056:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009058:	e009      	b.n	800906e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800905a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800905e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009060:	e005      	b.n	800906e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8009062:	2300      	movs	r3, #0
 8009064:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009066:	2301      	movs	r3, #1
 8009068:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800906c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800906e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009070:	2b00      	cmp	r3, #0
 8009072:	f000 812b 	beq.w	80092cc <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800907a:	4a4c      	ldr	r2, [pc, #304]	@ (80091ac <UART_SetConfig+0x2fc>)
 800907c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009080:	461a      	mov	r2, r3
 8009082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009084:	fbb3 f3f2 	udiv	r3, r3, r2
 8009088:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	685a      	ldr	r2, [r3, #4]
 800908e:	4613      	mov	r3, r2
 8009090:	005b      	lsls	r3, r3, #1
 8009092:	4413      	add	r3, r2
 8009094:	69ba      	ldr	r2, [r7, #24]
 8009096:	429a      	cmp	r2, r3
 8009098:	d305      	bcc.n	80090a6 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80090a0:	69ba      	ldr	r2, [r7, #24]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d903      	bls.n	80090ae <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80090a6:	2301      	movs	r3, #1
 80090a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80090ac:	e10e      	b.n	80092cc <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b0:	2200      	movs	r2, #0
 80090b2:	60bb      	str	r3, [r7, #8]
 80090b4:	60fa      	str	r2, [r7, #12]
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090ba:	4a3c      	ldr	r2, [pc, #240]	@ (80091ac <UART_SetConfig+0x2fc>)
 80090bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	2200      	movs	r2, #0
 80090c4:	603b      	str	r3, [r7, #0]
 80090c6:	607a      	str	r2, [r7, #4]
 80090c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80090d0:	f7f7 fd42 	bl	8000b58 <__aeabi_uldivmod>
 80090d4:	4602      	mov	r2, r0
 80090d6:	460b      	mov	r3, r1
 80090d8:	4610      	mov	r0, r2
 80090da:	4619      	mov	r1, r3
 80090dc:	f04f 0200 	mov.w	r2, #0
 80090e0:	f04f 0300 	mov.w	r3, #0
 80090e4:	020b      	lsls	r3, r1, #8
 80090e6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80090ea:	0202      	lsls	r2, r0, #8
 80090ec:	6979      	ldr	r1, [r7, #20]
 80090ee:	6849      	ldr	r1, [r1, #4]
 80090f0:	0849      	lsrs	r1, r1, #1
 80090f2:	2000      	movs	r0, #0
 80090f4:	460c      	mov	r4, r1
 80090f6:	4605      	mov	r5, r0
 80090f8:	eb12 0804 	adds.w	r8, r2, r4
 80090fc:	eb43 0905 	adc.w	r9, r3, r5
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	469a      	mov	sl, r3
 8009108:	4693      	mov	fp, r2
 800910a:	4652      	mov	r2, sl
 800910c:	465b      	mov	r3, fp
 800910e:	4640      	mov	r0, r8
 8009110:	4649      	mov	r1, r9
 8009112:	f7f7 fd21 	bl	8000b58 <__aeabi_uldivmod>
 8009116:	4602      	mov	r2, r0
 8009118:	460b      	mov	r3, r1
 800911a:	4613      	mov	r3, r2
 800911c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800911e:	6a3b      	ldr	r3, [r7, #32]
 8009120:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009124:	d308      	bcc.n	8009138 <UART_SetConfig+0x288>
 8009126:	6a3b      	ldr	r3, [r7, #32]
 8009128:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800912c:	d204      	bcs.n	8009138 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	6a3a      	ldr	r2, [r7, #32]
 8009134:	60da      	str	r2, [r3, #12]
 8009136:	e0c9      	b.n	80092cc <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800913e:	e0c5      	b.n	80092cc <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	69db      	ldr	r3, [r3, #28]
 8009144:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009148:	d16d      	bne.n	8009226 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800914a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800914e:	3b01      	subs	r3, #1
 8009150:	2b07      	cmp	r3, #7
 8009152:	d82d      	bhi.n	80091b0 <UART_SetConfig+0x300>
 8009154:	a201      	add	r2, pc, #4	@ (adr r2, 800915c <UART_SetConfig+0x2ac>)
 8009156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800915a:	bf00      	nop
 800915c:	0800917d 	.word	0x0800917d
 8009160:	08009185 	.word	0x08009185
 8009164:	080091b1 	.word	0x080091b1
 8009168:	0800918b 	.word	0x0800918b
 800916c:	080091b1 	.word	0x080091b1
 8009170:	080091b1 	.word	0x080091b1
 8009174:	080091b1 	.word	0x080091b1
 8009178:	08009193 	.word	0x08009193
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800917c:	f7fe fc7a 	bl	8007a74 <HAL_RCC_GetPCLK2Freq>
 8009180:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009182:	e01b      	b.n	80091bc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009184:	4b08      	ldr	r3, [pc, #32]	@ (80091a8 <UART_SetConfig+0x2f8>)
 8009186:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009188:	e018      	b.n	80091bc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800918a:	f7fe fbdd 	bl	8007948 <HAL_RCC_GetSysClockFreq>
 800918e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009190:	e014      	b.n	80091bc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009192:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009196:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009198:	e010      	b.n	80091bc <UART_SetConfig+0x30c>
 800919a:	bf00      	nop
 800919c:	cfff69f3 	.word	0xcfff69f3
 80091a0:	40008000 	.word	0x40008000
 80091a4:	40013800 	.word	0x40013800
 80091a8:	00f42400 	.word	0x00f42400
 80091ac:	080112e0 	.word	0x080112e0
      default:
        pclk = 0U;
 80091b0:	2300      	movs	r3, #0
 80091b2:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80091b4:	2301      	movs	r3, #1
 80091b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80091ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80091bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091be:	2b00      	cmp	r3, #0
 80091c0:	f000 8084 	beq.w	80092cc <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091c8:	4a4b      	ldr	r2, [pc, #300]	@ (80092f8 <UART_SetConfig+0x448>)
 80091ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091ce:	461a      	mov	r2, r3
 80091d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80091d6:	005a      	lsls	r2, r3, #1
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	085b      	lsrs	r3, r3, #1
 80091de:	441a      	add	r2, r3
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80091e8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091ea:	6a3b      	ldr	r3, [r7, #32]
 80091ec:	2b0f      	cmp	r3, #15
 80091ee:	d916      	bls.n	800921e <UART_SetConfig+0x36e>
 80091f0:	6a3b      	ldr	r3, [r7, #32]
 80091f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091f6:	d212      	bcs.n	800921e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80091f8:	6a3b      	ldr	r3, [r7, #32]
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	f023 030f 	bic.w	r3, r3, #15
 8009200:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009202:	6a3b      	ldr	r3, [r7, #32]
 8009204:	085b      	lsrs	r3, r3, #1
 8009206:	b29b      	uxth	r3, r3
 8009208:	f003 0307 	and.w	r3, r3, #7
 800920c:	b29a      	uxth	r2, r3
 800920e:	8bfb      	ldrh	r3, [r7, #30]
 8009210:	4313      	orrs	r3, r2
 8009212:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	8bfa      	ldrh	r2, [r7, #30]
 800921a:	60da      	str	r2, [r3, #12]
 800921c:	e056      	b.n	80092cc <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800921e:	2301      	movs	r3, #1
 8009220:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009224:	e052      	b.n	80092cc <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009226:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800922a:	3b01      	subs	r3, #1
 800922c:	2b07      	cmp	r3, #7
 800922e:	d822      	bhi.n	8009276 <UART_SetConfig+0x3c6>
 8009230:	a201      	add	r2, pc, #4	@ (adr r2, 8009238 <UART_SetConfig+0x388>)
 8009232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009236:	bf00      	nop
 8009238:	08009259 	.word	0x08009259
 800923c:	08009261 	.word	0x08009261
 8009240:	08009277 	.word	0x08009277
 8009244:	08009267 	.word	0x08009267
 8009248:	08009277 	.word	0x08009277
 800924c:	08009277 	.word	0x08009277
 8009250:	08009277 	.word	0x08009277
 8009254:	0800926f 	.word	0x0800926f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009258:	f7fe fc0c 	bl	8007a74 <HAL_RCC_GetPCLK2Freq>
 800925c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800925e:	e010      	b.n	8009282 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009260:	4b26      	ldr	r3, [pc, #152]	@ (80092fc <UART_SetConfig+0x44c>)
 8009262:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009264:	e00d      	b.n	8009282 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009266:	f7fe fb6f 	bl	8007948 <HAL_RCC_GetSysClockFreq>
 800926a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800926c:	e009      	b.n	8009282 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800926e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009272:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009274:	e005      	b.n	8009282 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8009276:	2300      	movs	r3, #0
 8009278:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009280:	bf00      	nop
    }

    if (pclk != 0U)
 8009282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009284:	2b00      	cmp	r3, #0
 8009286:	d021      	beq.n	80092cc <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800928c:	4a1a      	ldr	r2, [pc, #104]	@ (80092f8 <UART_SetConfig+0x448>)
 800928e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009292:	461a      	mov	r2, r3
 8009294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009296:	fbb3 f2f2 	udiv	r2, r3, r2
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	085b      	lsrs	r3, r3, #1
 80092a0:	441a      	add	r2, r3
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80092aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092ac:	6a3b      	ldr	r3, [r7, #32]
 80092ae:	2b0f      	cmp	r3, #15
 80092b0:	d909      	bls.n	80092c6 <UART_SetConfig+0x416>
 80092b2:	6a3b      	ldr	r3, [r7, #32]
 80092b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092b8:	d205      	bcs.n	80092c6 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80092ba:	6a3b      	ldr	r3, [r7, #32]
 80092bc:	b29a      	uxth	r2, r3
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	60da      	str	r2, [r3, #12]
 80092c4:	e002      	b.n	80092cc <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80092c6:	2301      	movs	r3, #1
 80092c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	2201      	movs	r2, #1
 80092d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	2201      	movs	r2, #1
 80092d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	2200      	movs	r2, #0
 80092e0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	2200      	movs	r2, #0
 80092e6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80092e8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3730      	adds	r7, #48	@ 0x30
 80092f0:	46bd      	mov	sp, r7
 80092f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092f6:	bf00      	nop
 80092f8:	080112e0 	.word	0x080112e0
 80092fc:	00f42400 	.word	0x00f42400

08009300 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009300:	b480      	push	{r7}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800930c:	f003 0308 	and.w	r3, r3, #8
 8009310:	2b00      	cmp	r3, #0
 8009312:	d00a      	beq.n	800932a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	430a      	orrs	r2, r1
 8009328:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800932e:	f003 0301 	and.w	r3, r3, #1
 8009332:	2b00      	cmp	r3, #0
 8009334:	d00a      	beq.n	800934c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	430a      	orrs	r2, r1
 800934a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009350:	f003 0302 	and.w	r3, r3, #2
 8009354:	2b00      	cmp	r3, #0
 8009356:	d00a      	beq.n	800936e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	430a      	orrs	r2, r1
 800936c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009372:	f003 0304 	and.w	r3, r3, #4
 8009376:	2b00      	cmp	r3, #0
 8009378:	d00a      	beq.n	8009390 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	430a      	orrs	r2, r1
 800938e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009394:	f003 0310 	and.w	r3, r3, #16
 8009398:	2b00      	cmp	r3, #0
 800939a:	d00a      	beq.n	80093b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	430a      	orrs	r2, r1
 80093b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093b6:	f003 0320 	and.w	r3, r3, #32
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d00a      	beq.n	80093d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	430a      	orrs	r2, r1
 80093d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d01a      	beq.n	8009416 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	430a      	orrs	r2, r1
 80093f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80093fe:	d10a      	bne.n	8009416 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	430a      	orrs	r2, r1
 8009414:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800941a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800941e:	2b00      	cmp	r3, #0
 8009420:	d00a      	beq.n	8009438 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	430a      	orrs	r2, r1
 8009436:	605a      	str	r2, [r3, #4]
  }
}
 8009438:	bf00      	nop
 800943a:	370c      	adds	r7, #12
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr

08009444 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b098      	sub	sp, #96	@ 0x60
 8009448:	af02      	add	r7, sp, #8
 800944a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2200      	movs	r2, #0
 8009450:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009454:	f7f8 fd12 	bl	8001e7c <HAL_GetTick>
 8009458:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f003 0308 	and.w	r3, r3, #8
 8009464:	2b08      	cmp	r3, #8
 8009466:	d12f      	bne.n	80094c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009468:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800946c:	9300      	str	r3, [sp, #0]
 800946e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009470:	2200      	movs	r2, #0
 8009472:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 f88e 	bl	8009598 <UART_WaitOnFlagUntilTimeout>
 800947c:	4603      	mov	r3, r0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d022      	beq.n	80094c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800948a:	e853 3f00 	ldrex	r3, [r3]
 800948e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009492:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009496:	653b      	str	r3, [r7, #80]	@ 0x50
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	461a      	mov	r2, r3
 800949e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80094a2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80094a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094a8:	e841 2300 	strex	r3, r2, [r1]
 80094ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80094ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d1e6      	bne.n	8009482 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2220      	movs	r2, #32
 80094b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2200      	movs	r2, #0
 80094c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094c4:	2303      	movs	r3, #3
 80094c6:	e063      	b.n	8009590 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f003 0304 	and.w	r3, r3, #4
 80094d2:	2b04      	cmp	r3, #4
 80094d4:	d149      	bne.n	800956a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094d6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80094da:	9300      	str	r3, [sp, #0]
 80094dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094de:	2200      	movs	r2, #0
 80094e0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 f857 	bl	8009598 <UART_WaitOnFlagUntilTimeout>
 80094ea:	4603      	mov	r3, r0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d03c      	beq.n	800956a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f8:	e853 3f00 	ldrex	r3, [r3]
 80094fc:	623b      	str	r3, [r7, #32]
   return(result);
 80094fe:	6a3b      	ldr	r3, [r7, #32]
 8009500:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009504:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	461a      	mov	r2, r3
 800950c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800950e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009510:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009512:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009514:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009516:	e841 2300 	strex	r3, r2, [r1]
 800951a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800951c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800951e:	2b00      	cmp	r3, #0
 8009520:	d1e6      	bne.n	80094f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	3308      	adds	r3, #8
 8009528:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	e853 3f00 	ldrex	r3, [r3]
 8009530:	60fb      	str	r3, [r7, #12]
   return(result);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f023 0301 	bic.w	r3, r3, #1
 8009538:	64bb      	str	r3, [r7, #72]	@ 0x48
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	3308      	adds	r3, #8
 8009540:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009542:	61fa      	str	r2, [r7, #28]
 8009544:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009546:	69b9      	ldr	r1, [r7, #24]
 8009548:	69fa      	ldr	r2, [r7, #28]
 800954a:	e841 2300 	strex	r3, r2, [r1]
 800954e:	617b      	str	r3, [r7, #20]
   return(result);
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d1e5      	bne.n	8009522 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2220      	movs	r2, #32
 800955a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2200      	movs	r2, #0
 8009562:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009566:	2303      	movs	r3, #3
 8009568:	e012      	b.n	8009590 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2220      	movs	r2, #32
 800956e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2220      	movs	r2, #32
 8009576:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2200      	movs	r2, #0
 800957e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2200      	movs	r2, #0
 800958a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800958e:	2300      	movs	r3, #0
}
 8009590:	4618      	mov	r0, r3
 8009592:	3758      	adds	r7, #88	@ 0x58
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	60b9      	str	r1, [r7, #8]
 80095a2:	603b      	str	r3, [r7, #0]
 80095a4:	4613      	mov	r3, r2
 80095a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095a8:	e04f      	b.n	800964a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095aa:	69bb      	ldr	r3, [r7, #24]
 80095ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095b0:	d04b      	beq.n	800964a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095b2:	f7f8 fc63 	bl	8001e7c <HAL_GetTick>
 80095b6:	4602      	mov	r2, r0
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	1ad3      	subs	r3, r2, r3
 80095bc:	69ba      	ldr	r2, [r7, #24]
 80095be:	429a      	cmp	r2, r3
 80095c0:	d302      	bcc.n	80095c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d101      	bne.n	80095cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80095c8:	2303      	movs	r3, #3
 80095ca:	e04e      	b.n	800966a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f003 0304 	and.w	r3, r3, #4
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d037      	beq.n	800964a <UART_WaitOnFlagUntilTimeout+0xb2>
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	2b80      	cmp	r3, #128	@ 0x80
 80095de:	d034      	beq.n	800964a <UART_WaitOnFlagUntilTimeout+0xb2>
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	2b40      	cmp	r3, #64	@ 0x40
 80095e4:	d031      	beq.n	800964a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	69db      	ldr	r3, [r3, #28]
 80095ec:	f003 0308 	and.w	r3, r3, #8
 80095f0:	2b08      	cmp	r3, #8
 80095f2:	d110      	bne.n	8009616 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	2208      	movs	r2, #8
 80095fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80095fc:	68f8      	ldr	r0, [r7, #12]
 80095fe:	f000 f838 	bl	8009672 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2208      	movs	r2, #8
 8009606:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2200      	movs	r2, #0
 800960e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009612:	2301      	movs	r3, #1
 8009614:	e029      	b.n	800966a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	69db      	ldr	r3, [r3, #28]
 800961c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009620:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009624:	d111      	bne.n	800964a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800962e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009630:	68f8      	ldr	r0, [r7, #12]
 8009632:	f000 f81e 	bl	8009672 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2220      	movs	r2, #32
 800963a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2200      	movs	r2, #0
 8009642:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009646:	2303      	movs	r3, #3
 8009648:	e00f      	b.n	800966a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	69da      	ldr	r2, [r3, #28]
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	4013      	ands	r3, r2
 8009654:	68ba      	ldr	r2, [r7, #8]
 8009656:	429a      	cmp	r2, r3
 8009658:	bf0c      	ite	eq
 800965a:	2301      	moveq	r3, #1
 800965c:	2300      	movne	r3, #0
 800965e:	b2db      	uxtb	r3, r3
 8009660:	461a      	mov	r2, r3
 8009662:	79fb      	ldrb	r3, [r7, #7]
 8009664:	429a      	cmp	r2, r3
 8009666:	d0a0      	beq.n	80095aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009668:	2300      	movs	r3, #0
}
 800966a:	4618      	mov	r0, r3
 800966c:	3710      	adds	r7, #16
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}

08009672 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009672:	b480      	push	{r7}
 8009674:	b095      	sub	sp, #84	@ 0x54
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009682:	e853 3f00 	ldrex	r3, [r3]
 8009686:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800968a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800968e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	461a      	mov	r2, r3
 8009696:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009698:	643b      	str	r3, [r7, #64]	@ 0x40
 800969a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800969e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80096a0:	e841 2300 	strex	r3, r2, [r1]
 80096a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80096a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d1e6      	bne.n	800967a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	3308      	adds	r3, #8
 80096b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b4:	6a3b      	ldr	r3, [r7, #32]
 80096b6:	e853 3f00 	ldrex	r3, [r3]
 80096ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80096c2:	f023 0301 	bic.w	r3, r3, #1
 80096c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	3308      	adds	r3, #8
 80096ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80096d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80096d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80096d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096d8:	e841 2300 	strex	r3, r2, [r1]
 80096dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80096de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d1e3      	bne.n	80096ac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d118      	bne.n	800971e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	e853 3f00 	ldrex	r3, [r3]
 80096f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	f023 0310 	bic.w	r3, r3, #16
 8009700:	647b      	str	r3, [r7, #68]	@ 0x44
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	461a      	mov	r2, r3
 8009708:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800970a:	61bb      	str	r3, [r7, #24]
 800970c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800970e:	6979      	ldr	r1, [r7, #20]
 8009710:	69ba      	ldr	r2, [r7, #24]
 8009712:	e841 2300 	strex	r3, r2, [r1]
 8009716:	613b      	str	r3, [r7, #16]
   return(result);
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d1e6      	bne.n	80096ec <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2220      	movs	r2, #32
 8009722:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2200      	movs	r2, #0
 800972a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009732:	bf00      	nop
 8009734:	3754      	adds	r7, #84	@ 0x54
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr

0800973e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800973e:	b480      	push	{r7}
 8009740:	b085      	sub	sp, #20
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2200      	movs	r2, #0
 800974a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800974e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8009752:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	b29a      	uxth	r2, r3
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800975e:	2300      	movs	r3, #0
}
 8009760:	4618      	mov	r0, r3
 8009762:	3714      	adds	r7, #20
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800976c:	b480      	push	{r7}
 800976e:	b085      	sub	sp, #20
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009774:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8009778:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009780:	b29a      	uxth	r2, r3
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	b29b      	uxth	r3, r3
 8009786:	43db      	mvns	r3, r3
 8009788:	b29b      	uxth	r3, r3
 800978a:	4013      	ands	r3, r2
 800978c:	b29a      	uxth	r2, r3
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009794:	2300      	movs	r3, #0
}
 8009796:	4618      	mov	r0, r3
 8009798:	3714      	adds	r7, #20
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr

080097a2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80097a2:	b480      	push	{r7}
 80097a4:	b085      	sub	sp, #20
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	60f8      	str	r0, [r7, #12]
 80097aa:	1d3b      	adds	r3, r7, #4
 80097ac:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2201      	movs	r2, #1
 80097b4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2200      	movs	r2, #0
 80097bc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80097d0:	2300      	movs	r3, #0
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3714      	adds	r7, #20
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr
	...

080097e0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b09d      	sub	sp, #116	@ 0x74
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80097ea:	2300      	movs	r3, #0
 80097ec:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	4413      	add	r3, r2
 80097fa:	881b      	ldrh	r3, [r3, #0]
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8009802:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009806:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	78db      	ldrb	r3, [r3, #3]
 800980e:	2b03      	cmp	r3, #3
 8009810:	d81f      	bhi.n	8009852 <USB_ActivateEndpoint+0x72>
 8009812:	a201      	add	r2, pc, #4	@ (adr r2, 8009818 <USB_ActivateEndpoint+0x38>)
 8009814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009818:	08009829 	.word	0x08009829
 800981c:	08009845 	.word	0x08009845
 8009820:	0800985b 	.word	0x0800985b
 8009824:	08009837 	.word	0x08009837
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009828:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800982c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009830:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8009834:	e012      	b.n	800985c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009836:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800983a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800983e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8009842:	e00b      	b.n	800985c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009844:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009848:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800984c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8009850:	e004      	b.n	800985c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8009852:	2301      	movs	r3, #1
 8009854:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8009858:	e000      	b.n	800985c <USB_ActivateEndpoint+0x7c>
      break;
 800985a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	009b      	lsls	r3, r3, #2
 8009864:	441a      	add	r2, r3
 8009866:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800986a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800986e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009872:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009876:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800987a:	b29b      	uxth	r3, r3
 800987c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	4413      	add	r3, r2
 8009888:	881b      	ldrh	r3, [r3, #0]
 800988a:	b29b      	uxth	r3, r3
 800988c:	b21b      	sxth	r3, r3
 800988e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009892:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009896:	b21a      	sxth	r2, r3
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	b21b      	sxth	r3, r3
 800989e:	4313      	orrs	r3, r2
 80098a0:	b21b      	sxth	r3, r3
 80098a2:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	441a      	add	r2, r3
 80098b0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80098b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80098b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80098bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80098c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	7b1b      	ldrb	r3, [r3, #12]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	f040 8178 	bne.w	8009bc2 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	785b      	ldrb	r3, [r3, #1]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	f000 8084 	beq.w	80099e4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	61bb      	str	r3, [r7, #24]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	461a      	mov	r2, r3
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	4413      	add	r3, r2
 80098ee:	61bb      	str	r3, [r7, #24]
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	00da      	lsls	r2, r3, #3
 80098f6:	69bb      	ldr	r3, [r7, #24]
 80098f8:	4413      	add	r3, r2
 80098fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80098fe:	617b      	str	r3, [r7, #20]
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	88db      	ldrh	r3, [r3, #6]
 8009904:	085b      	lsrs	r3, r3, #1
 8009906:	b29b      	uxth	r3, r3
 8009908:	005b      	lsls	r3, r3, #1
 800990a:	b29a      	uxth	r2, r3
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	4413      	add	r3, r2
 800991a:	881b      	ldrh	r3, [r3, #0]
 800991c:	827b      	strh	r3, [r7, #18]
 800991e:	8a7b      	ldrh	r3, [r7, #18]
 8009920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009924:	2b00      	cmp	r3, #0
 8009926:	d01b      	beq.n	8009960 <USB_ActivateEndpoint+0x180>
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	009b      	lsls	r3, r3, #2
 8009930:	4413      	add	r3, r2
 8009932:	881b      	ldrh	r3, [r3, #0]
 8009934:	b29b      	uxth	r3, r3
 8009936:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800993a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800993e:	823b      	strh	r3, [r7, #16]
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	441a      	add	r2, r3
 800994a:	8a3b      	ldrh	r3, [r7, #16]
 800994c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009950:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009954:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009958:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800995c:	b29b      	uxth	r3, r3
 800995e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	78db      	ldrb	r3, [r3, #3]
 8009964:	2b01      	cmp	r3, #1
 8009966:	d020      	beq.n	80099aa <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	4413      	add	r3, r2
 8009972:	881b      	ldrh	r3, [r3, #0]
 8009974:	b29b      	uxth	r3, r3
 8009976:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800997a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800997e:	81bb      	strh	r3, [r7, #12]
 8009980:	89bb      	ldrh	r3, [r7, #12]
 8009982:	f083 0320 	eor.w	r3, r3, #32
 8009986:	81bb      	strh	r3, [r7, #12]
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	009b      	lsls	r3, r3, #2
 8009990:	441a      	add	r2, r3
 8009992:	89bb      	ldrh	r3, [r7, #12]
 8009994:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009998:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800999c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80099a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	8013      	strh	r3, [r2, #0]
 80099a8:	e2d5      	b.n	8009f56 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	4413      	add	r3, r2
 80099b4:	881b      	ldrh	r3, [r3, #0]
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80099bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80099c0:	81fb      	strh	r3, [r7, #14]
 80099c2:	687a      	ldr	r2, [r7, #4]
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	441a      	add	r2, r3
 80099cc:	89fb      	ldrh	r3, [r7, #14]
 80099ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80099d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80099d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80099da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099de:	b29b      	uxth	r3, r3
 80099e0:	8013      	strh	r3, [r2, #0]
 80099e2:	e2b8      	b.n	8009f56 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	461a      	mov	r2, r3
 80099f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f4:	4413      	add	r3, r2
 80099f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	00da      	lsls	r2, r3, #3
 80099fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a00:	4413      	add	r3, r2
 8009a02:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	88db      	ldrh	r3, [r3, #6]
 8009a0c:	085b      	lsrs	r3, r3, #1
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	005b      	lsls	r3, r3, #1
 8009a12:	b29a      	uxth	r2, r3
 8009a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a16:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	461a      	mov	r2, r3
 8009a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a28:	4413      	add	r3, r2
 8009a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	00da      	lsls	r2, r3, #3
 8009a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a34:	4413      	add	r3, r2
 8009a36:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009a3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a3e:	881b      	ldrh	r3, [r3, #0]
 8009a40:	b29b      	uxth	r3, r3
 8009a42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a46:	b29a      	uxth	r2, r3
 8009a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a4a:	801a      	strh	r2, [r3, #0]
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	691b      	ldr	r3, [r3, #16]
 8009a50:	2b3e      	cmp	r3, #62	@ 0x3e
 8009a52:	d91d      	bls.n	8009a90 <USB_ActivateEndpoint+0x2b0>
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	691b      	ldr	r3, [r3, #16]
 8009a58:	095b      	lsrs	r3, r3, #5
 8009a5a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	691b      	ldr	r3, [r3, #16]
 8009a60:	f003 031f 	and.w	r3, r3, #31
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d102      	bne.n	8009a6e <USB_ActivateEndpoint+0x28e>
 8009a68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009a6a:	3b01      	subs	r3, #1
 8009a6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a70:	881b      	ldrh	r3, [r3, #0]
 8009a72:	b29a      	uxth	r2, r3
 8009a74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	029b      	lsls	r3, r3, #10
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a88:	b29a      	uxth	r2, r3
 8009a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a8c:	801a      	strh	r2, [r3, #0]
 8009a8e:	e026      	b.n	8009ade <USB_ActivateEndpoint+0x2fe>
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	691b      	ldr	r3, [r3, #16]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d10a      	bne.n	8009aae <USB_ActivateEndpoint+0x2ce>
 8009a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a9a:	881b      	ldrh	r3, [r3, #0]
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009aa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009aa6:	b29a      	uxth	r2, r3
 8009aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aaa:	801a      	strh	r2, [r3, #0]
 8009aac:	e017      	b.n	8009ade <USB_ActivateEndpoint+0x2fe>
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	691b      	ldr	r3, [r3, #16]
 8009ab2:	085b      	lsrs	r3, r3, #1
 8009ab4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	691b      	ldr	r3, [r3, #16]
 8009aba:	f003 0301 	and.w	r3, r3, #1
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d002      	beq.n	8009ac8 <USB_ActivateEndpoint+0x2e8>
 8009ac2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aca:	881b      	ldrh	r3, [r3, #0]
 8009acc:	b29a      	uxth	r2, r3
 8009ace:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	029b      	lsls	r3, r3, #10
 8009ad4:	b29b      	uxth	r3, r3
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	b29a      	uxth	r2, r3
 8009ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009adc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	4413      	add	r3, r2
 8009ae8:	881b      	ldrh	r3, [r3, #0]
 8009aea:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009aec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009aee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d01b      	beq.n	8009b2e <USB_ActivateEndpoint+0x34e>
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	4413      	add	r3, r2
 8009b00:	881b      	ldrh	r3, [r3, #0]
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b0c:	843b      	strh	r3, [r7, #32]
 8009b0e:	687a      	ldr	r2, [r7, #4]
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	009b      	lsls	r3, r3, #2
 8009b16:	441a      	add	r2, r3
 8009b18:	8c3b      	ldrh	r3, [r7, #32]
 8009b1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b22:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009b26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d124      	bne.n	8009b80 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	4413      	add	r3, r2
 8009b40:	881b      	ldrh	r3, [r3, #0]
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009b48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b4c:	83bb      	strh	r3, [r7, #28]
 8009b4e:	8bbb      	ldrh	r3, [r7, #28]
 8009b50:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009b54:	83bb      	strh	r3, [r7, #28]
 8009b56:	8bbb      	ldrh	r3, [r7, #28]
 8009b58:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009b5c:	83bb      	strh	r3, [r7, #28]
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	781b      	ldrb	r3, [r3, #0]
 8009b64:	009b      	lsls	r3, r3, #2
 8009b66:	441a      	add	r2, r3
 8009b68:	8bbb      	ldrh	r3, [r7, #28]
 8009b6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	8013      	strh	r3, [r2, #0]
 8009b7e:	e1ea      	b.n	8009f56 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	4413      	add	r3, r2
 8009b8a:	881b      	ldrh	r3, [r3, #0]
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009b92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b96:	83fb      	strh	r3, [r7, #30]
 8009b98:	8bfb      	ldrh	r3, [r7, #30]
 8009b9a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009b9e:	83fb      	strh	r3, [r7, #30]
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	441a      	add	r2, r3
 8009baa:	8bfb      	ldrh	r3, [r7, #30]
 8009bac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009bb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009bb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009bb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bbc:	b29b      	uxth	r3, r3
 8009bbe:	8013      	strh	r3, [r2, #0]
 8009bc0:	e1c9      	b.n	8009f56 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	78db      	ldrb	r3, [r3, #3]
 8009bc6:	2b02      	cmp	r3, #2
 8009bc8:	d11e      	bne.n	8009c08 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	4413      	add	r3, r2
 8009bd4:	881b      	ldrh	r3, [r3, #0]
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009bdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009be0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	441a      	add	r2, r3
 8009bee:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009bf2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009bf6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009bfa:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009bfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	8013      	strh	r3, [r2, #0]
 8009c06:	e01d      	b.n	8009c44 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	009b      	lsls	r3, r3, #2
 8009c10:	4413      	add	r3, r2
 8009c12:	881b      	ldrh	r3, [r3, #0]
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009c1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c1e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	441a      	add	r2, r3
 8009c2c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8009c30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c4e:	b29b      	uxth	r3, r3
 8009c50:	461a      	mov	r2, r3
 8009c52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c54:	4413      	add	r3, r2
 8009c56:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	00da      	lsls	r2, r3, #3
 8009c5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c60:	4413      	add	r3, r2
 8009c62:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009c66:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	891b      	ldrh	r3, [r3, #8]
 8009c6c:	085b      	lsrs	r3, r3, #1
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	005b      	lsls	r3, r3, #1
 8009c72:	b29a      	uxth	r2, r3
 8009c74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009c76:	801a      	strh	r2, [r3, #0]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	461a      	mov	r2, r3
 8009c86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c88:	4413      	add	r3, r2
 8009c8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	00da      	lsls	r2, r3, #3
 8009c92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c94:	4413      	add	r3, r2
 8009c96:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009c9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	895b      	ldrh	r3, [r3, #10]
 8009ca0:	085b      	lsrs	r3, r3, #1
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	005b      	lsls	r3, r3, #1
 8009ca6:	b29a      	uxth	r2, r3
 8009ca8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009caa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	785b      	ldrb	r3, [r3, #1]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	f040 8093 	bne.w	8009ddc <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009cb6:	687a      	ldr	r2, [r7, #4]
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	781b      	ldrb	r3, [r3, #0]
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	4413      	add	r3, r2
 8009cc0:	881b      	ldrh	r3, [r3, #0]
 8009cc2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8009cc6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009cca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d01b      	beq.n	8009d0a <USB_ActivateEndpoint+0x52a>
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	4413      	add	r3, r2
 8009cdc:	881b      	ldrh	r3, [r3, #0]
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ce4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ce8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009cea:	687a      	ldr	r2, [r7, #4]
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	781b      	ldrb	r3, [r3, #0]
 8009cf0:	009b      	lsls	r3, r3, #2
 8009cf2:	441a      	add	r2, r3
 8009cf4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009cf6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009cfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009cfe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009d02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	4413      	add	r3, r2
 8009d14:	881b      	ldrh	r3, [r3, #0]
 8009d16:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8009d18:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009d1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d01b      	beq.n	8009d5a <USB_ActivateEndpoint+0x57a>
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	009b      	lsls	r3, r3, #2
 8009d2a:	4413      	add	r3, r2
 8009d2c:	881b      	ldrh	r3, [r3, #0]
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d38:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8009d3a:	687a      	ldr	r2, [r7, #4]
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	441a      	add	r2, r3
 8009d44:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009d46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d52:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	4413      	add	r3, r2
 8009d64:	881b      	ldrh	r3, [r3, #0]
 8009d66:	b29b      	uxth	r3, r3
 8009d68:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009d6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d70:	873b      	strh	r3, [r7, #56]	@ 0x38
 8009d72:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8009d74:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009d78:	873b      	strh	r3, [r7, #56]	@ 0x38
 8009d7a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8009d7c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009d80:	873b      	strh	r3, [r7, #56]	@ 0x38
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	441a      	add	r2, r3
 8009d8c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8009d8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d9e:	b29b      	uxth	r3, r3
 8009da0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	009b      	lsls	r3, r3, #2
 8009daa:	4413      	add	r3, r2
 8009dac:	881b      	ldrh	r3, [r3, #0]
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009db4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009db8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	781b      	ldrb	r3, [r3, #0]
 8009dc0:	009b      	lsls	r3, r3, #2
 8009dc2:	441a      	add	r2, r3
 8009dc4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009dc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009dca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009dce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009dd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	8013      	strh	r3, [r2, #0]
 8009dda:	e0bc      	b.n	8009f56 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	4413      	add	r3, r2
 8009de6:	881b      	ldrh	r3, [r3, #0]
 8009de8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8009dec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009df0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d01d      	beq.n	8009e34 <USB_ActivateEndpoint+0x654>
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	4413      	add	r3, r2
 8009e02:	881b      	ldrh	r3, [r3, #0]
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e0e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	781b      	ldrb	r3, [r3, #0]
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	441a      	add	r2, r3
 8009e1c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8009e20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009e2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	009b      	lsls	r3, r3, #2
 8009e3c:	4413      	add	r3, r2
 8009e3e:	881b      	ldrh	r3, [r3, #0]
 8009e40:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8009e44:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d01d      	beq.n	8009e8c <USB_ActivateEndpoint+0x6ac>
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	009b      	lsls	r3, r3, #2
 8009e58:	4413      	add	r3, r2
 8009e5a:	881b      	ldrh	r3, [r3, #0]
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e66:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	441a      	add	r2, r3
 8009e74:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8009e78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e84:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	78db      	ldrb	r3, [r3, #3]
 8009e90:	2b01      	cmp	r3, #1
 8009e92:	d024      	beq.n	8009ede <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009e94:	687a      	ldr	r2, [r7, #4]
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	4413      	add	r3, r2
 8009e9e:	881b      	ldrh	r3, [r3, #0]
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ea6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009eaa:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8009eae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8009eb2:	f083 0320 	eor.w	r3, r3, #32
 8009eb6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	009b      	lsls	r3, r3, #2
 8009ec2:	441a      	add	r2, r3
 8009ec4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8009ec8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ecc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ed0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ed4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	8013      	strh	r3, [r2, #0]
 8009edc:	e01d      	b.n	8009f1a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	009b      	lsls	r3, r3, #2
 8009ee6:	4413      	add	r3, r2
 8009ee8:	881b      	ldrh	r3, [r3, #0]
 8009eea:	b29b      	uxth	r3, r3
 8009eec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ef0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ef4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8009ef8:	687a      	ldr	r2, [r7, #4]
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	441a      	add	r2, r3
 8009f02:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009f06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009f1a:	687a      	ldr	r2, [r7, #4]
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	009b      	lsls	r3, r3, #2
 8009f22:	4413      	add	r3, r2
 8009f24:	881b      	ldrh	r3, [r3, #0]
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009f2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f30:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8009f34:	687a      	ldr	r2, [r7, #4]
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	009b      	lsls	r3, r3, #2
 8009f3c:	441a      	add	r2, r3
 8009f3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009f42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009f56:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3774      	adds	r7, #116	@ 0x74
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f64:	4770      	bx	lr
 8009f66:	bf00      	nop

08009f68 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b08d      	sub	sp, #52	@ 0x34
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	7b1b      	ldrb	r3, [r3, #12]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	f040 808e 	bne.w	800a098 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	785b      	ldrb	r3, [r3, #1]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d044      	beq.n	800a00e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	009b      	lsls	r3, r3, #2
 8009f8c:	4413      	add	r3, r2
 8009f8e:	881b      	ldrh	r3, [r3, #0]
 8009f90:	81bb      	strh	r3, [r7, #12]
 8009f92:	89bb      	ldrh	r3, [r7, #12]
 8009f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d01b      	beq.n	8009fd4 <USB_DeactivateEndpoint+0x6c>
 8009f9c:	687a      	ldr	r2, [r7, #4]
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	4413      	add	r3, r2
 8009fa6:	881b      	ldrh	r3, [r3, #0]
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009fae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fb2:	817b      	strh	r3, [r7, #10]
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	781b      	ldrb	r3, [r3, #0]
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	441a      	add	r2, r3
 8009fbe:	897b      	ldrh	r3, [r7, #10]
 8009fc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009fc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009fc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009fcc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009fd0:	b29b      	uxth	r3, r3
 8009fd2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009fd4:	687a      	ldr	r2, [r7, #4]
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	781b      	ldrb	r3, [r3, #0]
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	4413      	add	r3, r2
 8009fde:	881b      	ldrh	r3, [r3, #0]
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009fe6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fea:	813b      	strh	r3, [r7, #8]
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	781b      	ldrb	r3, [r3, #0]
 8009ff2:	009b      	lsls	r3, r3, #2
 8009ff4:	441a      	add	r2, r3
 8009ff6:	893b      	ldrh	r3, [r7, #8]
 8009ff8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ffc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a000:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a004:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a008:	b29b      	uxth	r3, r3
 800a00a:	8013      	strh	r3, [r2, #0]
 800a00c:	e192      	b.n	800a334 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	781b      	ldrb	r3, [r3, #0]
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	4413      	add	r3, r2
 800a018:	881b      	ldrh	r3, [r3, #0]
 800a01a:	827b      	strh	r3, [r7, #18]
 800a01c:	8a7b      	ldrh	r3, [r7, #18]
 800a01e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a022:	2b00      	cmp	r3, #0
 800a024:	d01b      	beq.n	800a05e <USB_DeactivateEndpoint+0xf6>
 800a026:	687a      	ldr	r2, [r7, #4]
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	009b      	lsls	r3, r3, #2
 800a02e:	4413      	add	r3, r2
 800a030:	881b      	ldrh	r3, [r3, #0]
 800a032:	b29b      	uxth	r3, r3
 800a034:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a038:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a03c:	823b      	strh	r3, [r7, #16]
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	781b      	ldrb	r3, [r3, #0]
 800a044:	009b      	lsls	r3, r3, #2
 800a046:	441a      	add	r2, r3
 800a048:	8a3b      	ldrh	r3, [r7, #16]
 800a04a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a04e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a052:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a056:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	4413      	add	r3, r2
 800a068:	881b      	ldrh	r3, [r3, #0]
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a070:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a074:	81fb      	strh	r3, [r7, #14]
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	781b      	ldrb	r3, [r3, #0]
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	441a      	add	r2, r3
 800a080:	89fb      	ldrh	r3, [r7, #14]
 800a082:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a086:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a08a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a08e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a092:	b29b      	uxth	r3, r3
 800a094:	8013      	strh	r3, [r2, #0]
 800a096:	e14d      	b.n	800a334 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	785b      	ldrb	r3, [r3, #1]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	f040 80a5 	bne.w	800a1ec <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	781b      	ldrb	r3, [r3, #0]
 800a0a8:	009b      	lsls	r3, r3, #2
 800a0aa:	4413      	add	r3, r2
 800a0ac:	881b      	ldrh	r3, [r3, #0]
 800a0ae:	843b      	strh	r3, [r7, #32]
 800a0b0:	8c3b      	ldrh	r3, [r7, #32]
 800a0b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d01b      	beq.n	800a0f2 <USB_DeactivateEndpoint+0x18a>
 800a0ba:	687a      	ldr	r2, [r7, #4]
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	009b      	lsls	r3, r3, #2
 800a0c2:	4413      	add	r3, r2
 800a0c4:	881b      	ldrh	r3, [r3, #0]
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a0cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0d0:	83fb      	strh	r3, [r7, #30]
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	441a      	add	r2, r3
 800a0dc:	8bfb      	ldrh	r3, [r7, #30]
 800a0de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a0e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a0e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a0ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0ee:	b29b      	uxth	r3, r3
 800a0f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a0f2:	687a      	ldr	r2, [r7, #4]
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	009b      	lsls	r3, r3, #2
 800a0fa:	4413      	add	r3, r2
 800a0fc:	881b      	ldrh	r3, [r3, #0]
 800a0fe:	83bb      	strh	r3, [r7, #28]
 800a100:	8bbb      	ldrh	r3, [r7, #28]
 800a102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a106:	2b00      	cmp	r3, #0
 800a108:	d01b      	beq.n	800a142 <USB_DeactivateEndpoint+0x1da>
 800a10a:	687a      	ldr	r2, [r7, #4]
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	009b      	lsls	r3, r3, #2
 800a112:	4413      	add	r3, r2
 800a114:	881b      	ldrh	r3, [r3, #0]
 800a116:	b29b      	uxth	r3, r3
 800a118:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a11c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a120:	837b      	strh	r3, [r7, #26]
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	441a      	add	r2, r3
 800a12c:	8b7b      	ldrh	r3, [r7, #26]
 800a12e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a132:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a136:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a13a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a13e:	b29b      	uxth	r3, r3
 800a140:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	4413      	add	r3, r2
 800a14c:	881b      	ldrh	r3, [r3, #0]
 800a14e:	b29b      	uxth	r3, r3
 800a150:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a154:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a158:	833b      	strh	r3, [r7, #24]
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	441a      	add	r2, r3
 800a164:	8b3b      	ldrh	r3, [r7, #24]
 800a166:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a16a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a16e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a172:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a176:	b29b      	uxth	r3, r3
 800a178:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	009b      	lsls	r3, r3, #2
 800a182:	4413      	add	r3, r2
 800a184:	881b      	ldrh	r3, [r3, #0]
 800a186:	b29b      	uxth	r3, r3
 800a188:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a18c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a190:	82fb      	strh	r3, [r7, #22]
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	441a      	add	r2, r3
 800a19c:	8afb      	ldrh	r3, [r7, #22]
 800a19e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a1a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a1a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a1aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	009b      	lsls	r3, r3, #2
 800a1ba:	4413      	add	r3, r2
 800a1bc:	881b      	ldrh	r3, [r3, #0]
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a1c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a1c8:	82bb      	strh	r3, [r7, #20]
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	009b      	lsls	r3, r3, #2
 800a1d2:	441a      	add	r2, r3
 800a1d4:	8abb      	ldrh	r3, [r7, #20]
 800a1d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a1da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a1de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a1e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	8013      	strh	r3, [r2, #0]
 800a1ea:	e0a3      	b.n	800a334 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a1ec:	687a      	ldr	r2, [r7, #4]
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	009b      	lsls	r3, r3, #2
 800a1f4:	4413      	add	r3, r2
 800a1f6:	881b      	ldrh	r3, [r3, #0]
 800a1f8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800a1fa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a1fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a200:	2b00      	cmp	r3, #0
 800a202:	d01b      	beq.n	800a23c <USB_DeactivateEndpoint+0x2d4>
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	781b      	ldrb	r3, [r3, #0]
 800a20a:	009b      	lsls	r3, r3, #2
 800a20c:	4413      	add	r3, r2
 800a20e:	881b      	ldrh	r3, [r3, #0]
 800a210:	b29b      	uxth	r3, r3
 800a212:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a216:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a21a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	009b      	lsls	r3, r3, #2
 800a224:	441a      	add	r2, r3
 800a226:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a228:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a22c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a230:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a234:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a238:	b29b      	uxth	r3, r3
 800a23a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	4413      	add	r3, r2
 800a246:	881b      	ldrh	r3, [r3, #0]
 800a248:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800a24a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a24c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a250:	2b00      	cmp	r3, #0
 800a252:	d01b      	beq.n	800a28c <USB_DeactivateEndpoint+0x324>
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	009b      	lsls	r3, r3, #2
 800a25c:	4413      	add	r3, r2
 800a25e:	881b      	ldrh	r3, [r3, #0]
 800a260:	b29b      	uxth	r3, r3
 800a262:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a266:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a26a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a26c:	687a      	ldr	r2, [r7, #4]
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	009b      	lsls	r3, r3, #2
 800a274:	441a      	add	r2, r3
 800a276:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a278:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a27c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a280:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a284:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a288:	b29b      	uxth	r3, r3
 800a28a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	781b      	ldrb	r3, [r3, #0]
 800a292:	009b      	lsls	r3, r3, #2
 800a294:	4413      	add	r3, r2
 800a296:	881b      	ldrh	r3, [r3, #0]
 800a298:	b29b      	uxth	r3, r3
 800a29a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a29e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2a2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	009b      	lsls	r3, r3, #2
 800a2ac:	441a      	add	r2, r3
 800a2ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a2b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a2b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a2b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a2bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a2c4:	687a      	ldr	r2, [r7, #4]
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	781b      	ldrb	r3, [r3, #0]
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	4413      	add	r3, r2
 800a2ce:	881b      	ldrh	r3, [r3, #0]
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a2d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a2da:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	781b      	ldrb	r3, [r3, #0]
 800a2e2:	009b      	lsls	r3, r3, #2
 800a2e4:	441a      	add	r2, r3
 800a2e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a2e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a2ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a2f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a2f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a2fc:	687a      	ldr	r2, [r7, #4]
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	009b      	lsls	r3, r3, #2
 800a304:	4413      	add	r3, r2
 800a306:	881b      	ldrh	r3, [r3, #0]
 800a308:	b29b      	uxth	r3, r3
 800a30a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a30e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a312:	847b      	strh	r3, [r7, #34]	@ 0x22
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	781b      	ldrb	r3, [r3, #0]
 800a31a:	009b      	lsls	r3, r3, #2
 800a31c:	441a      	add	r2, r3
 800a31e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a320:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a324:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a328:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a32c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a330:	b29b      	uxth	r3, r3
 800a332:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a334:	2300      	movs	r3, #0
}
 800a336:	4618      	mov	r0, r3
 800a338:	3734      	adds	r7, #52	@ 0x34
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr

0800a342 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a342:	b580      	push	{r7, lr}
 800a344:	b0c2      	sub	sp, #264	@ 0x108
 800a346:	af00      	add	r7, sp, #0
 800a348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a34c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a350:	6018      	str	r0, [r3, #0]
 800a352:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a356:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a35a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a35c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a360:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	785b      	ldrb	r3, [r3, #1]
 800a368:	2b01      	cmp	r3, #1
 800a36a:	f040 86b7 	bne.w	800b0dc <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a36e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a372:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	699a      	ldr	r2, [r3, #24]
 800a37a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a37e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	691b      	ldr	r3, [r3, #16]
 800a386:	429a      	cmp	r2, r3
 800a388:	d908      	bls.n	800a39c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800a38a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a38e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	691b      	ldr	r3, [r3, #16]
 800a396:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a39a:	e007      	b.n	800a3ac <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a39c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	699b      	ldr	r3, [r3, #24]
 800a3a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a3ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	7b1b      	ldrb	r3, [r3, #12]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d13a      	bne.n	800a432 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a3bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	6959      	ldr	r1, [r3, #20]
 800a3c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	88da      	ldrh	r2, [r3, #6]
 800a3d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a3de:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a3e2:	6800      	ldr	r0, [r0, #0]
 800a3e4:	f001 fc98 	bl	800bd18 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a3e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	613b      	str	r3, [r7, #16]
 800a3f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a402:	b29b      	uxth	r3, r3
 800a404:	461a      	mov	r2, r3
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	4413      	add	r3, r2
 800a40a:	613b      	str	r3, [r7, #16]
 800a40c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a410:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	781b      	ldrb	r3, [r3, #0]
 800a418:	00da      	lsls	r2, r3, #3
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	4413      	add	r3, r2
 800a41e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a422:	60fb      	str	r3, [r7, #12]
 800a424:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a428:	b29a      	uxth	r2, r3
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	801a      	strh	r2, [r3, #0]
 800a42e:	f000 be1f 	b.w	800b070 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a436:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	78db      	ldrb	r3, [r3, #3]
 800a43e:	2b02      	cmp	r3, #2
 800a440:	f040 8462 	bne.w	800ad08 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a444:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a448:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	6a1a      	ldr	r2, [r3, #32]
 800a450:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a454:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	691b      	ldr	r3, [r3, #16]
 800a45c:	429a      	cmp	r2, r3
 800a45e:	f240 83df 	bls.w	800ac20 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a462:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a466:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a46a:	681a      	ldr	r2, [r3, #0]
 800a46c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a470:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	009b      	lsls	r3, r3, #2
 800a47a:	4413      	add	r3, r2
 800a47c:	881b      	ldrh	r3, [r3, #0]
 800a47e:	b29b      	uxth	r3, r3
 800a480:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a484:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a488:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800a48c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a490:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a49a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	009b      	lsls	r3, r3, #2
 800a4a4:	441a      	add	r2, r3
 800a4a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a4aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a4ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a4b2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a4b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a4be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	6a1a      	ldr	r2, [r3, #32]
 800a4ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4ce:	1ad2      	subs	r2, r2, r3
 800a4d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a4dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a4e4:	681a      	ldr	r2, [r3, #0]
 800a4e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	4413      	add	r3, r2
 800a4f6:	881b      	ldrh	r3, [r3, #0]
 800a4f8:	b29b      	uxth	r3, r3
 800a4fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	f000 81c7 	beq.w	800a892 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a504:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a508:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a514:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	785b      	ldrb	r3, [r3, #1]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d177      	bne.n	800a610 <USB_EPStartXfer+0x2ce>
 800a520:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a524:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a52c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a530:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	461a      	mov	r2, r3
 800a53e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a540:	4413      	add	r3, r2
 800a542:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a544:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a548:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	00da      	lsls	r2, r3, #3
 800a552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a554:	4413      	add	r3, r2
 800a556:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a55a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a55c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a55e:	881b      	ldrh	r3, [r3, #0]
 800a560:	b29b      	uxth	r3, r3
 800a562:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a566:	b29a      	uxth	r2, r3
 800a568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a56a:	801a      	strh	r2, [r3, #0]
 800a56c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a570:	2b3e      	cmp	r3, #62	@ 0x3e
 800a572:	d921      	bls.n	800a5b8 <USB_EPStartXfer+0x276>
 800a574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a578:	095b      	lsrs	r3, r3, #5
 800a57a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a57e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a582:	f003 031f 	and.w	r3, r3, #31
 800a586:	2b00      	cmp	r3, #0
 800a588:	d104      	bne.n	800a594 <USB_EPStartXfer+0x252>
 800a58a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a58e:	3b01      	subs	r3, #1
 800a590:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a596:	881b      	ldrh	r3, [r3, #0]
 800a598:	b29a      	uxth	r2, r3
 800a59a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a59e:	b29b      	uxth	r3, r3
 800a5a0:	029b      	lsls	r3, r3, #10
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	b29b      	uxth	r3, r3
 800a5a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5b0:	b29a      	uxth	r2, r3
 800a5b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5b4:	801a      	strh	r2, [r3, #0]
 800a5b6:	e050      	b.n	800a65a <USB_EPStartXfer+0x318>
 800a5b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d10a      	bne.n	800a5d6 <USB_EPStartXfer+0x294>
 800a5c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c2:	881b      	ldrh	r3, [r3, #0]
 800a5c4:	b29b      	uxth	r3, r3
 800a5c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5ce:	b29a      	uxth	r2, r3
 800a5d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5d2:	801a      	strh	r2, [r3, #0]
 800a5d4:	e041      	b.n	800a65a <USB_EPStartXfer+0x318>
 800a5d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5da:	085b      	lsrs	r3, r3, #1
 800a5dc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a5e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5e4:	f003 0301 	and.w	r3, r3, #1
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d004      	beq.n	800a5f6 <USB_EPStartXfer+0x2b4>
 800a5ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5f8:	881b      	ldrh	r3, [r3, #0]
 800a5fa:	b29a      	uxth	r2, r3
 800a5fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a600:	b29b      	uxth	r3, r3
 800a602:	029b      	lsls	r3, r3, #10
 800a604:	b29b      	uxth	r3, r3
 800a606:	4313      	orrs	r3, r2
 800a608:	b29a      	uxth	r2, r3
 800a60a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a60c:	801a      	strh	r2, [r3, #0]
 800a60e:	e024      	b.n	800a65a <USB_EPStartXfer+0x318>
 800a610:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a614:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	785b      	ldrb	r3, [r3, #1]
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d11c      	bne.n	800a65a <USB_EPStartXfer+0x318>
 800a620:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a624:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a62e:	b29b      	uxth	r3, r3
 800a630:	461a      	mov	r2, r3
 800a632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a634:	4413      	add	r3, r2
 800a636:	633b      	str	r3, [r7, #48]	@ 0x30
 800a638:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a63c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	781b      	ldrb	r3, [r3, #0]
 800a644:	00da      	lsls	r2, r3, #3
 800a646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a648:	4413      	add	r3, r2
 800a64a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a64e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a654:	b29a      	uxth	r2, r3
 800a656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a658:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a65a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a65e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	895b      	ldrh	r3, [r3, #10]
 800a666:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a66a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a66e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	6959      	ldr	r1, [r3, #20]
 800a676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a680:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a684:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a688:	6800      	ldr	r0, [r0, #0]
 800a68a:	f001 fb45 	bl	800bd18 <USB_WritePMA>
            ep->xfer_buff += len;
 800a68e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a692:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	695a      	ldr	r2, [r3, #20]
 800a69a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a69e:	441a      	add	r2, r3
 800a6a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a6ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	6a1a      	ldr	r2, [r3, #32]
 800a6b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	691b      	ldr	r3, [r3, #16]
 800a6c4:	429a      	cmp	r2, r3
 800a6c6:	d90f      	bls.n	800a6e8 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800a6c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	6a1a      	ldr	r2, [r3, #32]
 800a6d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6d8:	1ad2      	subs	r2, r2, r3
 800a6da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	621a      	str	r2, [r3, #32]
 800a6e6:	e00e      	b.n	800a706 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800a6e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	6a1b      	ldr	r3, [r3, #32]
 800a6f4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800a6f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	2200      	movs	r2, #0
 800a704:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a706:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a70a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	785b      	ldrb	r3, [r3, #1]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d177      	bne.n	800a806 <USB_EPStartXfer+0x4c4>
 800a716:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a71a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	61bb      	str	r3, [r7, #24]
 800a722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a726:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a730:	b29b      	uxth	r3, r3
 800a732:	461a      	mov	r2, r3
 800a734:	69bb      	ldr	r3, [r7, #24]
 800a736:	4413      	add	r3, r2
 800a738:	61bb      	str	r3, [r7, #24]
 800a73a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a73e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	00da      	lsls	r2, r3, #3
 800a748:	69bb      	ldr	r3, [r7, #24]
 800a74a:	4413      	add	r3, r2
 800a74c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a750:	617b      	str	r3, [r7, #20]
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	881b      	ldrh	r3, [r3, #0]
 800a756:	b29b      	uxth	r3, r3
 800a758:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a75c:	b29a      	uxth	r2, r3
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	801a      	strh	r2, [r3, #0]
 800a762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a766:	2b3e      	cmp	r3, #62	@ 0x3e
 800a768:	d921      	bls.n	800a7ae <USB_EPStartXfer+0x46c>
 800a76a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a76e:	095b      	lsrs	r3, r3, #5
 800a770:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a778:	f003 031f 	and.w	r3, r3, #31
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d104      	bne.n	800a78a <USB_EPStartXfer+0x448>
 800a780:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a784:	3b01      	subs	r3, #1
 800a786:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	881b      	ldrh	r3, [r3, #0]
 800a78e:	b29a      	uxth	r2, r3
 800a790:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a794:	b29b      	uxth	r3, r3
 800a796:	029b      	lsls	r3, r3, #10
 800a798:	b29b      	uxth	r3, r3
 800a79a:	4313      	orrs	r3, r2
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7a6:	b29a      	uxth	r2, r3
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	801a      	strh	r2, [r3, #0]
 800a7ac:	e056      	b.n	800a85c <USB_EPStartXfer+0x51a>
 800a7ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d10a      	bne.n	800a7cc <USB_EPStartXfer+0x48a>
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	881b      	ldrh	r3, [r3, #0]
 800a7ba:	b29b      	uxth	r3, r3
 800a7bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7c4:	b29a      	uxth	r2, r3
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	801a      	strh	r2, [r3, #0]
 800a7ca:	e047      	b.n	800a85c <USB_EPStartXfer+0x51a>
 800a7cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7d0:	085b      	lsrs	r3, r3, #1
 800a7d2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a7d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7da:	f003 0301 	and.w	r3, r3, #1
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d004      	beq.n	800a7ec <USB_EPStartXfer+0x4aa>
 800a7e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	881b      	ldrh	r3, [r3, #0]
 800a7f0:	b29a      	uxth	r2, r3
 800a7f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	029b      	lsls	r3, r3, #10
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	b29a      	uxth	r2, r3
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	801a      	strh	r2, [r3, #0]
 800a804:	e02a      	b.n	800a85c <USB_EPStartXfer+0x51a>
 800a806:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a80a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	785b      	ldrb	r3, [r3, #1]
 800a812:	2b01      	cmp	r3, #1
 800a814:	d122      	bne.n	800a85c <USB_EPStartXfer+0x51a>
 800a816:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a81a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	623b      	str	r3, [r7, #32]
 800a822:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a826:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a830:	b29b      	uxth	r3, r3
 800a832:	461a      	mov	r2, r3
 800a834:	6a3b      	ldr	r3, [r7, #32]
 800a836:	4413      	add	r3, r2
 800a838:	623b      	str	r3, [r7, #32]
 800a83a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a83e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	00da      	lsls	r2, r3, #3
 800a848:	6a3b      	ldr	r3, [r7, #32]
 800a84a:	4413      	add	r3, r2
 800a84c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a850:	61fb      	str	r3, [r7, #28]
 800a852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a856:	b29a      	uxth	r2, r3
 800a858:	69fb      	ldr	r3, [r7, #28]
 800a85a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a85c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a860:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	891b      	ldrh	r3, [r3, #8]
 800a868:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a86c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a870:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	6959      	ldr	r1, [r3, #20]
 800a878:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a882:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a886:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a88a:	6800      	ldr	r0, [r0, #0]
 800a88c:	f001 fa44 	bl	800bd18 <USB_WritePMA>
 800a890:	e3ee      	b.n	800b070 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a892:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a896:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	785b      	ldrb	r3, [r3, #1]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d177      	bne.n	800a992 <USB_EPStartXfer+0x650>
 800a8a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	461a      	mov	r2, r3
 800a8c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8c2:	4413      	add	r3, r2
 800a8c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	00da      	lsls	r2, r3, #3
 800a8d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8d6:	4413      	add	r3, r2
 800a8d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a8dc:	647b      	str	r3, [r7, #68]	@ 0x44
 800a8de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8e0:	881b      	ldrh	r3, [r3, #0]
 800a8e2:	b29b      	uxth	r3, r3
 800a8e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a8e8:	b29a      	uxth	r2, r3
 800a8ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8ec:	801a      	strh	r2, [r3, #0]
 800a8ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8f2:	2b3e      	cmp	r3, #62	@ 0x3e
 800a8f4:	d921      	bls.n	800a93a <USB_EPStartXfer+0x5f8>
 800a8f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8fa:	095b      	lsrs	r3, r3, #5
 800a8fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a900:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a904:	f003 031f 	and.w	r3, r3, #31
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d104      	bne.n	800a916 <USB_EPStartXfer+0x5d4>
 800a90c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a910:	3b01      	subs	r3, #1
 800a912:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a916:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a918:	881b      	ldrh	r3, [r3, #0]
 800a91a:	b29a      	uxth	r2, r3
 800a91c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a920:	b29b      	uxth	r3, r3
 800a922:	029b      	lsls	r3, r3, #10
 800a924:	b29b      	uxth	r3, r3
 800a926:	4313      	orrs	r3, r2
 800a928:	b29b      	uxth	r3, r3
 800a92a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a92e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a932:	b29a      	uxth	r2, r3
 800a934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a936:	801a      	strh	r2, [r3, #0]
 800a938:	e056      	b.n	800a9e8 <USB_EPStartXfer+0x6a6>
 800a93a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d10a      	bne.n	800a958 <USB_EPStartXfer+0x616>
 800a942:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a944:	881b      	ldrh	r3, [r3, #0]
 800a946:	b29b      	uxth	r3, r3
 800a948:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a94c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a950:	b29a      	uxth	r2, r3
 800a952:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a954:	801a      	strh	r2, [r3, #0]
 800a956:	e047      	b.n	800a9e8 <USB_EPStartXfer+0x6a6>
 800a958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a95c:	085b      	lsrs	r3, r3, #1
 800a95e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a962:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a966:	f003 0301 	and.w	r3, r3, #1
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d004      	beq.n	800a978 <USB_EPStartXfer+0x636>
 800a96e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a972:	3301      	adds	r3, #1
 800a974:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a978:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a97a:	881b      	ldrh	r3, [r3, #0]
 800a97c:	b29a      	uxth	r2, r3
 800a97e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a982:	b29b      	uxth	r3, r3
 800a984:	029b      	lsls	r3, r3, #10
 800a986:	b29b      	uxth	r3, r3
 800a988:	4313      	orrs	r3, r2
 800a98a:	b29a      	uxth	r2, r3
 800a98c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a98e:	801a      	strh	r2, [r3, #0]
 800a990:	e02a      	b.n	800a9e8 <USB_EPStartXfer+0x6a6>
 800a992:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a996:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	785b      	ldrb	r3, [r3, #1]
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d122      	bne.n	800a9e8 <USB_EPStartXfer+0x6a6>
 800a9a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	653b      	str	r3, [r7, #80]	@ 0x50
 800a9ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	461a      	mov	r2, r3
 800a9c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9c2:	4413      	add	r3, r2
 800a9c4:	653b      	str	r3, [r7, #80]	@ 0x50
 800a9c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	00da      	lsls	r2, r3, #3
 800a9d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9d6:	4413      	add	r3, r2
 800a9d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a9dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a9de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9e2:	b29a      	uxth	r2, r3
 800a9e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a9e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	891b      	ldrh	r3, [r3, #8]
 800a9f4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a9f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	6959      	ldr	r1, [r3, #20]
 800aa04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800aa0e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800aa12:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800aa16:	6800      	ldr	r0, [r0, #0]
 800aa18:	f001 f97e 	bl	800bd18 <USB_WritePMA>
            ep->xfer_buff += len;
 800aa1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	695a      	ldr	r2, [r3, #20]
 800aa28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa2c:	441a      	add	r2, r3
 800aa2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800aa3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	6a1a      	ldr	r2, [r3, #32]
 800aa46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	691b      	ldr	r3, [r3, #16]
 800aa52:	429a      	cmp	r2, r3
 800aa54:	d90f      	bls.n	800aa76 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800aa56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	6a1a      	ldr	r2, [r3, #32]
 800aa62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa66:	1ad2      	subs	r2, r2, r3
 800aa68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	621a      	str	r2, [r3, #32]
 800aa74:	e00e      	b.n	800aa94 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800aa76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	6a1b      	ldr	r3, [r3, #32]
 800aa82:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800aa86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	2200      	movs	r2, #0
 800aa92:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800aa94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	643b      	str	r3, [r7, #64]	@ 0x40
 800aaa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aaa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	785b      	ldrb	r3, [r3, #1]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d177      	bne.n	800aba0 <USB_EPStartXfer+0x85e>
 800aab0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aab4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	63bb      	str	r3, [r7, #56]	@ 0x38
 800aabc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aac0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aaca:	b29b      	uxth	r3, r3
 800aacc:	461a      	mov	r2, r3
 800aace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aad0:	4413      	add	r3, r2
 800aad2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800aad4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aad8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	781b      	ldrb	r3, [r3, #0]
 800aae0:	00da      	lsls	r2, r3, #3
 800aae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aae4:	4413      	add	r3, r2
 800aae6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800aaea:	637b      	str	r3, [r7, #52]	@ 0x34
 800aaec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaee:	881b      	ldrh	r3, [r3, #0]
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aaf6:	b29a      	uxth	r2, r3
 800aaf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aafa:	801a      	strh	r2, [r3, #0]
 800aafc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab00:	2b3e      	cmp	r3, #62	@ 0x3e
 800ab02:	d921      	bls.n	800ab48 <USB_EPStartXfer+0x806>
 800ab04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab08:	095b      	lsrs	r3, r3, #5
 800ab0a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ab0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab12:	f003 031f 	and.w	r3, r3, #31
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d104      	bne.n	800ab24 <USB_EPStartXfer+0x7e2>
 800ab1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab1e:	3b01      	subs	r3, #1
 800ab20:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ab24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab26:	881b      	ldrh	r3, [r3, #0]
 800ab28:	b29a      	uxth	r2, r3
 800ab2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	029b      	lsls	r3, r3, #10
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	4313      	orrs	r3, r2
 800ab36:	b29b      	uxth	r3, r3
 800ab38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab40:	b29a      	uxth	r2, r3
 800ab42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab44:	801a      	strh	r2, [r3, #0]
 800ab46:	e050      	b.n	800abea <USB_EPStartXfer+0x8a8>
 800ab48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d10a      	bne.n	800ab66 <USB_EPStartXfer+0x824>
 800ab50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab52:	881b      	ldrh	r3, [r3, #0]
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab5e:	b29a      	uxth	r2, r3
 800ab60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab62:	801a      	strh	r2, [r3, #0]
 800ab64:	e041      	b.n	800abea <USB_EPStartXfer+0x8a8>
 800ab66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab6a:	085b      	lsrs	r3, r3, #1
 800ab6c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ab70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab74:	f003 0301 	and.w	r3, r3, #1
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d004      	beq.n	800ab86 <USB_EPStartXfer+0x844>
 800ab7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab80:	3301      	adds	r3, #1
 800ab82:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ab86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab88:	881b      	ldrh	r3, [r3, #0]
 800ab8a:	b29a      	uxth	r2, r3
 800ab8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab90:	b29b      	uxth	r3, r3
 800ab92:	029b      	lsls	r3, r3, #10
 800ab94:	b29b      	uxth	r3, r3
 800ab96:	4313      	orrs	r3, r2
 800ab98:	b29a      	uxth	r2, r3
 800ab9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab9c:	801a      	strh	r2, [r3, #0]
 800ab9e:	e024      	b.n	800abea <USB_EPStartXfer+0x8a8>
 800aba0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aba4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	785b      	ldrb	r3, [r3, #1]
 800abac:	2b01      	cmp	r3, #1
 800abae:	d11c      	bne.n	800abea <USB_EPStartXfer+0x8a8>
 800abb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	461a      	mov	r2, r3
 800abc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800abc4:	4413      	add	r3, r2
 800abc6:	643b      	str	r3, [r7, #64]	@ 0x40
 800abc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	781b      	ldrb	r3, [r3, #0]
 800abd4:	00da      	lsls	r2, r3, #3
 800abd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800abd8:	4413      	add	r3, r2
 800abda:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800abde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800abe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abe4:	b29a      	uxth	r2, r3
 800abe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abe8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800abea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	895b      	ldrh	r3, [r3, #10]
 800abf6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800abfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	6959      	ldr	r1, [r3, #20]
 800ac06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac0a:	b29b      	uxth	r3, r3
 800ac0c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ac10:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ac14:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ac18:	6800      	ldr	r0, [r0, #0]
 800ac1a:	f001 f87d 	bl	800bd18 <USB_WritePMA>
 800ac1e:	e227      	b.n	800b070 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800ac20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	6a1b      	ldr	r3, [r3, #32]
 800ac2c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800ac30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac38:	681a      	ldr	r2, [r3, #0]
 800ac3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	009b      	lsls	r3, r3, #2
 800ac48:	4413      	add	r3, r2
 800ac4a:	881b      	ldrh	r3, [r3, #0]
 800ac4c:	b29b      	uxth	r3, r3
 800ac4e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800ac52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac56:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800ac5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac62:	681a      	ldr	r2, [r3, #0]
 800ac64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	009b      	lsls	r3, r3, #2
 800ac72:	441a      	add	r2, r3
 800ac74:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800ac78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ac8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ac98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	461a      	mov	r2, r3
 800acaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800acac:	4413      	add	r3, r2
 800acae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800acb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	00da      	lsls	r2, r3, #3
 800acbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800acc0:	4413      	add	r3, r2
 800acc2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800acc6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800acc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800accc:	b29a      	uxth	r2, r3
 800acce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800acd0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800acd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	891b      	ldrh	r3, [r3, #8]
 800acde:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ace2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ace6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	6959      	ldr	r1, [r3, #20]
 800acee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acf2:	b29b      	uxth	r3, r3
 800acf4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800acf8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800acfc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ad00:	6800      	ldr	r0, [r0, #0]
 800ad02:	f001 f809 	bl	800bd18 <USB_WritePMA>
 800ad06:	e1b3      	b.n	800b070 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ad08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	6a1a      	ldr	r2, [r3, #32]
 800ad14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad18:	1ad2      	subs	r2, r2, r3
 800ad1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ad26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad2e:	681a      	ldr	r2, [r3, #0]
 800ad30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	009b      	lsls	r3, r3, #2
 800ad3e:	4413      	add	r3, r2
 800ad40:	881b      	ldrh	r3, [r3, #0]
 800ad42:	b29b      	uxth	r3, r3
 800ad44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	f000 80c6 	beq.w	800aeda <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ad4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	673b      	str	r3, [r7, #112]	@ 0x70
 800ad5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	785b      	ldrb	r3, [r3, #1]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d177      	bne.n	800ae5a <USB_EPStartXfer+0xb18>
 800ad6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ad76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad84:	b29b      	uxth	r3, r3
 800ad86:	461a      	mov	r2, r3
 800ad88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ad8a:	4413      	add	r3, r2
 800ad8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ad8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	781b      	ldrb	r3, [r3, #0]
 800ad9a:	00da      	lsls	r2, r3, #3
 800ad9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ad9e:	4413      	add	r3, r2
 800ada0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ada4:	667b      	str	r3, [r7, #100]	@ 0x64
 800ada6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ada8:	881b      	ldrh	r3, [r3, #0]
 800adaa:	b29b      	uxth	r3, r3
 800adac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800adb0:	b29a      	uxth	r2, r3
 800adb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800adb4:	801a      	strh	r2, [r3, #0]
 800adb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adba:	2b3e      	cmp	r3, #62	@ 0x3e
 800adbc:	d921      	bls.n	800ae02 <USB_EPStartXfer+0xac0>
 800adbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adc2:	095b      	lsrs	r3, r3, #5
 800adc4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800adc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adcc:	f003 031f 	and.w	r3, r3, #31
 800add0:	2b00      	cmp	r3, #0
 800add2:	d104      	bne.n	800adde <USB_EPStartXfer+0xa9c>
 800add4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800add8:	3b01      	subs	r3, #1
 800adda:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800adde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ade0:	881b      	ldrh	r3, [r3, #0]
 800ade2:	b29a      	uxth	r2, r3
 800ade4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ade8:	b29b      	uxth	r3, r3
 800adea:	029b      	lsls	r3, r3, #10
 800adec:	b29b      	uxth	r3, r3
 800adee:	4313      	orrs	r3, r2
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adfa:	b29a      	uxth	r2, r3
 800adfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800adfe:	801a      	strh	r2, [r3, #0]
 800ae00:	e050      	b.n	800aea4 <USB_EPStartXfer+0xb62>
 800ae02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d10a      	bne.n	800ae20 <USB_EPStartXfer+0xade>
 800ae0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ae0c:	881b      	ldrh	r3, [r3, #0]
 800ae0e:	b29b      	uxth	r3, r3
 800ae10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae18:	b29a      	uxth	r2, r3
 800ae1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ae1c:	801a      	strh	r2, [r3, #0]
 800ae1e:	e041      	b.n	800aea4 <USB_EPStartXfer+0xb62>
 800ae20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae24:	085b      	lsrs	r3, r3, #1
 800ae26:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ae2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae2e:	f003 0301 	and.w	r3, r3, #1
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d004      	beq.n	800ae40 <USB_EPStartXfer+0xafe>
 800ae36:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ae40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ae42:	881b      	ldrh	r3, [r3, #0]
 800ae44:	b29a      	uxth	r2, r3
 800ae46:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ae4a:	b29b      	uxth	r3, r3
 800ae4c:	029b      	lsls	r3, r3, #10
 800ae4e:	b29b      	uxth	r3, r3
 800ae50:	4313      	orrs	r3, r2
 800ae52:	b29a      	uxth	r2, r3
 800ae54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ae56:	801a      	strh	r2, [r3, #0]
 800ae58:	e024      	b.n	800aea4 <USB_EPStartXfer+0xb62>
 800ae5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	785b      	ldrb	r3, [r3, #1]
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	d11c      	bne.n	800aea4 <USB_EPStartXfer+0xb62>
 800ae6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae78:	b29b      	uxth	r3, r3
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ae7e:	4413      	add	r3, r2
 800ae80:	673b      	str	r3, [r7, #112]	@ 0x70
 800ae82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	00da      	lsls	r2, r3, #3
 800ae90:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ae92:	4413      	add	r3, r2
 800ae94:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ae98:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ae9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae9e:	b29a      	uxth	r2, r3
 800aea0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aea2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800aea4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aea8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	895b      	ldrh	r3, [r3, #10]
 800aeb0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aeb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aeb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	6959      	ldr	r1, [r3, #20]
 800aec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aec4:	b29b      	uxth	r3, r3
 800aec6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800aeca:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800aece:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800aed2:	6800      	ldr	r0, [r0, #0]
 800aed4:	f000 ff20 	bl	800bd18 <USB_WritePMA>
 800aed8:	e0ca      	b.n	800b070 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800aeda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aede:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	785b      	ldrb	r3, [r3, #1]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d177      	bne.n	800afda <USB_EPStartXfer+0xc98>
 800aeea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aeee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800aef6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aefa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af04:	b29b      	uxth	r3, r3
 800af06:	461a      	mov	r2, r3
 800af08:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800af0a:	4413      	add	r3, r2
 800af0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800af0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	00da      	lsls	r2, r3, #3
 800af1c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800af1e:	4413      	add	r3, r2
 800af20:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800af24:	67bb      	str	r3, [r7, #120]	@ 0x78
 800af26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af28:	881b      	ldrh	r3, [r3, #0]
 800af2a:	b29b      	uxth	r3, r3
 800af2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af30:	b29a      	uxth	r2, r3
 800af32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af34:	801a      	strh	r2, [r3, #0]
 800af36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af3a:	2b3e      	cmp	r3, #62	@ 0x3e
 800af3c:	d921      	bls.n	800af82 <USB_EPStartXfer+0xc40>
 800af3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af42:	095b      	lsrs	r3, r3, #5
 800af44:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800af48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af4c:	f003 031f 	and.w	r3, r3, #31
 800af50:	2b00      	cmp	r3, #0
 800af52:	d104      	bne.n	800af5e <USB_EPStartXfer+0xc1c>
 800af54:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800af58:	3b01      	subs	r3, #1
 800af5a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800af5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af60:	881b      	ldrh	r3, [r3, #0]
 800af62:	b29a      	uxth	r2, r3
 800af64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800af68:	b29b      	uxth	r3, r3
 800af6a:	029b      	lsls	r3, r3, #10
 800af6c:	b29b      	uxth	r3, r3
 800af6e:	4313      	orrs	r3, r2
 800af70:	b29b      	uxth	r3, r3
 800af72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af7a:	b29a      	uxth	r2, r3
 800af7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af7e:	801a      	strh	r2, [r3, #0]
 800af80:	e05c      	b.n	800b03c <USB_EPStartXfer+0xcfa>
 800af82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af86:	2b00      	cmp	r3, #0
 800af88:	d10a      	bne.n	800afa0 <USB_EPStartXfer+0xc5e>
 800af8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af8c:	881b      	ldrh	r3, [r3, #0]
 800af8e:	b29b      	uxth	r3, r3
 800af90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af98:	b29a      	uxth	r2, r3
 800af9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af9c:	801a      	strh	r2, [r3, #0]
 800af9e:	e04d      	b.n	800b03c <USB_EPStartXfer+0xcfa>
 800afa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afa4:	085b      	lsrs	r3, r3, #1
 800afa6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800afaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afae:	f003 0301 	and.w	r3, r3, #1
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d004      	beq.n	800afc0 <USB_EPStartXfer+0xc7e>
 800afb6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800afba:	3301      	adds	r3, #1
 800afbc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800afc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800afc2:	881b      	ldrh	r3, [r3, #0]
 800afc4:	b29a      	uxth	r2, r3
 800afc6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800afca:	b29b      	uxth	r3, r3
 800afcc:	029b      	lsls	r3, r3, #10
 800afce:	b29b      	uxth	r3, r3
 800afd0:	4313      	orrs	r3, r2
 800afd2:	b29a      	uxth	r2, r3
 800afd4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800afd6:	801a      	strh	r2, [r3, #0]
 800afd8:	e030      	b.n	800b03c <USB_EPStartXfer+0xcfa>
 800afda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	785b      	ldrb	r3, [r3, #1]
 800afe6:	2b01      	cmp	r3, #1
 800afe8:	d128      	bne.n	800b03c <USB_EPStartXfer+0xcfa>
 800afea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800aff8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800affc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b006:	b29b      	uxth	r3, r3
 800b008:	461a      	mov	r2, r3
 800b00a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b00e:	4413      	add	r3, r2
 800b010:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b014:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b018:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	781b      	ldrb	r3, [r3, #0]
 800b020:	00da      	lsls	r2, r3, #3
 800b022:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b026:	4413      	add	r3, r2
 800b028:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b02c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b034:	b29a      	uxth	r2, r3
 800b036:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b03a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b03c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b040:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	891b      	ldrh	r3, [r3, #8]
 800b048:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b04c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b050:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	6959      	ldr	r1, [r3, #20]
 800b058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b05c:	b29b      	uxth	r3, r3
 800b05e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b062:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b066:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b06a:	6800      	ldr	r0, [r0, #0]
 800b06c:	f000 fe54 	bl	800bd18 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b074:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b078:	681a      	ldr	r2, [r3, #0]
 800b07a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b07e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	781b      	ldrb	r3, [r3, #0]
 800b086:	009b      	lsls	r3, r3, #2
 800b088:	4413      	add	r3, r2
 800b08a:	881b      	ldrh	r3, [r3, #0]
 800b08c:	b29b      	uxth	r3, r3
 800b08e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b092:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b096:	817b      	strh	r3, [r7, #10]
 800b098:	897b      	ldrh	r3, [r7, #10]
 800b09a:	f083 0310 	eor.w	r3, r3, #16
 800b09e:	817b      	strh	r3, [r7, #10]
 800b0a0:	897b      	ldrh	r3, [r7, #10]
 800b0a2:	f083 0320 	eor.w	r3, r3, #32
 800b0a6:	817b      	strh	r3, [r7, #10]
 800b0a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b0b0:	681a      	ldr	r2, [r3, #0]
 800b0b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	781b      	ldrb	r3, [r3, #0]
 800b0be:	009b      	lsls	r3, r3, #2
 800b0c0:	441a      	add	r2, r3
 800b0c2:	897b      	ldrh	r3, [r7, #10]
 800b0c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b0c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b0cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b0d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0d4:	b29b      	uxth	r3, r3
 800b0d6:	8013      	strh	r3, [r2, #0]
 800b0d8:	f000 bcde 	b.w	800ba98 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b0dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	7b1b      	ldrb	r3, [r3, #12]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	f040 80bb 	bne.w	800b264 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b0ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	699a      	ldr	r2, [r3, #24]
 800b0fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	691b      	ldr	r3, [r3, #16]
 800b106:	429a      	cmp	r2, r3
 800b108:	d917      	bls.n	800b13a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800b10a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b10e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	691b      	ldr	r3, [r3, #16]
 800b116:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800b11a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b11e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	699a      	ldr	r2, [r3, #24]
 800b126:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b12a:	1ad2      	subs	r2, r2, r3
 800b12c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b130:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	619a      	str	r2, [r3, #24]
 800b138:	e00e      	b.n	800b158 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800b13a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b13e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	699b      	ldr	r3, [r3, #24]
 800b146:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800b14a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b14e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	2200      	movs	r2, #0
 800b156:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b158:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b15c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b166:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b16a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b174:	b29b      	uxth	r3, r3
 800b176:	461a      	mov	r2, r3
 800b178:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b17c:	4413      	add	r3, r2
 800b17e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b182:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b186:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	00da      	lsls	r2, r3, #3
 800b190:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b194:	4413      	add	r3, r2
 800b196:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b19a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b19e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b1a2:	881b      	ldrh	r3, [r3, #0]
 800b1a4:	b29b      	uxth	r3, r3
 800b1a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b1aa:	b29a      	uxth	r2, r3
 800b1ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b1b0:	801a      	strh	r2, [r3, #0]
 800b1b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1b6:	2b3e      	cmp	r3, #62	@ 0x3e
 800b1b8:	d924      	bls.n	800b204 <USB_EPStartXfer+0xec2>
 800b1ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1be:	095b      	lsrs	r3, r3, #5
 800b1c0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b1c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1c8:	f003 031f 	and.w	r3, r3, #31
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d104      	bne.n	800b1da <USB_EPStartXfer+0xe98>
 800b1d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b1d4:	3b01      	subs	r3, #1
 800b1d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b1da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b1de:	881b      	ldrh	r3, [r3, #0]
 800b1e0:	b29a      	uxth	r2, r3
 800b1e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b1e6:	b29b      	uxth	r3, r3
 800b1e8:	029b      	lsls	r3, r3, #10
 800b1ea:	b29b      	uxth	r3, r3
 800b1ec:	4313      	orrs	r3, r2
 800b1ee:	b29b      	uxth	r3, r3
 800b1f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1f8:	b29a      	uxth	r2, r3
 800b1fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b1fe:	801a      	strh	r2, [r3, #0]
 800b200:	f000 bc10 	b.w	800ba24 <USB_EPStartXfer+0x16e2>
 800b204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d10c      	bne.n	800b226 <USB_EPStartXfer+0xee4>
 800b20c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b210:	881b      	ldrh	r3, [r3, #0]
 800b212:	b29b      	uxth	r3, r3
 800b214:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b218:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b21c:	b29a      	uxth	r2, r3
 800b21e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b222:	801a      	strh	r2, [r3, #0]
 800b224:	e3fe      	b.n	800ba24 <USB_EPStartXfer+0x16e2>
 800b226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b22a:	085b      	lsrs	r3, r3, #1
 800b22c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b230:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b234:	f003 0301 	and.w	r3, r3, #1
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d004      	beq.n	800b246 <USB_EPStartXfer+0xf04>
 800b23c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b240:	3301      	adds	r3, #1
 800b242:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b246:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b24a:	881b      	ldrh	r3, [r3, #0]
 800b24c:	b29a      	uxth	r2, r3
 800b24e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b252:	b29b      	uxth	r3, r3
 800b254:	029b      	lsls	r3, r3, #10
 800b256:	b29b      	uxth	r3, r3
 800b258:	4313      	orrs	r3, r2
 800b25a:	b29a      	uxth	r2, r3
 800b25c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b260:	801a      	strh	r2, [r3, #0]
 800b262:	e3df      	b.n	800ba24 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b268:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	78db      	ldrb	r3, [r3, #3]
 800b270:	2b02      	cmp	r3, #2
 800b272:	f040 8218 	bne.w	800b6a6 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b276:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b27a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	785b      	ldrb	r3, [r3, #1]
 800b282:	2b00      	cmp	r3, #0
 800b284:	f040 809d 	bne.w	800b3c2 <USB_EPStartXfer+0x1080>
 800b288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b28c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b296:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b29a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b2a4:	b29b      	uxth	r3, r3
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b2ac:	4413      	add	r3, r2
 800b2ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b2b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	781b      	ldrb	r3, [r3, #0]
 800b2be:	00da      	lsls	r2, r3, #3
 800b2c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b2c4:	4413      	add	r3, r2
 800b2c6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b2ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b2ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b2d2:	881b      	ldrh	r3, [r3, #0]
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b2da:	b29a      	uxth	r2, r3
 800b2dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b2e0:	801a      	strh	r2, [r3, #0]
 800b2e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	691b      	ldr	r3, [r3, #16]
 800b2ee:	2b3e      	cmp	r3, #62	@ 0x3e
 800b2f0:	d92b      	bls.n	800b34a <USB_EPStartXfer+0x1008>
 800b2f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	691b      	ldr	r3, [r3, #16]
 800b2fe:	095b      	lsrs	r3, r3, #5
 800b300:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b304:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b308:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	691b      	ldr	r3, [r3, #16]
 800b310:	f003 031f 	and.w	r3, r3, #31
 800b314:	2b00      	cmp	r3, #0
 800b316:	d104      	bne.n	800b322 <USB_EPStartXfer+0xfe0>
 800b318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b31c:	3b01      	subs	r3, #1
 800b31e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b322:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b326:	881b      	ldrh	r3, [r3, #0]
 800b328:	b29a      	uxth	r2, r3
 800b32a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b32e:	b29b      	uxth	r3, r3
 800b330:	029b      	lsls	r3, r3, #10
 800b332:	b29b      	uxth	r3, r3
 800b334:	4313      	orrs	r3, r2
 800b336:	b29b      	uxth	r3, r3
 800b338:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b33c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b340:	b29a      	uxth	r2, r3
 800b342:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b346:	801a      	strh	r2, [r3, #0]
 800b348:	e070      	b.n	800b42c <USB_EPStartXfer+0x10ea>
 800b34a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b34e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	691b      	ldr	r3, [r3, #16]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d10c      	bne.n	800b374 <USB_EPStartXfer+0x1032>
 800b35a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b35e:	881b      	ldrh	r3, [r3, #0]
 800b360:	b29b      	uxth	r3, r3
 800b362:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b366:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b36a:	b29a      	uxth	r2, r3
 800b36c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b370:	801a      	strh	r2, [r3, #0]
 800b372:	e05b      	b.n	800b42c <USB_EPStartXfer+0x10ea>
 800b374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b378:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	691b      	ldr	r3, [r3, #16]
 800b380:	085b      	lsrs	r3, r3, #1
 800b382:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b38a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	691b      	ldr	r3, [r3, #16]
 800b392:	f003 0301 	and.w	r3, r3, #1
 800b396:	2b00      	cmp	r3, #0
 800b398:	d004      	beq.n	800b3a4 <USB_EPStartXfer+0x1062>
 800b39a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b39e:	3301      	adds	r3, #1
 800b3a0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b3a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b3a8:	881b      	ldrh	r3, [r3, #0]
 800b3aa:	b29a      	uxth	r2, r3
 800b3ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	029b      	lsls	r3, r3, #10
 800b3b4:	b29b      	uxth	r3, r3
 800b3b6:	4313      	orrs	r3, r2
 800b3b8:	b29a      	uxth	r2, r3
 800b3ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b3be:	801a      	strh	r2, [r3, #0]
 800b3c0:	e034      	b.n	800b42c <USB_EPStartXfer+0x10ea>
 800b3c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	785b      	ldrb	r3, [r3, #1]
 800b3ce:	2b01      	cmp	r3, #1
 800b3d0:	d12c      	bne.n	800b42c <USB_EPStartXfer+0x10ea>
 800b3d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b3e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b3ee:	b29b      	uxth	r3, r3
 800b3f0:	461a      	mov	r2, r3
 800b3f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b3f6:	4413      	add	r3, r2
 800b3f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b3fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b400:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	781b      	ldrb	r3, [r3, #0]
 800b408:	00da      	lsls	r2, r3, #3
 800b40a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b40e:	4413      	add	r3, r2
 800b410:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b414:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b418:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b41c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	691b      	ldr	r3, [r3, #16]
 800b424:	b29a      	uxth	r2, r3
 800b426:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b42a:	801a      	strh	r2, [r3, #0]
 800b42c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b430:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b43a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b43e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	785b      	ldrb	r3, [r3, #1]
 800b446:	2b00      	cmp	r3, #0
 800b448:	f040 809d 	bne.w	800b586 <USB_EPStartXfer+0x1244>
 800b44c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b450:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b45a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b45e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b468:	b29b      	uxth	r3, r3
 800b46a:	461a      	mov	r2, r3
 800b46c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b470:	4413      	add	r3, r2
 800b472:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b476:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b47a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	781b      	ldrb	r3, [r3, #0]
 800b482:	00da      	lsls	r2, r3, #3
 800b484:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b488:	4413      	add	r3, r2
 800b48a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b48e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b492:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b496:	881b      	ldrh	r3, [r3, #0]
 800b498:	b29b      	uxth	r3, r3
 800b49a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b49e:	b29a      	uxth	r2, r3
 800b4a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b4a4:	801a      	strh	r2, [r3, #0]
 800b4a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	691b      	ldr	r3, [r3, #16]
 800b4b2:	2b3e      	cmp	r3, #62	@ 0x3e
 800b4b4:	d92b      	bls.n	800b50e <USB_EPStartXfer+0x11cc>
 800b4b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	691b      	ldr	r3, [r3, #16]
 800b4c2:	095b      	lsrs	r3, r3, #5
 800b4c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b4c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	691b      	ldr	r3, [r3, #16]
 800b4d4:	f003 031f 	and.w	r3, r3, #31
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d104      	bne.n	800b4e6 <USB_EPStartXfer+0x11a4>
 800b4dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b4e0:	3b01      	subs	r3, #1
 800b4e2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b4e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b4ea:	881b      	ldrh	r3, [r3, #0]
 800b4ec:	b29a      	uxth	r2, r3
 800b4ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	029b      	lsls	r3, r3, #10
 800b4f6:	b29b      	uxth	r3, r3
 800b4f8:	4313      	orrs	r3, r2
 800b4fa:	b29b      	uxth	r3, r3
 800b4fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b500:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b504:	b29a      	uxth	r2, r3
 800b506:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b50a:	801a      	strh	r2, [r3, #0]
 800b50c:	e069      	b.n	800b5e2 <USB_EPStartXfer+0x12a0>
 800b50e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b512:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	691b      	ldr	r3, [r3, #16]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d10c      	bne.n	800b538 <USB_EPStartXfer+0x11f6>
 800b51e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b522:	881b      	ldrh	r3, [r3, #0]
 800b524:	b29b      	uxth	r3, r3
 800b526:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b52a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b52e:	b29a      	uxth	r2, r3
 800b530:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b534:	801a      	strh	r2, [r3, #0]
 800b536:	e054      	b.n	800b5e2 <USB_EPStartXfer+0x12a0>
 800b538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b53c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	691b      	ldr	r3, [r3, #16]
 800b544:	085b      	lsrs	r3, r3, #1
 800b546:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b54a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b54e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	691b      	ldr	r3, [r3, #16]
 800b556:	f003 0301 	and.w	r3, r3, #1
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d004      	beq.n	800b568 <USB_EPStartXfer+0x1226>
 800b55e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b562:	3301      	adds	r3, #1
 800b564:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b568:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b56c:	881b      	ldrh	r3, [r3, #0]
 800b56e:	b29a      	uxth	r2, r3
 800b570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b574:	b29b      	uxth	r3, r3
 800b576:	029b      	lsls	r3, r3, #10
 800b578:	b29b      	uxth	r3, r3
 800b57a:	4313      	orrs	r3, r2
 800b57c:	b29a      	uxth	r2, r3
 800b57e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b582:	801a      	strh	r2, [r3, #0]
 800b584:	e02d      	b.n	800b5e2 <USB_EPStartXfer+0x12a0>
 800b586:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b58a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	785b      	ldrb	r3, [r3, #1]
 800b592:	2b01      	cmp	r3, #1
 800b594:	d125      	bne.n	800b5e2 <USB_EPStartXfer+0x12a0>
 800b596:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b59a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b5a4:	b29b      	uxth	r3, r3
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b5ac:	4413      	add	r3, r2
 800b5ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b5b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	00da      	lsls	r2, r3, #3
 800b5c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b5c4:	4413      	add	r3, r2
 800b5c6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b5ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b5ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	691b      	ldr	r3, [r3, #16]
 800b5da:	b29a      	uxth	r2, r3
 800b5dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b5e0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b5e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	69db      	ldr	r3, [r3, #28]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	f000 8218 	beq.w	800ba24 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b5f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b5fc:	681a      	ldr	r2, [r3, #0]
 800b5fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b602:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	781b      	ldrb	r3, [r3, #0]
 800b60a:	009b      	lsls	r3, r3, #2
 800b60c:	4413      	add	r3, r2
 800b60e:	881b      	ldrh	r3, [r3, #0]
 800b610:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b614:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b618:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d005      	beq.n	800b62c <USB_EPStartXfer+0x12ea>
 800b620:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d10d      	bne.n	800b648 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b62c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b630:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b634:	2b00      	cmp	r3, #0
 800b636:	f040 81f5 	bne.w	800ba24 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b63a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b63e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b642:	2b00      	cmp	r3, #0
 800b644:	f040 81ee 	bne.w	800ba24 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b648:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b64c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b650:	681a      	ldr	r2, [r3, #0]
 800b652:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b656:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	781b      	ldrb	r3, [r3, #0]
 800b65e:	009b      	lsls	r3, r3, #2
 800b660:	4413      	add	r3, r2
 800b662:	881b      	ldrh	r3, [r3, #0]
 800b664:	b29b      	uxth	r3, r3
 800b666:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b66a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b66e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800b672:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b676:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b67a:	681a      	ldr	r2, [r3, #0]
 800b67c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b680:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	009b      	lsls	r3, r3, #2
 800b68a:	441a      	add	r2, r3
 800b68c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b690:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b694:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b698:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b69c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b6a0:	b29b      	uxth	r3, r3
 800b6a2:	8013      	strh	r3, [r2, #0]
 800b6a4:	e1be      	b.n	800ba24 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b6a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	78db      	ldrb	r3, [r3, #3]
 800b6b2:	2b01      	cmp	r3, #1
 800b6b4:	f040 81b4 	bne.w	800ba20 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b6b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	699a      	ldr	r2, [r3, #24]
 800b6c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	691b      	ldr	r3, [r3, #16]
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d917      	bls.n	800b704 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800b6d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	691b      	ldr	r3, [r3, #16]
 800b6e0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800b6e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	699a      	ldr	r2, [r3, #24]
 800b6f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6f4:	1ad2      	subs	r2, r2, r3
 800b6f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	619a      	str	r2, [r3, #24]
 800b702:	e00e      	b.n	800b722 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800b704:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b708:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	699b      	ldr	r3, [r3, #24]
 800b710:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800b714:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b718:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	2200      	movs	r2, #0
 800b720:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b726:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	785b      	ldrb	r3, [r3, #1]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	f040 8085 	bne.w	800b83e <USB_EPStartXfer+0x14fc>
 800b734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b738:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b742:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b746:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b750:	b29b      	uxth	r3, r3
 800b752:	461a      	mov	r2, r3
 800b754:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b758:	4413      	add	r3, r2
 800b75a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b75e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b762:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	781b      	ldrb	r3, [r3, #0]
 800b76a:	00da      	lsls	r2, r3, #3
 800b76c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b770:	4413      	add	r3, r2
 800b772:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b776:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b77a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b77e:	881b      	ldrh	r3, [r3, #0]
 800b780:	b29b      	uxth	r3, r3
 800b782:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b786:	b29a      	uxth	r2, r3
 800b788:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b78c:	801a      	strh	r2, [r3, #0]
 800b78e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b792:	2b3e      	cmp	r3, #62	@ 0x3e
 800b794:	d923      	bls.n	800b7de <USB_EPStartXfer+0x149c>
 800b796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b79a:	095b      	lsrs	r3, r3, #5
 800b79c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b7a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7a4:	f003 031f 	and.w	r3, r3, #31
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d104      	bne.n	800b7b6 <USB_EPStartXfer+0x1474>
 800b7ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b7b0:	3b01      	subs	r3, #1
 800b7b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b7b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b7ba:	881b      	ldrh	r3, [r3, #0]
 800b7bc:	b29a      	uxth	r2, r3
 800b7be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b7c2:	b29b      	uxth	r3, r3
 800b7c4:	029b      	lsls	r3, r3, #10
 800b7c6:	b29b      	uxth	r3, r3
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	b29b      	uxth	r3, r3
 800b7cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7d4:	b29a      	uxth	r2, r3
 800b7d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b7da:	801a      	strh	r2, [r3, #0]
 800b7dc:	e060      	b.n	800b8a0 <USB_EPStartXfer+0x155e>
 800b7de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d10c      	bne.n	800b800 <USB_EPStartXfer+0x14be>
 800b7e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b7ea:	881b      	ldrh	r3, [r3, #0]
 800b7ec:	b29b      	uxth	r3, r3
 800b7ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7f6:	b29a      	uxth	r2, r3
 800b7f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b7fc:	801a      	strh	r2, [r3, #0]
 800b7fe:	e04f      	b.n	800b8a0 <USB_EPStartXfer+0x155e>
 800b800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b804:	085b      	lsrs	r3, r3, #1
 800b806:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b80a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b80e:	f003 0301 	and.w	r3, r3, #1
 800b812:	2b00      	cmp	r3, #0
 800b814:	d004      	beq.n	800b820 <USB_EPStartXfer+0x14de>
 800b816:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b81a:	3301      	adds	r3, #1
 800b81c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b820:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b824:	881b      	ldrh	r3, [r3, #0]
 800b826:	b29a      	uxth	r2, r3
 800b828:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b82c:	b29b      	uxth	r3, r3
 800b82e:	029b      	lsls	r3, r3, #10
 800b830:	b29b      	uxth	r3, r3
 800b832:	4313      	orrs	r3, r2
 800b834:	b29a      	uxth	r2, r3
 800b836:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b83a:	801a      	strh	r2, [r3, #0]
 800b83c:	e030      	b.n	800b8a0 <USB_EPStartXfer+0x155e>
 800b83e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b842:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	785b      	ldrb	r3, [r3, #1]
 800b84a:	2b01      	cmp	r3, #1
 800b84c:	d128      	bne.n	800b8a0 <USB_EPStartXfer+0x155e>
 800b84e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b852:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b85c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b860:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b86a:	b29b      	uxth	r3, r3
 800b86c:	461a      	mov	r2, r3
 800b86e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b872:	4413      	add	r3, r2
 800b874:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b878:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b87c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	781b      	ldrb	r3, [r3, #0]
 800b884:	00da      	lsls	r2, r3, #3
 800b886:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b88a:	4413      	add	r3, r2
 800b88c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b890:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b898:	b29a      	uxth	r2, r3
 800b89a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800b89e:	801a      	strh	r2, [r3, #0]
 800b8a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b8ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	785b      	ldrb	r3, [r3, #1]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	f040 8085 	bne.w	800b9ca <USB_EPStartXfer+0x1688>
 800b8c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b8ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b8dc:	b29b      	uxth	r3, r3
 800b8de:	461a      	mov	r2, r3
 800b8e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b8e4:	4413      	add	r3, r2
 800b8e6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b8ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	781b      	ldrb	r3, [r3, #0]
 800b8f6:	00da      	lsls	r2, r3, #3
 800b8f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b8fc:	4413      	add	r3, r2
 800b8fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b902:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b906:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b90a:	881b      	ldrh	r3, [r3, #0]
 800b90c:	b29b      	uxth	r3, r3
 800b90e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b912:	b29a      	uxth	r2, r3
 800b914:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b918:	801a      	strh	r2, [r3, #0]
 800b91a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b91e:	2b3e      	cmp	r3, #62	@ 0x3e
 800b920:	d923      	bls.n	800b96a <USB_EPStartXfer+0x1628>
 800b922:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b926:	095b      	lsrs	r3, r3, #5
 800b928:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b92c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b930:	f003 031f 	and.w	r3, r3, #31
 800b934:	2b00      	cmp	r3, #0
 800b936:	d104      	bne.n	800b942 <USB_EPStartXfer+0x1600>
 800b938:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b93c:	3b01      	subs	r3, #1
 800b93e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b942:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b946:	881b      	ldrh	r3, [r3, #0]
 800b948:	b29a      	uxth	r2, r3
 800b94a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b94e:	b29b      	uxth	r3, r3
 800b950:	029b      	lsls	r3, r3, #10
 800b952:	b29b      	uxth	r3, r3
 800b954:	4313      	orrs	r3, r2
 800b956:	b29b      	uxth	r3, r3
 800b958:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b95c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b960:	b29a      	uxth	r2, r3
 800b962:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b966:	801a      	strh	r2, [r3, #0]
 800b968:	e05c      	b.n	800ba24 <USB_EPStartXfer+0x16e2>
 800b96a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d10c      	bne.n	800b98c <USB_EPStartXfer+0x164a>
 800b972:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b976:	881b      	ldrh	r3, [r3, #0]
 800b978:	b29b      	uxth	r3, r3
 800b97a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b97e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b982:	b29a      	uxth	r2, r3
 800b984:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b988:	801a      	strh	r2, [r3, #0]
 800b98a:	e04b      	b.n	800ba24 <USB_EPStartXfer+0x16e2>
 800b98c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b990:	085b      	lsrs	r3, r3, #1
 800b992:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b996:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b99a:	f003 0301 	and.w	r3, r3, #1
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d004      	beq.n	800b9ac <USB_EPStartXfer+0x166a>
 800b9a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b9a6:	3301      	adds	r3, #1
 800b9a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b9ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b9b0:	881b      	ldrh	r3, [r3, #0]
 800b9b2:	b29a      	uxth	r2, r3
 800b9b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b9b8:	b29b      	uxth	r3, r3
 800b9ba:	029b      	lsls	r3, r3, #10
 800b9bc:	b29b      	uxth	r3, r3
 800b9be:	4313      	orrs	r3, r2
 800b9c0:	b29a      	uxth	r2, r3
 800b9c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b9c6:	801a      	strh	r2, [r3, #0]
 800b9c8:	e02c      	b.n	800ba24 <USB_EPStartXfer+0x16e2>
 800b9ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	785b      	ldrb	r3, [r3, #1]
 800b9d6:	2b01      	cmp	r3, #1
 800b9d8:	d124      	bne.n	800ba24 <USB_EPStartXfer+0x16e2>
 800b9da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b9e8:	b29b      	uxth	r3, r3
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b9f0:	4413      	add	r3, r2
 800b9f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b9f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	781b      	ldrb	r3, [r3, #0]
 800ba02:	00da      	lsls	r2, r3, #3
 800ba04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ba08:	4413      	add	r3, r2
 800ba0a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ba0e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ba12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba16:	b29a      	uxth	r2, r3
 800ba18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ba1c:	801a      	strh	r2, [r3, #0]
 800ba1e:	e001      	b.n	800ba24 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800ba20:	2301      	movs	r3, #1
 800ba22:	e03a      	b.n	800ba9a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ba24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba2c:	681a      	ldr	r2, [r3, #0]
 800ba2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	009b      	lsls	r3, r3, #2
 800ba3c:	4413      	add	r3, r2
 800ba3e:	881b      	ldrh	r3, [r3, #0]
 800ba40:	b29b      	uxth	r3, r3
 800ba42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ba46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba4a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ba4e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ba52:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ba56:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ba5a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ba5e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ba62:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ba66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba6e:	681a      	ldr	r2, [r3, #0]
 800ba70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	781b      	ldrb	r3, [r3, #0]
 800ba7c:	009b      	lsls	r3, r3, #2
 800ba7e:	441a      	add	r2, r3
 800ba80:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ba84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ba88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ba8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ba90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba94:	b29b      	uxth	r3, r3
 800ba96:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ba98:	2300      	movs	r3, #0
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}

0800baa4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800baa4:	b480      	push	{r7}
 800baa6:	b085      	sub	sp, #20
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
 800baac:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	785b      	ldrb	r3, [r3, #1]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d020      	beq.n	800baf8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800bab6:	687a      	ldr	r2, [r7, #4]
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	781b      	ldrb	r3, [r3, #0]
 800babc:	009b      	lsls	r3, r3, #2
 800babe:	4413      	add	r3, r2
 800bac0:	881b      	ldrh	r3, [r3, #0]
 800bac2:	b29b      	uxth	r3, r3
 800bac4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bac8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bacc:	81bb      	strh	r3, [r7, #12]
 800bace:	89bb      	ldrh	r3, [r7, #12]
 800bad0:	f083 0310 	eor.w	r3, r3, #16
 800bad4:	81bb      	strh	r3, [r7, #12]
 800bad6:	687a      	ldr	r2, [r7, #4]
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	781b      	ldrb	r3, [r3, #0]
 800badc:	009b      	lsls	r3, r3, #2
 800bade:	441a      	add	r2, r3
 800bae0:	89bb      	ldrh	r3, [r7, #12]
 800bae2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bae6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800baea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800baee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800baf2:	b29b      	uxth	r3, r3
 800baf4:	8013      	strh	r3, [r2, #0]
 800baf6:	e01f      	b.n	800bb38 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800baf8:	687a      	ldr	r2, [r7, #4]
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	781b      	ldrb	r3, [r3, #0]
 800bafe:	009b      	lsls	r3, r3, #2
 800bb00:	4413      	add	r3, r2
 800bb02:	881b      	ldrh	r3, [r3, #0]
 800bb04:	b29b      	uxth	r3, r3
 800bb06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bb0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb0e:	81fb      	strh	r3, [r7, #14]
 800bb10:	89fb      	ldrh	r3, [r7, #14]
 800bb12:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800bb16:	81fb      	strh	r3, [r7, #14]
 800bb18:	687a      	ldr	r2, [r7, #4]
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	781b      	ldrb	r3, [r3, #0]
 800bb1e:	009b      	lsls	r3, r3, #2
 800bb20:	441a      	add	r2, r3
 800bb22:	89fb      	ldrh	r3, [r7, #14]
 800bb24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bb28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bb2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bb30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb34:	b29b      	uxth	r3, r3
 800bb36:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800bb38:	2300      	movs	r3, #0
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3714      	adds	r7, #20
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb44:	4770      	bx	lr

0800bb46 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bb46:	b480      	push	{r7}
 800bb48:	b087      	sub	sp, #28
 800bb4a:	af00      	add	r7, sp, #0
 800bb4c:	6078      	str	r0, [r7, #4]
 800bb4e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	7b1b      	ldrb	r3, [r3, #12]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	f040 809d 	bne.w	800bc94 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	785b      	ldrb	r3, [r3, #1]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d04c      	beq.n	800bbfc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bb62:	687a      	ldr	r2, [r7, #4]
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	781b      	ldrb	r3, [r3, #0]
 800bb68:	009b      	lsls	r3, r3, #2
 800bb6a:	4413      	add	r3, r2
 800bb6c:	881b      	ldrh	r3, [r3, #0]
 800bb6e:	823b      	strh	r3, [r7, #16]
 800bb70:	8a3b      	ldrh	r3, [r7, #16]
 800bb72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d01b      	beq.n	800bbb2 <USB_EPClearStall+0x6c>
 800bb7a:	687a      	ldr	r2, [r7, #4]
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	781b      	ldrb	r3, [r3, #0]
 800bb80:	009b      	lsls	r3, r3, #2
 800bb82:	4413      	add	r3, r2
 800bb84:	881b      	ldrh	r3, [r3, #0]
 800bb86:	b29b      	uxth	r3, r3
 800bb88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bb8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb90:	81fb      	strh	r3, [r7, #14]
 800bb92:	687a      	ldr	r2, [r7, #4]
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	009b      	lsls	r3, r3, #2
 800bb9a:	441a      	add	r2, r3
 800bb9c:	89fb      	ldrh	r3, [r7, #14]
 800bb9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bba2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bba6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bbaa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bbae:	b29b      	uxth	r3, r3
 800bbb0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	78db      	ldrb	r3, [r3, #3]
 800bbb6:	2b01      	cmp	r3, #1
 800bbb8:	d06c      	beq.n	800bc94 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bbba:	687a      	ldr	r2, [r7, #4]
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	781b      	ldrb	r3, [r3, #0]
 800bbc0:	009b      	lsls	r3, r3, #2
 800bbc2:	4413      	add	r3, r2
 800bbc4:	881b      	ldrh	r3, [r3, #0]
 800bbc6:	b29b      	uxth	r3, r3
 800bbc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bbcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bbd0:	81bb      	strh	r3, [r7, #12]
 800bbd2:	89bb      	ldrh	r3, [r7, #12]
 800bbd4:	f083 0320 	eor.w	r3, r3, #32
 800bbd8:	81bb      	strh	r3, [r7, #12]
 800bbda:	687a      	ldr	r2, [r7, #4]
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	781b      	ldrb	r3, [r3, #0]
 800bbe0:	009b      	lsls	r3, r3, #2
 800bbe2:	441a      	add	r2, r3
 800bbe4:	89bb      	ldrh	r3, [r7, #12]
 800bbe6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bbea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bbee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bbf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbf6:	b29b      	uxth	r3, r3
 800bbf8:	8013      	strh	r3, [r2, #0]
 800bbfa:	e04b      	b.n	800bc94 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bbfc:	687a      	ldr	r2, [r7, #4]
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	009b      	lsls	r3, r3, #2
 800bc04:	4413      	add	r3, r2
 800bc06:	881b      	ldrh	r3, [r3, #0]
 800bc08:	82fb      	strh	r3, [r7, #22]
 800bc0a:	8afb      	ldrh	r3, [r7, #22]
 800bc0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d01b      	beq.n	800bc4c <USB_EPClearStall+0x106>
 800bc14:	687a      	ldr	r2, [r7, #4]
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	781b      	ldrb	r3, [r3, #0]
 800bc1a:	009b      	lsls	r3, r3, #2
 800bc1c:	4413      	add	r3, r2
 800bc1e:	881b      	ldrh	r3, [r3, #0]
 800bc20:	b29b      	uxth	r3, r3
 800bc22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bc26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc2a:	82bb      	strh	r3, [r7, #20]
 800bc2c:	687a      	ldr	r2, [r7, #4]
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	781b      	ldrb	r3, [r3, #0]
 800bc32:	009b      	lsls	r3, r3, #2
 800bc34:	441a      	add	r2, r3
 800bc36:	8abb      	ldrh	r3, [r7, #20]
 800bc38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bc3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bc40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bc44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc48:	b29b      	uxth	r3, r3
 800bc4a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bc4c:	687a      	ldr	r2, [r7, #4]
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	781b      	ldrb	r3, [r3, #0]
 800bc52:	009b      	lsls	r3, r3, #2
 800bc54:	4413      	add	r3, r2
 800bc56:	881b      	ldrh	r3, [r3, #0]
 800bc58:	b29b      	uxth	r3, r3
 800bc5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bc5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc62:	827b      	strh	r3, [r7, #18]
 800bc64:	8a7b      	ldrh	r3, [r7, #18]
 800bc66:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800bc6a:	827b      	strh	r3, [r7, #18]
 800bc6c:	8a7b      	ldrh	r3, [r7, #18]
 800bc6e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800bc72:	827b      	strh	r3, [r7, #18]
 800bc74:	687a      	ldr	r2, [r7, #4]
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	781b      	ldrb	r3, [r3, #0]
 800bc7a:	009b      	lsls	r3, r3, #2
 800bc7c:	441a      	add	r2, r3
 800bc7e:	8a7b      	ldrh	r3, [r7, #18]
 800bc80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bc84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bc88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc90:	b29b      	uxth	r3, r3
 800bc92:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800bc94:	2300      	movs	r3, #0
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	371c      	adds	r7, #28
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca0:	4770      	bx	lr

0800bca2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800bca2:	b480      	push	{r7}
 800bca4:	b083      	sub	sp, #12
 800bca6:	af00      	add	r7, sp, #0
 800bca8:	6078      	str	r0, [r7, #4]
 800bcaa:	460b      	mov	r3, r1
 800bcac:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800bcae:	78fb      	ldrb	r3, [r7, #3]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d103      	bne.n	800bcbc <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2280      	movs	r2, #128	@ 0x80
 800bcb8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800bcbc:	2300      	movs	r3, #0
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	370c      	adds	r7, #12
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr

0800bcca <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800bcca:	b480      	push	{r7}
 800bccc:	b083      	sub	sp, #12
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bcd8:	b29b      	uxth	r3, r3
 800bcda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bcde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bce2:	b29a      	uxth	r2, r3
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800bcea:	2300      	movs	r3, #0
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	370c      	adds	r7, #12
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr

0800bcf8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b085      	sub	sp, #20
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800bd06:	b29b      	uxth	r3, r3
 800bd08:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3714      	adds	r7, #20
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr

0800bd18 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b08b      	sub	sp, #44	@ 0x2c
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	60b9      	str	r1, [r7, #8]
 800bd22:	4611      	mov	r1, r2
 800bd24:	461a      	mov	r2, r3
 800bd26:	460b      	mov	r3, r1
 800bd28:	80fb      	strh	r3, [r7, #6]
 800bd2a:	4613      	mov	r3, r2
 800bd2c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bd2e:	88bb      	ldrh	r3, [r7, #4]
 800bd30:	3301      	adds	r3, #1
 800bd32:	085b      	lsrs	r3, r3, #1
 800bd34:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bd3e:	88fa      	ldrh	r2, [r7, #6]
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	4413      	add	r3, r2
 800bd44:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bd48:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800bd4a:	69bb      	ldr	r3, [r7, #24]
 800bd4c:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd4e:	e01c      	b.n	800bd8a <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 800bd50:	69fb      	ldr	r3, [r7, #28]
 800bd52:	781b      	ldrb	r3, [r3, #0]
 800bd54:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800bd56:	69fb      	ldr	r3, [r7, #28]
 800bd58:	3301      	adds	r3, #1
 800bd5a:	781b      	ldrb	r3, [r3, #0]
 800bd5c:	b21b      	sxth	r3, r3
 800bd5e:	021b      	lsls	r3, r3, #8
 800bd60:	b21a      	sxth	r2, r3
 800bd62:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bd66:	4313      	orrs	r3, r2
 800bd68:	b21b      	sxth	r3, r3
 800bd6a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800bd6c:	6a3b      	ldr	r3, [r7, #32]
 800bd6e:	8a7a      	ldrh	r2, [r7, #18]
 800bd70:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800bd72:	6a3b      	ldr	r3, [r7, #32]
 800bd74:	3302      	adds	r3, #2
 800bd76:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800bd78:	69fb      	ldr	r3, [r7, #28]
 800bd7a:	3301      	adds	r3, #1
 800bd7c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800bd7e:	69fb      	ldr	r3, [r7, #28]
 800bd80:	3301      	adds	r3, #1
 800bd82:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800bd84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd86:	3b01      	subs	r3, #1
 800bd88:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d1df      	bne.n	800bd50 <USB_WritePMA+0x38>
  }
}
 800bd90:	bf00      	nop
 800bd92:	bf00      	nop
 800bd94:	372c      	adds	r7, #44	@ 0x2c
 800bd96:	46bd      	mov	sp, r7
 800bd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9c:	4770      	bx	lr

0800bd9e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bd9e:	b480      	push	{r7}
 800bda0:	b08b      	sub	sp, #44	@ 0x2c
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	60f8      	str	r0, [r7, #12]
 800bda6:	60b9      	str	r1, [r7, #8]
 800bda8:	4611      	mov	r1, r2
 800bdaa:	461a      	mov	r2, r3
 800bdac:	460b      	mov	r3, r1
 800bdae:	80fb      	strh	r3, [r7, #6]
 800bdb0:	4613      	mov	r3, r2
 800bdb2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800bdb4:	88bb      	ldrh	r3, [r7, #4]
 800bdb6:	085b      	lsrs	r3, r3, #1
 800bdb8:	b29b      	uxth	r3, r3
 800bdba:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bdc4:	88fa      	ldrh	r2, [r7, #6]
 800bdc6:	697b      	ldr	r3, [r7, #20]
 800bdc8:	4413      	add	r3, r2
 800bdca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bdce:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800bdd0:	69bb      	ldr	r3, [r7, #24]
 800bdd2:	627b      	str	r3, [r7, #36]	@ 0x24
 800bdd4:	e018      	b.n	800be08 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800bdd6:	6a3b      	ldr	r3, [r7, #32]
 800bdd8:	881b      	ldrh	r3, [r3, #0]
 800bdda:	b29b      	uxth	r3, r3
 800bddc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800bdde:	6a3b      	ldr	r3, [r7, #32]
 800bde0:	3302      	adds	r3, #2
 800bde2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	b2da      	uxtb	r2, r3
 800bde8:	69fb      	ldr	r3, [r7, #28]
 800bdea:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bdec:	69fb      	ldr	r3, [r7, #28]
 800bdee:	3301      	adds	r3, #1
 800bdf0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	0a1b      	lsrs	r3, r3, #8
 800bdf6:	b2da      	uxtb	r2, r3
 800bdf8:	69fb      	ldr	r3, [r7, #28]
 800bdfa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bdfc:	69fb      	ldr	r3, [r7, #28]
 800bdfe:	3301      	adds	r3, #1
 800be00:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800be02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be04:	3b01      	subs	r3, #1
 800be06:	627b      	str	r3, [r7, #36]	@ 0x24
 800be08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d1e3      	bne.n	800bdd6 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800be0e:	88bb      	ldrh	r3, [r7, #4]
 800be10:	f003 0301 	and.w	r3, r3, #1
 800be14:	b29b      	uxth	r3, r3
 800be16:	2b00      	cmp	r3, #0
 800be18:	d007      	beq.n	800be2a <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800be1a:	6a3b      	ldr	r3, [r7, #32]
 800be1c:	881b      	ldrh	r3, [r3, #0]
 800be1e:	b29b      	uxth	r3, r3
 800be20:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	b2da      	uxtb	r2, r3
 800be26:	69fb      	ldr	r3, [r7, #28]
 800be28:	701a      	strb	r2, [r3, #0]
  }
}
 800be2a:	bf00      	nop
 800be2c:	372c      	adds	r7, #44	@ 0x2c
 800be2e:	46bd      	mov	sp, r7
 800be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be34:	4770      	bx	lr
	...

0800be38 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b084      	sub	sp, #16
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
 800be40:	460b      	mov	r3, r1
 800be42:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800be44:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800be48:	f002 fc74 	bl	800e734 <USBD_static_malloc>
 800be4c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d109      	bne.n	800be68 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	32b0      	adds	r2, #176	@ 0xb0
 800be5e:	2100      	movs	r1, #0
 800be60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800be64:	2302      	movs	r3, #2
 800be66:	e0d4      	b.n	800c012 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800be68:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800be6c:	2100      	movs	r1, #0
 800be6e:	68f8      	ldr	r0, [r7, #12]
 800be70:	f003 fa1f 	bl	800f2b2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	32b0      	adds	r2, #176	@ 0xb0
 800be7e:	68f9      	ldr	r1, [r7, #12]
 800be80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	32b0      	adds	r2, #176	@ 0xb0
 800be8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	7c1b      	ldrb	r3, [r3, #16]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d138      	bne.n	800bf12 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bea0:	4b5e      	ldr	r3, [pc, #376]	@ (800c01c <USBD_CDC_Init+0x1e4>)
 800bea2:	7819      	ldrb	r1, [r3, #0]
 800bea4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bea8:	2202      	movs	r2, #2
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f002 fae9 	bl	800e482 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800beb0:	4b5a      	ldr	r3, [pc, #360]	@ (800c01c <USBD_CDC_Init+0x1e4>)
 800beb2:	781b      	ldrb	r3, [r3, #0]
 800beb4:	f003 020f 	and.w	r2, r3, #15
 800beb8:	6879      	ldr	r1, [r7, #4]
 800beba:	4613      	mov	r3, r2
 800bebc:	009b      	lsls	r3, r3, #2
 800bebe:	4413      	add	r3, r2
 800bec0:	009b      	lsls	r3, r3, #2
 800bec2:	440b      	add	r3, r1
 800bec4:	3324      	adds	r3, #36	@ 0x24
 800bec6:	2201      	movs	r2, #1
 800bec8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800beca:	4b55      	ldr	r3, [pc, #340]	@ (800c020 <USBD_CDC_Init+0x1e8>)
 800becc:	7819      	ldrb	r1, [r3, #0]
 800bece:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bed2:	2202      	movs	r2, #2
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f002 fad4 	bl	800e482 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800beda:	4b51      	ldr	r3, [pc, #324]	@ (800c020 <USBD_CDC_Init+0x1e8>)
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	f003 020f 	and.w	r2, r3, #15
 800bee2:	6879      	ldr	r1, [r7, #4]
 800bee4:	4613      	mov	r3, r2
 800bee6:	009b      	lsls	r3, r3, #2
 800bee8:	4413      	add	r3, r2
 800beea:	009b      	lsls	r3, r3, #2
 800beec:	440b      	add	r3, r1
 800beee:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bef2:	2201      	movs	r2, #1
 800bef4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bef6:	4b4b      	ldr	r3, [pc, #300]	@ (800c024 <USBD_CDC_Init+0x1ec>)
 800bef8:	781b      	ldrb	r3, [r3, #0]
 800befa:	f003 020f 	and.w	r2, r3, #15
 800befe:	6879      	ldr	r1, [r7, #4]
 800bf00:	4613      	mov	r3, r2
 800bf02:	009b      	lsls	r3, r3, #2
 800bf04:	4413      	add	r3, r2
 800bf06:	009b      	lsls	r3, r3, #2
 800bf08:	440b      	add	r3, r1
 800bf0a:	3326      	adds	r3, #38	@ 0x26
 800bf0c:	2210      	movs	r2, #16
 800bf0e:	801a      	strh	r2, [r3, #0]
 800bf10:	e035      	b.n	800bf7e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bf12:	4b42      	ldr	r3, [pc, #264]	@ (800c01c <USBD_CDC_Init+0x1e4>)
 800bf14:	7819      	ldrb	r1, [r3, #0]
 800bf16:	2340      	movs	r3, #64	@ 0x40
 800bf18:	2202      	movs	r2, #2
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f002 fab1 	bl	800e482 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bf20:	4b3e      	ldr	r3, [pc, #248]	@ (800c01c <USBD_CDC_Init+0x1e4>)
 800bf22:	781b      	ldrb	r3, [r3, #0]
 800bf24:	f003 020f 	and.w	r2, r3, #15
 800bf28:	6879      	ldr	r1, [r7, #4]
 800bf2a:	4613      	mov	r3, r2
 800bf2c:	009b      	lsls	r3, r3, #2
 800bf2e:	4413      	add	r3, r2
 800bf30:	009b      	lsls	r3, r3, #2
 800bf32:	440b      	add	r3, r1
 800bf34:	3324      	adds	r3, #36	@ 0x24
 800bf36:	2201      	movs	r2, #1
 800bf38:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bf3a:	4b39      	ldr	r3, [pc, #228]	@ (800c020 <USBD_CDC_Init+0x1e8>)
 800bf3c:	7819      	ldrb	r1, [r3, #0]
 800bf3e:	2340      	movs	r3, #64	@ 0x40
 800bf40:	2202      	movs	r2, #2
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f002 fa9d 	bl	800e482 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bf48:	4b35      	ldr	r3, [pc, #212]	@ (800c020 <USBD_CDC_Init+0x1e8>)
 800bf4a:	781b      	ldrb	r3, [r3, #0]
 800bf4c:	f003 020f 	and.w	r2, r3, #15
 800bf50:	6879      	ldr	r1, [r7, #4]
 800bf52:	4613      	mov	r3, r2
 800bf54:	009b      	lsls	r3, r3, #2
 800bf56:	4413      	add	r3, r2
 800bf58:	009b      	lsls	r3, r3, #2
 800bf5a:	440b      	add	r3, r1
 800bf5c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bf60:	2201      	movs	r2, #1
 800bf62:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bf64:	4b2f      	ldr	r3, [pc, #188]	@ (800c024 <USBD_CDC_Init+0x1ec>)
 800bf66:	781b      	ldrb	r3, [r3, #0]
 800bf68:	f003 020f 	and.w	r2, r3, #15
 800bf6c:	6879      	ldr	r1, [r7, #4]
 800bf6e:	4613      	mov	r3, r2
 800bf70:	009b      	lsls	r3, r3, #2
 800bf72:	4413      	add	r3, r2
 800bf74:	009b      	lsls	r3, r3, #2
 800bf76:	440b      	add	r3, r1
 800bf78:	3326      	adds	r3, #38	@ 0x26
 800bf7a:	2210      	movs	r2, #16
 800bf7c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bf7e:	4b29      	ldr	r3, [pc, #164]	@ (800c024 <USBD_CDC_Init+0x1ec>)
 800bf80:	7819      	ldrb	r1, [r3, #0]
 800bf82:	2308      	movs	r3, #8
 800bf84:	2203      	movs	r2, #3
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f002 fa7b 	bl	800e482 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bf8c:	4b25      	ldr	r3, [pc, #148]	@ (800c024 <USBD_CDC_Init+0x1ec>)
 800bf8e:	781b      	ldrb	r3, [r3, #0]
 800bf90:	f003 020f 	and.w	r2, r3, #15
 800bf94:	6879      	ldr	r1, [r7, #4]
 800bf96:	4613      	mov	r3, r2
 800bf98:	009b      	lsls	r3, r3, #2
 800bf9a:	4413      	add	r3, r2
 800bf9c:	009b      	lsls	r3, r3, #2
 800bf9e:	440b      	add	r3, r1
 800bfa0:	3324      	adds	r3, #36	@ 0x24
 800bfa2:	2201      	movs	r2, #1
 800bfa4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bfb4:	687a      	ldr	r2, [r7, #4]
 800bfb6:	33b0      	adds	r3, #176	@ 0xb0
 800bfb8:	009b      	lsls	r3, r3, #2
 800bfba:	4413      	add	r3, r2
 800bfbc:	685b      	ldr	r3, [r3, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d101      	bne.n	800bfe0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800bfdc:	2302      	movs	r3, #2
 800bfde:	e018      	b.n	800c012 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	7c1b      	ldrb	r3, [r3, #16]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d10a      	bne.n	800bffe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bfe8:	4b0d      	ldr	r3, [pc, #52]	@ (800c020 <USBD_CDC_Init+0x1e8>)
 800bfea:	7819      	ldrb	r1, [r3, #0]
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bff2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f002 fb32 	bl	800e660 <USBD_LL_PrepareReceive>
 800bffc:	e008      	b.n	800c010 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bffe:	4b08      	ldr	r3, [pc, #32]	@ (800c020 <USBD_CDC_Init+0x1e8>)
 800c000:	7819      	ldrb	r1, [r3, #0]
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c008:	2340      	movs	r3, #64	@ 0x40
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f002 fb28 	bl	800e660 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c010:	2300      	movs	r3, #0
}
 800c012:	4618      	mov	r0, r3
 800c014:	3710      	adds	r7, #16
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
 800c01a:	bf00      	nop
 800c01c:	200000b7 	.word	0x200000b7
 800c020:	200000b8 	.word	0x200000b8
 800c024:	200000b9 	.word	0x200000b9

0800c028 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b082      	sub	sp, #8
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
 800c030:	460b      	mov	r3, r1
 800c032:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c034:	4b3a      	ldr	r3, [pc, #232]	@ (800c120 <USBD_CDC_DeInit+0xf8>)
 800c036:	781b      	ldrb	r3, [r3, #0]
 800c038:	4619      	mov	r1, r3
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f002 fa47 	bl	800e4ce <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c040:	4b37      	ldr	r3, [pc, #220]	@ (800c120 <USBD_CDC_DeInit+0xf8>)
 800c042:	781b      	ldrb	r3, [r3, #0]
 800c044:	f003 020f 	and.w	r2, r3, #15
 800c048:	6879      	ldr	r1, [r7, #4]
 800c04a:	4613      	mov	r3, r2
 800c04c:	009b      	lsls	r3, r3, #2
 800c04e:	4413      	add	r3, r2
 800c050:	009b      	lsls	r3, r3, #2
 800c052:	440b      	add	r3, r1
 800c054:	3324      	adds	r3, #36	@ 0x24
 800c056:	2200      	movs	r2, #0
 800c058:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c05a:	4b32      	ldr	r3, [pc, #200]	@ (800c124 <USBD_CDC_DeInit+0xfc>)
 800c05c:	781b      	ldrb	r3, [r3, #0]
 800c05e:	4619      	mov	r1, r3
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f002 fa34 	bl	800e4ce <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c066:	4b2f      	ldr	r3, [pc, #188]	@ (800c124 <USBD_CDC_DeInit+0xfc>)
 800c068:	781b      	ldrb	r3, [r3, #0]
 800c06a:	f003 020f 	and.w	r2, r3, #15
 800c06e:	6879      	ldr	r1, [r7, #4]
 800c070:	4613      	mov	r3, r2
 800c072:	009b      	lsls	r3, r3, #2
 800c074:	4413      	add	r3, r2
 800c076:	009b      	lsls	r3, r3, #2
 800c078:	440b      	add	r3, r1
 800c07a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c07e:	2200      	movs	r2, #0
 800c080:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c082:	4b29      	ldr	r3, [pc, #164]	@ (800c128 <USBD_CDC_DeInit+0x100>)
 800c084:	781b      	ldrb	r3, [r3, #0]
 800c086:	4619      	mov	r1, r3
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f002 fa20 	bl	800e4ce <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c08e:	4b26      	ldr	r3, [pc, #152]	@ (800c128 <USBD_CDC_DeInit+0x100>)
 800c090:	781b      	ldrb	r3, [r3, #0]
 800c092:	f003 020f 	and.w	r2, r3, #15
 800c096:	6879      	ldr	r1, [r7, #4]
 800c098:	4613      	mov	r3, r2
 800c09a:	009b      	lsls	r3, r3, #2
 800c09c:	4413      	add	r3, r2
 800c09e:	009b      	lsls	r3, r3, #2
 800c0a0:	440b      	add	r3, r1
 800c0a2:	3324      	adds	r3, #36	@ 0x24
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c0a8:	4b1f      	ldr	r3, [pc, #124]	@ (800c128 <USBD_CDC_DeInit+0x100>)
 800c0aa:	781b      	ldrb	r3, [r3, #0]
 800c0ac:	f003 020f 	and.w	r2, r3, #15
 800c0b0:	6879      	ldr	r1, [r7, #4]
 800c0b2:	4613      	mov	r3, r2
 800c0b4:	009b      	lsls	r3, r3, #2
 800c0b6:	4413      	add	r3, r2
 800c0b8:	009b      	lsls	r3, r3, #2
 800c0ba:	440b      	add	r3, r1
 800c0bc:	3326      	adds	r3, #38	@ 0x26
 800c0be:	2200      	movs	r2, #0
 800c0c0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	32b0      	adds	r2, #176	@ 0xb0
 800c0cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d01f      	beq.n	800c114 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c0da:	687a      	ldr	r2, [r7, #4]
 800c0dc:	33b0      	adds	r3, #176	@ 0xb0
 800c0de:	009b      	lsls	r3, r3, #2
 800c0e0:	4413      	add	r3, r2
 800c0e2:	685b      	ldr	r3, [r3, #4]
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	32b0      	adds	r2, #176	@ 0xb0
 800c0f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f002 fb2a 	bl	800e750 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	32b0      	adds	r2, #176	@ 0xb0
 800c106:	2100      	movs	r1, #0
 800c108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2200      	movs	r2, #0
 800c110:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c114:	2300      	movs	r3, #0
}
 800c116:	4618      	mov	r0, r3
 800c118:	3708      	adds	r7, #8
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}
 800c11e:	bf00      	nop
 800c120:	200000b7 	.word	0x200000b7
 800c124:	200000b8 	.word	0x200000b8
 800c128:	200000b9 	.word	0x200000b9

0800c12c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b086      	sub	sp, #24
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	32b0      	adds	r2, #176	@ 0xb0
 800c140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c144:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c146:	2300      	movs	r3, #0
 800c148:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c14a:	2300      	movs	r3, #0
 800c14c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c14e:	2300      	movs	r3, #0
 800c150:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c152:	693b      	ldr	r3, [r7, #16]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d101      	bne.n	800c15c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c158:	2303      	movs	r3, #3
 800c15a:	e0bf      	b.n	800c2dc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	781b      	ldrb	r3, [r3, #0]
 800c160:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c164:	2b00      	cmp	r3, #0
 800c166:	d050      	beq.n	800c20a <USBD_CDC_Setup+0xde>
 800c168:	2b20      	cmp	r3, #32
 800c16a:	f040 80af 	bne.w	800c2cc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	88db      	ldrh	r3, [r3, #6]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d03a      	beq.n	800c1ec <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	781b      	ldrb	r3, [r3, #0]
 800c17a:	b25b      	sxtb	r3, r3
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	da1b      	bge.n	800c1b8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c186:	687a      	ldr	r2, [r7, #4]
 800c188:	33b0      	adds	r3, #176	@ 0xb0
 800c18a:	009b      	lsls	r3, r3, #2
 800c18c:	4413      	add	r3, r2
 800c18e:	685b      	ldr	r3, [r3, #4]
 800c190:	689b      	ldr	r3, [r3, #8]
 800c192:	683a      	ldr	r2, [r7, #0]
 800c194:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c196:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c198:	683a      	ldr	r2, [r7, #0]
 800c19a:	88d2      	ldrh	r2, [r2, #6]
 800c19c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	88db      	ldrh	r3, [r3, #6]
 800c1a2:	2b07      	cmp	r3, #7
 800c1a4:	bf28      	it	cs
 800c1a6:	2307      	movcs	r3, #7
 800c1a8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	89fa      	ldrh	r2, [r7, #14]
 800c1ae:	4619      	mov	r1, r3
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f001 fd47 	bl	800dc44 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c1b6:	e090      	b.n	800c2da <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	785a      	ldrb	r2, [r3, #1]
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	88db      	ldrh	r3, [r3, #6]
 800c1c6:	2b3f      	cmp	r3, #63	@ 0x3f
 800c1c8:	d803      	bhi.n	800c1d2 <USBD_CDC_Setup+0xa6>
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	88db      	ldrh	r3, [r3, #6]
 800c1ce:	b2da      	uxtb	r2, r3
 800c1d0:	e000      	b.n	800c1d4 <USBD_CDC_Setup+0xa8>
 800c1d2:	2240      	movs	r2, #64	@ 0x40
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c1da:	6939      	ldr	r1, [r7, #16]
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800c1e2:	461a      	mov	r2, r3
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f001 fd59 	bl	800dc9c <USBD_CtlPrepareRx>
      break;
 800c1ea:	e076      	b.n	800c2da <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c1f2:	687a      	ldr	r2, [r7, #4]
 800c1f4:	33b0      	adds	r3, #176	@ 0xb0
 800c1f6:	009b      	lsls	r3, r3, #2
 800c1f8:	4413      	add	r3, r2
 800c1fa:	685b      	ldr	r3, [r3, #4]
 800c1fc:	689b      	ldr	r3, [r3, #8]
 800c1fe:	683a      	ldr	r2, [r7, #0]
 800c200:	7850      	ldrb	r0, [r2, #1]
 800c202:	2200      	movs	r2, #0
 800c204:	6839      	ldr	r1, [r7, #0]
 800c206:	4798      	blx	r3
      break;
 800c208:	e067      	b.n	800c2da <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	785b      	ldrb	r3, [r3, #1]
 800c20e:	2b0b      	cmp	r3, #11
 800c210:	d851      	bhi.n	800c2b6 <USBD_CDC_Setup+0x18a>
 800c212:	a201      	add	r2, pc, #4	@ (adr r2, 800c218 <USBD_CDC_Setup+0xec>)
 800c214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c218:	0800c249 	.word	0x0800c249
 800c21c:	0800c2c5 	.word	0x0800c2c5
 800c220:	0800c2b7 	.word	0x0800c2b7
 800c224:	0800c2b7 	.word	0x0800c2b7
 800c228:	0800c2b7 	.word	0x0800c2b7
 800c22c:	0800c2b7 	.word	0x0800c2b7
 800c230:	0800c2b7 	.word	0x0800c2b7
 800c234:	0800c2b7 	.word	0x0800c2b7
 800c238:	0800c2b7 	.word	0x0800c2b7
 800c23c:	0800c2b7 	.word	0x0800c2b7
 800c240:	0800c273 	.word	0x0800c273
 800c244:	0800c29d 	.word	0x0800c29d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c24e:	b2db      	uxtb	r3, r3
 800c250:	2b03      	cmp	r3, #3
 800c252:	d107      	bne.n	800c264 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c254:	f107 030a 	add.w	r3, r7, #10
 800c258:	2202      	movs	r2, #2
 800c25a:	4619      	mov	r1, r3
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f001 fcf1 	bl	800dc44 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c262:	e032      	b.n	800c2ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c264:	6839      	ldr	r1, [r7, #0]
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f001 fc6f 	bl	800db4a <USBD_CtlError>
            ret = USBD_FAIL;
 800c26c:	2303      	movs	r3, #3
 800c26e:	75fb      	strb	r3, [r7, #23]
          break;
 800c270:	e02b      	b.n	800c2ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c278:	b2db      	uxtb	r3, r3
 800c27a:	2b03      	cmp	r3, #3
 800c27c:	d107      	bne.n	800c28e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c27e:	f107 030d 	add.w	r3, r7, #13
 800c282:	2201      	movs	r2, #1
 800c284:	4619      	mov	r1, r3
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f001 fcdc 	bl	800dc44 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c28c:	e01d      	b.n	800c2ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c28e:	6839      	ldr	r1, [r7, #0]
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f001 fc5a 	bl	800db4a <USBD_CtlError>
            ret = USBD_FAIL;
 800c296:	2303      	movs	r3, #3
 800c298:	75fb      	strb	r3, [r7, #23]
          break;
 800c29a:	e016      	b.n	800c2ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2a2:	b2db      	uxtb	r3, r3
 800c2a4:	2b03      	cmp	r3, #3
 800c2a6:	d00f      	beq.n	800c2c8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c2a8:	6839      	ldr	r1, [r7, #0]
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f001 fc4d 	bl	800db4a <USBD_CtlError>
            ret = USBD_FAIL;
 800c2b0:	2303      	movs	r3, #3
 800c2b2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c2b4:	e008      	b.n	800c2c8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c2b6:	6839      	ldr	r1, [r7, #0]
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f001 fc46 	bl	800db4a <USBD_CtlError>
          ret = USBD_FAIL;
 800c2be:	2303      	movs	r3, #3
 800c2c0:	75fb      	strb	r3, [r7, #23]
          break;
 800c2c2:	e002      	b.n	800c2ca <USBD_CDC_Setup+0x19e>
          break;
 800c2c4:	bf00      	nop
 800c2c6:	e008      	b.n	800c2da <USBD_CDC_Setup+0x1ae>
          break;
 800c2c8:	bf00      	nop
      }
      break;
 800c2ca:	e006      	b.n	800c2da <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c2cc:	6839      	ldr	r1, [r7, #0]
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f001 fc3b 	bl	800db4a <USBD_CtlError>
      ret = USBD_FAIL;
 800c2d4:	2303      	movs	r3, #3
 800c2d6:	75fb      	strb	r3, [r7, #23]
      break;
 800c2d8:	bf00      	nop
  }

  return (uint8_t)ret;
 800c2da:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3718      	adds	r7, #24
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}

0800c2e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b084      	sub	sp, #16
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
 800c2ec:	460b      	mov	r3, r1
 800c2ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c2f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	32b0      	adds	r2, #176	@ 0xb0
 800c302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d101      	bne.n	800c30e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c30a:	2303      	movs	r3, #3
 800c30c:	e065      	b.n	800c3da <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	32b0      	adds	r2, #176	@ 0xb0
 800c318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c31c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c31e:	78fb      	ldrb	r3, [r7, #3]
 800c320:	f003 020f 	and.w	r2, r3, #15
 800c324:	6879      	ldr	r1, [r7, #4]
 800c326:	4613      	mov	r3, r2
 800c328:	009b      	lsls	r3, r3, #2
 800c32a:	4413      	add	r3, r2
 800c32c:	009b      	lsls	r3, r3, #2
 800c32e:	440b      	add	r3, r1
 800c330:	3318      	adds	r3, #24
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d02f      	beq.n	800c398 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c338:	78fb      	ldrb	r3, [r7, #3]
 800c33a:	f003 020f 	and.w	r2, r3, #15
 800c33e:	6879      	ldr	r1, [r7, #4]
 800c340:	4613      	mov	r3, r2
 800c342:	009b      	lsls	r3, r3, #2
 800c344:	4413      	add	r3, r2
 800c346:	009b      	lsls	r3, r3, #2
 800c348:	440b      	add	r3, r1
 800c34a:	3318      	adds	r3, #24
 800c34c:	681a      	ldr	r2, [r3, #0]
 800c34e:	78fb      	ldrb	r3, [r7, #3]
 800c350:	f003 010f 	and.w	r1, r3, #15
 800c354:	68f8      	ldr	r0, [r7, #12]
 800c356:	460b      	mov	r3, r1
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	440b      	add	r3, r1
 800c35c:	00db      	lsls	r3, r3, #3
 800c35e:	4403      	add	r3, r0
 800c360:	3320      	adds	r3, #32
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	fbb2 f1f3 	udiv	r1, r2, r3
 800c368:	fb01 f303 	mul.w	r3, r1, r3
 800c36c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d112      	bne.n	800c398 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c372:	78fb      	ldrb	r3, [r7, #3]
 800c374:	f003 020f 	and.w	r2, r3, #15
 800c378:	6879      	ldr	r1, [r7, #4]
 800c37a:	4613      	mov	r3, r2
 800c37c:	009b      	lsls	r3, r3, #2
 800c37e:	4413      	add	r3, r2
 800c380:	009b      	lsls	r3, r3, #2
 800c382:	440b      	add	r3, r1
 800c384:	3318      	adds	r3, #24
 800c386:	2200      	movs	r2, #0
 800c388:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c38a:	78f9      	ldrb	r1, [r7, #3]
 800c38c:	2300      	movs	r3, #0
 800c38e:	2200      	movs	r2, #0
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f002 f944 	bl	800e61e <USBD_LL_Transmit>
 800c396:	e01f      	b.n	800c3d8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	2200      	movs	r2, #0
 800c39c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c3a6:	687a      	ldr	r2, [r7, #4]
 800c3a8:	33b0      	adds	r3, #176	@ 0xb0
 800c3aa:	009b      	lsls	r3, r3, #2
 800c3ac:	4413      	add	r3, r2
 800c3ae:	685b      	ldr	r3, [r3, #4]
 800c3b0:	691b      	ldr	r3, [r3, #16]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d010      	beq.n	800c3d8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c3bc:	687a      	ldr	r2, [r7, #4]
 800c3be:	33b0      	adds	r3, #176	@ 0xb0
 800c3c0:	009b      	lsls	r3, r3, #2
 800c3c2:	4413      	add	r3, r2
 800c3c4:	685b      	ldr	r3, [r3, #4]
 800c3c6:	691b      	ldr	r3, [r3, #16]
 800c3c8:	68ba      	ldr	r2, [r7, #8]
 800c3ca:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800c3ce:	68ba      	ldr	r2, [r7, #8]
 800c3d0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800c3d4:	78fa      	ldrb	r2, [r7, #3]
 800c3d6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c3d8:	2300      	movs	r3, #0
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3710      	adds	r7, #16
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}

0800c3e2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c3e2:	b580      	push	{r7, lr}
 800c3e4:	b084      	sub	sp, #16
 800c3e6:	af00      	add	r7, sp, #0
 800c3e8:	6078      	str	r0, [r7, #4]
 800c3ea:	460b      	mov	r3, r1
 800c3ec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	32b0      	adds	r2, #176	@ 0xb0
 800c3f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3fc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	32b0      	adds	r2, #176	@ 0xb0
 800c408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d101      	bne.n	800c414 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c410:	2303      	movs	r3, #3
 800c412:	e01a      	b.n	800c44a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c414:	78fb      	ldrb	r3, [r7, #3]
 800c416:	4619      	mov	r1, r3
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f002 f942 	bl	800e6a2 <USBD_LL_GetRxDataSize>
 800c41e:	4602      	mov	r2, r0
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c42c:	687a      	ldr	r2, [r7, #4]
 800c42e:	33b0      	adds	r3, #176	@ 0xb0
 800c430:	009b      	lsls	r3, r3, #2
 800c432:	4413      	add	r3, r2
 800c434:	685b      	ldr	r3, [r3, #4]
 800c436:	68db      	ldr	r3, [r3, #12]
 800c438:	68fa      	ldr	r2, [r7, #12]
 800c43a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800c43e:	68fa      	ldr	r2, [r7, #12]
 800c440:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800c444:	4611      	mov	r1, r2
 800c446:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c448:	2300      	movs	r3, #0
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3710      	adds	r7, #16
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}

0800c452 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c452:	b580      	push	{r7, lr}
 800c454:	b084      	sub	sp, #16
 800c456:	af00      	add	r7, sp, #0
 800c458:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	32b0      	adds	r2, #176	@ 0xb0
 800c464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c468:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d101      	bne.n	800c474 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c470:	2303      	movs	r3, #3
 800c472:	e024      	b.n	800c4be <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c47a:	687a      	ldr	r2, [r7, #4]
 800c47c:	33b0      	adds	r3, #176	@ 0xb0
 800c47e:	009b      	lsls	r3, r3, #2
 800c480:	4413      	add	r3, r2
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d019      	beq.n	800c4bc <USBD_CDC_EP0_RxReady+0x6a>
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800c48e:	2bff      	cmp	r3, #255	@ 0xff
 800c490:	d014      	beq.n	800c4bc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c498:	687a      	ldr	r2, [r7, #4]
 800c49a:	33b0      	adds	r3, #176	@ 0xb0
 800c49c:	009b      	lsls	r3, r3, #2
 800c49e:	4413      	add	r3, r2
 800c4a0:	685b      	ldr	r3, [r3, #4]
 800c4a2:	689b      	ldr	r3, [r3, #8]
 800c4a4:	68fa      	ldr	r2, [r7, #12]
 800c4a6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800c4aa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c4ac:	68fa      	ldr	r2, [r7, #12]
 800c4ae:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c4b2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	22ff      	movs	r2, #255	@ 0xff
 800c4b8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800c4bc:	2300      	movs	r3, #0
}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	3710      	adds	r7, #16
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}
	...

0800c4c8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b086      	sub	sp, #24
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c4d0:	2182      	movs	r1, #130	@ 0x82
 800c4d2:	4818      	ldr	r0, [pc, #96]	@ (800c534 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c4d4:	f000 fcd9 	bl	800ce8a <USBD_GetEpDesc>
 800c4d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c4da:	2101      	movs	r1, #1
 800c4dc:	4815      	ldr	r0, [pc, #84]	@ (800c534 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c4de:	f000 fcd4 	bl	800ce8a <USBD_GetEpDesc>
 800c4e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c4e4:	2181      	movs	r1, #129	@ 0x81
 800c4e6:	4813      	ldr	r0, [pc, #76]	@ (800c534 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c4e8:	f000 fccf 	bl	800ce8a <USBD_GetEpDesc>
 800c4ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c4ee:	697b      	ldr	r3, [r7, #20]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d002      	beq.n	800c4fa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c4f4:	697b      	ldr	r3, [r7, #20]
 800c4f6:	2210      	movs	r2, #16
 800c4f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c4fa:	693b      	ldr	r3, [r7, #16]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d006      	beq.n	800c50e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c500:	693b      	ldr	r3, [r7, #16]
 800c502:	2200      	movs	r2, #0
 800c504:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c508:	711a      	strb	r2, [r3, #4]
 800c50a:	2200      	movs	r2, #0
 800c50c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d006      	beq.n	800c522 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	2200      	movs	r2, #0
 800c518:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c51c:	711a      	strb	r2, [r3, #4]
 800c51e:	2200      	movs	r2, #0
 800c520:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2243      	movs	r2, #67	@ 0x43
 800c526:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c528:	4b02      	ldr	r3, [pc, #8]	@ (800c534 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c52a:	4618      	mov	r0, r3
 800c52c:	3718      	adds	r7, #24
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}
 800c532:	bf00      	nop
 800c534:	20000074 	.word	0x20000074

0800c538 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b086      	sub	sp, #24
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c540:	2182      	movs	r1, #130	@ 0x82
 800c542:	4818      	ldr	r0, [pc, #96]	@ (800c5a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c544:	f000 fca1 	bl	800ce8a <USBD_GetEpDesc>
 800c548:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c54a:	2101      	movs	r1, #1
 800c54c:	4815      	ldr	r0, [pc, #84]	@ (800c5a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c54e:	f000 fc9c 	bl	800ce8a <USBD_GetEpDesc>
 800c552:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c554:	2181      	movs	r1, #129	@ 0x81
 800c556:	4813      	ldr	r0, [pc, #76]	@ (800c5a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c558:	f000 fc97 	bl	800ce8a <USBD_GetEpDesc>
 800c55c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d002      	beq.n	800c56a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	2210      	movs	r2, #16
 800c568:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c56a:	693b      	ldr	r3, [r7, #16]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d006      	beq.n	800c57e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c570:	693b      	ldr	r3, [r7, #16]
 800c572:	2200      	movs	r2, #0
 800c574:	711a      	strb	r2, [r3, #4]
 800c576:	2200      	movs	r2, #0
 800c578:	f042 0202 	orr.w	r2, r2, #2
 800c57c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d006      	beq.n	800c592 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	2200      	movs	r2, #0
 800c588:	711a      	strb	r2, [r3, #4]
 800c58a:	2200      	movs	r2, #0
 800c58c:	f042 0202 	orr.w	r2, r2, #2
 800c590:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2243      	movs	r2, #67	@ 0x43
 800c596:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c598:	4b02      	ldr	r3, [pc, #8]	@ (800c5a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3718      	adds	r7, #24
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}
 800c5a2:	bf00      	nop
 800c5a4:	20000074 	.word	0x20000074

0800c5a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b086      	sub	sp, #24
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c5b0:	2182      	movs	r1, #130	@ 0x82
 800c5b2:	4818      	ldr	r0, [pc, #96]	@ (800c614 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c5b4:	f000 fc69 	bl	800ce8a <USBD_GetEpDesc>
 800c5b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c5ba:	2101      	movs	r1, #1
 800c5bc:	4815      	ldr	r0, [pc, #84]	@ (800c614 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c5be:	f000 fc64 	bl	800ce8a <USBD_GetEpDesc>
 800c5c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c5c4:	2181      	movs	r1, #129	@ 0x81
 800c5c6:	4813      	ldr	r0, [pc, #76]	@ (800c614 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c5c8:	f000 fc5f 	bl	800ce8a <USBD_GetEpDesc>
 800c5cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c5ce:	697b      	ldr	r3, [r7, #20]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d002      	beq.n	800c5da <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c5d4:	697b      	ldr	r3, [r7, #20]
 800c5d6:	2210      	movs	r2, #16
 800c5d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d006      	beq.n	800c5ee <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c5e8:	711a      	strb	r2, [r3, #4]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d006      	beq.n	800c602 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c5fc:	711a      	strb	r2, [r3, #4]
 800c5fe:	2200      	movs	r2, #0
 800c600:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2243      	movs	r2, #67	@ 0x43
 800c606:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c608:	4b02      	ldr	r3, [pc, #8]	@ (800c614 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3718      	adds	r7, #24
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop
 800c614:	20000074 	.word	0x20000074

0800c618 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c618:	b480      	push	{r7}
 800c61a:	b083      	sub	sp, #12
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	220a      	movs	r2, #10
 800c624:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c626:	4b03      	ldr	r3, [pc, #12]	@ (800c634 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c628:	4618      	mov	r0, r3
 800c62a:	370c      	adds	r7, #12
 800c62c:	46bd      	mov	sp, r7
 800c62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c632:	4770      	bx	lr
 800c634:	20000030 	.word	0x20000030

0800c638 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c638:	b480      	push	{r7}
 800c63a:	b083      	sub	sp, #12
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d101      	bne.n	800c64c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c648:	2303      	movs	r3, #3
 800c64a:	e009      	b.n	800c660 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c652:	687a      	ldr	r2, [r7, #4]
 800c654:	33b0      	adds	r3, #176	@ 0xb0
 800c656:	009b      	lsls	r3, r3, #2
 800c658:	4413      	add	r3, r2
 800c65a:	683a      	ldr	r2, [r7, #0]
 800c65c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c65e:	2300      	movs	r3, #0
}
 800c660:	4618      	mov	r0, r3
 800c662:	370c      	adds	r7, #12
 800c664:	46bd      	mov	sp, r7
 800c666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66a:	4770      	bx	lr

0800c66c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c66c:	b480      	push	{r7}
 800c66e:	b087      	sub	sp, #28
 800c670:	af00      	add	r7, sp, #0
 800c672:	60f8      	str	r0, [r7, #12]
 800c674:	60b9      	str	r1, [r7, #8]
 800c676:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	32b0      	adds	r2, #176	@ 0xb0
 800c682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c686:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d101      	bne.n	800c692 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c68e:	2303      	movs	r3, #3
 800c690:	e008      	b.n	800c6a4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c692:	697b      	ldr	r3, [r7, #20]
 800c694:	68ba      	ldr	r2, [r7, #8]
 800c696:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	687a      	ldr	r2, [r7, #4]
 800c69e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800c6a2:	2300      	movs	r3, #0
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	371c      	adds	r7, #28
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ae:	4770      	bx	lr

0800c6b0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b085      	sub	sp, #20
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
 800c6b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	32b0      	adds	r2, #176	@ 0xb0
 800c6c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6c8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d101      	bne.n	800c6d4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c6d0:	2303      	movs	r3, #3
 800c6d2:	e004      	b.n	800c6de <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	683a      	ldr	r2, [r7, #0]
 800c6d8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800c6dc:	2300      	movs	r3, #0
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3714      	adds	r7, #20
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e8:	4770      	bx	lr
	...

0800c6ec <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b084      	sub	sp, #16
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	32b0      	adds	r2, #176	@ 0xb0
 800c6fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c702:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800c704:	2301      	movs	r3, #1
 800c706:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d101      	bne.n	800c712 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c70e:	2303      	movs	r3, #3
 800c710:	e025      	b.n	800c75e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d11f      	bne.n	800c75c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	2201      	movs	r2, #1
 800c720:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c724:	4b10      	ldr	r3, [pc, #64]	@ (800c768 <USBD_CDC_TransmitPacket+0x7c>)
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	f003 020f 	and.w	r2, r3, #15
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	4613      	mov	r3, r2
 800c736:	009b      	lsls	r3, r3, #2
 800c738:	4413      	add	r3, r2
 800c73a:	009b      	lsls	r3, r3, #2
 800c73c:	4403      	add	r3, r0
 800c73e:	3318      	adds	r3, #24
 800c740:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c742:	4b09      	ldr	r3, [pc, #36]	@ (800c768 <USBD_CDC_TransmitPacket+0x7c>)
 800c744:	7819      	ldrb	r1, [r3, #0]
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f001 ff63 	bl	800e61e <USBD_LL_Transmit>

    ret = USBD_OK;
 800c758:	2300      	movs	r3, #0
 800c75a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c75c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c75e:	4618      	mov	r0, r3
 800c760:	3710      	adds	r7, #16
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}
 800c766:	bf00      	nop
 800c768:	200000b7 	.word	0x200000b7

0800c76c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b084      	sub	sp, #16
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	32b0      	adds	r2, #176	@ 0xb0
 800c77e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c782:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	32b0      	adds	r2, #176	@ 0xb0
 800c78e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d101      	bne.n	800c79a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c796:	2303      	movs	r3, #3
 800c798:	e018      	b.n	800c7cc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	7c1b      	ldrb	r3, [r3, #16]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d10a      	bne.n	800c7b8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c7a2:	4b0c      	ldr	r3, [pc, #48]	@ (800c7d4 <USBD_CDC_ReceivePacket+0x68>)
 800c7a4:	7819      	ldrb	r1, [r3, #0]
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c7ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f001 ff55 	bl	800e660 <USBD_LL_PrepareReceive>
 800c7b6:	e008      	b.n	800c7ca <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c7b8:	4b06      	ldr	r3, [pc, #24]	@ (800c7d4 <USBD_CDC_ReceivePacket+0x68>)
 800c7ba:	7819      	ldrb	r1, [r3, #0]
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c7c2:	2340      	movs	r3, #64	@ 0x40
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f001 ff4b 	bl	800e660 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c7ca:	2300      	movs	r3, #0
}
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	3710      	adds	r7, #16
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}
 800c7d4:	200000b8 	.word	0x200000b8

0800c7d8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b086      	sub	sp, #24
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	60f8      	str	r0, [r7, #12]
 800c7e0:	60b9      	str	r1, [r7, #8]
 800c7e2:	4613      	mov	r3, r2
 800c7e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d10a      	bne.n	800c802 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800c7ec:	4817      	ldr	r0, [pc, #92]	@ (800c84c <USBD_Init+0x74>)
 800c7ee:	f002 fd03 	bl	800f1f8 <iprintf>
 800c7f2:	4817      	ldr	r0, [pc, #92]	@ (800c850 <USBD_Init+0x78>)
 800c7f4:	f002 fd00 	bl	800f1f8 <iprintf>
 800c7f8:	200a      	movs	r0, #10
 800c7fa:	f002 fd0f 	bl	800f21c <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c7fe:	2303      	movs	r3, #3
 800c800:	e01f      	b.n	800c842 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	2200      	movs	r2, #0
 800c806:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	2200      	movs	r2, #0
 800c80e:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	2200      	movs	r2, #0
 800c816:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d003      	beq.n	800c828 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	68ba      	ldr	r2, [r7, #8]
 800c824:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	2201      	movs	r2, #1
 800c82c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	79fa      	ldrb	r2, [r7, #7]
 800c834:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c836:	68f8      	ldr	r0, [r7, #12]
 800c838:	f001 fda6 	bl	800e388 <USBD_LL_Init>
 800c83c:	4603      	mov	r3, r0
 800c83e:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c840:	7dfb      	ldrb	r3, [r7, #23]
}
 800c842:	4618      	mov	r0, r3
 800c844:	3718      	adds	r7, #24
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
 800c84a:	bf00      	nop
 800c84c:	080111ac 	.word	0x080111ac
 800c850:	080111b4 	.word	0x080111b4

0800c854 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b084      	sub	sp, #16
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c85e:	2300      	movs	r3, #0
 800c860:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d10a      	bne.n	800c87e <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800c868:	481a      	ldr	r0, [pc, #104]	@ (800c8d4 <USBD_RegisterClass+0x80>)
 800c86a:	f002 fcc5 	bl	800f1f8 <iprintf>
 800c86e:	481a      	ldr	r0, [pc, #104]	@ (800c8d8 <USBD_RegisterClass+0x84>)
 800c870:	f002 fcc2 	bl	800f1f8 <iprintf>
 800c874:	200a      	movs	r0, #10
 800c876:	f002 fcd1 	bl	800f21c <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c87a:	2303      	movs	r3, #3
 800c87c:	e025      	b.n	800c8ca <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	683a      	ldr	r2, [r7, #0]
 800c882:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	32ae      	adds	r2, #174	@ 0xae
 800c890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c896:	2b00      	cmp	r3, #0
 800c898:	d00f      	beq.n	800c8ba <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	32ae      	adds	r2, #174	@ 0xae
 800c8a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8aa:	f107 020e 	add.w	r2, r7, #14
 800c8ae:	4610      	mov	r0, r2
 800c8b0:	4798      	blx	r3
 800c8b2:	4602      	mov	r2, r0
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c8c0:	1c5a      	adds	r2, r3, #1
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c8c8:	2300      	movs	r3, #0
}
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	3710      	adds	r7, #16
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}
 800c8d2:	bf00      	nop
 800c8d4:	080111ac 	.word	0x080111ac
 800c8d8:	080111cc 	.word	0x080111cc

0800c8dc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b082      	sub	sp, #8
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f001 fdb1 	bl	800e44c <USBD_LL_Start>
 800c8ea:	4603      	mov	r3, r0
}
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	3708      	adds	r7, #8
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	bd80      	pop	{r7, pc}

0800c8f4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b083      	sub	sp, #12
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c8fc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	370c      	adds	r7, #12
 800c902:	46bd      	mov	sp, r7
 800c904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c908:	4770      	bx	lr

0800c90a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c90a:	b580      	push	{r7, lr}
 800c90c:	b084      	sub	sp, #16
 800c90e:	af00      	add	r7, sp, #0
 800c910:	6078      	str	r0, [r7, #4]
 800c912:	460b      	mov	r3, r1
 800c914:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c916:	2300      	movs	r3, #0
 800c918:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c920:	2b00      	cmp	r3, #0
 800c922:	d009      	beq.n	800c938 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	78fa      	ldrb	r2, [r7, #3]
 800c92e:	4611      	mov	r1, r2
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	4798      	blx	r3
 800c934:	4603      	mov	r3, r0
 800c936:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c938:	7bfb      	ldrb	r3, [r7, #15]
}
 800c93a:	4618      	mov	r0, r3
 800c93c:	3710      	adds	r7, #16
 800c93e:	46bd      	mov	sp, r7
 800c940:	bd80      	pop	{r7, pc}

0800c942 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c942:	b580      	push	{r7, lr}
 800c944:	b084      	sub	sp, #16
 800c946:	af00      	add	r7, sp, #0
 800c948:	6078      	str	r0, [r7, #4]
 800c94a:	460b      	mov	r3, r1
 800c94c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c94e:	2300      	movs	r3, #0
 800c950:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c958:	685b      	ldr	r3, [r3, #4]
 800c95a:	78fa      	ldrb	r2, [r7, #3]
 800c95c:	4611      	mov	r1, r2
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	4798      	blx	r3
 800c962:	4603      	mov	r3, r0
 800c964:	2b00      	cmp	r3, #0
 800c966:	d001      	beq.n	800c96c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c968:	2303      	movs	r3, #3
 800c96a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c96c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3710      	adds	r7, #16
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}

0800c976 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c976:	b580      	push	{r7, lr}
 800c978:	b084      	sub	sp, #16
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]
 800c97e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c986:	6839      	ldr	r1, [r7, #0]
 800c988:	4618      	mov	r0, r3
 800c98a:	f001 f8a4 	bl	800dad6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2201      	movs	r2, #1
 800c992:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c99c:	461a      	mov	r2, r3
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c9aa:	f003 031f 	and.w	r3, r3, #31
 800c9ae:	2b02      	cmp	r3, #2
 800c9b0:	d01a      	beq.n	800c9e8 <USBD_LL_SetupStage+0x72>
 800c9b2:	2b02      	cmp	r3, #2
 800c9b4:	d822      	bhi.n	800c9fc <USBD_LL_SetupStage+0x86>
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d002      	beq.n	800c9c0 <USBD_LL_SetupStage+0x4a>
 800c9ba:	2b01      	cmp	r3, #1
 800c9bc:	d00a      	beq.n	800c9d4 <USBD_LL_SetupStage+0x5e>
 800c9be:	e01d      	b.n	800c9fc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c9c6:	4619      	mov	r1, r3
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f000 fad1 	bl	800cf70 <USBD_StdDevReq>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	73fb      	strb	r3, [r7, #15]
      break;
 800c9d2:	e020      	b.n	800ca16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c9da:	4619      	mov	r1, r3
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f000 fb39 	bl	800d054 <USBD_StdItfReq>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	73fb      	strb	r3, [r7, #15]
      break;
 800c9e6:	e016      	b.n	800ca16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c9ee:	4619      	mov	r1, r3
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f000 fb9b 	bl	800d12c <USBD_StdEPReq>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	73fb      	strb	r3, [r7, #15]
      break;
 800c9fa:	e00c      	b.n	800ca16 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ca02:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ca06:	b2db      	uxtb	r3, r3
 800ca08:	4619      	mov	r1, r3
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f001 fd7e 	bl	800e50c <USBD_LL_StallEP>
 800ca10:	4603      	mov	r3, r0
 800ca12:	73fb      	strb	r3, [r7, #15]
      break;
 800ca14:	bf00      	nop
  }

  return ret;
 800ca16:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3710      	adds	r7, #16
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}

0800ca20 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b086      	sub	sp, #24
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	60f8      	str	r0, [r7, #12]
 800ca28:	460b      	mov	r3, r1
 800ca2a:	607a      	str	r2, [r7, #4]
 800ca2c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ca32:	7afb      	ldrb	r3, [r7, #11]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d16e      	bne.n	800cb16 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ca3e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ca46:	2b03      	cmp	r3, #3
 800ca48:	f040 8098 	bne.w	800cb7c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ca4c:	693b      	ldr	r3, [r7, #16]
 800ca4e:	689a      	ldr	r2, [r3, #8]
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	68db      	ldr	r3, [r3, #12]
 800ca54:	429a      	cmp	r2, r3
 800ca56:	d913      	bls.n	800ca80 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ca58:	693b      	ldr	r3, [r7, #16]
 800ca5a:	689a      	ldr	r2, [r3, #8]
 800ca5c:	693b      	ldr	r3, [r7, #16]
 800ca5e:	68db      	ldr	r3, [r3, #12]
 800ca60:	1ad2      	subs	r2, r2, r3
 800ca62:	693b      	ldr	r3, [r7, #16]
 800ca64:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ca66:	693b      	ldr	r3, [r7, #16]
 800ca68:	68da      	ldr	r2, [r3, #12]
 800ca6a:	693b      	ldr	r3, [r7, #16]
 800ca6c:	689b      	ldr	r3, [r3, #8]
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	bf28      	it	cs
 800ca72:	4613      	movcs	r3, r2
 800ca74:	461a      	mov	r2, r3
 800ca76:	6879      	ldr	r1, [r7, #4]
 800ca78:	68f8      	ldr	r0, [r7, #12]
 800ca7a:	f001 f92c 	bl	800dcd6 <USBD_CtlContinueRx>
 800ca7e:	e07d      	b.n	800cb7c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ca86:	f003 031f 	and.w	r3, r3, #31
 800ca8a:	2b02      	cmp	r3, #2
 800ca8c:	d014      	beq.n	800cab8 <USBD_LL_DataOutStage+0x98>
 800ca8e:	2b02      	cmp	r3, #2
 800ca90:	d81d      	bhi.n	800cace <USBD_LL_DataOutStage+0xae>
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d002      	beq.n	800ca9c <USBD_LL_DataOutStage+0x7c>
 800ca96:	2b01      	cmp	r3, #1
 800ca98:	d003      	beq.n	800caa2 <USBD_LL_DataOutStage+0x82>
 800ca9a:	e018      	b.n	800cace <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	75bb      	strb	r3, [r7, #22]
            break;
 800caa0:	e018      	b.n	800cad4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800caa8:	b2db      	uxtb	r3, r3
 800caaa:	4619      	mov	r1, r3
 800caac:	68f8      	ldr	r0, [r7, #12]
 800caae:	f000 f9d2 	bl	800ce56 <USBD_CoreFindIF>
 800cab2:	4603      	mov	r3, r0
 800cab4:	75bb      	strb	r3, [r7, #22]
            break;
 800cab6:	e00d      	b.n	800cad4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800cabe:	b2db      	uxtb	r3, r3
 800cac0:	4619      	mov	r1, r3
 800cac2:	68f8      	ldr	r0, [r7, #12]
 800cac4:	f000 f9d4 	bl	800ce70 <USBD_CoreFindEP>
 800cac8:	4603      	mov	r3, r0
 800caca:	75bb      	strb	r3, [r7, #22]
            break;
 800cacc:	e002      	b.n	800cad4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800cace:	2300      	movs	r3, #0
 800cad0:	75bb      	strb	r3, [r7, #22]
            break;
 800cad2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800cad4:	7dbb      	ldrb	r3, [r7, #22]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d119      	bne.n	800cb0e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cae0:	b2db      	uxtb	r3, r3
 800cae2:	2b03      	cmp	r3, #3
 800cae4:	d113      	bne.n	800cb0e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800cae6:	7dba      	ldrb	r2, [r7, #22]
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	32ae      	adds	r2, #174	@ 0xae
 800caec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caf0:	691b      	ldr	r3, [r3, #16]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d00b      	beq.n	800cb0e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800caf6:	7dba      	ldrb	r2, [r7, #22]
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800cafe:	7dba      	ldrb	r2, [r7, #22]
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	32ae      	adds	r2, #174	@ 0xae
 800cb04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb08:	691b      	ldr	r3, [r3, #16]
 800cb0a:	68f8      	ldr	r0, [r7, #12]
 800cb0c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cb0e:	68f8      	ldr	r0, [r7, #12]
 800cb10:	f001 f8f2 	bl	800dcf8 <USBD_CtlSendStatus>
 800cb14:	e032      	b.n	800cb7c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800cb16:	7afb      	ldrb	r3, [r7, #11]
 800cb18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb1c:	b2db      	uxtb	r3, r3
 800cb1e:	4619      	mov	r1, r3
 800cb20:	68f8      	ldr	r0, [r7, #12]
 800cb22:	f000 f9a5 	bl	800ce70 <USBD_CoreFindEP>
 800cb26:	4603      	mov	r3, r0
 800cb28:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cb2a:	7dbb      	ldrb	r3, [r7, #22]
 800cb2c:	2bff      	cmp	r3, #255	@ 0xff
 800cb2e:	d025      	beq.n	800cb7c <USBD_LL_DataOutStage+0x15c>
 800cb30:	7dbb      	ldrb	r3, [r7, #22]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d122      	bne.n	800cb7c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb3c:	b2db      	uxtb	r3, r3
 800cb3e:	2b03      	cmp	r3, #3
 800cb40:	d117      	bne.n	800cb72 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800cb42:	7dba      	ldrb	r2, [r7, #22]
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	32ae      	adds	r2, #174	@ 0xae
 800cb48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb4c:	699b      	ldr	r3, [r3, #24]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d00f      	beq.n	800cb72 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800cb52:	7dba      	ldrb	r2, [r7, #22]
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800cb5a:	7dba      	ldrb	r2, [r7, #22]
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	32ae      	adds	r2, #174	@ 0xae
 800cb60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb64:	699b      	ldr	r3, [r3, #24]
 800cb66:	7afa      	ldrb	r2, [r7, #11]
 800cb68:	4611      	mov	r1, r2
 800cb6a:	68f8      	ldr	r0, [r7, #12]
 800cb6c:	4798      	blx	r3
 800cb6e:	4603      	mov	r3, r0
 800cb70:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800cb72:	7dfb      	ldrb	r3, [r7, #23]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d001      	beq.n	800cb7c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800cb78:	7dfb      	ldrb	r3, [r7, #23]
 800cb7a:	e000      	b.n	800cb7e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800cb7c:	2300      	movs	r3, #0
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3718      	adds	r7, #24
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}

0800cb86 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cb86:	b580      	push	{r7, lr}
 800cb88:	b086      	sub	sp, #24
 800cb8a:	af00      	add	r7, sp, #0
 800cb8c:	60f8      	str	r0, [r7, #12]
 800cb8e:	460b      	mov	r3, r1
 800cb90:	607a      	str	r2, [r7, #4]
 800cb92:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800cb94:	7afb      	ldrb	r3, [r7, #11]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d16f      	bne.n	800cc7a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	3314      	adds	r3, #20
 800cb9e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cba6:	2b02      	cmp	r3, #2
 800cba8:	d15a      	bne.n	800cc60 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800cbaa:	693b      	ldr	r3, [r7, #16]
 800cbac:	689a      	ldr	r2, [r3, #8]
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	68db      	ldr	r3, [r3, #12]
 800cbb2:	429a      	cmp	r2, r3
 800cbb4:	d914      	bls.n	800cbe0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	689a      	ldr	r2, [r3, #8]
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	68db      	ldr	r3, [r3, #12]
 800cbbe:	1ad2      	subs	r2, r2, r3
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800cbc4:	693b      	ldr	r3, [r7, #16]
 800cbc6:	689b      	ldr	r3, [r3, #8]
 800cbc8:	461a      	mov	r2, r3
 800cbca:	6879      	ldr	r1, [r7, #4]
 800cbcc:	68f8      	ldr	r0, [r7, #12]
 800cbce:	f001 f854 	bl	800dc7a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	2100      	movs	r1, #0
 800cbd8:	68f8      	ldr	r0, [r7, #12]
 800cbda:	f001 fd41 	bl	800e660 <USBD_LL_PrepareReceive>
 800cbde:	e03f      	b.n	800cc60 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	68da      	ldr	r2, [r3, #12]
 800cbe4:	693b      	ldr	r3, [r7, #16]
 800cbe6:	689b      	ldr	r3, [r3, #8]
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	d11c      	bne.n	800cc26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	685a      	ldr	r2, [r3, #4]
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cbf4:	429a      	cmp	r2, r3
 800cbf6:	d316      	bcc.n	800cc26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800cbf8:	693b      	ldr	r3, [r7, #16]
 800cbfa:	685a      	ldr	r2, [r3, #4]
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cc02:	429a      	cmp	r2, r3
 800cc04:	d20f      	bcs.n	800cc26 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cc06:	2200      	movs	r2, #0
 800cc08:	2100      	movs	r1, #0
 800cc0a:	68f8      	ldr	r0, [r7, #12]
 800cc0c:	f001 f835 	bl	800dc7a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	2200      	movs	r2, #0
 800cc14:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cc18:	2300      	movs	r3, #0
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	2100      	movs	r1, #0
 800cc1e:	68f8      	ldr	r0, [r7, #12]
 800cc20:	f001 fd1e 	bl	800e660 <USBD_LL_PrepareReceive>
 800cc24:	e01c      	b.n	800cc60 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc2c:	b2db      	uxtb	r3, r3
 800cc2e:	2b03      	cmp	r3, #3
 800cc30:	d10f      	bne.n	800cc52 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc38:	68db      	ldr	r3, [r3, #12]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d009      	beq.n	800cc52 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	2200      	movs	r2, #0
 800cc42:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc4c:	68db      	ldr	r3, [r3, #12]
 800cc4e:	68f8      	ldr	r0, [r7, #12]
 800cc50:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc52:	2180      	movs	r1, #128	@ 0x80
 800cc54:	68f8      	ldr	r0, [r7, #12]
 800cc56:	f001 fc59 	bl	800e50c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800cc5a:	68f8      	ldr	r0, [r7, #12]
 800cc5c:	f001 f85f 	bl	800dd1e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d03a      	beq.n	800cce0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800cc6a:	68f8      	ldr	r0, [r7, #12]
 800cc6c:	f7ff fe42 	bl	800c8f4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	2200      	movs	r2, #0
 800cc74:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800cc78:	e032      	b.n	800cce0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800cc7a:	7afb      	ldrb	r3, [r7, #11]
 800cc7c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cc80:	b2db      	uxtb	r3, r3
 800cc82:	4619      	mov	r1, r3
 800cc84:	68f8      	ldr	r0, [r7, #12]
 800cc86:	f000 f8f3 	bl	800ce70 <USBD_CoreFindEP>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cc8e:	7dfb      	ldrb	r3, [r7, #23]
 800cc90:	2bff      	cmp	r3, #255	@ 0xff
 800cc92:	d025      	beq.n	800cce0 <USBD_LL_DataInStage+0x15a>
 800cc94:	7dfb      	ldrb	r3, [r7, #23]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d122      	bne.n	800cce0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cca0:	b2db      	uxtb	r3, r3
 800cca2:	2b03      	cmp	r3, #3
 800cca4:	d11c      	bne.n	800cce0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800cca6:	7dfa      	ldrb	r2, [r7, #23]
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	32ae      	adds	r2, #174	@ 0xae
 800ccac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccb0:	695b      	ldr	r3, [r3, #20]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d014      	beq.n	800cce0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ccb6:	7dfa      	ldrb	r2, [r7, #23]
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ccbe:	7dfa      	ldrb	r2, [r7, #23]
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	32ae      	adds	r2, #174	@ 0xae
 800ccc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccc8:	695b      	ldr	r3, [r3, #20]
 800ccca:	7afa      	ldrb	r2, [r7, #11]
 800cccc:	4611      	mov	r1, r2
 800ccce:	68f8      	ldr	r0, [r7, #12]
 800ccd0:	4798      	blx	r3
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ccd6:	7dbb      	ldrb	r3, [r7, #22]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d001      	beq.n	800cce0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ccdc:	7dbb      	ldrb	r3, [r7, #22]
 800ccde:	e000      	b.n	800cce2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800cce0:	2300      	movs	r3, #0
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	3718      	adds	r7, #24
 800cce6:	46bd      	mov	sp, r7
 800cce8:	bd80      	pop	{r7, pc}

0800ccea <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ccea:	b580      	push	{r7, lr}
 800ccec:	b084      	sub	sp, #16
 800ccee:	af00      	add	r7, sp, #0
 800ccf0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2201      	movs	r2, #1
 800ccfa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2200      	movs	r2, #0
 800cd02:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2200      	movs	r2, #0
 800cd0a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2200      	movs	r2, #0
 800cd18:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d014      	beq.n	800cd50 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd2c:	685b      	ldr	r3, [r3, #4]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d00e      	beq.n	800cd50 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd38:	685b      	ldr	r3, [r3, #4]
 800cd3a:	687a      	ldr	r2, [r7, #4]
 800cd3c:	6852      	ldr	r2, [r2, #4]
 800cd3e:	b2d2      	uxtb	r2, r2
 800cd40:	4611      	mov	r1, r2
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	4798      	blx	r3
 800cd46:	4603      	mov	r3, r0
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d001      	beq.n	800cd50 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800cd4c:	2303      	movs	r3, #3
 800cd4e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cd50:	2340      	movs	r3, #64	@ 0x40
 800cd52:	2200      	movs	r2, #0
 800cd54:	2100      	movs	r1, #0
 800cd56:	6878      	ldr	r0, [r7, #4]
 800cd58:	f001 fb93 	bl	800e482 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2201      	movs	r2, #1
 800cd60:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2240      	movs	r2, #64	@ 0x40
 800cd68:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cd6c:	2340      	movs	r3, #64	@ 0x40
 800cd6e:	2200      	movs	r2, #0
 800cd70:	2180      	movs	r1, #128	@ 0x80
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f001 fb85 	bl	800e482 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2201      	movs	r2, #1
 800cd7c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2240      	movs	r2, #64	@ 0x40
 800cd82:	621a      	str	r2, [r3, #32]

  return ret;
 800cd84:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	3710      	adds	r7, #16
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}

0800cd8e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cd8e:	b480      	push	{r7}
 800cd90:	b083      	sub	sp, #12
 800cd92:	af00      	add	r7, sp, #0
 800cd94:	6078      	str	r0, [r7, #4]
 800cd96:	460b      	mov	r3, r1
 800cd98:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	78fa      	ldrb	r2, [r7, #3]
 800cd9e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cda0:	2300      	movs	r3, #0
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	370c      	adds	r7, #12
 800cda6:	46bd      	mov	sp, r7
 800cda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdac:	4770      	bx	lr

0800cdae <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cdae:	b480      	push	{r7}
 800cdb0:	b083      	sub	sp, #12
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cdbc:	b2db      	uxtb	r3, r3
 800cdbe:	2b04      	cmp	r3, #4
 800cdc0:	d006      	beq.n	800cdd0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cdc8:	b2da      	uxtb	r2, r3
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2204      	movs	r2, #4
 800cdd4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800cdd8:	2300      	movs	r3, #0
}
 800cdda:	4618      	mov	r0, r3
 800cddc:	370c      	adds	r7, #12
 800cdde:	46bd      	mov	sp, r7
 800cde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde4:	4770      	bx	lr

0800cde6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cde6:	b480      	push	{r7}
 800cde8:	b083      	sub	sp, #12
 800cdea:	af00      	add	r7, sp, #0
 800cdec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cdf4:	b2db      	uxtb	r3, r3
 800cdf6:	2b04      	cmp	r3, #4
 800cdf8:	d106      	bne.n	800ce08 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ce00:	b2da      	uxtb	r2, r3
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ce08:	2300      	movs	r3, #0
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	370c      	adds	r7, #12
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce14:	4770      	bx	lr

0800ce16 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ce16:	b580      	push	{r7, lr}
 800ce18:	b082      	sub	sp, #8
 800ce1a:	af00      	add	r7, sp, #0
 800ce1c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce24:	b2db      	uxtb	r3, r3
 800ce26:	2b03      	cmp	r3, #3
 800ce28:	d110      	bne.n	800ce4c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d00b      	beq.n	800ce4c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce3a:	69db      	ldr	r3, [r3, #28]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d005      	beq.n	800ce4c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce46:	69db      	ldr	r3, [r3, #28]
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ce4c:	2300      	movs	r3, #0
}
 800ce4e:	4618      	mov	r0, r3
 800ce50:	3708      	adds	r7, #8
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}

0800ce56 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ce56:	b480      	push	{r7}
 800ce58:	b083      	sub	sp, #12
 800ce5a:	af00      	add	r7, sp, #0
 800ce5c:	6078      	str	r0, [r7, #4]
 800ce5e:	460b      	mov	r3, r1
 800ce60:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ce62:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	370c      	adds	r7, #12
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6e:	4770      	bx	lr

0800ce70 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ce70:	b480      	push	{r7}
 800ce72:	b083      	sub	sp, #12
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	460b      	mov	r3, r1
 800ce7a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ce7c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ce7e:	4618      	mov	r0, r3
 800ce80:	370c      	adds	r7, #12
 800ce82:	46bd      	mov	sp, r7
 800ce84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce88:	4770      	bx	lr

0800ce8a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ce8a:	b580      	push	{r7, lr}
 800ce8c:	b086      	sub	sp, #24
 800ce8e:	af00      	add	r7, sp, #0
 800ce90:	6078      	str	r0, [r7, #4]
 800ce92:	460b      	mov	r3, r1
 800ce94:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ce9e:	2300      	movs	r3, #0
 800cea0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	885b      	ldrh	r3, [r3, #2]
 800cea6:	b29b      	uxth	r3, r3
 800cea8:	68fa      	ldr	r2, [r7, #12]
 800ceaa:	7812      	ldrb	r2, [r2, #0]
 800ceac:	4293      	cmp	r3, r2
 800ceae:	d91f      	bls.n	800cef0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	781b      	ldrb	r3, [r3, #0]
 800ceb4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ceb6:	e013      	b.n	800cee0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ceb8:	f107 030a 	add.w	r3, r7, #10
 800cebc:	4619      	mov	r1, r3
 800cebe:	6978      	ldr	r0, [r7, #20]
 800cec0:	f000 f81b 	bl	800cefa <USBD_GetNextDesc>
 800cec4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	785b      	ldrb	r3, [r3, #1]
 800ceca:	2b05      	cmp	r3, #5
 800cecc:	d108      	bne.n	800cee0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800cece:	697b      	ldr	r3, [r7, #20]
 800ced0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ced2:	693b      	ldr	r3, [r7, #16]
 800ced4:	789b      	ldrb	r3, [r3, #2]
 800ced6:	78fa      	ldrb	r2, [r7, #3]
 800ced8:	429a      	cmp	r2, r3
 800ceda:	d008      	beq.n	800ceee <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800cedc:	2300      	movs	r3, #0
 800cede:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	885b      	ldrh	r3, [r3, #2]
 800cee4:	b29a      	uxth	r2, r3
 800cee6:	897b      	ldrh	r3, [r7, #10]
 800cee8:	429a      	cmp	r2, r3
 800ceea:	d8e5      	bhi.n	800ceb8 <USBD_GetEpDesc+0x2e>
 800ceec:	e000      	b.n	800cef0 <USBD_GetEpDesc+0x66>
          break;
 800ceee:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800cef0:	693b      	ldr	r3, [r7, #16]
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	3718      	adds	r7, #24
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}

0800cefa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800cefa:	b480      	push	{r7}
 800cefc:	b085      	sub	sp, #20
 800cefe:	af00      	add	r7, sp, #0
 800cf00:	6078      	str	r0, [r7, #4]
 800cf02:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	881b      	ldrh	r3, [r3, #0]
 800cf0c:	68fa      	ldr	r2, [r7, #12]
 800cf0e:	7812      	ldrb	r2, [r2, #0]
 800cf10:	4413      	add	r3, r2
 800cf12:	b29a      	uxth	r2, r3
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	781b      	ldrb	r3, [r3, #0]
 800cf1c:	461a      	mov	r2, r3
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	4413      	add	r3, r2
 800cf22:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cf24:	68fb      	ldr	r3, [r7, #12]
}
 800cf26:	4618      	mov	r0, r3
 800cf28:	3714      	adds	r7, #20
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf30:	4770      	bx	lr

0800cf32 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cf32:	b480      	push	{r7}
 800cf34:	b087      	sub	sp, #28
 800cf36:	af00      	add	r7, sp, #0
 800cf38:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cf3e:	697b      	ldr	r3, [r7, #20]
 800cf40:	781b      	ldrb	r3, [r3, #0]
 800cf42:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cf44:	697b      	ldr	r3, [r7, #20]
 800cf46:	3301      	adds	r3, #1
 800cf48:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	781b      	ldrb	r3, [r3, #0]
 800cf4e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cf50:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800cf54:	021b      	lsls	r3, r3, #8
 800cf56:	b21a      	sxth	r2, r3
 800cf58:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cf5c:	4313      	orrs	r3, r2
 800cf5e:	b21b      	sxth	r3, r3
 800cf60:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cf62:	89fb      	ldrh	r3, [r7, #14]
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	371c      	adds	r7, #28
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6e:	4770      	bx	lr

0800cf70 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b084      	sub	sp, #16
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
 800cf78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	781b      	ldrb	r3, [r3, #0]
 800cf82:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cf86:	2b40      	cmp	r3, #64	@ 0x40
 800cf88:	d005      	beq.n	800cf96 <USBD_StdDevReq+0x26>
 800cf8a:	2b40      	cmp	r3, #64	@ 0x40
 800cf8c:	d857      	bhi.n	800d03e <USBD_StdDevReq+0xce>
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d00f      	beq.n	800cfb2 <USBD_StdDevReq+0x42>
 800cf92:	2b20      	cmp	r3, #32
 800cf94:	d153      	bne.n	800d03e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	32ae      	adds	r2, #174	@ 0xae
 800cfa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfa4:	689b      	ldr	r3, [r3, #8]
 800cfa6:	6839      	ldr	r1, [r7, #0]
 800cfa8:	6878      	ldr	r0, [r7, #4]
 800cfaa:	4798      	blx	r3
 800cfac:	4603      	mov	r3, r0
 800cfae:	73fb      	strb	r3, [r7, #15]
      break;
 800cfb0:	e04a      	b.n	800d048 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	785b      	ldrb	r3, [r3, #1]
 800cfb6:	2b09      	cmp	r3, #9
 800cfb8:	d83b      	bhi.n	800d032 <USBD_StdDevReq+0xc2>
 800cfba:	a201      	add	r2, pc, #4	@ (adr r2, 800cfc0 <USBD_StdDevReq+0x50>)
 800cfbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfc0:	0800d015 	.word	0x0800d015
 800cfc4:	0800d029 	.word	0x0800d029
 800cfc8:	0800d033 	.word	0x0800d033
 800cfcc:	0800d01f 	.word	0x0800d01f
 800cfd0:	0800d033 	.word	0x0800d033
 800cfd4:	0800cff3 	.word	0x0800cff3
 800cfd8:	0800cfe9 	.word	0x0800cfe9
 800cfdc:	0800d033 	.word	0x0800d033
 800cfe0:	0800d00b 	.word	0x0800d00b
 800cfe4:	0800cffd 	.word	0x0800cffd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cfe8:	6839      	ldr	r1, [r7, #0]
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f000 fa3c 	bl	800d468 <USBD_GetDescriptor>
          break;
 800cff0:	e024      	b.n	800d03c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cff2:	6839      	ldr	r1, [r7, #0]
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f000 fbcb 	bl	800d790 <USBD_SetAddress>
          break;
 800cffa:	e01f      	b.n	800d03c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cffc:	6839      	ldr	r1, [r7, #0]
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f000 fc0a 	bl	800d818 <USBD_SetConfig>
 800d004:	4603      	mov	r3, r0
 800d006:	73fb      	strb	r3, [r7, #15]
          break;
 800d008:	e018      	b.n	800d03c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d00a:	6839      	ldr	r1, [r7, #0]
 800d00c:	6878      	ldr	r0, [r7, #4]
 800d00e:	f000 fcad 	bl	800d96c <USBD_GetConfig>
          break;
 800d012:	e013      	b.n	800d03c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d014:	6839      	ldr	r1, [r7, #0]
 800d016:	6878      	ldr	r0, [r7, #4]
 800d018:	f000 fcde 	bl	800d9d8 <USBD_GetStatus>
          break;
 800d01c:	e00e      	b.n	800d03c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d01e:	6839      	ldr	r1, [r7, #0]
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f000 fd0d 	bl	800da40 <USBD_SetFeature>
          break;
 800d026:	e009      	b.n	800d03c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d028:	6839      	ldr	r1, [r7, #0]
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f000 fd31 	bl	800da92 <USBD_ClrFeature>
          break;
 800d030:	e004      	b.n	800d03c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d032:	6839      	ldr	r1, [r7, #0]
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f000 fd88 	bl	800db4a <USBD_CtlError>
          break;
 800d03a:	bf00      	nop
      }
      break;
 800d03c:	e004      	b.n	800d048 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d03e:	6839      	ldr	r1, [r7, #0]
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	f000 fd82 	bl	800db4a <USBD_CtlError>
      break;
 800d046:	bf00      	nop
  }

  return ret;
 800d048:	7bfb      	ldrb	r3, [r7, #15]
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	3710      	adds	r7, #16
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}
 800d052:	bf00      	nop

0800d054 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b084      	sub	sp, #16
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
 800d05c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d05e:	2300      	movs	r3, #0
 800d060:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	781b      	ldrb	r3, [r3, #0]
 800d066:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d06a:	2b40      	cmp	r3, #64	@ 0x40
 800d06c:	d005      	beq.n	800d07a <USBD_StdItfReq+0x26>
 800d06e:	2b40      	cmp	r3, #64	@ 0x40
 800d070:	d852      	bhi.n	800d118 <USBD_StdItfReq+0xc4>
 800d072:	2b00      	cmp	r3, #0
 800d074:	d001      	beq.n	800d07a <USBD_StdItfReq+0x26>
 800d076:	2b20      	cmp	r3, #32
 800d078:	d14e      	bne.n	800d118 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d080:	b2db      	uxtb	r3, r3
 800d082:	3b01      	subs	r3, #1
 800d084:	2b02      	cmp	r3, #2
 800d086:	d840      	bhi.n	800d10a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	889b      	ldrh	r3, [r3, #4]
 800d08c:	b2db      	uxtb	r3, r3
 800d08e:	2b01      	cmp	r3, #1
 800d090:	d836      	bhi.n	800d100 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	889b      	ldrh	r3, [r3, #4]
 800d096:	b2db      	uxtb	r3, r3
 800d098:	4619      	mov	r1, r3
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f7ff fedb 	bl	800ce56 <USBD_CoreFindIF>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d0a4:	7bbb      	ldrb	r3, [r7, #14]
 800d0a6:	2bff      	cmp	r3, #255	@ 0xff
 800d0a8:	d01d      	beq.n	800d0e6 <USBD_StdItfReq+0x92>
 800d0aa:	7bbb      	ldrb	r3, [r7, #14]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d11a      	bne.n	800d0e6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d0b0:	7bba      	ldrb	r2, [r7, #14]
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	32ae      	adds	r2, #174	@ 0xae
 800d0b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0ba:	689b      	ldr	r3, [r3, #8]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d00f      	beq.n	800d0e0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d0c0:	7bba      	ldrb	r2, [r7, #14]
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d0c8:	7bba      	ldrb	r2, [r7, #14]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	32ae      	adds	r2, #174	@ 0xae
 800d0ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0d2:	689b      	ldr	r3, [r3, #8]
 800d0d4:	6839      	ldr	r1, [r7, #0]
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	4798      	blx	r3
 800d0da:	4603      	mov	r3, r0
 800d0dc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d0de:	e004      	b.n	800d0ea <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d0e0:	2303      	movs	r3, #3
 800d0e2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d0e4:	e001      	b.n	800d0ea <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d0e6:	2303      	movs	r3, #3
 800d0e8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	88db      	ldrh	r3, [r3, #6]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d110      	bne.n	800d114 <USBD_StdItfReq+0xc0>
 800d0f2:	7bfb      	ldrb	r3, [r7, #15]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d10d      	bne.n	800d114 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f000 fdfd 	bl	800dcf8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d0fe:	e009      	b.n	800d114 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d100:	6839      	ldr	r1, [r7, #0]
 800d102:	6878      	ldr	r0, [r7, #4]
 800d104:	f000 fd21 	bl	800db4a <USBD_CtlError>
          break;
 800d108:	e004      	b.n	800d114 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d10a:	6839      	ldr	r1, [r7, #0]
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	f000 fd1c 	bl	800db4a <USBD_CtlError>
          break;
 800d112:	e000      	b.n	800d116 <USBD_StdItfReq+0xc2>
          break;
 800d114:	bf00      	nop
      }
      break;
 800d116:	e004      	b.n	800d122 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d118:	6839      	ldr	r1, [r7, #0]
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f000 fd15 	bl	800db4a <USBD_CtlError>
      break;
 800d120:	bf00      	nop
  }

  return ret;
 800d122:	7bfb      	ldrb	r3, [r7, #15]
}
 800d124:	4618      	mov	r0, r3
 800d126:	3710      	adds	r7, #16
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}

0800d12c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b084      	sub	sp, #16
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d136:	2300      	movs	r3, #0
 800d138:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	889b      	ldrh	r3, [r3, #4]
 800d13e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	781b      	ldrb	r3, [r3, #0]
 800d144:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d148:	2b40      	cmp	r3, #64	@ 0x40
 800d14a:	d007      	beq.n	800d15c <USBD_StdEPReq+0x30>
 800d14c:	2b40      	cmp	r3, #64	@ 0x40
 800d14e:	f200 817f 	bhi.w	800d450 <USBD_StdEPReq+0x324>
 800d152:	2b00      	cmp	r3, #0
 800d154:	d02a      	beq.n	800d1ac <USBD_StdEPReq+0x80>
 800d156:	2b20      	cmp	r3, #32
 800d158:	f040 817a 	bne.w	800d450 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d15c:	7bbb      	ldrb	r3, [r7, #14]
 800d15e:	4619      	mov	r1, r3
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f7ff fe85 	bl	800ce70 <USBD_CoreFindEP>
 800d166:	4603      	mov	r3, r0
 800d168:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d16a:	7b7b      	ldrb	r3, [r7, #13]
 800d16c:	2bff      	cmp	r3, #255	@ 0xff
 800d16e:	f000 8174 	beq.w	800d45a <USBD_StdEPReq+0x32e>
 800d172:	7b7b      	ldrb	r3, [r7, #13]
 800d174:	2b00      	cmp	r3, #0
 800d176:	f040 8170 	bne.w	800d45a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d17a:	7b7a      	ldrb	r2, [r7, #13]
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d182:	7b7a      	ldrb	r2, [r7, #13]
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	32ae      	adds	r2, #174	@ 0xae
 800d188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d18c:	689b      	ldr	r3, [r3, #8]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	f000 8163 	beq.w	800d45a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d194:	7b7a      	ldrb	r2, [r7, #13]
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	32ae      	adds	r2, #174	@ 0xae
 800d19a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d19e:	689b      	ldr	r3, [r3, #8]
 800d1a0:	6839      	ldr	r1, [r7, #0]
 800d1a2:	6878      	ldr	r0, [r7, #4]
 800d1a4:	4798      	blx	r3
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d1aa:	e156      	b.n	800d45a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	785b      	ldrb	r3, [r3, #1]
 800d1b0:	2b03      	cmp	r3, #3
 800d1b2:	d008      	beq.n	800d1c6 <USBD_StdEPReq+0x9a>
 800d1b4:	2b03      	cmp	r3, #3
 800d1b6:	f300 8145 	bgt.w	800d444 <USBD_StdEPReq+0x318>
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	f000 809b 	beq.w	800d2f6 <USBD_StdEPReq+0x1ca>
 800d1c0:	2b01      	cmp	r3, #1
 800d1c2:	d03c      	beq.n	800d23e <USBD_StdEPReq+0x112>
 800d1c4:	e13e      	b.n	800d444 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d1cc:	b2db      	uxtb	r3, r3
 800d1ce:	2b02      	cmp	r3, #2
 800d1d0:	d002      	beq.n	800d1d8 <USBD_StdEPReq+0xac>
 800d1d2:	2b03      	cmp	r3, #3
 800d1d4:	d016      	beq.n	800d204 <USBD_StdEPReq+0xd8>
 800d1d6:	e02c      	b.n	800d232 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d1d8:	7bbb      	ldrb	r3, [r7, #14]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d00d      	beq.n	800d1fa <USBD_StdEPReq+0xce>
 800d1de:	7bbb      	ldrb	r3, [r7, #14]
 800d1e0:	2b80      	cmp	r3, #128	@ 0x80
 800d1e2:	d00a      	beq.n	800d1fa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d1e4:	7bbb      	ldrb	r3, [r7, #14]
 800d1e6:	4619      	mov	r1, r3
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f001 f98f 	bl	800e50c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d1ee:	2180      	movs	r1, #128	@ 0x80
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f001 f98b 	bl	800e50c <USBD_LL_StallEP>
 800d1f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d1f8:	e020      	b.n	800d23c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d1fa:	6839      	ldr	r1, [r7, #0]
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f000 fca4 	bl	800db4a <USBD_CtlError>
              break;
 800d202:	e01b      	b.n	800d23c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	885b      	ldrh	r3, [r3, #2]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d10e      	bne.n	800d22a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d20c:	7bbb      	ldrb	r3, [r7, #14]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d00b      	beq.n	800d22a <USBD_StdEPReq+0xfe>
 800d212:	7bbb      	ldrb	r3, [r7, #14]
 800d214:	2b80      	cmp	r3, #128	@ 0x80
 800d216:	d008      	beq.n	800d22a <USBD_StdEPReq+0xfe>
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	88db      	ldrh	r3, [r3, #6]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d104      	bne.n	800d22a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d220:	7bbb      	ldrb	r3, [r7, #14]
 800d222:	4619      	mov	r1, r3
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	f001 f971 	bl	800e50c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f000 fd64 	bl	800dcf8 <USBD_CtlSendStatus>

              break;
 800d230:	e004      	b.n	800d23c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d232:	6839      	ldr	r1, [r7, #0]
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f000 fc88 	bl	800db4a <USBD_CtlError>
              break;
 800d23a:	bf00      	nop
          }
          break;
 800d23c:	e107      	b.n	800d44e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d244:	b2db      	uxtb	r3, r3
 800d246:	2b02      	cmp	r3, #2
 800d248:	d002      	beq.n	800d250 <USBD_StdEPReq+0x124>
 800d24a:	2b03      	cmp	r3, #3
 800d24c:	d016      	beq.n	800d27c <USBD_StdEPReq+0x150>
 800d24e:	e04b      	b.n	800d2e8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d250:	7bbb      	ldrb	r3, [r7, #14]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d00d      	beq.n	800d272 <USBD_StdEPReq+0x146>
 800d256:	7bbb      	ldrb	r3, [r7, #14]
 800d258:	2b80      	cmp	r3, #128	@ 0x80
 800d25a:	d00a      	beq.n	800d272 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d25c:	7bbb      	ldrb	r3, [r7, #14]
 800d25e:	4619      	mov	r1, r3
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f001 f953 	bl	800e50c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d266:	2180      	movs	r1, #128	@ 0x80
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f001 f94f 	bl	800e50c <USBD_LL_StallEP>
 800d26e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d270:	e040      	b.n	800d2f4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d272:	6839      	ldr	r1, [r7, #0]
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	f000 fc68 	bl	800db4a <USBD_CtlError>
              break;
 800d27a:	e03b      	b.n	800d2f4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	885b      	ldrh	r3, [r3, #2]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d136      	bne.n	800d2f2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d284:	7bbb      	ldrb	r3, [r7, #14]
 800d286:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d004      	beq.n	800d298 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d28e:	7bbb      	ldrb	r3, [r7, #14]
 800d290:	4619      	mov	r1, r3
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f001 f959 	bl	800e54a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f000 fd2d 	bl	800dcf8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d29e:	7bbb      	ldrb	r3, [r7, #14]
 800d2a0:	4619      	mov	r1, r3
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	f7ff fde4 	bl	800ce70 <USBD_CoreFindEP>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d2ac:	7b7b      	ldrb	r3, [r7, #13]
 800d2ae:	2bff      	cmp	r3, #255	@ 0xff
 800d2b0:	d01f      	beq.n	800d2f2 <USBD_StdEPReq+0x1c6>
 800d2b2:	7b7b      	ldrb	r3, [r7, #13]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d11c      	bne.n	800d2f2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d2b8:	7b7a      	ldrb	r2, [r7, #13]
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d2c0:	7b7a      	ldrb	r2, [r7, #13]
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	32ae      	adds	r2, #174	@ 0xae
 800d2c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2ca:	689b      	ldr	r3, [r3, #8]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d010      	beq.n	800d2f2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d2d0:	7b7a      	ldrb	r2, [r7, #13]
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	32ae      	adds	r2, #174	@ 0xae
 800d2d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2da:	689b      	ldr	r3, [r3, #8]
 800d2dc:	6839      	ldr	r1, [r7, #0]
 800d2de:	6878      	ldr	r0, [r7, #4]
 800d2e0:	4798      	blx	r3
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d2e6:	e004      	b.n	800d2f2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d2e8:	6839      	ldr	r1, [r7, #0]
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f000 fc2d 	bl	800db4a <USBD_CtlError>
              break;
 800d2f0:	e000      	b.n	800d2f4 <USBD_StdEPReq+0x1c8>
              break;
 800d2f2:	bf00      	nop
          }
          break;
 800d2f4:	e0ab      	b.n	800d44e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d2fc:	b2db      	uxtb	r3, r3
 800d2fe:	2b02      	cmp	r3, #2
 800d300:	d002      	beq.n	800d308 <USBD_StdEPReq+0x1dc>
 800d302:	2b03      	cmp	r3, #3
 800d304:	d032      	beq.n	800d36c <USBD_StdEPReq+0x240>
 800d306:	e097      	b.n	800d438 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d308:	7bbb      	ldrb	r3, [r7, #14]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d007      	beq.n	800d31e <USBD_StdEPReq+0x1f2>
 800d30e:	7bbb      	ldrb	r3, [r7, #14]
 800d310:	2b80      	cmp	r3, #128	@ 0x80
 800d312:	d004      	beq.n	800d31e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d314:	6839      	ldr	r1, [r7, #0]
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f000 fc17 	bl	800db4a <USBD_CtlError>
                break;
 800d31c:	e091      	b.n	800d442 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d31e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d322:	2b00      	cmp	r3, #0
 800d324:	da0b      	bge.n	800d33e <USBD_StdEPReq+0x212>
 800d326:	7bbb      	ldrb	r3, [r7, #14]
 800d328:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d32c:	4613      	mov	r3, r2
 800d32e:	009b      	lsls	r3, r3, #2
 800d330:	4413      	add	r3, r2
 800d332:	009b      	lsls	r3, r3, #2
 800d334:	3310      	adds	r3, #16
 800d336:	687a      	ldr	r2, [r7, #4]
 800d338:	4413      	add	r3, r2
 800d33a:	3304      	adds	r3, #4
 800d33c:	e00b      	b.n	800d356 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d33e:	7bbb      	ldrb	r3, [r7, #14]
 800d340:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d344:	4613      	mov	r3, r2
 800d346:	009b      	lsls	r3, r3, #2
 800d348:	4413      	add	r3, r2
 800d34a:	009b      	lsls	r3, r3, #2
 800d34c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d350:	687a      	ldr	r2, [r7, #4]
 800d352:	4413      	add	r3, r2
 800d354:	3304      	adds	r3, #4
 800d356:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	2200      	movs	r2, #0
 800d35c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	2202      	movs	r2, #2
 800d362:	4619      	mov	r1, r3
 800d364:	6878      	ldr	r0, [r7, #4]
 800d366:	f000 fc6d 	bl	800dc44 <USBD_CtlSendData>
              break;
 800d36a:	e06a      	b.n	800d442 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d36c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d370:	2b00      	cmp	r3, #0
 800d372:	da11      	bge.n	800d398 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d374:	7bbb      	ldrb	r3, [r7, #14]
 800d376:	f003 020f 	and.w	r2, r3, #15
 800d37a:	6879      	ldr	r1, [r7, #4]
 800d37c:	4613      	mov	r3, r2
 800d37e:	009b      	lsls	r3, r3, #2
 800d380:	4413      	add	r3, r2
 800d382:	009b      	lsls	r3, r3, #2
 800d384:	440b      	add	r3, r1
 800d386:	3324      	adds	r3, #36	@ 0x24
 800d388:	881b      	ldrh	r3, [r3, #0]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d117      	bne.n	800d3be <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d38e:	6839      	ldr	r1, [r7, #0]
 800d390:	6878      	ldr	r0, [r7, #4]
 800d392:	f000 fbda 	bl	800db4a <USBD_CtlError>
                  break;
 800d396:	e054      	b.n	800d442 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d398:	7bbb      	ldrb	r3, [r7, #14]
 800d39a:	f003 020f 	and.w	r2, r3, #15
 800d39e:	6879      	ldr	r1, [r7, #4]
 800d3a0:	4613      	mov	r3, r2
 800d3a2:	009b      	lsls	r3, r3, #2
 800d3a4:	4413      	add	r3, r2
 800d3a6:	009b      	lsls	r3, r3, #2
 800d3a8:	440b      	add	r3, r1
 800d3aa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d3ae:	881b      	ldrh	r3, [r3, #0]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d104      	bne.n	800d3be <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d3b4:	6839      	ldr	r1, [r7, #0]
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f000 fbc7 	bl	800db4a <USBD_CtlError>
                  break;
 800d3bc:	e041      	b.n	800d442 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d3be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	da0b      	bge.n	800d3de <USBD_StdEPReq+0x2b2>
 800d3c6:	7bbb      	ldrb	r3, [r7, #14]
 800d3c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d3cc:	4613      	mov	r3, r2
 800d3ce:	009b      	lsls	r3, r3, #2
 800d3d0:	4413      	add	r3, r2
 800d3d2:	009b      	lsls	r3, r3, #2
 800d3d4:	3310      	adds	r3, #16
 800d3d6:	687a      	ldr	r2, [r7, #4]
 800d3d8:	4413      	add	r3, r2
 800d3da:	3304      	adds	r3, #4
 800d3dc:	e00b      	b.n	800d3f6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d3de:	7bbb      	ldrb	r3, [r7, #14]
 800d3e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d3e4:	4613      	mov	r3, r2
 800d3e6:	009b      	lsls	r3, r3, #2
 800d3e8:	4413      	add	r3, r2
 800d3ea:	009b      	lsls	r3, r3, #2
 800d3ec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d3f0:	687a      	ldr	r2, [r7, #4]
 800d3f2:	4413      	add	r3, r2
 800d3f4:	3304      	adds	r3, #4
 800d3f6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d3f8:	7bbb      	ldrb	r3, [r7, #14]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d002      	beq.n	800d404 <USBD_StdEPReq+0x2d8>
 800d3fe:	7bbb      	ldrb	r3, [r7, #14]
 800d400:	2b80      	cmp	r3, #128	@ 0x80
 800d402:	d103      	bne.n	800d40c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	2200      	movs	r2, #0
 800d408:	601a      	str	r2, [r3, #0]
 800d40a:	e00e      	b.n	800d42a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d40c:	7bbb      	ldrb	r3, [r7, #14]
 800d40e:	4619      	mov	r1, r3
 800d410:	6878      	ldr	r0, [r7, #4]
 800d412:	f001 f8b9 	bl	800e588 <USBD_LL_IsStallEP>
 800d416:	4603      	mov	r3, r0
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d003      	beq.n	800d424 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	2201      	movs	r2, #1
 800d420:	601a      	str	r2, [r3, #0]
 800d422:	e002      	b.n	800d42a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	2200      	movs	r2, #0
 800d428:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d42a:	68bb      	ldr	r3, [r7, #8]
 800d42c:	2202      	movs	r2, #2
 800d42e:	4619      	mov	r1, r3
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f000 fc07 	bl	800dc44 <USBD_CtlSendData>
              break;
 800d436:	e004      	b.n	800d442 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d438:	6839      	ldr	r1, [r7, #0]
 800d43a:	6878      	ldr	r0, [r7, #4]
 800d43c:	f000 fb85 	bl	800db4a <USBD_CtlError>
              break;
 800d440:	bf00      	nop
          }
          break;
 800d442:	e004      	b.n	800d44e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d444:	6839      	ldr	r1, [r7, #0]
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f000 fb7f 	bl	800db4a <USBD_CtlError>
          break;
 800d44c:	bf00      	nop
      }
      break;
 800d44e:	e005      	b.n	800d45c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d450:	6839      	ldr	r1, [r7, #0]
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f000 fb79 	bl	800db4a <USBD_CtlError>
      break;
 800d458:	e000      	b.n	800d45c <USBD_StdEPReq+0x330>
      break;
 800d45a:	bf00      	nop
  }

  return ret;
 800d45c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d45e:	4618      	mov	r0, r3
 800d460:	3710      	adds	r7, #16
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}
	...

0800d468 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b084      	sub	sp, #16
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
 800d470:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d472:	2300      	movs	r3, #0
 800d474:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d476:	2300      	movs	r3, #0
 800d478:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d47a:	2300      	movs	r3, #0
 800d47c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	885b      	ldrh	r3, [r3, #2]
 800d482:	0a1b      	lsrs	r3, r3, #8
 800d484:	b29b      	uxth	r3, r3
 800d486:	3b01      	subs	r3, #1
 800d488:	2b0e      	cmp	r3, #14
 800d48a:	f200 8152 	bhi.w	800d732 <USBD_GetDescriptor+0x2ca>
 800d48e:	a201      	add	r2, pc, #4	@ (adr r2, 800d494 <USBD_GetDescriptor+0x2c>)
 800d490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d494:	0800d505 	.word	0x0800d505
 800d498:	0800d51d 	.word	0x0800d51d
 800d49c:	0800d55d 	.word	0x0800d55d
 800d4a0:	0800d733 	.word	0x0800d733
 800d4a4:	0800d733 	.word	0x0800d733
 800d4a8:	0800d6d3 	.word	0x0800d6d3
 800d4ac:	0800d6ff 	.word	0x0800d6ff
 800d4b0:	0800d733 	.word	0x0800d733
 800d4b4:	0800d733 	.word	0x0800d733
 800d4b8:	0800d733 	.word	0x0800d733
 800d4bc:	0800d733 	.word	0x0800d733
 800d4c0:	0800d733 	.word	0x0800d733
 800d4c4:	0800d733 	.word	0x0800d733
 800d4c8:	0800d733 	.word	0x0800d733
 800d4cc:	0800d4d1 	.word	0x0800d4d1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d4d6:	69db      	ldr	r3, [r3, #28]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d00b      	beq.n	800d4f4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d4e2:	69db      	ldr	r3, [r3, #28]
 800d4e4:	687a      	ldr	r2, [r7, #4]
 800d4e6:	7c12      	ldrb	r2, [r2, #16]
 800d4e8:	f107 0108 	add.w	r1, r7, #8
 800d4ec:	4610      	mov	r0, r2
 800d4ee:	4798      	blx	r3
 800d4f0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d4f2:	e126      	b.n	800d742 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d4f4:	6839      	ldr	r1, [r7, #0]
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	f000 fb27 	bl	800db4a <USBD_CtlError>
        err++;
 800d4fc:	7afb      	ldrb	r3, [r7, #11]
 800d4fe:	3301      	adds	r3, #1
 800d500:	72fb      	strb	r3, [r7, #11]
      break;
 800d502:	e11e      	b.n	800d742 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	687a      	ldr	r2, [r7, #4]
 800d50e:	7c12      	ldrb	r2, [r2, #16]
 800d510:	f107 0108 	add.w	r1, r7, #8
 800d514:	4610      	mov	r0, r2
 800d516:	4798      	blx	r3
 800d518:	60f8      	str	r0, [r7, #12]
      break;
 800d51a:	e112      	b.n	800d742 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	7c1b      	ldrb	r3, [r3, #16]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d10d      	bne.n	800d540 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d52a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d52c:	f107 0208 	add.w	r2, r7, #8
 800d530:	4610      	mov	r0, r2
 800d532:	4798      	blx	r3
 800d534:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	3301      	adds	r3, #1
 800d53a:	2202      	movs	r2, #2
 800d53c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d53e:	e100      	b.n	800d742 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d548:	f107 0208 	add.w	r2, r7, #8
 800d54c:	4610      	mov	r0, r2
 800d54e:	4798      	blx	r3
 800d550:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	3301      	adds	r3, #1
 800d556:	2202      	movs	r2, #2
 800d558:	701a      	strb	r2, [r3, #0]
      break;
 800d55a:	e0f2      	b.n	800d742 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	885b      	ldrh	r3, [r3, #2]
 800d560:	b2db      	uxtb	r3, r3
 800d562:	2b05      	cmp	r3, #5
 800d564:	f200 80ac 	bhi.w	800d6c0 <USBD_GetDescriptor+0x258>
 800d568:	a201      	add	r2, pc, #4	@ (adr r2, 800d570 <USBD_GetDescriptor+0x108>)
 800d56a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d56e:	bf00      	nop
 800d570:	0800d589 	.word	0x0800d589
 800d574:	0800d5bd 	.word	0x0800d5bd
 800d578:	0800d5f1 	.word	0x0800d5f1
 800d57c:	0800d625 	.word	0x0800d625
 800d580:	0800d659 	.word	0x0800d659
 800d584:	0800d68d 	.word	0x0800d68d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d58e:	685b      	ldr	r3, [r3, #4]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d00b      	beq.n	800d5ac <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d59a:	685b      	ldr	r3, [r3, #4]
 800d59c:	687a      	ldr	r2, [r7, #4]
 800d59e:	7c12      	ldrb	r2, [r2, #16]
 800d5a0:	f107 0108 	add.w	r1, r7, #8
 800d5a4:	4610      	mov	r0, r2
 800d5a6:	4798      	blx	r3
 800d5a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d5aa:	e091      	b.n	800d6d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d5ac:	6839      	ldr	r1, [r7, #0]
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f000 facb 	bl	800db4a <USBD_CtlError>
            err++;
 800d5b4:	7afb      	ldrb	r3, [r7, #11]
 800d5b6:	3301      	adds	r3, #1
 800d5b8:	72fb      	strb	r3, [r7, #11]
          break;
 800d5ba:	e089      	b.n	800d6d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5c2:	689b      	ldr	r3, [r3, #8]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d00b      	beq.n	800d5e0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5ce:	689b      	ldr	r3, [r3, #8]
 800d5d0:	687a      	ldr	r2, [r7, #4]
 800d5d2:	7c12      	ldrb	r2, [r2, #16]
 800d5d4:	f107 0108 	add.w	r1, r7, #8
 800d5d8:	4610      	mov	r0, r2
 800d5da:	4798      	blx	r3
 800d5dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d5de:	e077      	b.n	800d6d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d5e0:	6839      	ldr	r1, [r7, #0]
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f000 fab1 	bl	800db4a <USBD_CtlError>
            err++;
 800d5e8:	7afb      	ldrb	r3, [r7, #11]
 800d5ea:	3301      	adds	r3, #1
 800d5ec:	72fb      	strb	r3, [r7, #11]
          break;
 800d5ee:	e06f      	b.n	800d6d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5f6:	68db      	ldr	r3, [r3, #12]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d00b      	beq.n	800d614 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d602:	68db      	ldr	r3, [r3, #12]
 800d604:	687a      	ldr	r2, [r7, #4]
 800d606:	7c12      	ldrb	r2, [r2, #16]
 800d608:	f107 0108 	add.w	r1, r7, #8
 800d60c:	4610      	mov	r0, r2
 800d60e:	4798      	blx	r3
 800d610:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d612:	e05d      	b.n	800d6d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d614:	6839      	ldr	r1, [r7, #0]
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	f000 fa97 	bl	800db4a <USBD_CtlError>
            err++;
 800d61c:	7afb      	ldrb	r3, [r7, #11]
 800d61e:	3301      	adds	r3, #1
 800d620:	72fb      	strb	r3, [r7, #11]
          break;
 800d622:	e055      	b.n	800d6d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d62a:	691b      	ldr	r3, [r3, #16]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d00b      	beq.n	800d648 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d636:	691b      	ldr	r3, [r3, #16]
 800d638:	687a      	ldr	r2, [r7, #4]
 800d63a:	7c12      	ldrb	r2, [r2, #16]
 800d63c:	f107 0108 	add.w	r1, r7, #8
 800d640:	4610      	mov	r0, r2
 800d642:	4798      	blx	r3
 800d644:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d646:	e043      	b.n	800d6d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d648:	6839      	ldr	r1, [r7, #0]
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f000 fa7d 	bl	800db4a <USBD_CtlError>
            err++;
 800d650:	7afb      	ldrb	r3, [r7, #11]
 800d652:	3301      	adds	r3, #1
 800d654:	72fb      	strb	r3, [r7, #11]
          break;
 800d656:	e03b      	b.n	800d6d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d65e:	695b      	ldr	r3, [r3, #20]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d00b      	beq.n	800d67c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d66a:	695b      	ldr	r3, [r3, #20]
 800d66c:	687a      	ldr	r2, [r7, #4]
 800d66e:	7c12      	ldrb	r2, [r2, #16]
 800d670:	f107 0108 	add.w	r1, r7, #8
 800d674:	4610      	mov	r0, r2
 800d676:	4798      	blx	r3
 800d678:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d67a:	e029      	b.n	800d6d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d67c:	6839      	ldr	r1, [r7, #0]
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f000 fa63 	bl	800db4a <USBD_CtlError>
            err++;
 800d684:	7afb      	ldrb	r3, [r7, #11]
 800d686:	3301      	adds	r3, #1
 800d688:	72fb      	strb	r3, [r7, #11]
          break;
 800d68a:	e021      	b.n	800d6d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d692:	699b      	ldr	r3, [r3, #24]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d00b      	beq.n	800d6b0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d69e:	699b      	ldr	r3, [r3, #24]
 800d6a0:	687a      	ldr	r2, [r7, #4]
 800d6a2:	7c12      	ldrb	r2, [r2, #16]
 800d6a4:	f107 0108 	add.w	r1, r7, #8
 800d6a8:	4610      	mov	r0, r2
 800d6aa:	4798      	blx	r3
 800d6ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d6ae:	e00f      	b.n	800d6d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d6b0:	6839      	ldr	r1, [r7, #0]
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f000 fa49 	bl	800db4a <USBD_CtlError>
            err++;
 800d6b8:	7afb      	ldrb	r3, [r7, #11]
 800d6ba:	3301      	adds	r3, #1
 800d6bc:	72fb      	strb	r3, [r7, #11]
          break;
 800d6be:	e007      	b.n	800d6d0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d6c0:	6839      	ldr	r1, [r7, #0]
 800d6c2:	6878      	ldr	r0, [r7, #4]
 800d6c4:	f000 fa41 	bl	800db4a <USBD_CtlError>
          err++;
 800d6c8:	7afb      	ldrb	r3, [r7, #11]
 800d6ca:	3301      	adds	r3, #1
 800d6cc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d6ce:	bf00      	nop
      }
      break;
 800d6d0:	e037      	b.n	800d742 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	7c1b      	ldrb	r3, [r3, #16]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d109      	bne.n	800d6ee <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d6e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d6e2:	f107 0208 	add.w	r2, r7, #8
 800d6e6:	4610      	mov	r0, r2
 800d6e8:	4798      	blx	r3
 800d6ea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d6ec:	e029      	b.n	800d742 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d6ee:	6839      	ldr	r1, [r7, #0]
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	f000 fa2a 	bl	800db4a <USBD_CtlError>
        err++;
 800d6f6:	7afb      	ldrb	r3, [r7, #11]
 800d6f8:	3301      	adds	r3, #1
 800d6fa:	72fb      	strb	r3, [r7, #11]
      break;
 800d6fc:	e021      	b.n	800d742 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	7c1b      	ldrb	r3, [r3, #16]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d10d      	bne.n	800d722 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d70c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d70e:	f107 0208 	add.w	r2, r7, #8
 800d712:	4610      	mov	r0, r2
 800d714:	4798      	blx	r3
 800d716:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	3301      	adds	r3, #1
 800d71c:	2207      	movs	r2, #7
 800d71e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d720:	e00f      	b.n	800d742 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d722:	6839      	ldr	r1, [r7, #0]
 800d724:	6878      	ldr	r0, [r7, #4]
 800d726:	f000 fa10 	bl	800db4a <USBD_CtlError>
        err++;
 800d72a:	7afb      	ldrb	r3, [r7, #11]
 800d72c:	3301      	adds	r3, #1
 800d72e:	72fb      	strb	r3, [r7, #11]
      break;
 800d730:	e007      	b.n	800d742 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d732:	6839      	ldr	r1, [r7, #0]
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f000 fa08 	bl	800db4a <USBD_CtlError>
      err++;
 800d73a:	7afb      	ldrb	r3, [r7, #11]
 800d73c:	3301      	adds	r3, #1
 800d73e:	72fb      	strb	r3, [r7, #11]
      break;
 800d740:	bf00      	nop
  }

  if (err != 0U)
 800d742:	7afb      	ldrb	r3, [r7, #11]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d11e      	bne.n	800d786 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d748:	683b      	ldr	r3, [r7, #0]
 800d74a:	88db      	ldrh	r3, [r3, #6]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d016      	beq.n	800d77e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d750:	893b      	ldrh	r3, [r7, #8]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d00e      	beq.n	800d774 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	88da      	ldrh	r2, [r3, #6]
 800d75a:	893b      	ldrh	r3, [r7, #8]
 800d75c:	4293      	cmp	r3, r2
 800d75e:	bf28      	it	cs
 800d760:	4613      	movcs	r3, r2
 800d762:	b29b      	uxth	r3, r3
 800d764:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d766:	893b      	ldrh	r3, [r7, #8]
 800d768:	461a      	mov	r2, r3
 800d76a:	68f9      	ldr	r1, [r7, #12]
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	f000 fa69 	bl	800dc44 <USBD_CtlSendData>
 800d772:	e009      	b.n	800d788 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d774:	6839      	ldr	r1, [r7, #0]
 800d776:	6878      	ldr	r0, [r7, #4]
 800d778:	f000 f9e7 	bl	800db4a <USBD_CtlError>
 800d77c:	e004      	b.n	800d788 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d77e:	6878      	ldr	r0, [r7, #4]
 800d780:	f000 faba 	bl	800dcf8 <USBD_CtlSendStatus>
 800d784:	e000      	b.n	800d788 <USBD_GetDescriptor+0x320>
    return;
 800d786:	bf00      	nop
  }
}
 800d788:	3710      	adds	r7, #16
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}
 800d78e:	bf00      	nop

0800d790 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b084      	sub	sp, #16
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
 800d798:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	889b      	ldrh	r3, [r3, #4]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d131      	bne.n	800d806 <USBD_SetAddress+0x76>
 800d7a2:	683b      	ldr	r3, [r7, #0]
 800d7a4:	88db      	ldrh	r3, [r3, #6]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d12d      	bne.n	800d806 <USBD_SetAddress+0x76>
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	885b      	ldrh	r3, [r3, #2]
 800d7ae:	2b7f      	cmp	r3, #127	@ 0x7f
 800d7b0:	d829      	bhi.n	800d806 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	885b      	ldrh	r3, [r3, #2]
 800d7b6:	b2db      	uxtb	r3, r3
 800d7b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d7bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d7c4:	b2db      	uxtb	r3, r3
 800d7c6:	2b03      	cmp	r3, #3
 800d7c8:	d104      	bne.n	800d7d4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d7ca:	6839      	ldr	r1, [r7, #0]
 800d7cc:	6878      	ldr	r0, [r7, #4]
 800d7ce:	f000 f9bc 	bl	800db4a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7d2:	e01d      	b.n	800d810 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	7bfa      	ldrb	r2, [r7, #15]
 800d7d8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d7dc:	7bfb      	ldrb	r3, [r7, #15]
 800d7de:	4619      	mov	r1, r3
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f000 fefd 	bl	800e5e0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f000 fa86 	bl	800dcf8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d7ec:	7bfb      	ldrb	r3, [r7, #15]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d004      	beq.n	800d7fc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	2202      	movs	r2, #2
 800d7f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7fa:	e009      	b.n	800d810 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2201      	movs	r2, #1
 800d800:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d804:	e004      	b.n	800d810 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d806:	6839      	ldr	r1, [r7, #0]
 800d808:	6878      	ldr	r0, [r7, #4]
 800d80a:	f000 f99e 	bl	800db4a <USBD_CtlError>
  }
}
 800d80e:	bf00      	nop
 800d810:	bf00      	nop
 800d812:	3710      	adds	r7, #16
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}

0800d818 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b084      	sub	sp, #16
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
 800d820:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d822:	2300      	movs	r3, #0
 800d824:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	885b      	ldrh	r3, [r3, #2]
 800d82a:	b2da      	uxtb	r2, r3
 800d82c:	4b4e      	ldr	r3, [pc, #312]	@ (800d968 <USBD_SetConfig+0x150>)
 800d82e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d830:	4b4d      	ldr	r3, [pc, #308]	@ (800d968 <USBD_SetConfig+0x150>)
 800d832:	781b      	ldrb	r3, [r3, #0]
 800d834:	2b01      	cmp	r3, #1
 800d836:	d905      	bls.n	800d844 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d838:	6839      	ldr	r1, [r7, #0]
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f000 f985 	bl	800db4a <USBD_CtlError>
    return USBD_FAIL;
 800d840:	2303      	movs	r3, #3
 800d842:	e08c      	b.n	800d95e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d84a:	b2db      	uxtb	r3, r3
 800d84c:	2b02      	cmp	r3, #2
 800d84e:	d002      	beq.n	800d856 <USBD_SetConfig+0x3e>
 800d850:	2b03      	cmp	r3, #3
 800d852:	d029      	beq.n	800d8a8 <USBD_SetConfig+0x90>
 800d854:	e075      	b.n	800d942 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d856:	4b44      	ldr	r3, [pc, #272]	@ (800d968 <USBD_SetConfig+0x150>)
 800d858:	781b      	ldrb	r3, [r3, #0]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d020      	beq.n	800d8a0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d85e:	4b42      	ldr	r3, [pc, #264]	@ (800d968 <USBD_SetConfig+0x150>)
 800d860:	781b      	ldrb	r3, [r3, #0]
 800d862:	461a      	mov	r2, r3
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d868:	4b3f      	ldr	r3, [pc, #252]	@ (800d968 <USBD_SetConfig+0x150>)
 800d86a:	781b      	ldrb	r3, [r3, #0]
 800d86c:	4619      	mov	r1, r3
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f7ff f84b 	bl	800c90a <USBD_SetClassConfig>
 800d874:	4603      	mov	r3, r0
 800d876:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d878:	7bfb      	ldrb	r3, [r7, #15]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d008      	beq.n	800d890 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d87e:	6839      	ldr	r1, [r7, #0]
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f000 f962 	bl	800db4a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2202      	movs	r2, #2
 800d88a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d88e:	e065      	b.n	800d95c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f000 fa31 	bl	800dcf8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2203      	movs	r2, #3
 800d89a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d89e:	e05d      	b.n	800d95c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f000 fa29 	bl	800dcf8 <USBD_CtlSendStatus>
      break;
 800d8a6:	e059      	b.n	800d95c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d8a8:	4b2f      	ldr	r3, [pc, #188]	@ (800d968 <USBD_SetConfig+0x150>)
 800d8aa:	781b      	ldrb	r3, [r3, #0]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d112      	bne.n	800d8d6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2202      	movs	r2, #2
 800d8b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d8b8:	4b2b      	ldr	r3, [pc, #172]	@ (800d968 <USBD_SetConfig+0x150>)
 800d8ba:	781b      	ldrb	r3, [r3, #0]
 800d8bc:	461a      	mov	r2, r3
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d8c2:	4b29      	ldr	r3, [pc, #164]	@ (800d968 <USBD_SetConfig+0x150>)
 800d8c4:	781b      	ldrb	r3, [r3, #0]
 800d8c6:	4619      	mov	r1, r3
 800d8c8:	6878      	ldr	r0, [r7, #4]
 800d8ca:	f7ff f83a 	bl	800c942 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d8ce:	6878      	ldr	r0, [r7, #4]
 800d8d0:	f000 fa12 	bl	800dcf8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d8d4:	e042      	b.n	800d95c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d8d6:	4b24      	ldr	r3, [pc, #144]	@ (800d968 <USBD_SetConfig+0x150>)
 800d8d8:	781b      	ldrb	r3, [r3, #0]
 800d8da:	461a      	mov	r2, r3
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	685b      	ldr	r3, [r3, #4]
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	d02a      	beq.n	800d93a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	685b      	ldr	r3, [r3, #4]
 800d8e8:	b2db      	uxtb	r3, r3
 800d8ea:	4619      	mov	r1, r3
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f7ff f828 	bl	800c942 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d8f2:	4b1d      	ldr	r3, [pc, #116]	@ (800d968 <USBD_SetConfig+0x150>)
 800d8f4:	781b      	ldrb	r3, [r3, #0]
 800d8f6:	461a      	mov	r2, r3
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d8fc:	4b1a      	ldr	r3, [pc, #104]	@ (800d968 <USBD_SetConfig+0x150>)
 800d8fe:	781b      	ldrb	r3, [r3, #0]
 800d900:	4619      	mov	r1, r3
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f7ff f801 	bl	800c90a <USBD_SetClassConfig>
 800d908:	4603      	mov	r3, r0
 800d90a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d90c:	7bfb      	ldrb	r3, [r7, #15]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d00f      	beq.n	800d932 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d912:	6839      	ldr	r1, [r7, #0]
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f000 f918 	bl	800db4a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	685b      	ldr	r3, [r3, #4]
 800d91e:	b2db      	uxtb	r3, r3
 800d920:	4619      	mov	r1, r3
 800d922:	6878      	ldr	r0, [r7, #4]
 800d924:	f7ff f80d 	bl	800c942 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2202      	movs	r2, #2
 800d92c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d930:	e014      	b.n	800d95c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	f000 f9e0 	bl	800dcf8 <USBD_CtlSendStatus>
      break;
 800d938:	e010      	b.n	800d95c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	f000 f9dc 	bl	800dcf8 <USBD_CtlSendStatus>
      break;
 800d940:	e00c      	b.n	800d95c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d942:	6839      	ldr	r1, [r7, #0]
 800d944:	6878      	ldr	r0, [r7, #4]
 800d946:	f000 f900 	bl	800db4a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d94a:	4b07      	ldr	r3, [pc, #28]	@ (800d968 <USBD_SetConfig+0x150>)
 800d94c:	781b      	ldrb	r3, [r3, #0]
 800d94e:	4619      	mov	r1, r3
 800d950:	6878      	ldr	r0, [r7, #4]
 800d952:	f7fe fff6 	bl	800c942 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d956:	2303      	movs	r3, #3
 800d958:	73fb      	strb	r3, [r7, #15]
      break;
 800d95a:	bf00      	nop
  }

  return ret;
 800d95c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d95e:	4618      	mov	r0, r3
 800d960:	3710      	adds	r7, #16
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}
 800d966:	bf00      	nop
 800d968:	20000730 	.word	0x20000730

0800d96c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b082      	sub	sp, #8
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
 800d974:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	88db      	ldrh	r3, [r3, #6]
 800d97a:	2b01      	cmp	r3, #1
 800d97c:	d004      	beq.n	800d988 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d97e:	6839      	ldr	r1, [r7, #0]
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	f000 f8e2 	bl	800db4a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d986:	e023      	b.n	800d9d0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d98e:	b2db      	uxtb	r3, r3
 800d990:	2b02      	cmp	r3, #2
 800d992:	dc02      	bgt.n	800d99a <USBD_GetConfig+0x2e>
 800d994:	2b00      	cmp	r3, #0
 800d996:	dc03      	bgt.n	800d9a0 <USBD_GetConfig+0x34>
 800d998:	e015      	b.n	800d9c6 <USBD_GetConfig+0x5a>
 800d99a:	2b03      	cmp	r3, #3
 800d99c:	d00b      	beq.n	800d9b6 <USBD_GetConfig+0x4a>
 800d99e:	e012      	b.n	800d9c6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	3308      	adds	r3, #8
 800d9aa:	2201      	movs	r2, #1
 800d9ac:	4619      	mov	r1, r3
 800d9ae:	6878      	ldr	r0, [r7, #4]
 800d9b0:	f000 f948 	bl	800dc44 <USBD_CtlSendData>
        break;
 800d9b4:	e00c      	b.n	800d9d0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	3304      	adds	r3, #4
 800d9ba:	2201      	movs	r2, #1
 800d9bc:	4619      	mov	r1, r3
 800d9be:	6878      	ldr	r0, [r7, #4]
 800d9c0:	f000 f940 	bl	800dc44 <USBD_CtlSendData>
        break;
 800d9c4:	e004      	b.n	800d9d0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d9c6:	6839      	ldr	r1, [r7, #0]
 800d9c8:	6878      	ldr	r0, [r7, #4]
 800d9ca:	f000 f8be 	bl	800db4a <USBD_CtlError>
        break;
 800d9ce:	bf00      	nop
}
 800d9d0:	bf00      	nop
 800d9d2:	3708      	adds	r7, #8
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}

0800d9d8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b082      	sub	sp, #8
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
 800d9e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d9e8:	b2db      	uxtb	r3, r3
 800d9ea:	3b01      	subs	r3, #1
 800d9ec:	2b02      	cmp	r3, #2
 800d9ee:	d81e      	bhi.n	800da2e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	88db      	ldrh	r3, [r3, #6]
 800d9f4:	2b02      	cmp	r3, #2
 800d9f6:	d004      	beq.n	800da02 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d9f8:	6839      	ldr	r1, [r7, #0]
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f000 f8a5 	bl	800db4a <USBD_CtlError>
        break;
 800da00:	e01a      	b.n	800da38 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2201      	movs	r2, #1
 800da06:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d005      	beq.n	800da1e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	68db      	ldr	r3, [r3, #12]
 800da16:	f043 0202 	orr.w	r2, r3, #2
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	330c      	adds	r3, #12
 800da22:	2202      	movs	r2, #2
 800da24:	4619      	mov	r1, r3
 800da26:	6878      	ldr	r0, [r7, #4]
 800da28:	f000 f90c 	bl	800dc44 <USBD_CtlSendData>
      break;
 800da2c:	e004      	b.n	800da38 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800da2e:	6839      	ldr	r1, [r7, #0]
 800da30:	6878      	ldr	r0, [r7, #4]
 800da32:	f000 f88a 	bl	800db4a <USBD_CtlError>
      break;
 800da36:	bf00      	nop
  }
}
 800da38:	bf00      	nop
 800da3a:	3708      	adds	r7, #8
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}

0800da40 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b082      	sub	sp, #8
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
 800da48:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	885b      	ldrh	r3, [r3, #2]
 800da4e:	2b01      	cmp	r3, #1
 800da50:	d107      	bne.n	800da62 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	2201      	movs	r2, #1
 800da56:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	f000 f94c 	bl	800dcf8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800da60:	e013      	b.n	800da8a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	885b      	ldrh	r3, [r3, #2]
 800da66:	2b02      	cmp	r3, #2
 800da68:	d10b      	bne.n	800da82 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	889b      	ldrh	r3, [r3, #4]
 800da6e:	0a1b      	lsrs	r3, r3, #8
 800da70:	b29b      	uxth	r3, r3
 800da72:	b2da      	uxtb	r2, r3
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800da7a:	6878      	ldr	r0, [r7, #4]
 800da7c:	f000 f93c 	bl	800dcf8 <USBD_CtlSendStatus>
}
 800da80:	e003      	b.n	800da8a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800da82:	6839      	ldr	r1, [r7, #0]
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f000 f860 	bl	800db4a <USBD_CtlError>
}
 800da8a:	bf00      	nop
 800da8c:	3708      	adds	r7, #8
 800da8e:	46bd      	mov	sp, r7
 800da90:	bd80      	pop	{r7, pc}

0800da92 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da92:	b580      	push	{r7, lr}
 800da94:	b082      	sub	sp, #8
 800da96:	af00      	add	r7, sp, #0
 800da98:	6078      	str	r0, [r7, #4]
 800da9a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800daa2:	b2db      	uxtb	r3, r3
 800daa4:	3b01      	subs	r3, #1
 800daa6:	2b02      	cmp	r3, #2
 800daa8:	d80b      	bhi.n	800dac2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	885b      	ldrh	r3, [r3, #2]
 800daae:	2b01      	cmp	r3, #1
 800dab0:	d10c      	bne.n	800dacc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	2200      	movs	r2, #0
 800dab6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	f000 f91c 	bl	800dcf8 <USBD_CtlSendStatus>
      }
      break;
 800dac0:	e004      	b.n	800dacc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800dac2:	6839      	ldr	r1, [r7, #0]
 800dac4:	6878      	ldr	r0, [r7, #4]
 800dac6:	f000 f840 	bl	800db4a <USBD_CtlError>
      break;
 800daca:	e000      	b.n	800dace <USBD_ClrFeature+0x3c>
      break;
 800dacc:	bf00      	nop
  }
}
 800dace:	bf00      	nop
 800dad0:	3708      	adds	r7, #8
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}

0800dad6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dad6:	b580      	push	{r7, lr}
 800dad8:	b084      	sub	sp, #16
 800dada:	af00      	add	r7, sp, #0
 800dadc:	6078      	str	r0, [r7, #4]
 800dade:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	781a      	ldrb	r2, [r3, #0]
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	3301      	adds	r3, #1
 800daf0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	781a      	ldrb	r2, [r3, #0]
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	3301      	adds	r3, #1
 800dafe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800db00:	68f8      	ldr	r0, [r7, #12]
 800db02:	f7ff fa16 	bl	800cf32 <SWAPBYTE>
 800db06:	4603      	mov	r3, r0
 800db08:	461a      	mov	r2, r3
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	3301      	adds	r3, #1
 800db12:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	3301      	adds	r3, #1
 800db18:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800db1a:	68f8      	ldr	r0, [r7, #12]
 800db1c:	f7ff fa09 	bl	800cf32 <SWAPBYTE>
 800db20:	4603      	mov	r3, r0
 800db22:	461a      	mov	r2, r3
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	3301      	adds	r3, #1
 800db2c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	3301      	adds	r3, #1
 800db32:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800db34:	68f8      	ldr	r0, [r7, #12]
 800db36:	f7ff f9fc 	bl	800cf32 <SWAPBYTE>
 800db3a:	4603      	mov	r3, r0
 800db3c:	461a      	mov	r2, r3
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	80da      	strh	r2, [r3, #6]
}
 800db42:	bf00      	nop
 800db44:	3710      	adds	r7, #16
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}

0800db4a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db4a:	b580      	push	{r7, lr}
 800db4c:	b082      	sub	sp, #8
 800db4e:	af00      	add	r7, sp, #0
 800db50:	6078      	str	r0, [r7, #4]
 800db52:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800db54:	2180      	movs	r1, #128	@ 0x80
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f000 fcd8 	bl	800e50c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800db5c:	2100      	movs	r1, #0
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f000 fcd4 	bl	800e50c <USBD_LL_StallEP>
}
 800db64:	bf00      	nop
 800db66:	3708      	adds	r7, #8
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd80      	pop	{r7, pc}

0800db6c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b086      	sub	sp, #24
 800db70:	af00      	add	r7, sp, #0
 800db72:	60f8      	str	r0, [r7, #12]
 800db74:	60b9      	str	r1, [r7, #8]
 800db76:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800db78:	2300      	movs	r3, #0
 800db7a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d042      	beq.n	800dc08 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800db86:	6938      	ldr	r0, [r7, #16]
 800db88:	f000 f842 	bl	800dc10 <USBD_GetLen>
 800db8c:	4603      	mov	r3, r0
 800db8e:	3301      	adds	r3, #1
 800db90:	005b      	lsls	r3, r3, #1
 800db92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800db96:	d808      	bhi.n	800dbaa <USBD_GetString+0x3e>
 800db98:	6938      	ldr	r0, [r7, #16]
 800db9a:	f000 f839 	bl	800dc10 <USBD_GetLen>
 800db9e:	4603      	mov	r3, r0
 800dba0:	3301      	adds	r3, #1
 800dba2:	b29b      	uxth	r3, r3
 800dba4:	005b      	lsls	r3, r3, #1
 800dba6:	b29a      	uxth	r2, r3
 800dba8:	e001      	b.n	800dbae <USBD_GetString+0x42>
 800dbaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800dbb2:	7dfb      	ldrb	r3, [r7, #23]
 800dbb4:	68ba      	ldr	r2, [r7, #8]
 800dbb6:	4413      	add	r3, r2
 800dbb8:	687a      	ldr	r2, [r7, #4]
 800dbba:	7812      	ldrb	r2, [r2, #0]
 800dbbc:	701a      	strb	r2, [r3, #0]
  idx++;
 800dbbe:	7dfb      	ldrb	r3, [r7, #23]
 800dbc0:	3301      	adds	r3, #1
 800dbc2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800dbc4:	7dfb      	ldrb	r3, [r7, #23]
 800dbc6:	68ba      	ldr	r2, [r7, #8]
 800dbc8:	4413      	add	r3, r2
 800dbca:	2203      	movs	r2, #3
 800dbcc:	701a      	strb	r2, [r3, #0]
  idx++;
 800dbce:	7dfb      	ldrb	r3, [r7, #23]
 800dbd0:	3301      	adds	r3, #1
 800dbd2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800dbd4:	e013      	b.n	800dbfe <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800dbd6:	7dfb      	ldrb	r3, [r7, #23]
 800dbd8:	68ba      	ldr	r2, [r7, #8]
 800dbda:	4413      	add	r3, r2
 800dbdc:	693a      	ldr	r2, [r7, #16]
 800dbde:	7812      	ldrb	r2, [r2, #0]
 800dbe0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800dbe2:	693b      	ldr	r3, [r7, #16]
 800dbe4:	3301      	adds	r3, #1
 800dbe6:	613b      	str	r3, [r7, #16]
    idx++;
 800dbe8:	7dfb      	ldrb	r3, [r7, #23]
 800dbea:	3301      	adds	r3, #1
 800dbec:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800dbee:	7dfb      	ldrb	r3, [r7, #23]
 800dbf0:	68ba      	ldr	r2, [r7, #8]
 800dbf2:	4413      	add	r3, r2
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	701a      	strb	r2, [r3, #0]
    idx++;
 800dbf8:	7dfb      	ldrb	r3, [r7, #23]
 800dbfa:	3301      	adds	r3, #1
 800dbfc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800dbfe:	693b      	ldr	r3, [r7, #16]
 800dc00:	781b      	ldrb	r3, [r3, #0]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d1e7      	bne.n	800dbd6 <USBD_GetString+0x6a>
 800dc06:	e000      	b.n	800dc0a <USBD_GetString+0x9e>
    return;
 800dc08:	bf00      	nop
  }
}
 800dc0a:	3718      	adds	r7, #24
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}

0800dc10 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800dc10:	b480      	push	{r7}
 800dc12:	b085      	sub	sp, #20
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800dc18:	2300      	movs	r3, #0
 800dc1a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800dc20:	e005      	b.n	800dc2e <USBD_GetLen+0x1e>
  {
    len++;
 800dc22:	7bfb      	ldrb	r3, [r7, #15]
 800dc24:	3301      	adds	r3, #1
 800dc26:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800dc28:	68bb      	ldr	r3, [r7, #8]
 800dc2a:	3301      	adds	r3, #1
 800dc2c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800dc2e:	68bb      	ldr	r3, [r7, #8]
 800dc30:	781b      	ldrb	r3, [r3, #0]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d1f5      	bne.n	800dc22 <USBD_GetLen+0x12>
  }

  return len;
 800dc36:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc38:	4618      	mov	r0, r3
 800dc3a:	3714      	adds	r7, #20
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc42:	4770      	bx	lr

0800dc44 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b084      	sub	sp, #16
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	60f8      	str	r0, [r7, #12]
 800dc4c:	60b9      	str	r1, [r7, #8]
 800dc4e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	2202      	movs	r2, #2
 800dc54:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	687a      	ldr	r2, [r7, #4]
 800dc5c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	687a      	ldr	r2, [r7, #4]
 800dc62:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	68ba      	ldr	r2, [r7, #8]
 800dc68:	2100      	movs	r1, #0
 800dc6a:	68f8      	ldr	r0, [r7, #12]
 800dc6c:	f000 fcd7 	bl	800e61e <USBD_LL_Transmit>

  return USBD_OK;
 800dc70:	2300      	movs	r3, #0
}
 800dc72:	4618      	mov	r0, r3
 800dc74:	3710      	adds	r7, #16
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}

0800dc7a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dc7a:	b580      	push	{r7, lr}
 800dc7c:	b084      	sub	sp, #16
 800dc7e:	af00      	add	r7, sp, #0
 800dc80:	60f8      	str	r0, [r7, #12]
 800dc82:	60b9      	str	r1, [r7, #8]
 800dc84:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	68ba      	ldr	r2, [r7, #8]
 800dc8a:	2100      	movs	r1, #0
 800dc8c:	68f8      	ldr	r0, [r7, #12]
 800dc8e:	f000 fcc6 	bl	800e61e <USBD_LL_Transmit>

  return USBD_OK;
 800dc92:	2300      	movs	r3, #0
}
 800dc94:	4618      	mov	r0, r3
 800dc96:	3710      	adds	r7, #16
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}

0800dc9c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b084      	sub	sp, #16
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	60f8      	str	r0, [r7, #12]
 800dca4:	60b9      	str	r1, [r7, #8]
 800dca6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	2203      	movs	r2, #3
 800dcac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	687a      	ldr	r2, [r7, #4]
 800dcb4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	687a      	ldr	r2, [r7, #4]
 800dcbc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	68ba      	ldr	r2, [r7, #8]
 800dcc4:	2100      	movs	r1, #0
 800dcc6:	68f8      	ldr	r0, [r7, #12]
 800dcc8:	f000 fcca 	bl	800e660 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dccc:	2300      	movs	r3, #0
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3710      	adds	r7, #16
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}

0800dcd6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800dcd6:	b580      	push	{r7, lr}
 800dcd8:	b084      	sub	sp, #16
 800dcda:	af00      	add	r7, sp, #0
 800dcdc:	60f8      	str	r0, [r7, #12]
 800dcde:	60b9      	str	r1, [r7, #8]
 800dce0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	68ba      	ldr	r2, [r7, #8]
 800dce6:	2100      	movs	r1, #0
 800dce8:	68f8      	ldr	r0, [r7, #12]
 800dcea:	f000 fcb9 	bl	800e660 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dcee:	2300      	movs	r3, #0
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3710      	adds	r7, #16
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}

0800dcf8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b082      	sub	sp, #8
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2204      	movs	r2, #4
 800dd04:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dd08:	2300      	movs	r3, #0
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	2100      	movs	r1, #0
 800dd0e:	6878      	ldr	r0, [r7, #4]
 800dd10:	f000 fc85 	bl	800e61e <USBD_LL_Transmit>

  return USBD_OK;
 800dd14:	2300      	movs	r3, #0
}
 800dd16:	4618      	mov	r0, r3
 800dd18:	3708      	adds	r7, #8
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}

0800dd1e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dd1e:	b580      	push	{r7, lr}
 800dd20:	b082      	sub	sp, #8
 800dd22:	af00      	add	r7, sp, #0
 800dd24:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2205      	movs	r2, #5
 800dd2a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dd2e:	2300      	movs	r3, #0
 800dd30:	2200      	movs	r2, #0
 800dd32:	2100      	movs	r1, #0
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	f000 fc93 	bl	800e660 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dd3a:	2300      	movs	r3, #0
}
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	3708      	adds	r7, #8
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}

0800dd44 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800dd48:	2200      	movs	r2, #0
 800dd4a:	4912      	ldr	r1, [pc, #72]	@ (800dd94 <MX_USB_Device_Init+0x50>)
 800dd4c:	4812      	ldr	r0, [pc, #72]	@ (800dd98 <MX_USB_Device_Init+0x54>)
 800dd4e:	f7fe fd43 	bl	800c7d8 <USBD_Init>
 800dd52:	4603      	mov	r3, r0
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d001      	beq.n	800dd5c <MX_USB_Device_Init+0x18>
    Error_Handler();
 800dd58:	f7f3 fb8f 	bl	800147a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800dd5c:	490f      	ldr	r1, [pc, #60]	@ (800dd9c <MX_USB_Device_Init+0x58>)
 800dd5e:	480e      	ldr	r0, [pc, #56]	@ (800dd98 <MX_USB_Device_Init+0x54>)
 800dd60:	f7fe fd78 	bl	800c854 <USBD_RegisterClass>
 800dd64:	4603      	mov	r3, r0
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d001      	beq.n	800dd6e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800dd6a:	f7f3 fb86 	bl	800147a <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800dd6e:	490c      	ldr	r1, [pc, #48]	@ (800dda0 <MX_USB_Device_Init+0x5c>)
 800dd70:	4809      	ldr	r0, [pc, #36]	@ (800dd98 <MX_USB_Device_Init+0x54>)
 800dd72:	f7fe fc61 	bl	800c638 <USBD_CDC_RegisterInterface>
 800dd76:	4603      	mov	r3, r0
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d001      	beq.n	800dd80 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800dd7c:	f7f3 fb7d 	bl	800147a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800dd80:	4805      	ldr	r0, [pc, #20]	@ (800dd98 <MX_USB_Device_Init+0x54>)
 800dd82:	f7fe fdab 	bl	800c8dc <USBD_Start>
 800dd86:	4603      	mov	r3, r0
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d001      	beq.n	800dd90 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800dd8c:	f7f3 fb75 	bl	800147a <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800dd90:	bf00      	nop
 800dd92:	bd80      	pop	{r7, pc}
 800dd94:	200000d0 	.word	0x200000d0
 800dd98:	20000734 	.word	0x20000734
 800dd9c:	2000003c 	.word	0x2000003c
 800dda0:	200000bc 	.word	0x200000bc

0800dda4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800dda8:	2200      	movs	r2, #0
 800ddaa:	4905      	ldr	r1, [pc, #20]	@ (800ddc0 <CDC_Init_FS+0x1c>)
 800ddac:	4805      	ldr	r0, [pc, #20]	@ (800ddc4 <CDC_Init_FS+0x20>)
 800ddae:	f7fe fc5d 	bl	800c66c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ddb2:	4905      	ldr	r1, [pc, #20]	@ (800ddc8 <CDC_Init_FS+0x24>)
 800ddb4:	4803      	ldr	r0, [pc, #12]	@ (800ddc4 <CDC_Init_FS+0x20>)
 800ddb6:	f7fe fc7b 	bl	800c6b0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ddba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	bd80      	pop	{r7, pc}
 800ddc0:	20001210 	.word	0x20001210
 800ddc4:	20000734 	.word	0x20000734
 800ddc8:	20000a10 	.word	0x20000a10

0800ddcc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ddcc:	b480      	push	{r7}
 800ddce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ddd0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddda:	4770      	bx	lr

0800dddc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dddc:	b480      	push	{r7}
 800ddde:	b083      	sub	sp, #12
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	4603      	mov	r3, r0
 800dde4:	6039      	str	r1, [r7, #0]
 800dde6:	71fb      	strb	r3, [r7, #7]
 800dde8:	4613      	mov	r3, r2
 800ddea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ddec:	79fb      	ldrb	r3, [r7, #7]
 800ddee:	2b23      	cmp	r3, #35	@ 0x23
 800ddf0:	d84a      	bhi.n	800de88 <CDC_Control_FS+0xac>
 800ddf2:	a201      	add	r2, pc, #4	@ (adr r2, 800ddf8 <CDC_Control_FS+0x1c>)
 800ddf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddf8:	0800de89 	.word	0x0800de89
 800ddfc:	0800de89 	.word	0x0800de89
 800de00:	0800de89 	.word	0x0800de89
 800de04:	0800de89 	.word	0x0800de89
 800de08:	0800de89 	.word	0x0800de89
 800de0c:	0800de89 	.word	0x0800de89
 800de10:	0800de89 	.word	0x0800de89
 800de14:	0800de89 	.word	0x0800de89
 800de18:	0800de89 	.word	0x0800de89
 800de1c:	0800de89 	.word	0x0800de89
 800de20:	0800de89 	.word	0x0800de89
 800de24:	0800de89 	.word	0x0800de89
 800de28:	0800de89 	.word	0x0800de89
 800de2c:	0800de89 	.word	0x0800de89
 800de30:	0800de89 	.word	0x0800de89
 800de34:	0800de89 	.word	0x0800de89
 800de38:	0800de89 	.word	0x0800de89
 800de3c:	0800de89 	.word	0x0800de89
 800de40:	0800de89 	.word	0x0800de89
 800de44:	0800de89 	.word	0x0800de89
 800de48:	0800de89 	.word	0x0800de89
 800de4c:	0800de89 	.word	0x0800de89
 800de50:	0800de89 	.word	0x0800de89
 800de54:	0800de89 	.word	0x0800de89
 800de58:	0800de89 	.word	0x0800de89
 800de5c:	0800de89 	.word	0x0800de89
 800de60:	0800de89 	.word	0x0800de89
 800de64:	0800de89 	.word	0x0800de89
 800de68:	0800de89 	.word	0x0800de89
 800de6c:	0800de89 	.word	0x0800de89
 800de70:	0800de89 	.word	0x0800de89
 800de74:	0800de89 	.word	0x0800de89
 800de78:	0800de89 	.word	0x0800de89
 800de7c:	0800de89 	.word	0x0800de89
 800de80:	0800de89 	.word	0x0800de89
 800de84:	0800de89 	.word	0x0800de89
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800de88:	bf00      	nop
  }

  return (USBD_OK);
 800de8a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800de8c:	4618      	mov	r0, r3
 800de8e:	370c      	adds	r7, #12
 800de90:	46bd      	mov	sp, r7
 800de92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de96:	4770      	bx	lr

0800de98 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b082      	sub	sp, #8
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
 800dea0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800dea2:	6879      	ldr	r1, [r7, #4]
 800dea4:	4805      	ldr	r0, [pc, #20]	@ (800debc <CDC_Receive_FS+0x24>)
 800dea6:	f7fe fc03 	bl	800c6b0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800deaa:	4804      	ldr	r0, [pc, #16]	@ (800debc <CDC_Receive_FS+0x24>)
 800deac:	f7fe fc5e 	bl	800c76c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800deb0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800deb2:	4618      	mov	r0, r3
 800deb4:	3708      	adds	r7, #8
 800deb6:	46bd      	mov	sp, r7
 800deb8:	bd80      	pop	{r7, pc}
 800deba:	bf00      	nop
 800debc:	20000734 	.word	0x20000734

0800dec0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b084      	sub	sp, #16
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
 800dec8:	460b      	mov	r3, r1
 800deca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800decc:	2300      	movs	r3, #0
 800dece:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ded0:	4b0d      	ldr	r3, [pc, #52]	@ (800df08 <CDC_Transmit_FS+0x48>)
 800ded2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ded6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d001      	beq.n	800dee6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800dee2:	2301      	movs	r3, #1
 800dee4:	e00b      	b.n	800defe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800dee6:	887b      	ldrh	r3, [r7, #2]
 800dee8:	461a      	mov	r2, r3
 800deea:	6879      	ldr	r1, [r7, #4]
 800deec:	4806      	ldr	r0, [pc, #24]	@ (800df08 <CDC_Transmit_FS+0x48>)
 800deee:	f7fe fbbd 	bl	800c66c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800def2:	4805      	ldr	r0, [pc, #20]	@ (800df08 <CDC_Transmit_FS+0x48>)
 800def4:	f7fe fbfa 	bl	800c6ec <USBD_CDC_TransmitPacket>
 800def8:	4603      	mov	r3, r0
 800defa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800defc:	7bfb      	ldrb	r3, [r7, #15]
}
 800defe:	4618      	mov	r0, r3
 800df00:	3710      	adds	r7, #16
 800df02:	46bd      	mov	sp, r7
 800df04:	bd80      	pop	{r7, pc}
 800df06:	bf00      	nop
 800df08:	20000734 	.word	0x20000734

0800df0c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800df0c:	b480      	push	{r7}
 800df0e:	b087      	sub	sp, #28
 800df10:	af00      	add	r7, sp, #0
 800df12:	60f8      	str	r0, [r7, #12]
 800df14:	60b9      	str	r1, [r7, #8]
 800df16:	4613      	mov	r3, r2
 800df18:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800df1a:	2300      	movs	r3, #0
 800df1c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800df1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800df22:	4618      	mov	r0, r3
 800df24:	371c      	adds	r7, #28
 800df26:	46bd      	mov	sp, r7
 800df28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2c:	4770      	bx	lr
	...

0800df30 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df30:	b480      	push	{r7}
 800df32:	b083      	sub	sp, #12
 800df34:	af00      	add	r7, sp, #0
 800df36:	4603      	mov	r3, r0
 800df38:	6039      	str	r1, [r7, #0]
 800df3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	2212      	movs	r2, #18
 800df40:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800df42:	4b03      	ldr	r3, [pc, #12]	@ (800df50 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800df44:	4618      	mov	r0, r3
 800df46:	370c      	adds	r7, #12
 800df48:	46bd      	mov	sp, r7
 800df4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4e:	4770      	bx	lr
 800df50:	200000f0 	.word	0x200000f0

0800df54 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df54:	b480      	push	{r7}
 800df56:	b083      	sub	sp, #12
 800df58:	af00      	add	r7, sp, #0
 800df5a:	4603      	mov	r3, r0
 800df5c:	6039      	str	r1, [r7, #0]
 800df5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	2204      	movs	r2, #4
 800df64:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800df66:	4b03      	ldr	r3, [pc, #12]	@ (800df74 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800df68:	4618      	mov	r0, r3
 800df6a:	370c      	adds	r7, #12
 800df6c:	46bd      	mov	sp, r7
 800df6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df72:	4770      	bx	lr
 800df74:	20000104 	.word	0x20000104

0800df78 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b082      	sub	sp, #8
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	4603      	mov	r3, r0
 800df80:	6039      	str	r1, [r7, #0]
 800df82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800df84:	79fb      	ldrb	r3, [r7, #7]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d105      	bne.n	800df96 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800df8a:	683a      	ldr	r2, [r7, #0]
 800df8c:	4907      	ldr	r1, [pc, #28]	@ (800dfac <USBD_CDC_ProductStrDescriptor+0x34>)
 800df8e:	4808      	ldr	r0, [pc, #32]	@ (800dfb0 <USBD_CDC_ProductStrDescriptor+0x38>)
 800df90:	f7ff fdec 	bl	800db6c <USBD_GetString>
 800df94:	e004      	b.n	800dfa0 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800df96:	683a      	ldr	r2, [r7, #0]
 800df98:	4904      	ldr	r1, [pc, #16]	@ (800dfac <USBD_CDC_ProductStrDescriptor+0x34>)
 800df9a:	4805      	ldr	r0, [pc, #20]	@ (800dfb0 <USBD_CDC_ProductStrDescriptor+0x38>)
 800df9c:	f7ff fde6 	bl	800db6c <USBD_GetString>
  }
  return USBD_StrDesc;
 800dfa0:	4b02      	ldr	r3, [pc, #8]	@ (800dfac <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3708      	adds	r7, #8
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}
 800dfaa:	bf00      	nop
 800dfac:	20001a10 	.word	0x20001a10
 800dfb0:	080111e4 	.word	0x080111e4

0800dfb4 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b082      	sub	sp, #8
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	4603      	mov	r3, r0
 800dfbc:	6039      	str	r1, [r7, #0]
 800dfbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dfc0:	683a      	ldr	r2, [r7, #0]
 800dfc2:	4904      	ldr	r1, [pc, #16]	@ (800dfd4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800dfc4:	4804      	ldr	r0, [pc, #16]	@ (800dfd8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800dfc6:	f7ff fdd1 	bl	800db6c <USBD_GetString>
  return USBD_StrDesc;
 800dfca:	4b02      	ldr	r3, [pc, #8]	@ (800dfd4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800dfcc:	4618      	mov	r0, r3
 800dfce:	3708      	adds	r7, #8
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	bd80      	pop	{r7, pc}
 800dfd4:	20001a10 	.word	0x20001a10
 800dfd8:	080111fc 	.word	0x080111fc

0800dfdc <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b082      	sub	sp, #8
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	6039      	str	r1, [r7, #0]
 800dfe6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	221a      	movs	r2, #26
 800dfec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dfee:	f000 f843 	bl	800e078 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800dff2:	4b02      	ldr	r3, [pc, #8]	@ (800dffc <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800dff4:	4618      	mov	r0, r3
 800dff6:	3708      	adds	r7, #8
 800dff8:	46bd      	mov	sp, r7
 800dffa:	bd80      	pop	{r7, pc}
 800dffc:	20000108 	.word	0x20000108

0800e000 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b082      	sub	sp, #8
 800e004:	af00      	add	r7, sp, #0
 800e006:	4603      	mov	r3, r0
 800e008:	6039      	str	r1, [r7, #0]
 800e00a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e00c:	79fb      	ldrb	r3, [r7, #7]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d105      	bne.n	800e01e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800e012:	683a      	ldr	r2, [r7, #0]
 800e014:	4907      	ldr	r1, [pc, #28]	@ (800e034 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800e016:	4808      	ldr	r0, [pc, #32]	@ (800e038 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800e018:	f7ff fda8 	bl	800db6c <USBD_GetString>
 800e01c:	e004      	b.n	800e028 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800e01e:	683a      	ldr	r2, [r7, #0]
 800e020:	4904      	ldr	r1, [pc, #16]	@ (800e034 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800e022:	4805      	ldr	r0, [pc, #20]	@ (800e038 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800e024:	f7ff fda2 	bl	800db6c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e028:	4b02      	ldr	r3, [pc, #8]	@ (800e034 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800e02a:	4618      	mov	r0, r3
 800e02c:	3708      	adds	r7, #8
 800e02e:	46bd      	mov	sp, r7
 800e030:	bd80      	pop	{r7, pc}
 800e032:	bf00      	nop
 800e034:	20001a10 	.word	0x20001a10
 800e038:	08011210 	.word	0x08011210

0800e03c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b082      	sub	sp, #8
 800e040:	af00      	add	r7, sp, #0
 800e042:	4603      	mov	r3, r0
 800e044:	6039      	str	r1, [r7, #0]
 800e046:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e048:	79fb      	ldrb	r3, [r7, #7]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d105      	bne.n	800e05a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800e04e:	683a      	ldr	r2, [r7, #0]
 800e050:	4907      	ldr	r1, [pc, #28]	@ (800e070 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800e052:	4808      	ldr	r0, [pc, #32]	@ (800e074 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800e054:	f7ff fd8a 	bl	800db6c <USBD_GetString>
 800e058:	e004      	b.n	800e064 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800e05a:	683a      	ldr	r2, [r7, #0]
 800e05c:	4904      	ldr	r1, [pc, #16]	@ (800e070 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800e05e:	4805      	ldr	r0, [pc, #20]	@ (800e074 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800e060:	f7ff fd84 	bl	800db6c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e064:	4b02      	ldr	r3, [pc, #8]	@ (800e070 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800e066:	4618      	mov	r0, r3
 800e068:	3708      	adds	r7, #8
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd80      	pop	{r7, pc}
 800e06e:	bf00      	nop
 800e070:	20001a10 	.word	0x20001a10
 800e074:	0801121c 	.word	0x0801121c

0800e078 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b084      	sub	sp, #16
 800e07c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e07e:	4b0f      	ldr	r3, [pc, #60]	@ (800e0bc <Get_SerialNum+0x44>)
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e084:	4b0e      	ldr	r3, [pc, #56]	@ (800e0c0 <Get_SerialNum+0x48>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e08a:	4b0e      	ldr	r3, [pc, #56]	@ (800e0c4 <Get_SerialNum+0x4c>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e090:	68fa      	ldr	r2, [r7, #12]
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	4413      	add	r3, r2
 800e096:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d009      	beq.n	800e0b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e09e:	2208      	movs	r2, #8
 800e0a0:	4909      	ldr	r1, [pc, #36]	@ (800e0c8 <Get_SerialNum+0x50>)
 800e0a2:	68f8      	ldr	r0, [r7, #12]
 800e0a4:	f000 f814 	bl	800e0d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e0a8:	2204      	movs	r2, #4
 800e0aa:	4908      	ldr	r1, [pc, #32]	@ (800e0cc <Get_SerialNum+0x54>)
 800e0ac:	68b8      	ldr	r0, [r7, #8]
 800e0ae:	f000 f80f 	bl	800e0d0 <IntToUnicode>
  }
}
 800e0b2:	bf00      	nop
 800e0b4:	3710      	adds	r7, #16
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}
 800e0ba:	bf00      	nop
 800e0bc:	1fff7590 	.word	0x1fff7590
 800e0c0:	1fff7594 	.word	0x1fff7594
 800e0c4:	1fff7598 	.word	0x1fff7598
 800e0c8:	2000010a 	.word	0x2000010a
 800e0cc:	2000011a 	.word	0x2000011a

0800e0d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e0d0:	b480      	push	{r7}
 800e0d2:	b087      	sub	sp, #28
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	60f8      	str	r0, [r7, #12]
 800e0d8:	60b9      	str	r1, [r7, #8]
 800e0da:	4613      	mov	r3, r2
 800e0dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e0de:	2300      	movs	r3, #0
 800e0e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	75fb      	strb	r3, [r7, #23]
 800e0e6:	e027      	b.n	800e138 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	0f1b      	lsrs	r3, r3, #28
 800e0ec:	2b09      	cmp	r3, #9
 800e0ee:	d80b      	bhi.n	800e108 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	0f1b      	lsrs	r3, r3, #28
 800e0f4:	b2da      	uxtb	r2, r3
 800e0f6:	7dfb      	ldrb	r3, [r7, #23]
 800e0f8:	005b      	lsls	r3, r3, #1
 800e0fa:	4619      	mov	r1, r3
 800e0fc:	68bb      	ldr	r3, [r7, #8]
 800e0fe:	440b      	add	r3, r1
 800e100:	3230      	adds	r2, #48	@ 0x30
 800e102:	b2d2      	uxtb	r2, r2
 800e104:	701a      	strb	r2, [r3, #0]
 800e106:	e00a      	b.n	800e11e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	0f1b      	lsrs	r3, r3, #28
 800e10c:	b2da      	uxtb	r2, r3
 800e10e:	7dfb      	ldrb	r3, [r7, #23]
 800e110:	005b      	lsls	r3, r3, #1
 800e112:	4619      	mov	r1, r3
 800e114:	68bb      	ldr	r3, [r7, #8]
 800e116:	440b      	add	r3, r1
 800e118:	3237      	adds	r2, #55	@ 0x37
 800e11a:	b2d2      	uxtb	r2, r2
 800e11c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	011b      	lsls	r3, r3, #4
 800e122:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e124:	7dfb      	ldrb	r3, [r7, #23]
 800e126:	005b      	lsls	r3, r3, #1
 800e128:	3301      	adds	r3, #1
 800e12a:	68ba      	ldr	r2, [r7, #8]
 800e12c:	4413      	add	r3, r2
 800e12e:	2200      	movs	r2, #0
 800e130:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e132:	7dfb      	ldrb	r3, [r7, #23]
 800e134:	3301      	adds	r3, #1
 800e136:	75fb      	strb	r3, [r7, #23]
 800e138:	7dfa      	ldrb	r2, [r7, #23]
 800e13a:	79fb      	ldrb	r3, [r7, #7]
 800e13c:	429a      	cmp	r2, r3
 800e13e:	d3d3      	bcc.n	800e0e8 <IntToUnicode+0x18>
  }
}
 800e140:	bf00      	nop
 800e142:	bf00      	nop
 800e144:	371c      	adds	r7, #28
 800e146:	46bd      	mov	sp, r7
 800e148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14c:	4770      	bx	lr

0800e14e <LL_AHB2_GRP1_EnableClock>:
{
 800e14e:	b480      	push	{r7}
 800e150:	b085      	sub	sp, #20
 800e152:	af00      	add	r7, sp, #0
 800e154:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800e156:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e15a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e15c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	4313      	orrs	r3, r2
 800e164:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800e166:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e16a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	4013      	ands	r3, r2
 800e170:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e172:	68fb      	ldr	r3, [r7, #12]
}
 800e174:	bf00      	nop
 800e176:	3714      	adds	r7, #20
 800e178:	46bd      	mov	sp, r7
 800e17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17e:	4770      	bx	lr

0800e180 <LL_APB1_GRP1_EnableClock>:
{
 800e180:	b480      	push	{r7}
 800e182:	b085      	sub	sp, #20
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800e188:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e18c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e18e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	4313      	orrs	r3, r2
 800e196:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800e198:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e19c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	4013      	ands	r3, r2
 800e1a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
}
 800e1a6:	bf00      	nop
 800e1a8:	3714      	adds	r7, #20
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b0:	4770      	bx	lr
	...

0800e1b4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b088      	sub	sp, #32
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e1bc:	f107 030c 	add.w	r3, r7, #12
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	601a      	str	r2, [r3, #0]
 800e1c4:	605a      	str	r2, [r3, #4]
 800e1c6:	609a      	str	r2, [r3, #8]
 800e1c8:	60da      	str	r2, [r3, #12]
 800e1ca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	4a17      	ldr	r2, [pc, #92]	@ (800e230 <HAL_PCD_MspInit+0x7c>)
 800e1d2:	4293      	cmp	r3, r2
 800e1d4:	d128      	bne.n	800e228 <HAL_PCD_MspInit+0x74>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e1d6:	2001      	movs	r0, #1
 800e1d8:	f7ff ffb9 	bl	800e14e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 800e1dc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800e1e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e1e2:	2302      	movs	r3, #2
 800e1e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800e1ee:	230a      	movs	r3, #10
 800e1f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e1f2:	f107 030c 	add.w	r3, r7, #12
 800e1f6:	4619      	mov	r1, r3
 800e1f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800e1fc:	f7f5 fd08 	bl	8003c10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e200:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800e204:	f7ff ffbc 	bl	800e180 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 800e208:	2200      	movs	r2, #0
 800e20a:	2100      	movs	r1, #0
 800e20c:	2013      	movs	r0, #19
 800e20e:	f7f5 f9e8 	bl	80035e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 800e212:	2013      	movs	r0, #19
 800e214:	f7f5 f9ff 	bl	8003616 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800e218:	2200      	movs	r2, #0
 800e21a:	2100      	movs	r1, #0
 800e21c:	2014      	movs	r0, #20
 800e21e:	f7f5 f9e0 	bl	80035e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800e222:	2014      	movs	r0, #20
 800e224:	f7f5 f9f7 	bl	8003616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800e228:	bf00      	nop
 800e22a:	3720      	adds	r7, #32
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bd80      	pop	{r7, pc}
 800e230:	40006800 	.word	0x40006800

0800e234 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b082      	sub	sp, #8
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800e248:	4619      	mov	r1, r3
 800e24a:	4610      	mov	r0, r2
 800e24c:	f7fe fb93 	bl	800c976 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800e250:	bf00      	nop
 800e252:	3708      	adds	r7, #8
 800e254:	46bd      	mov	sp, r7
 800e256:	bd80      	pop	{r7, pc}

0800e258 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b082      	sub	sp, #8
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
 800e260:	460b      	mov	r3, r1
 800e262:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800e26a:	78fa      	ldrb	r2, [r7, #3]
 800e26c:	6879      	ldr	r1, [r7, #4]
 800e26e:	4613      	mov	r3, r2
 800e270:	009b      	lsls	r3, r3, #2
 800e272:	4413      	add	r3, r2
 800e274:	00db      	lsls	r3, r3, #3
 800e276:	440b      	add	r3, r1
 800e278:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e27c:	681a      	ldr	r2, [r3, #0]
 800e27e:	78fb      	ldrb	r3, [r7, #3]
 800e280:	4619      	mov	r1, r3
 800e282:	f7fe fbcd 	bl	800ca20 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800e286:	bf00      	nop
 800e288:	3708      	adds	r7, #8
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bd80      	pop	{r7, pc}

0800e28e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e28e:	b580      	push	{r7, lr}
 800e290:	b082      	sub	sp, #8
 800e292:	af00      	add	r7, sp, #0
 800e294:	6078      	str	r0, [r7, #4]
 800e296:	460b      	mov	r3, r1
 800e298:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800e2a0:	78fa      	ldrb	r2, [r7, #3]
 800e2a2:	6879      	ldr	r1, [r7, #4]
 800e2a4:	4613      	mov	r3, r2
 800e2a6:	009b      	lsls	r3, r3, #2
 800e2a8:	4413      	add	r3, r2
 800e2aa:	00db      	lsls	r3, r3, #3
 800e2ac:	440b      	add	r3, r1
 800e2ae:	3324      	adds	r3, #36	@ 0x24
 800e2b0:	681a      	ldr	r2, [r3, #0]
 800e2b2:	78fb      	ldrb	r3, [r7, #3]
 800e2b4:	4619      	mov	r1, r3
 800e2b6:	f7fe fc66 	bl	800cb86 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800e2ba:	bf00      	nop
 800e2bc:	3708      	adds	r7, #8
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	bd80      	pop	{r7, pc}

0800e2c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2c2:	b580      	push	{r7, lr}
 800e2c4:	b082      	sub	sp, #8
 800e2c6:	af00      	add	r7, sp, #0
 800e2c8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	f7fe fda0 	bl	800ce16 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800e2d6:	bf00      	nop
 800e2d8:	3708      	adds	r7, #8
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	bd80      	pop	{r7, pc}

0800e2de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2de:	b580      	push	{r7, lr}
 800e2e0:	b084      	sub	sp, #16
 800e2e2:	af00      	add	r7, sp, #0
 800e2e4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	795b      	ldrb	r3, [r3, #5]
 800e2ee:	2b02      	cmp	r3, #2
 800e2f0:	d001      	beq.n	800e2f6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e2f2:	f7f3 f8c2 	bl	800147a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e2fc:	7bfa      	ldrb	r2, [r7, #15]
 800e2fe:	4611      	mov	r1, r2
 800e300:	4618      	mov	r0, r3
 800e302:	f7fe fd44 	bl	800cd8e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e30c:	4618      	mov	r0, r3
 800e30e:	f7fe fcec 	bl	800ccea <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800e312:	bf00      	nop
 800e314:	3710      	adds	r7, #16
 800e316:	46bd      	mov	sp, r7
 800e318:	bd80      	pop	{r7, pc}
	...

0800e31c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b082      	sub	sp, #8
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e32a:	4618      	mov	r0, r3
 800e32c:	f7fe fd3f 	bl	800cdae <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	7a5b      	ldrb	r3, [r3, #9]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d005      	beq.n	800e344 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e338:	4b04      	ldr	r3, [pc, #16]	@ (800e34c <HAL_PCD_SuspendCallback+0x30>)
 800e33a:	691b      	ldr	r3, [r3, #16]
 800e33c:	4a03      	ldr	r2, [pc, #12]	@ (800e34c <HAL_PCD_SuspendCallback+0x30>)
 800e33e:	f043 0306 	orr.w	r3, r3, #6
 800e342:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800e344:	bf00      	nop
 800e346:	3708      	adds	r7, #8
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd80      	pop	{r7, pc}
 800e34c:	e000ed00 	.word	0xe000ed00

0800e350 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b082      	sub	sp, #8
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	7a5b      	ldrb	r3, [r3, #9]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d007      	beq.n	800e370 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e360:	4b08      	ldr	r3, [pc, #32]	@ (800e384 <HAL_PCD_ResumeCallback+0x34>)
 800e362:	691b      	ldr	r3, [r3, #16]
 800e364:	4a07      	ldr	r2, [pc, #28]	@ (800e384 <HAL_PCD_ResumeCallback+0x34>)
 800e366:	f023 0306 	bic.w	r3, r3, #6
 800e36a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800e36c:	f000 f9fa 	bl	800e764 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e376:	4618      	mov	r0, r3
 800e378:	f7fe fd35 	bl	800cde6 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800e37c:	bf00      	nop
 800e37e:	3708      	adds	r7, #8
 800e380:	46bd      	mov	sp, r7
 800e382:	bd80      	pop	{r7, pc}
 800e384:	e000ed00 	.word	0xe000ed00

0800e388 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b082      	sub	sp, #8
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800e390:	4a2c      	ldr	r2, [pc, #176]	@ (800e444 <USBD_LL_Init+0xbc>)
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	4a2a      	ldr	r2, [pc, #168]	@ (800e444 <USBD_LL_Init+0xbc>)
 800e39c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800e3a0:	f7f8 fa98 	bl	80068d4 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800e3a4:	4b27      	ldr	r3, [pc, #156]	@ (800e444 <USBD_LL_Init+0xbc>)
 800e3a6:	4a28      	ldr	r2, [pc, #160]	@ (800e448 <USBD_LL_Init+0xc0>)
 800e3a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e3aa:	4b26      	ldr	r3, [pc, #152]	@ (800e444 <USBD_LL_Init+0xbc>)
 800e3ac:	2208      	movs	r2, #8
 800e3ae:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e3b0:	4b24      	ldr	r3, [pc, #144]	@ (800e444 <USBD_LL_Init+0xbc>)
 800e3b2:	2202      	movs	r2, #2
 800e3b4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e3b6:	4b23      	ldr	r3, [pc, #140]	@ (800e444 <USBD_LL_Init+0xbc>)
 800e3b8:	2202      	movs	r2, #2
 800e3ba:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800e3bc:	4b21      	ldr	r3, [pc, #132]	@ (800e444 <USBD_LL_Init+0xbc>)
 800e3be:	2200      	movs	r2, #0
 800e3c0:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e3c2:	4b20      	ldr	r3, [pc, #128]	@ (800e444 <USBD_LL_Init+0xbc>)
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800e3c8:	4b1e      	ldr	r3, [pc, #120]	@ (800e444 <USBD_LL_Init+0xbc>)
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e3ce:	4b1d      	ldr	r3, [pc, #116]	@ (800e444 <USBD_LL_Init+0xbc>)
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e3d4:	481b      	ldr	r0, [pc, #108]	@ (800e444 <USBD_LL_Init+0xbc>)
 800e3d6:	f7f6 fd2b 	bl	8004e30 <HAL_PCD_Init>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d001      	beq.n	800e3e4 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800e3e0:	f7f3 f84b 	bl	800147a <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e3ea:	2318      	movs	r3, #24
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	2100      	movs	r1, #0
 800e3f0:	f7f8 f9e4 	bl	80067bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e3fa:	2358      	movs	r3, #88	@ 0x58
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	2180      	movs	r1, #128	@ 0x80
 800e400:	f7f8 f9dc 	bl	80067bc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e40a:	23c0      	movs	r3, #192	@ 0xc0
 800e40c:	2200      	movs	r2, #0
 800e40e:	2181      	movs	r1, #129	@ 0x81
 800e410:	f7f8 f9d4 	bl	80067bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e41a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800e41e:	2200      	movs	r2, #0
 800e420:	2101      	movs	r1, #1
 800e422:	f7f8 f9cb 	bl	80067bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e42c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e430:	2200      	movs	r2, #0
 800e432:	2182      	movs	r1, #130	@ 0x82
 800e434:	f7f8 f9c2 	bl	80067bc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800e438:	2300      	movs	r3, #0
}
 800e43a:	4618      	mov	r0, r3
 800e43c:	3708      	adds	r7, #8
 800e43e:	46bd      	mov	sp, r7
 800e440:	bd80      	pop	{r7, pc}
 800e442:	bf00      	nop
 800e444:	20001c10 	.word	0x20001c10
 800e448:	40006800 	.word	0x40006800

0800e44c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b084      	sub	sp, #16
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e454:	2300      	movs	r3, #0
 800e456:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e458:	2300      	movs	r3, #0
 800e45a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e462:	4618      	mov	r0, r3
 800e464:	f7f6 fdb2 	bl	8004fcc <HAL_PCD_Start>
 800e468:	4603      	mov	r3, r0
 800e46a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e46c:	7bfb      	ldrb	r3, [r7, #15]
 800e46e:	4618      	mov	r0, r3
 800e470:	f000 f97e 	bl	800e770 <USBD_Get_USB_Status>
 800e474:	4603      	mov	r3, r0
 800e476:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e478:	7bbb      	ldrb	r3, [r7, #14]
}
 800e47a:	4618      	mov	r0, r3
 800e47c:	3710      	adds	r7, #16
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd80      	pop	{r7, pc}

0800e482 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e482:	b580      	push	{r7, lr}
 800e484:	b084      	sub	sp, #16
 800e486:	af00      	add	r7, sp, #0
 800e488:	6078      	str	r0, [r7, #4]
 800e48a:	4608      	mov	r0, r1
 800e48c:	4611      	mov	r1, r2
 800e48e:	461a      	mov	r2, r3
 800e490:	4603      	mov	r3, r0
 800e492:	70fb      	strb	r3, [r7, #3]
 800e494:	460b      	mov	r3, r1
 800e496:	70bb      	strb	r3, [r7, #2]
 800e498:	4613      	mov	r3, r2
 800e49a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e49c:	2300      	movs	r3, #0
 800e49e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e4aa:	78bb      	ldrb	r3, [r7, #2]
 800e4ac:	883a      	ldrh	r2, [r7, #0]
 800e4ae:	78f9      	ldrb	r1, [r7, #3]
 800e4b0:	f7f6 fef9 	bl	80052a6 <HAL_PCD_EP_Open>
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4b8:	7bfb      	ldrb	r3, [r7, #15]
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f000 f958 	bl	800e770 <USBD_Get_USB_Status>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e4c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	3710      	adds	r7, #16
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	bd80      	pop	{r7, pc}

0800e4ce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e4ce:	b580      	push	{r7, lr}
 800e4d0:	b084      	sub	sp, #16
 800e4d2:	af00      	add	r7, sp, #0
 800e4d4:	6078      	str	r0, [r7, #4]
 800e4d6:	460b      	mov	r3, r1
 800e4d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4de:	2300      	movs	r3, #0
 800e4e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e4e8:	78fa      	ldrb	r2, [r7, #3]
 800e4ea:	4611      	mov	r1, r2
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	f7f6 ff37 	bl	8005360 <HAL_PCD_EP_Close>
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4f6:	7bfb      	ldrb	r3, [r7, #15]
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f000 f939 	bl	800e770 <USBD_Get_USB_Status>
 800e4fe:	4603      	mov	r3, r0
 800e500:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e502:	7bbb      	ldrb	r3, [r7, #14]
}
 800e504:	4618      	mov	r0, r3
 800e506:	3710      	adds	r7, #16
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}

0800e50c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b084      	sub	sp, #16
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
 800e514:	460b      	mov	r3, r1
 800e516:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e518:	2300      	movs	r3, #0
 800e51a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e51c:	2300      	movs	r3, #0
 800e51e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e526:	78fa      	ldrb	r2, [r7, #3]
 800e528:	4611      	mov	r1, r2
 800e52a:	4618      	mov	r0, r3
 800e52c:	f7f6 ffe0 	bl	80054f0 <HAL_PCD_EP_SetStall>
 800e530:	4603      	mov	r3, r0
 800e532:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e534:	7bfb      	ldrb	r3, [r7, #15]
 800e536:	4618      	mov	r0, r3
 800e538:	f000 f91a 	bl	800e770 <USBD_Get_USB_Status>
 800e53c:	4603      	mov	r3, r0
 800e53e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e540:	7bbb      	ldrb	r3, [r7, #14]
}
 800e542:	4618      	mov	r0, r3
 800e544:	3710      	adds	r7, #16
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}

0800e54a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e54a:	b580      	push	{r7, lr}
 800e54c:	b084      	sub	sp, #16
 800e54e:	af00      	add	r7, sp, #0
 800e550:	6078      	str	r0, [r7, #4]
 800e552:	460b      	mov	r3, r1
 800e554:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e556:	2300      	movs	r3, #0
 800e558:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e55a:	2300      	movs	r3, #0
 800e55c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e564:	78fa      	ldrb	r2, [r7, #3]
 800e566:	4611      	mov	r1, r2
 800e568:	4618      	mov	r0, r3
 800e56a:	f7f7 f813 	bl	8005594 <HAL_PCD_EP_ClrStall>
 800e56e:	4603      	mov	r3, r0
 800e570:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e572:	7bfb      	ldrb	r3, [r7, #15]
 800e574:	4618      	mov	r0, r3
 800e576:	f000 f8fb 	bl	800e770 <USBD_Get_USB_Status>
 800e57a:	4603      	mov	r3, r0
 800e57c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e57e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e580:	4618      	mov	r0, r3
 800e582:	3710      	adds	r7, #16
 800e584:	46bd      	mov	sp, r7
 800e586:	bd80      	pop	{r7, pc}

0800e588 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e588:	b480      	push	{r7}
 800e58a:	b085      	sub	sp, #20
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
 800e590:	460b      	mov	r3, r1
 800e592:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e59a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e59c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	da0b      	bge.n	800e5bc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e5a4:	78fb      	ldrb	r3, [r7, #3]
 800e5a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e5aa:	68f9      	ldr	r1, [r7, #12]
 800e5ac:	4613      	mov	r3, r2
 800e5ae:	009b      	lsls	r3, r3, #2
 800e5b0:	4413      	add	r3, r2
 800e5b2:	00db      	lsls	r3, r3, #3
 800e5b4:	440b      	add	r3, r1
 800e5b6:	3312      	adds	r3, #18
 800e5b8:	781b      	ldrb	r3, [r3, #0]
 800e5ba:	e00b      	b.n	800e5d4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e5bc:	78fb      	ldrb	r3, [r7, #3]
 800e5be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e5c2:	68f9      	ldr	r1, [r7, #12]
 800e5c4:	4613      	mov	r3, r2
 800e5c6:	009b      	lsls	r3, r3, #2
 800e5c8:	4413      	add	r3, r2
 800e5ca:	00db      	lsls	r3, r3, #3
 800e5cc:	440b      	add	r3, r1
 800e5ce:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800e5d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	3714      	adds	r7, #20
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5de:	4770      	bx	lr

0800e5e0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b084      	sub	sp, #16
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
 800e5e8:	460b      	mov	r3, r1
 800e5ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e5fa:	78fa      	ldrb	r2, [r7, #3]
 800e5fc:	4611      	mov	r1, r2
 800e5fe:	4618      	mov	r0, r3
 800e600:	f7f6 fe2d 	bl	800525e <HAL_PCD_SetAddress>
 800e604:	4603      	mov	r3, r0
 800e606:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e608:	7bfb      	ldrb	r3, [r7, #15]
 800e60a:	4618      	mov	r0, r3
 800e60c:	f000 f8b0 	bl	800e770 <USBD_Get_USB_Status>
 800e610:	4603      	mov	r3, r0
 800e612:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e614:	7bbb      	ldrb	r3, [r7, #14]
}
 800e616:	4618      	mov	r0, r3
 800e618:	3710      	adds	r7, #16
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd80      	pop	{r7, pc}

0800e61e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e61e:	b580      	push	{r7, lr}
 800e620:	b086      	sub	sp, #24
 800e622:	af00      	add	r7, sp, #0
 800e624:	60f8      	str	r0, [r7, #12]
 800e626:	607a      	str	r2, [r7, #4]
 800e628:	603b      	str	r3, [r7, #0]
 800e62a:	460b      	mov	r3, r1
 800e62c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e62e:	2300      	movs	r3, #0
 800e630:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e632:	2300      	movs	r3, #0
 800e634:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e63c:	7af9      	ldrb	r1, [r7, #11]
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	687a      	ldr	r2, [r7, #4]
 800e642:	f7f6 ff1e 	bl	8005482 <HAL_PCD_EP_Transmit>
 800e646:	4603      	mov	r3, r0
 800e648:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e64a:	7dfb      	ldrb	r3, [r7, #23]
 800e64c:	4618      	mov	r0, r3
 800e64e:	f000 f88f 	bl	800e770 <USBD_Get_USB_Status>
 800e652:	4603      	mov	r3, r0
 800e654:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e656:	7dbb      	ldrb	r3, [r7, #22]
}
 800e658:	4618      	mov	r0, r3
 800e65a:	3718      	adds	r7, #24
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}

0800e660 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b086      	sub	sp, #24
 800e664:	af00      	add	r7, sp, #0
 800e666:	60f8      	str	r0, [r7, #12]
 800e668:	607a      	str	r2, [r7, #4]
 800e66a:	603b      	str	r3, [r7, #0]
 800e66c:	460b      	mov	r3, r1
 800e66e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e670:	2300      	movs	r3, #0
 800e672:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e674:	2300      	movs	r3, #0
 800e676:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e67e:	7af9      	ldrb	r1, [r7, #11]
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	687a      	ldr	r2, [r7, #4]
 800e684:	f7f6 feb4 	bl	80053f0 <HAL_PCD_EP_Receive>
 800e688:	4603      	mov	r3, r0
 800e68a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e68c:	7dfb      	ldrb	r3, [r7, #23]
 800e68e:	4618      	mov	r0, r3
 800e690:	f000 f86e 	bl	800e770 <USBD_Get_USB_Status>
 800e694:	4603      	mov	r3, r0
 800e696:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e698:	7dbb      	ldrb	r3, [r7, #22]
}
 800e69a:	4618      	mov	r0, r3
 800e69c:	3718      	adds	r7, #24
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}

0800e6a2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e6a2:	b580      	push	{r7, lr}
 800e6a4:	b082      	sub	sp, #8
 800e6a6:	af00      	add	r7, sp, #0
 800e6a8:	6078      	str	r0, [r7, #4]
 800e6aa:	460b      	mov	r3, r1
 800e6ac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e6b4:	78fa      	ldrb	r2, [r7, #3]
 800e6b6:	4611      	mov	r1, r2
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f7f6 feca 	bl	8005452 <HAL_PCD_EP_GetRxCount>
 800e6be:	4603      	mov	r3, r0
}
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	3708      	adds	r7, #8
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bd80      	pop	{r7, pc}

0800e6c8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b082      	sub	sp, #8
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
 800e6d0:	460b      	mov	r3, r1
 800e6d2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800e6d4:	78fb      	ldrb	r3, [r7, #3]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d002      	beq.n	800e6e0 <HAL_PCDEx_LPM_Callback+0x18>
 800e6da:	2b01      	cmp	r3, #1
 800e6dc:	d013      	beq.n	800e706 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800e6de:	e023      	b.n	800e728 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	7a5b      	ldrb	r3, [r3, #9]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d007      	beq.n	800e6f8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e6e8:	f000 f83c 	bl	800e764 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e6ec:	4b10      	ldr	r3, [pc, #64]	@ (800e730 <HAL_PCDEx_LPM_Callback+0x68>)
 800e6ee:	691b      	ldr	r3, [r3, #16]
 800e6f0:	4a0f      	ldr	r2, [pc, #60]	@ (800e730 <HAL_PCDEx_LPM_Callback+0x68>)
 800e6f2:	f023 0306 	bic.w	r3, r3, #6
 800e6f6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e6fe:	4618      	mov	r0, r3
 800e700:	f7fe fb71 	bl	800cde6 <USBD_LL_Resume>
    break;
 800e704:	e010      	b.n	800e728 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e70c:	4618      	mov	r0, r3
 800e70e:	f7fe fb4e 	bl	800cdae <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	7a5b      	ldrb	r3, [r3, #9]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d005      	beq.n	800e726 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e71a:	4b05      	ldr	r3, [pc, #20]	@ (800e730 <HAL_PCDEx_LPM_Callback+0x68>)
 800e71c:	691b      	ldr	r3, [r3, #16]
 800e71e:	4a04      	ldr	r2, [pc, #16]	@ (800e730 <HAL_PCDEx_LPM_Callback+0x68>)
 800e720:	f043 0306 	orr.w	r3, r3, #6
 800e724:	6113      	str	r3, [r2, #16]
    break;
 800e726:	bf00      	nop
}
 800e728:	bf00      	nop
 800e72a:	3708      	adds	r7, #8
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}
 800e730:	e000ed00 	.word	0xe000ed00

0800e734 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e734:	b480      	push	{r7}
 800e736:	b083      	sub	sp, #12
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e73c:	4b03      	ldr	r3, [pc, #12]	@ (800e74c <USBD_static_malloc+0x18>)
}
 800e73e:	4618      	mov	r0, r3
 800e740:	370c      	adds	r7, #12
 800e742:	46bd      	mov	sp, r7
 800e744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e748:	4770      	bx	lr
 800e74a:	bf00      	nop
 800e74c:	20001eec 	.word	0x20001eec

0800e750 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e750:	b480      	push	{r7}
 800e752:	b083      	sub	sp, #12
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800e758:	bf00      	nop
 800e75a:	370c      	adds	r7, #12
 800e75c:	46bd      	mov	sp, r7
 800e75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e762:	4770      	bx	lr

0800e764 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e768:	f7f2 fc80 	bl	800106c <SystemClock_Config>
}
 800e76c:	bf00      	nop
 800e76e:	bd80      	pop	{r7, pc}

0800e770 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e770:	b480      	push	{r7}
 800e772:	b085      	sub	sp, #20
 800e774:	af00      	add	r7, sp, #0
 800e776:	4603      	mov	r3, r0
 800e778:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e77a:	2300      	movs	r3, #0
 800e77c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e77e:	79fb      	ldrb	r3, [r7, #7]
 800e780:	2b03      	cmp	r3, #3
 800e782:	d817      	bhi.n	800e7b4 <USBD_Get_USB_Status+0x44>
 800e784:	a201      	add	r2, pc, #4	@ (adr r2, 800e78c <USBD_Get_USB_Status+0x1c>)
 800e786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e78a:	bf00      	nop
 800e78c:	0800e79d 	.word	0x0800e79d
 800e790:	0800e7a3 	.word	0x0800e7a3
 800e794:	0800e7a9 	.word	0x0800e7a9
 800e798:	0800e7af 	.word	0x0800e7af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e79c:	2300      	movs	r3, #0
 800e79e:	73fb      	strb	r3, [r7, #15]
    break;
 800e7a0:	e00b      	b.n	800e7ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e7a2:	2303      	movs	r3, #3
 800e7a4:	73fb      	strb	r3, [r7, #15]
    break;
 800e7a6:	e008      	b.n	800e7ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e7a8:	2301      	movs	r3, #1
 800e7aa:	73fb      	strb	r3, [r7, #15]
    break;
 800e7ac:	e005      	b.n	800e7ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e7ae:	2303      	movs	r3, #3
 800e7b0:	73fb      	strb	r3, [r7, #15]
    break;
 800e7b2:	e002      	b.n	800e7ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e7b4:	2303      	movs	r3, #3
 800e7b6:	73fb      	strb	r3, [r7, #15]
    break;
 800e7b8:	bf00      	nop
  }
  return usb_status;
 800e7ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7bc:	4618      	mov	r0, r3
 800e7be:	3714      	adds	r7, #20
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c6:	4770      	bx	lr

0800e7c8 <__cvt>:
 800e7c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e7cc:	ec57 6b10 	vmov	r6, r7, d0
 800e7d0:	2f00      	cmp	r7, #0
 800e7d2:	460c      	mov	r4, r1
 800e7d4:	4619      	mov	r1, r3
 800e7d6:	463b      	mov	r3, r7
 800e7d8:	bfbb      	ittet	lt
 800e7da:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e7de:	461f      	movlt	r7, r3
 800e7e0:	2300      	movge	r3, #0
 800e7e2:	232d      	movlt	r3, #45	@ 0x2d
 800e7e4:	700b      	strb	r3, [r1, #0]
 800e7e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e7e8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e7ec:	4691      	mov	r9, r2
 800e7ee:	f023 0820 	bic.w	r8, r3, #32
 800e7f2:	bfbc      	itt	lt
 800e7f4:	4632      	movlt	r2, r6
 800e7f6:	4616      	movlt	r6, r2
 800e7f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e7fc:	d005      	beq.n	800e80a <__cvt+0x42>
 800e7fe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e802:	d100      	bne.n	800e806 <__cvt+0x3e>
 800e804:	3401      	adds	r4, #1
 800e806:	2102      	movs	r1, #2
 800e808:	e000      	b.n	800e80c <__cvt+0x44>
 800e80a:	2103      	movs	r1, #3
 800e80c:	ab03      	add	r3, sp, #12
 800e80e:	9301      	str	r3, [sp, #4]
 800e810:	ab02      	add	r3, sp, #8
 800e812:	9300      	str	r3, [sp, #0]
 800e814:	ec47 6b10 	vmov	d0, r6, r7
 800e818:	4653      	mov	r3, sl
 800e81a:	4622      	mov	r2, r4
 800e81c:	f000 fe60 	bl	800f4e0 <_dtoa_r>
 800e820:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e824:	4605      	mov	r5, r0
 800e826:	d119      	bne.n	800e85c <__cvt+0x94>
 800e828:	f019 0f01 	tst.w	r9, #1
 800e82c:	d00e      	beq.n	800e84c <__cvt+0x84>
 800e82e:	eb00 0904 	add.w	r9, r0, r4
 800e832:	2200      	movs	r2, #0
 800e834:	2300      	movs	r3, #0
 800e836:	4630      	mov	r0, r6
 800e838:	4639      	mov	r1, r7
 800e83a:	f7f2 f91d 	bl	8000a78 <__aeabi_dcmpeq>
 800e83e:	b108      	cbz	r0, 800e844 <__cvt+0x7c>
 800e840:	f8cd 900c 	str.w	r9, [sp, #12]
 800e844:	2230      	movs	r2, #48	@ 0x30
 800e846:	9b03      	ldr	r3, [sp, #12]
 800e848:	454b      	cmp	r3, r9
 800e84a:	d31e      	bcc.n	800e88a <__cvt+0xc2>
 800e84c:	9b03      	ldr	r3, [sp, #12]
 800e84e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e850:	1b5b      	subs	r3, r3, r5
 800e852:	4628      	mov	r0, r5
 800e854:	6013      	str	r3, [r2, #0]
 800e856:	b004      	add	sp, #16
 800e858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e85c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e860:	eb00 0904 	add.w	r9, r0, r4
 800e864:	d1e5      	bne.n	800e832 <__cvt+0x6a>
 800e866:	7803      	ldrb	r3, [r0, #0]
 800e868:	2b30      	cmp	r3, #48	@ 0x30
 800e86a:	d10a      	bne.n	800e882 <__cvt+0xba>
 800e86c:	2200      	movs	r2, #0
 800e86e:	2300      	movs	r3, #0
 800e870:	4630      	mov	r0, r6
 800e872:	4639      	mov	r1, r7
 800e874:	f7f2 f900 	bl	8000a78 <__aeabi_dcmpeq>
 800e878:	b918      	cbnz	r0, 800e882 <__cvt+0xba>
 800e87a:	f1c4 0401 	rsb	r4, r4, #1
 800e87e:	f8ca 4000 	str.w	r4, [sl]
 800e882:	f8da 3000 	ldr.w	r3, [sl]
 800e886:	4499      	add	r9, r3
 800e888:	e7d3      	b.n	800e832 <__cvt+0x6a>
 800e88a:	1c59      	adds	r1, r3, #1
 800e88c:	9103      	str	r1, [sp, #12]
 800e88e:	701a      	strb	r2, [r3, #0]
 800e890:	e7d9      	b.n	800e846 <__cvt+0x7e>

0800e892 <__exponent>:
 800e892:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e894:	2900      	cmp	r1, #0
 800e896:	bfba      	itte	lt
 800e898:	4249      	neglt	r1, r1
 800e89a:	232d      	movlt	r3, #45	@ 0x2d
 800e89c:	232b      	movge	r3, #43	@ 0x2b
 800e89e:	2909      	cmp	r1, #9
 800e8a0:	7002      	strb	r2, [r0, #0]
 800e8a2:	7043      	strb	r3, [r0, #1]
 800e8a4:	dd29      	ble.n	800e8fa <__exponent+0x68>
 800e8a6:	f10d 0307 	add.w	r3, sp, #7
 800e8aa:	461d      	mov	r5, r3
 800e8ac:	270a      	movs	r7, #10
 800e8ae:	461a      	mov	r2, r3
 800e8b0:	fbb1 f6f7 	udiv	r6, r1, r7
 800e8b4:	fb07 1416 	mls	r4, r7, r6, r1
 800e8b8:	3430      	adds	r4, #48	@ 0x30
 800e8ba:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e8be:	460c      	mov	r4, r1
 800e8c0:	2c63      	cmp	r4, #99	@ 0x63
 800e8c2:	f103 33ff 	add.w	r3, r3, #4294967295
 800e8c6:	4631      	mov	r1, r6
 800e8c8:	dcf1      	bgt.n	800e8ae <__exponent+0x1c>
 800e8ca:	3130      	adds	r1, #48	@ 0x30
 800e8cc:	1e94      	subs	r4, r2, #2
 800e8ce:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e8d2:	1c41      	adds	r1, r0, #1
 800e8d4:	4623      	mov	r3, r4
 800e8d6:	42ab      	cmp	r3, r5
 800e8d8:	d30a      	bcc.n	800e8f0 <__exponent+0x5e>
 800e8da:	f10d 0309 	add.w	r3, sp, #9
 800e8de:	1a9b      	subs	r3, r3, r2
 800e8e0:	42ac      	cmp	r4, r5
 800e8e2:	bf88      	it	hi
 800e8e4:	2300      	movhi	r3, #0
 800e8e6:	3302      	adds	r3, #2
 800e8e8:	4403      	add	r3, r0
 800e8ea:	1a18      	subs	r0, r3, r0
 800e8ec:	b003      	add	sp, #12
 800e8ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8f0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e8f4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e8f8:	e7ed      	b.n	800e8d6 <__exponent+0x44>
 800e8fa:	2330      	movs	r3, #48	@ 0x30
 800e8fc:	3130      	adds	r1, #48	@ 0x30
 800e8fe:	7083      	strb	r3, [r0, #2]
 800e900:	70c1      	strb	r1, [r0, #3]
 800e902:	1d03      	adds	r3, r0, #4
 800e904:	e7f1      	b.n	800e8ea <__exponent+0x58>
	...

0800e908 <_printf_float>:
 800e908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e90c:	b08d      	sub	sp, #52	@ 0x34
 800e90e:	460c      	mov	r4, r1
 800e910:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e914:	4616      	mov	r6, r2
 800e916:	461f      	mov	r7, r3
 800e918:	4605      	mov	r5, r0
 800e91a:	f000 fcd3 	bl	800f2c4 <_localeconv_r>
 800e91e:	6803      	ldr	r3, [r0, #0]
 800e920:	9304      	str	r3, [sp, #16]
 800e922:	4618      	mov	r0, r3
 800e924:	f7f1 fc7c 	bl	8000220 <strlen>
 800e928:	2300      	movs	r3, #0
 800e92a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e92c:	f8d8 3000 	ldr.w	r3, [r8]
 800e930:	9005      	str	r0, [sp, #20]
 800e932:	3307      	adds	r3, #7
 800e934:	f023 0307 	bic.w	r3, r3, #7
 800e938:	f103 0208 	add.w	r2, r3, #8
 800e93c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e940:	f8d4 b000 	ldr.w	fp, [r4]
 800e944:	f8c8 2000 	str.w	r2, [r8]
 800e948:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e94c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e950:	9307      	str	r3, [sp, #28]
 800e952:	f8cd 8018 	str.w	r8, [sp, #24]
 800e956:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e95a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e95e:	4b9c      	ldr	r3, [pc, #624]	@ (800ebd0 <_printf_float+0x2c8>)
 800e960:	f04f 32ff 	mov.w	r2, #4294967295
 800e964:	f7f2 f8ba 	bl	8000adc <__aeabi_dcmpun>
 800e968:	bb70      	cbnz	r0, 800e9c8 <_printf_float+0xc0>
 800e96a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e96e:	4b98      	ldr	r3, [pc, #608]	@ (800ebd0 <_printf_float+0x2c8>)
 800e970:	f04f 32ff 	mov.w	r2, #4294967295
 800e974:	f7f2 f894 	bl	8000aa0 <__aeabi_dcmple>
 800e978:	bb30      	cbnz	r0, 800e9c8 <_printf_float+0xc0>
 800e97a:	2200      	movs	r2, #0
 800e97c:	2300      	movs	r3, #0
 800e97e:	4640      	mov	r0, r8
 800e980:	4649      	mov	r1, r9
 800e982:	f7f2 f883 	bl	8000a8c <__aeabi_dcmplt>
 800e986:	b110      	cbz	r0, 800e98e <_printf_float+0x86>
 800e988:	232d      	movs	r3, #45	@ 0x2d
 800e98a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e98e:	4a91      	ldr	r2, [pc, #580]	@ (800ebd4 <_printf_float+0x2cc>)
 800e990:	4b91      	ldr	r3, [pc, #580]	@ (800ebd8 <_printf_float+0x2d0>)
 800e992:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e996:	bf8c      	ite	hi
 800e998:	4690      	movhi	r8, r2
 800e99a:	4698      	movls	r8, r3
 800e99c:	2303      	movs	r3, #3
 800e99e:	6123      	str	r3, [r4, #16]
 800e9a0:	f02b 0304 	bic.w	r3, fp, #4
 800e9a4:	6023      	str	r3, [r4, #0]
 800e9a6:	f04f 0900 	mov.w	r9, #0
 800e9aa:	9700      	str	r7, [sp, #0]
 800e9ac:	4633      	mov	r3, r6
 800e9ae:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e9b0:	4621      	mov	r1, r4
 800e9b2:	4628      	mov	r0, r5
 800e9b4:	f000 f9d2 	bl	800ed5c <_printf_common>
 800e9b8:	3001      	adds	r0, #1
 800e9ba:	f040 808d 	bne.w	800ead8 <_printf_float+0x1d0>
 800e9be:	f04f 30ff 	mov.w	r0, #4294967295
 800e9c2:	b00d      	add	sp, #52	@ 0x34
 800e9c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9c8:	4642      	mov	r2, r8
 800e9ca:	464b      	mov	r3, r9
 800e9cc:	4640      	mov	r0, r8
 800e9ce:	4649      	mov	r1, r9
 800e9d0:	f7f2 f884 	bl	8000adc <__aeabi_dcmpun>
 800e9d4:	b140      	cbz	r0, 800e9e8 <_printf_float+0xe0>
 800e9d6:	464b      	mov	r3, r9
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	bfbc      	itt	lt
 800e9dc:	232d      	movlt	r3, #45	@ 0x2d
 800e9de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e9e2:	4a7e      	ldr	r2, [pc, #504]	@ (800ebdc <_printf_float+0x2d4>)
 800e9e4:	4b7e      	ldr	r3, [pc, #504]	@ (800ebe0 <_printf_float+0x2d8>)
 800e9e6:	e7d4      	b.n	800e992 <_printf_float+0x8a>
 800e9e8:	6863      	ldr	r3, [r4, #4]
 800e9ea:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e9ee:	9206      	str	r2, [sp, #24]
 800e9f0:	1c5a      	adds	r2, r3, #1
 800e9f2:	d13b      	bne.n	800ea6c <_printf_float+0x164>
 800e9f4:	2306      	movs	r3, #6
 800e9f6:	6063      	str	r3, [r4, #4]
 800e9f8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	6022      	str	r2, [r4, #0]
 800ea00:	9303      	str	r3, [sp, #12]
 800ea02:	ab0a      	add	r3, sp, #40	@ 0x28
 800ea04:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ea08:	ab09      	add	r3, sp, #36	@ 0x24
 800ea0a:	9300      	str	r3, [sp, #0]
 800ea0c:	6861      	ldr	r1, [r4, #4]
 800ea0e:	ec49 8b10 	vmov	d0, r8, r9
 800ea12:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ea16:	4628      	mov	r0, r5
 800ea18:	f7ff fed6 	bl	800e7c8 <__cvt>
 800ea1c:	9b06      	ldr	r3, [sp, #24]
 800ea1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ea20:	2b47      	cmp	r3, #71	@ 0x47
 800ea22:	4680      	mov	r8, r0
 800ea24:	d129      	bne.n	800ea7a <_printf_float+0x172>
 800ea26:	1cc8      	adds	r0, r1, #3
 800ea28:	db02      	blt.n	800ea30 <_printf_float+0x128>
 800ea2a:	6863      	ldr	r3, [r4, #4]
 800ea2c:	4299      	cmp	r1, r3
 800ea2e:	dd41      	ble.n	800eab4 <_printf_float+0x1ac>
 800ea30:	f1aa 0a02 	sub.w	sl, sl, #2
 800ea34:	fa5f fa8a 	uxtb.w	sl, sl
 800ea38:	3901      	subs	r1, #1
 800ea3a:	4652      	mov	r2, sl
 800ea3c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ea40:	9109      	str	r1, [sp, #36]	@ 0x24
 800ea42:	f7ff ff26 	bl	800e892 <__exponent>
 800ea46:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ea48:	1813      	adds	r3, r2, r0
 800ea4a:	2a01      	cmp	r2, #1
 800ea4c:	4681      	mov	r9, r0
 800ea4e:	6123      	str	r3, [r4, #16]
 800ea50:	dc02      	bgt.n	800ea58 <_printf_float+0x150>
 800ea52:	6822      	ldr	r2, [r4, #0]
 800ea54:	07d2      	lsls	r2, r2, #31
 800ea56:	d501      	bpl.n	800ea5c <_printf_float+0x154>
 800ea58:	3301      	adds	r3, #1
 800ea5a:	6123      	str	r3, [r4, #16]
 800ea5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d0a2      	beq.n	800e9aa <_printf_float+0xa2>
 800ea64:	232d      	movs	r3, #45	@ 0x2d
 800ea66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea6a:	e79e      	b.n	800e9aa <_printf_float+0xa2>
 800ea6c:	9a06      	ldr	r2, [sp, #24]
 800ea6e:	2a47      	cmp	r2, #71	@ 0x47
 800ea70:	d1c2      	bne.n	800e9f8 <_printf_float+0xf0>
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d1c0      	bne.n	800e9f8 <_printf_float+0xf0>
 800ea76:	2301      	movs	r3, #1
 800ea78:	e7bd      	b.n	800e9f6 <_printf_float+0xee>
 800ea7a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ea7e:	d9db      	bls.n	800ea38 <_printf_float+0x130>
 800ea80:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ea84:	d118      	bne.n	800eab8 <_printf_float+0x1b0>
 800ea86:	2900      	cmp	r1, #0
 800ea88:	6863      	ldr	r3, [r4, #4]
 800ea8a:	dd0b      	ble.n	800eaa4 <_printf_float+0x19c>
 800ea8c:	6121      	str	r1, [r4, #16]
 800ea8e:	b913      	cbnz	r3, 800ea96 <_printf_float+0x18e>
 800ea90:	6822      	ldr	r2, [r4, #0]
 800ea92:	07d0      	lsls	r0, r2, #31
 800ea94:	d502      	bpl.n	800ea9c <_printf_float+0x194>
 800ea96:	3301      	adds	r3, #1
 800ea98:	440b      	add	r3, r1
 800ea9a:	6123      	str	r3, [r4, #16]
 800ea9c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ea9e:	f04f 0900 	mov.w	r9, #0
 800eaa2:	e7db      	b.n	800ea5c <_printf_float+0x154>
 800eaa4:	b913      	cbnz	r3, 800eaac <_printf_float+0x1a4>
 800eaa6:	6822      	ldr	r2, [r4, #0]
 800eaa8:	07d2      	lsls	r2, r2, #31
 800eaaa:	d501      	bpl.n	800eab0 <_printf_float+0x1a8>
 800eaac:	3302      	adds	r3, #2
 800eaae:	e7f4      	b.n	800ea9a <_printf_float+0x192>
 800eab0:	2301      	movs	r3, #1
 800eab2:	e7f2      	b.n	800ea9a <_printf_float+0x192>
 800eab4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800eab8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eaba:	4299      	cmp	r1, r3
 800eabc:	db05      	blt.n	800eaca <_printf_float+0x1c2>
 800eabe:	6823      	ldr	r3, [r4, #0]
 800eac0:	6121      	str	r1, [r4, #16]
 800eac2:	07d8      	lsls	r0, r3, #31
 800eac4:	d5ea      	bpl.n	800ea9c <_printf_float+0x194>
 800eac6:	1c4b      	adds	r3, r1, #1
 800eac8:	e7e7      	b.n	800ea9a <_printf_float+0x192>
 800eaca:	2900      	cmp	r1, #0
 800eacc:	bfd4      	ite	le
 800eace:	f1c1 0202 	rsble	r2, r1, #2
 800ead2:	2201      	movgt	r2, #1
 800ead4:	4413      	add	r3, r2
 800ead6:	e7e0      	b.n	800ea9a <_printf_float+0x192>
 800ead8:	6823      	ldr	r3, [r4, #0]
 800eada:	055a      	lsls	r2, r3, #21
 800eadc:	d407      	bmi.n	800eaee <_printf_float+0x1e6>
 800eade:	6923      	ldr	r3, [r4, #16]
 800eae0:	4642      	mov	r2, r8
 800eae2:	4631      	mov	r1, r6
 800eae4:	4628      	mov	r0, r5
 800eae6:	47b8      	blx	r7
 800eae8:	3001      	adds	r0, #1
 800eaea:	d12b      	bne.n	800eb44 <_printf_float+0x23c>
 800eaec:	e767      	b.n	800e9be <_printf_float+0xb6>
 800eaee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800eaf2:	f240 80dd 	bls.w	800ecb0 <_printf_float+0x3a8>
 800eaf6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800eafa:	2200      	movs	r2, #0
 800eafc:	2300      	movs	r3, #0
 800eafe:	f7f1 ffbb 	bl	8000a78 <__aeabi_dcmpeq>
 800eb02:	2800      	cmp	r0, #0
 800eb04:	d033      	beq.n	800eb6e <_printf_float+0x266>
 800eb06:	4a37      	ldr	r2, [pc, #220]	@ (800ebe4 <_printf_float+0x2dc>)
 800eb08:	2301      	movs	r3, #1
 800eb0a:	4631      	mov	r1, r6
 800eb0c:	4628      	mov	r0, r5
 800eb0e:	47b8      	blx	r7
 800eb10:	3001      	adds	r0, #1
 800eb12:	f43f af54 	beq.w	800e9be <_printf_float+0xb6>
 800eb16:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800eb1a:	4543      	cmp	r3, r8
 800eb1c:	db02      	blt.n	800eb24 <_printf_float+0x21c>
 800eb1e:	6823      	ldr	r3, [r4, #0]
 800eb20:	07d8      	lsls	r0, r3, #31
 800eb22:	d50f      	bpl.n	800eb44 <_printf_float+0x23c>
 800eb24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eb28:	4631      	mov	r1, r6
 800eb2a:	4628      	mov	r0, r5
 800eb2c:	47b8      	blx	r7
 800eb2e:	3001      	adds	r0, #1
 800eb30:	f43f af45 	beq.w	800e9be <_printf_float+0xb6>
 800eb34:	f04f 0900 	mov.w	r9, #0
 800eb38:	f108 38ff 	add.w	r8, r8, #4294967295
 800eb3c:	f104 0a1a 	add.w	sl, r4, #26
 800eb40:	45c8      	cmp	r8, r9
 800eb42:	dc09      	bgt.n	800eb58 <_printf_float+0x250>
 800eb44:	6823      	ldr	r3, [r4, #0]
 800eb46:	079b      	lsls	r3, r3, #30
 800eb48:	f100 8103 	bmi.w	800ed52 <_printf_float+0x44a>
 800eb4c:	68e0      	ldr	r0, [r4, #12]
 800eb4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eb50:	4298      	cmp	r0, r3
 800eb52:	bfb8      	it	lt
 800eb54:	4618      	movlt	r0, r3
 800eb56:	e734      	b.n	800e9c2 <_printf_float+0xba>
 800eb58:	2301      	movs	r3, #1
 800eb5a:	4652      	mov	r2, sl
 800eb5c:	4631      	mov	r1, r6
 800eb5e:	4628      	mov	r0, r5
 800eb60:	47b8      	blx	r7
 800eb62:	3001      	adds	r0, #1
 800eb64:	f43f af2b 	beq.w	800e9be <_printf_float+0xb6>
 800eb68:	f109 0901 	add.w	r9, r9, #1
 800eb6c:	e7e8      	b.n	800eb40 <_printf_float+0x238>
 800eb6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	dc39      	bgt.n	800ebe8 <_printf_float+0x2e0>
 800eb74:	4a1b      	ldr	r2, [pc, #108]	@ (800ebe4 <_printf_float+0x2dc>)
 800eb76:	2301      	movs	r3, #1
 800eb78:	4631      	mov	r1, r6
 800eb7a:	4628      	mov	r0, r5
 800eb7c:	47b8      	blx	r7
 800eb7e:	3001      	adds	r0, #1
 800eb80:	f43f af1d 	beq.w	800e9be <_printf_float+0xb6>
 800eb84:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800eb88:	ea59 0303 	orrs.w	r3, r9, r3
 800eb8c:	d102      	bne.n	800eb94 <_printf_float+0x28c>
 800eb8e:	6823      	ldr	r3, [r4, #0]
 800eb90:	07d9      	lsls	r1, r3, #31
 800eb92:	d5d7      	bpl.n	800eb44 <_printf_float+0x23c>
 800eb94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eb98:	4631      	mov	r1, r6
 800eb9a:	4628      	mov	r0, r5
 800eb9c:	47b8      	blx	r7
 800eb9e:	3001      	adds	r0, #1
 800eba0:	f43f af0d 	beq.w	800e9be <_printf_float+0xb6>
 800eba4:	f04f 0a00 	mov.w	sl, #0
 800eba8:	f104 0b1a 	add.w	fp, r4, #26
 800ebac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebae:	425b      	negs	r3, r3
 800ebb0:	4553      	cmp	r3, sl
 800ebb2:	dc01      	bgt.n	800ebb8 <_printf_float+0x2b0>
 800ebb4:	464b      	mov	r3, r9
 800ebb6:	e793      	b.n	800eae0 <_printf_float+0x1d8>
 800ebb8:	2301      	movs	r3, #1
 800ebba:	465a      	mov	r2, fp
 800ebbc:	4631      	mov	r1, r6
 800ebbe:	4628      	mov	r0, r5
 800ebc0:	47b8      	blx	r7
 800ebc2:	3001      	adds	r0, #1
 800ebc4:	f43f aefb 	beq.w	800e9be <_printf_float+0xb6>
 800ebc8:	f10a 0a01 	add.w	sl, sl, #1
 800ebcc:	e7ee      	b.n	800ebac <_printf_float+0x2a4>
 800ebce:	bf00      	nop
 800ebd0:	7fefffff 	.word	0x7fefffff
 800ebd4:	080112fc 	.word	0x080112fc
 800ebd8:	080112f8 	.word	0x080112f8
 800ebdc:	08011304 	.word	0x08011304
 800ebe0:	08011300 	.word	0x08011300
 800ebe4:	08011308 	.word	0x08011308
 800ebe8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ebea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ebee:	4553      	cmp	r3, sl
 800ebf0:	bfa8      	it	ge
 800ebf2:	4653      	movge	r3, sl
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	4699      	mov	r9, r3
 800ebf8:	dc36      	bgt.n	800ec68 <_printf_float+0x360>
 800ebfa:	f04f 0b00 	mov.w	fp, #0
 800ebfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ec02:	f104 021a 	add.w	r2, r4, #26
 800ec06:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ec08:	9306      	str	r3, [sp, #24]
 800ec0a:	eba3 0309 	sub.w	r3, r3, r9
 800ec0e:	455b      	cmp	r3, fp
 800ec10:	dc31      	bgt.n	800ec76 <_printf_float+0x36e>
 800ec12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec14:	459a      	cmp	sl, r3
 800ec16:	dc3a      	bgt.n	800ec8e <_printf_float+0x386>
 800ec18:	6823      	ldr	r3, [r4, #0]
 800ec1a:	07da      	lsls	r2, r3, #31
 800ec1c:	d437      	bmi.n	800ec8e <_printf_float+0x386>
 800ec1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec20:	ebaa 0903 	sub.w	r9, sl, r3
 800ec24:	9b06      	ldr	r3, [sp, #24]
 800ec26:	ebaa 0303 	sub.w	r3, sl, r3
 800ec2a:	4599      	cmp	r9, r3
 800ec2c:	bfa8      	it	ge
 800ec2e:	4699      	movge	r9, r3
 800ec30:	f1b9 0f00 	cmp.w	r9, #0
 800ec34:	dc33      	bgt.n	800ec9e <_printf_float+0x396>
 800ec36:	f04f 0800 	mov.w	r8, #0
 800ec3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ec3e:	f104 0b1a 	add.w	fp, r4, #26
 800ec42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec44:	ebaa 0303 	sub.w	r3, sl, r3
 800ec48:	eba3 0309 	sub.w	r3, r3, r9
 800ec4c:	4543      	cmp	r3, r8
 800ec4e:	f77f af79 	ble.w	800eb44 <_printf_float+0x23c>
 800ec52:	2301      	movs	r3, #1
 800ec54:	465a      	mov	r2, fp
 800ec56:	4631      	mov	r1, r6
 800ec58:	4628      	mov	r0, r5
 800ec5a:	47b8      	blx	r7
 800ec5c:	3001      	adds	r0, #1
 800ec5e:	f43f aeae 	beq.w	800e9be <_printf_float+0xb6>
 800ec62:	f108 0801 	add.w	r8, r8, #1
 800ec66:	e7ec      	b.n	800ec42 <_printf_float+0x33a>
 800ec68:	4642      	mov	r2, r8
 800ec6a:	4631      	mov	r1, r6
 800ec6c:	4628      	mov	r0, r5
 800ec6e:	47b8      	blx	r7
 800ec70:	3001      	adds	r0, #1
 800ec72:	d1c2      	bne.n	800ebfa <_printf_float+0x2f2>
 800ec74:	e6a3      	b.n	800e9be <_printf_float+0xb6>
 800ec76:	2301      	movs	r3, #1
 800ec78:	4631      	mov	r1, r6
 800ec7a:	4628      	mov	r0, r5
 800ec7c:	9206      	str	r2, [sp, #24]
 800ec7e:	47b8      	blx	r7
 800ec80:	3001      	adds	r0, #1
 800ec82:	f43f ae9c 	beq.w	800e9be <_printf_float+0xb6>
 800ec86:	9a06      	ldr	r2, [sp, #24]
 800ec88:	f10b 0b01 	add.w	fp, fp, #1
 800ec8c:	e7bb      	b.n	800ec06 <_printf_float+0x2fe>
 800ec8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec92:	4631      	mov	r1, r6
 800ec94:	4628      	mov	r0, r5
 800ec96:	47b8      	blx	r7
 800ec98:	3001      	adds	r0, #1
 800ec9a:	d1c0      	bne.n	800ec1e <_printf_float+0x316>
 800ec9c:	e68f      	b.n	800e9be <_printf_float+0xb6>
 800ec9e:	9a06      	ldr	r2, [sp, #24]
 800eca0:	464b      	mov	r3, r9
 800eca2:	4442      	add	r2, r8
 800eca4:	4631      	mov	r1, r6
 800eca6:	4628      	mov	r0, r5
 800eca8:	47b8      	blx	r7
 800ecaa:	3001      	adds	r0, #1
 800ecac:	d1c3      	bne.n	800ec36 <_printf_float+0x32e>
 800ecae:	e686      	b.n	800e9be <_printf_float+0xb6>
 800ecb0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ecb4:	f1ba 0f01 	cmp.w	sl, #1
 800ecb8:	dc01      	bgt.n	800ecbe <_printf_float+0x3b6>
 800ecba:	07db      	lsls	r3, r3, #31
 800ecbc:	d536      	bpl.n	800ed2c <_printf_float+0x424>
 800ecbe:	2301      	movs	r3, #1
 800ecc0:	4642      	mov	r2, r8
 800ecc2:	4631      	mov	r1, r6
 800ecc4:	4628      	mov	r0, r5
 800ecc6:	47b8      	blx	r7
 800ecc8:	3001      	adds	r0, #1
 800ecca:	f43f ae78 	beq.w	800e9be <_printf_float+0xb6>
 800ecce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ecd2:	4631      	mov	r1, r6
 800ecd4:	4628      	mov	r0, r5
 800ecd6:	47b8      	blx	r7
 800ecd8:	3001      	adds	r0, #1
 800ecda:	f43f ae70 	beq.w	800e9be <_printf_float+0xb6>
 800ecde:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ece2:	2200      	movs	r2, #0
 800ece4:	2300      	movs	r3, #0
 800ece6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ecea:	f7f1 fec5 	bl	8000a78 <__aeabi_dcmpeq>
 800ecee:	b9c0      	cbnz	r0, 800ed22 <_printf_float+0x41a>
 800ecf0:	4653      	mov	r3, sl
 800ecf2:	f108 0201 	add.w	r2, r8, #1
 800ecf6:	4631      	mov	r1, r6
 800ecf8:	4628      	mov	r0, r5
 800ecfa:	47b8      	blx	r7
 800ecfc:	3001      	adds	r0, #1
 800ecfe:	d10c      	bne.n	800ed1a <_printf_float+0x412>
 800ed00:	e65d      	b.n	800e9be <_printf_float+0xb6>
 800ed02:	2301      	movs	r3, #1
 800ed04:	465a      	mov	r2, fp
 800ed06:	4631      	mov	r1, r6
 800ed08:	4628      	mov	r0, r5
 800ed0a:	47b8      	blx	r7
 800ed0c:	3001      	adds	r0, #1
 800ed0e:	f43f ae56 	beq.w	800e9be <_printf_float+0xb6>
 800ed12:	f108 0801 	add.w	r8, r8, #1
 800ed16:	45d0      	cmp	r8, sl
 800ed18:	dbf3      	blt.n	800ed02 <_printf_float+0x3fa>
 800ed1a:	464b      	mov	r3, r9
 800ed1c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ed20:	e6df      	b.n	800eae2 <_printf_float+0x1da>
 800ed22:	f04f 0800 	mov.w	r8, #0
 800ed26:	f104 0b1a 	add.w	fp, r4, #26
 800ed2a:	e7f4      	b.n	800ed16 <_printf_float+0x40e>
 800ed2c:	2301      	movs	r3, #1
 800ed2e:	4642      	mov	r2, r8
 800ed30:	e7e1      	b.n	800ecf6 <_printf_float+0x3ee>
 800ed32:	2301      	movs	r3, #1
 800ed34:	464a      	mov	r2, r9
 800ed36:	4631      	mov	r1, r6
 800ed38:	4628      	mov	r0, r5
 800ed3a:	47b8      	blx	r7
 800ed3c:	3001      	adds	r0, #1
 800ed3e:	f43f ae3e 	beq.w	800e9be <_printf_float+0xb6>
 800ed42:	f108 0801 	add.w	r8, r8, #1
 800ed46:	68e3      	ldr	r3, [r4, #12]
 800ed48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ed4a:	1a5b      	subs	r3, r3, r1
 800ed4c:	4543      	cmp	r3, r8
 800ed4e:	dcf0      	bgt.n	800ed32 <_printf_float+0x42a>
 800ed50:	e6fc      	b.n	800eb4c <_printf_float+0x244>
 800ed52:	f04f 0800 	mov.w	r8, #0
 800ed56:	f104 0919 	add.w	r9, r4, #25
 800ed5a:	e7f4      	b.n	800ed46 <_printf_float+0x43e>

0800ed5c <_printf_common>:
 800ed5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed60:	4616      	mov	r6, r2
 800ed62:	4698      	mov	r8, r3
 800ed64:	688a      	ldr	r2, [r1, #8]
 800ed66:	690b      	ldr	r3, [r1, #16]
 800ed68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ed6c:	4293      	cmp	r3, r2
 800ed6e:	bfb8      	it	lt
 800ed70:	4613      	movlt	r3, r2
 800ed72:	6033      	str	r3, [r6, #0]
 800ed74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ed78:	4607      	mov	r7, r0
 800ed7a:	460c      	mov	r4, r1
 800ed7c:	b10a      	cbz	r2, 800ed82 <_printf_common+0x26>
 800ed7e:	3301      	adds	r3, #1
 800ed80:	6033      	str	r3, [r6, #0]
 800ed82:	6823      	ldr	r3, [r4, #0]
 800ed84:	0699      	lsls	r1, r3, #26
 800ed86:	bf42      	ittt	mi
 800ed88:	6833      	ldrmi	r3, [r6, #0]
 800ed8a:	3302      	addmi	r3, #2
 800ed8c:	6033      	strmi	r3, [r6, #0]
 800ed8e:	6825      	ldr	r5, [r4, #0]
 800ed90:	f015 0506 	ands.w	r5, r5, #6
 800ed94:	d106      	bne.n	800eda4 <_printf_common+0x48>
 800ed96:	f104 0a19 	add.w	sl, r4, #25
 800ed9a:	68e3      	ldr	r3, [r4, #12]
 800ed9c:	6832      	ldr	r2, [r6, #0]
 800ed9e:	1a9b      	subs	r3, r3, r2
 800eda0:	42ab      	cmp	r3, r5
 800eda2:	dc26      	bgt.n	800edf2 <_printf_common+0x96>
 800eda4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800eda8:	6822      	ldr	r2, [r4, #0]
 800edaa:	3b00      	subs	r3, #0
 800edac:	bf18      	it	ne
 800edae:	2301      	movne	r3, #1
 800edb0:	0692      	lsls	r2, r2, #26
 800edb2:	d42b      	bmi.n	800ee0c <_printf_common+0xb0>
 800edb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800edb8:	4641      	mov	r1, r8
 800edba:	4638      	mov	r0, r7
 800edbc:	47c8      	blx	r9
 800edbe:	3001      	adds	r0, #1
 800edc0:	d01e      	beq.n	800ee00 <_printf_common+0xa4>
 800edc2:	6823      	ldr	r3, [r4, #0]
 800edc4:	6922      	ldr	r2, [r4, #16]
 800edc6:	f003 0306 	and.w	r3, r3, #6
 800edca:	2b04      	cmp	r3, #4
 800edcc:	bf02      	ittt	eq
 800edce:	68e5      	ldreq	r5, [r4, #12]
 800edd0:	6833      	ldreq	r3, [r6, #0]
 800edd2:	1aed      	subeq	r5, r5, r3
 800edd4:	68a3      	ldr	r3, [r4, #8]
 800edd6:	bf0c      	ite	eq
 800edd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eddc:	2500      	movne	r5, #0
 800edde:	4293      	cmp	r3, r2
 800ede0:	bfc4      	itt	gt
 800ede2:	1a9b      	subgt	r3, r3, r2
 800ede4:	18ed      	addgt	r5, r5, r3
 800ede6:	2600      	movs	r6, #0
 800ede8:	341a      	adds	r4, #26
 800edea:	42b5      	cmp	r5, r6
 800edec:	d11a      	bne.n	800ee24 <_printf_common+0xc8>
 800edee:	2000      	movs	r0, #0
 800edf0:	e008      	b.n	800ee04 <_printf_common+0xa8>
 800edf2:	2301      	movs	r3, #1
 800edf4:	4652      	mov	r2, sl
 800edf6:	4641      	mov	r1, r8
 800edf8:	4638      	mov	r0, r7
 800edfa:	47c8      	blx	r9
 800edfc:	3001      	adds	r0, #1
 800edfe:	d103      	bne.n	800ee08 <_printf_common+0xac>
 800ee00:	f04f 30ff 	mov.w	r0, #4294967295
 800ee04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee08:	3501      	adds	r5, #1
 800ee0a:	e7c6      	b.n	800ed9a <_printf_common+0x3e>
 800ee0c:	18e1      	adds	r1, r4, r3
 800ee0e:	1c5a      	adds	r2, r3, #1
 800ee10:	2030      	movs	r0, #48	@ 0x30
 800ee12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ee16:	4422      	add	r2, r4
 800ee18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ee1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ee20:	3302      	adds	r3, #2
 800ee22:	e7c7      	b.n	800edb4 <_printf_common+0x58>
 800ee24:	2301      	movs	r3, #1
 800ee26:	4622      	mov	r2, r4
 800ee28:	4641      	mov	r1, r8
 800ee2a:	4638      	mov	r0, r7
 800ee2c:	47c8      	blx	r9
 800ee2e:	3001      	adds	r0, #1
 800ee30:	d0e6      	beq.n	800ee00 <_printf_common+0xa4>
 800ee32:	3601      	adds	r6, #1
 800ee34:	e7d9      	b.n	800edea <_printf_common+0x8e>
	...

0800ee38 <_printf_i>:
 800ee38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ee3c:	7e0f      	ldrb	r7, [r1, #24]
 800ee3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ee40:	2f78      	cmp	r7, #120	@ 0x78
 800ee42:	4691      	mov	r9, r2
 800ee44:	4680      	mov	r8, r0
 800ee46:	460c      	mov	r4, r1
 800ee48:	469a      	mov	sl, r3
 800ee4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ee4e:	d807      	bhi.n	800ee60 <_printf_i+0x28>
 800ee50:	2f62      	cmp	r7, #98	@ 0x62
 800ee52:	d80a      	bhi.n	800ee6a <_printf_i+0x32>
 800ee54:	2f00      	cmp	r7, #0
 800ee56:	f000 80d1 	beq.w	800effc <_printf_i+0x1c4>
 800ee5a:	2f58      	cmp	r7, #88	@ 0x58
 800ee5c:	f000 80b8 	beq.w	800efd0 <_printf_i+0x198>
 800ee60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ee64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ee68:	e03a      	b.n	800eee0 <_printf_i+0xa8>
 800ee6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ee6e:	2b15      	cmp	r3, #21
 800ee70:	d8f6      	bhi.n	800ee60 <_printf_i+0x28>
 800ee72:	a101      	add	r1, pc, #4	@ (adr r1, 800ee78 <_printf_i+0x40>)
 800ee74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ee78:	0800eed1 	.word	0x0800eed1
 800ee7c:	0800eee5 	.word	0x0800eee5
 800ee80:	0800ee61 	.word	0x0800ee61
 800ee84:	0800ee61 	.word	0x0800ee61
 800ee88:	0800ee61 	.word	0x0800ee61
 800ee8c:	0800ee61 	.word	0x0800ee61
 800ee90:	0800eee5 	.word	0x0800eee5
 800ee94:	0800ee61 	.word	0x0800ee61
 800ee98:	0800ee61 	.word	0x0800ee61
 800ee9c:	0800ee61 	.word	0x0800ee61
 800eea0:	0800ee61 	.word	0x0800ee61
 800eea4:	0800efe3 	.word	0x0800efe3
 800eea8:	0800ef0f 	.word	0x0800ef0f
 800eeac:	0800ef9d 	.word	0x0800ef9d
 800eeb0:	0800ee61 	.word	0x0800ee61
 800eeb4:	0800ee61 	.word	0x0800ee61
 800eeb8:	0800f005 	.word	0x0800f005
 800eebc:	0800ee61 	.word	0x0800ee61
 800eec0:	0800ef0f 	.word	0x0800ef0f
 800eec4:	0800ee61 	.word	0x0800ee61
 800eec8:	0800ee61 	.word	0x0800ee61
 800eecc:	0800efa5 	.word	0x0800efa5
 800eed0:	6833      	ldr	r3, [r6, #0]
 800eed2:	1d1a      	adds	r2, r3, #4
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	6032      	str	r2, [r6, #0]
 800eed8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eedc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800eee0:	2301      	movs	r3, #1
 800eee2:	e09c      	b.n	800f01e <_printf_i+0x1e6>
 800eee4:	6833      	ldr	r3, [r6, #0]
 800eee6:	6820      	ldr	r0, [r4, #0]
 800eee8:	1d19      	adds	r1, r3, #4
 800eeea:	6031      	str	r1, [r6, #0]
 800eeec:	0606      	lsls	r6, r0, #24
 800eeee:	d501      	bpl.n	800eef4 <_printf_i+0xbc>
 800eef0:	681d      	ldr	r5, [r3, #0]
 800eef2:	e003      	b.n	800eefc <_printf_i+0xc4>
 800eef4:	0645      	lsls	r5, r0, #25
 800eef6:	d5fb      	bpl.n	800eef0 <_printf_i+0xb8>
 800eef8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800eefc:	2d00      	cmp	r5, #0
 800eefe:	da03      	bge.n	800ef08 <_printf_i+0xd0>
 800ef00:	232d      	movs	r3, #45	@ 0x2d
 800ef02:	426d      	negs	r5, r5
 800ef04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ef08:	4858      	ldr	r0, [pc, #352]	@ (800f06c <_printf_i+0x234>)
 800ef0a:	230a      	movs	r3, #10
 800ef0c:	e011      	b.n	800ef32 <_printf_i+0xfa>
 800ef0e:	6821      	ldr	r1, [r4, #0]
 800ef10:	6833      	ldr	r3, [r6, #0]
 800ef12:	0608      	lsls	r0, r1, #24
 800ef14:	f853 5b04 	ldr.w	r5, [r3], #4
 800ef18:	d402      	bmi.n	800ef20 <_printf_i+0xe8>
 800ef1a:	0649      	lsls	r1, r1, #25
 800ef1c:	bf48      	it	mi
 800ef1e:	b2ad      	uxthmi	r5, r5
 800ef20:	2f6f      	cmp	r7, #111	@ 0x6f
 800ef22:	4852      	ldr	r0, [pc, #328]	@ (800f06c <_printf_i+0x234>)
 800ef24:	6033      	str	r3, [r6, #0]
 800ef26:	bf14      	ite	ne
 800ef28:	230a      	movne	r3, #10
 800ef2a:	2308      	moveq	r3, #8
 800ef2c:	2100      	movs	r1, #0
 800ef2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ef32:	6866      	ldr	r6, [r4, #4]
 800ef34:	60a6      	str	r6, [r4, #8]
 800ef36:	2e00      	cmp	r6, #0
 800ef38:	db05      	blt.n	800ef46 <_printf_i+0x10e>
 800ef3a:	6821      	ldr	r1, [r4, #0]
 800ef3c:	432e      	orrs	r6, r5
 800ef3e:	f021 0104 	bic.w	r1, r1, #4
 800ef42:	6021      	str	r1, [r4, #0]
 800ef44:	d04b      	beq.n	800efde <_printf_i+0x1a6>
 800ef46:	4616      	mov	r6, r2
 800ef48:	fbb5 f1f3 	udiv	r1, r5, r3
 800ef4c:	fb03 5711 	mls	r7, r3, r1, r5
 800ef50:	5dc7      	ldrb	r7, [r0, r7]
 800ef52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ef56:	462f      	mov	r7, r5
 800ef58:	42bb      	cmp	r3, r7
 800ef5a:	460d      	mov	r5, r1
 800ef5c:	d9f4      	bls.n	800ef48 <_printf_i+0x110>
 800ef5e:	2b08      	cmp	r3, #8
 800ef60:	d10b      	bne.n	800ef7a <_printf_i+0x142>
 800ef62:	6823      	ldr	r3, [r4, #0]
 800ef64:	07df      	lsls	r7, r3, #31
 800ef66:	d508      	bpl.n	800ef7a <_printf_i+0x142>
 800ef68:	6923      	ldr	r3, [r4, #16]
 800ef6a:	6861      	ldr	r1, [r4, #4]
 800ef6c:	4299      	cmp	r1, r3
 800ef6e:	bfde      	ittt	le
 800ef70:	2330      	movle	r3, #48	@ 0x30
 800ef72:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ef76:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ef7a:	1b92      	subs	r2, r2, r6
 800ef7c:	6122      	str	r2, [r4, #16]
 800ef7e:	f8cd a000 	str.w	sl, [sp]
 800ef82:	464b      	mov	r3, r9
 800ef84:	aa03      	add	r2, sp, #12
 800ef86:	4621      	mov	r1, r4
 800ef88:	4640      	mov	r0, r8
 800ef8a:	f7ff fee7 	bl	800ed5c <_printf_common>
 800ef8e:	3001      	adds	r0, #1
 800ef90:	d14a      	bne.n	800f028 <_printf_i+0x1f0>
 800ef92:	f04f 30ff 	mov.w	r0, #4294967295
 800ef96:	b004      	add	sp, #16
 800ef98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef9c:	6823      	ldr	r3, [r4, #0]
 800ef9e:	f043 0320 	orr.w	r3, r3, #32
 800efa2:	6023      	str	r3, [r4, #0]
 800efa4:	4832      	ldr	r0, [pc, #200]	@ (800f070 <_printf_i+0x238>)
 800efa6:	2778      	movs	r7, #120	@ 0x78
 800efa8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800efac:	6823      	ldr	r3, [r4, #0]
 800efae:	6831      	ldr	r1, [r6, #0]
 800efb0:	061f      	lsls	r7, r3, #24
 800efb2:	f851 5b04 	ldr.w	r5, [r1], #4
 800efb6:	d402      	bmi.n	800efbe <_printf_i+0x186>
 800efb8:	065f      	lsls	r7, r3, #25
 800efba:	bf48      	it	mi
 800efbc:	b2ad      	uxthmi	r5, r5
 800efbe:	6031      	str	r1, [r6, #0]
 800efc0:	07d9      	lsls	r1, r3, #31
 800efc2:	bf44      	itt	mi
 800efc4:	f043 0320 	orrmi.w	r3, r3, #32
 800efc8:	6023      	strmi	r3, [r4, #0]
 800efca:	b11d      	cbz	r5, 800efd4 <_printf_i+0x19c>
 800efcc:	2310      	movs	r3, #16
 800efce:	e7ad      	b.n	800ef2c <_printf_i+0xf4>
 800efd0:	4826      	ldr	r0, [pc, #152]	@ (800f06c <_printf_i+0x234>)
 800efd2:	e7e9      	b.n	800efa8 <_printf_i+0x170>
 800efd4:	6823      	ldr	r3, [r4, #0]
 800efd6:	f023 0320 	bic.w	r3, r3, #32
 800efda:	6023      	str	r3, [r4, #0]
 800efdc:	e7f6      	b.n	800efcc <_printf_i+0x194>
 800efde:	4616      	mov	r6, r2
 800efe0:	e7bd      	b.n	800ef5e <_printf_i+0x126>
 800efe2:	6833      	ldr	r3, [r6, #0]
 800efe4:	6825      	ldr	r5, [r4, #0]
 800efe6:	6961      	ldr	r1, [r4, #20]
 800efe8:	1d18      	adds	r0, r3, #4
 800efea:	6030      	str	r0, [r6, #0]
 800efec:	062e      	lsls	r6, r5, #24
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	d501      	bpl.n	800eff6 <_printf_i+0x1be>
 800eff2:	6019      	str	r1, [r3, #0]
 800eff4:	e002      	b.n	800effc <_printf_i+0x1c4>
 800eff6:	0668      	lsls	r0, r5, #25
 800eff8:	d5fb      	bpl.n	800eff2 <_printf_i+0x1ba>
 800effa:	8019      	strh	r1, [r3, #0]
 800effc:	2300      	movs	r3, #0
 800effe:	6123      	str	r3, [r4, #16]
 800f000:	4616      	mov	r6, r2
 800f002:	e7bc      	b.n	800ef7e <_printf_i+0x146>
 800f004:	6833      	ldr	r3, [r6, #0]
 800f006:	1d1a      	adds	r2, r3, #4
 800f008:	6032      	str	r2, [r6, #0]
 800f00a:	681e      	ldr	r6, [r3, #0]
 800f00c:	6862      	ldr	r2, [r4, #4]
 800f00e:	2100      	movs	r1, #0
 800f010:	4630      	mov	r0, r6
 800f012:	f7f1 f8b5 	bl	8000180 <memchr>
 800f016:	b108      	cbz	r0, 800f01c <_printf_i+0x1e4>
 800f018:	1b80      	subs	r0, r0, r6
 800f01a:	6060      	str	r0, [r4, #4]
 800f01c:	6863      	ldr	r3, [r4, #4]
 800f01e:	6123      	str	r3, [r4, #16]
 800f020:	2300      	movs	r3, #0
 800f022:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f026:	e7aa      	b.n	800ef7e <_printf_i+0x146>
 800f028:	6923      	ldr	r3, [r4, #16]
 800f02a:	4632      	mov	r2, r6
 800f02c:	4649      	mov	r1, r9
 800f02e:	4640      	mov	r0, r8
 800f030:	47d0      	blx	sl
 800f032:	3001      	adds	r0, #1
 800f034:	d0ad      	beq.n	800ef92 <_printf_i+0x15a>
 800f036:	6823      	ldr	r3, [r4, #0]
 800f038:	079b      	lsls	r3, r3, #30
 800f03a:	d413      	bmi.n	800f064 <_printf_i+0x22c>
 800f03c:	68e0      	ldr	r0, [r4, #12]
 800f03e:	9b03      	ldr	r3, [sp, #12]
 800f040:	4298      	cmp	r0, r3
 800f042:	bfb8      	it	lt
 800f044:	4618      	movlt	r0, r3
 800f046:	e7a6      	b.n	800ef96 <_printf_i+0x15e>
 800f048:	2301      	movs	r3, #1
 800f04a:	4632      	mov	r2, r6
 800f04c:	4649      	mov	r1, r9
 800f04e:	4640      	mov	r0, r8
 800f050:	47d0      	blx	sl
 800f052:	3001      	adds	r0, #1
 800f054:	d09d      	beq.n	800ef92 <_printf_i+0x15a>
 800f056:	3501      	adds	r5, #1
 800f058:	68e3      	ldr	r3, [r4, #12]
 800f05a:	9903      	ldr	r1, [sp, #12]
 800f05c:	1a5b      	subs	r3, r3, r1
 800f05e:	42ab      	cmp	r3, r5
 800f060:	dcf2      	bgt.n	800f048 <_printf_i+0x210>
 800f062:	e7eb      	b.n	800f03c <_printf_i+0x204>
 800f064:	2500      	movs	r5, #0
 800f066:	f104 0619 	add.w	r6, r4, #25
 800f06a:	e7f5      	b.n	800f058 <_printf_i+0x220>
 800f06c:	0801130a 	.word	0x0801130a
 800f070:	0801131b 	.word	0x0801131b

0800f074 <std>:
 800f074:	2300      	movs	r3, #0
 800f076:	b510      	push	{r4, lr}
 800f078:	4604      	mov	r4, r0
 800f07a:	e9c0 3300 	strd	r3, r3, [r0]
 800f07e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f082:	6083      	str	r3, [r0, #8]
 800f084:	8181      	strh	r1, [r0, #12]
 800f086:	6643      	str	r3, [r0, #100]	@ 0x64
 800f088:	81c2      	strh	r2, [r0, #14]
 800f08a:	6183      	str	r3, [r0, #24]
 800f08c:	4619      	mov	r1, r3
 800f08e:	2208      	movs	r2, #8
 800f090:	305c      	adds	r0, #92	@ 0x5c
 800f092:	f000 f90e 	bl	800f2b2 <memset>
 800f096:	4b0d      	ldr	r3, [pc, #52]	@ (800f0cc <std+0x58>)
 800f098:	6263      	str	r3, [r4, #36]	@ 0x24
 800f09a:	4b0d      	ldr	r3, [pc, #52]	@ (800f0d0 <std+0x5c>)
 800f09c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f09e:	4b0d      	ldr	r3, [pc, #52]	@ (800f0d4 <std+0x60>)
 800f0a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f0a2:	4b0d      	ldr	r3, [pc, #52]	@ (800f0d8 <std+0x64>)
 800f0a4:	6323      	str	r3, [r4, #48]	@ 0x30
 800f0a6:	4b0d      	ldr	r3, [pc, #52]	@ (800f0dc <std+0x68>)
 800f0a8:	6224      	str	r4, [r4, #32]
 800f0aa:	429c      	cmp	r4, r3
 800f0ac:	d006      	beq.n	800f0bc <std+0x48>
 800f0ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f0b2:	4294      	cmp	r4, r2
 800f0b4:	d002      	beq.n	800f0bc <std+0x48>
 800f0b6:	33d0      	adds	r3, #208	@ 0xd0
 800f0b8:	429c      	cmp	r4, r3
 800f0ba:	d105      	bne.n	800f0c8 <std+0x54>
 800f0bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f0c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0c4:	f000 b972 	b.w	800f3ac <__retarget_lock_init_recursive>
 800f0c8:	bd10      	pop	{r4, pc}
 800f0ca:	bf00      	nop
 800f0cc:	0800f22d 	.word	0x0800f22d
 800f0d0:	0800f24f 	.word	0x0800f24f
 800f0d4:	0800f287 	.word	0x0800f287
 800f0d8:	0800f2ab 	.word	0x0800f2ab
 800f0dc:	2000210c 	.word	0x2000210c

0800f0e0 <stdio_exit_handler>:
 800f0e0:	4a02      	ldr	r2, [pc, #8]	@ (800f0ec <stdio_exit_handler+0xc>)
 800f0e2:	4903      	ldr	r1, [pc, #12]	@ (800f0f0 <stdio_exit_handler+0x10>)
 800f0e4:	4803      	ldr	r0, [pc, #12]	@ (800f0f4 <stdio_exit_handler+0x14>)
 800f0e6:	f000 b869 	b.w	800f1bc <_fwalk_sglue>
 800f0ea:	bf00      	nop
 800f0ec:	20000124 	.word	0x20000124
 800f0f0:	08010d01 	.word	0x08010d01
 800f0f4:	20000134 	.word	0x20000134

0800f0f8 <cleanup_stdio>:
 800f0f8:	6841      	ldr	r1, [r0, #4]
 800f0fa:	4b0c      	ldr	r3, [pc, #48]	@ (800f12c <cleanup_stdio+0x34>)
 800f0fc:	4299      	cmp	r1, r3
 800f0fe:	b510      	push	{r4, lr}
 800f100:	4604      	mov	r4, r0
 800f102:	d001      	beq.n	800f108 <cleanup_stdio+0x10>
 800f104:	f001 fdfc 	bl	8010d00 <_fflush_r>
 800f108:	68a1      	ldr	r1, [r4, #8]
 800f10a:	4b09      	ldr	r3, [pc, #36]	@ (800f130 <cleanup_stdio+0x38>)
 800f10c:	4299      	cmp	r1, r3
 800f10e:	d002      	beq.n	800f116 <cleanup_stdio+0x1e>
 800f110:	4620      	mov	r0, r4
 800f112:	f001 fdf5 	bl	8010d00 <_fflush_r>
 800f116:	68e1      	ldr	r1, [r4, #12]
 800f118:	4b06      	ldr	r3, [pc, #24]	@ (800f134 <cleanup_stdio+0x3c>)
 800f11a:	4299      	cmp	r1, r3
 800f11c:	d004      	beq.n	800f128 <cleanup_stdio+0x30>
 800f11e:	4620      	mov	r0, r4
 800f120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f124:	f001 bdec 	b.w	8010d00 <_fflush_r>
 800f128:	bd10      	pop	{r4, pc}
 800f12a:	bf00      	nop
 800f12c:	2000210c 	.word	0x2000210c
 800f130:	20002174 	.word	0x20002174
 800f134:	200021dc 	.word	0x200021dc

0800f138 <global_stdio_init.part.0>:
 800f138:	b510      	push	{r4, lr}
 800f13a:	4b0b      	ldr	r3, [pc, #44]	@ (800f168 <global_stdio_init.part.0+0x30>)
 800f13c:	4c0b      	ldr	r4, [pc, #44]	@ (800f16c <global_stdio_init.part.0+0x34>)
 800f13e:	4a0c      	ldr	r2, [pc, #48]	@ (800f170 <global_stdio_init.part.0+0x38>)
 800f140:	601a      	str	r2, [r3, #0]
 800f142:	4620      	mov	r0, r4
 800f144:	2200      	movs	r2, #0
 800f146:	2104      	movs	r1, #4
 800f148:	f7ff ff94 	bl	800f074 <std>
 800f14c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f150:	2201      	movs	r2, #1
 800f152:	2109      	movs	r1, #9
 800f154:	f7ff ff8e 	bl	800f074 <std>
 800f158:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f15c:	2202      	movs	r2, #2
 800f15e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f162:	2112      	movs	r1, #18
 800f164:	f7ff bf86 	b.w	800f074 <std>
 800f168:	20002244 	.word	0x20002244
 800f16c:	2000210c 	.word	0x2000210c
 800f170:	0800f0e1 	.word	0x0800f0e1

0800f174 <__sfp_lock_acquire>:
 800f174:	4801      	ldr	r0, [pc, #4]	@ (800f17c <__sfp_lock_acquire+0x8>)
 800f176:	f000 b91a 	b.w	800f3ae <__retarget_lock_acquire_recursive>
 800f17a:	bf00      	nop
 800f17c:	2000224d 	.word	0x2000224d

0800f180 <__sfp_lock_release>:
 800f180:	4801      	ldr	r0, [pc, #4]	@ (800f188 <__sfp_lock_release+0x8>)
 800f182:	f000 b915 	b.w	800f3b0 <__retarget_lock_release_recursive>
 800f186:	bf00      	nop
 800f188:	2000224d 	.word	0x2000224d

0800f18c <__sinit>:
 800f18c:	b510      	push	{r4, lr}
 800f18e:	4604      	mov	r4, r0
 800f190:	f7ff fff0 	bl	800f174 <__sfp_lock_acquire>
 800f194:	6a23      	ldr	r3, [r4, #32]
 800f196:	b11b      	cbz	r3, 800f1a0 <__sinit+0x14>
 800f198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f19c:	f7ff bff0 	b.w	800f180 <__sfp_lock_release>
 800f1a0:	4b04      	ldr	r3, [pc, #16]	@ (800f1b4 <__sinit+0x28>)
 800f1a2:	6223      	str	r3, [r4, #32]
 800f1a4:	4b04      	ldr	r3, [pc, #16]	@ (800f1b8 <__sinit+0x2c>)
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d1f5      	bne.n	800f198 <__sinit+0xc>
 800f1ac:	f7ff ffc4 	bl	800f138 <global_stdio_init.part.0>
 800f1b0:	e7f2      	b.n	800f198 <__sinit+0xc>
 800f1b2:	bf00      	nop
 800f1b4:	0800f0f9 	.word	0x0800f0f9
 800f1b8:	20002244 	.word	0x20002244

0800f1bc <_fwalk_sglue>:
 800f1bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1c0:	4607      	mov	r7, r0
 800f1c2:	4688      	mov	r8, r1
 800f1c4:	4614      	mov	r4, r2
 800f1c6:	2600      	movs	r6, #0
 800f1c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f1cc:	f1b9 0901 	subs.w	r9, r9, #1
 800f1d0:	d505      	bpl.n	800f1de <_fwalk_sglue+0x22>
 800f1d2:	6824      	ldr	r4, [r4, #0]
 800f1d4:	2c00      	cmp	r4, #0
 800f1d6:	d1f7      	bne.n	800f1c8 <_fwalk_sglue+0xc>
 800f1d8:	4630      	mov	r0, r6
 800f1da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1de:	89ab      	ldrh	r3, [r5, #12]
 800f1e0:	2b01      	cmp	r3, #1
 800f1e2:	d907      	bls.n	800f1f4 <_fwalk_sglue+0x38>
 800f1e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f1e8:	3301      	adds	r3, #1
 800f1ea:	d003      	beq.n	800f1f4 <_fwalk_sglue+0x38>
 800f1ec:	4629      	mov	r1, r5
 800f1ee:	4638      	mov	r0, r7
 800f1f0:	47c0      	blx	r8
 800f1f2:	4306      	orrs	r6, r0
 800f1f4:	3568      	adds	r5, #104	@ 0x68
 800f1f6:	e7e9      	b.n	800f1cc <_fwalk_sglue+0x10>

0800f1f8 <iprintf>:
 800f1f8:	b40f      	push	{r0, r1, r2, r3}
 800f1fa:	b507      	push	{r0, r1, r2, lr}
 800f1fc:	4906      	ldr	r1, [pc, #24]	@ (800f218 <iprintf+0x20>)
 800f1fe:	ab04      	add	r3, sp, #16
 800f200:	6808      	ldr	r0, [r1, #0]
 800f202:	f853 2b04 	ldr.w	r2, [r3], #4
 800f206:	6881      	ldr	r1, [r0, #8]
 800f208:	9301      	str	r3, [sp, #4]
 800f20a:	f001 fbdd 	bl	80109c8 <_vfiprintf_r>
 800f20e:	b003      	add	sp, #12
 800f210:	f85d eb04 	ldr.w	lr, [sp], #4
 800f214:	b004      	add	sp, #16
 800f216:	4770      	bx	lr
 800f218:	20000130 	.word	0x20000130

0800f21c <putchar>:
 800f21c:	4b02      	ldr	r3, [pc, #8]	@ (800f228 <putchar+0xc>)
 800f21e:	4601      	mov	r1, r0
 800f220:	6818      	ldr	r0, [r3, #0]
 800f222:	6882      	ldr	r2, [r0, #8]
 800f224:	f001 bd94 	b.w	8010d50 <_putc_r>
 800f228:	20000130 	.word	0x20000130

0800f22c <__sread>:
 800f22c:	b510      	push	{r4, lr}
 800f22e:	460c      	mov	r4, r1
 800f230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f234:	f000 f86c 	bl	800f310 <_read_r>
 800f238:	2800      	cmp	r0, #0
 800f23a:	bfab      	itete	ge
 800f23c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f23e:	89a3      	ldrhlt	r3, [r4, #12]
 800f240:	181b      	addge	r3, r3, r0
 800f242:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f246:	bfac      	ite	ge
 800f248:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f24a:	81a3      	strhlt	r3, [r4, #12]
 800f24c:	bd10      	pop	{r4, pc}

0800f24e <__swrite>:
 800f24e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f252:	461f      	mov	r7, r3
 800f254:	898b      	ldrh	r3, [r1, #12]
 800f256:	05db      	lsls	r3, r3, #23
 800f258:	4605      	mov	r5, r0
 800f25a:	460c      	mov	r4, r1
 800f25c:	4616      	mov	r6, r2
 800f25e:	d505      	bpl.n	800f26c <__swrite+0x1e>
 800f260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f264:	2302      	movs	r3, #2
 800f266:	2200      	movs	r2, #0
 800f268:	f000 f840 	bl	800f2ec <_lseek_r>
 800f26c:	89a3      	ldrh	r3, [r4, #12]
 800f26e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f272:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f276:	81a3      	strh	r3, [r4, #12]
 800f278:	4632      	mov	r2, r6
 800f27a:	463b      	mov	r3, r7
 800f27c:	4628      	mov	r0, r5
 800f27e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f282:	f000 b857 	b.w	800f334 <_write_r>

0800f286 <__sseek>:
 800f286:	b510      	push	{r4, lr}
 800f288:	460c      	mov	r4, r1
 800f28a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f28e:	f000 f82d 	bl	800f2ec <_lseek_r>
 800f292:	1c43      	adds	r3, r0, #1
 800f294:	89a3      	ldrh	r3, [r4, #12]
 800f296:	bf15      	itete	ne
 800f298:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f29a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f29e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f2a2:	81a3      	strheq	r3, [r4, #12]
 800f2a4:	bf18      	it	ne
 800f2a6:	81a3      	strhne	r3, [r4, #12]
 800f2a8:	bd10      	pop	{r4, pc}

0800f2aa <__sclose>:
 800f2aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2ae:	f000 b80d 	b.w	800f2cc <_close_r>

0800f2b2 <memset>:
 800f2b2:	4402      	add	r2, r0
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	4293      	cmp	r3, r2
 800f2b8:	d100      	bne.n	800f2bc <memset+0xa>
 800f2ba:	4770      	bx	lr
 800f2bc:	f803 1b01 	strb.w	r1, [r3], #1
 800f2c0:	e7f9      	b.n	800f2b6 <memset+0x4>
	...

0800f2c4 <_localeconv_r>:
 800f2c4:	4800      	ldr	r0, [pc, #0]	@ (800f2c8 <_localeconv_r+0x4>)
 800f2c6:	4770      	bx	lr
 800f2c8:	20000270 	.word	0x20000270

0800f2cc <_close_r>:
 800f2cc:	b538      	push	{r3, r4, r5, lr}
 800f2ce:	4d06      	ldr	r5, [pc, #24]	@ (800f2e8 <_close_r+0x1c>)
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	4604      	mov	r4, r0
 800f2d4:	4608      	mov	r0, r1
 800f2d6:	602b      	str	r3, [r5, #0]
 800f2d8:	f7f2 fac8 	bl	800186c <_close>
 800f2dc:	1c43      	adds	r3, r0, #1
 800f2de:	d102      	bne.n	800f2e6 <_close_r+0x1a>
 800f2e0:	682b      	ldr	r3, [r5, #0]
 800f2e2:	b103      	cbz	r3, 800f2e6 <_close_r+0x1a>
 800f2e4:	6023      	str	r3, [r4, #0]
 800f2e6:	bd38      	pop	{r3, r4, r5, pc}
 800f2e8:	20002248 	.word	0x20002248

0800f2ec <_lseek_r>:
 800f2ec:	b538      	push	{r3, r4, r5, lr}
 800f2ee:	4d07      	ldr	r5, [pc, #28]	@ (800f30c <_lseek_r+0x20>)
 800f2f0:	4604      	mov	r4, r0
 800f2f2:	4608      	mov	r0, r1
 800f2f4:	4611      	mov	r1, r2
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	602a      	str	r2, [r5, #0]
 800f2fa:	461a      	mov	r2, r3
 800f2fc:	f7f2 fadd 	bl	80018ba <_lseek>
 800f300:	1c43      	adds	r3, r0, #1
 800f302:	d102      	bne.n	800f30a <_lseek_r+0x1e>
 800f304:	682b      	ldr	r3, [r5, #0]
 800f306:	b103      	cbz	r3, 800f30a <_lseek_r+0x1e>
 800f308:	6023      	str	r3, [r4, #0]
 800f30a:	bd38      	pop	{r3, r4, r5, pc}
 800f30c:	20002248 	.word	0x20002248

0800f310 <_read_r>:
 800f310:	b538      	push	{r3, r4, r5, lr}
 800f312:	4d07      	ldr	r5, [pc, #28]	@ (800f330 <_read_r+0x20>)
 800f314:	4604      	mov	r4, r0
 800f316:	4608      	mov	r0, r1
 800f318:	4611      	mov	r1, r2
 800f31a:	2200      	movs	r2, #0
 800f31c:	602a      	str	r2, [r5, #0]
 800f31e:	461a      	mov	r2, r3
 800f320:	f7f2 fa6b 	bl	80017fa <_read>
 800f324:	1c43      	adds	r3, r0, #1
 800f326:	d102      	bne.n	800f32e <_read_r+0x1e>
 800f328:	682b      	ldr	r3, [r5, #0]
 800f32a:	b103      	cbz	r3, 800f32e <_read_r+0x1e>
 800f32c:	6023      	str	r3, [r4, #0]
 800f32e:	bd38      	pop	{r3, r4, r5, pc}
 800f330:	20002248 	.word	0x20002248

0800f334 <_write_r>:
 800f334:	b538      	push	{r3, r4, r5, lr}
 800f336:	4d07      	ldr	r5, [pc, #28]	@ (800f354 <_write_r+0x20>)
 800f338:	4604      	mov	r4, r0
 800f33a:	4608      	mov	r0, r1
 800f33c:	4611      	mov	r1, r2
 800f33e:	2200      	movs	r2, #0
 800f340:	602a      	str	r2, [r5, #0]
 800f342:	461a      	mov	r2, r3
 800f344:	f7f2 fa76 	bl	8001834 <_write>
 800f348:	1c43      	adds	r3, r0, #1
 800f34a:	d102      	bne.n	800f352 <_write_r+0x1e>
 800f34c:	682b      	ldr	r3, [r5, #0]
 800f34e:	b103      	cbz	r3, 800f352 <_write_r+0x1e>
 800f350:	6023      	str	r3, [r4, #0]
 800f352:	bd38      	pop	{r3, r4, r5, pc}
 800f354:	20002248 	.word	0x20002248

0800f358 <__errno>:
 800f358:	4b01      	ldr	r3, [pc, #4]	@ (800f360 <__errno+0x8>)
 800f35a:	6818      	ldr	r0, [r3, #0]
 800f35c:	4770      	bx	lr
 800f35e:	bf00      	nop
 800f360:	20000130 	.word	0x20000130

0800f364 <__libc_init_array>:
 800f364:	b570      	push	{r4, r5, r6, lr}
 800f366:	4d0d      	ldr	r5, [pc, #52]	@ (800f39c <__libc_init_array+0x38>)
 800f368:	4c0d      	ldr	r4, [pc, #52]	@ (800f3a0 <__libc_init_array+0x3c>)
 800f36a:	1b64      	subs	r4, r4, r5
 800f36c:	10a4      	asrs	r4, r4, #2
 800f36e:	2600      	movs	r6, #0
 800f370:	42a6      	cmp	r6, r4
 800f372:	d109      	bne.n	800f388 <__libc_init_array+0x24>
 800f374:	4d0b      	ldr	r5, [pc, #44]	@ (800f3a4 <__libc_init_array+0x40>)
 800f376:	4c0c      	ldr	r4, [pc, #48]	@ (800f3a8 <__libc_init_array+0x44>)
 800f378:	f001 fef6 	bl	8011168 <_init>
 800f37c:	1b64      	subs	r4, r4, r5
 800f37e:	10a4      	asrs	r4, r4, #2
 800f380:	2600      	movs	r6, #0
 800f382:	42a6      	cmp	r6, r4
 800f384:	d105      	bne.n	800f392 <__libc_init_array+0x2e>
 800f386:	bd70      	pop	{r4, r5, r6, pc}
 800f388:	f855 3b04 	ldr.w	r3, [r5], #4
 800f38c:	4798      	blx	r3
 800f38e:	3601      	adds	r6, #1
 800f390:	e7ee      	b.n	800f370 <__libc_init_array+0xc>
 800f392:	f855 3b04 	ldr.w	r3, [r5], #4
 800f396:	4798      	blx	r3
 800f398:	3601      	adds	r6, #1
 800f39a:	e7f2      	b.n	800f382 <__libc_init_array+0x1e>
 800f39c:	08011674 	.word	0x08011674
 800f3a0:	08011674 	.word	0x08011674
 800f3a4:	08011674 	.word	0x08011674
 800f3a8:	08011678 	.word	0x08011678

0800f3ac <__retarget_lock_init_recursive>:
 800f3ac:	4770      	bx	lr

0800f3ae <__retarget_lock_acquire_recursive>:
 800f3ae:	4770      	bx	lr

0800f3b0 <__retarget_lock_release_recursive>:
 800f3b0:	4770      	bx	lr

0800f3b2 <memcpy>:
 800f3b2:	440a      	add	r2, r1
 800f3b4:	4291      	cmp	r1, r2
 800f3b6:	f100 33ff 	add.w	r3, r0, #4294967295
 800f3ba:	d100      	bne.n	800f3be <memcpy+0xc>
 800f3bc:	4770      	bx	lr
 800f3be:	b510      	push	{r4, lr}
 800f3c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f3c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f3c8:	4291      	cmp	r1, r2
 800f3ca:	d1f9      	bne.n	800f3c0 <memcpy+0xe>
 800f3cc:	bd10      	pop	{r4, pc}

0800f3ce <quorem>:
 800f3ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3d2:	6903      	ldr	r3, [r0, #16]
 800f3d4:	690c      	ldr	r4, [r1, #16]
 800f3d6:	42a3      	cmp	r3, r4
 800f3d8:	4607      	mov	r7, r0
 800f3da:	db7e      	blt.n	800f4da <quorem+0x10c>
 800f3dc:	3c01      	subs	r4, #1
 800f3de:	f101 0814 	add.w	r8, r1, #20
 800f3e2:	00a3      	lsls	r3, r4, #2
 800f3e4:	f100 0514 	add.w	r5, r0, #20
 800f3e8:	9300      	str	r3, [sp, #0]
 800f3ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f3ee:	9301      	str	r3, [sp, #4]
 800f3f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f3f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f3f8:	3301      	adds	r3, #1
 800f3fa:	429a      	cmp	r2, r3
 800f3fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f400:	fbb2 f6f3 	udiv	r6, r2, r3
 800f404:	d32e      	bcc.n	800f464 <quorem+0x96>
 800f406:	f04f 0a00 	mov.w	sl, #0
 800f40a:	46c4      	mov	ip, r8
 800f40c:	46ae      	mov	lr, r5
 800f40e:	46d3      	mov	fp, sl
 800f410:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f414:	b298      	uxth	r0, r3
 800f416:	fb06 a000 	mla	r0, r6, r0, sl
 800f41a:	0c02      	lsrs	r2, r0, #16
 800f41c:	0c1b      	lsrs	r3, r3, #16
 800f41e:	fb06 2303 	mla	r3, r6, r3, r2
 800f422:	f8de 2000 	ldr.w	r2, [lr]
 800f426:	b280      	uxth	r0, r0
 800f428:	b292      	uxth	r2, r2
 800f42a:	1a12      	subs	r2, r2, r0
 800f42c:	445a      	add	r2, fp
 800f42e:	f8de 0000 	ldr.w	r0, [lr]
 800f432:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f436:	b29b      	uxth	r3, r3
 800f438:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f43c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f440:	b292      	uxth	r2, r2
 800f442:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f446:	45e1      	cmp	r9, ip
 800f448:	f84e 2b04 	str.w	r2, [lr], #4
 800f44c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f450:	d2de      	bcs.n	800f410 <quorem+0x42>
 800f452:	9b00      	ldr	r3, [sp, #0]
 800f454:	58eb      	ldr	r3, [r5, r3]
 800f456:	b92b      	cbnz	r3, 800f464 <quorem+0x96>
 800f458:	9b01      	ldr	r3, [sp, #4]
 800f45a:	3b04      	subs	r3, #4
 800f45c:	429d      	cmp	r5, r3
 800f45e:	461a      	mov	r2, r3
 800f460:	d32f      	bcc.n	800f4c2 <quorem+0xf4>
 800f462:	613c      	str	r4, [r7, #16]
 800f464:	4638      	mov	r0, r7
 800f466:	f001 f97d 	bl	8010764 <__mcmp>
 800f46a:	2800      	cmp	r0, #0
 800f46c:	db25      	blt.n	800f4ba <quorem+0xec>
 800f46e:	4629      	mov	r1, r5
 800f470:	2000      	movs	r0, #0
 800f472:	f858 2b04 	ldr.w	r2, [r8], #4
 800f476:	f8d1 c000 	ldr.w	ip, [r1]
 800f47a:	fa1f fe82 	uxth.w	lr, r2
 800f47e:	fa1f f38c 	uxth.w	r3, ip
 800f482:	eba3 030e 	sub.w	r3, r3, lr
 800f486:	4403      	add	r3, r0
 800f488:	0c12      	lsrs	r2, r2, #16
 800f48a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f48e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f492:	b29b      	uxth	r3, r3
 800f494:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f498:	45c1      	cmp	r9, r8
 800f49a:	f841 3b04 	str.w	r3, [r1], #4
 800f49e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f4a2:	d2e6      	bcs.n	800f472 <quorem+0xa4>
 800f4a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f4a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f4ac:	b922      	cbnz	r2, 800f4b8 <quorem+0xea>
 800f4ae:	3b04      	subs	r3, #4
 800f4b0:	429d      	cmp	r5, r3
 800f4b2:	461a      	mov	r2, r3
 800f4b4:	d30b      	bcc.n	800f4ce <quorem+0x100>
 800f4b6:	613c      	str	r4, [r7, #16]
 800f4b8:	3601      	adds	r6, #1
 800f4ba:	4630      	mov	r0, r6
 800f4bc:	b003      	add	sp, #12
 800f4be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4c2:	6812      	ldr	r2, [r2, #0]
 800f4c4:	3b04      	subs	r3, #4
 800f4c6:	2a00      	cmp	r2, #0
 800f4c8:	d1cb      	bne.n	800f462 <quorem+0x94>
 800f4ca:	3c01      	subs	r4, #1
 800f4cc:	e7c6      	b.n	800f45c <quorem+0x8e>
 800f4ce:	6812      	ldr	r2, [r2, #0]
 800f4d0:	3b04      	subs	r3, #4
 800f4d2:	2a00      	cmp	r2, #0
 800f4d4:	d1ef      	bne.n	800f4b6 <quorem+0xe8>
 800f4d6:	3c01      	subs	r4, #1
 800f4d8:	e7ea      	b.n	800f4b0 <quorem+0xe2>
 800f4da:	2000      	movs	r0, #0
 800f4dc:	e7ee      	b.n	800f4bc <quorem+0xee>
	...

0800f4e0 <_dtoa_r>:
 800f4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4e4:	69c7      	ldr	r7, [r0, #28]
 800f4e6:	b097      	sub	sp, #92	@ 0x5c
 800f4e8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800f4ec:	ec55 4b10 	vmov	r4, r5, d0
 800f4f0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800f4f2:	9107      	str	r1, [sp, #28]
 800f4f4:	4681      	mov	r9, r0
 800f4f6:	920c      	str	r2, [sp, #48]	@ 0x30
 800f4f8:	9311      	str	r3, [sp, #68]	@ 0x44
 800f4fa:	b97f      	cbnz	r7, 800f51c <_dtoa_r+0x3c>
 800f4fc:	2010      	movs	r0, #16
 800f4fe:	f000 fe09 	bl	8010114 <malloc>
 800f502:	4602      	mov	r2, r0
 800f504:	f8c9 001c 	str.w	r0, [r9, #28]
 800f508:	b920      	cbnz	r0, 800f514 <_dtoa_r+0x34>
 800f50a:	4ba9      	ldr	r3, [pc, #676]	@ (800f7b0 <_dtoa_r+0x2d0>)
 800f50c:	21ef      	movs	r1, #239	@ 0xef
 800f50e:	48a9      	ldr	r0, [pc, #676]	@ (800f7b4 <_dtoa_r+0x2d4>)
 800f510:	f001 fcf6 	bl	8010f00 <__assert_func>
 800f514:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f518:	6007      	str	r7, [r0, #0]
 800f51a:	60c7      	str	r7, [r0, #12]
 800f51c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f520:	6819      	ldr	r1, [r3, #0]
 800f522:	b159      	cbz	r1, 800f53c <_dtoa_r+0x5c>
 800f524:	685a      	ldr	r2, [r3, #4]
 800f526:	604a      	str	r2, [r1, #4]
 800f528:	2301      	movs	r3, #1
 800f52a:	4093      	lsls	r3, r2
 800f52c:	608b      	str	r3, [r1, #8]
 800f52e:	4648      	mov	r0, r9
 800f530:	f000 fee6 	bl	8010300 <_Bfree>
 800f534:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f538:	2200      	movs	r2, #0
 800f53a:	601a      	str	r2, [r3, #0]
 800f53c:	1e2b      	subs	r3, r5, #0
 800f53e:	bfb9      	ittee	lt
 800f540:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f544:	9305      	strlt	r3, [sp, #20]
 800f546:	2300      	movge	r3, #0
 800f548:	6033      	strge	r3, [r6, #0]
 800f54a:	9f05      	ldr	r7, [sp, #20]
 800f54c:	4b9a      	ldr	r3, [pc, #616]	@ (800f7b8 <_dtoa_r+0x2d8>)
 800f54e:	bfbc      	itt	lt
 800f550:	2201      	movlt	r2, #1
 800f552:	6032      	strlt	r2, [r6, #0]
 800f554:	43bb      	bics	r3, r7
 800f556:	d112      	bne.n	800f57e <_dtoa_r+0x9e>
 800f558:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f55a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f55e:	6013      	str	r3, [r2, #0]
 800f560:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f564:	4323      	orrs	r3, r4
 800f566:	f000 855a 	beq.w	801001e <_dtoa_r+0xb3e>
 800f56a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f56c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800f7cc <_dtoa_r+0x2ec>
 800f570:	2b00      	cmp	r3, #0
 800f572:	f000 855c 	beq.w	801002e <_dtoa_r+0xb4e>
 800f576:	f10a 0303 	add.w	r3, sl, #3
 800f57a:	f000 bd56 	b.w	801002a <_dtoa_r+0xb4a>
 800f57e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f582:	2200      	movs	r2, #0
 800f584:	ec51 0b17 	vmov	r0, r1, d7
 800f588:	2300      	movs	r3, #0
 800f58a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800f58e:	f7f1 fa73 	bl	8000a78 <__aeabi_dcmpeq>
 800f592:	4680      	mov	r8, r0
 800f594:	b158      	cbz	r0, 800f5ae <_dtoa_r+0xce>
 800f596:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f598:	2301      	movs	r3, #1
 800f59a:	6013      	str	r3, [r2, #0]
 800f59c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f59e:	b113      	cbz	r3, 800f5a6 <_dtoa_r+0xc6>
 800f5a0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f5a2:	4b86      	ldr	r3, [pc, #536]	@ (800f7bc <_dtoa_r+0x2dc>)
 800f5a4:	6013      	str	r3, [r2, #0]
 800f5a6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800f7d0 <_dtoa_r+0x2f0>
 800f5aa:	f000 bd40 	b.w	801002e <_dtoa_r+0xb4e>
 800f5ae:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800f5b2:	aa14      	add	r2, sp, #80	@ 0x50
 800f5b4:	a915      	add	r1, sp, #84	@ 0x54
 800f5b6:	4648      	mov	r0, r9
 800f5b8:	f001 f984 	bl	80108c4 <__d2b>
 800f5bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f5c0:	9002      	str	r0, [sp, #8]
 800f5c2:	2e00      	cmp	r6, #0
 800f5c4:	d078      	beq.n	800f6b8 <_dtoa_r+0x1d8>
 800f5c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f5c8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800f5cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f5d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f5d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f5d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f5dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f5e0:	4619      	mov	r1, r3
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	4b76      	ldr	r3, [pc, #472]	@ (800f7c0 <_dtoa_r+0x2e0>)
 800f5e6:	f7f0 fe27 	bl	8000238 <__aeabi_dsub>
 800f5ea:	a36b      	add	r3, pc, #428	@ (adr r3, 800f798 <_dtoa_r+0x2b8>)
 800f5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5f0:	f7f0 ffda 	bl	80005a8 <__aeabi_dmul>
 800f5f4:	a36a      	add	r3, pc, #424	@ (adr r3, 800f7a0 <_dtoa_r+0x2c0>)
 800f5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5fa:	f7f0 fe1f 	bl	800023c <__adddf3>
 800f5fe:	4604      	mov	r4, r0
 800f600:	4630      	mov	r0, r6
 800f602:	460d      	mov	r5, r1
 800f604:	f7f0 ff66 	bl	80004d4 <__aeabi_i2d>
 800f608:	a367      	add	r3, pc, #412	@ (adr r3, 800f7a8 <_dtoa_r+0x2c8>)
 800f60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f60e:	f7f0 ffcb 	bl	80005a8 <__aeabi_dmul>
 800f612:	4602      	mov	r2, r0
 800f614:	460b      	mov	r3, r1
 800f616:	4620      	mov	r0, r4
 800f618:	4629      	mov	r1, r5
 800f61a:	f7f0 fe0f 	bl	800023c <__adddf3>
 800f61e:	4604      	mov	r4, r0
 800f620:	460d      	mov	r5, r1
 800f622:	f7f1 fa71 	bl	8000b08 <__aeabi_d2iz>
 800f626:	2200      	movs	r2, #0
 800f628:	4607      	mov	r7, r0
 800f62a:	2300      	movs	r3, #0
 800f62c:	4620      	mov	r0, r4
 800f62e:	4629      	mov	r1, r5
 800f630:	f7f1 fa2c 	bl	8000a8c <__aeabi_dcmplt>
 800f634:	b140      	cbz	r0, 800f648 <_dtoa_r+0x168>
 800f636:	4638      	mov	r0, r7
 800f638:	f7f0 ff4c 	bl	80004d4 <__aeabi_i2d>
 800f63c:	4622      	mov	r2, r4
 800f63e:	462b      	mov	r3, r5
 800f640:	f7f1 fa1a 	bl	8000a78 <__aeabi_dcmpeq>
 800f644:	b900      	cbnz	r0, 800f648 <_dtoa_r+0x168>
 800f646:	3f01      	subs	r7, #1
 800f648:	2f16      	cmp	r7, #22
 800f64a:	d852      	bhi.n	800f6f2 <_dtoa_r+0x212>
 800f64c:	4b5d      	ldr	r3, [pc, #372]	@ (800f7c4 <_dtoa_r+0x2e4>)
 800f64e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f656:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f65a:	f7f1 fa17 	bl	8000a8c <__aeabi_dcmplt>
 800f65e:	2800      	cmp	r0, #0
 800f660:	d049      	beq.n	800f6f6 <_dtoa_r+0x216>
 800f662:	3f01      	subs	r7, #1
 800f664:	2300      	movs	r3, #0
 800f666:	9310      	str	r3, [sp, #64]	@ 0x40
 800f668:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f66a:	1b9b      	subs	r3, r3, r6
 800f66c:	1e5a      	subs	r2, r3, #1
 800f66e:	bf45      	ittet	mi
 800f670:	f1c3 0301 	rsbmi	r3, r3, #1
 800f674:	9300      	strmi	r3, [sp, #0]
 800f676:	2300      	movpl	r3, #0
 800f678:	2300      	movmi	r3, #0
 800f67a:	9206      	str	r2, [sp, #24]
 800f67c:	bf54      	ite	pl
 800f67e:	9300      	strpl	r3, [sp, #0]
 800f680:	9306      	strmi	r3, [sp, #24]
 800f682:	2f00      	cmp	r7, #0
 800f684:	db39      	blt.n	800f6fa <_dtoa_r+0x21a>
 800f686:	9b06      	ldr	r3, [sp, #24]
 800f688:	970d      	str	r7, [sp, #52]	@ 0x34
 800f68a:	443b      	add	r3, r7
 800f68c:	9306      	str	r3, [sp, #24]
 800f68e:	2300      	movs	r3, #0
 800f690:	9308      	str	r3, [sp, #32]
 800f692:	9b07      	ldr	r3, [sp, #28]
 800f694:	2b09      	cmp	r3, #9
 800f696:	d863      	bhi.n	800f760 <_dtoa_r+0x280>
 800f698:	2b05      	cmp	r3, #5
 800f69a:	bfc4      	itt	gt
 800f69c:	3b04      	subgt	r3, #4
 800f69e:	9307      	strgt	r3, [sp, #28]
 800f6a0:	9b07      	ldr	r3, [sp, #28]
 800f6a2:	f1a3 0302 	sub.w	r3, r3, #2
 800f6a6:	bfcc      	ite	gt
 800f6a8:	2400      	movgt	r4, #0
 800f6aa:	2401      	movle	r4, #1
 800f6ac:	2b03      	cmp	r3, #3
 800f6ae:	d863      	bhi.n	800f778 <_dtoa_r+0x298>
 800f6b0:	e8df f003 	tbb	[pc, r3]
 800f6b4:	2b375452 	.word	0x2b375452
 800f6b8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800f6bc:	441e      	add	r6, r3
 800f6be:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f6c2:	2b20      	cmp	r3, #32
 800f6c4:	bfc1      	itttt	gt
 800f6c6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f6ca:	409f      	lslgt	r7, r3
 800f6cc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f6d0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f6d4:	bfd6      	itet	le
 800f6d6:	f1c3 0320 	rsble	r3, r3, #32
 800f6da:	ea47 0003 	orrgt.w	r0, r7, r3
 800f6de:	fa04 f003 	lslle.w	r0, r4, r3
 800f6e2:	f7f0 fee7 	bl	80004b4 <__aeabi_ui2d>
 800f6e6:	2201      	movs	r2, #1
 800f6e8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f6ec:	3e01      	subs	r6, #1
 800f6ee:	9212      	str	r2, [sp, #72]	@ 0x48
 800f6f0:	e776      	b.n	800f5e0 <_dtoa_r+0x100>
 800f6f2:	2301      	movs	r3, #1
 800f6f4:	e7b7      	b.n	800f666 <_dtoa_r+0x186>
 800f6f6:	9010      	str	r0, [sp, #64]	@ 0x40
 800f6f8:	e7b6      	b.n	800f668 <_dtoa_r+0x188>
 800f6fa:	9b00      	ldr	r3, [sp, #0]
 800f6fc:	1bdb      	subs	r3, r3, r7
 800f6fe:	9300      	str	r3, [sp, #0]
 800f700:	427b      	negs	r3, r7
 800f702:	9308      	str	r3, [sp, #32]
 800f704:	2300      	movs	r3, #0
 800f706:	930d      	str	r3, [sp, #52]	@ 0x34
 800f708:	e7c3      	b.n	800f692 <_dtoa_r+0x1b2>
 800f70a:	2301      	movs	r3, #1
 800f70c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f70e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f710:	eb07 0b03 	add.w	fp, r7, r3
 800f714:	f10b 0301 	add.w	r3, fp, #1
 800f718:	2b01      	cmp	r3, #1
 800f71a:	9303      	str	r3, [sp, #12]
 800f71c:	bfb8      	it	lt
 800f71e:	2301      	movlt	r3, #1
 800f720:	e006      	b.n	800f730 <_dtoa_r+0x250>
 800f722:	2301      	movs	r3, #1
 800f724:	9309      	str	r3, [sp, #36]	@ 0x24
 800f726:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f728:	2b00      	cmp	r3, #0
 800f72a:	dd28      	ble.n	800f77e <_dtoa_r+0x29e>
 800f72c:	469b      	mov	fp, r3
 800f72e:	9303      	str	r3, [sp, #12]
 800f730:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800f734:	2100      	movs	r1, #0
 800f736:	2204      	movs	r2, #4
 800f738:	f102 0514 	add.w	r5, r2, #20
 800f73c:	429d      	cmp	r5, r3
 800f73e:	d926      	bls.n	800f78e <_dtoa_r+0x2ae>
 800f740:	6041      	str	r1, [r0, #4]
 800f742:	4648      	mov	r0, r9
 800f744:	f000 fd9c 	bl	8010280 <_Balloc>
 800f748:	4682      	mov	sl, r0
 800f74a:	2800      	cmp	r0, #0
 800f74c:	d142      	bne.n	800f7d4 <_dtoa_r+0x2f4>
 800f74e:	4b1e      	ldr	r3, [pc, #120]	@ (800f7c8 <_dtoa_r+0x2e8>)
 800f750:	4602      	mov	r2, r0
 800f752:	f240 11af 	movw	r1, #431	@ 0x1af
 800f756:	e6da      	b.n	800f50e <_dtoa_r+0x2e>
 800f758:	2300      	movs	r3, #0
 800f75a:	e7e3      	b.n	800f724 <_dtoa_r+0x244>
 800f75c:	2300      	movs	r3, #0
 800f75e:	e7d5      	b.n	800f70c <_dtoa_r+0x22c>
 800f760:	2401      	movs	r4, #1
 800f762:	2300      	movs	r3, #0
 800f764:	9307      	str	r3, [sp, #28]
 800f766:	9409      	str	r4, [sp, #36]	@ 0x24
 800f768:	f04f 3bff 	mov.w	fp, #4294967295
 800f76c:	2200      	movs	r2, #0
 800f76e:	f8cd b00c 	str.w	fp, [sp, #12]
 800f772:	2312      	movs	r3, #18
 800f774:	920c      	str	r2, [sp, #48]	@ 0x30
 800f776:	e7db      	b.n	800f730 <_dtoa_r+0x250>
 800f778:	2301      	movs	r3, #1
 800f77a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f77c:	e7f4      	b.n	800f768 <_dtoa_r+0x288>
 800f77e:	f04f 0b01 	mov.w	fp, #1
 800f782:	f8cd b00c 	str.w	fp, [sp, #12]
 800f786:	465b      	mov	r3, fp
 800f788:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800f78c:	e7d0      	b.n	800f730 <_dtoa_r+0x250>
 800f78e:	3101      	adds	r1, #1
 800f790:	0052      	lsls	r2, r2, #1
 800f792:	e7d1      	b.n	800f738 <_dtoa_r+0x258>
 800f794:	f3af 8000 	nop.w
 800f798:	636f4361 	.word	0x636f4361
 800f79c:	3fd287a7 	.word	0x3fd287a7
 800f7a0:	8b60c8b3 	.word	0x8b60c8b3
 800f7a4:	3fc68a28 	.word	0x3fc68a28
 800f7a8:	509f79fb 	.word	0x509f79fb
 800f7ac:	3fd34413 	.word	0x3fd34413
 800f7b0:	08011339 	.word	0x08011339
 800f7b4:	08011350 	.word	0x08011350
 800f7b8:	7ff00000 	.word	0x7ff00000
 800f7bc:	08011309 	.word	0x08011309
 800f7c0:	3ff80000 	.word	0x3ff80000
 800f7c4:	080114a0 	.word	0x080114a0
 800f7c8:	080113a8 	.word	0x080113a8
 800f7cc:	08011335 	.word	0x08011335
 800f7d0:	08011308 	.word	0x08011308
 800f7d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f7d8:	6018      	str	r0, [r3, #0]
 800f7da:	9b03      	ldr	r3, [sp, #12]
 800f7dc:	2b0e      	cmp	r3, #14
 800f7de:	f200 80a1 	bhi.w	800f924 <_dtoa_r+0x444>
 800f7e2:	2c00      	cmp	r4, #0
 800f7e4:	f000 809e 	beq.w	800f924 <_dtoa_r+0x444>
 800f7e8:	2f00      	cmp	r7, #0
 800f7ea:	dd33      	ble.n	800f854 <_dtoa_r+0x374>
 800f7ec:	4b9c      	ldr	r3, [pc, #624]	@ (800fa60 <_dtoa_r+0x580>)
 800f7ee:	f007 020f 	and.w	r2, r7, #15
 800f7f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f7f6:	ed93 7b00 	vldr	d7, [r3]
 800f7fa:	05f8      	lsls	r0, r7, #23
 800f7fc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800f800:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f804:	d516      	bpl.n	800f834 <_dtoa_r+0x354>
 800f806:	4b97      	ldr	r3, [pc, #604]	@ (800fa64 <_dtoa_r+0x584>)
 800f808:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f80c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f810:	f7f0 fff4 	bl	80007fc <__aeabi_ddiv>
 800f814:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f818:	f004 040f 	and.w	r4, r4, #15
 800f81c:	2603      	movs	r6, #3
 800f81e:	4d91      	ldr	r5, [pc, #580]	@ (800fa64 <_dtoa_r+0x584>)
 800f820:	b954      	cbnz	r4, 800f838 <_dtoa_r+0x358>
 800f822:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f826:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f82a:	f7f0 ffe7 	bl	80007fc <__aeabi_ddiv>
 800f82e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f832:	e028      	b.n	800f886 <_dtoa_r+0x3a6>
 800f834:	2602      	movs	r6, #2
 800f836:	e7f2      	b.n	800f81e <_dtoa_r+0x33e>
 800f838:	07e1      	lsls	r1, r4, #31
 800f83a:	d508      	bpl.n	800f84e <_dtoa_r+0x36e>
 800f83c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f840:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f844:	f7f0 feb0 	bl	80005a8 <__aeabi_dmul>
 800f848:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f84c:	3601      	adds	r6, #1
 800f84e:	1064      	asrs	r4, r4, #1
 800f850:	3508      	adds	r5, #8
 800f852:	e7e5      	b.n	800f820 <_dtoa_r+0x340>
 800f854:	f000 80af 	beq.w	800f9b6 <_dtoa_r+0x4d6>
 800f858:	427c      	negs	r4, r7
 800f85a:	4b81      	ldr	r3, [pc, #516]	@ (800fa60 <_dtoa_r+0x580>)
 800f85c:	4d81      	ldr	r5, [pc, #516]	@ (800fa64 <_dtoa_r+0x584>)
 800f85e:	f004 020f 	and.w	r2, r4, #15
 800f862:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f86a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f86e:	f7f0 fe9b 	bl	80005a8 <__aeabi_dmul>
 800f872:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f876:	1124      	asrs	r4, r4, #4
 800f878:	2300      	movs	r3, #0
 800f87a:	2602      	movs	r6, #2
 800f87c:	2c00      	cmp	r4, #0
 800f87e:	f040 808f 	bne.w	800f9a0 <_dtoa_r+0x4c0>
 800f882:	2b00      	cmp	r3, #0
 800f884:	d1d3      	bne.n	800f82e <_dtoa_r+0x34e>
 800f886:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f888:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	f000 8094 	beq.w	800f9ba <_dtoa_r+0x4da>
 800f892:	4b75      	ldr	r3, [pc, #468]	@ (800fa68 <_dtoa_r+0x588>)
 800f894:	2200      	movs	r2, #0
 800f896:	4620      	mov	r0, r4
 800f898:	4629      	mov	r1, r5
 800f89a:	f7f1 f8f7 	bl	8000a8c <__aeabi_dcmplt>
 800f89e:	2800      	cmp	r0, #0
 800f8a0:	f000 808b 	beq.w	800f9ba <_dtoa_r+0x4da>
 800f8a4:	9b03      	ldr	r3, [sp, #12]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	f000 8087 	beq.w	800f9ba <_dtoa_r+0x4da>
 800f8ac:	f1bb 0f00 	cmp.w	fp, #0
 800f8b0:	dd34      	ble.n	800f91c <_dtoa_r+0x43c>
 800f8b2:	4620      	mov	r0, r4
 800f8b4:	4b6d      	ldr	r3, [pc, #436]	@ (800fa6c <_dtoa_r+0x58c>)
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	4629      	mov	r1, r5
 800f8ba:	f7f0 fe75 	bl	80005a8 <__aeabi_dmul>
 800f8be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f8c2:	f107 38ff 	add.w	r8, r7, #4294967295
 800f8c6:	3601      	adds	r6, #1
 800f8c8:	465c      	mov	r4, fp
 800f8ca:	4630      	mov	r0, r6
 800f8cc:	f7f0 fe02 	bl	80004d4 <__aeabi_i2d>
 800f8d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f8d4:	f7f0 fe68 	bl	80005a8 <__aeabi_dmul>
 800f8d8:	4b65      	ldr	r3, [pc, #404]	@ (800fa70 <_dtoa_r+0x590>)
 800f8da:	2200      	movs	r2, #0
 800f8dc:	f7f0 fcae 	bl	800023c <__adddf3>
 800f8e0:	4605      	mov	r5, r0
 800f8e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f8e6:	2c00      	cmp	r4, #0
 800f8e8:	d16a      	bne.n	800f9c0 <_dtoa_r+0x4e0>
 800f8ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f8ee:	4b61      	ldr	r3, [pc, #388]	@ (800fa74 <_dtoa_r+0x594>)
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	f7f0 fca1 	bl	8000238 <__aeabi_dsub>
 800f8f6:	4602      	mov	r2, r0
 800f8f8:	460b      	mov	r3, r1
 800f8fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f8fe:	462a      	mov	r2, r5
 800f900:	4633      	mov	r3, r6
 800f902:	f7f1 f8e1 	bl	8000ac8 <__aeabi_dcmpgt>
 800f906:	2800      	cmp	r0, #0
 800f908:	f040 8298 	bne.w	800fe3c <_dtoa_r+0x95c>
 800f90c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f910:	462a      	mov	r2, r5
 800f912:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f916:	f7f1 f8b9 	bl	8000a8c <__aeabi_dcmplt>
 800f91a:	bb38      	cbnz	r0, 800f96c <_dtoa_r+0x48c>
 800f91c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800f920:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f924:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f926:	2b00      	cmp	r3, #0
 800f928:	f2c0 8157 	blt.w	800fbda <_dtoa_r+0x6fa>
 800f92c:	2f0e      	cmp	r7, #14
 800f92e:	f300 8154 	bgt.w	800fbda <_dtoa_r+0x6fa>
 800f932:	4b4b      	ldr	r3, [pc, #300]	@ (800fa60 <_dtoa_r+0x580>)
 800f934:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f938:	ed93 7b00 	vldr	d7, [r3]
 800f93c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f93e:	2b00      	cmp	r3, #0
 800f940:	ed8d 7b00 	vstr	d7, [sp]
 800f944:	f280 80e5 	bge.w	800fb12 <_dtoa_r+0x632>
 800f948:	9b03      	ldr	r3, [sp, #12]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	f300 80e1 	bgt.w	800fb12 <_dtoa_r+0x632>
 800f950:	d10c      	bne.n	800f96c <_dtoa_r+0x48c>
 800f952:	4b48      	ldr	r3, [pc, #288]	@ (800fa74 <_dtoa_r+0x594>)
 800f954:	2200      	movs	r2, #0
 800f956:	ec51 0b17 	vmov	r0, r1, d7
 800f95a:	f7f0 fe25 	bl	80005a8 <__aeabi_dmul>
 800f95e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f962:	f7f1 f8a7 	bl	8000ab4 <__aeabi_dcmpge>
 800f966:	2800      	cmp	r0, #0
 800f968:	f000 8266 	beq.w	800fe38 <_dtoa_r+0x958>
 800f96c:	2400      	movs	r4, #0
 800f96e:	4625      	mov	r5, r4
 800f970:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f972:	4656      	mov	r6, sl
 800f974:	ea6f 0803 	mvn.w	r8, r3
 800f978:	2700      	movs	r7, #0
 800f97a:	4621      	mov	r1, r4
 800f97c:	4648      	mov	r0, r9
 800f97e:	f000 fcbf 	bl	8010300 <_Bfree>
 800f982:	2d00      	cmp	r5, #0
 800f984:	f000 80bd 	beq.w	800fb02 <_dtoa_r+0x622>
 800f988:	b12f      	cbz	r7, 800f996 <_dtoa_r+0x4b6>
 800f98a:	42af      	cmp	r7, r5
 800f98c:	d003      	beq.n	800f996 <_dtoa_r+0x4b6>
 800f98e:	4639      	mov	r1, r7
 800f990:	4648      	mov	r0, r9
 800f992:	f000 fcb5 	bl	8010300 <_Bfree>
 800f996:	4629      	mov	r1, r5
 800f998:	4648      	mov	r0, r9
 800f99a:	f000 fcb1 	bl	8010300 <_Bfree>
 800f99e:	e0b0      	b.n	800fb02 <_dtoa_r+0x622>
 800f9a0:	07e2      	lsls	r2, r4, #31
 800f9a2:	d505      	bpl.n	800f9b0 <_dtoa_r+0x4d0>
 800f9a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f9a8:	f7f0 fdfe 	bl	80005a8 <__aeabi_dmul>
 800f9ac:	3601      	adds	r6, #1
 800f9ae:	2301      	movs	r3, #1
 800f9b0:	1064      	asrs	r4, r4, #1
 800f9b2:	3508      	adds	r5, #8
 800f9b4:	e762      	b.n	800f87c <_dtoa_r+0x39c>
 800f9b6:	2602      	movs	r6, #2
 800f9b8:	e765      	b.n	800f886 <_dtoa_r+0x3a6>
 800f9ba:	9c03      	ldr	r4, [sp, #12]
 800f9bc:	46b8      	mov	r8, r7
 800f9be:	e784      	b.n	800f8ca <_dtoa_r+0x3ea>
 800f9c0:	4b27      	ldr	r3, [pc, #156]	@ (800fa60 <_dtoa_r+0x580>)
 800f9c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f9c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f9c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f9cc:	4454      	add	r4, sl
 800f9ce:	2900      	cmp	r1, #0
 800f9d0:	d054      	beq.n	800fa7c <_dtoa_r+0x59c>
 800f9d2:	4929      	ldr	r1, [pc, #164]	@ (800fa78 <_dtoa_r+0x598>)
 800f9d4:	2000      	movs	r0, #0
 800f9d6:	f7f0 ff11 	bl	80007fc <__aeabi_ddiv>
 800f9da:	4633      	mov	r3, r6
 800f9dc:	462a      	mov	r2, r5
 800f9de:	f7f0 fc2b 	bl	8000238 <__aeabi_dsub>
 800f9e2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f9e6:	4656      	mov	r6, sl
 800f9e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f9ec:	f7f1 f88c 	bl	8000b08 <__aeabi_d2iz>
 800f9f0:	4605      	mov	r5, r0
 800f9f2:	f7f0 fd6f 	bl	80004d4 <__aeabi_i2d>
 800f9f6:	4602      	mov	r2, r0
 800f9f8:	460b      	mov	r3, r1
 800f9fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f9fe:	f7f0 fc1b 	bl	8000238 <__aeabi_dsub>
 800fa02:	3530      	adds	r5, #48	@ 0x30
 800fa04:	4602      	mov	r2, r0
 800fa06:	460b      	mov	r3, r1
 800fa08:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fa0c:	f806 5b01 	strb.w	r5, [r6], #1
 800fa10:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fa14:	f7f1 f83a 	bl	8000a8c <__aeabi_dcmplt>
 800fa18:	2800      	cmp	r0, #0
 800fa1a:	d172      	bne.n	800fb02 <_dtoa_r+0x622>
 800fa1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fa20:	4911      	ldr	r1, [pc, #68]	@ (800fa68 <_dtoa_r+0x588>)
 800fa22:	2000      	movs	r0, #0
 800fa24:	f7f0 fc08 	bl	8000238 <__aeabi_dsub>
 800fa28:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fa2c:	f7f1 f82e 	bl	8000a8c <__aeabi_dcmplt>
 800fa30:	2800      	cmp	r0, #0
 800fa32:	f040 80b4 	bne.w	800fb9e <_dtoa_r+0x6be>
 800fa36:	42a6      	cmp	r6, r4
 800fa38:	f43f af70 	beq.w	800f91c <_dtoa_r+0x43c>
 800fa3c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800fa40:	4b0a      	ldr	r3, [pc, #40]	@ (800fa6c <_dtoa_r+0x58c>)
 800fa42:	2200      	movs	r2, #0
 800fa44:	f7f0 fdb0 	bl	80005a8 <__aeabi_dmul>
 800fa48:	4b08      	ldr	r3, [pc, #32]	@ (800fa6c <_dtoa_r+0x58c>)
 800fa4a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fa4e:	2200      	movs	r2, #0
 800fa50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fa54:	f7f0 fda8 	bl	80005a8 <__aeabi_dmul>
 800fa58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fa5c:	e7c4      	b.n	800f9e8 <_dtoa_r+0x508>
 800fa5e:	bf00      	nop
 800fa60:	080114a0 	.word	0x080114a0
 800fa64:	08011478 	.word	0x08011478
 800fa68:	3ff00000 	.word	0x3ff00000
 800fa6c:	40240000 	.word	0x40240000
 800fa70:	401c0000 	.word	0x401c0000
 800fa74:	40140000 	.word	0x40140000
 800fa78:	3fe00000 	.word	0x3fe00000
 800fa7c:	4631      	mov	r1, r6
 800fa7e:	4628      	mov	r0, r5
 800fa80:	f7f0 fd92 	bl	80005a8 <__aeabi_dmul>
 800fa84:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fa88:	9413      	str	r4, [sp, #76]	@ 0x4c
 800fa8a:	4656      	mov	r6, sl
 800fa8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fa90:	f7f1 f83a 	bl	8000b08 <__aeabi_d2iz>
 800fa94:	4605      	mov	r5, r0
 800fa96:	f7f0 fd1d 	bl	80004d4 <__aeabi_i2d>
 800fa9a:	4602      	mov	r2, r0
 800fa9c:	460b      	mov	r3, r1
 800fa9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800faa2:	f7f0 fbc9 	bl	8000238 <__aeabi_dsub>
 800faa6:	3530      	adds	r5, #48	@ 0x30
 800faa8:	f806 5b01 	strb.w	r5, [r6], #1
 800faac:	4602      	mov	r2, r0
 800faae:	460b      	mov	r3, r1
 800fab0:	42a6      	cmp	r6, r4
 800fab2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fab6:	f04f 0200 	mov.w	r2, #0
 800faba:	d124      	bne.n	800fb06 <_dtoa_r+0x626>
 800fabc:	4baf      	ldr	r3, [pc, #700]	@ (800fd7c <_dtoa_r+0x89c>)
 800fabe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800fac2:	f7f0 fbbb 	bl	800023c <__adddf3>
 800fac6:	4602      	mov	r2, r0
 800fac8:	460b      	mov	r3, r1
 800faca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800face:	f7f0 fffb 	bl	8000ac8 <__aeabi_dcmpgt>
 800fad2:	2800      	cmp	r0, #0
 800fad4:	d163      	bne.n	800fb9e <_dtoa_r+0x6be>
 800fad6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fada:	49a8      	ldr	r1, [pc, #672]	@ (800fd7c <_dtoa_r+0x89c>)
 800fadc:	2000      	movs	r0, #0
 800fade:	f7f0 fbab 	bl	8000238 <__aeabi_dsub>
 800fae2:	4602      	mov	r2, r0
 800fae4:	460b      	mov	r3, r1
 800fae6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800faea:	f7f0 ffcf 	bl	8000a8c <__aeabi_dcmplt>
 800faee:	2800      	cmp	r0, #0
 800faf0:	f43f af14 	beq.w	800f91c <_dtoa_r+0x43c>
 800faf4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800faf6:	1e73      	subs	r3, r6, #1
 800faf8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fafa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fafe:	2b30      	cmp	r3, #48	@ 0x30
 800fb00:	d0f8      	beq.n	800faf4 <_dtoa_r+0x614>
 800fb02:	4647      	mov	r7, r8
 800fb04:	e03b      	b.n	800fb7e <_dtoa_r+0x69e>
 800fb06:	4b9e      	ldr	r3, [pc, #632]	@ (800fd80 <_dtoa_r+0x8a0>)
 800fb08:	f7f0 fd4e 	bl	80005a8 <__aeabi_dmul>
 800fb0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fb10:	e7bc      	b.n	800fa8c <_dtoa_r+0x5ac>
 800fb12:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800fb16:	4656      	mov	r6, sl
 800fb18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb1c:	4620      	mov	r0, r4
 800fb1e:	4629      	mov	r1, r5
 800fb20:	f7f0 fe6c 	bl	80007fc <__aeabi_ddiv>
 800fb24:	f7f0 fff0 	bl	8000b08 <__aeabi_d2iz>
 800fb28:	4680      	mov	r8, r0
 800fb2a:	f7f0 fcd3 	bl	80004d4 <__aeabi_i2d>
 800fb2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb32:	f7f0 fd39 	bl	80005a8 <__aeabi_dmul>
 800fb36:	4602      	mov	r2, r0
 800fb38:	460b      	mov	r3, r1
 800fb3a:	4620      	mov	r0, r4
 800fb3c:	4629      	mov	r1, r5
 800fb3e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800fb42:	f7f0 fb79 	bl	8000238 <__aeabi_dsub>
 800fb46:	f806 4b01 	strb.w	r4, [r6], #1
 800fb4a:	9d03      	ldr	r5, [sp, #12]
 800fb4c:	eba6 040a 	sub.w	r4, r6, sl
 800fb50:	42a5      	cmp	r5, r4
 800fb52:	4602      	mov	r2, r0
 800fb54:	460b      	mov	r3, r1
 800fb56:	d133      	bne.n	800fbc0 <_dtoa_r+0x6e0>
 800fb58:	f7f0 fb70 	bl	800023c <__adddf3>
 800fb5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb60:	4604      	mov	r4, r0
 800fb62:	460d      	mov	r5, r1
 800fb64:	f7f0 ffb0 	bl	8000ac8 <__aeabi_dcmpgt>
 800fb68:	b9c0      	cbnz	r0, 800fb9c <_dtoa_r+0x6bc>
 800fb6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb6e:	4620      	mov	r0, r4
 800fb70:	4629      	mov	r1, r5
 800fb72:	f7f0 ff81 	bl	8000a78 <__aeabi_dcmpeq>
 800fb76:	b110      	cbz	r0, 800fb7e <_dtoa_r+0x69e>
 800fb78:	f018 0f01 	tst.w	r8, #1
 800fb7c:	d10e      	bne.n	800fb9c <_dtoa_r+0x6bc>
 800fb7e:	9902      	ldr	r1, [sp, #8]
 800fb80:	4648      	mov	r0, r9
 800fb82:	f000 fbbd 	bl	8010300 <_Bfree>
 800fb86:	2300      	movs	r3, #0
 800fb88:	7033      	strb	r3, [r6, #0]
 800fb8a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800fb8c:	3701      	adds	r7, #1
 800fb8e:	601f      	str	r7, [r3, #0]
 800fb90:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	f000 824b 	beq.w	801002e <_dtoa_r+0xb4e>
 800fb98:	601e      	str	r6, [r3, #0]
 800fb9a:	e248      	b.n	801002e <_dtoa_r+0xb4e>
 800fb9c:	46b8      	mov	r8, r7
 800fb9e:	4633      	mov	r3, r6
 800fba0:	461e      	mov	r6, r3
 800fba2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fba6:	2a39      	cmp	r2, #57	@ 0x39
 800fba8:	d106      	bne.n	800fbb8 <_dtoa_r+0x6d8>
 800fbaa:	459a      	cmp	sl, r3
 800fbac:	d1f8      	bne.n	800fba0 <_dtoa_r+0x6c0>
 800fbae:	2230      	movs	r2, #48	@ 0x30
 800fbb0:	f108 0801 	add.w	r8, r8, #1
 800fbb4:	f88a 2000 	strb.w	r2, [sl]
 800fbb8:	781a      	ldrb	r2, [r3, #0]
 800fbba:	3201      	adds	r2, #1
 800fbbc:	701a      	strb	r2, [r3, #0]
 800fbbe:	e7a0      	b.n	800fb02 <_dtoa_r+0x622>
 800fbc0:	4b6f      	ldr	r3, [pc, #444]	@ (800fd80 <_dtoa_r+0x8a0>)
 800fbc2:	2200      	movs	r2, #0
 800fbc4:	f7f0 fcf0 	bl	80005a8 <__aeabi_dmul>
 800fbc8:	2200      	movs	r2, #0
 800fbca:	2300      	movs	r3, #0
 800fbcc:	4604      	mov	r4, r0
 800fbce:	460d      	mov	r5, r1
 800fbd0:	f7f0 ff52 	bl	8000a78 <__aeabi_dcmpeq>
 800fbd4:	2800      	cmp	r0, #0
 800fbd6:	d09f      	beq.n	800fb18 <_dtoa_r+0x638>
 800fbd8:	e7d1      	b.n	800fb7e <_dtoa_r+0x69e>
 800fbda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fbdc:	2a00      	cmp	r2, #0
 800fbde:	f000 80ea 	beq.w	800fdb6 <_dtoa_r+0x8d6>
 800fbe2:	9a07      	ldr	r2, [sp, #28]
 800fbe4:	2a01      	cmp	r2, #1
 800fbe6:	f300 80cd 	bgt.w	800fd84 <_dtoa_r+0x8a4>
 800fbea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800fbec:	2a00      	cmp	r2, #0
 800fbee:	f000 80c1 	beq.w	800fd74 <_dtoa_r+0x894>
 800fbf2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800fbf6:	9c08      	ldr	r4, [sp, #32]
 800fbf8:	9e00      	ldr	r6, [sp, #0]
 800fbfa:	9a00      	ldr	r2, [sp, #0]
 800fbfc:	441a      	add	r2, r3
 800fbfe:	9200      	str	r2, [sp, #0]
 800fc00:	9a06      	ldr	r2, [sp, #24]
 800fc02:	2101      	movs	r1, #1
 800fc04:	441a      	add	r2, r3
 800fc06:	4648      	mov	r0, r9
 800fc08:	9206      	str	r2, [sp, #24]
 800fc0a:	f000 fc2d 	bl	8010468 <__i2b>
 800fc0e:	4605      	mov	r5, r0
 800fc10:	b166      	cbz	r6, 800fc2c <_dtoa_r+0x74c>
 800fc12:	9b06      	ldr	r3, [sp, #24]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	dd09      	ble.n	800fc2c <_dtoa_r+0x74c>
 800fc18:	42b3      	cmp	r3, r6
 800fc1a:	9a00      	ldr	r2, [sp, #0]
 800fc1c:	bfa8      	it	ge
 800fc1e:	4633      	movge	r3, r6
 800fc20:	1ad2      	subs	r2, r2, r3
 800fc22:	9200      	str	r2, [sp, #0]
 800fc24:	9a06      	ldr	r2, [sp, #24]
 800fc26:	1af6      	subs	r6, r6, r3
 800fc28:	1ad3      	subs	r3, r2, r3
 800fc2a:	9306      	str	r3, [sp, #24]
 800fc2c:	9b08      	ldr	r3, [sp, #32]
 800fc2e:	b30b      	cbz	r3, 800fc74 <_dtoa_r+0x794>
 800fc30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	f000 80c6 	beq.w	800fdc4 <_dtoa_r+0x8e4>
 800fc38:	2c00      	cmp	r4, #0
 800fc3a:	f000 80c0 	beq.w	800fdbe <_dtoa_r+0x8de>
 800fc3e:	4629      	mov	r1, r5
 800fc40:	4622      	mov	r2, r4
 800fc42:	4648      	mov	r0, r9
 800fc44:	f000 fcc8 	bl	80105d8 <__pow5mult>
 800fc48:	9a02      	ldr	r2, [sp, #8]
 800fc4a:	4601      	mov	r1, r0
 800fc4c:	4605      	mov	r5, r0
 800fc4e:	4648      	mov	r0, r9
 800fc50:	f000 fc20 	bl	8010494 <__multiply>
 800fc54:	9902      	ldr	r1, [sp, #8]
 800fc56:	4680      	mov	r8, r0
 800fc58:	4648      	mov	r0, r9
 800fc5a:	f000 fb51 	bl	8010300 <_Bfree>
 800fc5e:	9b08      	ldr	r3, [sp, #32]
 800fc60:	1b1b      	subs	r3, r3, r4
 800fc62:	9308      	str	r3, [sp, #32]
 800fc64:	f000 80b1 	beq.w	800fdca <_dtoa_r+0x8ea>
 800fc68:	9a08      	ldr	r2, [sp, #32]
 800fc6a:	4641      	mov	r1, r8
 800fc6c:	4648      	mov	r0, r9
 800fc6e:	f000 fcb3 	bl	80105d8 <__pow5mult>
 800fc72:	9002      	str	r0, [sp, #8]
 800fc74:	2101      	movs	r1, #1
 800fc76:	4648      	mov	r0, r9
 800fc78:	f000 fbf6 	bl	8010468 <__i2b>
 800fc7c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fc7e:	4604      	mov	r4, r0
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	f000 81d8 	beq.w	8010036 <_dtoa_r+0xb56>
 800fc86:	461a      	mov	r2, r3
 800fc88:	4601      	mov	r1, r0
 800fc8a:	4648      	mov	r0, r9
 800fc8c:	f000 fca4 	bl	80105d8 <__pow5mult>
 800fc90:	9b07      	ldr	r3, [sp, #28]
 800fc92:	2b01      	cmp	r3, #1
 800fc94:	4604      	mov	r4, r0
 800fc96:	f300 809f 	bgt.w	800fdd8 <_dtoa_r+0x8f8>
 800fc9a:	9b04      	ldr	r3, [sp, #16]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	f040 8097 	bne.w	800fdd0 <_dtoa_r+0x8f0>
 800fca2:	9b05      	ldr	r3, [sp, #20]
 800fca4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	f040 8093 	bne.w	800fdd4 <_dtoa_r+0x8f4>
 800fcae:	9b05      	ldr	r3, [sp, #20]
 800fcb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fcb4:	0d1b      	lsrs	r3, r3, #20
 800fcb6:	051b      	lsls	r3, r3, #20
 800fcb8:	b133      	cbz	r3, 800fcc8 <_dtoa_r+0x7e8>
 800fcba:	9b00      	ldr	r3, [sp, #0]
 800fcbc:	3301      	adds	r3, #1
 800fcbe:	9300      	str	r3, [sp, #0]
 800fcc0:	9b06      	ldr	r3, [sp, #24]
 800fcc2:	3301      	adds	r3, #1
 800fcc4:	9306      	str	r3, [sp, #24]
 800fcc6:	2301      	movs	r3, #1
 800fcc8:	9308      	str	r3, [sp, #32]
 800fcca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	f000 81b8 	beq.w	8010042 <_dtoa_r+0xb62>
 800fcd2:	6923      	ldr	r3, [r4, #16]
 800fcd4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fcd8:	6918      	ldr	r0, [r3, #16]
 800fcda:	f000 fb79 	bl	80103d0 <__hi0bits>
 800fcde:	f1c0 0020 	rsb	r0, r0, #32
 800fce2:	9b06      	ldr	r3, [sp, #24]
 800fce4:	4418      	add	r0, r3
 800fce6:	f010 001f 	ands.w	r0, r0, #31
 800fcea:	f000 8082 	beq.w	800fdf2 <_dtoa_r+0x912>
 800fcee:	f1c0 0320 	rsb	r3, r0, #32
 800fcf2:	2b04      	cmp	r3, #4
 800fcf4:	dd73      	ble.n	800fdde <_dtoa_r+0x8fe>
 800fcf6:	9b00      	ldr	r3, [sp, #0]
 800fcf8:	f1c0 001c 	rsb	r0, r0, #28
 800fcfc:	4403      	add	r3, r0
 800fcfe:	9300      	str	r3, [sp, #0]
 800fd00:	9b06      	ldr	r3, [sp, #24]
 800fd02:	4403      	add	r3, r0
 800fd04:	4406      	add	r6, r0
 800fd06:	9306      	str	r3, [sp, #24]
 800fd08:	9b00      	ldr	r3, [sp, #0]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	dd05      	ble.n	800fd1a <_dtoa_r+0x83a>
 800fd0e:	9902      	ldr	r1, [sp, #8]
 800fd10:	461a      	mov	r2, r3
 800fd12:	4648      	mov	r0, r9
 800fd14:	f000 fcba 	bl	801068c <__lshift>
 800fd18:	9002      	str	r0, [sp, #8]
 800fd1a:	9b06      	ldr	r3, [sp, #24]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	dd05      	ble.n	800fd2c <_dtoa_r+0x84c>
 800fd20:	4621      	mov	r1, r4
 800fd22:	461a      	mov	r2, r3
 800fd24:	4648      	mov	r0, r9
 800fd26:	f000 fcb1 	bl	801068c <__lshift>
 800fd2a:	4604      	mov	r4, r0
 800fd2c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d061      	beq.n	800fdf6 <_dtoa_r+0x916>
 800fd32:	9802      	ldr	r0, [sp, #8]
 800fd34:	4621      	mov	r1, r4
 800fd36:	f000 fd15 	bl	8010764 <__mcmp>
 800fd3a:	2800      	cmp	r0, #0
 800fd3c:	da5b      	bge.n	800fdf6 <_dtoa_r+0x916>
 800fd3e:	2300      	movs	r3, #0
 800fd40:	9902      	ldr	r1, [sp, #8]
 800fd42:	220a      	movs	r2, #10
 800fd44:	4648      	mov	r0, r9
 800fd46:	f000 fafd 	bl	8010344 <__multadd>
 800fd4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd4c:	9002      	str	r0, [sp, #8]
 800fd4e:	f107 38ff 	add.w	r8, r7, #4294967295
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	f000 8177 	beq.w	8010046 <_dtoa_r+0xb66>
 800fd58:	4629      	mov	r1, r5
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	220a      	movs	r2, #10
 800fd5e:	4648      	mov	r0, r9
 800fd60:	f000 faf0 	bl	8010344 <__multadd>
 800fd64:	f1bb 0f00 	cmp.w	fp, #0
 800fd68:	4605      	mov	r5, r0
 800fd6a:	dc6f      	bgt.n	800fe4c <_dtoa_r+0x96c>
 800fd6c:	9b07      	ldr	r3, [sp, #28]
 800fd6e:	2b02      	cmp	r3, #2
 800fd70:	dc49      	bgt.n	800fe06 <_dtoa_r+0x926>
 800fd72:	e06b      	b.n	800fe4c <_dtoa_r+0x96c>
 800fd74:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800fd76:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800fd7a:	e73c      	b.n	800fbf6 <_dtoa_r+0x716>
 800fd7c:	3fe00000 	.word	0x3fe00000
 800fd80:	40240000 	.word	0x40240000
 800fd84:	9b03      	ldr	r3, [sp, #12]
 800fd86:	1e5c      	subs	r4, r3, #1
 800fd88:	9b08      	ldr	r3, [sp, #32]
 800fd8a:	42a3      	cmp	r3, r4
 800fd8c:	db09      	blt.n	800fda2 <_dtoa_r+0x8c2>
 800fd8e:	1b1c      	subs	r4, r3, r4
 800fd90:	9b03      	ldr	r3, [sp, #12]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	f6bf af30 	bge.w	800fbf8 <_dtoa_r+0x718>
 800fd98:	9b00      	ldr	r3, [sp, #0]
 800fd9a:	9a03      	ldr	r2, [sp, #12]
 800fd9c:	1a9e      	subs	r6, r3, r2
 800fd9e:	2300      	movs	r3, #0
 800fda0:	e72b      	b.n	800fbfa <_dtoa_r+0x71a>
 800fda2:	9b08      	ldr	r3, [sp, #32]
 800fda4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fda6:	9408      	str	r4, [sp, #32]
 800fda8:	1ae3      	subs	r3, r4, r3
 800fdaa:	441a      	add	r2, r3
 800fdac:	9e00      	ldr	r6, [sp, #0]
 800fdae:	9b03      	ldr	r3, [sp, #12]
 800fdb0:	920d      	str	r2, [sp, #52]	@ 0x34
 800fdb2:	2400      	movs	r4, #0
 800fdb4:	e721      	b.n	800fbfa <_dtoa_r+0x71a>
 800fdb6:	9c08      	ldr	r4, [sp, #32]
 800fdb8:	9e00      	ldr	r6, [sp, #0]
 800fdba:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800fdbc:	e728      	b.n	800fc10 <_dtoa_r+0x730>
 800fdbe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800fdc2:	e751      	b.n	800fc68 <_dtoa_r+0x788>
 800fdc4:	9a08      	ldr	r2, [sp, #32]
 800fdc6:	9902      	ldr	r1, [sp, #8]
 800fdc8:	e750      	b.n	800fc6c <_dtoa_r+0x78c>
 800fdca:	f8cd 8008 	str.w	r8, [sp, #8]
 800fdce:	e751      	b.n	800fc74 <_dtoa_r+0x794>
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	e779      	b.n	800fcc8 <_dtoa_r+0x7e8>
 800fdd4:	9b04      	ldr	r3, [sp, #16]
 800fdd6:	e777      	b.n	800fcc8 <_dtoa_r+0x7e8>
 800fdd8:	2300      	movs	r3, #0
 800fdda:	9308      	str	r3, [sp, #32]
 800fddc:	e779      	b.n	800fcd2 <_dtoa_r+0x7f2>
 800fdde:	d093      	beq.n	800fd08 <_dtoa_r+0x828>
 800fde0:	9a00      	ldr	r2, [sp, #0]
 800fde2:	331c      	adds	r3, #28
 800fde4:	441a      	add	r2, r3
 800fde6:	9200      	str	r2, [sp, #0]
 800fde8:	9a06      	ldr	r2, [sp, #24]
 800fdea:	441a      	add	r2, r3
 800fdec:	441e      	add	r6, r3
 800fdee:	9206      	str	r2, [sp, #24]
 800fdf0:	e78a      	b.n	800fd08 <_dtoa_r+0x828>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	e7f4      	b.n	800fde0 <_dtoa_r+0x900>
 800fdf6:	9b03      	ldr	r3, [sp, #12]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	46b8      	mov	r8, r7
 800fdfc:	dc20      	bgt.n	800fe40 <_dtoa_r+0x960>
 800fdfe:	469b      	mov	fp, r3
 800fe00:	9b07      	ldr	r3, [sp, #28]
 800fe02:	2b02      	cmp	r3, #2
 800fe04:	dd1e      	ble.n	800fe44 <_dtoa_r+0x964>
 800fe06:	f1bb 0f00 	cmp.w	fp, #0
 800fe0a:	f47f adb1 	bne.w	800f970 <_dtoa_r+0x490>
 800fe0e:	4621      	mov	r1, r4
 800fe10:	465b      	mov	r3, fp
 800fe12:	2205      	movs	r2, #5
 800fe14:	4648      	mov	r0, r9
 800fe16:	f000 fa95 	bl	8010344 <__multadd>
 800fe1a:	4601      	mov	r1, r0
 800fe1c:	4604      	mov	r4, r0
 800fe1e:	9802      	ldr	r0, [sp, #8]
 800fe20:	f000 fca0 	bl	8010764 <__mcmp>
 800fe24:	2800      	cmp	r0, #0
 800fe26:	f77f ada3 	ble.w	800f970 <_dtoa_r+0x490>
 800fe2a:	4656      	mov	r6, sl
 800fe2c:	2331      	movs	r3, #49	@ 0x31
 800fe2e:	f806 3b01 	strb.w	r3, [r6], #1
 800fe32:	f108 0801 	add.w	r8, r8, #1
 800fe36:	e59f      	b.n	800f978 <_dtoa_r+0x498>
 800fe38:	9c03      	ldr	r4, [sp, #12]
 800fe3a:	46b8      	mov	r8, r7
 800fe3c:	4625      	mov	r5, r4
 800fe3e:	e7f4      	b.n	800fe2a <_dtoa_r+0x94a>
 800fe40:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800fe44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	f000 8101 	beq.w	801004e <_dtoa_r+0xb6e>
 800fe4c:	2e00      	cmp	r6, #0
 800fe4e:	dd05      	ble.n	800fe5c <_dtoa_r+0x97c>
 800fe50:	4629      	mov	r1, r5
 800fe52:	4632      	mov	r2, r6
 800fe54:	4648      	mov	r0, r9
 800fe56:	f000 fc19 	bl	801068c <__lshift>
 800fe5a:	4605      	mov	r5, r0
 800fe5c:	9b08      	ldr	r3, [sp, #32]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d05c      	beq.n	800ff1c <_dtoa_r+0xa3c>
 800fe62:	6869      	ldr	r1, [r5, #4]
 800fe64:	4648      	mov	r0, r9
 800fe66:	f000 fa0b 	bl	8010280 <_Balloc>
 800fe6a:	4606      	mov	r6, r0
 800fe6c:	b928      	cbnz	r0, 800fe7a <_dtoa_r+0x99a>
 800fe6e:	4b82      	ldr	r3, [pc, #520]	@ (8010078 <_dtoa_r+0xb98>)
 800fe70:	4602      	mov	r2, r0
 800fe72:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fe76:	f7ff bb4a 	b.w	800f50e <_dtoa_r+0x2e>
 800fe7a:	692a      	ldr	r2, [r5, #16]
 800fe7c:	3202      	adds	r2, #2
 800fe7e:	0092      	lsls	r2, r2, #2
 800fe80:	f105 010c 	add.w	r1, r5, #12
 800fe84:	300c      	adds	r0, #12
 800fe86:	f7ff fa94 	bl	800f3b2 <memcpy>
 800fe8a:	2201      	movs	r2, #1
 800fe8c:	4631      	mov	r1, r6
 800fe8e:	4648      	mov	r0, r9
 800fe90:	f000 fbfc 	bl	801068c <__lshift>
 800fe94:	f10a 0301 	add.w	r3, sl, #1
 800fe98:	9300      	str	r3, [sp, #0]
 800fe9a:	eb0a 030b 	add.w	r3, sl, fp
 800fe9e:	9308      	str	r3, [sp, #32]
 800fea0:	9b04      	ldr	r3, [sp, #16]
 800fea2:	f003 0301 	and.w	r3, r3, #1
 800fea6:	462f      	mov	r7, r5
 800fea8:	9306      	str	r3, [sp, #24]
 800feaa:	4605      	mov	r5, r0
 800feac:	9b00      	ldr	r3, [sp, #0]
 800feae:	9802      	ldr	r0, [sp, #8]
 800feb0:	4621      	mov	r1, r4
 800feb2:	f103 3bff 	add.w	fp, r3, #4294967295
 800feb6:	f7ff fa8a 	bl	800f3ce <quorem>
 800feba:	4603      	mov	r3, r0
 800febc:	3330      	adds	r3, #48	@ 0x30
 800febe:	9003      	str	r0, [sp, #12]
 800fec0:	4639      	mov	r1, r7
 800fec2:	9802      	ldr	r0, [sp, #8]
 800fec4:	9309      	str	r3, [sp, #36]	@ 0x24
 800fec6:	f000 fc4d 	bl	8010764 <__mcmp>
 800feca:	462a      	mov	r2, r5
 800fecc:	9004      	str	r0, [sp, #16]
 800fece:	4621      	mov	r1, r4
 800fed0:	4648      	mov	r0, r9
 800fed2:	f000 fc63 	bl	801079c <__mdiff>
 800fed6:	68c2      	ldr	r2, [r0, #12]
 800fed8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800feda:	4606      	mov	r6, r0
 800fedc:	bb02      	cbnz	r2, 800ff20 <_dtoa_r+0xa40>
 800fede:	4601      	mov	r1, r0
 800fee0:	9802      	ldr	r0, [sp, #8]
 800fee2:	f000 fc3f 	bl	8010764 <__mcmp>
 800fee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fee8:	4602      	mov	r2, r0
 800feea:	4631      	mov	r1, r6
 800feec:	4648      	mov	r0, r9
 800feee:	920c      	str	r2, [sp, #48]	@ 0x30
 800fef0:	9309      	str	r3, [sp, #36]	@ 0x24
 800fef2:	f000 fa05 	bl	8010300 <_Bfree>
 800fef6:	9b07      	ldr	r3, [sp, #28]
 800fef8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800fefa:	9e00      	ldr	r6, [sp, #0]
 800fefc:	ea42 0103 	orr.w	r1, r2, r3
 800ff00:	9b06      	ldr	r3, [sp, #24]
 800ff02:	4319      	orrs	r1, r3
 800ff04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff06:	d10d      	bne.n	800ff24 <_dtoa_r+0xa44>
 800ff08:	2b39      	cmp	r3, #57	@ 0x39
 800ff0a:	d027      	beq.n	800ff5c <_dtoa_r+0xa7c>
 800ff0c:	9a04      	ldr	r2, [sp, #16]
 800ff0e:	2a00      	cmp	r2, #0
 800ff10:	dd01      	ble.n	800ff16 <_dtoa_r+0xa36>
 800ff12:	9b03      	ldr	r3, [sp, #12]
 800ff14:	3331      	adds	r3, #49	@ 0x31
 800ff16:	f88b 3000 	strb.w	r3, [fp]
 800ff1a:	e52e      	b.n	800f97a <_dtoa_r+0x49a>
 800ff1c:	4628      	mov	r0, r5
 800ff1e:	e7b9      	b.n	800fe94 <_dtoa_r+0x9b4>
 800ff20:	2201      	movs	r2, #1
 800ff22:	e7e2      	b.n	800feea <_dtoa_r+0xa0a>
 800ff24:	9904      	ldr	r1, [sp, #16]
 800ff26:	2900      	cmp	r1, #0
 800ff28:	db04      	blt.n	800ff34 <_dtoa_r+0xa54>
 800ff2a:	9807      	ldr	r0, [sp, #28]
 800ff2c:	4301      	orrs	r1, r0
 800ff2e:	9806      	ldr	r0, [sp, #24]
 800ff30:	4301      	orrs	r1, r0
 800ff32:	d120      	bne.n	800ff76 <_dtoa_r+0xa96>
 800ff34:	2a00      	cmp	r2, #0
 800ff36:	ddee      	ble.n	800ff16 <_dtoa_r+0xa36>
 800ff38:	9902      	ldr	r1, [sp, #8]
 800ff3a:	9300      	str	r3, [sp, #0]
 800ff3c:	2201      	movs	r2, #1
 800ff3e:	4648      	mov	r0, r9
 800ff40:	f000 fba4 	bl	801068c <__lshift>
 800ff44:	4621      	mov	r1, r4
 800ff46:	9002      	str	r0, [sp, #8]
 800ff48:	f000 fc0c 	bl	8010764 <__mcmp>
 800ff4c:	2800      	cmp	r0, #0
 800ff4e:	9b00      	ldr	r3, [sp, #0]
 800ff50:	dc02      	bgt.n	800ff58 <_dtoa_r+0xa78>
 800ff52:	d1e0      	bne.n	800ff16 <_dtoa_r+0xa36>
 800ff54:	07da      	lsls	r2, r3, #31
 800ff56:	d5de      	bpl.n	800ff16 <_dtoa_r+0xa36>
 800ff58:	2b39      	cmp	r3, #57	@ 0x39
 800ff5a:	d1da      	bne.n	800ff12 <_dtoa_r+0xa32>
 800ff5c:	2339      	movs	r3, #57	@ 0x39
 800ff5e:	f88b 3000 	strb.w	r3, [fp]
 800ff62:	4633      	mov	r3, r6
 800ff64:	461e      	mov	r6, r3
 800ff66:	3b01      	subs	r3, #1
 800ff68:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ff6c:	2a39      	cmp	r2, #57	@ 0x39
 800ff6e:	d04e      	beq.n	801000e <_dtoa_r+0xb2e>
 800ff70:	3201      	adds	r2, #1
 800ff72:	701a      	strb	r2, [r3, #0]
 800ff74:	e501      	b.n	800f97a <_dtoa_r+0x49a>
 800ff76:	2a00      	cmp	r2, #0
 800ff78:	dd03      	ble.n	800ff82 <_dtoa_r+0xaa2>
 800ff7a:	2b39      	cmp	r3, #57	@ 0x39
 800ff7c:	d0ee      	beq.n	800ff5c <_dtoa_r+0xa7c>
 800ff7e:	3301      	adds	r3, #1
 800ff80:	e7c9      	b.n	800ff16 <_dtoa_r+0xa36>
 800ff82:	9a00      	ldr	r2, [sp, #0]
 800ff84:	9908      	ldr	r1, [sp, #32]
 800ff86:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ff8a:	428a      	cmp	r2, r1
 800ff8c:	d028      	beq.n	800ffe0 <_dtoa_r+0xb00>
 800ff8e:	9902      	ldr	r1, [sp, #8]
 800ff90:	2300      	movs	r3, #0
 800ff92:	220a      	movs	r2, #10
 800ff94:	4648      	mov	r0, r9
 800ff96:	f000 f9d5 	bl	8010344 <__multadd>
 800ff9a:	42af      	cmp	r7, r5
 800ff9c:	9002      	str	r0, [sp, #8]
 800ff9e:	f04f 0300 	mov.w	r3, #0
 800ffa2:	f04f 020a 	mov.w	r2, #10
 800ffa6:	4639      	mov	r1, r7
 800ffa8:	4648      	mov	r0, r9
 800ffaa:	d107      	bne.n	800ffbc <_dtoa_r+0xadc>
 800ffac:	f000 f9ca 	bl	8010344 <__multadd>
 800ffb0:	4607      	mov	r7, r0
 800ffb2:	4605      	mov	r5, r0
 800ffb4:	9b00      	ldr	r3, [sp, #0]
 800ffb6:	3301      	adds	r3, #1
 800ffb8:	9300      	str	r3, [sp, #0]
 800ffba:	e777      	b.n	800feac <_dtoa_r+0x9cc>
 800ffbc:	f000 f9c2 	bl	8010344 <__multadd>
 800ffc0:	4629      	mov	r1, r5
 800ffc2:	4607      	mov	r7, r0
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	220a      	movs	r2, #10
 800ffc8:	4648      	mov	r0, r9
 800ffca:	f000 f9bb 	bl	8010344 <__multadd>
 800ffce:	4605      	mov	r5, r0
 800ffd0:	e7f0      	b.n	800ffb4 <_dtoa_r+0xad4>
 800ffd2:	f1bb 0f00 	cmp.w	fp, #0
 800ffd6:	bfcc      	ite	gt
 800ffd8:	465e      	movgt	r6, fp
 800ffda:	2601      	movle	r6, #1
 800ffdc:	4456      	add	r6, sl
 800ffde:	2700      	movs	r7, #0
 800ffe0:	9902      	ldr	r1, [sp, #8]
 800ffe2:	9300      	str	r3, [sp, #0]
 800ffe4:	2201      	movs	r2, #1
 800ffe6:	4648      	mov	r0, r9
 800ffe8:	f000 fb50 	bl	801068c <__lshift>
 800ffec:	4621      	mov	r1, r4
 800ffee:	9002      	str	r0, [sp, #8]
 800fff0:	f000 fbb8 	bl	8010764 <__mcmp>
 800fff4:	2800      	cmp	r0, #0
 800fff6:	dcb4      	bgt.n	800ff62 <_dtoa_r+0xa82>
 800fff8:	d102      	bne.n	8010000 <_dtoa_r+0xb20>
 800fffa:	9b00      	ldr	r3, [sp, #0]
 800fffc:	07db      	lsls	r3, r3, #31
 800fffe:	d4b0      	bmi.n	800ff62 <_dtoa_r+0xa82>
 8010000:	4633      	mov	r3, r6
 8010002:	461e      	mov	r6, r3
 8010004:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010008:	2a30      	cmp	r2, #48	@ 0x30
 801000a:	d0fa      	beq.n	8010002 <_dtoa_r+0xb22>
 801000c:	e4b5      	b.n	800f97a <_dtoa_r+0x49a>
 801000e:	459a      	cmp	sl, r3
 8010010:	d1a8      	bne.n	800ff64 <_dtoa_r+0xa84>
 8010012:	2331      	movs	r3, #49	@ 0x31
 8010014:	f108 0801 	add.w	r8, r8, #1
 8010018:	f88a 3000 	strb.w	r3, [sl]
 801001c:	e4ad      	b.n	800f97a <_dtoa_r+0x49a>
 801001e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010020:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801007c <_dtoa_r+0xb9c>
 8010024:	b11b      	cbz	r3, 801002e <_dtoa_r+0xb4e>
 8010026:	f10a 0308 	add.w	r3, sl, #8
 801002a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801002c:	6013      	str	r3, [r2, #0]
 801002e:	4650      	mov	r0, sl
 8010030:	b017      	add	sp, #92	@ 0x5c
 8010032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010036:	9b07      	ldr	r3, [sp, #28]
 8010038:	2b01      	cmp	r3, #1
 801003a:	f77f ae2e 	ble.w	800fc9a <_dtoa_r+0x7ba>
 801003e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010040:	9308      	str	r3, [sp, #32]
 8010042:	2001      	movs	r0, #1
 8010044:	e64d      	b.n	800fce2 <_dtoa_r+0x802>
 8010046:	f1bb 0f00 	cmp.w	fp, #0
 801004a:	f77f aed9 	ble.w	800fe00 <_dtoa_r+0x920>
 801004e:	4656      	mov	r6, sl
 8010050:	9802      	ldr	r0, [sp, #8]
 8010052:	4621      	mov	r1, r4
 8010054:	f7ff f9bb 	bl	800f3ce <quorem>
 8010058:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801005c:	f806 3b01 	strb.w	r3, [r6], #1
 8010060:	eba6 020a 	sub.w	r2, r6, sl
 8010064:	4593      	cmp	fp, r2
 8010066:	ddb4      	ble.n	800ffd2 <_dtoa_r+0xaf2>
 8010068:	9902      	ldr	r1, [sp, #8]
 801006a:	2300      	movs	r3, #0
 801006c:	220a      	movs	r2, #10
 801006e:	4648      	mov	r0, r9
 8010070:	f000 f968 	bl	8010344 <__multadd>
 8010074:	9002      	str	r0, [sp, #8]
 8010076:	e7eb      	b.n	8010050 <_dtoa_r+0xb70>
 8010078:	080113a8 	.word	0x080113a8
 801007c:	0801132c 	.word	0x0801132c

08010080 <_free_r>:
 8010080:	b538      	push	{r3, r4, r5, lr}
 8010082:	4605      	mov	r5, r0
 8010084:	2900      	cmp	r1, #0
 8010086:	d041      	beq.n	801010c <_free_r+0x8c>
 8010088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801008c:	1f0c      	subs	r4, r1, #4
 801008e:	2b00      	cmp	r3, #0
 8010090:	bfb8      	it	lt
 8010092:	18e4      	addlt	r4, r4, r3
 8010094:	f000 f8e8 	bl	8010268 <__malloc_lock>
 8010098:	4a1d      	ldr	r2, [pc, #116]	@ (8010110 <_free_r+0x90>)
 801009a:	6813      	ldr	r3, [r2, #0]
 801009c:	b933      	cbnz	r3, 80100ac <_free_r+0x2c>
 801009e:	6063      	str	r3, [r4, #4]
 80100a0:	6014      	str	r4, [r2, #0]
 80100a2:	4628      	mov	r0, r5
 80100a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80100a8:	f000 b8e4 	b.w	8010274 <__malloc_unlock>
 80100ac:	42a3      	cmp	r3, r4
 80100ae:	d908      	bls.n	80100c2 <_free_r+0x42>
 80100b0:	6820      	ldr	r0, [r4, #0]
 80100b2:	1821      	adds	r1, r4, r0
 80100b4:	428b      	cmp	r3, r1
 80100b6:	bf01      	itttt	eq
 80100b8:	6819      	ldreq	r1, [r3, #0]
 80100ba:	685b      	ldreq	r3, [r3, #4]
 80100bc:	1809      	addeq	r1, r1, r0
 80100be:	6021      	streq	r1, [r4, #0]
 80100c0:	e7ed      	b.n	801009e <_free_r+0x1e>
 80100c2:	461a      	mov	r2, r3
 80100c4:	685b      	ldr	r3, [r3, #4]
 80100c6:	b10b      	cbz	r3, 80100cc <_free_r+0x4c>
 80100c8:	42a3      	cmp	r3, r4
 80100ca:	d9fa      	bls.n	80100c2 <_free_r+0x42>
 80100cc:	6811      	ldr	r1, [r2, #0]
 80100ce:	1850      	adds	r0, r2, r1
 80100d0:	42a0      	cmp	r0, r4
 80100d2:	d10b      	bne.n	80100ec <_free_r+0x6c>
 80100d4:	6820      	ldr	r0, [r4, #0]
 80100d6:	4401      	add	r1, r0
 80100d8:	1850      	adds	r0, r2, r1
 80100da:	4283      	cmp	r3, r0
 80100dc:	6011      	str	r1, [r2, #0]
 80100de:	d1e0      	bne.n	80100a2 <_free_r+0x22>
 80100e0:	6818      	ldr	r0, [r3, #0]
 80100e2:	685b      	ldr	r3, [r3, #4]
 80100e4:	6053      	str	r3, [r2, #4]
 80100e6:	4408      	add	r0, r1
 80100e8:	6010      	str	r0, [r2, #0]
 80100ea:	e7da      	b.n	80100a2 <_free_r+0x22>
 80100ec:	d902      	bls.n	80100f4 <_free_r+0x74>
 80100ee:	230c      	movs	r3, #12
 80100f0:	602b      	str	r3, [r5, #0]
 80100f2:	e7d6      	b.n	80100a2 <_free_r+0x22>
 80100f4:	6820      	ldr	r0, [r4, #0]
 80100f6:	1821      	adds	r1, r4, r0
 80100f8:	428b      	cmp	r3, r1
 80100fa:	bf04      	itt	eq
 80100fc:	6819      	ldreq	r1, [r3, #0]
 80100fe:	685b      	ldreq	r3, [r3, #4]
 8010100:	6063      	str	r3, [r4, #4]
 8010102:	bf04      	itt	eq
 8010104:	1809      	addeq	r1, r1, r0
 8010106:	6021      	streq	r1, [r4, #0]
 8010108:	6054      	str	r4, [r2, #4]
 801010a:	e7ca      	b.n	80100a2 <_free_r+0x22>
 801010c:	bd38      	pop	{r3, r4, r5, pc}
 801010e:	bf00      	nop
 8010110:	20002254 	.word	0x20002254

08010114 <malloc>:
 8010114:	4b02      	ldr	r3, [pc, #8]	@ (8010120 <malloc+0xc>)
 8010116:	4601      	mov	r1, r0
 8010118:	6818      	ldr	r0, [r3, #0]
 801011a:	f000 b825 	b.w	8010168 <_malloc_r>
 801011e:	bf00      	nop
 8010120:	20000130 	.word	0x20000130

08010124 <sbrk_aligned>:
 8010124:	b570      	push	{r4, r5, r6, lr}
 8010126:	4e0f      	ldr	r6, [pc, #60]	@ (8010164 <sbrk_aligned+0x40>)
 8010128:	460c      	mov	r4, r1
 801012a:	6831      	ldr	r1, [r6, #0]
 801012c:	4605      	mov	r5, r0
 801012e:	b911      	cbnz	r1, 8010136 <sbrk_aligned+0x12>
 8010130:	f000 fed6 	bl	8010ee0 <_sbrk_r>
 8010134:	6030      	str	r0, [r6, #0]
 8010136:	4621      	mov	r1, r4
 8010138:	4628      	mov	r0, r5
 801013a:	f000 fed1 	bl	8010ee0 <_sbrk_r>
 801013e:	1c43      	adds	r3, r0, #1
 8010140:	d103      	bne.n	801014a <sbrk_aligned+0x26>
 8010142:	f04f 34ff 	mov.w	r4, #4294967295
 8010146:	4620      	mov	r0, r4
 8010148:	bd70      	pop	{r4, r5, r6, pc}
 801014a:	1cc4      	adds	r4, r0, #3
 801014c:	f024 0403 	bic.w	r4, r4, #3
 8010150:	42a0      	cmp	r0, r4
 8010152:	d0f8      	beq.n	8010146 <sbrk_aligned+0x22>
 8010154:	1a21      	subs	r1, r4, r0
 8010156:	4628      	mov	r0, r5
 8010158:	f000 fec2 	bl	8010ee0 <_sbrk_r>
 801015c:	3001      	adds	r0, #1
 801015e:	d1f2      	bne.n	8010146 <sbrk_aligned+0x22>
 8010160:	e7ef      	b.n	8010142 <sbrk_aligned+0x1e>
 8010162:	bf00      	nop
 8010164:	20002250 	.word	0x20002250

08010168 <_malloc_r>:
 8010168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801016c:	1ccd      	adds	r5, r1, #3
 801016e:	f025 0503 	bic.w	r5, r5, #3
 8010172:	3508      	adds	r5, #8
 8010174:	2d0c      	cmp	r5, #12
 8010176:	bf38      	it	cc
 8010178:	250c      	movcc	r5, #12
 801017a:	2d00      	cmp	r5, #0
 801017c:	4606      	mov	r6, r0
 801017e:	db01      	blt.n	8010184 <_malloc_r+0x1c>
 8010180:	42a9      	cmp	r1, r5
 8010182:	d904      	bls.n	801018e <_malloc_r+0x26>
 8010184:	230c      	movs	r3, #12
 8010186:	6033      	str	r3, [r6, #0]
 8010188:	2000      	movs	r0, #0
 801018a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801018e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010264 <_malloc_r+0xfc>
 8010192:	f000 f869 	bl	8010268 <__malloc_lock>
 8010196:	f8d8 3000 	ldr.w	r3, [r8]
 801019a:	461c      	mov	r4, r3
 801019c:	bb44      	cbnz	r4, 80101f0 <_malloc_r+0x88>
 801019e:	4629      	mov	r1, r5
 80101a0:	4630      	mov	r0, r6
 80101a2:	f7ff ffbf 	bl	8010124 <sbrk_aligned>
 80101a6:	1c43      	adds	r3, r0, #1
 80101a8:	4604      	mov	r4, r0
 80101aa:	d158      	bne.n	801025e <_malloc_r+0xf6>
 80101ac:	f8d8 4000 	ldr.w	r4, [r8]
 80101b0:	4627      	mov	r7, r4
 80101b2:	2f00      	cmp	r7, #0
 80101b4:	d143      	bne.n	801023e <_malloc_r+0xd6>
 80101b6:	2c00      	cmp	r4, #0
 80101b8:	d04b      	beq.n	8010252 <_malloc_r+0xea>
 80101ba:	6823      	ldr	r3, [r4, #0]
 80101bc:	4639      	mov	r1, r7
 80101be:	4630      	mov	r0, r6
 80101c0:	eb04 0903 	add.w	r9, r4, r3
 80101c4:	f000 fe8c 	bl	8010ee0 <_sbrk_r>
 80101c8:	4581      	cmp	r9, r0
 80101ca:	d142      	bne.n	8010252 <_malloc_r+0xea>
 80101cc:	6821      	ldr	r1, [r4, #0]
 80101ce:	1a6d      	subs	r5, r5, r1
 80101d0:	4629      	mov	r1, r5
 80101d2:	4630      	mov	r0, r6
 80101d4:	f7ff ffa6 	bl	8010124 <sbrk_aligned>
 80101d8:	3001      	adds	r0, #1
 80101da:	d03a      	beq.n	8010252 <_malloc_r+0xea>
 80101dc:	6823      	ldr	r3, [r4, #0]
 80101de:	442b      	add	r3, r5
 80101e0:	6023      	str	r3, [r4, #0]
 80101e2:	f8d8 3000 	ldr.w	r3, [r8]
 80101e6:	685a      	ldr	r2, [r3, #4]
 80101e8:	bb62      	cbnz	r2, 8010244 <_malloc_r+0xdc>
 80101ea:	f8c8 7000 	str.w	r7, [r8]
 80101ee:	e00f      	b.n	8010210 <_malloc_r+0xa8>
 80101f0:	6822      	ldr	r2, [r4, #0]
 80101f2:	1b52      	subs	r2, r2, r5
 80101f4:	d420      	bmi.n	8010238 <_malloc_r+0xd0>
 80101f6:	2a0b      	cmp	r2, #11
 80101f8:	d917      	bls.n	801022a <_malloc_r+0xc2>
 80101fa:	1961      	adds	r1, r4, r5
 80101fc:	42a3      	cmp	r3, r4
 80101fe:	6025      	str	r5, [r4, #0]
 8010200:	bf18      	it	ne
 8010202:	6059      	strne	r1, [r3, #4]
 8010204:	6863      	ldr	r3, [r4, #4]
 8010206:	bf08      	it	eq
 8010208:	f8c8 1000 	streq.w	r1, [r8]
 801020c:	5162      	str	r2, [r4, r5]
 801020e:	604b      	str	r3, [r1, #4]
 8010210:	4630      	mov	r0, r6
 8010212:	f000 f82f 	bl	8010274 <__malloc_unlock>
 8010216:	f104 000b 	add.w	r0, r4, #11
 801021a:	1d23      	adds	r3, r4, #4
 801021c:	f020 0007 	bic.w	r0, r0, #7
 8010220:	1ac2      	subs	r2, r0, r3
 8010222:	bf1c      	itt	ne
 8010224:	1a1b      	subne	r3, r3, r0
 8010226:	50a3      	strne	r3, [r4, r2]
 8010228:	e7af      	b.n	801018a <_malloc_r+0x22>
 801022a:	6862      	ldr	r2, [r4, #4]
 801022c:	42a3      	cmp	r3, r4
 801022e:	bf0c      	ite	eq
 8010230:	f8c8 2000 	streq.w	r2, [r8]
 8010234:	605a      	strne	r2, [r3, #4]
 8010236:	e7eb      	b.n	8010210 <_malloc_r+0xa8>
 8010238:	4623      	mov	r3, r4
 801023a:	6864      	ldr	r4, [r4, #4]
 801023c:	e7ae      	b.n	801019c <_malloc_r+0x34>
 801023e:	463c      	mov	r4, r7
 8010240:	687f      	ldr	r7, [r7, #4]
 8010242:	e7b6      	b.n	80101b2 <_malloc_r+0x4a>
 8010244:	461a      	mov	r2, r3
 8010246:	685b      	ldr	r3, [r3, #4]
 8010248:	42a3      	cmp	r3, r4
 801024a:	d1fb      	bne.n	8010244 <_malloc_r+0xdc>
 801024c:	2300      	movs	r3, #0
 801024e:	6053      	str	r3, [r2, #4]
 8010250:	e7de      	b.n	8010210 <_malloc_r+0xa8>
 8010252:	230c      	movs	r3, #12
 8010254:	6033      	str	r3, [r6, #0]
 8010256:	4630      	mov	r0, r6
 8010258:	f000 f80c 	bl	8010274 <__malloc_unlock>
 801025c:	e794      	b.n	8010188 <_malloc_r+0x20>
 801025e:	6005      	str	r5, [r0, #0]
 8010260:	e7d6      	b.n	8010210 <_malloc_r+0xa8>
 8010262:	bf00      	nop
 8010264:	20002254 	.word	0x20002254

08010268 <__malloc_lock>:
 8010268:	4801      	ldr	r0, [pc, #4]	@ (8010270 <__malloc_lock+0x8>)
 801026a:	f7ff b8a0 	b.w	800f3ae <__retarget_lock_acquire_recursive>
 801026e:	bf00      	nop
 8010270:	2000224c 	.word	0x2000224c

08010274 <__malloc_unlock>:
 8010274:	4801      	ldr	r0, [pc, #4]	@ (801027c <__malloc_unlock+0x8>)
 8010276:	f7ff b89b 	b.w	800f3b0 <__retarget_lock_release_recursive>
 801027a:	bf00      	nop
 801027c:	2000224c 	.word	0x2000224c

08010280 <_Balloc>:
 8010280:	b570      	push	{r4, r5, r6, lr}
 8010282:	69c6      	ldr	r6, [r0, #28]
 8010284:	4604      	mov	r4, r0
 8010286:	460d      	mov	r5, r1
 8010288:	b976      	cbnz	r6, 80102a8 <_Balloc+0x28>
 801028a:	2010      	movs	r0, #16
 801028c:	f7ff ff42 	bl	8010114 <malloc>
 8010290:	4602      	mov	r2, r0
 8010292:	61e0      	str	r0, [r4, #28]
 8010294:	b920      	cbnz	r0, 80102a0 <_Balloc+0x20>
 8010296:	4b18      	ldr	r3, [pc, #96]	@ (80102f8 <_Balloc+0x78>)
 8010298:	4818      	ldr	r0, [pc, #96]	@ (80102fc <_Balloc+0x7c>)
 801029a:	216b      	movs	r1, #107	@ 0x6b
 801029c:	f000 fe30 	bl	8010f00 <__assert_func>
 80102a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80102a4:	6006      	str	r6, [r0, #0]
 80102a6:	60c6      	str	r6, [r0, #12]
 80102a8:	69e6      	ldr	r6, [r4, #28]
 80102aa:	68f3      	ldr	r3, [r6, #12]
 80102ac:	b183      	cbz	r3, 80102d0 <_Balloc+0x50>
 80102ae:	69e3      	ldr	r3, [r4, #28]
 80102b0:	68db      	ldr	r3, [r3, #12]
 80102b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80102b6:	b9b8      	cbnz	r0, 80102e8 <_Balloc+0x68>
 80102b8:	2101      	movs	r1, #1
 80102ba:	fa01 f605 	lsl.w	r6, r1, r5
 80102be:	1d72      	adds	r2, r6, #5
 80102c0:	0092      	lsls	r2, r2, #2
 80102c2:	4620      	mov	r0, r4
 80102c4:	f000 fe3a 	bl	8010f3c <_calloc_r>
 80102c8:	b160      	cbz	r0, 80102e4 <_Balloc+0x64>
 80102ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80102ce:	e00e      	b.n	80102ee <_Balloc+0x6e>
 80102d0:	2221      	movs	r2, #33	@ 0x21
 80102d2:	2104      	movs	r1, #4
 80102d4:	4620      	mov	r0, r4
 80102d6:	f000 fe31 	bl	8010f3c <_calloc_r>
 80102da:	69e3      	ldr	r3, [r4, #28]
 80102dc:	60f0      	str	r0, [r6, #12]
 80102de:	68db      	ldr	r3, [r3, #12]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d1e4      	bne.n	80102ae <_Balloc+0x2e>
 80102e4:	2000      	movs	r0, #0
 80102e6:	bd70      	pop	{r4, r5, r6, pc}
 80102e8:	6802      	ldr	r2, [r0, #0]
 80102ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80102ee:	2300      	movs	r3, #0
 80102f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80102f4:	e7f7      	b.n	80102e6 <_Balloc+0x66>
 80102f6:	bf00      	nop
 80102f8:	08011339 	.word	0x08011339
 80102fc:	080113b9 	.word	0x080113b9

08010300 <_Bfree>:
 8010300:	b570      	push	{r4, r5, r6, lr}
 8010302:	69c6      	ldr	r6, [r0, #28]
 8010304:	4605      	mov	r5, r0
 8010306:	460c      	mov	r4, r1
 8010308:	b976      	cbnz	r6, 8010328 <_Bfree+0x28>
 801030a:	2010      	movs	r0, #16
 801030c:	f7ff ff02 	bl	8010114 <malloc>
 8010310:	4602      	mov	r2, r0
 8010312:	61e8      	str	r0, [r5, #28]
 8010314:	b920      	cbnz	r0, 8010320 <_Bfree+0x20>
 8010316:	4b09      	ldr	r3, [pc, #36]	@ (801033c <_Bfree+0x3c>)
 8010318:	4809      	ldr	r0, [pc, #36]	@ (8010340 <_Bfree+0x40>)
 801031a:	218f      	movs	r1, #143	@ 0x8f
 801031c:	f000 fdf0 	bl	8010f00 <__assert_func>
 8010320:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010324:	6006      	str	r6, [r0, #0]
 8010326:	60c6      	str	r6, [r0, #12]
 8010328:	b13c      	cbz	r4, 801033a <_Bfree+0x3a>
 801032a:	69eb      	ldr	r3, [r5, #28]
 801032c:	6862      	ldr	r2, [r4, #4]
 801032e:	68db      	ldr	r3, [r3, #12]
 8010330:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010334:	6021      	str	r1, [r4, #0]
 8010336:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801033a:	bd70      	pop	{r4, r5, r6, pc}
 801033c:	08011339 	.word	0x08011339
 8010340:	080113b9 	.word	0x080113b9

08010344 <__multadd>:
 8010344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010348:	690d      	ldr	r5, [r1, #16]
 801034a:	4607      	mov	r7, r0
 801034c:	460c      	mov	r4, r1
 801034e:	461e      	mov	r6, r3
 8010350:	f101 0c14 	add.w	ip, r1, #20
 8010354:	2000      	movs	r0, #0
 8010356:	f8dc 3000 	ldr.w	r3, [ip]
 801035a:	b299      	uxth	r1, r3
 801035c:	fb02 6101 	mla	r1, r2, r1, r6
 8010360:	0c1e      	lsrs	r6, r3, #16
 8010362:	0c0b      	lsrs	r3, r1, #16
 8010364:	fb02 3306 	mla	r3, r2, r6, r3
 8010368:	b289      	uxth	r1, r1
 801036a:	3001      	adds	r0, #1
 801036c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010370:	4285      	cmp	r5, r0
 8010372:	f84c 1b04 	str.w	r1, [ip], #4
 8010376:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801037a:	dcec      	bgt.n	8010356 <__multadd+0x12>
 801037c:	b30e      	cbz	r6, 80103c2 <__multadd+0x7e>
 801037e:	68a3      	ldr	r3, [r4, #8]
 8010380:	42ab      	cmp	r3, r5
 8010382:	dc19      	bgt.n	80103b8 <__multadd+0x74>
 8010384:	6861      	ldr	r1, [r4, #4]
 8010386:	4638      	mov	r0, r7
 8010388:	3101      	adds	r1, #1
 801038a:	f7ff ff79 	bl	8010280 <_Balloc>
 801038e:	4680      	mov	r8, r0
 8010390:	b928      	cbnz	r0, 801039e <__multadd+0x5a>
 8010392:	4602      	mov	r2, r0
 8010394:	4b0c      	ldr	r3, [pc, #48]	@ (80103c8 <__multadd+0x84>)
 8010396:	480d      	ldr	r0, [pc, #52]	@ (80103cc <__multadd+0x88>)
 8010398:	21ba      	movs	r1, #186	@ 0xba
 801039a:	f000 fdb1 	bl	8010f00 <__assert_func>
 801039e:	6922      	ldr	r2, [r4, #16]
 80103a0:	3202      	adds	r2, #2
 80103a2:	f104 010c 	add.w	r1, r4, #12
 80103a6:	0092      	lsls	r2, r2, #2
 80103a8:	300c      	adds	r0, #12
 80103aa:	f7ff f802 	bl	800f3b2 <memcpy>
 80103ae:	4621      	mov	r1, r4
 80103b0:	4638      	mov	r0, r7
 80103b2:	f7ff ffa5 	bl	8010300 <_Bfree>
 80103b6:	4644      	mov	r4, r8
 80103b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80103bc:	3501      	adds	r5, #1
 80103be:	615e      	str	r6, [r3, #20]
 80103c0:	6125      	str	r5, [r4, #16]
 80103c2:	4620      	mov	r0, r4
 80103c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103c8:	080113a8 	.word	0x080113a8
 80103cc:	080113b9 	.word	0x080113b9

080103d0 <__hi0bits>:
 80103d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80103d4:	4603      	mov	r3, r0
 80103d6:	bf36      	itet	cc
 80103d8:	0403      	lslcc	r3, r0, #16
 80103da:	2000      	movcs	r0, #0
 80103dc:	2010      	movcc	r0, #16
 80103de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80103e2:	bf3c      	itt	cc
 80103e4:	021b      	lslcc	r3, r3, #8
 80103e6:	3008      	addcc	r0, #8
 80103e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80103ec:	bf3c      	itt	cc
 80103ee:	011b      	lslcc	r3, r3, #4
 80103f0:	3004      	addcc	r0, #4
 80103f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80103f6:	bf3c      	itt	cc
 80103f8:	009b      	lslcc	r3, r3, #2
 80103fa:	3002      	addcc	r0, #2
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	db05      	blt.n	801040c <__hi0bits+0x3c>
 8010400:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010404:	f100 0001 	add.w	r0, r0, #1
 8010408:	bf08      	it	eq
 801040a:	2020      	moveq	r0, #32
 801040c:	4770      	bx	lr

0801040e <__lo0bits>:
 801040e:	6803      	ldr	r3, [r0, #0]
 8010410:	4602      	mov	r2, r0
 8010412:	f013 0007 	ands.w	r0, r3, #7
 8010416:	d00b      	beq.n	8010430 <__lo0bits+0x22>
 8010418:	07d9      	lsls	r1, r3, #31
 801041a:	d421      	bmi.n	8010460 <__lo0bits+0x52>
 801041c:	0798      	lsls	r0, r3, #30
 801041e:	bf49      	itett	mi
 8010420:	085b      	lsrmi	r3, r3, #1
 8010422:	089b      	lsrpl	r3, r3, #2
 8010424:	2001      	movmi	r0, #1
 8010426:	6013      	strmi	r3, [r2, #0]
 8010428:	bf5c      	itt	pl
 801042a:	6013      	strpl	r3, [r2, #0]
 801042c:	2002      	movpl	r0, #2
 801042e:	4770      	bx	lr
 8010430:	b299      	uxth	r1, r3
 8010432:	b909      	cbnz	r1, 8010438 <__lo0bits+0x2a>
 8010434:	0c1b      	lsrs	r3, r3, #16
 8010436:	2010      	movs	r0, #16
 8010438:	b2d9      	uxtb	r1, r3
 801043a:	b909      	cbnz	r1, 8010440 <__lo0bits+0x32>
 801043c:	3008      	adds	r0, #8
 801043e:	0a1b      	lsrs	r3, r3, #8
 8010440:	0719      	lsls	r1, r3, #28
 8010442:	bf04      	itt	eq
 8010444:	091b      	lsreq	r3, r3, #4
 8010446:	3004      	addeq	r0, #4
 8010448:	0799      	lsls	r1, r3, #30
 801044a:	bf04      	itt	eq
 801044c:	089b      	lsreq	r3, r3, #2
 801044e:	3002      	addeq	r0, #2
 8010450:	07d9      	lsls	r1, r3, #31
 8010452:	d403      	bmi.n	801045c <__lo0bits+0x4e>
 8010454:	085b      	lsrs	r3, r3, #1
 8010456:	f100 0001 	add.w	r0, r0, #1
 801045a:	d003      	beq.n	8010464 <__lo0bits+0x56>
 801045c:	6013      	str	r3, [r2, #0]
 801045e:	4770      	bx	lr
 8010460:	2000      	movs	r0, #0
 8010462:	4770      	bx	lr
 8010464:	2020      	movs	r0, #32
 8010466:	4770      	bx	lr

08010468 <__i2b>:
 8010468:	b510      	push	{r4, lr}
 801046a:	460c      	mov	r4, r1
 801046c:	2101      	movs	r1, #1
 801046e:	f7ff ff07 	bl	8010280 <_Balloc>
 8010472:	4602      	mov	r2, r0
 8010474:	b928      	cbnz	r0, 8010482 <__i2b+0x1a>
 8010476:	4b05      	ldr	r3, [pc, #20]	@ (801048c <__i2b+0x24>)
 8010478:	4805      	ldr	r0, [pc, #20]	@ (8010490 <__i2b+0x28>)
 801047a:	f240 1145 	movw	r1, #325	@ 0x145
 801047e:	f000 fd3f 	bl	8010f00 <__assert_func>
 8010482:	2301      	movs	r3, #1
 8010484:	6144      	str	r4, [r0, #20]
 8010486:	6103      	str	r3, [r0, #16]
 8010488:	bd10      	pop	{r4, pc}
 801048a:	bf00      	nop
 801048c:	080113a8 	.word	0x080113a8
 8010490:	080113b9 	.word	0x080113b9

08010494 <__multiply>:
 8010494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010498:	4617      	mov	r7, r2
 801049a:	690a      	ldr	r2, [r1, #16]
 801049c:	693b      	ldr	r3, [r7, #16]
 801049e:	429a      	cmp	r2, r3
 80104a0:	bfa8      	it	ge
 80104a2:	463b      	movge	r3, r7
 80104a4:	4689      	mov	r9, r1
 80104a6:	bfa4      	itt	ge
 80104a8:	460f      	movge	r7, r1
 80104aa:	4699      	movge	r9, r3
 80104ac:	693d      	ldr	r5, [r7, #16]
 80104ae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80104b2:	68bb      	ldr	r3, [r7, #8]
 80104b4:	6879      	ldr	r1, [r7, #4]
 80104b6:	eb05 060a 	add.w	r6, r5, sl
 80104ba:	42b3      	cmp	r3, r6
 80104bc:	b085      	sub	sp, #20
 80104be:	bfb8      	it	lt
 80104c0:	3101      	addlt	r1, #1
 80104c2:	f7ff fedd 	bl	8010280 <_Balloc>
 80104c6:	b930      	cbnz	r0, 80104d6 <__multiply+0x42>
 80104c8:	4602      	mov	r2, r0
 80104ca:	4b41      	ldr	r3, [pc, #260]	@ (80105d0 <__multiply+0x13c>)
 80104cc:	4841      	ldr	r0, [pc, #260]	@ (80105d4 <__multiply+0x140>)
 80104ce:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80104d2:	f000 fd15 	bl	8010f00 <__assert_func>
 80104d6:	f100 0414 	add.w	r4, r0, #20
 80104da:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80104de:	4623      	mov	r3, r4
 80104e0:	2200      	movs	r2, #0
 80104e2:	4573      	cmp	r3, lr
 80104e4:	d320      	bcc.n	8010528 <__multiply+0x94>
 80104e6:	f107 0814 	add.w	r8, r7, #20
 80104ea:	f109 0114 	add.w	r1, r9, #20
 80104ee:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80104f2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80104f6:	9302      	str	r3, [sp, #8]
 80104f8:	1beb      	subs	r3, r5, r7
 80104fa:	3b15      	subs	r3, #21
 80104fc:	f023 0303 	bic.w	r3, r3, #3
 8010500:	3304      	adds	r3, #4
 8010502:	3715      	adds	r7, #21
 8010504:	42bd      	cmp	r5, r7
 8010506:	bf38      	it	cc
 8010508:	2304      	movcc	r3, #4
 801050a:	9301      	str	r3, [sp, #4]
 801050c:	9b02      	ldr	r3, [sp, #8]
 801050e:	9103      	str	r1, [sp, #12]
 8010510:	428b      	cmp	r3, r1
 8010512:	d80c      	bhi.n	801052e <__multiply+0x9a>
 8010514:	2e00      	cmp	r6, #0
 8010516:	dd03      	ble.n	8010520 <__multiply+0x8c>
 8010518:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801051c:	2b00      	cmp	r3, #0
 801051e:	d055      	beq.n	80105cc <__multiply+0x138>
 8010520:	6106      	str	r6, [r0, #16]
 8010522:	b005      	add	sp, #20
 8010524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010528:	f843 2b04 	str.w	r2, [r3], #4
 801052c:	e7d9      	b.n	80104e2 <__multiply+0x4e>
 801052e:	f8b1 a000 	ldrh.w	sl, [r1]
 8010532:	f1ba 0f00 	cmp.w	sl, #0
 8010536:	d01f      	beq.n	8010578 <__multiply+0xe4>
 8010538:	46c4      	mov	ip, r8
 801053a:	46a1      	mov	r9, r4
 801053c:	2700      	movs	r7, #0
 801053e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010542:	f8d9 3000 	ldr.w	r3, [r9]
 8010546:	fa1f fb82 	uxth.w	fp, r2
 801054a:	b29b      	uxth	r3, r3
 801054c:	fb0a 330b 	mla	r3, sl, fp, r3
 8010550:	443b      	add	r3, r7
 8010552:	f8d9 7000 	ldr.w	r7, [r9]
 8010556:	0c12      	lsrs	r2, r2, #16
 8010558:	0c3f      	lsrs	r7, r7, #16
 801055a:	fb0a 7202 	mla	r2, sl, r2, r7
 801055e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8010562:	b29b      	uxth	r3, r3
 8010564:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010568:	4565      	cmp	r5, ip
 801056a:	f849 3b04 	str.w	r3, [r9], #4
 801056e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8010572:	d8e4      	bhi.n	801053e <__multiply+0xaa>
 8010574:	9b01      	ldr	r3, [sp, #4]
 8010576:	50e7      	str	r7, [r4, r3]
 8010578:	9b03      	ldr	r3, [sp, #12]
 801057a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801057e:	3104      	adds	r1, #4
 8010580:	f1b9 0f00 	cmp.w	r9, #0
 8010584:	d020      	beq.n	80105c8 <__multiply+0x134>
 8010586:	6823      	ldr	r3, [r4, #0]
 8010588:	4647      	mov	r7, r8
 801058a:	46a4      	mov	ip, r4
 801058c:	f04f 0a00 	mov.w	sl, #0
 8010590:	f8b7 b000 	ldrh.w	fp, [r7]
 8010594:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8010598:	fb09 220b 	mla	r2, r9, fp, r2
 801059c:	4452      	add	r2, sl
 801059e:	b29b      	uxth	r3, r3
 80105a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80105a4:	f84c 3b04 	str.w	r3, [ip], #4
 80105a8:	f857 3b04 	ldr.w	r3, [r7], #4
 80105ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80105b0:	f8bc 3000 	ldrh.w	r3, [ip]
 80105b4:	fb09 330a 	mla	r3, r9, sl, r3
 80105b8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80105bc:	42bd      	cmp	r5, r7
 80105be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80105c2:	d8e5      	bhi.n	8010590 <__multiply+0xfc>
 80105c4:	9a01      	ldr	r2, [sp, #4]
 80105c6:	50a3      	str	r3, [r4, r2]
 80105c8:	3404      	adds	r4, #4
 80105ca:	e79f      	b.n	801050c <__multiply+0x78>
 80105cc:	3e01      	subs	r6, #1
 80105ce:	e7a1      	b.n	8010514 <__multiply+0x80>
 80105d0:	080113a8 	.word	0x080113a8
 80105d4:	080113b9 	.word	0x080113b9

080105d8 <__pow5mult>:
 80105d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105dc:	4615      	mov	r5, r2
 80105de:	f012 0203 	ands.w	r2, r2, #3
 80105e2:	4607      	mov	r7, r0
 80105e4:	460e      	mov	r6, r1
 80105e6:	d007      	beq.n	80105f8 <__pow5mult+0x20>
 80105e8:	4c25      	ldr	r4, [pc, #148]	@ (8010680 <__pow5mult+0xa8>)
 80105ea:	3a01      	subs	r2, #1
 80105ec:	2300      	movs	r3, #0
 80105ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80105f2:	f7ff fea7 	bl	8010344 <__multadd>
 80105f6:	4606      	mov	r6, r0
 80105f8:	10ad      	asrs	r5, r5, #2
 80105fa:	d03d      	beq.n	8010678 <__pow5mult+0xa0>
 80105fc:	69fc      	ldr	r4, [r7, #28]
 80105fe:	b97c      	cbnz	r4, 8010620 <__pow5mult+0x48>
 8010600:	2010      	movs	r0, #16
 8010602:	f7ff fd87 	bl	8010114 <malloc>
 8010606:	4602      	mov	r2, r0
 8010608:	61f8      	str	r0, [r7, #28]
 801060a:	b928      	cbnz	r0, 8010618 <__pow5mult+0x40>
 801060c:	4b1d      	ldr	r3, [pc, #116]	@ (8010684 <__pow5mult+0xac>)
 801060e:	481e      	ldr	r0, [pc, #120]	@ (8010688 <__pow5mult+0xb0>)
 8010610:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010614:	f000 fc74 	bl	8010f00 <__assert_func>
 8010618:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801061c:	6004      	str	r4, [r0, #0]
 801061e:	60c4      	str	r4, [r0, #12]
 8010620:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010624:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010628:	b94c      	cbnz	r4, 801063e <__pow5mult+0x66>
 801062a:	f240 2171 	movw	r1, #625	@ 0x271
 801062e:	4638      	mov	r0, r7
 8010630:	f7ff ff1a 	bl	8010468 <__i2b>
 8010634:	2300      	movs	r3, #0
 8010636:	f8c8 0008 	str.w	r0, [r8, #8]
 801063a:	4604      	mov	r4, r0
 801063c:	6003      	str	r3, [r0, #0]
 801063e:	f04f 0900 	mov.w	r9, #0
 8010642:	07eb      	lsls	r3, r5, #31
 8010644:	d50a      	bpl.n	801065c <__pow5mult+0x84>
 8010646:	4631      	mov	r1, r6
 8010648:	4622      	mov	r2, r4
 801064a:	4638      	mov	r0, r7
 801064c:	f7ff ff22 	bl	8010494 <__multiply>
 8010650:	4631      	mov	r1, r6
 8010652:	4680      	mov	r8, r0
 8010654:	4638      	mov	r0, r7
 8010656:	f7ff fe53 	bl	8010300 <_Bfree>
 801065a:	4646      	mov	r6, r8
 801065c:	106d      	asrs	r5, r5, #1
 801065e:	d00b      	beq.n	8010678 <__pow5mult+0xa0>
 8010660:	6820      	ldr	r0, [r4, #0]
 8010662:	b938      	cbnz	r0, 8010674 <__pow5mult+0x9c>
 8010664:	4622      	mov	r2, r4
 8010666:	4621      	mov	r1, r4
 8010668:	4638      	mov	r0, r7
 801066a:	f7ff ff13 	bl	8010494 <__multiply>
 801066e:	6020      	str	r0, [r4, #0]
 8010670:	f8c0 9000 	str.w	r9, [r0]
 8010674:	4604      	mov	r4, r0
 8010676:	e7e4      	b.n	8010642 <__pow5mult+0x6a>
 8010678:	4630      	mov	r0, r6
 801067a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801067e:	bf00      	nop
 8010680:	0801146c 	.word	0x0801146c
 8010684:	08011339 	.word	0x08011339
 8010688:	080113b9 	.word	0x080113b9

0801068c <__lshift>:
 801068c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010690:	460c      	mov	r4, r1
 8010692:	6849      	ldr	r1, [r1, #4]
 8010694:	6923      	ldr	r3, [r4, #16]
 8010696:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801069a:	68a3      	ldr	r3, [r4, #8]
 801069c:	4607      	mov	r7, r0
 801069e:	4691      	mov	r9, r2
 80106a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80106a4:	f108 0601 	add.w	r6, r8, #1
 80106a8:	42b3      	cmp	r3, r6
 80106aa:	db0b      	blt.n	80106c4 <__lshift+0x38>
 80106ac:	4638      	mov	r0, r7
 80106ae:	f7ff fde7 	bl	8010280 <_Balloc>
 80106b2:	4605      	mov	r5, r0
 80106b4:	b948      	cbnz	r0, 80106ca <__lshift+0x3e>
 80106b6:	4602      	mov	r2, r0
 80106b8:	4b28      	ldr	r3, [pc, #160]	@ (801075c <__lshift+0xd0>)
 80106ba:	4829      	ldr	r0, [pc, #164]	@ (8010760 <__lshift+0xd4>)
 80106bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80106c0:	f000 fc1e 	bl	8010f00 <__assert_func>
 80106c4:	3101      	adds	r1, #1
 80106c6:	005b      	lsls	r3, r3, #1
 80106c8:	e7ee      	b.n	80106a8 <__lshift+0x1c>
 80106ca:	2300      	movs	r3, #0
 80106cc:	f100 0114 	add.w	r1, r0, #20
 80106d0:	f100 0210 	add.w	r2, r0, #16
 80106d4:	4618      	mov	r0, r3
 80106d6:	4553      	cmp	r3, sl
 80106d8:	db33      	blt.n	8010742 <__lshift+0xb6>
 80106da:	6920      	ldr	r0, [r4, #16]
 80106dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80106e0:	f104 0314 	add.w	r3, r4, #20
 80106e4:	f019 091f 	ands.w	r9, r9, #31
 80106e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80106ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80106f0:	d02b      	beq.n	801074a <__lshift+0xbe>
 80106f2:	f1c9 0e20 	rsb	lr, r9, #32
 80106f6:	468a      	mov	sl, r1
 80106f8:	2200      	movs	r2, #0
 80106fa:	6818      	ldr	r0, [r3, #0]
 80106fc:	fa00 f009 	lsl.w	r0, r0, r9
 8010700:	4310      	orrs	r0, r2
 8010702:	f84a 0b04 	str.w	r0, [sl], #4
 8010706:	f853 2b04 	ldr.w	r2, [r3], #4
 801070a:	459c      	cmp	ip, r3
 801070c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010710:	d8f3      	bhi.n	80106fa <__lshift+0x6e>
 8010712:	ebac 0304 	sub.w	r3, ip, r4
 8010716:	3b15      	subs	r3, #21
 8010718:	f023 0303 	bic.w	r3, r3, #3
 801071c:	3304      	adds	r3, #4
 801071e:	f104 0015 	add.w	r0, r4, #21
 8010722:	4560      	cmp	r0, ip
 8010724:	bf88      	it	hi
 8010726:	2304      	movhi	r3, #4
 8010728:	50ca      	str	r2, [r1, r3]
 801072a:	b10a      	cbz	r2, 8010730 <__lshift+0xa4>
 801072c:	f108 0602 	add.w	r6, r8, #2
 8010730:	3e01      	subs	r6, #1
 8010732:	4638      	mov	r0, r7
 8010734:	612e      	str	r6, [r5, #16]
 8010736:	4621      	mov	r1, r4
 8010738:	f7ff fde2 	bl	8010300 <_Bfree>
 801073c:	4628      	mov	r0, r5
 801073e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010742:	f842 0f04 	str.w	r0, [r2, #4]!
 8010746:	3301      	adds	r3, #1
 8010748:	e7c5      	b.n	80106d6 <__lshift+0x4a>
 801074a:	3904      	subs	r1, #4
 801074c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010750:	f841 2f04 	str.w	r2, [r1, #4]!
 8010754:	459c      	cmp	ip, r3
 8010756:	d8f9      	bhi.n	801074c <__lshift+0xc0>
 8010758:	e7ea      	b.n	8010730 <__lshift+0xa4>
 801075a:	bf00      	nop
 801075c:	080113a8 	.word	0x080113a8
 8010760:	080113b9 	.word	0x080113b9

08010764 <__mcmp>:
 8010764:	690a      	ldr	r2, [r1, #16]
 8010766:	4603      	mov	r3, r0
 8010768:	6900      	ldr	r0, [r0, #16]
 801076a:	1a80      	subs	r0, r0, r2
 801076c:	b530      	push	{r4, r5, lr}
 801076e:	d10e      	bne.n	801078e <__mcmp+0x2a>
 8010770:	3314      	adds	r3, #20
 8010772:	3114      	adds	r1, #20
 8010774:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010778:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801077c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010780:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010784:	4295      	cmp	r5, r2
 8010786:	d003      	beq.n	8010790 <__mcmp+0x2c>
 8010788:	d205      	bcs.n	8010796 <__mcmp+0x32>
 801078a:	f04f 30ff 	mov.w	r0, #4294967295
 801078e:	bd30      	pop	{r4, r5, pc}
 8010790:	42a3      	cmp	r3, r4
 8010792:	d3f3      	bcc.n	801077c <__mcmp+0x18>
 8010794:	e7fb      	b.n	801078e <__mcmp+0x2a>
 8010796:	2001      	movs	r0, #1
 8010798:	e7f9      	b.n	801078e <__mcmp+0x2a>
	...

0801079c <__mdiff>:
 801079c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107a0:	4689      	mov	r9, r1
 80107a2:	4606      	mov	r6, r0
 80107a4:	4611      	mov	r1, r2
 80107a6:	4648      	mov	r0, r9
 80107a8:	4614      	mov	r4, r2
 80107aa:	f7ff ffdb 	bl	8010764 <__mcmp>
 80107ae:	1e05      	subs	r5, r0, #0
 80107b0:	d112      	bne.n	80107d8 <__mdiff+0x3c>
 80107b2:	4629      	mov	r1, r5
 80107b4:	4630      	mov	r0, r6
 80107b6:	f7ff fd63 	bl	8010280 <_Balloc>
 80107ba:	4602      	mov	r2, r0
 80107bc:	b928      	cbnz	r0, 80107ca <__mdiff+0x2e>
 80107be:	4b3f      	ldr	r3, [pc, #252]	@ (80108bc <__mdiff+0x120>)
 80107c0:	f240 2137 	movw	r1, #567	@ 0x237
 80107c4:	483e      	ldr	r0, [pc, #248]	@ (80108c0 <__mdiff+0x124>)
 80107c6:	f000 fb9b 	bl	8010f00 <__assert_func>
 80107ca:	2301      	movs	r3, #1
 80107cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80107d0:	4610      	mov	r0, r2
 80107d2:	b003      	add	sp, #12
 80107d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107d8:	bfbc      	itt	lt
 80107da:	464b      	movlt	r3, r9
 80107dc:	46a1      	movlt	r9, r4
 80107de:	4630      	mov	r0, r6
 80107e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80107e4:	bfba      	itte	lt
 80107e6:	461c      	movlt	r4, r3
 80107e8:	2501      	movlt	r5, #1
 80107ea:	2500      	movge	r5, #0
 80107ec:	f7ff fd48 	bl	8010280 <_Balloc>
 80107f0:	4602      	mov	r2, r0
 80107f2:	b918      	cbnz	r0, 80107fc <__mdiff+0x60>
 80107f4:	4b31      	ldr	r3, [pc, #196]	@ (80108bc <__mdiff+0x120>)
 80107f6:	f240 2145 	movw	r1, #581	@ 0x245
 80107fa:	e7e3      	b.n	80107c4 <__mdiff+0x28>
 80107fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010800:	6926      	ldr	r6, [r4, #16]
 8010802:	60c5      	str	r5, [r0, #12]
 8010804:	f109 0310 	add.w	r3, r9, #16
 8010808:	f109 0514 	add.w	r5, r9, #20
 801080c:	f104 0e14 	add.w	lr, r4, #20
 8010810:	f100 0b14 	add.w	fp, r0, #20
 8010814:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010818:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801081c:	9301      	str	r3, [sp, #4]
 801081e:	46d9      	mov	r9, fp
 8010820:	f04f 0c00 	mov.w	ip, #0
 8010824:	9b01      	ldr	r3, [sp, #4]
 8010826:	f85e 0b04 	ldr.w	r0, [lr], #4
 801082a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801082e:	9301      	str	r3, [sp, #4]
 8010830:	fa1f f38a 	uxth.w	r3, sl
 8010834:	4619      	mov	r1, r3
 8010836:	b283      	uxth	r3, r0
 8010838:	1acb      	subs	r3, r1, r3
 801083a:	0c00      	lsrs	r0, r0, #16
 801083c:	4463      	add	r3, ip
 801083e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010842:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010846:	b29b      	uxth	r3, r3
 8010848:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801084c:	4576      	cmp	r6, lr
 801084e:	f849 3b04 	str.w	r3, [r9], #4
 8010852:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010856:	d8e5      	bhi.n	8010824 <__mdiff+0x88>
 8010858:	1b33      	subs	r3, r6, r4
 801085a:	3b15      	subs	r3, #21
 801085c:	f023 0303 	bic.w	r3, r3, #3
 8010860:	3415      	adds	r4, #21
 8010862:	3304      	adds	r3, #4
 8010864:	42a6      	cmp	r6, r4
 8010866:	bf38      	it	cc
 8010868:	2304      	movcc	r3, #4
 801086a:	441d      	add	r5, r3
 801086c:	445b      	add	r3, fp
 801086e:	461e      	mov	r6, r3
 8010870:	462c      	mov	r4, r5
 8010872:	4544      	cmp	r4, r8
 8010874:	d30e      	bcc.n	8010894 <__mdiff+0xf8>
 8010876:	f108 0103 	add.w	r1, r8, #3
 801087a:	1b49      	subs	r1, r1, r5
 801087c:	f021 0103 	bic.w	r1, r1, #3
 8010880:	3d03      	subs	r5, #3
 8010882:	45a8      	cmp	r8, r5
 8010884:	bf38      	it	cc
 8010886:	2100      	movcc	r1, #0
 8010888:	440b      	add	r3, r1
 801088a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801088e:	b191      	cbz	r1, 80108b6 <__mdiff+0x11a>
 8010890:	6117      	str	r7, [r2, #16]
 8010892:	e79d      	b.n	80107d0 <__mdiff+0x34>
 8010894:	f854 1b04 	ldr.w	r1, [r4], #4
 8010898:	46e6      	mov	lr, ip
 801089a:	0c08      	lsrs	r0, r1, #16
 801089c:	fa1c fc81 	uxtah	ip, ip, r1
 80108a0:	4471      	add	r1, lr
 80108a2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80108a6:	b289      	uxth	r1, r1
 80108a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80108ac:	f846 1b04 	str.w	r1, [r6], #4
 80108b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80108b4:	e7dd      	b.n	8010872 <__mdiff+0xd6>
 80108b6:	3f01      	subs	r7, #1
 80108b8:	e7e7      	b.n	801088a <__mdiff+0xee>
 80108ba:	bf00      	nop
 80108bc:	080113a8 	.word	0x080113a8
 80108c0:	080113b9 	.word	0x080113b9

080108c4 <__d2b>:
 80108c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80108c8:	460f      	mov	r7, r1
 80108ca:	2101      	movs	r1, #1
 80108cc:	ec59 8b10 	vmov	r8, r9, d0
 80108d0:	4616      	mov	r6, r2
 80108d2:	f7ff fcd5 	bl	8010280 <_Balloc>
 80108d6:	4604      	mov	r4, r0
 80108d8:	b930      	cbnz	r0, 80108e8 <__d2b+0x24>
 80108da:	4602      	mov	r2, r0
 80108dc:	4b23      	ldr	r3, [pc, #140]	@ (801096c <__d2b+0xa8>)
 80108de:	4824      	ldr	r0, [pc, #144]	@ (8010970 <__d2b+0xac>)
 80108e0:	f240 310f 	movw	r1, #783	@ 0x30f
 80108e4:	f000 fb0c 	bl	8010f00 <__assert_func>
 80108e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80108ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80108f0:	b10d      	cbz	r5, 80108f6 <__d2b+0x32>
 80108f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80108f6:	9301      	str	r3, [sp, #4]
 80108f8:	f1b8 0300 	subs.w	r3, r8, #0
 80108fc:	d023      	beq.n	8010946 <__d2b+0x82>
 80108fe:	4668      	mov	r0, sp
 8010900:	9300      	str	r3, [sp, #0]
 8010902:	f7ff fd84 	bl	801040e <__lo0bits>
 8010906:	e9dd 1200 	ldrd	r1, r2, [sp]
 801090a:	b1d0      	cbz	r0, 8010942 <__d2b+0x7e>
 801090c:	f1c0 0320 	rsb	r3, r0, #32
 8010910:	fa02 f303 	lsl.w	r3, r2, r3
 8010914:	430b      	orrs	r3, r1
 8010916:	40c2      	lsrs	r2, r0
 8010918:	6163      	str	r3, [r4, #20]
 801091a:	9201      	str	r2, [sp, #4]
 801091c:	9b01      	ldr	r3, [sp, #4]
 801091e:	61a3      	str	r3, [r4, #24]
 8010920:	2b00      	cmp	r3, #0
 8010922:	bf0c      	ite	eq
 8010924:	2201      	moveq	r2, #1
 8010926:	2202      	movne	r2, #2
 8010928:	6122      	str	r2, [r4, #16]
 801092a:	b1a5      	cbz	r5, 8010956 <__d2b+0x92>
 801092c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010930:	4405      	add	r5, r0
 8010932:	603d      	str	r5, [r7, #0]
 8010934:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010938:	6030      	str	r0, [r6, #0]
 801093a:	4620      	mov	r0, r4
 801093c:	b003      	add	sp, #12
 801093e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010942:	6161      	str	r1, [r4, #20]
 8010944:	e7ea      	b.n	801091c <__d2b+0x58>
 8010946:	a801      	add	r0, sp, #4
 8010948:	f7ff fd61 	bl	801040e <__lo0bits>
 801094c:	9b01      	ldr	r3, [sp, #4]
 801094e:	6163      	str	r3, [r4, #20]
 8010950:	3020      	adds	r0, #32
 8010952:	2201      	movs	r2, #1
 8010954:	e7e8      	b.n	8010928 <__d2b+0x64>
 8010956:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801095a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801095e:	6038      	str	r0, [r7, #0]
 8010960:	6918      	ldr	r0, [r3, #16]
 8010962:	f7ff fd35 	bl	80103d0 <__hi0bits>
 8010966:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801096a:	e7e5      	b.n	8010938 <__d2b+0x74>
 801096c:	080113a8 	.word	0x080113a8
 8010970:	080113b9 	.word	0x080113b9

08010974 <__sfputc_r>:
 8010974:	6893      	ldr	r3, [r2, #8]
 8010976:	3b01      	subs	r3, #1
 8010978:	2b00      	cmp	r3, #0
 801097a:	b410      	push	{r4}
 801097c:	6093      	str	r3, [r2, #8]
 801097e:	da08      	bge.n	8010992 <__sfputc_r+0x1e>
 8010980:	6994      	ldr	r4, [r2, #24]
 8010982:	42a3      	cmp	r3, r4
 8010984:	db01      	blt.n	801098a <__sfputc_r+0x16>
 8010986:	290a      	cmp	r1, #10
 8010988:	d103      	bne.n	8010992 <__sfputc_r+0x1e>
 801098a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801098e:	f000 ba13 	b.w	8010db8 <__swbuf_r>
 8010992:	6813      	ldr	r3, [r2, #0]
 8010994:	1c58      	adds	r0, r3, #1
 8010996:	6010      	str	r0, [r2, #0]
 8010998:	7019      	strb	r1, [r3, #0]
 801099a:	4608      	mov	r0, r1
 801099c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80109a0:	4770      	bx	lr

080109a2 <__sfputs_r>:
 80109a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109a4:	4606      	mov	r6, r0
 80109a6:	460f      	mov	r7, r1
 80109a8:	4614      	mov	r4, r2
 80109aa:	18d5      	adds	r5, r2, r3
 80109ac:	42ac      	cmp	r4, r5
 80109ae:	d101      	bne.n	80109b4 <__sfputs_r+0x12>
 80109b0:	2000      	movs	r0, #0
 80109b2:	e007      	b.n	80109c4 <__sfputs_r+0x22>
 80109b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109b8:	463a      	mov	r2, r7
 80109ba:	4630      	mov	r0, r6
 80109bc:	f7ff ffda 	bl	8010974 <__sfputc_r>
 80109c0:	1c43      	adds	r3, r0, #1
 80109c2:	d1f3      	bne.n	80109ac <__sfputs_r+0xa>
 80109c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080109c8 <_vfiprintf_r>:
 80109c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109cc:	460d      	mov	r5, r1
 80109ce:	b09d      	sub	sp, #116	@ 0x74
 80109d0:	4614      	mov	r4, r2
 80109d2:	4698      	mov	r8, r3
 80109d4:	4606      	mov	r6, r0
 80109d6:	b118      	cbz	r0, 80109e0 <_vfiprintf_r+0x18>
 80109d8:	6a03      	ldr	r3, [r0, #32]
 80109da:	b90b      	cbnz	r3, 80109e0 <_vfiprintf_r+0x18>
 80109dc:	f7fe fbd6 	bl	800f18c <__sinit>
 80109e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80109e2:	07d9      	lsls	r1, r3, #31
 80109e4:	d405      	bmi.n	80109f2 <_vfiprintf_r+0x2a>
 80109e6:	89ab      	ldrh	r3, [r5, #12]
 80109e8:	059a      	lsls	r2, r3, #22
 80109ea:	d402      	bmi.n	80109f2 <_vfiprintf_r+0x2a>
 80109ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80109ee:	f7fe fcde 	bl	800f3ae <__retarget_lock_acquire_recursive>
 80109f2:	89ab      	ldrh	r3, [r5, #12]
 80109f4:	071b      	lsls	r3, r3, #28
 80109f6:	d501      	bpl.n	80109fc <_vfiprintf_r+0x34>
 80109f8:	692b      	ldr	r3, [r5, #16]
 80109fa:	b99b      	cbnz	r3, 8010a24 <_vfiprintf_r+0x5c>
 80109fc:	4629      	mov	r1, r5
 80109fe:	4630      	mov	r0, r6
 8010a00:	f000 fa18 	bl	8010e34 <__swsetup_r>
 8010a04:	b170      	cbz	r0, 8010a24 <_vfiprintf_r+0x5c>
 8010a06:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010a08:	07dc      	lsls	r4, r3, #31
 8010a0a:	d504      	bpl.n	8010a16 <_vfiprintf_r+0x4e>
 8010a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8010a10:	b01d      	add	sp, #116	@ 0x74
 8010a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a16:	89ab      	ldrh	r3, [r5, #12]
 8010a18:	0598      	lsls	r0, r3, #22
 8010a1a:	d4f7      	bmi.n	8010a0c <_vfiprintf_r+0x44>
 8010a1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010a1e:	f7fe fcc7 	bl	800f3b0 <__retarget_lock_release_recursive>
 8010a22:	e7f3      	b.n	8010a0c <_vfiprintf_r+0x44>
 8010a24:	2300      	movs	r3, #0
 8010a26:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a28:	2320      	movs	r3, #32
 8010a2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010a2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010a32:	2330      	movs	r3, #48	@ 0x30
 8010a34:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010be4 <_vfiprintf_r+0x21c>
 8010a38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010a3c:	f04f 0901 	mov.w	r9, #1
 8010a40:	4623      	mov	r3, r4
 8010a42:	469a      	mov	sl, r3
 8010a44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a48:	b10a      	cbz	r2, 8010a4e <_vfiprintf_r+0x86>
 8010a4a:	2a25      	cmp	r2, #37	@ 0x25
 8010a4c:	d1f9      	bne.n	8010a42 <_vfiprintf_r+0x7a>
 8010a4e:	ebba 0b04 	subs.w	fp, sl, r4
 8010a52:	d00b      	beq.n	8010a6c <_vfiprintf_r+0xa4>
 8010a54:	465b      	mov	r3, fp
 8010a56:	4622      	mov	r2, r4
 8010a58:	4629      	mov	r1, r5
 8010a5a:	4630      	mov	r0, r6
 8010a5c:	f7ff ffa1 	bl	80109a2 <__sfputs_r>
 8010a60:	3001      	adds	r0, #1
 8010a62:	f000 80a7 	beq.w	8010bb4 <_vfiprintf_r+0x1ec>
 8010a66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010a68:	445a      	add	r2, fp
 8010a6a:	9209      	str	r2, [sp, #36]	@ 0x24
 8010a6c:	f89a 3000 	ldrb.w	r3, [sl]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	f000 809f 	beq.w	8010bb4 <_vfiprintf_r+0x1ec>
 8010a76:	2300      	movs	r3, #0
 8010a78:	f04f 32ff 	mov.w	r2, #4294967295
 8010a7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010a80:	f10a 0a01 	add.w	sl, sl, #1
 8010a84:	9304      	str	r3, [sp, #16]
 8010a86:	9307      	str	r3, [sp, #28]
 8010a88:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010a8c:	931a      	str	r3, [sp, #104]	@ 0x68
 8010a8e:	4654      	mov	r4, sl
 8010a90:	2205      	movs	r2, #5
 8010a92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a96:	4853      	ldr	r0, [pc, #332]	@ (8010be4 <_vfiprintf_r+0x21c>)
 8010a98:	f7ef fb72 	bl	8000180 <memchr>
 8010a9c:	9a04      	ldr	r2, [sp, #16]
 8010a9e:	b9d8      	cbnz	r0, 8010ad8 <_vfiprintf_r+0x110>
 8010aa0:	06d1      	lsls	r1, r2, #27
 8010aa2:	bf44      	itt	mi
 8010aa4:	2320      	movmi	r3, #32
 8010aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010aaa:	0713      	lsls	r3, r2, #28
 8010aac:	bf44      	itt	mi
 8010aae:	232b      	movmi	r3, #43	@ 0x2b
 8010ab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010ab4:	f89a 3000 	ldrb.w	r3, [sl]
 8010ab8:	2b2a      	cmp	r3, #42	@ 0x2a
 8010aba:	d015      	beq.n	8010ae8 <_vfiprintf_r+0x120>
 8010abc:	9a07      	ldr	r2, [sp, #28]
 8010abe:	4654      	mov	r4, sl
 8010ac0:	2000      	movs	r0, #0
 8010ac2:	f04f 0c0a 	mov.w	ip, #10
 8010ac6:	4621      	mov	r1, r4
 8010ac8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010acc:	3b30      	subs	r3, #48	@ 0x30
 8010ace:	2b09      	cmp	r3, #9
 8010ad0:	d94b      	bls.n	8010b6a <_vfiprintf_r+0x1a2>
 8010ad2:	b1b0      	cbz	r0, 8010b02 <_vfiprintf_r+0x13a>
 8010ad4:	9207      	str	r2, [sp, #28]
 8010ad6:	e014      	b.n	8010b02 <_vfiprintf_r+0x13a>
 8010ad8:	eba0 0308 	sub.w	r3, r0, r8
 8010adc:	fa09 f303 	lsl.w	r3, r9, r3
 8010ae0:	4313      	orrs	r3, r2
 8010ae2:	9304      	str	r3, [sp, #16]
 8010ae4:	46a2      	mov	sl, r4
 8010ae6:	e7d2      	b.n	8010a8e <_vfiprintf_r+0xc6>
 8010ae8:	9b03      	ldr	r3, [sp, #12]
 8010aea:	1d19      	adds	r1, r3, #4
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	9103      	str	r1, [sp, #12]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	bfbb      	ittet	lt
 8010af4:	425b      	neglt	r3, r3
 8010af6:	f042 0202 	orrlt.w	r2, r2, #2
 8010afa:	9307      	strge	r3, [sp, #28]
 8010afc:	9307      	strlt	r3, [sp, #28]
 8010afe:	bfb8      	it	lt
 8010b00:	9204      	strlt	r2, [sp, #16]
 8010b02:	7823      	ldrb	r3, [r4, #0]
 8010b04:	2b2e      	cmp	r3, #46	@ 0x2e
 8010b06:	d10a      	bne.n	8010b1e <_vfiprintf_r+0x156>
 8010b08:	7863      	ldrb	r3, [r4, #1]
 8010b0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8010b0c:	d132      	bne.n	8010b74 <_vfiprintf_r+0x1ac>
 8010b0e:	9b03      	ldr	r3, [sp, #12]
 8010b10:	1d1a      	adds	r2, r3, #4
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	9203      	str	r2, [sp, #12]
 8010b16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010b1a:	3402      	adds	r4, #2
 8010b1c:	9305      	str	r3, [sp, #20]
 8010b1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010bf4 <_vfiprintf_r+0x22c>
 8010b22:	7821      	ldrb	r1, [r4, #0]
 8010b24:	2203      	movs	r2, #3
 8010b26:	4650      	mov	r0, sl
 8010b28:	f7ef fb2a 	bl	8000180 <memchr>
 8010b2c:	b138      	cbz	r0, 8010b3e <_vfiprintf_r+0x176>
 8010b2e:	9b04      	ldr	r3, [sp, #16]
 8010b30:	eba0 000a 	sub.w	r0, r0, sl
 8010b34:	2240      	movs	r2, #64	@ 0x40
 8010b36:	4082      	lsls	r2, r0
 8010b38:	4313      	orrs	r3, r2
 8010b3a:	3401      	adds	r4, #1
 8010b3c:	9304      	str	r3, [sp, #16]
 8010b3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b42:	4829      	ldr	r0, [pc, #164]	@ (8010be8 <_vfiprintf_r+0x220>)
 8010b44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010b48:	2206      	movs	r2, #6
 8010b4a:	f7ef fb19 	bl	8000180 <memchr>
 8010b4e:	2800      	cmp	r0, #0
 8010b50:	d03f      	beq.n	8010bd2 <_vfiprintf_r+0x20a>
 8010b52:	4b26      	ldr	r3, [pc, #152]	@ (8010bec <_vfiprintf_r+0x224>)
 8010b54:	bb1b      	cbnz	r3, 8010b9e <_vfiprintf_r+0x1d6>
 8010b56:	9b03      	ldr	r3, [sp, #12]
 8010b58:	3307      	adds	r3, #7
 8010b5a:	f023 0307 	bic.w	r3, r3, #7
 8010b5e:	3308      	adds	r3, #8
 8010b60:	9303      	str	r3, [sp, #12]
 8010b62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b64:	443b      	add	r3, r7
 8010b66:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b68:	e76a      	b.n	8010a40 <_vfiprintf_r+0x78>
 8010b6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8010b6e:	460c      	mov	r4, r1
 8010b70:	2001      	movs	r0, #1
 8010b72:	e7a8      	b.n	8010ac6 <_vfiprintf_r+0xfe>
 8010b74:	2300      	movs	r3, #0
 8010b76:	3401      	adds	r4, #1
 8010b78:	9305      	str	r3, [sp, #20]
 8010b7a:	4619      	mov	r1, r3
 8010b7c:	f04f 0c0a 	mov.w	ip, #10
 8010b80:	4620      	mov	r0, r4
 8010b82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b86:	3a30      	subs	r2, #48	@ 0x30
 8010b88:	2a09      	cmp	r2, #9
 8010b8a:	d903      	bls.n	8010b94 <_vfiprintf_r+0x1cc>
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d0c6      	beq.n	8010b1e <_vfiprintf_r+0x156>
 8010b90:	9105      	str	r1, [sp, #20]
 8010b92:	e7c4      	b.n	8010b1e <_vfiprintf_r+0x156>
 8010b94:	fb0c 2101 	mla	r1, ip, r1, r2
 8010b98:	4604      	mov	r4, r0
 8010b9a:	2301      	movs	r3, #1
 8010b9c:	e7f0      	b.n	8010b80 <_vfiprintf_r+0x1b8>
 8010b9e:	ab03      	add	r3, sp, #12
 8010ba0:	9300      	str	r3, [sp, #0]
 8010ba2:	462a      	mov	r2, r5
 8010ba4:	4b12      	ldr	r3, [pc, #72]	@ (8010bf0 <_vfiprintf_r+0x228>)
 8010ba6:	a904      	add	r1, sp, #16
 8010ba8:	4630      	mov	r0, r6
 8010baa:	f7fd fead 	bl	800e908 <_printf_float>
 8010bae:	4607      	mov	r7, r0
 8010bb0:	1c78      	adds	r0, r7, #1
 8010bb2:	d1d6      	bne.n	8010b62 <_vfiprintf_r+0x19a>
 8010bb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010bb6:	07d9      	lsls	r1, r3, #31
 8010bb8:	d405      	bmi.n	8010bc6 <_vfiprintf_r+0x1fe>
 8010bba:	89ab      	ldrh	r3, [r5, #12]
 8010bbc:	059a      	lsls	r2, r3, #22
 8010bbe:	d402      	bmi.n	8010bc6 <_vfiprintf_r+0x1fe>
 8010bc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010bc2:	f7fe fbf5 	bl	800f3b0 <__retarget_lock_release_recursive>
 8010bc6:	89ab      	ldrh	r3, [r5, #12]
 8010bc8:	065b      	lsls	r3, r3, #25
 8010bca:	f53f af1f 	bmi.w	8010a0c <_vfiprintf_r+0x44>
 8010bce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010bd0:	e71e      	b.n	8010a10 <_vfiprintf_r+0x48>
 8010bd2:	ab03      	add	r3, sp, #12
 8010bd4:	9300      	str	r3, [sp, #0]
 8010bd6:	462a      	mov	r2, r5
 8010bd8:	4b05      	ldr	r3, [pc, #20]	@ (8010bf0 <_vfiprintf_r+0x228>)
 8010bda:	a904      	add	r1, sp, #16
 8010bdc:	4630      	mov	r0, r6
 8010bde:	f7fe f92b 	bl	800ee38 <_printf_i>
 8010be2:	e7e4      	b.n	8010bae <_vfiprintf_r+0x1e6>
 8010be4:	08011412 	.word	0x08011412
 8010be8:	0801141c 	.word	0x0801141c
 8010bec:	0800e909 	.word	0x0800e909
 8010bf0:	080109a3 	.word	0x080109a3
 8010bf4:	08011418 	.word	0x08011418

08010bf8 <__sflush_r>:
 8010bf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c00:	0716      	lsls	r6, r2, #28
 8010c02:	4605      	mov	r5, r0
 8010c04:	460c      	mov	r4, r1
 8010c06:	d454      	bmi.n	8010cb2 <__sflush_r+0xba>
 8010c08:	684b      	ldr	r3, [r1, #4]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	dc02      	bgt.n	8010c14 <__sflush_r+0x1c>
 8010c0e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	dd48      	ble.n	8010ca6 <__sflush_r+0xae>
 8010c14:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010c16:	2e00      	cmp	r6, #0
 8010c18:	d045      	beq.n	8010ca6 <__sflush_r+0xae>
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010c20:	682f      	ldr	r7, [r5, #0]
 8010c22:	6a21      	ldr	r1, [r4, #32]
 8010c24:	602b      	str	r3, [r5, #0]
 8010c26:	d030      	beq.n	8010c8a <__sflush_r+0x92>
 8010c28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010c2a:	89a3      	ldrh	r3, [r4, #12]
 8010c2c:	0759      	lsls	r1, r3, #29
 8010c2e:	d505      	bpl.n	8010c3c <__sflush_r+0x44>
 8010c30:	6863      	ldr	r3, [r4, #4]
 8010c32:	1ad2      	subs	r2, r2, r3
 8010c34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010c36:	b10b      	cbz	r3, 8010c3c <__sflush_r+0x44>
 8010c38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010c3a:	1ad2      	subs	r2, r2, r3
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010c40:	6a21      	ldr	r1, [r4, #32]
 8010c42:	4628      	mov	r0, r5
 8010c44:	47b0      	blx	r6
 8010c46:	1c43      	adds	r3, r0, #1
 8010c48:	89a3      	ldrh	r3, [r4, #12]
 8010c4a:	d106      	bne.n	8010c5a <__sflush_r+0x62>
 8010c4c:	6829      	ldr	r1, [r5, #0]
 8010c4e:	291d      	cmp	r1, #29
 8010c50:	d82b      	bhi.n	8010caa <__sflush_r+0xb2>
 8010c52:	4a2a      	ldr	r2, [pc, #168]	@ (8010cfc <__sflush_r+0x104>)
 8010c54:	40ca      	lsrs	r2, r1
 8010c56:	07d6      	lsls	r6, r2, #31
 8010c58:	d527      	bpl.n	8010caa <__sflush_r+0xb2>
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	6062      	str	r2, [r4, #4]
 8010c5e:	04d9      	lsls	r1, r3, #19
 8010c60:	6922      	ldr	r2, [r4, #16]
 8010c62:	6022      	str	r2, [r4, #0]
 8010c64:	d504      	bpl.n	8010c70 <__sflush_r+0x78>
 8010c66:	1c42      	adds	r2, r0, #1
 8010c68:	d101      	bne.n	8010c6e <__sflush_r+0x76>
 8010c6a:	682b      	ldr	r3, [r5, #0]
 8010c6c:	b903      	cbnz	r3, 8010c70 <__sflush_r+0x78>
 8010c6e:	6560      	str	r0, [r4, #84]	@ 0x54
 8010c70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010c72:	602f      	str	r7, [r5, #0]
 8010c74:	b1b9      	cbz	r1, 8010ca6 <__sflush_r+0xae>
 8010c76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010c7a:	4299      	cmp	r1, r3
 8010c7c:	d002      	beq.n	8010c84 <__sflush_r+0x8c>
 8010c7e:	4628      	mov	r0, r5
 8010c80:	f7ff f9fe 	bl	8010080 <_free_r>
 8010c84:	2300      	movs	r3, #0
 8010c86:	6363      	str	r3, [r4, #52]	@ 0x34
 8010c88:	e00d      	b.n	8010ca6 <__sflush_r+0xae>
 8010c8a:	2301      	movs	r3, #1
 8010c8c:	4628      	mov	r0, r5
 8010c8e:	47b0      	blx	r6
 8010c90:	4602      	mov	r2, r0
 8010c92:	1c50      	adds	r0, r2, #1
 8010c94:	d1c9      	bne.n	8010c2a <__sflush_r+0x32>
 8010c96:	682b      	ldr	r3, [r5, #0]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d0c6      	beq.n	8010c2a <__sflush_r+0x32>
 8010c9c:	2b1d      	cmp	r3, #29
 8010c9e:	d001      	beq.n	8010ca4 <__sflush_r+0xac>
 8010ca0:	2b16      	cmp	r3, #22
 8010ca2:	d11e      	bne.n	8010ce2 <__sflush_r+0xea>
 8010ca4:	602f      	str	r7, [r5, #0]
 8010ca6:	2000      	movs	r0, #0
 8010ca8:	e022      	b.n	8010cf0 <__sflush_r+0xf8>
 8010caa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010cae:	b21b      	sxth	r3, r3
 8010cb0:	e01b      	b.n	8010cea <__sflush_r+0xf2>
 8010cb2:	690f      	ldr	r7, [r1, #16]
 8010cb4:	2f00      	cmp	r7, #0
 8010cb6:	d0f6      	beq.n	8010ca6 <__sflush_r+0xae>
 8010cb8:	0793      	lsls	r3, r2, #30
 8010cba:	680e      	ldr	r6, [r1, #0]
 8010cbc:	bf08      	it	eq
 8010cbe:	694b      	ldreq	r3, [r1, #20]
 8010cc0:	600f      	str	r7, [r1, #0]
 8010cc2:	bf18      	it	ne
 8010cc4:	2300      	movne	r3, #0
 8010cc6:	eba6 0807 	sub.w	r8, r6, r7
 8010cca:	608b      	str	r3, [r1, #8]
 8010ccc:	f1b8 0f00 	cmp.w	r8, #0
 8010cd0:	dde9      	ble.n	8010ca6 <__sflush_r+0xae>
 8010cd2:	6a21      	ldr	r1, [r4, #32]
 8010cd4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010cd6:	4643      	mov	r3, r8
 8010cd8:	463a      	mov	r2, r7
 8010cda:	4628      	mov	r0, r5
 8010cdc:	47b0      	blx	r6
 8010cde:	2800      	cmp	r0, #0
 8010ce0:	dc08      	bgt.n	8010cf4 <__sflush_r+0xfc>
 8010ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ce6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010cea:	81a3      	strh	r3, [r4, #12]
 8010cec:	f04f 30ff 	mov.w	r0, #4294967295
 8010cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cf4:	4407      	add	r7, r0
 8010cf6:	eba8 0800 	sub.w	r8, r8, r0
 8010cfa:	e7e7      	b.n	8010ccc <__sflush_r+0xd4>
 8010cfc:	20400001 	.word	0x20400001

08010d00 <_fflush_r>:
 8010d00:	b538      	push	{r3, r4, r5, lr}
 8010d02:	690b      	ldr	r3, [r1, #16]
 8010d04:	4605      	mov	r5, r0
 8010d06:	460c      	mov	r4, r1
 8010d08:	b913      	cbnz	r3, 8010d10 <_fflush_r+0x10>
 8010d0a:	2500      	movs	r5, #0
 8010d0c:	4628      	mov	r0, r5
 8010d0e:	bd38      	pop	{r3, r4, r5, pc}
 8010d10:	b118      	cbz	r0, 8010d1a <_fflush_r+0x1a>
 8010d12:	6a03      	ldr	r3, [r0, #32]
 8010d14:	b90b      	cbnz	r3, 8010d1a <_fflush_r+0x1a>
 8010d16:	f7fe fa39 	bl	800f18c <__sinit>
 8010d1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d0f3      	beq.n	8010d0a <_fflush_r+0xa>
 8010d22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010d24:	07d0      	lsls	r0, r2, #31
 8010d26:	d404      	bmi.n	8010d32 <_fflush_r+0x32>
 8010d28:	0599      	lsls	r1, r3, #22
 8010d2a:	d402      	bmi.n	8010d32 <_fflush_r+0x32>
 8010d2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010d2e:	f7fe fb3e 	bl	800f3ae <__retarget_lock_acquire_recursive>
 8010d32:	4628      	mov	r0, r5
 8010d34:	4621      	mov	r1, r4
 8010d36:	f7ff ff5f 	bl	8010bf8 <__sflush_r>
 8010d3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010d3c:	07da      	lsls	r2, r3, #31
 8010d3e:	4605      	mov	r5, r0
 8010d40:	d4e4      	bmi.n	8010d0c <_fflush_r+0xc>
 8010d42:	89a3      	ldrh	r3, [r4, #12]
 8010d44:	059b      	lsls	r3, r3, #22
 8010d46:	d4e1      	bmi.n	8010d0c <_fflush_r+0xc>
 8010d48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010d4a:	f7fe fb31 	bl	800f3b0 <__retarget_lock_release_recursive>
 8010d4e:	e7dd      	b.n	8010d0c <_fflush_r+0xc>

08010d50 <_putc_r>:
 8010d50:	b570      	push	{r4, r5, r6, lr}
 8010d52:	460d      	mov	r5, r1
 8010d54:	4614      	mov	r4, r2
 8010d56:	4606      	mov	r6, r0
 8010d58:	b118      	cbz	r0, 8010d62 <_putc_r+0x12>
 8010d5a:	6a03      	ldr	r3, [r0, #32]
 8010d5c:	b90b      	cbnz	r3, 8010d62 <_putc_r+0x12>
 8010d5e:	f7fe fa15 	bl	800f18c <__sinit>
 8010d62:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010d64:	07d8      	lsls	r0, r3, #31
 8010d66:	d405      	bmi.n	8010d74 <_putc_r+0x24>
 8010d68:	89a3      	ldrh	r3, [r4, #12]
 8010d6a:	0599      	lsls	r1, r3, #22
 8010d6c:	d402      	bmi.n	8010d74 <_putc_r+0x24>
 8010d6e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010d70:	f7fe fb1d 	bl	800f3ae <__retarget_lock_acquire_recursive>
 8010d74:	68a3      	ldr	r3, [r4, #8]
 8010d76:	3b01      	subs	r3, #1
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	60a3      	str	r3, [r4, #8]
 8010d7c:	da05      	bge.n	8010d8a <_putc_r+0x3a>
 8010d7e:	69a2      	ldr	r2, [r4, #24]
 8010d80:	4293      	cmp	r3, r2
 8010d82:	db12      	blt.n	8010daa <_putc_r+0x5a>
 8010d84:	b2eb      	uxtb	r3, r5
 8010d86:	2b0a      	cmp	r3, #10
 8010d88:	d00f      	beq.n	8010daa <_putc_r+0x5a>
 8010d8a:	6823      	ldr	r3, [r4, #0]
 8010d8c:	1c5a      	adds	r2, r3, #1
 8010d8e:	6022      	str	r2, [r4, #0]
 8010d90:	701d      	strb	r5, [r3, #0]
 8010d92:	b2ed      	uxtb	r5, r5
 8010d94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010d96:	07da      	lsls	r2, r3, #31
 8010d98:	d405      	bmi.n	8010da6 <_putc_r+0x56>
 8010d9a:	89a3      	ldrh	r3, [r4, #12]
 8010d9c:	059b      	lsls	r3, r3, #22
 8010d9e:	d402      	bmi.n	8010da6 <_putc_r+0x56>
 8010da0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010da2:	f7fe fb05 	bl	800f3b0 <__retarget_lock_release_recursive>
 8010da6:	4628      	mov	r0, r5
 8010da8:	bd70      	pop	{r4, r5, r6, pc}
 8010daa:	4629      	mov	r1, r5
 8010dac:	4622      	mov	r2, r4
 8010dae:	4630      	mov	r0, r6
 8010db0:	f000 f802 	bl	8010db8 <__swbuf_r>
 8010db4:	4605      	mov	r5, r0
 8010db6:	e7ed      	b.n	8010d94 <_putc_r+0x44>

08010db8 <__swbuf_r>:
 8010db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dba:	460e      	mov	r6, r1
 8010dbc:	4614      	mov	r4, r2
 8010dbe:	4605      	mov	r5, r0
 8010dc0:	b118      	cbz	r0, 8010dca <__swbuf_r+0x12>
 8010dc2:	6a03      	ldr	r3, [r0, #32]
 8010dc4:	b90b      	cbnz	r3, 8010dca <__swbuf_r+0x12>
 8010dc6:	f7fe f9e1 	bl	800f18c <__sinit>
 8010dca:	69a3      	ldr	r3, [r4, #24]
 8010dcc:	60a3      	str	r3, [r4, #8]
 8010dce:	89a3      	ldrh	r3, [r4, #12]
 8010dd0:	071a      	lsls	r2, r3, #28
 8010dd2:	d501      	bpl.n	8010dd8 <__swbuf_r+0x20>
 8010dd4:	6923      	ldr	r3, [r4, #16]
 8010dd6:	b943      	cbnz	r3, 8010dea <__swbuf_r+0x32>
 8010dd8:	4621      	mov	r1, r4
 8010dda:	4628      	mov	r0, r5
 8010ddc:	f000 f82a 	bl	8010e34 <__swsetup_r>
 8010de0:	b118      	cbz	r0, 8010dea <__swbuf_r+0x32>
 8010de2:	f04f 37ff 	mov.w	r7, #4294967295
 8010de6:	4638      	mov	r0, r7
 8010de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010dea:	6823      	ldr	r3, [r4, #0]
 8010dec:	6922      	ldr	r2, [r4, #16]
 8010dee:	1a98      	subs	r0, r3, r2
 8010df0:	6963      	ldr	r3, [r4, #20]
 8010df2:	b2f6      	uxtb	r6, r6
 8010df4:	4283      	cmp	r3, r0
 8010df6:	4637      	mov	r7, r6
 8010df8:	dc05      	bgt.n	8010e06 <__swbuf_r+0x4e>
 8010dfa:	4621      	mov	r1, r4
 8010dfc:	4628      	mov	r0, r5
 8010dfe:	f7ff ff7f 	bl	8010d00 <_fflush_r>
 8010e02:	2800      	cmp	r0, #0
 8010e04:	d1ed      	bne.n	8010de2 <__swbuf_r+0x2a>
 8010e06:	68a3      	ldr	r3, [r4, #8]
 8010e08:	3b01      	subs	r3, #1
 8010e0a:	60a3      	str	r3, [r4, #8]
 8010e0c:	6823      	ldr	r3, [r4, #0]
 8010e0e:	1c5a      	adds	r2, r3, #1
 8010e10:	6022      	str	r2, [r4, #0]
 8010e12:	701e      	strb	r6, [r3, #0]
 8010e14:	6962      	ldr	r2, [r4, #20]
 8010e16:	1c43      	adds	r3, r0, #1
 8010e18:	429a      	cmp	r2, r3
 8010e1a:	d004      	beq.n	8010e26 <__swbuf_r+0x6e>
 8010e1c:	89a3      	ldrh	r3, [r4, #12]
 8010e1e:	07db      	lsls	r3, r3, #31
 8010e20:	d5e1      	bpl.n	8010de6 <__swbuf_r+0x2e>
 8010e22:	2e0a      	cmp	r6, #10
 8010e24:	d1df      	bne.n	8010de6 <__swbuf_r+0x2e>
 8010e26:	4621      	mov	r1, r4
 8010e28:	4628      	mov	r0, r5
 8010e2a:	f7ff ff69 	bl	8010d00 <_fflush_r>
 8010e2e:	2800      	cmp	r0, #0
 8010e30:	d0d9      	beq.n	8010de6 <__swbuf_r+0x2e>
 8010e32:	e7d6      	b.n	8010de2 <__swbuf_r+0x2a>

08010e34 <__swsetup_r>:
 8010e34:	b538      	push	{r3, r4, r5, lr}
 8010e36:	4b29      	ldr	r3, [pc, #164]	@ (8010edc <__swsetup_r+0xa8>)
 8010e38:	4605      	mov	r5, r0
 8010e3a:	6818      	ldr	r0, [r3, #0]
 8010e3c:	460c      	mov	r4, r1
 8010e3e:	b118      	cbz	r0, 8010e48 <__swsetup_r+0x14>
 8010e40:	6a03      	ldr	r3, [r0, #32]
 8010e42:	b90b      	cbnz	r3, 8010e48 <__swsetup_r+0x14>
 8010e44:	f7fe f9a2 	bl	800f18c <__sinit>
 8010e48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e4c:	0719      	lsls	r1, r3, #28
 8010e4e:	d422      	bmi.n	8010e96 <__swsetup_r+0x62>
 8010e50:	06da      	lsls	r2, r3, #27
 8010e52:	d407      	bmi.n	8010e64 <__swsetup_r+0x30>
 8010e54:	2209      	movs	r2, #9
 8010e56:	602a      	str	r2, [r5, #0]
 8010e58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010e5c:	81a3      	strh	r3, [r4, #12]
 8010e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8010e62:	e033      	b.n	8010ecc <__swsetup_r+0x98>
 8010e64:	0758      	lsls	r0, r3, #29
 8010e66:	d512      	bpl.n	8010e8e <__swsetup_r+0x5a>
 8010e68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010e6a:	b141      	cbz	r1, 8010e7e <__swsetup_r+0x4a>
 8010e6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010e70:	4299      	cmp	r1, r3
 8010e72:	d002      	beq.n	8010e7a <__swsetup_r+0x46>
 8010e74:	4628      	mov	r0, r5
 8010e76:	f7ff f903 	bl	8010080 <_free_r>
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8010e7e:	89a3      	ldrh	r3, [r4, #12]
 8010e80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010e84:	81a3      	strh	r3, [r4, #12]
 8010e86:	2300      	movs	r3, #0
 8010e88:	6063      	str	r3, [r4, #4]
 8010e8a:	6923      	ldr	r3, [r4, #16]
 8010e8c:	6023      	str	r3, [r4, #0]
 8010e8e:	89a3      	ldrh	r3, [r4, #12]
 8010e90:	f043 0308 	orr.w	r3, r3, #8
 8010e94:	81a3      	strh	r3, [r4, #12]
 8010e96:	6923      	ldr	r3, [r4, #16]
 8010e98:	b94b      	cbnz	r3, 8010eae <__swsetup_r+0x7a>
 8010e9a:	89a3      	ldrh	r3, [r4, #12]
 8010e9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010ea0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010ea4:	d003      	beq.n	8010eae <__swsetup_r+0x7a>
 8010ea6:	4621      	mov	r1, r4
 8010ea8:	4628      	mov	r0, r5
 8010eaa:	f000 f8b3 	bl	8011014 <__smakebuf_r>
 8010eae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010eb2:	f013 0201 	ands.w	r2, r3, #1
 8010eb6:	d00a      	beq.n	8010ece <__swsetup_r+0x9a>
 8010eb8:	2200      	movs	r2, #0
 8010eba:	60a2      	str	r2, [r4, #8]
 8010ebc:	6962      	ldr	r2, [r4, #20]
 8010ebe:	4252      	negs	r2, r2
 8010ec0:	61a2      	str	r2, [r4, #24]
 8010ec2:	6922      	ldr	r2, [r4, #16]
 8010ec4:	b942      	cbnz	r2, 8010ed8 <__swsetup_r+0xa4>
 8010ec6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010eca:	d1c5      	bne.n	8010e58 <__swsetup_r+0x24>
 8010ecc:	bd38      	pop	{r3, r4, r5, pc}
 8010ece:	0799      	lsls	r1, r3, #30
 8010ed0:	bf58      	it	pl
 8010ed2:	6962      	ldrpl	r2, [r4, #20]
 8010ed4:	60a2      	str	r2, [r4, #8]
 8010ed6:	e7f4      	b.n	8010ec2 <__swsetup_r+0x8e>
 8010ed8:	2000      	movs	r0, #0
 8010eda:	e7f7      	b.n	8010ecc <__swsetup_r+0x98>
 8010edc:	20000130 	.word	0x20000130

08010ee0 <_sbrk_r>:
 8010ee0:	b538      	push	{r3, r4, r5, lr}
 8010ee2:	4d06      	ldr	r5, [pc, #24]	@ (8010efc <_sbrk_r+0x1c>)
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	4604      	mov	r4, r0
 8010ee8:	4608      	mov	r0, r1
 8010eea:	602b      	str	r3, [r5, #0]
 8010eec:	f7f0 fcf2 	bl	80018d4 <_sbrk>
 8010ef0:	1c43      	adds	r3, r0, #1
 8010ef2:	d102      	bne.n	8010efa <_sbrk_r+0x1a>
 8010ef4:	682b      	ldr	r3, [r5, #0]
 8010ef6:	b103      	cbz	r3, 8010efa <_sbrk_r+0x1a>
 8010ef8:	6023      	str	r3, [r4, #0]
 8010efa:	bd38      	pop	{r3, r4, r5, pc}
 8010efc:	20002248 	.word	0x20002248

08010f00 <__assert_func>:
 8010f00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010f02:	4614      	mov	r4, r2
 8010f04:	461a      	mov	r2, r3
 8010f06:	4b09      	ldr	r3, [pc, #36]	@ (8010f2c <__assert_func+0x2c>)
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	4605      	mov	r5, r0
 8010f0c:	68d8      	ldr	r0, [r3, #12]
 8010f0e:	b14c      	cbz	r4, 8010f24 <__assert_func+0x24>
 8010f10:	4b07      	ldr	r3, [pc, #28]	@ (8010f30 <__assert_func+0x30>)
 8010f12:	9100      	str	r1, [sp, #0]
 8010f14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010f18:	4906      	ldr	r1, [pc, #24]	@ (8010f34 <__assert_func+0x34>)
 8010f1a:	462b      	mov	r3, r5
 8010f1c:	f000 f842 	bl	8010fa4 <fiprintf>
 8010f20:	f000 f8d6 	bl	80110d0 <abort>
 8010f24:	4b04      	ldr	r3, [pc, #16]	@ (8010f38 <__assert_func+0x38>)
 8010f26:	461c      	mov	r4, r3
 8010f28:	e7f3      	b.n	8010f12 <__assert_func+0x12>
 8010f2a:	bf00      	nop
 8010f2c:	20000130 	.word	0x20000130
 8010f30:	0801142d 	.word	0x0801142d
 8010f34:	0801143a 	.word	0x0801143a
 8010f38:	08011468 	.word	0x08011468

08010f3c <_calloc_r>:
 8010f3c:	b570      	push	{r4, r5, r6, lr}
 8010f3e:	fba1 5402 	umull	r5, r4, r1, r2
 8010f42:	b934      	cbnz	r4, 8010f52 <_calloc_r+0x16>
 8010f44:	4629      	mov	r1, r5
 8010f46:	f7ff f90f 	bl	8010168 <_malloc_r>
 8010f4a:	4606      	mov	r6, r0
 8010f4c:	b928      	cbnz	r0, 8010f5a <_calloc_r+0x1e>
 8010f4e:	4630      	mov	r0, r6
 8010f50:	bd70      	pop	{r4, r5, r6, pc}
 8010f52:	220c      	movs	r2, #12
 8010f54:	6002      	str	r2, [r0, #0]
 8010f56:	2600      	movs	r6, #0
 8010f58:	e7f9      	b.n	8010f4e <_calloc_r+0x12>
 8010f5a:	462a      	mov	r2, r5
 8010f5c:	4621      	mov	r1, r4
 8010f5e:	f7fe f9a8 	bl	800f2b2 <memset>
 8010f62:	e7f4      	b.n	8010f4e <_calloc_r+0x12>

08010f64 <__ascii_mbtowc>:
 8010f64:	b082      	sub	sp, #8
 8010f66:	b901      	cbnz	r1, 8010f6a <__ascii_mbtowc+0x6>
 8010f68:	a901      	add	r1, sp, #4
 8010f6a:	b142      	cbz	r2, 8010f7e <__ascii_mbtowc+0x1a>
 8010f6c:	b14b      	cbz	r3, 8010f82 <__ascii_mbtowc+0x1e>
 8010f6e:	7813      	ldrb	r3, [r2, #0]
 8010f70:	600b      	str	r3, [r1, #0]
 8010f72:	7812      	ldrb	r2, [r2, #0]
 8010f74:	1e10      	subs	r0, r2, #0
 8010f76:	bf18      	it	ne
 8010f78:	2001      	movne	r0, #1
 8010f7a:	b002      	add	sp, #8
 8010f7c:	4770      	bx	lr
 8010f7e:	4610      	mov	r0, r2
 8010f80:	e7fb      	b.n	8010f7a <__ascii_mbtowc+0x16>
 8010f82:	f06f 0001 	mvn.w	r0, #1
 8010f86:	e7f8      	b.n	8010f7a <__ascii_mbtowc+0x16>

08010f88 <__ascii_wctomb>:
 8010f88:	4603      	mov	r3, r0
 8010f8a:	4608      	mov	r0, r1
 8010f8c:	b141      	cbz	r1, 8010fa0 <__ascii_wctomb+0x18>
 8010f8e:	2aff      	cmp	r2, #255	@ 0xff
 8010f90:	d904      	bls.n	8010f9c <__ascii_wctomb+0x14>
 8010f92:	228a      	movs	r2, #138	@ 0x8a
 8010f94:	601a      	str	r2, [r3, #0]
 8010f96:	f04f 30ff 	mov.w	r0, #4294967295
 8010f9a:	4770      	bx	lr
 8010f9c:	700a      	strb	r2, [r1, #0]
 8010f9e:	2001      	movs	r0, #1
 8010fa0:	4770      	bx	lr
	...

08010fa4 <fiprintf>:
 8010fa4:	b40e      	push	{r1, r2, r3}
 8010fa6:	b503      	push	{r0, r1, lr}
 8010fa8:	4601      	mov	r1, r0
 8010faa:	ab03      	add	r3, sp, #12
 8010fac:	4805      	ldr	r0, [pc, #20]	@ (8010fc4 <fiprintf+0x20>)
 8010fae:	f853 2b04 	ldr.w	r2, [r3], #4
 8010fb2:	6800      	ldr	r0, [r0, #0]
 8010fb4:	9301      	str	r3, [sp, #4]
 8010fb6:	f7ff fd07 	bl	80109c8 <_vfiprintf_r>
 8010fba:	b002      	add	sp, #8
 8010fbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8010fc0:	b003      	add	sp, #12
 8010fc2:	4770      	bx	lr
 8010fc4:	20000130 	.word	0x20000130

08010fc8 <__swhatbuf_r>:
 8010fc8:	b570      	push	{r4, r5, r6, lr}
 8010fca:	460c      	mov	r4, r1
 8010fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fd0:	2900      	cmp	r1, #0
 8010fd2:	b096      	sub	sp, #88	@ 0x58
 8010fd4:	4615      	mov	r5, r2
 8010fd6:	461e      	mov	r6, r3
 8010fd8:	da0d      	bge.n	8010ff6 <__swhatbuf_r+0x2e>
 8010fda:	89a3      	ldrh	r3, [r4, #12]
 8010fdc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010fe0:	f04f 0100 	mov.w	r1, #0
 8010fe4:	bf14      	ite	ne
 8010fe6:	2340      	movne	r3, #64	@ 0x40
 8010fe8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010fec:	2000      	movs	r0, #0
 8010fee:	6031      	str	r1, [r6, #0]
 8010ff0:	602b      	str	r3, [r5, #0]
 8010ff2:	b016      	add	sp, #88	@ 0x58
 8010ff4:	bd70      	pop	{r4, r5, r6, pc}
 8010ff6:	466a      	mov	r2, sp
 8010ff8:	f000 f848 	bl	801108c <_fstat_r>
 8010ffc:	2800      	cmp	r0, #0
 8010ffe:	dbec      	blt.n	8010fda <__swhatbuf_r+0x12>
 8011000:	9901      	ldr	r1, [sp, #4]
 8011002:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011006:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801100a:	4259      	negs	r1, r3
 801100c:	4159      	adcs	r1, r3
 801100e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011012:	e7eb      	b.n	8010fec <__swhatbuf_r+0x24>

08011014 <__smakebuf_r>:
 8011014:	898b      	ldrh	r3, [r1, #12]
 8011016:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011018:	079d      	lsls	r5, r3, #30
 801101a:	4606      	mov	r6, r0
 801101c:	460c      	mov	r4, r1
 801101e:	d507      	bpl.n	8011030 <__smakebuf_r+0x1c>
 8011020:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011024:	6023      	str	r3, [r4, #0]
 8011026:	6123      	str	r3, [r4, #16]
 8011028:	2301      	movs	r3, #1
 801102a:	6163      	str	r3, [r4, #20]
 801102c:	b003      	add	sp, #12
 801102e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011030:	ab01      	add	r3, sp, #4
 8011032:	466a      	mov	r2, sp
 8011034:	f7ff ffc8 	bl	8010fc8 <__swhatbuf_r>
 8011038:	9f00      	ldr	r7, [sp, #0]
 801103a:	4605      	mov	r5, r0
 801103c:	4639      	mov	r1, r7
 801103e:	4630      	mov	r0, r6
 8011040:	f7ff f892 	bl	8010168 <_malloc_r>
 8011044:	b948      	cbnz	r0, 801105a <__smakebuf_r+0x46>
 8011046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801104a:	059a      	lsls	r2, r3, #22
 801104c:	d4ee      	bmi.n	801102c <__smakebuf_r+0x18>
 801104e:	f023 0303 	bic.w	r3, r3, #3
 8011052:	f043 0302 	orr.w	r3, r3, #2
 8011056:	81a3      	strh	r3, [r4, #12]
 8011058:	e7e2      	b.n	8011020 <__smakebuf_r+0xc>
 801105a:	89a3      	ldrh	r3, [r4, #12]
 801105c:	6020      	str	r0, [r4, #0]
 801105e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011062:	81a3      	strh	r3, [r4, #12]
 8011064:	9b01      	ldr	r3, [sp, #4]
 8011066:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801106a:	b15b      	cbz	r3, 8011084 <__smakebuf_r+0x70>
 801106c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011070:	4630      	mov	r0, r6
 8011072:	f000 f81d 	bl	80110b0 <_isatty_r>
 8011076:	b128      	cbz	r0, 8011084 <__smakebuf_r+0x70>
 8011078:	89a3      	ldrh	r3, [r4, #12]
 801107a:	f023 0303 	bic.w	r3, r3, #3
 801107e:	f043 0301 	orr.w	r3, r3, #1
 8011082:	81a3      	strh	r3, [r4, #12]
 8011084:	89a3      	ldrh	r3, [r4, #12]
 8011086:	431d      	orrs	r5, r3
 8011088:	81a5      	strh	r5, [r4, #12]
 801108a:	e7cf      	b.n	801102c <__smakebuf_r+0x18>

0801108c <_fstat_r>:
 801108c:	b538      	push	{r3, r4, r5, lr}
 801108e:	4d07      	ldr	r5, [pc, #28]	@ (80110ac <_fstat_r+0x20>)
 8011090:	2300      	movs	r3, #0
 8011092:	4604      	mov	r4, r0
 8011094:	4608      	mov	r0, r1
 8011096:	4611      	mov	r1, r2
 8011098:	602b      	str	r3, [r5, #0]
 801109a:	f7f0 fbf3 	bl	8001884 <_fstat>
 801109e:	1c43      	adds	r3, r0, #1
 80110a0:	d102      	bne.n	80110a8 <_fstat_r+0x1c>
 80110a2:	682b      	ldr	r3, [r5, #0]
 80110a4:	b103      	cbz	r3, 80110a8 <_fstat_r+0x1c>
 80110a6:	6023      	str	r3, [r4, #0]
 80110a8:	bd38      	pop	{r3, r4, r5, pc}
 80110aa:	bf00      	nop
 80110ac:	20002248 	.word	0x20002248

080110b0 <_isatty_r>:
 80110b0:	b538      	push	{r3, r4, r5, lr}
 80110b2:	4d06      	ldr	r5, [pc, #24]	@ (80110cc <_isatty_r+0x1c>)
 80110b4:	2300      	movs	r3, #0
 80110b6:	4604      	mov	r4, r0
 80110b8:	4608      	mov	r0, r1
 80110ba:	602b      	str	r3, [r5, #0]
 80110bc:	f7f0 fbf2 	bl	80018a4 <_isatty>
 80110c0:	1c43      	adds	r3, r0, #1
 80110c2:	d102      	bne.n	80110ca <_isatty_r+0x1a>
 80110c4:	682b      	ldr	r3, [r5, #0]
 80110c6:	b103      	cbz	r3, 80110ca <_isatty_r+0x1a>
 80110c8:	6023      	str	r3, [r4, #0]
 80110ca:	bd38      	pop	{r3, r4, r5, pc}
 80110cc:	20002248 	.word	0x20002248

080110d0 <abort>:
 80110d0:	b508      	push	{r3, lr}
 80110d2:	2006      	movs	r0, #6
 80110d4:	f000 f82c 	bl	8011130 <raise>
 80110d8:	2001      	movs	r0, #1
 80110da:	f7f0 fb83 	bl	80017e4 <_exit>

080110de <_raise_r>:
 80110de:	291f      	cmp	r1, #31
 80110e0:	b538      	push	{r3, r4, r5, lr}
 80110e2:	4605      	mov	r5, r0
 80110e4:	460c      	mov	r4, r1
 80110e6:	d904      	bls.n	80110f2 <_raise_r+0x14>
 80110e8:	2316      	movs	r3, #22
 80110ea:	6003      	str	r3, [r0, #0]
 80110ec:	f04f 30ff 	mov.w	r0, #4294967295
 80110f0:	bd38      	pop	{r3, r4, r5, pc}
 80110f2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80110f4:	b112      	cbz	r2, 80110fc <_raise_r+0x1e>
 80110f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80110fa:	b94b      	cbnz	r3, 8011110 <_raise_r+0x32>
 80110fc:	4628      	mov	r0, r5
 80110fe:	f000 f831 	bl	8011164 <_getpid_r>
 8011102:	4622      	mov	r2, r4
 8011104:	4601      	mov	r1, r0
 8011106:	4628      	mov	r0, r5
 8011108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801110c:	f000 b818 	b.w	8011140 <_kill_r>
 8011110:	2b01      	cmp	r3, #1
 8011112:	d00a      	beq.n	801112a <_raise_r+0x4c>
 8011114:	1c59      	adds	r1, r3, #1
 8011116:	d103      	bne.n	8011120 <_raise_r+0x42>
 8011118:	2316      	movs	r3, #22
 801111a:	6003      	str	r3, [r0, #0]
 801111c:	2001      	movs	r0, #1
 801111e:	e7e7      	b.n	80110f0 <_raise_r+0x12>
 8011120:	2100      	movs	r1, #0
 8011122:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011126:	4620      	mov	r0, r4
 8011128:	4798      	blx	r3
 801112a:	2000      	movs	r0, #0
 801112c:	e7e0      	b.n	80110f0 <_raise_r+0x12>
	...

08011130 <raise>:
 8011130:	4b02      	ldr	r3, [pc, #8]	@ (801113c <raise+0xc>)
 8011132:	4601      	mov	r1, r0
 8011134:	6818      	ldr	r0, [r3, #0]
 8011136:	f7ff bfd2 	b.w	80110de <_raise_r>
 801113a:	bf00      	nop
 801113c:	20000130 	.word	0x20000130

08011140 <_kill_r>:
 8011140:	b538      	push	{r3, r4, r5, lr}
 8011142:	4d07      	ldr	r5, [pc, #28]	@ (8011160 <_kill_r+0x20>)
 8011144:	2300      	movs	r3, #0
 8011146:	4604      	mov	r4, r0
 8011148:	4608      	mov	r0, r1
 801114a:	4611      	mov	r1, r2
 801114c:	602b      	str	r3, [r5, #0]
 801114e:	f7f0 fb39 	bl	80017c4 <_kill>
 8011152:	1c43      	adds	r3, r0, #1
 8011154:	d102      	bne.n	801115c <_kill_r+0x1c>
 8011156:	682b      	ldr	r3, [r5, #0]
 8011158:	b103      	cbz	r3, 801115c <_kill_r+0x1c>
 801115a:	6023      	str	r3, [r4, #0]
 801115c:	bd38      	pop	{r3, r4, r5, pc}
 801115e:	bf00      	nop
 8011160:	20002248 	.word	0x20002248

08011164 <_getpid_r>:
 8011164:	f7f0 bb26 	b.w	80017b4 <_getpid>

08011168 <_init>:
 8011168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801116a:	bf00      	nop
 801116c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801116e:	bc08      	pop	{r3}
 8011170:	469e      	mov	lr, r3
 8011172:	4770      	bx	lr

08011174 <_fini>:
 8011174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011176:	bf00      	nop
 8011178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801117a:	bc08      	pop	{r3}
 801117c:	469e      	mov	lr, r3
 801117e:	4770      	bx	lr
