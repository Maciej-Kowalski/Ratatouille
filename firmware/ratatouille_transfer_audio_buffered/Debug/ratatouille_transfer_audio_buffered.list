
ratatouille_transfer_audio_buffered.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010fc8  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  08011108  08011108  00012108  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080115f0  080115f0  000125f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080115f8  080115f8  000125f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080115fc  080115fc  000125fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002e4  20000008  08011600  00013008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001f6c  200002ec  080118e4  000132ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20002258  080118e4  00014258  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000132ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   00028233  00000000  00000000  0001331c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000050fd  00000000  00000000  0003b54f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002648  00000000  00000000  00040650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001d6c  00000000  00000000  00042c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000078ea  00000000  00000000  00044a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002a384  00000000  00000000  0004c2ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000fed53  00000000  00000000  00076672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001753c5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b418  00000000  00000000  00175408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000094  00000000  00000000  00180820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002ec 	.word	0x200002ec
 800015c:	00000000 	.word	0x00000000
 8000160:	080110f0 	.word	0x080110f0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002f0 	.word	0x200002f0
 800017c:	080110f0 	.word	0x080110f0

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b96a 	b.w	8000e44 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	460c      	mov	r4, r1
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d14e      	bne.n	8000c32 <__udivmoddi4+0xaa>
 8000b94:	4694      	mov	ip, r2
 8000b96:	458c      	cmp	ip, r1
 8000b98:	4686      	mov	lr, r0
 8000b9a:	fab2 f282 	clz	r2, r2
 8000b9e:	d962      	bls.n	8000c66 <__udivmoddi4+0xde>
 8000ba0:	b14a      	cbz	r2, 8000bb6 <__udivmoddi4+0x2e>
 8000ba2:	f1c2 0320 	rsb	r3, r2, #32
 8000ba6:	4091      	lsls	r1, r2
 8000ba8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb0:	4319      	orrs	r1, r3
 8000bb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bba:	fa1f f68c 	uxth.w	r6, ip
 8000bbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000bca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bce:	fb04 f106 	mul.w	r1, r4, r6
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	d90a      	bls.n	8000bec <__udivmoddi4+0x64>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bde:	f080 8112 	bcs.w	8000e06 <__udivmoddi4+0x27e>
 8000be2:	4299      	cmp	r1, r3
 8000be4:	f240 810f 	bls.w	8000e06 <__udivmoddi4+0x27e>
 8000be8:	3c02      	subs	r4, #2
 8000bea:	4463      	add	r3, ip
 8000bec:	1a59      	subs	r1, r3, r1
 8000bee:	fa1f f38e 	uxth.w	r3, lr
 8000bf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000bfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfe:	fb00 f606 	mul.w	r6, r0, r6
 8000c02:	429e      	cmp	r6, r3
 8000c04:	d90a      	bls.n	8000c1c <__udivmoddi4+0x94>
 8000c06:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c0e:	f080 80fc 	bcs.w	8000e0a <__udivmoddi4+0x282>
 8000c12:	429e      	cmp	r6, r3
 8000c14:	f240 80f9 	bls.w	8000e0a <__udivmoddi4+0x282>
 8000c18:	4463      	add	r3, ip
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	1b9b      	subs	r3, r3, r6
 8000c1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11d      	cbz	r5, 8000c2e <__udivmoddi4+0xa6>
 8000c26:	40d3      	lsrs	r3, r2
 8000c28:	2200      	movs	r2, #0
 8000c2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d905      	bls.n	8000c42 <__udivmoddi4+0xba>
 8000c36:	b10d      	cbz	r5, 8000c3c <__udivmoddi4+0xb4>
 8000c38:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4608      	mov	r0, r1
 8000c40:	e7f5      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000c42:	fab3 f183 	clz	r1, r3
 8000c46:	2900      	cmp	r1, #0
 8000c48:	d146      	bne.n	8000cd8 <__udivmoddi4+0x150>
 8000c4a:	42a3      	cmp	r3, r4
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xcc>
 8000c4e:	4290      	cmp	r0, r2
 8000c50:	f0c0 80f0 	bcc.w	8000e34 <__udivmoddi4+0x2ac>
 8000c54:	1a86      	subs	r6, r0, r2
 8000c56:	eb64 0303 	sbc.w	r3, r4, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	2d00      	cmp	r5, #0
 8000c5e:	d0e6      	beq.n	8000c2e <__udivmoddi4+0xa6>
 8000c60:	e9c5 6300 	strd	r6, r3, [r5]
 8000c64:	e7e3      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	f040 8090 	bne.w	8000d8c <__udivmoddi4+0x204>
 8000c6c:	eba1 040c 	sub.w	r4, r1, ip
 8000c70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c74:	fa1f f78c 	uxth.w	r7, ip
 8000c78:	2101      	movs	r1, #1
 8000c7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c82:	fb08 4416 	mls	r4, r8, r6, r4
 8000c86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c8a:	fb07 f006 	mul.w	r0, r7, r6
 8000c8e:	4298      	cmp	r0, r3
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x11c>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x11a>
 8000c9c:	4298      	cmp	r0, r3
 8000c9e:	f200 80cd 	bhi.w	8000e3c <__udivmoddi4+0x2b4>
 8000ca2:	4626      	mov	r6, r4
 8000ca4:	1a1c      	subs	r4, r3, r0
 8000ca6:	fa1f f38e 	uxth.w	r3, lr
 8000caa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cae:	fb08 4410 	mls	r4, r8, r0, r4
 8000cb2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cb6:	fb00 f707 	mul.w	r7, r0, r7
 8000cba:	429f      	cmp	r7, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x148>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x146>
 8000cc8:	429f      	cmp	r7, r3
 8000cca:	f200 80b0 	bhi.w	8000e2e <__udivmoddi4+0x2a6>
 8000cce:	4620      	mov	r0, r4
 8000cd0:	1bdb      	subs	r3, r3, r7
 8000cd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd6:	e7a5      	b.n	8000c24 <__udivmoddi4+0x9c>
 8000cd8:	f1c1 0620 	rsb	r6, r1, #32
 8000cdc:	408b      	lsls	r3, r1
 8000cde:	fa22 f706 	lsr.w	r7, r2, r6
 8000ce2:	431f      	orrs	r7, r3
 8000ce4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ce8:	fa04 f301 	lsl.w	r3, r4, r1
 8000cec:	ea43 030c 	orr.w	r3, r3, ip
 8000cf0:	40f4      	lsrs	r4, r6
 8000cf2:	fa00 f801 	lsl.w	r8, r0, r1
 8000cf6:	0c38      	lsrs	r0, r7, #16
 8000cf8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000d00:	fa1f fc87 	uxth.w	ip, r7
 8000d04:	fb00 441e 	mls	r4, r0, lr, r4
 8000d08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d10:	45a1      	cmp	r9, r4
 8000d12:	fa02 f201 	lsl.w	r2, r2, r1
 8000d16:	d90a      	bls.n	8000d2e <__udivmoddi4+0x1a6>
 8000d18:	193c      	adds	r4, r7, r4
 8000d1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d1e:	f080 8084 	bcs.w	8000e2a <__udivmoddi4+0x2a2>
 8000d22:	45a1      	cmp	r9, r4
 8000d24:	f240 8081 	bls.w	8000e2a <__udivmoddi4+0x2a2>
 8000d28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d2c:	443c      	add	r4, r7
 8000d2e:	eba4 0409 	sub.w	r4, r4, r9
 8000d32:	fa1f f983 	uxth.w	r9, r3
 8000d36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d46:	45a4      	cmp	ip, r4
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x1d2>
 8000d4a:	193c      	adds	r4, r7, r4
 8000d4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d50:	d267      	bcs.n	8000e22 <__udivmoddi4+0x29a>
 8000d52:	45a4      	cmp	ip, r4
 8000d54:	d965      	bls.n	8000e22 <__udivmoddi4+0x29a>
 8000d56:	3b02      	subs	r3, #2
 8000d58:	443c      	add	r4, r7
 8000d5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000d62:	eba4 040c 	sub.w	r4, r4, ip
 8000d66:	429c      	cmp	r4, r3
 8000d68:	46ce      	mov	lr, r9
 8000d6a:	469c      	mov	ip, r3
 8000d6c:	d351      	bcc.n	8000e12 <__udivmoddi4+0x28a>
 8000d6e:	d04e      	beq.n	8000e0e <__udivmoddi4+0x286>
 8000d70:	b155      	cbz	r5, 8000d88 <__udivmoddi4+0x200>
 8000d72:	ebb8 030e 	subs.w	r3, r8, lr
 8000d76:	eb64 040c 	sbc.w	r4, r4, ip
 8000d7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d7e:	40cb      	lsrs	r3, r1
 8000d80:	431e      	orrs	r6, r3
 8000d82:	40cc      	lsrs	r4, r1
 8000d84:	e9c5 6400 	strd	r6, r4, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	e750      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000d8c:	f1c2 0320 	rsb	r3, r2, #32
 8000d90:	fa20 f103 	lsr.w	r1, r0, r3
 8000d94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d98:	fa24 f303 	lsr.w	r3, r4, r3
 8000d9c:	4094      	lsls	r4, r2
 8000d9e:	430c      	orrs	r4, r1
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da8:	fa1f f78c 	uxth.w	r7, ip
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3110 	mls	r1, r8, r0, r3
 8000db4:	0c23      	lsrs	r3, r4, #16
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f107 	mul.w	r1, r0, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x24c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dca:	d22c      	bcs.n	8000e26 <__udivmoddi4+0x29e>
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	d92a      	bls.n	8000e26 <__udivmoddi4+0x29e>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ddc:	fb08 3311 	mls	r3, r8, r1, r3
 8000de0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de4:	fb01 f307 	mul.w	r3, r1, r7
 8000de8:	42a3      	cmp	r3, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x276>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000df4:	d213      	bcs.n	8000e1e <__udivmoddi4+0x296>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d911      	bls.n	8000e1e <__udivmoddi4+0x296>
 8000dfa:	3902      	subs	r1, #2
 8000dfc:	4464      	add	r4, ip
 8000dfe:	1ae4      	subs	r4, r4, r3
 8000e00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e04:	e739      	b.n	8000c7a <__udivmoddi4+0xf2>
 8000e06:	4604      	mov	r4, r0
 8000e08:	e6f0      	b.n	8000bec <__udivmoddi4+0x64>
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e706      	b.n	8000c1c <__udivmoddi4+0x94>
 8000e0e:	45c8      	cmp	r8, r9
 8000e10:	d2ae      	bcs.n	8000d70 <__udivmoddi4+0x1e8>
 8000e12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e1a:	3801      	subs	r0, #1
 8000e1c:	e7a8      	b.n	8000d70 <__udivmoddi4+0x1e8>
 8000e1e:	4631      	mov	r1, r6
 8000e20:	e7ed      	b.n	8000dfe <__udivmoddi4+0x276>
 8000e22:	4603      	mov	r3, r0
 8000e24:	e799      	b.n	8000d5a <__udivmoddi4+0x1d2>
 8000e26:	4630      	mov	r0, r6
 8000e28:	e7d4      	b.n	8000dd4 <__udivmoddi4+0x24c>
 8000e2a:	46d6      	mov	lr, sl
 8000e2c:	e77f      	b.n	8000d2e <__udivmoddi4+0x1a6>
 8000e2e:	4463      	add	r3, ip
 8000e30:	3802      	subs	r0, #2
 8000e32:	e74d      	b.n	8000cd0 <__udivmoddi4+0x148>
 8000e34:	4606      	mov	r6, r0
 8000e36:	4623      	mov	r3, r4
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e70f      	b.n	8000c5c <__udivmoddi4+0xd4>
 8000e3c:	3e02      	subs	r6, #2
 8000e3e:	4463      	add	r3, ip
 8000e40:	e730      	b.n	8000ca4 <__udivmoddi4+0x11c>
 8000e42:	bf00      	nop

08000e44 <__aeabi_idiv0>:
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop

08000e48 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000e50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e54:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000e56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000e60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e64:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
}
 8000e6e:	bf00      	nop
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	b085      	sub	sp, #20
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e88:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2)
  {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(TIMING_GPIO_Port, TIMING_Pin);
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eba:	f003 f813 	bl	8003ee4 <HAL_GPIO_TogglePin>
	////this updates the X and Y axes of my joystick
	  for(uint8_t i = 0; i<hadc1.Init.NbrOfConversion; i++){
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	73fb      	strb	r3, [r7, #15]
 8000ec2:	e00a      	b.n	8000eda <HAL_TIM_PeriodElapsedCallback+0x2e>
		  mic = (uint16_t) rawValues[0];
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000ec6:	881a      	ldrh	r2, [r3, #0]
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000eca:	801a      	strh	r2, [r3, #0]
		  mic2 = mic;
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000ece:	881a      	ldrh	r2, [r3, #0]
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8000efc <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000ed2:	801a      	strh	r2, [r3, #0]
	  for(uint8_t i = 0; i<hadc1.Init.NbrOfConversion; i++){
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	73fb      	strb	r3, [r7, #15]
 8000eda:	7bfa      	ldrb	r2, [r7, #15]
 8000edc:	4b08      	ldr	r3, [pc, #32]	@ (8000f00 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000ede:	69db      	ldr	r3, [r3, #28]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d3ef      	bcc.n	8000ec4 <HAL_TIM_PeriodElapsedCallback+0x18>
	  }
	  flag = 1;
 8000ee4:	4b07      	ldr	r3, [pc, #28]	@ (8000f04 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	701a      	strb	r2, [r3, #0]

	  //HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin);
  }
 8000eea:	bf00      	nop
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000484 	.word	0x20000484
 8000ef8:	2000047e 	.word	0x2000047e
 8000efc:	20000480 	.word	0x20000480
 8000f00:	20000318 	.word	0x20000318
 8000f04:	20000488 	.word	0x20000488

08000f08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f0c:	f000 ff2a 	bl	8001d64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f10:	f000 f88e 	bl	8001030 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f14:	f000 f8f0 	bl	80010f8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f18:	f000 fa34 	bl	8001384 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f1c:	f000 fa20 	bl	8001360 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f20:	f000 f91c 	bl	800115c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000f24:	f000 f9ce 	bl	80012c4 <MX_TIM2_Init>
  MX_USB_Device_Init();
 8000f28:	f00c fed0 	bl	800dccc <MX_USB_Device_Init>
  MX_I2C1_Init();
 8000f2c:	f000 f98a 	bl	8001244 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ////This begins the process of storing our ADC readings into the DMA. The DMA can be thought of a temporary storage location.
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) rawValues, 2);
 8000f30:	2202      	movs	r2, #2
 8000f32:	4936      	ldr	r1, [pc, #216]	@ (800100c <main+0x104>)
 8000f34:	4836      	ldr	r0, [pc, #216]	@ (8001010 <main+0x108>)
 8000f36:	f001 faf3 	bl	8002520 <HAL_ADC_Start_DMA>
    ////This begins our timer 2
  HAL_TIM_Base_Start_IT(&htim2);
 8000f3a:	4836      	ldr	r0, [pc, #216]	@ (8001014 <main+0x10c>)
 8000f3c:	f007 faa6 	bl	800848c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 8000f40:	2000      	movs	r0, #0
 8000f42:	f000 fd9d 	bl	8001a80 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8000f46:	2001      	movs	r0, #1
 8000f48:	f000 fd9a 	bl	8001a80 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000f4c:	2002      	movs	r0, #2
 8000f4e:	f000 fd97 	bl	8001a80 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8000f52:	2101      	movs	r1, #1
 8000f54:	2000      	movs	r0, #0
 8000f56:	f000 fde7 	bl	8001b28 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	f000 fde3 	bl	8001b28 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 8000f62:	2101      	movs	r1, #1
 8000f64:	2002      	movs	r0, #2
 8000f66:	f000 fddf 	bl	8001b28 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000f6a:	4b2b      	ldr	r3, [pc, #172]	@ (8001018 <main+0x110>)
 8000f6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f70:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000f72:	4b29      	ldr	r3, [pc, #164]	@ (8001018 <main+0x110>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000f78:	4b27      	ldr	r3, [pc, #156]	@ (8001018 <main+0x110>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000f7e:	4b26      	ldr	r3, [pc, #152]	@ (8001018 <main+0x110>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000f84:	4b24      	ldr	r3, [pc, #144]	@ (8001018 <main+0x110>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000f8a:	4923      	ldr	r1, [pc, #140]	@ (8001018 <main+0x110>)
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	f000 fe3b 	bl	8001c08 <BSP_COM_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <main+0x94>
  {
    Error_Handler();
 8000f98:	f000 fa51 	bl	800143e <Error_Handler>
  /*                                                                          ********************************************************************* */
  while (1)
  {
	  //bmi160ReadAccelGyro(&imu_t);

	  if (flag==1){
 8000f9c:	4b1f      	ldr	r3, [pc, #124]	@ (800101c <main+0x114>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d1fb      	bne.n	8000f9c <main+0x94>

		  //HAL_GPIO_TogglePin(SIGNAL_GPIO_Port, SIGNAL_Pin);
		  //HAL_GPIO_WritePin(SIGNAL_GPIO_Port, SIGNAL_Pin,GPIO_PIN_SET);
		  if (counter == 32000){
 8000fa4:	4b1e      	ldr	r3, [pc, #120]	@ (8001020 <main+0x118>)
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8000fac:	d103      	bne.n	8000fb6 <main+0xae>
			  counter = 0;
 8000fae:	4b1c      	ldr	r3, [pc, #112]	@ (8001020 <main+0x118>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	801a      	strh	r2, [r3, #0]
 8000fb4:	e005      	b.n	8000fc2 <main+0xba>
		  }
		  else{
			  counter++;
 8000fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8001020 <main+0x118>)
 8000fb8:	881b      	ldrh	r3, [r3, #0]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	4b18      	ldr	r3, [pc, #96]	@ (8001020 <main+0x118>)
 8000fc0:	801a      	strh	r2, [r3, #0]
		  }
		  update_data_packet_audio_buffered(counter, USB_buffer, &packet_length);
 8000fc2:	4b17      	ldr	r3, [pc, #92]	@ (8001020 <main+0x118>)
 8000fc4:	881b      	ldrh	r3, [r3, #0]
 8000fc6:	4a17      	ldr	r2, [pc, #92]	@ (8001024 <main+0x11c>)
 8000fc8:	4917      	ldr	r1, [pc, #92]	@ (8001028 <main+0x120>)
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 fa13 	bl	80013f6 <update_data_packet_audio_buffered>
		  //HAL_GPIO_WritePin(TIMING_GPIO_Port, TIMING_Pin,GPIO_PIN_RESET);
		  if (counter % 200 == 0){
 8000fd0:	4b13      	ldr	r3, [pc, #76]	@ (8001020 <main+0x118>)
 8000fd2:	881b      	ldrh	r3, [r3, #0]
 8000fd4:	4a15      	ldr	r2, [pc, #84]	@ (800102c <main+0x124>)
 8000fd6:	fba2 1203 	umull	r1, r2, r2, r3
 8000fda:	0992      	lsrs	r2, r2, #6
 8000fdc:	21c8      	movs	r1, #200	@ 0xc8
 8000fde:	fb01 f202 	mul.w	r2, r1, r2
 8000fe2:	1a9b      	subs	r3, r3, r2
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d10c      	bne.n	8001004 <main+0xfc>
			  CDC_Transmit_FS(USB_buffer, packet_length);
 8000fea:	4b0e      	ldr	r3, [pc, #56]	@ (8001024 <main+0x11c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	480d      	ldr	r0, [pc, #52]	@ (8001028 <main+0x120>)
 8000ff4:	f00c ff28 	bl	800de48 <CDC_Transmit_FS>
			  packet_length = 0;
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8001024 <main+0x11c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
			  BSP_LED_Toggle(LED_GREEN);
 8000ffe:	2001      	movs	r0, #1
 8001000:	f000 fd78 	bl	8001af4 <BSP_LED_Toggle>

		  //HAL_GPIO_TogglePin(LED_GREEN_Port,LED_GREEN_Pin);
		  //snprintf(msg, sizeof(msg), "a: %.2f, g: %.2f", a_f32[0], g_f32[0]);
		  //CDC_Transmit_FS((uint8_t *)msg, strlen(msg));

		  flag = 0;
 8001004:	4b05      	ldr	r3, [pc, #20]	@ (800101c <main+0x114>)
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]
	  if (flag==1){
 800100a:	e7c7      	b.n	8000f9c <main+0x94>
 800100c:	20000484 	.word	0x20000484
 8001010:	20000318 	.word	0x20000318
 8001014:	20000430 	.word	0x20000430
 8001018:	20000308 	.word	0x20000308
 800101c:	20000488 	.word	0x20000488
 8001020:	2000047c 	.word	0x2000047c
 8001024:	2000068c 	.word	0x2000068c
 8001028:	2000048c 	.word	0x2000048c
 800102c:	51eb851f 	.word	0x51eb851f

08001030 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b09a      	sub	sp, #104	@ 0x68
 8001034:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001036:	f107 0320 	add.w	r3, r7, #32
 800103a:	2248      	movs	r2, #72	@ 0x48
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f00e f8fd 	bl	800f23e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
 8001050:	611a      	str	r2, [r3, #16]
 8001052:	615a      	str	r2, [r3, #20]
 8001054:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001056:	4b27      	ldr	r3, [pc, #156]	@ (80010f4 <SystemClock_Config+0xc4>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800105e:	4a25      	ldr	r2, [pc, #148]	@ (80010f4 <SystemClock_Config+0xc4>)
 8001060:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001064:	6013      	str	r3, [r2, #0]
 8001066:	4b23      	ldr	r3, [pc, #140]	@ (80010f4 <SystemClock_Config+0xc4>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001072:	2303      	movs	r3, #3
 8001074:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001076:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800107a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800107c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001080:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001082:	2340      	movs	r3, #64	@ 0x40
 8001084:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001086:	2302      	movs	r3, #2
 8001088:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800108a:	2303      	movs	r3, #3
 800108c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800108e:	2310      	movs	r3, #16
 8001090:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001092:	2308      	movs	r3, #8
 8001094:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001096:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800109a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800109c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80010a0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010a6:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a8:	f107 0320 	add.w	r3, r7, #32
 80010ac:	4618      	mov	r0, r3
 80010ae:	f005 ff5d 	bl	8006f6c <HAL_RCC_OscConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80010b8:	f000 f9c1 	bl	800143e <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80010bc:	236f      	movs	r3, #111	@ 0x6f
 80010be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c0:	2303      	movs	r3, #3
 80010c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010c8:	2300      	movs	r3, #0
 80010ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80010d0:	2380      	movs	r3, #128	@ 0x80
 80010d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	2103      	movs	r1, #3
 80010dc:	4618      	mov	r0, r3
 80010de:	f006 fab9 	bl	8007654 <HAL_RCC_ClockConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80010e8:	f000 f9a9 	bl	800143e <Error_Handler>
  }
}
 80010ec:	bf00      	nop
 80010ee:	3768      	adds	r7, #104	@ 0x68
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	58000400 	.word	0x58000400

080010f8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b094      	sub	sp, #80	@ 0x50
 80010fc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010fe:	463b      	mov	r3, r7
 8001100:	2250      	movs	r2, #80	@ 0x50
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f00e f89a 	bl	800f23e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 800110a:	f44f 5314 	mov.w	r3, #9472	@ 0x2500
 800110e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8001110:	2306      	movs	r3, #6
 8001112:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001114:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001118:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800111a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800111e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001120:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001124:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8001126:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 800112a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800112c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001130:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001132:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001136:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001138:	2300      	movs	r3, #0
 800113a:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800113c:	2300      	movs	r3, #0
 800113e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001140:	463b      	mov	r3, r7
 8001142:	4618      	mov	r0, r3
 8001144:	f006 fec3 	bl	8007ece <HAL_RCCEx_PeriphCLKConfig>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 800114e:	f000 f976 	bl	800143e <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001152:	bf00      	nop
 8001154:	3750      	adds	r7, #80	@ 0x50
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001162:	463b      	mov	r3, r7
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
 8001170:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001172:	4b30      	ldr	r3, [pc, #192]	@ (8001234 <MX_ADC1_Init+0xd8>)
 8001174:	4a30      	ldr	r2, [pc, #192]	@ (8001238 <MX_ADC1_Init+0xdc>)
 8001176:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8001178:	4b2e      	ldr	r3, [pc, #184]	@ (8001234 <MX_ADC1_Init+0xd8>)
 800117a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800117e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001180:	4b2c      	ldr	r3, [pc, #176]	@ (8001234 <MX_ADC1_Init+0xd8>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001186:	4b2b      	ldr	r3, [pc, #172]	@ (8001234 <MX_ADC1_Init+0xd8>)
 8001188:	2200      	movs	r2, #0
 800118a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800118c:	4b29      	ldr	r3, [pc, #164]	@ (8001234 <MX_ADC1_Init+0xd8>)
 800118e:	2201      	movs	r2, #1
 8001190:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001192:	4b28      	ldr	r3, [pc, #160]	@ (8001234 <MX_ADC1_Init+0xd8>)
 8001194:	2204      	movs	r2, #4
 8001196:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001198:	4b26      	ldr	r3, [pc, #152]	@ (8001234 <MX_ADC1_Init+0xd8>)
 800119a:	2200      	movs	r2, #0
 800119c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800119e:	4b25      	ldr	r3, [pc, #148]	@ (8001234 <MX_ADC1_Init+0xd8>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 80011a4:	4b23      	ldr	r3, [pc, #140]	@ (8001234 <MX_ADC1_Init+0xd8>)
 80011a6:	2202      	movs	r2, #2
 80011a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011aa:	4b22      	ldr	r3, [pc, #136]	@ (8001234 <MX_ADC1_Init+0xd8>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011b2:	4b20      	ldr	r3, [pc, #128]	@ (8001234 <MX_ADC1_Init+0xd8>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001234 <MX_ADC1_Init+0xd8>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011be:	4b1d      	ldr	r3, [pc, #116]	@ (8001234 <MX_ADC1_Init+0xd8>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001234 <MX_ADC1_Init+0xd8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011cc:	4b19      	ldr	r3, [pc, #100]	@ (8001234 <MX_ADC1_Init+0xd8>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011d4:	4817      	ldr	r0, [pc, #92]	@ (8001234 <MX_ADC1_Init+0xd8>)
 80011d6:	f001 f857 	bl	8002288 <HAL_ADC_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80011e0:	f000 f92d 	bl	800143e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011e4:	4b15      	ldr	r3, [pc, #84]	@ (800123c <MX_ADC1_Init+0xe0>)
 80011e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011e8:	2306      	movs	r3, #6
 80011ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80011ec:	2306      	movs	r3, #6
 80011ee:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011f0:	237f      	movs	r3, #127	@ 0x7f
 80011f2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011f4:	2304      	movs	r3, #4
 80011f6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011fc:	463b      	mov	r3, r7
 80011fe:	4619      	mov	r1, r3
 8001200:	480c      	ldr	r0, [pc, #48]	@ (8001234 <MX_ADC1_Init+0xd8>)
 8001202:	f001 fbef 	bl	80029e4 <HAL_ADC_ConfigChannel>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800120c:	f000 f917 	bl	800143e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001210:	4b0b      	ldr	r3, [pc, #44]	@ (8001240 <MX_ADC1_Init+0xe4>)
 8001212:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001214:	230c      	movs	r3, #12
 8001216:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001218:	463b      	mov	r3, r7
 800121a:	4619      	mov	r1, r3
 800121c:	4805      	ldr	r0, [pc, #20]	@ (8001234 <MX_ADC1_Init+0xd8>)
 800121e:	f001 fbe1 	bl	80029e4 <HAL_ADC_ConfigChannel>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8001228:	f000 f909 	bl	800143e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800122c:	bf00      	nop
 800122e:	3718      	adds	r7, #24
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000318 	.word	0x20000318
 8001238:	50040000 	.word	0x50040000
 800123c:	04300002 	.word	0x04300002
 8001240:	08600004 	.word	0x08600004

08001244 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001248:	4b1b      	ldr	r3, [pc, #108]	@ (80012b8 <MX_I2C1_Init+0x74>)
 800124a:	4a1c      	ldr	r2, [pc, #112]	@ (80012bc <MX_I2C1_Init+0x78>)
 800124c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 800124e:	4b1a      	ldr	r3, [pc, #104]	@ (80012b8 <MX_I2C1_Init+0x74>)
 8001250:	4a1b      	ldr	r2, [pc, #108]	@ (80012c0 <MX_I2C1_Init+0x7c>)
 8001252:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001254:	4b18      	ldr	r3, [pc, #96]	@ (80012b8 <MX_I2C1_Init+0x74>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800125a:	4b17      	ldr	r3, [pc, #92]	@ (80012b8 <MX_I2C1_Init+0x74>)
 800125c:	2201      	movs	r2, #1
 800125e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001260:	4b15      	ldr	r3, [pc, #84]	@ (80012b8 <MX_I2C1_Init+0x74>)
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001266:	4b14      	ldr	r3, [pc, #80]	@ (80012b8 <MX_I2C1_Init+0x74>)
 8001268:	2200      	movs	r2, #0
 800126a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800126c:	4b12      	ldr	r3, [pc, #72]	@ (80012b8 <MX_I2C1_Init+0x74>)
 800126e:	2200      	movs	r2, #0
 8001270:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001272:	4b11      	ldr	r3, [pc, #68]	@ (80012b8 <MX_I2C1_Init+0x74>)
 8001274:	2200      	movs	r2, #0
 8001276:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001278:	4b0f      	ldr	r3, [pc, #60]	@ (80012b8 <MX_I2C1_Init+0x74>)
 800127a:	2200      	movs	r2, #0
 800127c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800127e:	480e      	ldr	r0, [pc, #56]	@ (80012b8 <MX_I2C1_Init+0x74>)
 8001280:	f002 fe6d 	bl	8003f5e <HAL_I2C_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800128a:	f000 f8d8 	bl	800143e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800128e:	2100      	movs	r1, #0
 8001290:	4809      	ldr	r0, [pc, #36]	@ (80012b8 <MX_I2C1_Init+0x74>)
 8001292:	f003 fcfc 	bl	8004c8e <HAL_I2CEx_ConfigAnalogFilter>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800129c:	f000 f8cf 	bl	800143e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012a0:	2100      	movs	r1, #0
 80012a2:	4805      	ldr	r0, [pc, #20]	@ (80012b8 <MX_I2C1_Init+0x74>)
 80012a4:	f003 fd3e 	bl	8004d24 <HAL_I2CEx_ConfigDigitalFilter>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012ae:	f000 f8c6 	bl	800143e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	200003dc 	.word	0x200003dc
 80012bc:	40005400 	.word	0x40005400
 80012c0:	10b17db5 	.word	0x10b17db5

080012c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b088      	sub	sp, #32
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ca:	f107 0310 	add.w	r3, r7, #16
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012e2:	4b1e      	ldr	r3, [pc, #120]	@ (800135c <MX_TIM2_Init+0x98>)
 80012e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012ea:	4b1c      	ldr	r3, [pc, #112]	@ (800135c <MX_TIM2_Init+0x98>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f0:	4b1a      	ldr	r3, [pc, #104]	@ (800135c <MX_TIM2_Init+0x98>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 80012f6:	4b19      	ldr	r3, [pc, #100]	@ (800135c <MX_TIM2_Init+0x98>)
 80012f8:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80012fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fe:	4b17      	ldr	r3, [pc, #92]	@ (800135c <MX_TIM2_Init+0x98>)
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001304:	4b15      	ldr	r3, [pc, #84]	@ (800135c <MX_TIM2_Init+0x98>)
 8001306:	2280      	movs	r2, #128	@ 0x80
 8001308:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800130a:	4814      	ldr	r0, [pc, #80]	@ (800135c <MX_TIM2_Init+0x98>)
 800130c:	f007 f866 	bl	80083dc <HAL_TIM_Base_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001316:	f000 f892 	bl	800143e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800131a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800131e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001320:	f107 0310 	add.w	r3, r7, #16
 8001324:	4619      	mov	r1, r3
 8001326:	480d      	ldr	r0, [pc, #52]	@ (800135c <MX_TIM2_Init+0x98>)
 8001328:	f007 fa05 	bl	8008736 <HAL_TIM_ConfigClockSource>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001332:	f000 f884 	bl	800143e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001336:	2320      	movs	r3, #32
 8001338:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	4619      	mov	r1, r3
 8001342:	4806      	ldr	r0, [pc, #24]	@ (800135c <MX_TIM2_Init+0x98>)
 8001344:	f007 fbf4 	bl	8008b30 <HAL_TIMEx_MasterConfigSynchronization>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800134e:	f000 f876 	bl	800143e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	3720      	adds	r7, #32
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000430 	.word	0x20000430

08001360 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001364:	2004      	movs	r0, #4
 8001366:	f7ff fd6f 	bl	8000e48 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800136a:	2001      	movs	r0, #1
 800136c:	f7ff fd6c 	bl	8000e48 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001370:	2200      	movs	r2, #0
 8001372:	2100      	movs	r1, #0
 8001374:	200b      	movs	r0, #11
 8001376:	f002 f916 	bl	80035a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800137a:	200b      	movs	r0, #11
 800137c:	f002 f92d 	bl	80035da <HAL_NVIC_EnableIRQ>

}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}

08001384 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001398:	2004      	movs	r0, #4
 800139a:	f7ff fd6e 	bl	8000e7a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800139e:	2002      	movs	r0, #2
 80013a0:	f7ff fd6b 	bl	8000e7a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a4:	2001      	movs	r0, #1
 80013a6:	f7ff fd68 	bl	8000e7a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TIMING_Pin|SIGNAL_Pin, GPIO_PIN_RESET);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2103      	movs	r1, #3
 80013ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013b2:	f002 fd7f 	bl	8003eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TIMING_Pin */
  GPIO_InitStruct.Pin = TIMING_Pin;
 80013b6:	2301      	movs	r3, #1
 80013b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ba:	2301      	movs	r3, #1
 80013bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80013c2:	2301      	movs	r3, #1
 80013c4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(TIMING_GPIO_Port, &GPIO_InitStruct);
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	4619      	mov	r1, r3
 80013ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ce:	f002 fc01 	bl	8003bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIGNAL_Pin */
  GPIO_InitStruct.Pin = SIGNAL_Pin;
 80013d2:	2302      	movs	r3, #2
 80013d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d6:	2301      	movs	r3, #1
 80013d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SIGNAL_GPIO_Port, &GPIO_InitStruct);
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	4619      	mov	r1, r3
 80013e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ea:	f002 fbf3 	bl	8003bd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013ee:	bf00      	nop
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <update_data_packet_audio_buffered>:

/* USER CODE BEGIN 4 */

void update_data_packet_audio_buffered(uint16_t var1, uint8_t *buffer, size_t *length) {
 80013f6:	b480      	push	{r7}
 80013f8:	b085      	sub	sp, #20
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	4603      	mov	r3, r0
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
 8001402:	81fb      	strh	r3, [r7, #14]
    // Define the start byte
	if (*length == 0){
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d107      	bne.n	800141c <update_data_packet_audio_buffered+0x26>
		buffer[0] = (uint8_t)-128;
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	2280      	movs	r2, #128	@ 0x80
 8001410:	701a      	strb	r2, [r3, #0]
		(*length)++;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	1c5a      	adds	r2, r3, #1
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	601a      	str	r2, [r3, #0]
	}
    memcpy(&buffer[*length], &var1, sizeof(uint16_t));
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	68ba      	ldr	r2, [r7, #8]
 8001422:	4413      	add	r3, r2
 8001424:	89fa      	ldrh	r2, [r7, #14]
 8001426:	801a      	strh	r2, [r3, #0]

    // Set the total length of the packet
    (*length) += sizeof(uint16_t);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	1c9a      	adds	r2, r3, #2
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	601a      	str	r2, [r3, #0]
}
 8001432:	bf00      	nop
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001442:	b672      	cpsid	i
}
 8001444:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001446:	bf00      	nop
 8001448:	e7fd      	b.n	8001446 <Error_Handler+0x8>

0800144a <LL_AHB2_GRP1_EnableClock>:
{
 800144a:	b480      	push	{r7}
 800144c:	b085      	sub	sp, #20
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001452:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001456:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001458:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4313      	orrs	r3, r2
 8001460:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001462:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001466:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4013      	ands	r3, r2
 800146c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800146e:	68fb      	ldr	r3, [r7, #12]
}
 8001470:	bf00      	nop
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001484:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001488:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800148a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4313      	orrs	r3, r2
 8001492:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001494:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001498:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4013      	ands	r3, r2
 800149e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014a0:	68fb      	ldr	r3, [r7, #12]
}
 80014a2:	bf00      	nop
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b088      	sub	sp, #32
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 030c 	add.w	r3, r7, #12
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a26      	ldr	r2, [pc, #152]	@ (8001574 <HAL_ADC_MspInit+0xb8>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d145      	bne.n	800156a <HAL_ADC_MspInit+0xae>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80014de:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80014e2:	f7ff ffb2 	bl	800144a <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e6:	2004      	movs	r0, #4
 80014e8:	f7ff ffaf 	bl	800144a <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014ec:	2303      	movs	r3, #3
 80014ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014f0:	2303      	movs	r3, #3
 80014f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f8:	f107 030c 	add.w	r3, r7, #12
 80014fc:	4619      	mov	r1, r3
 80014fe:	481e      	ldr	r0, [pc, #120]	@ (8001578 <HAL_ADC_MspInit+0xbc>)
 8001500:	f002 fb68 	bl	8003bd4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001504:	4b1d      	ldr	r3, [pc, #116]	@ (800157c <HAL_ADC_MspInit+0xc0>)
 8001506:	4a1e      	ldr	r2, [pc, #120]	@ (8001580 <HAL_ADC_MspInit+0xc4>)
 8001508:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800150a:	4b1c      	ldr	r3, [pc, #112]	@ (800157c <HAL_ADC_MspInit+0xc0>)
 800150c:	2205      	movs	r2, #5
 800150e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001510:	4b1a      	ldr	r3, [pc, #104]	@ (800157c <HAL_ADC_MspInit+0xc0>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001516:	4b19      	ldr	r3, [pc, #100]	@ (800157c <HAL_ADC_MspInit+0xc0>)
 8001518:	2200      	movs	r2, #0
 800151a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800151c:	4b17      	ldr	r3, [pc, #92]	@ (800157c <HAL_ADC_MspInit+0xc0>)
 800151e:	2280      	movs	r2, #128	@ 0x80
 8001520:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001522:	4b16      	ldr	r3, [pc, #88]	@ (800157c <HAL_ADC_MspInit+0xc0>)
 8001524:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001528:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800152a:	4b14      	ldr	r3, [pc, #80]	@ (800157c <HAL_ADC_MspInit+0xc0>)
 800152c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001530:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001532:	4b12      	ldr	r3, [pc, #72]	@ (800157c <HAL_ADC_MspInit+0xc0>)
 8001534:	2220      	movs	r2, #32
 8001536:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001538:	4b10      	ldr	r3, [pc, #64]	@ (800157c <HAL_ADC_MspInit+0xc0>)
 800153a:	2200      	movs	r2, #0
 800153c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800153e:	480f      	ldr	r0, [pc, #60]	@ (800157c <HAL_ADC_MspInit+0xc0>)
 8001540:	f002 f866 	bl	8003610 <HAL_DMA_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <HAL_ADC_MspInit+0x92>
    {
      Error_Handler();
 800154a:	f7ff ff78 	bl	800143e <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a0a      	ldr	r2, [pc, #40]	@ (800157c <HAL_ADC_MspInit+0xc0>)
 8001552:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001554:	4a09      	ldr	r2, [pc, #36]	@ (800157c <HAL_ADC_MspInit+0xc0>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 2, 0);
 800155a:	2200      	movs	r2, #0
 800155c:	2102      	movs	r1, #2
 800155e:	2012      	movs	r0, #18
 8001560:	f002 f821 	bl	80035a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001564:	2012      	movs	r0, #18
 8001566:	f002 f838 	bl	80035da <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800156a:	bf00      	nop
 800156c:	3720      	adds	r7, #32
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	50040000 	.word	0x50040000
 8001578:	48000800 	.word	0x48000800
 800157c:	2000037c 	.word	0x2000037c
 8001580:	40020008 	.word	0x40020008

08001584 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b09c      	sub	sp, #112	@ 0x70
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800159c:	f107 030c 	add.w	r3, r7, #12
 80015a0:	2250      	movs	r2, #80	@ 0x50
 80015a2:	2100      	movs	r1, #0
 80015a4:	4618      	mov	r0, r3
 80015a6:	f00d fe4a 	bl	800f23e <memset>
  if(hi2c->Instance==I2C1)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a1f      	ldr	r2, [pc, #124]	@ (800162c <HAL_I2C_MspInit+0xa8>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d136      	bne.n	8001622 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015b4:	2304      	movs	r3, #4
 80015b6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015b8:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80015bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015be:	f107 030c 	add.w	r3, r7, #12
 80015c2:	4618      	mov	r0, r3
 80015c4:	f006 fc83 	bl	8007ece <HAL_RCCEx_PeriphCLKConfig>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80015ce:	f7ff ff36 	bl	800143e <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d2:	2002      	movs	r0, #2
 80015d4:	f7ff ff39 	bl	800144a <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015d8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015de:	2312      	movs	r3, #18
 80015e0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e6:	2300      	movs	r3, #0
 80015e8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015ea:	2304      	movs	r3, #4
 80015ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ee:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80015f2:	4619      	mov	r1, r3
 80015f4:	480e      	ldr	r0, [pc, #56]	@ (8001630 <HAL_I2C_MspInit+0xac>)
 80015f6:	f002 faed 	bl	8003bd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015fa:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80015fe:	f7ff ff3d 	bl	800147c <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	201e      	movs	r0, #30
 8001608:	f001 ffcd 	bl	80035a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800160c:	201e      	movs	r0, #30
 800160e:	f001 ffe4 	bl	80035da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	201f      	movs	r0, #31
 8001618:	f001 ffc5 	bl	80035a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800161c:	201f      	movs	r0, #31
 800161e:	f001 ffdc 	bl	80035da <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001622:	bf00      	nop
 8001624:	3770      	adds	r7, #112	@ 0x70
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40005400 	.word	0x40005400
 8001630:	48000400 	.word	0x48000400

08001634 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001644:	d10a      	bne.n	800165c <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001646:	2001      	movs	r0, #1
 8001648:	f7ff ff18 	bl	800147c <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800164c:	2200      	movs	r2, #0
 800164e:	2100      	movs	r1, #0
 8001650:	201c      	movs	r0, #28
 8001652:	f001 ffa8 	bl	80035a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001656:	201c      	movs	r0, #28
 8001658:	f001 ffbf 	bl	80035da <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <NMI_Handler+0x4>

0800166c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001670:	bf00      	nop
 8001672:	e7fd      	b.n	8001670 <HardFault_Handler+0x4>

08001674 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001678:	bf00      	nop
 800167a:	e7fd      	b.n	8001678 <MemManage_Handler+0x4>

0800167c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <BusFault_Handler+0x4>

08001684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001688:	bf00      	nop
 800168a:	e7fd      	b.n	8001688 <UsageFault_Handler+0x4>

0800168c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ba:	f000 fbad 	bl	8001e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 80016c6:	2001      	movs	r0, #1
 80016c8:	f002 fc26 	bl	8003f18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 80016d4:	2002      	movs	r0, #2
 80016d6:	f002 fc1f 	bl	8003f18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}

080016de <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 80016e2:	2010      	movs	r0, #16
 80016e4:	f002 fc18 	bl	8003f18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}

080016ec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016f0:	4802      	ldr	r0, [pc, #8]	@ (80016fc <DMA1_Channel1_IRQHandler+0x10>)
 80016f2:	f002 f90f 	bl	8003914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	2000037c 	.word	0x2000037c

08001700 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001704:	4802      	ldr	r0, [pc, #8]	@ (8001710 <ADC1_IRQHandler+0x10>)
 8001706:	f000 ff8f 	bl	8002628 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000318 	.word	0x20000318

08001714 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt.
  */
void USB_HP_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001718:	4802      	ldr	r0, [pc, #8]	@ (8001724 <USB_HP_IRQHandler+0x10>)
 800171a:	f003 fc3f 	bl	8004f9c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20001c10 	.word	0x20001c10

08001728 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800172c:	4802      	ldr	r0, [pc, #8]	@ (8001738 <USB_LP_IRQHandler+0x10>)
 800172e:	f003 fc35 	bl	8004f9c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20001c10 	.word	0x20001c10

0800173c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001740:	4802      	ldr	r0, [pc, #8]	@ (800174c <TIM2_IRQHandler+0x10>)
 8001742:	f006 fef1 	bl	8008528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000430 	.word	0x20000430

08001750 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001754:	4802      	ldr	r0, [pc, #8]	@ (8001760 <I2C1_EV_IRQHandler+0x10>)
 8001756:	f002 fc9d 	bl	8004094 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	200003dc 	.word	0x200003dc

08001764 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001768:	4802      	ldr	r0, [pc, #8]	@ (8001774 <I2C1_ER_IRQHandler+0x10>)
 800176a:	f002 fcad 	bl	80040c8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	200003dc 	.word	0x200003dc

08001778 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return 1;
 800177c:	2301      	movs	r3, #1
}
 800177e:	4618      	mov	r0, r3
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <_kill>:

int _kill(int pid, int sig)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001792:	f00d fda7 	bl	800f2e4 <__errno>
 8001796:	4603      	mov	r3, r0
 8001798:	2216      	movs	r2, #22
 800179a:	601a      	str	r2, [r3, #0]
  return -1;
 800179c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <_exit>:

void _exit (int status)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017b0:	f04f 31ff 	mov.w	r1, #4294967295
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff ffe7 	bl	8001788 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017ba:	bf00      	nop
 80017bc:	e7fd      	b.n	80017ba <_exit+0x12>

080017be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b086      	sub	sp, #24
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	60f8      	str	r0, [r7, #12]
 80017c6:	60b9      	str	r1, [r7, #8]
 80017c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	e00a      	b.n	80017e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017d0:	f3af 8000 	nop.w
 80017d4:	4601      	mov	r1, r0
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	1c5a      	adds	r2, r3, #1
 80017da:	60ba      	str	r2, [r7, #8]
 80017dc:	b2ca      	uxtb	r2, r1
 80017de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	3301      	adds	r3, #1
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	dbf0      	blt.n	80017d0 <_read+0x12>
  }

  return len;
 80017ee:	687b      	ldr	r3, [r7, #4]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	e009      	b.n	800181e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	1c5a      	adds	r2, r3, #1
 800180e:	60ba      	str	r2, [r7, #8]
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f000 fa5a 	bl	8001ccc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	3301      	adds	r3, #1
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	697a      	ldr	r2, [r7, #20]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	429a      	cmp	r2, r3
 8001824:	dbf1      	blt.n	800180a <_write+0x12>
  }
  return len;
 8001826:	687b      	ldr	r3, [r7, #4]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <_close>:

int _close(int file)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001838:	f04f 33ff 	mov.w	r3, #4294967295
}
 800183c:	4618      	mov	r0, r3
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001858:	605a      	str	r2, [r3, #4]
  return 0;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <_isatty>:

int _isatty(int file)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001870:	2301      	movs	r3, #1
}
 8001872:	4618      	mov	r0, r3
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800187e:	b480      	push	{r7}
 8001880:	b085      	sub	sp, #20
 8001882:	af00      	add	r7, sp, #0
 8001884:	60f8      	str	r0, [r7, #12]
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018a0:	4a14      	ldr	r2, [pc, #80]	@ (80018f4 <_sbrk+0x5c>)
 80018a2:	4b15      	ldr	r3, [pc, #84]	@ (80018f8 <_sbrk+0x60>)
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018ac:	4b13      	ldr	r3, [pc, #76]	@ (80018fc <_sbrk+0x64>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d102      	bne.n	80018ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018b4:	4b11      	ldr	r3, [pc, #68]	@ (80018fc <_sbrk+0x64>)
 80018b6:	4a12      	ldr	r2, [pc, #72]	@ (8001900 <_sbrk+0x68>)
 80018b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ba:	4b10      	ldr	r3, [pc, #64]	@ (80018fc <_sbrk+0x64>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d207      	bcs.n	80018d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018c8:	f00d fd0c 	bl	800f2e4 <__errno>
 80018cc:	4603      	mov	r3, r0
 80018ce:	220c      	movs	r2, #12
 80018d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018d2:	f04f 33ff 	mov.w	r3, #4294967295
 80018d6:	e009      	b.n	80018ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018d8:	4b08      	ldr	r3, [pc, #32]	@ (80018fc <_sbrk+0x64>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018de:	4b07      	ldr	r3, [pc, #28]	@ (80018fc <_sbrk+0x64>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	4a05      	ldr	r2, [pc, #20]	@ (80018fc <_sbrk+0x64>)
 80018e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ea:	68fb      	ldr	r3, [r7, #12]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20030000 	.word	0x20030000
 80018f8:	00000400 	.word	0x00000400
 80018fc:	20000690 	.word	0x20000690
 8001900:	20002258 	.word	0x20002258

08001904 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001908:	4b24      	ldr	r3, [pc, #144]	@ (800199c <SystemInit+0x98>)
 800190a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800190e:	4a23      	ldr	r2, [pc, #140]	@ (800199c <SystemInit+0x98>)
 8001910:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001914:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001918:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001928:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800192c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001930:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001932:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800193c:	4b18      	ldr	r3, [pc, #96]	@ (80019a0 <SystemInit+0x9c>)
 800193e:	4013      	ands	r3, r2
 8001940:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001942:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001946:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800194a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800194e:	f023 0305 	bic.w	r3, r3, #5
 8001952:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001956:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800195a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800195e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001962:	f023 0301 	bic.w	r3, r3, #1
 8001966:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800196a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800196e:	4a0d      	ldr	r2, [pc, #52]	@ (80019a4 <SystemInit+0xa0>)
 8001970:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001972:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001976:	4a0b      	ldr	r2, [pc, #44]	@ (80019a4 <SystemInit+0xa0>)
 8001978:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800197a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001984:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001988:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800198a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800198e:	2200      	movs	r2, #0
 8001990:	619a      	str	r2, [r3, #24]
}
 8001992:	bf00      	nop
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00
 80019a0:	faf6fefb 	.word	0xfaf6fefb
 80019a4:	22041000 	.word	0x22041000

080019a8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80019a8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019aa:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ac:	3304      	adds	r3, #4

080019ae <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019ae:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019b0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80019b2:	d3f9      	bcc.n	80019a8 <CopyDataInit>
  bx lr
 80019b4:	4770      	bx	lr

080019b6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80019b6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80019b8:	3004      	adds	r0, #4

080019ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80019ba:	4288      	cmp	r0, r1
  bcc FillZerobss
 80019bc:	d3fb      	bcc.n	80019b6 <FillZerobss>
  bx lr
 80019be:	4770      	bx	lr

080019c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019c0:	480c      	ldr	r0, [pc, #48]	@ (80019f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80019c4:	f7ff ff9e 	bl	8001904 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80019c8:	480b      	ldr	r0, [pc, #44]	@ (80019f8 <LoopForever+0x6>)
 80019ca:	490c      	ldr	r1, [pc, #48]	@ (80019fc <LoopForever+0xa>)
 80019cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001a00 <LoopForever+0xe>)
 80019ce:	2300      	movs	r3, #0
 80019d0:	f7ff ffed 	bl	80019ae <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80019d4:	480b      	ldr	r0, [pc, #44]	@ (8001a04 <LoopForever+0x12>)
 80019d6:	490c      	ldr	r1, [pc, #48]	@ (8001a08 <LoopForever+0x16>)
 80019d8:	4a0c      	ldr	r2, [pc, #48]	@ (8001a0c <LoopForever+0x1a>)
 80019da:	2300      	movs	r3, #0
 80019dc:	f7ff ffe7 	bl	80019ae <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80019e0:	480b      	ldr	r0, [pc, #44]	@ (8001a10 <LoopForever+0x1e>)
 80019e2:	490c      	ldr	r1, [pc, #48]	@ (8001a14 <LoopForever+0x22>)
 80019e4:	2300      	movs	r3, #0
 80019e6:	f7ff ffe8 	bl	80019ba <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80019ea:	f00d fc81 	bl	800f2f0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80019ee:	f7ff fa8b 	bl	8000f08 <main>

080019f2 <LoopForever>:

LoopForever:
  b LoopForever
 80019f2:	e7fe      	b.n	80019f2 <LoopForever>
  ldr   r0, =_estack
 80019f4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80019f8:	20000008 	.word	0x20000008
 80019fc:	200002ec 	.word	0x200002ec
 8001a00:	08011600 	.word	0x08011600
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001a04:	20030000 	.word	0x20030000
 8001a08:	20030000 	.word	0x20030000
 8001a0c:	080118e4 	.word	0x080118e4
  INIT_BSS _sbss, _ebss
 8001a10:	200002ec 	.word	0x200002ec
 8001a14:	20002258 	.word	0x20002258

08001a18 <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a18:	e7fe      	b.n	8001a18 <AES1_IRQHandler>

08001a1a <LL_AHB2_GRP1_EnableClock>:
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b085      	sub	sp, #20
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a28:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
}
 8001a40:	bf00      	nop
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001a54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a58:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001a64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a68:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a70:	68fb      	ldr	r3, [r7, #12]
}
 8001a72:	bf00      	nop
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
	...

08001a80 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8001a8a:	f107 030c 	add.w	r3, r7, #12
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	60da      	str	r2, [r3, #12]
 8001a98:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001a9a:	2002      	movs	r0, #2
 8001a9c:	f7ff ffbd 	bl	8001a1a <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	4a12      	ldr	r2, [pc, #72]	@ (8001aec <BSP_LED_Init+0x6c>)
 8001aa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001aa8:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	4a0d      	ldr	r2, [pc, #52]	@ (8001af0 <BSP_LED_Init+0x70>)
 8001aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001abe:	f107 020c 	add.w	r2, r7, #12
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f002 f885 	bl	8003bd4 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	4a08      	ldr	r2, [pc, #32]	@ (8001af0 <BSP_LED_Init+0x70>)
 8001ace:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	4a05      	ldr	r2, [pc, #20]	@ (8001aec <BSP_LED_Init+0x6c>)
 8001ad6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ada:	2200      	movs	r2, #0
 8001adc:	4619      	mov	r1, r3
 8001ade:	f002 f9e9 	bl	8003eb4 <HAL_GPIO_WritePin>
}
 8001ae2:	bf00      	nop
 8001ae4:	3720      	adds	r7, #32
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	08011254 	.word	0x08011254
 8001af0:	2000000c 	.word	0x2000000c

08001af4 <BSP_LED_Toggle>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	4a07      	ldr	r2, [pc, #28]	@ (8001b20 <BSP_LED_Toggle+0x2c>)
 8001b02:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	4906      	ldr	r1, [pc, #24]	@ (8001b24 <BSP_LED_Toggle+0x30>)
 8001b0a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4610      	mov	r0, r2
 8001b12:	f002 f9e7 	bl	8003ee4 <HAL_GPIO_TogglePin>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	2000000c 	.word	0x2000000c
 8001b24:	08011254 	.word	0x08011254

08001b28 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	460a      	mov	r2, r1
 8001b32:	71fb      	strb	r3, [r7, #7]
 8001b34:	4613      	mov	r3, r2
 8001b36:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8001b38:	f107 030c 	add.w	r3, r7, #12
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d103      	bne.n	8001b56 <BSP_PB_Init+0x2e>
 8001b4e:	2004      	movs	r0, #4
 8001b50:	f7ff ff63 	bl	8001a1a <LL_AHB2_GRP1_EnableClock>
 8001b54:	e00c      	b.n	8001b70 <BSP_PB_Init+0x48>
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d103      	bne.n	8001b64 <BSP_PB_Init+0x3c>
 8001b5c:	2008      	movs	r0, #8
 8001b5e:	f7ff ff5c 	bl	8001a1a <LL_AHB2_GRP1_EnableClock>
 8001b62:	e005      	b.n	8001b70 <BSP_PB_Init+0x48>
 8001b64:	79fb      	ldrb	r3, [r7, #7]
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d102      	bne.n	8001b70 <BSP_PB_Init+0x48>
 8001b6a:	2008      	movs	r0, #8
 8001b6c:	f7ff ff55 	bl	8001a1a <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8001b70:	79bb      	ldrb	r3, [r7, #6]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d117      	bne.n	8001ba6 <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	4a20      	ldr	r2, [pc, #128]	@ (8001bfc <BSP_PB_Init+0xd4>)
 8001b7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b7e:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8001b80:	2300      	movs	r3, #0
 8001b82:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8001b84:	2301      	movs	r3, #1
 8001b86:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	4a1c      	ldr	r2, [pc, #112]	@ (8001c00 <BSP_PB_Init+0xd8>)
 8001b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b94:	f107 020c 	add.w	r2, r7, #12
 8001b98:	4611      	mov	r1, r2
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f002 f81a 	bl	8003bd4 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	f000 f965 	bl	8001e70 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8001ba6:	79bb      	ldrb	r3, [r7, #6]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d123      	bne.n	8001bf4 <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	4a13      	ldr	r2, [pc, #76]	@ (8001bfc <BSP_PB_Init+0xd4>)
 8001bb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bb4:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8001bba:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001bbe:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	4a0f      	ldr	r2, [pc, #60]	@ (8001c00 <BSP_PB_Init+0xd8>)
 8001bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc8:	f107 020c 	add.w	r2, r7, #12
 8001bcc:	4611      	mov	r1, r2
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f002 f800 	bl	8003bd4 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	4a0b      	ldr	r2, [pc, #44]	@ (8001c04 <BSP_PB_Init+0xdc>)
 8001bd8:	5cd3      	ldrb	r3, [r2, r3]
 8001bda:	b25b      	sxtb	r3, r3
 8001bdc:	2200      	movs	r2, #0
 8001bde:	210f      	movs	r1, #15
 8001be0:	4618      	mov	r0, r3
 8001be2:	f001 fce0 	bl	80035a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	4a06      	ldr	r2, [pc, #24]	@ (8001c04 <BSP_PB_Init+0xdc>)
 8001bea:	5cd3      	ldrb	r3, [r2, r3]
 8001bec:	b25b      	sxtb	r3, r3
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f001 fcf3 	bl	80035da <HAL_NVIC_EnableIRQ>
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	3720      	adds	r7, #32
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	0801125c 	.word	0x0801125c
 8001c00:	20000018 	.word	0x20000018
 8001c04:	08011264 	.word	0x08011264

08001c08 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	6039      	str	r1, [r7, #0]
 8001c12:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d903      	bls.n	8001c26 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001c1e:	f06f 0301 	mvn.w	r3, #1
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	e018      	b.n	8001c58 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	2294      	movs	r2, #148	@ 0x94
 8001c2a:	fb02 f303 	mul.w	r3, r2, r3
 8001c2e:	4a0d      	ldr	r2, [pc, #52]	@ (8001c64 <BSP_COM_Init+0x5c>)
 8001c30:	4413      	add	r3, r2
 8001c32:	4618      	mov	r0, r3
 8001c34:	f000 f866 	bl	8001d04 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	2294      	movs	r2, #148	@ 0x94
 8001c3c:	fb02 f303 	mul.w	r3, r2, r3
 8001c40:	4a08      	ldr	r2, [pc, #32]	@ (8001c64 <BSP_COM_Init+0x5c>)
 8001c42:	4413      	add	r3, r2
 8001c44:	6839      	ldr	r1, [r7, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 f80e 	bl	8001c68 <MX_LPUART1_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d002      	beq.n	8001c58 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8001c52:	f06f 0303 	mvn.w	r3, #3
 8001c56:	e000      	b.n	8001c5a <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8001c58:	68fb      	ldr	r3, [r7, #12]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000694 	.word	0x20000694

08001c68 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001c72:	4b15      	ldr	r3, [pc, #84]	@ (8001cc8 <MX_LPUART1_Init+0x60>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	220c      	movs	r2, #12
 8001c86:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	895b      	ldrh	r3, [r3, #10]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	891b      	ldrh	r3, [r3, #8]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	899b      	ldrh	r3, [r3, #12]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001cb4:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f006 ffd8 	bl	8008c6c <HAL_UART_Init>
 8001cbc:	4603      	mov	r3, r0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000024 	.word	0x20000024

08001ccc <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001cd4:	4b09      	ldr	r3, [pc, #36]	@ (8001cfc <__io_putchar+0x30>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	2394      	movs	r3, #148	@ 0x94
 8001cdc:	fb02 f303 	mul.w	r3, r2, r3
 8001ce0:	4a07      	ldr	r2, [pc, #28]	@ (8001d00 <__io_putchar+0x34>)
 8001ce2:	1898      	adds	r0, r3, r2
 8001ce4:	1d39      	adds	r1, r7, #4
 8001ce6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cea:	2201      	movs	r2, #1
 8001cec:	f007 f818 	bl	8008d20 <HAL_UART_Transmit>
  return ch;
 8001cf0:	687b      	ldr	r3, [r7, #4]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000728 	.word	0x20000728
 8001d00:	20000694 	.word	0x20000694

08001d04 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001d0c:	2002      	movs	r0, #2
 8001d0e:	f7ff fe84 	bl	8001a1a <LL_AHB2_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
 8001d12:	2002      	movs	r0, #2
 8001d14:	f7ff fe81 	bl	8001a1a <LL_AHB2_GRP1_EnableClock>

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001d18:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001d1c:	f7ff fe96 	bl	8001a4c <LL_APB2_GRP1_EnableClock>

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001d20:	2340      	movs	r3, #64	@ 0x40
 8001d22:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001d24:	2302      	movs	r3, #2
 8001d26:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001d30:	2307      	movs	r3, #7
 8001d32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001d34:	f107 030c 	add.w	r3, r7, #12
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4809      	ldr	r0, [pc, #36]	@ (8001d60 <COM1_MspInit+0x5c>)
 8001d3c:	f001 ff4a 	bl	8003bd4 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001d40:	2380      	movs	r3, #128	@ 0x80
 8001d42:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001d44:	2302      	movs	r3, #2
 8001d46:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001d48:	2307      	movs	r3, #7
 8001d4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001d4c:	f107 030c 	add.w	r3, r7, #12
 8001d50:	4619      	mov	r1, r3
 8001d52:	4803      	ldr	r0, [pc, #12]	@ (8001d60 <COM1_MspInit+0x5c>)
 8001d54:	f001 ff3e 	bl	8003bd4 <HAL_GPIO_Init>
}
 8001d58:	bf00      	nop
 8001d5a:	3720      	adds	r7, #32
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	48000400 	.word	0x48000400

08001d64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001da0 <HAL_Init+0x3c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a0b      	ldr	r2, [pc, #44]	@ (8001da0 <HAL_Init+0x3c>)
 8001d74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d78:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d7a:	2003      	movs	r0, #3
 8001d7c:	f001 fc08 	bl	8003590 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d80:	2000      	movs	r0, #0
 8001d82:	f000 f80f 	bl	8001da4 <HAL_InitTick>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d002      	beq.n	8001d92 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	71fb      	strb	r3, [r7, #7]
 8001d90:	e001      	b.n	8001d96 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d92:	f7ff fb8c 	bl	80014ae <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d96:	79fb      	ldrb	r3, [r7, #7]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	58004000 	.word	0x58004000

08001da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001dac:	2300      	movs	r3, #0
 8001dae:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001db0:	4b17      	ldr	r3, [pc, #92]	@ (8001e10 <HAL_InitTick+0x6c>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d024      	beq.n	8001e02 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001db8:	f005 fdf8 	bl	80079ac <HAL_RCC_GetHCLKFreq>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	4b14      	ldr	r3, [pc, #80]	@ (8001e10 <HAL_InitTick+0x6c>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dc8:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f001 fc10 	bl	80035f6 <HAL_SYSTICK_Config>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10f      	bne.n	8001dfc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b0f      	cmp	r3, #15
 8001de0:	d809      	bhi.n	8001df6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de2:	2200      	movs	r2, #0
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	f04f 30ff 	mov.w	r0, #4294967295
 8001dea:	f001 fbdc 	bl	80035a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dee:	4a09      	ldr	r2, [pc, #36]	@ (8001e14 <HAL_InitTick+0x70>)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6013      	str	r3, [r2, #0]
 8001df4:	e007      	b.n	8001e06 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	73fb      	strb	r3, [r7, #15]
 8001dfa:	e004      	b.n	8001e06 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	73fb      	strb	r3, [r7, #15]
 8001e00:	e001      	b.n	8001e06 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	2000002c 	.word	0x2000002c
 8001e14:	20000028 	.word	0x20000028

08001e18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e1c:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <HAL_IncTick+0x20>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	461a      	mov	r2, r3
 8001e22:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <HAL_IncTick+0x24>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4413      	add	r3, r2
 8001e28:	4a04      	ldr	r2, [pc, #16]	@ (8001e3c <HAL_IncTick+0x24>)
 8001e2a:	6013      	str	r3, [r2, #0]
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	2000002c 	.word	0x2000002c
 8001e3c:	2000072c 	.word	0x2000072c

08001e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return uwTick;
 8001e44:	4b03      	ldr	r3, [pc, #12]	@ (8001e54 <HAL_GetTick+0x14>)
 8001e46:	681b      	ldr	r3, [r3, #0]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	2000072c 	.word	0x2000072c

08001e58 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001e5c:	4b03      	ldr	r3, [pc, #12]	@ (8001e6c <HAL_GetTickPrio+0x14>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	20000028 	.word	0x20000028

08001e70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e78:	f7ff ffe2 	bl	8001e40 <HAL_GetTick>
 8001e7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e88:	d005      	beq.n	8001e96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb4 <HAL_Delay+0x44>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4413      	add	r3, r2
 8001e94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e96:	bf00      	nop
 8001e98:	f7ff ffd2 	bl	8001e40 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d8f7      	bhi.n	8001e98 <HAL_Delay+0x28>
  {
  }
}
 8001ea8:	bf00      	nop
 8001eaa:	bf00      	nop
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	2000002c 	.word	0x2000002c

08001eb8 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b087      	sub	sp, #28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
 8001f2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	3360      	adds	r3, #96	@ 0x60
 8001f32:	461a      	mov	r2, r3
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	4b08      	ldr	r3, [pc, #32]	@ (8001f64 <LL_ADC_SetOffset+0x44>)
 8001f42:	4013      	ands	r3, r2
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f58:	bf00      	nop
 8001f5a:	371c      	adds	r7, #28
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	03fff000 	.word	0x03fff000

08001f68 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3360      	adds	r3, #96	@ 0x60
 8001f76:	461a      	mov	r2, r3
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b087      	sub	sp, #28
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	3360      	adds	r3, #96	@ 0x60
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001fbe:	bf00      	nop
 8001fc0:	371c      	adds	r7, #28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001fe2:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b087      	sub	sp, #28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	3330      	adds	r3, #48	@ 0x30
 8002000:	461a      	mov	r2, r3
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	0a1b      	lsrs	r3, r3, #8
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	f003 030c 	and.w	r3, r3, #12
 800200c:	4413      	add	r3, r2
 800200e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f003 031f 	and.w	r3, r3, #31
 800201a:	211f      	movs	r1, #31
 800201c:	fa01 f303 	lsl.w	r3, r1, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	401a      	ands	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	0e9b      	lsrs	r3, r3, #26
 8002028:	f003 011f 	and.w	r1, r3, #31
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	f003 031f 	and.w	r3, r3, #31
 8002032:	fa01 f303 	lsl.w	r3, r1, r3
 8002036:	431a      	orrs	r2, r3
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800203c:	bf00      	nop
 800203e:	371c      	adds	r7, #28
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	f003 0303 	and.w	r3, r3, #3
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002058:	4618      	mov	r0, r3
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002070:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002078:	2301      	movs	r3, #1
 800207a:	e000      	b.n	800207e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800208a:	b480      	push	{r7}
 800208c:	b087      	sub	sp, #28
 800208e:	af00      	add	r7, sp, #0
 8002090:	60f8      	str	r0, [r7, #12]
 8002092:	60b9      	str	r1, [r7, #8]
 8002094:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	3314      	adds	r3, #20
 800209a:	461a      	mov	r2, r3
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	0e5b      	lsrs	r3, r3, #25
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	f003 0304 	and.w	r3, r3, #4
 80020a6:	4413      	add	r3, r2
 80020a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	0d1b      	lsrs	r3, r3, #20
 80020b2:	f003 031f 	and.w	r3, r3, #31
 80020b6:	2107      	movs	r1, #7
 80020b8:	fa01 f303 	lsl.w	r3, r1, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	401a      	ands	r2, r3
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	0d1b      	lsrs	r3, r3, #20
 80020c4:	f003 031f 	and.w	r3, r3, #31
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	fa01 f303 	lsl.w	r3, r1, r3
 80020ce:	431a      	orrs	r2, r3
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80020d4:	bf00      	nop
 80020d6:	371c      	adds	r7, #28
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f8:	43db      	mvns	r3, r3
 80020fa:	401a      	ands	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f003 0318 	and.w	r3, r3, #24
 8002102:	4908      	ldr	r1, [pc, #32]	@ (8002124 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002104:	40d9      	lsrs	r1, r3
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	400b      	ands	r3, r1
 800210a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800210e:	431a      	orrs	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002116:	bf00      	nop
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	0007ffff 	.word	0x0007ffff

08002128 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002138:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6093      	str	r3, [r2, #8]
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800215c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002160:	d101      	bne.n	8002166 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002162:	2301      	movs	r3, #1
 8002164:	e000      	b.n	8002168 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002184:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002188:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80021b0:	d101      	bne.n	80021b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021b2:	2301      	movs	r3, #1
 80021b4:	e000      	b.n	80021b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80021d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021d8:	f043 0201 	orr.w	r2, r3, #1
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <LL_ADC_IsEnabled+0x18>
 8002200:	2301      	movs	r3, #1
 8002202:	e000      	b.n	8002206 <LL_ADC_IsEnabled+0x1a>
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002222:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002226:	f043 0204 	orr.w	r2, r3, #4
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	2b04      	cmp	r3, #4
 800224c:	d101      	bne.n	8002252 <LL_ADC_REG_IsConversionOngoing+0x18>
 800224e:	2301      	movs	r3, #1
 8002250:	e000      	b.n	8002254 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 0308 	and.w	r3, r3, #8
 8002270:	2b08      	cmp	r3, #8
 8002272:	d101      	bne.n	8002278 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002274:	2301      	movs	r3, #1
 8002276:	e000      	b.n	800227a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
	...

08002288 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b088      	sub	sp, #32
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8002294:	2300      	movs	r3, #0
 8002296:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002298:	2300      	movs	r3, #0
 800229a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e12e      	b.n	8002504 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d109      	bne.n	80022c8 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f7ff f901 	bl	80014bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff ff3d 	bl	800214c <LL_ADC_IsDeepPowerDownEnabled>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d004      	beq.n	80022e2 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff ff23 	bl	8002128 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff ff58 	bl	800219c <LL_ADC_IsInternalRegulatorEnabled>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d115      	bne.n	800231e <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff ff3c 	bl	8002174 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022fc:	4b83      	ldr	r3, [pc, #524]	@ (800250c <HAL_ADC_Init+0x284>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	099b      	lsrs	r3, r3, #6
 8002302:	4a83      	ldr	r2, [pc, #524]	@ (8002510 <HAL_ADC_Init+0x288>)
 8002304:	fba2 2303 	umull	r2, r3, r2, r3
 8002308:	099b      	lsrs	r3, r3, #6
 800230a:	3301      	adds	r3, #1
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002310:	e002      	b.n	8002318 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	3b01      	subs	r3, #1
 8002316:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1f9      	bne.n	8002312 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff ff3a 	bl	800219c <LL_ADC_IsInternalRegulatorEnabled>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10d      	bne.n	800234a <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002332:	f043 0210 	orr.w	r2, r3, #16
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800233e:	f043 0201 	orr.w	r2, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff ff73 	bl	800223a <LL_ADC_REG_IsConversionOngoing>
 8002354:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800235a:	f003 0310 	and.w	r3, r3, #16
 800235e:	2b00      	cmp	r3, #0
 8002360:	f040 80c7 	bne.w	80024f2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	2b00      	cmp	r3, #0
 8002368:	f040 80c3 	bne.w	80024f2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002370:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002374:	f043 0202 	orr.w	r2, r3, #2
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff ff33 	bl	80021ec <LL_ADC_IsEnabled>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10b      	bne.n	80023a4 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800238c:	4861      	ldr	r0, [pc, #388]	@ (8002514 <HAL_ADC_Init+0x28c>)
 800238e:	f7ff ff2d 	bl	80021ec <LL_ADC_IsEnabled>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d105      	bne.n	80023a4 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	4619      	mov	r1, r3
 800239e:	485e      	ldr	r0, [pc, #376]	@ (8002518 <HAL_ADC_Init+0x290>)
 80023a0:	f7ff fd8a 	bl	8001eb8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	7e5b      	ldrb	r3, [r3, #25]
 80023a8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023ae:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80023b4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80023ba:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023c2:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 80023c4:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d106      	bne.n	80023e4 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023da:	3b01      	subs	r3, #1
 80023dc:	045b      	lsls	r3, r3, #17
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d009      	beq.n	8002400 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68da      	ldr	r2, [r3, #12]
 8002406:	4b45      	ldr	r3, [pc, #276]	@ (800251c <HAL_ADC_Init+0x294>)
 8002408:	4013      	ands	r3, r2
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6812      	ldr	r2, [r2, #0]
 800240e:	69b9      	ldr	r1, [r7, #24]
 8002410:	430b      	orrs	r3, r1
 8002412:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff ff0e 	bl	800223a <LL_ADC_REG_IsConversionOngoing>
 800241e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff ff1b 	bl	8002260 <LL_ADC_INJ_IsConversionOngoing>
 800242a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d13d      	bne.n	80024ae <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d13a      	bne.n	80024ae <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800243c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002444:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002454:	f023 0302 	bic.w	r3, r3, #2
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6812      	ldr	r2, [r2, #0]
 800245c:	69b9      	ldr	r1, [r7, #24]
 800245e:	430b      	orrs	r3, r1
 8002460:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002468:	2b01      	cmp	r3, #1
 800246a:	d118      	bne.n	800249e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002476:	f023 0304 	bic.w	r3, r3, #4
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002482:	4311      	orrs	r1, r2
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002488:	4311      	orrs	r1, r2
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800248e:	430a      	orrs	r2, r1
 8002490:	431a      	orrs	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 0201 	orr.w	r2, r2, #1
 800249a:	611a      	str	r2, [r3, #16]
 800249c:	e007      	b.n	80024ae <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	691a      	ldr	r2, [r3, #16]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 0201 	bic.w	r2, r2, #1
 80024ac:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d10c      	bne.n	80024d0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024bc:	f023 010f 	bic.w	r1, r3, #15
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	1e5a      	subs	r2, r3, #1
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80024ce:	e007      	b.n	80024e0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 020f 	bic.w	r2, r2, #15
 80024de:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024e4:	f023 0303 	bic.w	r3, r3, #3
 80024e8:	f043 0201 	orr.w	r2, r3, #1
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80024f0:	e007      	b.n	8002502 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024f6:	f043 0210 	orr.w	r2, r3, #16
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002502:	7ffb      	ldrb	r3, [r7, #31]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3720      	adds	r7, #32
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	20000008 	.word	0x20000008
 8002510:	053e2d63 	.word	0x053e2d63
 8002514:	50040000 	.word	0x50040000
 8002518:	50040300 	.word	0x50040300
 800251c:	fff0c007 	.word	0xfff0c007

08002520 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff fe82 	bl	800223a <LL_ADC_REG_IsConversionOngoing>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d167      	bne.n	800260c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002542:	2b01      	cmp	r3, #1
 8002544:	d101      	bne.n	800254a <HAL_ADC_Start_DMA+0x2a>
 8002546:	2302      	movs	r3, #2
 8002548:	e063      	b.n	8002612 <HAL_ADC_Start_DMA+0xf2>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 fe0c 	bl	8003170 <ADC_Enable>
 8002558:	4603      	mov	r3, r0
 800255a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800255c:	7dfb      	ldrb	r3, [r7, #23]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d14f      	bne.n	8002602 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002566:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800256a:	f023 0301 	bic.w	r3, r3, #1
 800256e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800257a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d006      	beq.n	8002590 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002586:	f023 0206 	bic.w	r2, r3, #6
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	659a      	str	r2, [r3, #88]	@ 0x58
 800258e:	e002      	b.n	8002596 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800259a:	4a20      	ldr	r2, [pc, #128]	@ (800261c <HAL_ADC_Start_DMA+0xfc>)
 800259c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002620 <HAL_ADC_Start_DMA+0x100>)
 80025a4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025aa:	4a1e      	ldr	r2, [pc, #120]	@ (8002624 <HAL_ADC_Start_DMA+0x104>)
 80025ac:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	221c      	movs	r2, #28
 80025b4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f042 0210 	orr.w	r2, r2, #16
 80025cc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68da      	ldr	r2, [r3, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f042 0201 	orr.w	r2, r2, #1
 80025dc:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	3340      	adds	r3, #64	@ 0x40
 80025e8:	4619      	mov	r1, r3
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f001 f8b7 	bl	8003760 <HAL_DMA_Start_IT>
 80025f2:	4603      	mov	r3, r0
 80025f4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff fe09 	bl	8002212 <LL_ADC_REG_StartConversion>
 8002600:	e006      	b.n	8002610 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800260a:	e001      	b.n	8002610 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800260c:	2302      	movs	r3, #2
 800260e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002610:	7dfb      	ldrb	r3, [r7, #23]
}
 8002612:	4618      	mov	r0, r3
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	08003265 	.word	0x08003265
 8002620:	0800333d 	.word	0x0800333d
 8002624:	08003359 	.word	0x08003359

08002628 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b088      	sub	sp, #32
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002630:	2300      	movs	r3, #0
 8002632:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d017      	beq.n	800267e <HAL_ADC_IRQHandler+0x56>
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d012      	beq.n	800267e <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800265c:	f003 0310 	and.w	r3, r3, #16
 8002660:	2b00      	cmp	r3, #0
 8002662:	d105      	bne.n	8002670 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002668:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 feb3 	bl	80033dc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2202      	movs	r2, #2
 800267c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b00      	cmp	r3, #0
 8002686:	d004      	beq.n	8002692 <HAL_ADC_IRQHandler+0x6a>
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	f003 0304 	and.w	r3, r3, #4
 800268e:	2b00      	cmp	r3, #0
 8002690:	d109      	bne.n	80026a6 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002698:	2b00      	cmp	r3, #0
 800269a:	d05d      	beq.n	8002758 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d058      	beq.n	8002758 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026aa:	f003 0310 	and.w	r3, r3, #16
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d105      	bne.n	80026be <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026b6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff fc81 	bl	8001fca <LL_ADC_REG_IsTriggerSourceSWStart>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d03d      	beq.n	800274a <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026dc:	d035      	beq.n	800274a <HAL_ADC_IRQHandler+0x122>
#endif /* ADC_SUPPORT_2_5_MSPS */
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0308 	and.w	r3, r3, #8
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	d12e      	bne.n	800274a <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff fda2 	bl	800223a <LL_ADC_REG_IsConversionOngoing>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d11a      	bne.n	8002732 <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	685a      	ldr	r2, [r3, #4]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 020c 	bic.w	r2, r2, #12
 800270a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002710:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800271c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d112      	bne.n	800274a <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002728:	f043 0201 	orr.w	r2, r3, #1
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002730:	e00b      	b.n	800274a <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002736:	f043 0210 	orr.w	r2, r3, #16
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002742:	f043 0201 	orr.w	r2, r3, #1
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f922 	bl	8002994 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	220c      	movs	r2, #12
 8002756:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	f003 0320 	and.w	r3, r3, #32
 800275e:	2b00      	cmp	r3, #0
 8002760:	d004      	beq.n	800276c <HAL_ADC_IRQHandler+0x144>
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f003 0320 	and.w	r3, r3, #32
 8002768:	2b00      	cmp	r3, #0
 800276a:	d109      	bne.n	8002780 <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002772:	2b00      	cmp	r3, #0
 8002774:	d074      	beq.n	8002860 <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800277c:	2b00      	cmp	r3, #0
 800277e:	d06f      	beq.n	8002860 <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002784:	f003 0310 	and.w	r3, r3, #16
 8002788:	2b00      	cmp	r3, #0
 800278a:	d105      	bne.n	8002798 <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002790:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff fc61 	bl	8002064 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80027a2:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff fc0e 	bl	8001fca <LL_ADC_REG_IsTriggerSourceSWStart>
 80027ae:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d049      	beq.n	8002852 <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d007      	beq.n	80027d8 <HAL_ADC_IRQHandler+0x1b0>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d041      	beq.n	8002852 <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d13c      	bne.n	8002852 <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027e2:	2b40      	cmp	r3, #64	@ 0x40
 80027e4:	d135      	bne.n	8002852 <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d12e      	bne.n	8002852 <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff fd31 	bl	8002260 <LL_ADC_INJ_IsConversionOngoing>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d11a      	bne.n	800283a <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002812:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002818:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002828:	2b00      	cmp	r3, #0
 800282a:	d112      	bne.n	8002852 <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002830:	f043 0201 	orr.w	r2, r3, #1
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	655a      	str	r2, [r3, #84]	@ 0x54
 8002838:	e00b      	b.n	8002852 <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800283e:	f043 0210 	orr.w	r2, r3, #16
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800284a:	f043 0201 	orr.w	r2, r3, #1
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 fd9a 	bl	800338c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2260      	movs	r2, #96	@ 0x60
 800285e:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002866:	2b00      	cmp	r3, #0
 8002868:	d011      	beq.n	800288e <HAL_ADC_IRQHandler+0x266>
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00c      	beq.n	800288e <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002878:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 f89b 	bl	80029bc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2280      	movs	r2, #128	@ 0x80
 800288c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002894:	2b00      	cmp	r3, #0
 8002896:	d012      	beq.n	80028be <HAL_ADC_IRQHandler+0x296>
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00d      	beq.n	80028be <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 fd80 	bl	80033b4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028bc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d012      	beq.n	80028ee <HAL_ADC_IRQHandler+0x2c6>
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00d      	beq.n	80028ee <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 fd72 	bl	80033c8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028ec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	f003 0310 	and.w	r3, r3, #16
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d02b      	beq.n	8002950 <HAL_ADC_IRQHandler+0x328>
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f003 0310 	and.w	r3, r3, #16
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d026      	beq.n	8002950 <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002906:	2b00      	cmp	r3, #0
 8002908:	d102      	bne.n	8002910 <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 800290a:	2301      	movs	r3, #1
 800290c:	61fb      	str	r3, [r7, #28]
 800290e:	e009      	b.n	8002924 <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff fb97 	bl	8002048 <LL_ADC_REG_GetDMATransfer>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 8002920:	2301      	movs	r3, #1
 8002922:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d10e      	bne.n	8002948 <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800292e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800293a:	f043 0202 	orr.w	r2, r3, #2
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f844 	bl	80029d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2210      	movs	r2, #16
 800294e:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002956:	2b00      	cmp	r3, #0
 8002958:	d018      	beq.n	800298c <HAL_ADC_IRQHandler+0x364>
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002960:	2b00      	cmp	r3, #0
 8002962:	d013      	beq.n	800298c <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002968:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002974:	f043 0208 	orr.w	r2, r3, #8
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002984:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 fd0a 	bl	80033a0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 800298c:	bf00      	nop
 800298e:	3720      	adds	r7, #32
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b0b6      	sub	sp, #216	@ 0xd8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029ee:	2300      	movs	r3, #0
 80029f0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80029f4:	2300      	movs	r3, #0
 80029f6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d101      	bne.n	8002a06 <HAL_ADC_ConfigChannel+0x22>
 8002a02:	2302      	movs	r3, #2
 8002a04:	e39f      	b.n	8003146 <HAL_ADC_ConfigChannel+0x762>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff fc11 	bl	800223a <LL_ADC_REG_IsConversionOngoing>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f040 8384 	bne.w	8003128 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6818      	ldr	r0, [r3, #0]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	6859      	ldr	r1, [r3, #4]
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	f7ff fadf 	bl	8001ff0 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff fbff 	bl	800223a <LL_ADC_REG_IsConversionOngoing>
 8002a3c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff fc0b 	bl	8002260 <LL_ADC_INJ_IsConversionOngoing>
 8002a4a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a4e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f040 81a6 	bne.w	8002da4 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f040 81a1 	bne.w	8002da4 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6818      	ldr	r0, [r3, #0]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	6819      	ldr	r1, [r3, #0]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	f7ff fb0b 	bl	800208a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	695a      	ldr	r2, [r3, #20]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	08db      	lsrs	r3, r3, #3
 8002a80:	f003 0303 	and.w	r3, r3, #3
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d00a      	beq.n	8002aac <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6818      	ldr	r0, [r3, #0]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	6919      	ldr	r1, [r3, #16]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002aa6:	f7ff fa3b 	bl	8001f20 <LL_ADC_SetOffset>
 8002aaa:	e17b      	b.n	8002da4 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff fa58 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10a      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0xf4>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff fa4d 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	0e9b      	lsrs	r3, r3, #26
 8002ad2:	f003 021f 	and.w	r2, r3, #31
 8002ad6:	e01e      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x132>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2100      	movs	r1, #0
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff fa42 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002aee:	fa93 f3a3 	rbit	r3, r3
 8002af2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002af6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002afa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002afe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8002b06:	2320      	movs	r3, #32
 8002b08:	e004      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8002b0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b0e:	fab3 f383 	clz	r3, r3
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	461a      	mov	r2, r3
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d105      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x14a>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	0e9b      	lsrs	r3, r3, #26
 8002b28:	f003 031f 	and.w	r3, r3, #31
 8002b2c:	e018      	b.n	8002b60 <HAL_ADC_ConfigChannel+0x17c>
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b36:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b3a:	fa93 f3a3 	rbit	r3, r3
 8002b3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002b42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002b4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8002b52:	2320      	movs	r3, #32
 8002b54:	e004      	b.n	8002b60 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8002b56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b5a:	fab3 f383 	clz	r3, r3
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d106      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff fa11 	bl	8001f94 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2101      	movs	r1, #1
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff f9f5 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10a      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x1ba>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff f9ea 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 8002b94:	4603      	mov	r3, r0
 8002b96:	0e9b      	lsrs	r3, r3, #26
 8002b98:	f003 021f 	and.w	r2, r3, #31
 8002b9c:	e01e      	b.n	8002bdc <HAL_ADC_ConfigChannel+0x1f8>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff f9df 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 8002baa:	4603      	mov	r3, r0
 8002bac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002bb4:	fa93 f3a3 	rbit	r3, r3
 8002bb8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002bbc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002bc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002bc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8002bcc:	2320      	movs	r3, #32
 8002bce:	e004      	b.n	8002bda <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8002bd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002bd4:	fab3 f383 	clz	r3, r3
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	461a      	mov	r2, r3
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d105      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x210>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	0e9b      	lsrs	r3, r3, #26
 8002bee:	f003 031f 	and.w	r3, r3, #31
 8002bf2:	e018      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x242>
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c00:	fa93 f3a3 	rbit	r3, r3
 8002c04:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002c08:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002c10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8002c18:	2320      	movs	r3, #32
 8002c1a:	e004      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8002c1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c20:	fab3 f383 	clz	r3, r3
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d106      	bne.n	8002c38 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	2101      	movs	r1, #1
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff f9ae 	bl	8001f94 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2102      	movs	r1, #2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff f992 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 8002c44:	4603      	mov	r3, r0
 8002c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10a      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x280>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2102      	movs	r1, #2
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff f987 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	0e9b      	lsrs	r3, r3, #26
 8002c5e:	f003 021f 	and.w	r2, r3, #31
 8002c62:	e01e      	b.n	8002ca2 <HAL_ADC_ConfigChannel+0x2be>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2102      	movs	r1, #2
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff f97c 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 8002c70:	4603      	mov	r3, r0
 8002c72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c7a:	fa93 f3a3 	rbit	r3, r3
 8002c7e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002c82:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002c8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8002c92:	2320      	movs	r3, #32
 8002c94:	e004      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002c96:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c9a:	fab3 f383 	clz	r3, r3
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d105      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x2d6>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	0e9b      	lsrs	r3, r3, #26
 8002cb4:	f003 031f 	and.w	r3, r3, #31
 8002cb8:	e016      	b.n	8002ce8 <HAL_ADC_ConfigChannel+0x304>
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002cc6:	fa93 f3a3 	rbit	r3, r3
 8002cca:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002ccc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002cce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002cd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8002cda:	2320      	movs	r3, #32
 8002cdc:	e004      	b.n	8002ce8 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8002cde:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ce2:	fab3 f383 	clz	r3, r3
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d106      	bne.n	8002cfa <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	2102      	movs	r1, #2
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff f94d 	bl	8001f94 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2103      	movs	r1, #3
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff f931 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 8002d06:	4603      	mov	r3, r0
 8002d08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10a      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x342>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2103      	movs	r1, #3
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff f926 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	0e9b      	lsrs	r3, r3, #26
 8002d20:	f003 021f 	and.w	r2, r3, #31
 8002d24:	e017      	b.n	8002d56 <HAL_ADC_ConfigChannel+0x372>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2103      	movs	r1, #3
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff f91b 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 8002d32:	4603      	mov	r3, r0
 8002d34:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d38:	fa93 f3a3 	rbit	r3, r3
 8002d3c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002d3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d40:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002d42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8002d48:	2320      	movs	r3, #32
 8002d4a:	e003      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8002d4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d4e:	fab3 f383 	clz	r3, r3
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	461a      	mov	r2, r3
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d105      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x38a>
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	0e9b      	lsrs	r3, r3, #26
 8002d68:	f003 031f 	and.w	r3, r3, #31
 8002d6c:	e011      	b.n	8002d92 <HAL_ADC_ConfigChannel+0x3ae>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d76:	fa93 f3a3 	rbit	r3, r3
 8002d7a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002d7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002d80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8002d86:	2320      	movs	r3, #32
 8002d88:	e003      	b.n	8002d92 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8002d8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d8c:	fab3 f383 	clz	r3, r3
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d106      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2103      	movs	r1, #3
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff f8f8 	bl	8001f94 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff fa1f 	bl	80021ec <LL_ADC_IsEnabled>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f040 81c2 	bne.w	800313a <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6818      	ldr	r0, [r3, #0]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	6819      	ldr	r1, [r3, #0]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	f7ff f98c 	bl	80020e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	4a8e      	ldr	r2, [pc, #568]	@ (8003008 <HAL_ADC_ConfigChannel+0x624>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	f040 8130 	bne.w	8003034 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10b      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x418>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	0e9b      	lsrs	r3, r3, #26
 8002dea:	3301      	adds	r3, #1
 8002dec:	f003 031f 	and.w	r3, r3, #31
 8002df0:	2b09      	cmp	r3, #9
 8002df2:	bf94      	ite	ls
 8002df4:	2301      	movls	r3, #1
 8002df6:	2300      	movhi	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	e019      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x44c>
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e04:	fa93 f3a3 	rbit	r3, r3
 8002e08:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002e0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e0c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002e0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8002e14:	2320      	movs	r3, #32
 8002e16:	e003      	b.n	8002e20 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8002e18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e1a:	fab3 f383 	clz	r3, r3
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	3301      	adds	r3, #1
 8002e22:	f003 031f 	and.w	r3, r3, #31
 8002e26:	2b09      	cmp	r3, #9
 8002e28:	bf94      	ite	ls
 8002e2a:	2301      	movls	r3, #1
 8002e2c:	2300      	movhi	r3, #0
 8002e2e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d079      	beq.n	8002f28 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d107      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x46c>
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	0e9b      	lsrs	r3, r3, #26
 8002e46:	3301      	adds	r3, #1
 8002e48:	069b      	lsls	r3, r3, #26
 8002e4a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e4e:	e015      	b.n	8002e7c <HAL_ADC_ConfigChannel+0x498>
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e58:	fa93 f3a3 	rbit	r3, r3
 8002e5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002e5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e60:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002e62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002e68:	2320      	movs	r3, #32
 8002e6a:	e003      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002e6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e6e:	fab3 f383 	clz	r3, r3
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	3301      	adds	r3, #1
 8002e76:	069b      	lsls	r3, r3, #26
 8002e78:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d109      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x4b8>
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	0e9b      	lsrs	r3, r3, #26
 8002e8e:	3301      	adds	r3, #1
 8002e90:	f003 031f 	and.w	r3, r3, #31
 8002e94:	2101      	movs	r1, #1
 8002e96:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9a:	e017      	b.n	8002ecc <HAL_ADC_ConfigChannel+0x4e8>
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ea4:	fa93 f3a3 	rbit	r3, r3
 8002ea8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002eaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002eac:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002eae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002eb4:	2320      	movs	r3, #32
 8002eb6:	e003      	b.n	8002ec0 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002eb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002eba:	fab3 f383 	clz	r3, r3
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	f003 031f 	and.w	r3, r3, #31
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ecc:	ea42 0103 	orr.w	r1, r2, r3
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10a      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x50e>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	0e9b      	lsrs	r3, r3, #26
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	f003 021f 	and.w	r2, r3, #31
 8002ee8:	4613      	mov	r3, r2
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	4413      	add	r3, r2
 8002eee:	051b      	lsls	r3, r3, #20
 8002ef0:	e018      	b.n	8002f24 <HAL_ADC_ConfigChannel+0x540>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002efa:	fa93 f3a3 	rbit	r3, r3
 8002efe:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002f04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002f0a:	2320      	movs	r3, #32
 8002f0c:	e003      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002f0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f10:	fab3 f383 	clz	r3, r3
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	3301      	adds	r3, #1
 8002f18:	f003 021f 	and.w	r2, r3, #31
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	4413      	add	r3, r2
 8002f22:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f24:	430b      	orrs	r3, r1
 8002f26:	e080      	b.n	800302a <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d107      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x560>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	0e9b      	lsrs	r3, r3, #26
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	069b      	lsls	r3, r3, #26
 8002f3e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f42:	e015      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x58c>
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f4c:	fa93 f3a3 	rbit	r3, r3
 8002f50:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f54:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8002f5c:	2320      	movs	r3, #32
 8002f5e:	e003      	b.n	8002f68 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8002f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f62:	fab3 f383 	clz	r3, r3
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	3301      	adds	r3, #1
 8002f6a:	069b      	lsls	r3, r3, #26
 8002f6c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d109      	bne.n	8002f90 <HAL_ADC_ConfigChannel+0x5ac>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	0e9b      	lsrs	r3, r3, #26
 8002f82:	3301      	adds	r3, #1
 8002f84:	f003 031f 	and.w	r3, r3, #31
 8002f88:	2101      	movs	r1, #1
 8002f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8e:	e017      	b.n	8002fc0 <HAL_ADC_ConfigChannel+0x5dc>
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	fa93 f3a3 	rbit	r3, r3
 8002f9c:	61fb      	str	r3, [r7, #28]
  return result;
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8002fa8:	2320      	movs	r3, #32
 8002faa:	e003      	b.n	8002fb4 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8002fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fae:	fab3 f383 	clz	r3, r3
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	f003 031f 	and.w	r3, r3, #31
 8002fba:	2101      	movs	r1, #1
 8002fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc0:	ea42 0103 	orr.w	r1, r2, r3
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10d      	bne.n	8002fec <HAL_ADC_ConfigChannel+0x608>
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	0e9b      	lsrs	r3, r3, #26
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	f003 021f 	and.w	r2, r3, #31
 8002fdc:	4613      	mov	r3, r2
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	4413      	add	r3, r2
 8002fe2:	3b1e      	subs	r3, #30
 8002fe4:	051b      	lsls	r3, r3, #20
 8002fe6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002fea:	e01d      	b.n	8003028 <HAL_ADC_ConfigChannel+0x644>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	fa93 f3a3 	rbit	r3, r3
 8002ff8:	613b      	str	r3, [r7, #16]
  return result;
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d103      	bne.n	800300c <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8003004:	2320      	movs	r3, #32
 8003006:	e005      	b.n	8003014 <HAL_ADC_ConfigChannel+0x630>
 8003008:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	fab3 f383 	clz	r3, r3
 8003012:	b2db      	uxtb	r3, r3
 8003014:	3301      	adds	r3, #1
 8003016:	f003 021f 	and.w	r2, r3, #31
 800301a:	4613      	mov	r3, r2
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	4413      	add	r3, r2
 8003020:	3b1e      	subs	r3, #30
 8003022:	051b      	lsls	r3, r3, #20
 8003024:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003028:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800302e:	4619      	mov	r1, r3
 8003030:	f7ff f82b 	bl	800208a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	4b45      	ldr	r3, [pc, #276]	@ (8003150 <HAL_ADC_ConfigChannel+0x76c>)
 800303a:	4013      	ands	r3, r2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d07c      	beq.n	800313a <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003040:	4844      	ldr	r0, [pc, #272]	@ (8003154 <HAL_ADC_ConfigChannel+0x770>)
 8003042:	f7fe ff5f 	bl	8001f04 <LL_ADC_GetCommonPathInternalCh>
 8003046:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800304a:	4843      	ldr	r0, [pc, #268]	@ (8003158 <HAL_ADC_ConfigChannel+0x774>)
 800304c:	f7ff f8ce 	bl	80021ec <LL_ADC_IsEnabled>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d15e      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a40      	ldr	r2, [pc, #256]	@ (800315c <HAL_ADC_ConfigChannel+0x778>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d127      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x6cc>
 8003060:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003064:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d121      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a39      	ldr	r2, [pc, #228]	@ (8003158 <HAL_ADC_ConfigChannel+0x774>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d161      	bne.n	800313a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003076:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800307a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800307e:	4619      	mov	r1, r3
 8003080:	4834      	ldr	r0, [pc, #208]	@ (8003154 <HAL_ADC_ConfigChannel+0x770>)
 8003082:	f7fe ff2c 	bl	8001ede <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003086:	4b36      	ldr	r3, [pc, #216]	@ (8003160 <HAL_ADC_ConfigChannel+0x77c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	099b      	lsrs	r3, r3, #6
 800308c:	4a35      	ldr	r2, [pc, #212]	@ (8003164 <HAL_ADC_ConfigChannel+0x780>)
 800308e:	fba2 2303 	umull	r2, r3, r2, r3
 8003092:	099b      	lsrs	r3, r3, #6
 8003094:	1c5a      	adds	r2, r3, #1
 8003096:	4613      	mov	r3, r2
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	4413      	add	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80030a0:	e002      	b.n	80030a8 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	3b01      	subs	r3, #1
 80030a6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f9      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030ae:	e044      	b.n	800313a <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a2c      	ldr	r2, [pc, #176]	@ (8003168 <HAL_ADC_ConfigChannel+0x784>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d113      	bne.n	80030e2 <HAL_ADC_ConfigChannel+0x6fe>
 80030ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10d      	bne.n	80030e2 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a23      	ldr	r2, [pc, #140]	@ (8003158 <HAL_ADC_ConfigChannel+0x774>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d134      	bne.n	800313a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80030d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030d8:	4619      	mov	r1, r3
 80030da:	481e      	ldr	r0, [pc, #120]	@ (8003154 <HAL_ADC_ConfigChannel+0x770>)
 80030dc:	f7fe feff 	bl	8001ede <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030e0:	e02b      	b.n	800313a <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a21      	ldr	r2, [pc, #132]	@ (800316c <HAL_ADC_ConfigChannel+0x788>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d126      	bne.n	800313a <HAL_ADC_ConfigChannel+0x756>
 80030ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d120      	bne.n	800313a <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a16      	ldr	r2, [pc, #88]	@ (8003158 <HAL_ADC_ConfigChannel+0x774>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d11b      	bne.n	800313a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003102:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003106:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800310a:	4619      	mov	r1, r3
 800310c:	4811      	ldr	r0, [pc, #68]	@ (8003154 <HAL_ADC_ConfigChannel+0x770>)
 800310e:	f7fe fee6 	bl	8001ede <LL_ADC_SetCommonPathInternalCh>
 8003112:	e012      	b.n	800313a <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003118:	f043 0220 	orr.w	r2, r3, #32
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003126:	e008      	b.n	800313a <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800312c:	f043 0220 	orr.w	r2, r3, #32
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8003142:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003146:	4618      	mov	r0, r3
 8003148:	37d8      	adds	r7, #216	@ 0xd8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	80080000 	.word	0x80080000
 8003154:	50040300 	.word	0x50040300
 8003158:	50040000 	.word	0x50040000
 800315c:	c7520000 	.word	0xc7520000
 8003160:	20000008 	.word	0x20000008
 8003164:	053e2d63 	.word	0x053e2d63
 8003168:	cb840000 	.word	0xcb840000
 800316c:	80000001 	.word	0x80000001

08003170 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003178:	2300      	movs	r3, #0
 800317a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff f833 	bl	80021ec <LL_ADC_IsEnabled>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d15e      	bne.n	800324a <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	4b30      	ldr	r3, [pc, #192]	@ (8003254 <ADC_Enable+0xe4>)
 8003194:	4013      	ands	r3, r2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00d      	beq.n	80031b6 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800319e:	f043 0210 	orr.w	r2, r3, #16
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031aa:	f043 0201 	orr.w	r2, r3, #1
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e04a      	b.n	800324c <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff f802 	bl	80021c4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80031c0:	4825      	ldr	r0, [pc, #148]	@ (8003258 <ADC_Enable+0xe8>)
 80031c2:	f7fe fe9f 	bl	8001f04 <LL_ADC_GetCommonPathInternalCh>
 80031c6:	4603      	mov	r3, r0
 80031c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00f      	beq.n	80031f0 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031d0:	4b22      	ldr	r3, [pc, #136]	@ (800325c <ADC_Enable+0xec>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	099b      	lsrs	r3, r3, #6
 80031d6:	4a22      	ldr	r2, [pc, #136]	@ (8003260 <ADC_Enable+0xf0>)
 80031d8:	fba2 2303 	umull	r2, r3, r2, r3
 80031dc:	099b      	lsrs	r3, r3, #6
 80031de:	3301      	adds	r3, #1
 80031e0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80031e2:	e002      	b.n	80031ea <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	3b01      	subs	r3, #1
 80031e8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1f9      	bne.n	80031e4 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80031f0:	f7fe fe26 	bl	8001e40 <HAL_GetTick>
 80031f4:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031f6:	e021      	b.n	800323c <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7fe fff5 	bl	80021ec <LL_ADC_IsEnabled>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d104      	bne.n	8003212 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f7fe ffd9 	bl	80021c4 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003212:	f7fe fe15 	bl	8001e40 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d90d      	bls.n	800323c <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003224:	f043 0210 	orr.w	r2, r3, #16
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003230:	f043 0201 	orr.w	r2, r3, #1
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e007      	b.n	800324c <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b01      	cmp	r3, #1
 8003248:	d1d6      	bne.n	80031f8 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	8000003f 	.word	0x8000003f
 8003258:	50040300 	.word	0x50040300
 800325c:	20000008 	.word	0x20000008
 8003260:	053e2d63 	.word	0x053e2d63

08003264 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003270:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003276:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800327a:	2b00      	cmp	r3, #0
 800327c:	d14b      	bne.n	8003316 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003282:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0308 	and.w	r3, r3, #8
 8003294:	2b00      	cmp	r3, #0
 8003296:	d021      	beq.n	80032dc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f7fe fe94 	bl	8001fca <LL_ADC_REG_IsTriggerSourceSWStart>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d032      	beq.n	800330e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d12b      	bne.n	800330e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d11f      	bne.n	800330e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032d2:	f043 0201 	orr.w	r2, r3, #1
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	655a      	str	r2, [r3, #84]	@ 0x54
 80032da:	e018      	b.n	800330e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d111      	bne.n	800330e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ee:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d105      	bne.n	800330e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003306:	f043 0201 	orr.w	r2, r3, #1
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f7ff fb40 	bl	8002994 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003314:	e00e      	b.n	8003334 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800331a:	f003 0310 	and.w	r3, r3, #16
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f7ff fb54 	bl	80029d0 <HAL_ADC_ErrorCallback>
}
 8003328:	e004      	b.n	8003334 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800332e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	4798      	blx	r3
}
 8003334:	bf00      	nop
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003348:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f7ff fb2c 	bl	80029a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003350:	bf00      	nop
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003364:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800336a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003376:	f043 0204 	orr.w	r2, r3, #4
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f7ff fb26 	bl	80029d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003384:	bf00      	nop
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f003 0307 	and.w	r3, r3, #7
 80033fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003400:	4b0c      	ldr	r3, [pc, #48]	@ (8003434 <__NVIC_SetPriorityGrouping+0x44>)
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800340c:	4013      	ands	r3, r2
 800340e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003418:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800341c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003420:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003422:	4a04      	ldr	r2, [pc, #16]	@ (8003434 <__NVIC_SetPriorityGrouping+0x44>)
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	60d3      	str	r3, [r2, #12]
}
 8003428:	bf00      	nop
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	e000ed00 	.word	0xe000ed00

08003438 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800343c:	4b04      	ldr	r3, [pc, #16]	@ (8003450 <__NVIC_GetPriorityGrouping+0x18>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	0a1b      	lsrs	r3, r3, #8
 8003442:	f003 0307 	and.w	r3, r3, #7
}
 8003446:	4618      	mov	r0, r3
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	e000ed00 	.word	0xe000ed00

08003454 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	4603      	mov	r3, r0
 800345c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800345e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003462:	2b00      	cmp	r3, #0
 8003464:	db0b      	blt.n	800347e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003466:	79fb      	ldrb	r3, [r7, #7]
 8003468:	f003 021f 	and.w	r2, r3, #31
 800346c:	4907      	ldr	r1, [pc, #28]	@ (800348c <__NVIC_EnableIRQ+0x38>)
 800346e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003472:	095b      	lsrs	r3, r3, #5
 8003474:	2001      	movs	r0, #1
 8003476:	fa00 f202 	lsl.w	r2, r0, r2
 800347a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	e000e100 	.word	0xe000e100

08003490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	4603      	mov	r3, r0
 8003498:	6039      	str	r1, [r7, #0]
 800349a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800349c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	db0a      	blt.n	80034ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	490c      	ldr	r1, [pc, #48]	@ (80034dc <__NVIC_SetPriority+0x4c>)
 80034aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ae:	0112      	lsls	r2, r2, #4
 80034b0:	b2d2      	uxtb	r2, r2
 80034b2:	440b      	add	r3, r1
 80034b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034b8:	e00a      	b.n	80034d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	4908      	ldr	r1, [pc, #32]	@ (80034e0 <__NVIC_SetPriority+0x50>)
 80034c0:	79fb      	ldrb	r3, [r7, #7]
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	3b04      	subs	r3, #4
 80034c8:	0112      	lsls	r2, r2, #4
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	440b      	add	r3, r1
 80034ce:	761a      	strb	r2, [r3, #24]
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	e000e100 	.word	0xe000e100
 80034e0:	e000ed00 	.word	0xe000ed00

080034e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b089      	sub	sp, #36	@ 0x24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f1c3 0307 	rsb	r3, r3, #7
 80034fe:	2b04      	cmp	r3, #4
 8003500:	bf28      	it	cs
 8003502:	2304      	movcs	r3, #4
 8003504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	3304      	adds	r3, #4
 800350a:	2b06      	cmp	r3, #6
 800350c:	d902      	bls.n	8003514 <NVIC_EncodePriority+0x30>
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	3b03      	subs	r3, #3
 8003512:	e000      	b.n	8003516 <NVIC_EncodePriority+0x32>
 8003514:	2300      	movs	r3, #0
 8003516:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003518:	f04f 32ff 	mov.w	r2, #4294967295
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	fa02 f303 	lsl.w	r3, r2, r3
 8003522:	43da      	mvns	r2, r3
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	401a      	ands	r2, r3
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800352c:	f04f 31ff 	mov.w	r1, #4294967295
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	fa01 f303 	lsl.w	r3, r1, r3
 8003536:	43d9      	mvns	r1, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800353c:	4313      	orrs	r3, r2
         );
}
 800353e:	4618      	mov	r0, r3
 8003540:	3724      	adds	r7, #36	@ 0x24
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
	...

0800354c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3b01      	subs	r3, #1
 8003558:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800355c:	d301      	bcc.n	8003562 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800355e:	2301      	movs	r3, #1
 8003560:	e00f      	b.n	8003582 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003562:	4a0a      	ldr	r2, [pc, #40]	@ (800358c <SysTick_Config+0x40>)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3b01      	subs	r3, #1
 8003568:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800356a:	210f      	movs	r1, #15
 800356c:	f04f 30ff 	mov.w	r0, #4294967295
 8003570:	f7ff ff8e 	bl	8003490 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003574:	4b05      	ldr	r3, [pc, #20]	@ (800358c <SysTick_Config+0x40>)
 8003576:	2200      	movs	r2, #0
 8003578:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800357a:	4b04      	ldr	r3, [pc, #16]	@ (800358c <SysTick_Config+0x40>)
 800357c:	2207      	movs	r2, #7
 800357e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	e000e010 	.word	0xe000e010

08003590 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f7ff ff29 	bl	80033f0 <__NVIC_SetPriorityGrouping>
}
 800359e:	bf00      	nop
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b086      	sub	sp, #24
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	4603      	mov	r3, r0
 80035ae:	60b9      	str	r1, [r7, #8]
 80035b0:	607a      	str	r2, [r7, #4]
 80035b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035b4:	f7ff ff40 	bl	8003438 <__NVIC_GetPriorityGrouping>
 80035b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	68b9      	ldr	r1, [r7, #8]
 80035be:	6978      	ldr	r0, [r7, #20]
 80035c0:	f7ff ff90 	bl	80034e4 <NVIC_EncodePriority>
 80035c4:	4602      	mov	r2, r0
 80035c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ca:	4611      	mov	r1, r2
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff ff5f 	bl	8003490 <__NVIC_SetPriority>
}
 80035d2:	bf00      	nop
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b082      	sub	sp, #8
 80035de:	af00      	add	r7, sp, #0
 80035e0:	4603      	mov	r3, r0
 80035e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff ff33 	bl	8003454 <__NVIC_EnableIRQ>
}
 80035ee:	bf00      	nop
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b082      	sub	sp, #8
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7ff ffa4 	bl	800354c <SysTick_Config>
 8003604:	4603      	mov	r3, r0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
	...

08003610 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e08e      	b.n	8003740 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	461a      	mov	r2, r3
 8003628:	4b47      	ldr	r3, [pc, #284]	@ (8003748 <HAL_DMA_Init+0x138>)
 800362a:	429a      	cmp	r2, r3
 800362c:	d80f      	bhi.n	800364e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	461a      	mov	r2, r3
 8003634:	4b45      	ldr	r3, [pc, #276]	@ (800374c <HAL_DMA_Init+0x13c>)
 8003636:	4413      	add	r3, r2
 8003638:	4a45      	ldr	r2, [pc, #276]	@ (8003750 <HAL_DMA_Init+0x140>)
 800363a:	fba2 2303 	umull	r2, r3, r2, r3
 800363e:	091b      	lsrs	r3, r3, #4
 8003640:	009a      	lsls	r2, r3, #2
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a42      	ldr	r2, [pc, #264]	@ (8003754 <HAL_DMA_Init+0x144>)
 800364a:	641a      	str	r2, [r3, #64]	@ 0x40
 800364c:	e00e      	b.n	800366c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	461a      	mov	r2, r3
 8003654:	4b40      	ldr	r3, [pc, #256]	@ (8003758 <HAL_DMA_Init+0x148>)
 8003656:	4413      	add	r3, r2
 8003658:	4a3d      	ldr	r2, [pc, #244]	@ (8003750 <HAL_DMA_Init+0x140>)
 800365a:	fba2 2303 	umull	r2, r3, r2, r3
 800365e:	091b      	lsrs	r3, r3, #4
 8003660:	009a      	lsls	r2, r3, #2
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a3c      	ldr	r2, [pc, #240]	@ (800375c <HAL_DMA_Init+0x14c>)
 800366a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2202      	movs	r2, #2
 8003670:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003682:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003686:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003690:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800369c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 fa24 	bl	8003b0c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036cc:	d102      	bne.n	80036d4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036dc:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80036e0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80036ea:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d010      	beq.n	8003716 <HAL_DMA_Init+0x106>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d80c      	bhi.n	8003716 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 fa43 	bl	8003b88 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003712:	605a      	str	r2, [r3, #4]
 8003714:	e008      	b.n	8003728 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	40020407 	.word	0x40020407
 800374c:	bffdfff8 	.word	0xbffdfff8
 8003750:	cccccccd 	.word	0xcccccccd
 8003754:	40020000 	.word	0x40020000
 8003758:	bffdfbf8 	.word	0xbffdfbf8
 800375c:	40020400 	.word	0x40020400

08003760 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
 800376c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800376e:	2300      	movs	r3, #0
 8003770:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003778:	2b01      	cmp	r3, #1
 800377a:	d101      	bne.n	8003780 <HAL_DMA_Start_IT+0x20>
 800377c:	2302      	movs	r3, #2
 800377e:	e066      	b.n	800384e <HAL_DMA_Start_IT+0xee>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b01      	cmp	r3, #1
 8003792:	d155      	bne.n	8003840 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2202      	movs	r2, #2
 8003798:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 0201 	bic.w	r2, r2, #1
 80037b0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	68b9      	ldr	r1, [r7, #8]
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 f968 	bl	8003a8e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d008      	beq.n	80037d8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 020e 	orr.w	r2, r2, #14
 80037d4:	601a      	str	r2, [r3, #0]
 80037d6:	e00f      	b.n	80037f8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0204 	bic.w	r2, r2, #4
 80037e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 020a 	orr.w	r2, r2, #10
 80037f6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d007      	beq.n	8003816 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003810:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003814:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800381a:	2b00      	cmp	r3, #0
 800381c:	d007      	beq.n	800382e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003828:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800382c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f042 0201 	orr.w	r2, r2, #1
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	e005      	b.n	800384c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003848:	2302      	movs	r3, #2
 800384a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800384c:	7dfb      	ldrb	r3, [r7, #23]
}
 800384e:	4618      	mov	r0, r3
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b084      	sub	sp, #16
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800385e:	2300      	movs	r3, #0
 8003860:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d005      	beq.n	800387a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2204      	movs	r2, #4
 8003872:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	73fb      	strb	r3, [r7, #15]
 8003878:	e047      	b.n	800390a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 020e 	bic.w	r2, r2, #14
 8003888:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 0201 	bic.w	r2, r2, #1
 8003898:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ae:	f003 021c 	and.w	r2, r3, #28
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b6:	2101      	movs	r1, #1
 80038b8:	fa01 f202 	lsl.w	r2, r1, r2
 80038bc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80038c6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00c      	beq.n	80038ea <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80038e8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	4798      	blx	r3
    }
  }
  return status;
 800390a:	7bfb      	ldrb	r3, [r7, #15]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003930:	f003 031c 	and.w	r3, r3, #28
 8003934:	2204      	movs	r2, #4
 8003936:	409a      	lsls	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4013      	ands	r3, r2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d026      	beq.n	800398e <HAL_DMA_IRQHandler+0x7a>
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	f003 0304 	and.w	r3, r3, #4
 8003946:	2b00      	cmp	r3, #0
 8003948:	d021      	beq.n	800398e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0320 	and.w	r3, r3, #32
 8003954:	2b00      	cmp	r3, #0
 8003956:	d107      	bne.n	8003968 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 0204 	bic.w	r2, r2, #4
 8003966:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396c:	f003 021c 	and.w	r2, r3, #28
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003974:	2104      	movs	r1, #4
 8003976:	fa01 f202 	lsl.w	r2, r1, r2
 800397a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003980:	2b00      	cmp	r3, #0
 8003982:	d071      	beq.n	8003a68 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800398c:	e06c      	b.n	8003a68 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003992:	f003 031c 	and.w	r3, r3, #28
 8003996:	2202      	movs	r2, #2
 8003998:	409a      	lsls	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	4013      	ands	r3, r2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d02e      	beq.n	8003a00 <HAL_DMA_IRQHandler+0xec>
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d029      	beq.n	8003a00 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0320 	and.w	r3, r3, #32
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10b      	bne.n	80039d2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 020a 	bic.w	r2, r2, #10
 80039c8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039d6:	f003 021c 	and.w	r2, r3, #28
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039de:	2102      	movs	r1, #2
 80039e0:	fa01 f202 	lsl.w	r2, r1, r2
 80039e4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d038      	beq.n	8003a68 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80039fe:	e033      	b.n	8003a68 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a04:	f003 031c 	and.w	r3, r3, #28
 8003a08:	2208      	movs	r2, #8
 8003a0a:	409a      	lsls	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d02a      	beq.n	8003a6a <HAL_DMA_IRQHandler+0x156>
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	f003 0308 	and.w	r3, r3, #8
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d025      	beq.n	8003a6a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 020e 	bic.w	r2, r2, #14
 8003a2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a32:	f003 021c 	and.w	r2, r3, #28
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a40:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d004      	beq.n	8003a6a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003a68:	bf00      	nop
 8003a6a:	bf00      	nop
}
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a80:	b2db      	uxtb	r3, r3
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr

08003a8e <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b085      	sub	sp, #20
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	60f8      	str	r0, [r7, #12]
 8003a96:	60b9      	str	r1, [r7, #8]
 8003a98:	607a      	str	r2, [r7, #4]
 8003a9a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003aa4:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d004      	beq.n	8003ab8 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003ab6:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003abc:	f003 021c 	and.w	r2, r3, #28
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8003aca:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	2b10      	cmp	r3, #16
 8003ada:	d108      	bne.n	8003aee <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003aec:	e007      	b.n	8003afe <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	60da      	str	r2, [r3, #12]
}
 8003afe:	bf00      	nop
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
	...

08003b0c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	4b17      	ldr	r3, [pc, #92]	@ (8003b78 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d80a      	bhi.n	8003b36 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b24:	089b      	lsrs	r3, r3, #2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b2c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	6493      	str	r3, [r2, #72]	@ 0x48
 8003b34:	e007      	b.n	8003b46 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b3a:	089b      	lsrs	r3, r3, #2
 8003b3c:	009a      	lsls	r2, r3, #2
 8003b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8003b7c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003b40:	4413      	add	r3, r2
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	3b08      	subs	r3, #8
 8003b4e:	4a0c      	ldr	r2, [pc, #48]	@ (8003b80 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003b50:	fba2 2303 	umull	r2, r3, r2, r3
 8003b54:	091b      	lsrs	r3, r3, #4
 8003b56:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8003b84 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003b5c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f003 031f 	and.w	r3, r3, #31
 8003b64:	2201      	movs	r2, #1
 8003b66:	409a      	lsls	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003b6c:	bf00      	nop
 8003b6e:	3714      	adds	r7, #20
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	40020407 	.word	0x40020407
 8003b7c:	4002081c 	.word	0x4002081c
 8003b80:	cccccccd 	.word	0xcccccccd
 8003b84:	40020880 	.word	0x40020880

08003b88 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b98:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003b9e:	4413      	add	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a09      	ldr	r2, [pc, #36]	@ (8003bd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003bac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	f003 0303 	and.w	r3, r3, #3
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	409a      	lsls	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003bbe:	bf00      	nop
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	1000823f 	.word	0x1000823f
 8003bd0:	40020940 	.word	0x40020940

08003bd4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b087      	sub	sp, #28
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bde:	2300      	movs	r3, #0
 8003be0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003be2:	e14c      	b.n	8003e7e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	2101      	movs	r1, #1
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f000 813e 	beq.w	8003e78 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f003 0303 	and.w	r3, r3, #3
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d005      	beq.n	8003c14 <HAL_GPIO_Init+0x40>
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f003 0303 	and.w	r3, r3, #3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d130      	bne.n	8003c76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	2203      	movs	r2, #3
 8003c20:	fa02 f303 	lsl.w	r3, r2, r3
 8003c24:	43db      	mvns	r3, r3
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	68da      	ldr	r2, [r3, #12]
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	fa02 f303 	lsl.w	r3, r2, r3
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c52:	43db      	mvns	r3, r3
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	4013      	ands	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	091b      	lsrs	r3, r3, #4
 8003c60:	f003 0201 	and.w	r2, r3, #1
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	2b03      	cmp	r3, #3
 8003c80:	d017      	beq.n	8003cb2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	2203      	movs	r2, #3
 8003c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c92:	43db      	mvns	r3, r3
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	4013      	ands	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f003 0303 	and.w	r3, r3, #3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d123      	bne.n	8003d06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	08da      	lsrs	r2, r3, #3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	3208      	adds	r2, #8
 8003cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	220f      	movs	r2, #15
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	43db      	mvns	r3, r3
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	691a      	ldr	r2, [r3, #16]
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f003 0307 	and.w	r3, r3, #7
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	08da      	lsrs	r2, r3, #3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3208      	adds	r2, #8
 8003d00:	6939      	ldr	r1, [r7, #16]
 8003d02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	2203      	movs	r2, #3
 8003d12:	fa02 f303 	lsl.w	r3, r2, r3
 8003d16:	43db      	mvns	r3, r3
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f003 0203 	and.w	r2, r3, #3
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f000 8098 	beq.w	8003e78 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003d48:	4a54      	ldr	r2, [pc, #336]	@ (8003e9c <HAL_GPIO_Init+0x2c8>)
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	089b      	lsrs	r3, r3, #2
 8003d4e:	3302      	adds	r3, #2
 8003d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f003 0303 	and.w	r3, r3, #3
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	220f      	movs	r2, #15
 8003d60:	fa02 f303 	lsl.w	r3, r2, r3
 8003d64:	43db      	mvns	r3, r3
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003d72:	d019      	beq.n	8003da8 <HAL_GPIO_Init+0x1d4>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a4a      	ldr	r2, [pc, #296]	@ (8003ea0 <HAL_GPIO_Init+0x2cc>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d013      	beq.n	8003da4 <HAL_GPIO_Init+0x1d0>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a49      	ldr	r2, [pc, #292]	@ (8003ea4 <HAL_GPIO_Init+0x2d0>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d00d      	beq.n	8003da0 <HAL_GPIO_Init+0x1cc>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a48      	ldr	r2, [pc, #288]	@ (8003ea8 <HAL_GPIO_Init+0x2d4>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d007      	beq.n	8003d9c <HAL_GPIO_Init+0x1c8>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a47      	ldr	r2, [pc, #284]	@ (8003eac <HAL_GPIO_Init+0x2d8>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d101      	bne.n	8003d98 <HAL_GPIO_Init+0x1c4>
 8003d94:	2304      	movs	r3, #4
 8003d96:	e008      	b.n	8003daa <HAL_GPIO_Init+0x1d6>
 8003d98:	2307      	movs	r3, #7
 8003d9a:	e006      	b.n	8003daa <HAL_GPIO_Init+0x1d6>
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e004      	b.n	8003daa <HAL_GPIO_Init+0x1d6>
 8003da0:	2302      	movs	r3, #2
 8003da2:	e002      	b.n	8003daa <HAL_GPIO_Init+0x1d6>
 8003da4:	2301      	movs	r3, #1
 8003da6:	e000      	b.n	8003daa <HAL_GPIO_Init+0x1d6>
 8003da8:	2300      	movs	r3, #0
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	f002 0203 	and.w	r2, r2, #3
 8003db0:	0092      	lsls	r2, r2, #2
 8003db2:	4093      	lsls	r3, r2
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003dba:	4938      	ldr	r1, [pc, #224]	@ (8003e9c <HAL_GPIO_Init+0x2c8>)
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	089b      	lsrs	r3, r3, #2
 8003dc0:	3302      	adds	r3, #2
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003dc8:	4b39      	ldr	r3, [pc, #228]	@ (8003eb0 <HAL_GPIO_Init+0x2dc>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003dec:	4a30      	ldr	r2, [pc, #192]	@ (8003eb0 <HAL_GPIO_Init+0x2dc>)
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003df2:	4b2f      	ldr	r3, [pc, #188]	@ (8003eb0 <HAL_GPIO_Init+0x2dc>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	43db      	mvns	r3, r3
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e16:	4a26      	ldr	r2, [pc, #152]	@ (8003eb0 <HAL_GPIO_Init+0x2dc>)
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003e1c:	4b24      	ldr	r3, [pc, #144]	@ (8003eb0 <HAL_GPIO_Init+0x2dc>)
 8003e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	43db      	mvns	r3, r3
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e42:	4a1b      	ldr	r2, [pc, #108]	@ (8003eb0 <HAL_GPIO_Init+0x2dc>)
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8003e4a:	4b19      	ldr	r3, [pc, #100]	@ (8003eb0 <HAL_GPIO_Init+0x2dc>)
 8003e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	43db      	mvns	r3, r3
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d003      	beq.n	8003e70 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e70:	4a0f      	ldr	r2, [pc, #60]	@ (8003eb0 <HAL_GPIO_Init+0x2dc>)
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	fa22 f303 	lsr.w	r3, r2, r3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f47f aeab 	bne.w	8003be4 <HAL_GPIO_Init+0x10>
  }
}
 8003e8e:	bf00      	nop
 8003e90:	bf00      	nop
 8003e92:	371c      	adds	r7, #28
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr
 8003e9c:	40010000 	.word	0x40010000
 8003ea0:	48000400 	.word	0x48000400
 8003ea4:	48000800 	.word	0x48000800
 8003ea8:	48000c00 	.word	0x48000c00
 8003eac:	48001000 	.word	0x48001000
 8003eb0:	58000800 	.word	0x58000800

08003eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	807b      	strh	r3, [r7, #2]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ec4:	787b      	ldrb	r3, [r7, #1]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003eca:	887a      	ldrh	r2, [r7, #2]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ed0:	e002      	b.n	8003ed8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ed2:	887a      	ldrh	r2, [r7, #2]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ef6:	887a      	ldrh	r2, [r7, #2]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4013      	ands	r3, r2
 8003efc:	041a      	lsls	r2, r3, #16
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	43d9      	mvns	r1, r3
 8003f02:	887b      	ldrh	r3, [r7, #2]
 8003f04:	400b      	ands	r3, r1
 8003f06:	431a      	orrs	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	619a      	str	r2, [r3, #24]
}
 8003f0c:	bf00      	nop
 8003f0e:	3714      	adds	r7, #20
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	4603      	mov	r3, r0
 8003f20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f22:	4b08      	ldr	r3, [pc, #32]	@ (8003f44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f24:	68da      	ldr	r2, [r3, #12]
 8003f26:	88fb      	ldrh	r3, [r7, #6]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d006      	beq.n	8003f3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f2e:	4a05      	ldr	r2, [pc, #20]	@ (8003f44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f30:	88fb      	ldrh	r3, [r7, #6]
 8003f32:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f34:	88fb      	ldrh	r3, [r7, #6]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 f806 	bl	8003f48 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f3c:	bf00      	nop
 8003f3e:	3708      	adds	r7, #8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	58000800 	.word	0x58000800

08003f48 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	4603      	mov	r3, r0
 8003f50:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b082      	sub	sp, #8
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d101      	bne.n	8003f70 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e08d      	b.n	800408c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d106      	bne.n	8003f8a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f7fd fafd 	bl	8001584 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2224      	movs	r2, #36	@ 0x24
 8003f8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 0201 	bic.w	r2, r2, #1
 8003fa0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003fae:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689a      	ldr	r2, [r3, #8]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fbe:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d107      	bne.n	8003fd8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689a      	ldr	r2, [r3, #8]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003fd4:	609a      	str	r2, [r3, #8]
 8003fd6:	e006      	b.n	8003fe6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003fe4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d108      	bne.n	8004000 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ffc:	605a      	str	r2, [r3, #4]
 8003ffe:	e007      	b.n	8004010 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800400e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	6812      	ldr	r2, [r2, #0]
 800401a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800401e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004022:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004032:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691a      	ldr	r2, [r3, #16]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	69d9      	ldr	r1, [r3, #28]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a1a      	ldr	r2, [r3, #32]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f042 0201 	orr.w	r2, r2, #1
 800406c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2220      	movs	r2, #32
 8004078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3708      	adds	r7, #8
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d005      	beq.n	80040c0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	68f9      	ldr	r1, [r7, #12]
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	4798      	blx	r3
  }
}
 80040c0:	bf00      	nop
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00f      	beq.n	800410a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00a      	beq.n	800410a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f8:	f043 0201 	orr.w	r2, r3, #1
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004108:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00f      	beq.n	8004134 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004122:	f043 0208 	orr.w	r2, r3, #8
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004132:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00f      	beq.n	800415e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00a      	beq.n	800415e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414c:	f043 0202 	orr.w	r2, r3, #2
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800415c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004162:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f003 030b 	and.w	r3, r3, #11
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800416e:	68f9      	ldr	r1, [r7, #12]
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 fbd5 	bl	8004920 <I2C_ITError>
  }
}
 8004176:	bf00      	nop
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800417e:	b480      	push	{r7}
 8004180:	b083      	sub	sp, #12
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004192:	b480      	push	{r7}
 8004194:	b083      	sub	sp, #12
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800419a:	bf00      	nop
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b083      	sub	sp, #12
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
 80041ae:	460b      	mov	r3, r1
 80041b0:	70fb      	strb	r3, [r7, #3]
 80041b2:	4613      	mov	r3, r2
 80041b4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80041b6:	bf00      	nop
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b083      	sub	sp, #12
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b083      	sub	sp, #12
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b086      	sub	sp, #24
 8004202:	af00      	add	r7, sp, #0
 8004204:	60f8      	str	r0, [r7, #12]
 8004206:	60b9      	str	r1, [r7, #8]
 8004208:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800420e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800421a:	2b01      	cmp	r3, #1
 800421c:	d101      	bne.n	8004222 <I2C_Slave_ISR_IT+0x24>
 800421e:	2302      	movs	r3, #2
 8004220:	e0e2      	b.n	80043e8 <I2C_Slave_ISR_IT+0x1ea>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	f003 0320 	and.w	r3, r3, #32
 8004230:	2b00      	cmp	r3, #0
 8004232:	d009      	beq.n	8004248 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800423a:	2b00      	cmp	r3, #0
 800423c:	d004      	beq.n	8004248 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800423e:	6939      	ldr	r1, [r7, #16]
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f000 f9b5 	bl	80045b0 <I2C_ITSlaveCplt>
 8004246:	e0ca      	b.n	80043de <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	f003 0310 	and.w	r3, r3, #16
 800424e:	2b00      	cmp	r3, #0
 8004250:	d04b      	beq.n	80042ea <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004258:	2b00      	cmp	r3, #0
 800425a:	d046      	beq.n	80042ea <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004260:	b29b      	uxth	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d128      	bne.n	80042b8 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b28      	cmp	r3, #40	@ 0x28
 8004270:	d108      	bne.n	8004284 <I2C_Slave_ISR_IT+0x86>
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004278:	d104      	bne.n	8004284 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800427a:	6939      	ldr	r1, [r7, #16]
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f000 fafb 	bl	8004878 <I2C_ITListenCplt>
 8004282:	e031      	b.n	80042e8 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b29      	cmp	r3, #41	@ 0x29
 800428e:	d10e      	bne.n	80042ae <I2C_Slave_ISR_IT+0xb0>
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004296:	d00a      	beq.n	80042ae <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2210      	movs	r2, #16
 800429e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f000 fc54 	bl	8004b4e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f000 f926 	bl	80044f8 <I2C_ITSlaveSeqCplt>
 80042ac:	e01c      	b.n	80042e8 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2210      	movs	r2, #16
 80042b4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80042b6:	e08f      	b.n	80043d8 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2210      	movs	r2, #16
 80042be:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c4:	f043 0204 	orr.w	r2, r3, #4
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <I2C_Slave_ISR_IT+0xdc>
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042d8:	d17e      	bne.n	80043d8 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042de:	4619      	mov	r1, r3
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f000 fb1d 	bl	8004920 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80042e6:	e077      	b.n	80043d8 <I2C_Slave_ISR_IT+0x1da>
 80042e8:	e076      	b.n	80043d8 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	f003 0304 	and.w	r3, r3, #4
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d02f      	beq.n	8004354 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d02a      	beq.n	8004354 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004302:	b29b      	uxth	r3, r3
 8004304:	2b00      	cmp	r3, #0
 8004306:	d018      	beq.n	800433a <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004312:	b2d2      	uxtb	r2, r2
 8004314:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800431a:	1c5a      	adds	r2, r3, #1
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004324:	3b01      	subs	r3, #1
 8004326:	b29a      	uxth	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004330:	b29b      	uxth	r3, r3
 8004332:	3b01      	subs	r3, #1
 8004334:	b29a      	uxth	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800433e:	b29b      	uxth	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	d14b      	bne.n	80043dc <I2C_Slave_ISR_IT+0x1de>
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800434a:	d047      	beq.n	80043dc <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f000 f8d3 	bl	80044f8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004352:	e043      	b.n	80043dc <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	f003 0308 	and.w	r3, r3, #8
 800435a:	2b00      	cmp	r3, #0
 800435c:	d009      	beq.n	8004372 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004364:	2b00      	cmp	r3, #0
 8004366:	d004      	beq.n	8004372 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004368:	6939      	ldr	r1, [r7, #16]
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f000 f840 	bl	80043f0 <I2C_ITAddrCplt>
 8004370:	e035      	b.n	80043de <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d030      	beq.n	80043de <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004382:	2b00      	cmp	r3, #0
 8004384:	d02b      	beq.n	80043de <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800438a:	b29b      	uxth	r3, r3
 800438c:	2b00      	cmp	r3, #0
 800438e:	d018      	beq.n	80043c2 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004394:	781a      	ldrb	r2, [r3, #0]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	851a      	strh	r2, [r3, #40]	@ 0x28
 80043c0:	e00d      	b.n	80043de <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043c8:	d002      	beq.n	80043d0 <I2C_Slave_ISR_IT+0x1d2>
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d106      	bne.n	80043de <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 f891 	bl	80044f8 <I2C_ITSlaveSeqCplt>
 80043d6:	e002      	b.n	80043de <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80043d8:	bf00      	nop
 80043da:	e000      	b.n	80043de <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80043dc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3718      	adds	r7, #24
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004400:	b2db      	uxtb	r3, r3
 8004402:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004406:	2b28      	cmp	r3, #40	@ 0x28
 8004408:	d16a      	bne.n	80044e0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	0c1b      	lsrs	r3, r3, #16
 8004412:	b2db      	uxtb	r3, r3
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	0c1b      	lsrs	r3, r3, #16
 8004422:	b29b      	uxth	r3, r3
 8004424:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004428:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	b29b      	uxth	r3, r3
 8004432:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004436:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	b29b      	uxth	r3, r3
 8004440:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004444:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	2b02      	cmp	r3, #2
 800444c:	d138      	bne.n	80044c0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800444e:	897b      	ldrh	r3, [r7, #10]
 8004450:	09db      	lsrs	r3, r3, #7
 8004452:	b29a      	uxth	r2, r3
 8004454:	89bb      	ldrh	r3, [r7, #12]
 8004456:	4053      	eors	r3, r2
 8004458:	b29b      	uxth	r3, r3
 800445a:	f003 0306 	and.w	r3, r3, #6
 800445e:	2b00      	cmp	r3, #0
 8004460:	d11c      	bne.n	800449c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004462:	897b      	ldrh	r3, [r7, #10]
 8004464:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800446a:	1c5a      	adds	r2, r3, #1
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004474:	2b02      	cmp	r3, #2
 8004476:	d13b      	bne.n	80044f0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2208      	movs	r2, #8
 8004484:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800448e:	89ba      	ldrh	r2, [r7, #12]
 8004490:	7bfb      	ldrb	r3, [r7, #15]
 8004492:	4619      	mov	r1, r3
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f7ff fe86 	bl	80041a6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800449a:	e029      	b.n	80044f0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800449c:	893b      	ldrh	r3, [r7, #8]
 800449e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80044a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 fb94 	bl	8004bd2 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80044b2:	89ba      	ldrh	r2, [r7, #12]
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
 80044b6:	4619      	mov	r1, r3
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f7ff fe74 	bl	80041a6 <HAL_I2C_AddrCallback>
}
 80044be:	e017      	b.n	80044f0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80044c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 fb84 	bl	8004bd2 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80044d2:	89ba      	ldrh	r2, [r7, #12]
 80044d4:	7bfb      	ldrb	r3, [r7, #15]
 80044d6:	4619      	mov	r1, r3
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f7ff fe64 	bl	80041a6 <HAL_I2C_AddrCallback>
}
 80044de:	e007      	b.n	80044f0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2208      	movs	r2, #8
 80044e6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80044f0:	bf00      	nop
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d008      	beq.n	800452c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	e00c      	b.n	8004546 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d007      	beq.n	8004546 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004544:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b29      	cmp	r3, #41	@ 0x29
 8004550:	d112      	bne.n	8004578 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2228      	movs	r2, #40	@ 0x28
 8004556:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2221      	movs	r2, #33	@ 0x21
 800455e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004560:	2101      	movs	r1, #1
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 fb35 	bl	8004bd2 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f7ff fe04 	bl	800417e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004576:	e017      	b.n	80045a8 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b2a      	cmp	r3, #42	@ 0x2a
 8004582:	d111      	bne.n	80045a8 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2228      	movs	r2, #40	@ 0x28
 8004588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2222      	movs	r2, #34	@ 0x22
 8004590:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004592:	2102      	movs	r1, #2
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 fb1c 	bl	8004bd2 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7ff fdf5 	bl	8004192 <HAL_I2C_SlaveRxCpltCallback>
}
 80045a8:	bf00      	nop
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ca:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045d2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2220      	movs	r2, #32
 80045da:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80045dc:	7afb      	ldrb	r3, [r7, #11]
 80045de:	2b21      	cmp	r3, #33	@ 0x21
 80045e0:	d002      	beq.n	80045e8 <I2C_ITSlaveCplt+0x38>
 80045e2:	7afb      	ldrb	r3, [r7, #11]
 80045e4:	2b29      	cmp	r3, #41	@ 0x29
 80045e6:	d108      	bne.n	80045fa <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80045e8:	f248 0101 	movw	r1, #32769	@ 0x8001
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 faf0 	bl	8004bd2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2221      	movs	r2, #33	@ 0x21
 80045f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80045f8:	e019      	b.n	800462e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80045fa:	7afb      	ldrb	r3, [r7, #11]
 80045fc:	2b22      	cmp	r3, #34	@ 0x22
 80045fe:	d002      	beq.n	8004606 <I2C_ITSlaveCplt+0x56>
 8004600:	7afb      	ldrb	r3, [r7, #11]
 8004602:	2b2a      	cmp	r3, #42	@ 0x2a
 8004604:	d108      	bne.n	8004618 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004606:	f248 0102 	movw	r1, #32770	@ 0x8002
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 fae1 	bl	8004bd2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2222      	movs	r2, #34	@ 0x22
 8004614:	631a      	str	r2, [r3, #48]	@ 0x30
 8004616:	e00a      	b.n	800462e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004618:	7afb      	ldrb	r3, [r7, #11]
 800461a:	2b28      	cmp	r3, #40	@ 0x28
 800461c:	d107      	bne.n	800462e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800461e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 fad5 	bl	8004bd2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800463c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	6859      	ldr	r1, [r3, #4]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	4b89      	ldr	r3, [pc, #548]	@ (8004870 <I2C_ITSlaveCplt+0x2c0>)
 800464a:	400b      	ands	r3, r1
 800464c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 fa7d 	bl	8004b4e <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d013      	beq.n	8004686 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800466c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004672:	2b00      	cmp	r3, #0
 8004674:	d01f      	beq.n	80046b6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	b29a      	uxth	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004684:	e017      	b.n	80046b6 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d012      	beq.n	80046b6 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800469e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d006      	beq.n	80046b6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d020      	beq.n	8004702 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	f023 0304 	bic.w	r3, r3, #4
 80046c6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d2:	b2d2      	uxtb	r2, r2
 80046d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00c      	beq.n	8004702 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ec:	3b01      	subs	r3, #1
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	3b01      	subs	r3, #1
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004706:	b29b      	uxth	r3, r3
 8004708:	2b00      	cmp	r3, #0
 800470a:	d005      	beq.n	8004718 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004710:	f043 0204 	orr.w	r2, r3, #4
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	f003 0310 	and.w	r3, r3, #16
 800471e:	2b00      	cmp	r3, #0
 8004720:	d049      	beq.n	80047b6 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004728:	2b00      	cmp	r3, #0
 800472a:	d044      	beq.n	80047b6 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004730:	b29b      	uxth	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d128      	bne.n	8004788 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b28      	cmp	r3, #40	@ 0x28
 8004740:	d108      	bne.n	8004754 <I2C_ITSlaveCplt+0x1a4>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004748:	d104      	bne.n	8004754 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800474a:	6979      	ldr	r1, [r7, #20]
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f893 	bl	8004878 <I2C_ITListenCplt>
 8004752:	e030      	b.n	80047b6 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b29      	cmp	r3, #41	@ 0x29
 800475e:	d10e      	bne.n	800477e <I2C_ITSlaveCplt+0x1ce>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004766:	d00a      	beq.n	800477e <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2210      	movs	r2, #16
 800476e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 f9ec 	bl	8004b4e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f7ff febe 	bl	80044f8 <I2C_ITSlaveSeqCplt>
 800477c:	e01b      	b.n	80047b6 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2210      	movs	r2, #16
 8004784:	61da      	str	r2, [r3, #28]
 8004786:	e016      	b.n	80047b6 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2210      	movs	r2, #16
 800478e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004794:	f043 0204 	orr.w	r2, r3, #4
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d003      	beq.n	80047aa <I2C_ITSlaveCplt+0x1fa>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047a8:	d105      	bne.n	80047b6 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ae:	4619      	mov	r1, r3
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 f8b5 	bl	8004920 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d010      	beq.n	80047ee <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047d0:	4619      	mov	r1, r3
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f8a4 	bl	8004920 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b28      	cmp	r3, #40	@ 0x28
 80047e2:	d141      	bne.n	8004868 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80047e4:	6979      	ldr	r1, [r7, #20]
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f846 	bl	8004878 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80047ec:	e03c      	b.n	8004868 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80047f6:	d014      	beq.n	8004822 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f7ff fe7d 	bl	80044f8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a1c      	ldr	r2, [pc, #112]	@ (8004874 <I2C_ITSlaveCplt+0x2c4>)
 8004802:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7ff fcd1 	bl	80041c2 <HAL_I2C_ListenCpltCallback>
}
 8004820:	e022      	b.n	8004868 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b22      	cmp	r3, #34	@ 0x22
 800482c:	d10e      	bne.n	800484c <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2220      	movs	r2, #32
 8004832:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7ff fca4 	bl	8004192 <HAL_I2C_SlaveRxCpltCallback>
}
 800484a:	e00d      	b.n	8004868 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2220      	movs	r2, #32
 8004850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7ff fc8b 	bl	800417e <HAL_I2C_SlaveTxCpltCallback>
}
 8004868:	bf00      	nop
 800486a:	3718      	adds	r7, #24
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	fe00e800 	.word	0xfe00e800
 8004874:	ffff0000 	.word	0xffff0000

08004878 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a25      	ldr	r2, [pc, #148]	@ (800491c <I2C_ITListenCplt+0xa4>)
 8004886:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2220      	movs	r2, #32
 8004892:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	f003 0304 	and.w	r3, r3, #4
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d022      	beq.n	80048f4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b8:	b2d2      	uxtb	r2, r2
 80048ba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c0:	1c5a      	adds	r2, r3, #1
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d012      	beq.n	80048f4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048d2:	3b01      	subs	r3, #1
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048de:	b29b      	uxth	r3, r3
 80048e0:	3b01      	subs	r3, #1
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ec:	f043 0204 	orr.w	r2, r3, #4
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80048f4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 f96a 	bl	8004bd2 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2210      	movs	r2, #16
 8004904:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7ff fc57 	bl	80041c2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004914:	bf00      	nop
 8004916:	3708      	adds	r7, #8
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	ffff0000 	.word	0xffff0000

08004920 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004930:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a6d      	ldr	r2, [pc, #436]	@ (8004af4 <I2C_ITError+0x1d4>)
 800493e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	431a      	orrs	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004952:	7bfb      	ldrb	r3, [r7, #15]
 8004954:	2b28      	cmp	r3, #40	@ 0x28
 8004956:	d005      	beq.n	8004964 <I2C_ITError+0x44>
 8004958:	7bfb      	ldrb	r3, [r7, #15]
 800495a:	2b29      	cmp	r3, #41	@ 0x29
 800495c:	d002      	beq.n	8004964 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800495e:	7bfb      	ldrb	r3, [r7, #15]
 8004960:	2b2a      	cmp	r3, #42	@ 0x2a
 8004962:	d10b      	bne.n	800497c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004964:	2103      	movs	r1, #3
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f933 	bl	8004bd2 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2228      	movs	r2, #40	@ 0x28
 8004970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a60      	ldr	r2, [pc, #384]	@ (8004af8 <I2C_ITError+0x1d8>)
 8004978:	635a      	str	r2, [r3, #52]	@ 0x34
 800497a:	e030      	b.n	80049de <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800497c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 f926 	bl	8004bd2 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f8e1 	bl	8004b4e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b60      	cmp	r3, #96	@ 0x60
 8004996:	d01f      	beq.n	80049d8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2220      	movs	r2, #32
 800499c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	f003 0320 	and.w	r3, r3, #32
 80049aa:	2b20      	cmp	r3, #32
 80049ac:	d114      	bne.n	80049d8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	f003 0310 	and.w	r3, r3, #16
 80049b8:	2b10      	cmp	r3, #16
 80049ba:	d109      	bne.n	80049d0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2210      	movs	r2, #16
 80049c2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049c8:	f043 0204 	orr.w	r2, r3, #4
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2220      	movs	r2, #32
 80049d6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049e2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d039      	beq.n	8004a60 <I2C_ITError+0x140>
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2b11      	cmp	r3, #17
 80049f0:	d002      	beq.n	80049f8 <I2C_ITError+0xd8>
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2b21      	cmp	r3, #33	@ 0x21
 80049f6:	d133      	bne.n	8004a60 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a06:	d107      	bne.n	8004a18 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004a16:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7ff f828 	bl	8003a72 <HAL_DMA_GetState>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d017      	beq.n	8004a58 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a2c:	4a33      	ldr	r2, [pc, #204]	@ (8004afc <I2C_ITError+0x1dc>)
 8004a2e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7fe ff0a 	bl	8003856 <HAL_DMA_Abort_IT>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d04d      	beq.n	8004ae4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004a52:	4610      	mov	r0, r2
 8004a54:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a56:	e045      	b.n	8004ae4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f851 	bl	8004b00 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a5e:	e041      	b.n	8004ae4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d039      	beq.n	8004adc <I2C_ITError+0x1bc>
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	2b12      	cmp	r3, #18
 8004a6c:	d002      	beq.n	8004a74 <I2C_ITError+0x154>
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	2b22      	cmp	r3, #34	@ 0x22
 8004a72:	d133      	bne.n	8004adc <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a82:	d107      	bne.n	8004a94 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a92:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7fe ffea 	bl	8003a72 <HAL_DMA_GetState>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d017      	beq.n	8004ad4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aa8:	4a14      	ldr	r2, [pc, #80]	@ (8004afc <I2C_ITError+0x1dc>)
 8004aaa:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7fe fecc 	bl	8003856 <HAL_DMA_Abort_IT>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d011      	beq.n	8004ae8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004ace:	4610      	mov	r0, r2
 8004ad0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ad2:	e009      	b.n	8004ae8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 f813 	bl	8004b00 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ada:	e005      	b.n	8004ae8 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 f80f 	bl	8004b00 <I2C_TreatErrorCallback>
  }
}
 8004ae2:	e002      	b.n	8004aea <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ae4:	bf00      	nop
 8004ae6:	e000      	b.n	8004aea <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ae8:	bf00      	nop
}
 8004aea:	bf00      	nop
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	ffff0000 	.word	0xffff0000
 8004af8:	080041ff 	.word	0x080041ff
 8004afc:	08004b97 	.word	0x08004b97

08004b00 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b60      	cmp	r3, #96	@ 0x60
 8004b12:	d10e      	bne.n	8004b32 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2220      	movs	r2, #32
 8004b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7ff fb5d 	bl	80041ea <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b30:	e009      	b.n	8004b46 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7ff fb48 	bl	80041d6 <HAL_I2C_ErrorCallback>
}
 8004b46:	bf00      	nop
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b083      	sub	sp, #12
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	f003 0302 	and.w	r3, r3, #2
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d103      	bne.n	8004b6c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d007      	beq.n	8004b8a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	699a      	ldr	r2, [r3, #24]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f042 0201 	orr.w	r2, r2, #1
 8004b88:	619a      	str	r2, [r3, #24]
  }
}
 8004b8a:	bf00      	nop
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b084      	sub	sp, #16
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ba2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d003      	beq.n	8004bb4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d003      	beq.n	8004bc4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f7ff ff9b 	bl	8004b00 <I2C_TreatErrorCallback>
}
 8004bca:	bf00      	nop
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b085      	sub	sp, #20
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
 8004bda:	460b      	mov	r3, r1
 8004bdc:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004bde:	2300      	movs	r3, #0
 8004be0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004be2:	887b      	ldrh	r3, [r7, #2]
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00f      	beq.n	8004c0c <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8004bf2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004c00:	2b28      	cmp	r3, #40	@ 0x28
 8004c02:	d003      	beq.n	8004c0c <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004c0a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004c0c:	887b      	ldrh	r3, [r7, #2]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00f      	beq.n	8004c36 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8004c1c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004c2a:	2b28      	cmp	r3, #40	@ 0x28
 8004c2c:	d003      	beq.n	8004c36 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004c34:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004c36:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	da03      	bge.n	8004c46 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004c44:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004c46:	887b      	ldrh	r3, [r7, #2]
 8004c48:	2b10      	cmp	r3, #16
 8004c4a:	d103      	bne.n	8004c54 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004c52:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004c54:	887b      	ldrh	r3, [r7, #2]
 8004c56:	2b20      	cmp	r3, #32
 8004c58:	d103      	bne.n	8004c62 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f043 0320 	orr.w	r3, r3, #32
 8004c60:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004c62:	887b      	ldrh	r3, [r7, #2]
 8004c64:	2b40      	cmp	r3, #64	@ 0x40
 8004c66:	d103      	bne.n	8004c70 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c6e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6819      	ldr	r1, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	43da      	mvns	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	400a      	ands	r2, r1
 8004c80:	601a      	str	r2, [r3, #0]
}
 8004c82:	bf00      	nop
 8004c84:	3714      	adds	r7, #20
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b083      	sub	sp, #12
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
 8004c96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b20      	cmp	r3, #32
 8004ca2:	d138      	bne.n	8004d16 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d101      	bne.n	8004cb2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004cae:	2302      	movs	r3, #2
 8004cb0:	e032      	b.n	8004d18 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2224      	movs	r2, #36	@ 0x24
 8004cbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 0201 	bic.w	r2, r2, #1
 8004cd0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004ce0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	6819      	ldr	r1, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f042 0201 	orr.w	r2, r2, #1
 8004d00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2220      	movs	r2, #32
 8004d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d12:	2300      	movs	r3, #0
 8004d14:	e000      	b.n	8004d18 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d16:	2302      	movs	r3, #2
  }
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b20      	cmp	r3, #32
 8004d38:	d139      	bne.n	8004dae <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d101      	bne.n	8004d48 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d44:	2302      	movs	r3, #2
 8004d46:	e033      	b.n	8004db0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2224      	movs	r2, #36	@ 0x24
 8004d54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 0201 	bic.w	r2, r2, #1
 8004d66:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004d76:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	021b      	lsls	r3, r3, #8
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f042 0201 	orr.w	r2, r2, #1
 8004d98:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	e000      	b.n	8004db0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004dae:	2302      	movs	r3, #2
  }
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3714      	adds	r7, #20
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e0c0      	b.n	8004f50 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d106      	bne.n	8004de8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f009 f9aa 	bl	800e13c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2203      	movs	r2, #3
 8004dec:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4618      	mov	r0, r3
 8004df6:	f004 fc7f 	bl	80096f8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	73fb      	strb	r3, [r7, #15]
 8004dfe:	e03e      	b.n	8004e7e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004e00:	7bfa      	ldrb	r2, [r7, #15]
 8004e02:	6879      	ldr	r1, [r7, #4]
 8004e04:	4613      	mov	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	00db      	lsls	r3, r3, #3
 8004e0c:	440b      	add	r3, r1
 8004e0e:	3311      	adds	r3, #17
 8004e10:	2201      	movs	r2, #1
 8004e12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004e14:	7bfa      	ldrb	r2, [r7, #15]
 8004e16:	6879      	ldr	r1, [r7, #4]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	4413      	add	r3, r2
 8004e1e:	00db      	lsls	r3, r3, #3
 8004e20:	440b      	add	r3, r1
 8004e22:	3310      	adds	r3, #16
 8004e24:	7bfa      	ldrb	r2, [r7, #15]
 8004e26:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004e28:	7bfa      	ldrb	r2, [r7, #15]
 8004e2a:	6879      	ldr	r1, [r7, #4]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	00db      	lsls	r3, r3, #3
 8004e34:	440b      	add	r3, r1
 8004e36:	3313      	adds	r3, #19
 8004e38:	2200      	movs	r2, #0
 8004e3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004e3c:	7bfa      	ldrb	r2, [r7, #15]
 8004e3e:	6879      	ldr	r1, [r7, #4]
 8004e40:	4613      	mov	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	00db      	lsls	r3, r3, #3
 8004e48:	440b      	add	r3, r1
 8004e4a:	3320      	adds	r3, #32
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004e50:	7bfa      	ldrb	r2, [r7, #15]
 8004e52:	6879      	ldr	r1, [r7, #4]
 8004e54:	4613      	mov	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4413      	add	r3, r2
 8004e5a:	00db      	lsls	r3, r3, #3
 8004e5c:	440b      	add	r3, r1
 8004e5e:	3324      	adds	r3, #36	@ 0x24
 8004e60:	2200      	movs	r2, #0
 8004e62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004e64:	7bfb      	ldrb	r3, [r7, #15]
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	1c5a      	adds	r2, r3, #1
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	00db      	lsls	r3, r3, #3
 8004e72:	440b      	add	r3, r1
 8004e74:	2200      	movs	r2, #0
 8004e76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e78:	7bfb      	ldrb	r3, [r7, #15]
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	73fb      	strb	r3, [r7, #15]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	791b      	ldrb	r3, [r3, #4]
 8004e82:	7bfa      	ldrb	r2, [r7, #15]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d3bb      	bcc.n	8004e00 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e88:	2300      	movs	r3, #0
 8004e8a:	73fb      	strb	r3, [r7, #15]
 8004e8c:	e044      	b.n	8004f18 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004e8e:	7bfa      	ldrb	r2, [r7, #15]
 8004e90:	6879      	ldr	r1, [r7, #4]
 8004e92:	4613      	mov	r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4413      	add	r3, r2
 8004e98:	00db      	lsls	r3, r3, #3
 8004e9a:	440b      	add	r3, r1
 8004e9c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004ea4:	7bfa      	ldrb	r2, [r7, #15]
 8004ea6:	6879      	ldr	r1, [r7, #4]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4413      	add	r3, r2
 8004eae:	00db      	lsls	r3, r3, #3
 8004eb0:	440b      	add	r3, r1
 8004eb2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004eb6:	7bfa      	ldrb	r2, [r7, #15]
 8004eb8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004eba:	7bfa      	ldrb	r2, [r7, #15]
 8004ebc:	6879      	ldr	r1, [r7, #4]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4413      	add	r3, r2
 8004ec4:	00db      	lsls	r3, r3, #3
 8004ec6:	440b      	add	r3, r1
 8004ec8:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004ecc:	2200      	movs	r2, #0
 8004ece:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004ed0:	7bfa      	ldrb	r2, [r7, #15]
 8004ed2:	6879      	ldr	r1, [r7, #4]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	4413      	add	r3, r2
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	440b      	add	r3, r1
 8004ede:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004ee6:	7bfa      	ldrb	r2, [r7, #15]
 8004ee8:	6879      	ldr	r1, [r7, #4]
 8004eea:	4613      	mov	r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	4413      	add	r3, r2
 8004ef0:	00db      	lsls	r3, r3, #3
 8004ef2:	440b      	add	r3, r1
 8004ef4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004ef8:	2200      	movs	r2, #0
 8004efa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004efc:	7bfa      	ldrb	r2, [r7, #15]
 8004efe:	6879      	ldr	r1, [r7, #4]
 8004f00:	4613      	mov	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	440b      	add	r3, r1
 8004f0a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004f0e:	2200      	movs	r2, #0
 8004f10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f12:	7bfb      	ldrb	r3, [r7, #15]
 8004f14:	3301      	adds	r3, #1
 8004f16:	73fb      	strb	r3, [r7, #15]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	791b      	ldrb	r3, [r3, #4]
 8004f1c:	7bfa      	ldrb	r2, [r7, #15]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d3b5      	bcc.n	8004e8e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6818      	ldr	r0, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	3304      	adds	r3, #4
 8004f2a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004f2e:	f004 fbfe 	bl	800972e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	7a9b      	ldrb	r3, [r3, #10]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d102      	bne.n	8004f4e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f001 fc40 	bl	80067ce <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d101      	bne.n	8004f6e <HAL_PCD_Start+0x16>
 8004f6a:	2302      	movs	r3, #2
 8004f6c:	e012      	b.n	8004f94 <HAL_PCD_Start+0x3c>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f004 fba5 	bl	80096ca <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f006 fe66 	bl	800bc56 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3708      	adds	r7, #8
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f006 fe6b 	bl	800bc84 <USB_ReadInterrupts>
 8004fae:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 fb04 	bl	80055c8 <PCD_EP_ISR_Handler>

    return;
 8004fc0:	e110      	b.n	80051e4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d013      	beq.n	8004ff4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fde:	b292      	uxth	r2, r2
 8004fe0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f009 f93e 	bl	800e266 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004fea:	2100      	movs	r1, #0
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 f8fc 	bl	80051ea <HAL_PCD_SetAddress>

    return;
 8004ff2:	e0f7      	b.n	80051e4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00c      	beq.n	8005018 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005006:	b29a      	uxth	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005010:	b292      	uxth	r2, r2
 8005012:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005016:	e0e5      	b.n	80051e4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00c      	beq.n	800503c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800502a:	b29a      	uxth	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005034:	b292      	uxth	r2, r2
 8005036:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800503a:	e0d3      	b.n	80051e4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d034      	beq.n	80050b0 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800504e:	b29a      	uxth	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f022 0204 	bic.w	r2, r2, #4
 8005058:	b292      	uxth	r2, r2
 800505a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005066:	b29a      	uxth	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 0208 	bic.w	r2, r2, #8
 8005070:	b292      	uxth	r2, r2
 8005072:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800507c:	2b01      	cmp	r3, #1
 800507e:	d107      	bne.n	8005090 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005088:	2100      	movs	r1, #0
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f009 fae0 	bl	800e650 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f009 f921 	bl	800e2d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800509e:	b29a      	uxth	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80050a8:	b292      	uxth	r2, r2
 80050aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80050ae:	e099      	b.n	80051e4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d027      	beq.n	800510a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f042 0208 	orr.w	r2, r2, #8
 80050cc:	b292      	uxth	r2, r2
 80050ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80050da:	b29a      	uxth	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050e4:	b292      	uxth	r2, r2
 80050e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f042 0204 	orr.w	r2, r2, #4
 80050fc:	b292      	uxth	r2, r2
 80050fe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f009 f8ce 	bl	800e2a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005108:	e06c      	b.n	80051e4 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005110:	2b00      	cmp	r3, #0
 8005112:	d040      	beq.n	8005196 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800511c:	b29a      	uxth	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005126:	b292      	uxth	r2, r2
 8005128:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8005132:	2b00      	cmp	r3, #0
 8005134:	d12b      	bne.n	800518e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800513e:	b29a      	uxth	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f042 0204 	orr.w	r2, r2, #4
 8005148:	b292      	uxth	r2, r2
 800514a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005156:	b29a      	uxth	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f042 0208 	orr.w	r2, r2, #8
 8005160:	b292      	uxth	r2, r2
 8005162:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005176:	b29b      	uxth	r3, r3
 8005178:	089b      	lsrs	r3, r3, #2
 800517a:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005184:	2101      	movs	r1, #1
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f009 fa62 	bl	800e650 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800518c:	e02a      	b.n	80051e4 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f009 f888 	bl	800e2a4 <HAL_PCD_SuspendCallback>
    return;
 8005194:	e026      	b.n	80051e4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00f      	beq.n	80051c0 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80051b2:	b292      	uxth	r2, r2
 80051b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f009 f846 	bl	800e24a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80051be:	e011      	b.n	80051e4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00c      	beq.n	80051e4 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051dc:	b292      	uxth	r2, r2
 80051de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80051e2:	bf00      	nop
  }
}
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b082      	sub	sp, #8
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
 80051f2:	460b      	mov	r3, r1
 80051f4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d101      	bne.n	8005204 <HAL_PCD_SetAddress+0x1a>
 8005200:	2302      	movs	r3, #2
 8005202:	e012      	b.n	800522a <HAL_PCD_SetAddress+0x40>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	78fa      	ldrb	r2, [r7, #3]
 8005210:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	78fa      	ldrb	r2, [r7, #3]
 8005218:	4611      	mov	r1, r2
 800521a:	4618      	mov	r0, r3
 800521c:	f006 fd07 	bl	800bc2e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3708      	adds	r7, #8
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b084      	sub	sp, #16
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
 800523a:	4608      	mov	r0, r1
 800523c:	4611      	mov	r1, r2
 800523e:	461a      	mov	r2, r3
 8005240:	4603      	mov	r3, r0
 8005242:	70fb      	strb	r3, [r7, #3]
 8005244:	460b      	mov	r3, r1
 8005246:	803b      	strh	r3, [r7, #0]
 8005248:	4613      	mov	r3, r2
 800524a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800524c:	2300      	movs	r3, #0
 800524e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005250:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005254:	2b00      	cmp	r3, #0
 8005256:	da0e      	bge.n	8005276 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005258:	78fb      	ldrb	r3, [r7, #3]
 800525a:	f003 0207 	and.w	r2, r3, #7
 800525e:	4613      	mov	r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4413      	add	r3, r2
 8005264:	00db      	lsls	r3, r3, #3
 8005266:	3310      	adds	r3, #16
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	4413      	add	r3, r2
 800526c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2201      	movs	r2, #1
 8005272:	705a      	strb	r2, [r3, #1]
 8005274:	e00e      	b.n	8005294 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005276:	78fb      	ldrb	r3, [r7, #3]
 8005278:	f003 0207 	and.w	r2, r3, #7
 800527c:	4613      	mov	r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4413      	add	r3, r2
 8005282:	00db      	lsls	r3, r3, #3
 8005284:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	4413      	add	r3, r2
 800528c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005294:	78fb      	ldrb	r3, [r7, #3]
 8005296:	f003 0307 	and.w	r3, r3, #7
 800529a:	b2da      	uxtb	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80052a0:	883a      	ldrh	r2, [r7, #0]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	78ba      	ldrb	r2, [r7, #2]
 80052aa:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80052ac:	78bb      	ldrb	r3, [r7, #2]
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d102      	bne.n	80052b8 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d101      	bne.n	80052c6 <HAL_PCD_EP_Open+0x94>
 80052c2:	2302      	movs	r3, #2
 80052c4:	e00e      	b.n	80052e4 <HAL_PCD_EP_Open+0xb2>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68f9      	ldr	r1, [r7, #12]
 80052d4:	4618      	mov	r0, r3
 80052d6:	f004 fa49 	bl	800976c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80052e2:	7afb      	ldrb	r3, [r7, #11]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	460b      	mov	r3, r1
 80052f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80052f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	da0e      	bge.n	800531e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005300:	78fb      	ldrb	r3, [r7, #3]
 8005302:	f003 0207 	and.w	r2, r3, #7
 8005306:	4613      	mov	r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4413      	add	r3, r2
 800530c:	00db      	lsls	r3, r3, #3
 800530e:	3310      	adds	r3, #16
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	4413      	add	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2201      	movs	r2, #1
 800531a:	705a      	strb	r2, [r3, #1]
 800531c:	e00e      	b.n	800533c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800531e:	78fb      	ldrb	r3, [r7, #3]
 8005320:	f003 0207 	and.w	r2, r3, #7
 8005324:	4613      	mov	r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4413      	add	r3, r2
 800532a:	00db      	lsls	r3, r3, #3
 800532c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	4413      	add	r3, r2
 8005334:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800533c:	78fb      	ldrb	r3, [r7, #3]
 800533e:	f003 0307 	and.w	r3, r3, #7
 8005342:	b2da      	uxtb	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800534e:	2b01      	cmp	r3, #1
 8005350:	d101      	bne.n	8005356 <HAL_PCD_EP_Close+0x6a>
 8005352:	2302      	movs	r3, #2
 8005354:	e00e      	b.n	8005374 <HAL_PCD_EP_Close+0x88>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68f9      	ldr	r1, [r7, #12]
 8005364:	4618      	mov	r0, r3
 8005366:	f004 fdc5 	bl	8009ef4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	607a      	str	r2, [r7, #4]
 8005386:	603b      	str	r3, [r7, #0]
 8005388:	460b      	mov	r3, r1
 800538a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800538c:	7afb      	ldrb	r3, [r7, #11]
 800538e:	f003 0207 	and.w	r2, r3, #7
 8005392:	4613      	mov	r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	4413      	add	r3, r2
 8005398:	00db      	lsls	r3, r3, #3
 800539a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	4413      	add	r3, r2
 80053a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	683a      	ldr	r2, [r7, #0]
 80053ae:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	2200      	movs	r2, #0
 80053b4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	2200      	movs	r2, #0
 80053ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053bc:	7afb      	ldrb	r3, [r7, #11]
 80053be:	f003 0307 	and.w	r3, r3, #7
 80053c2:	b2da      	uxtb	r2, r3
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6979      	ldr	r1, [r7, #20]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f004 ff7d 	bl	800a2ce <USB_EPStartXfer>

  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3718      	adds	r7, #24
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80053de:	b480      	push	{r7}
 80053e0:	b083      	sub	sp, #12
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
 80053e6:	460b      	mov	r3, r1
 80053e8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80053ea:	78fb      	ldrb	r3, [r7, #3]
 80053ec:	f003 0207 	and.w	r2, r3, #7
 80053f0:	6879      	ldr	r1, [r7, #4]
 80053f2:	4613      	mov	r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4413      	add	r3, r2
 80053f8:	00db      	lsls	r3, r3, #3
 80053fa:	440b      	add	r3, r1
 80053fc:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8005400:	681b      	ldr	r3, [r3, #0]
}
 8005402:	4618      	mov	r0, r3
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b086      	sub	sp, #24
 8005412:	af00      	add	r7, sp, #0
 8005414:	60f8      	str	r0, [r7, #12]
 8005416:	607a      	str	r2, [r7, #4]
 8005418:	603b      	str	r3, [r7, #0]
 800541a:	460b      	mov	r3, r1
 800541c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800541e:	7afb      	ldrb	r3, [r7, #11]
 8005420:	f003 0207 	and.w	r2, r3, #7
 8005424:	4613      	mov	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4413      	add	r3, r2
 800542a:	00db      	lsls	r3, r3, #3
 800542c:	3310      	adds	r3, #16
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	4413      	add	r3, r2
 8005432:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	2200      	movs	r2, #0
 8005452:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	2201      	movs	r2, #1
 8005458:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800545a:	7afb      	ldrb	r3, [r7, #11]
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	b2da      	uxtb	r2, r3
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6979      	ldr	r1, [r7, #20]
 800546c:	4618      	mov	r0, r3
 800546e:	f004 ff2e 	bl	800a2ce <USB_EPStartXfer>

  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3718      	adds	r7, #24
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	460b      	mov	r3, r1
 8005486:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005488:	78fb      	ldrb	r3, [r7, #3]
 800548a:	f003 0307 	and.w	r3, r3, #7
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	7912      	ldrb	r2, [r2, #4]
 8005492:	4293      	cmp	r3, r2
 8005494:	d901      	bls.n	800549a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e03e      	b.n	8005518 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800549a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	da0e      	bge.n	80054c0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054a2:	78fb      	ldrb	r3, [r7, #3]
 80054a4:	f003 0207 	and.w	r2, r3, #7
 80054a8:	4613      	mov	r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	4413      	add	r3, r2
 80054ae:	00db      	lsls	r3, r3, #3
 80054b0:	3310      	adds	r3, #16
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	4413      	add	r3, r2
 80054b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2201      	movs	r2, #1
 80054bc:	705a      	strb	r2, [r3, #1]
 80054be:	e00c      	b.n	80054da <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80054c0:	78fa      	ldrb	r2, [r7, #3]
 80054c2:	4613      	mov	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4413      	add	r3, r2
 80054c8:	00db      	lsls	r3, r3, #3
 80054ca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	4413      	add	r3, r2
 80054d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2201      	movs	r2, #1
 80054de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054e0:	78fb      	ldrb	r3, [r7, #3]
 80054e2:	f003 0307 	and.w	r3, r3, #7
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d101      	bne.n	80054fa <HAL_PCD_EP_SetStall+0x7e>
 80054f6:	2302      	movs	r3, #2
 80054f8:	e00e      	b.n	8005518 <HAL_PCD_EP_SetStall+0x9c>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68f9      	ldr	r1, [r7, #12]
 8005508:	4618      	mov	r0, r3
 800550a:	f006 fa91 	bl	800ba30 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	460b      	mov	r3, r1
 800552a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800552c:	78fb      	ldrb	r3, [r7, #3]
 800552e:	f003 030f 	and.w	r3, r3, #15
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	7912      	ldrb	r2, [r2, #4]
 8005536:	4293      	cmp	r3, r2
 8005538:	d901      	bls.n	800553e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e040      	b.n	80055c0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800553e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005542:	2b00      	cmp	r3, #0
 8005544:	da0e      	bge.n	8005564 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005546:	78fb      	ldrb	r3, [r7, #3]
 8005548:	f003 0207 	and.w	r2, r3, #7
 800554c:	4613      	mov	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4413      	add	r3, r2
 8005552:	00db      	lsls	r3, r3, #3
 8005554:	3310      	adds	r3, #16
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	4413      	add	r3, r2
 800555a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2201      	movs	r2, #1
 8005560:	705a      	strb	r2, [r3, #1]
 8005562:	e00e      	b.n	8005582 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005564:	78fb      	ldrb	r3, [r7, #3]
 8005566:	f003 0207 	and.w	r2, r3, #7
 800556a:	4613      	mov	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4413      	add	r3, r2
 8005570:	00db      	lsls	r3, r3, #3
 8005572:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	4413      	add	r3, r2
 800557a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005588:	78fb      	ldrb	r3, [r7, #3]
 800558a:	f003 0307 	and.w	r3, r3, #7
 800558e:	b2da      	uxtb	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800559a:	2b01      	cmp	r3, #1
 800559c:	d101      	bne.n	80055a2 <HAL_PCD_EP_ClrStall+0x82>
 800559e:	2302      	movs	r3, #2
 80055a0:	e00e      	b.n	80055c0 <HAL_PCD_EP_ClrStall+0xa0>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68f9      	ldr	r1, [r7, #12]
 80055b0:	4618      	mov	r0, r3
 80055b2:	f006 fa8e 	bl	800bad2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b096      	sub	sp, #88	@ 0x58
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80055d0:	e3ad      	b.n	8005d2e <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80055da:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80055de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	f003 030f 	and.w	r3, r3, #15
 80055e8:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80055ec:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f040 816f 	bne.w	80058d4 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80055f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80055fa:	f003 0310 	and.w	r3, r3, #16
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d14c      	bne.n	800569c <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	881b      	ldrh	r3, [r3, #0]
 8005608:	b29b      	uxth	r3, r3
 800560a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800560e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005612:	81fb      	strh	r3, [r7, #14]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	89fb      	ldrh	r3, [r7, #14]
 800561a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800561e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005622:	b29b      	uxth	r3, r3
 8005624:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	3310      	adds	r3, #16
 800562a:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005634:	b29b      	uxth	r3, r3
 8005636:	461a      	mov	r2, r3
 8005638:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	00db      	lsls	r3, r3, #3
 800563e:	4413      	add	r3, r2
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	6812      	ldr	r2, [r2, #0]
 8005644:	4413      	add	r3, r2
 8005646:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800564a:	881b      	ldrh	r3, [r3, #0]
 800564c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005650:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005652:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005654:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005656:	695a      	ldr	r2, [r3, #20]
 8005658:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	441a      	add	r2, r3
 800565e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005660:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005662:	2100      	movs	r1, #0
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f008 fdd6 	bl	800e216 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	7b1b      	ldrb	r3, [r3, #12]
 800566e:	b2db      	uxtb	r3, r3
 8005670:	2b00      	cmp	r3, #0
 8005672:	f000 835c 	beq.w	8005d2e <PCD_EP_ISR_Handler+0x766>
 8005676:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	2b00      	cmp	r3, #0
 800567c:	f040 8357 	bne.w	8005d2e <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	7b1b      	ldrb	r3, [r3, #12]
 8005684:	b2db      	uxtb	r3, r3
 8005686:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800568a:	b2da      	uxtb	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	731a      	strb	r2, [r3, #12]
 800569a:	e348      	b.n	8005d2e <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80056a2:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	881b      	ldrh	r3, [r3, #0]
 80056aa:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80056ae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80056b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d032      	beq.n	8005720 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	461a      	mov	r2, r3
 80056c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	4413      	add	r3, r2
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	6812      	ldr	r2, [r2, #0]
 80056d2:	4413      	add	r3, r2
 80056d4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80056d8:	881b      	ldrh	r3, [r3, #0]
 80056da:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80056de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056e0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6818      	ldr	r0, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80056ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056ee:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80056f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056f2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	f006 fb17 	bl	800bd28 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	b29a      	uxth	r2, r3
 8005702:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005706:	4013      	ands	r3, r2
 8005708:	823b      	strh	r3, [r7, #16]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	8a3a      	ldrh	r2, [r7, #16]
 8005710:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005714:	b292      	uxth	r2, r2
 8005716:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f008 fd4f 	bl	800e1bc <HAL_PCD_SetupStageCallback>
 800571e:	e306      	b.n	8005d2e <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005720:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8005724:	2b00      	cmp	r3, #0
 8005726:	f280 8302 	bge.w	8005d2e <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	881b      	ldrh	r3, [r3, #0]
 8005730:	b29a      	uxth	r2, r3
 8005732:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005736:	4013      	ands	r3, r2
 8005738:	83fb      	strh	r3, [r7, #30]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	8bfa      	ldrh	r2, [r7, #30]
 8005740:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005744:	b292      	uxth	r2, r2
 8005746:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005750:	b29b      	uxth	r3, r3
 8005752:	461a      	mov	r2, r3
 8005754:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	00db      	lsls	r3, r3, #3
 800575a:	4413      	add	r3, r2
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	6812      	ldr	r2, [r2, #0]
 8005760:	4413      	add	r3, r2
 8005762:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005766:	881b      	ldrh	r3, [r3, #0]
 8005768:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800576c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800576e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005770:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005772:	69db      	ldr	r3, [r3, #28]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d019      	beq.n	80057ac <PCD_EP_ISR_Handler+0x1e4>
 8005778:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d015      	beq.n	80057ac <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6818      	ldr	r0, [r3, #0]
 8005784:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005786:	6959      	ldr	r1, [r3, #20]
 8005788:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800578a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800578c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800578e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005790:	b29b      	uxth	r3, r3
 8005792:	f006 fac9 	bl	800bd28 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005796:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005798:	695a      	ldr	r2, [r3, #20]
 800579a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800579c:	69db      	ldr	r3, [r3, #28]
 800579e:	441a      	add	r2, r3
 80057a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057a2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80057a4:	2100      	movs	r1, #0
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f008 fd1a 	bl	800e1e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	881b      	ldrh	r3, [r3, #0]
 80057b2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80057b6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80057ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f040 82b5 	bne.w	8005d2e <PCD_EP_ISR_Handler+0x766>
 80057c4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80057c8:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80057cc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80057d0:	f000 82ad 	beq.w	8005d2e <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	61bb      	str	r3, [r7, #24]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	461a      	mov	r2, r3
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	4413      	add	r3, r2
 80057ea:	61bb      	str	r3, [r7, #24]
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80057f2:	617b      	str	r3, [r7, #20]
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	881b      	ldrh	r3, [r3, #0]
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057fe:	b29a      	uxth	r2, r3
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	801a      	strh	r2, [r3, #0]
 8005804:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	2b3e      	cmp	r3, #62	@ 0x3e
 800580a:	d91d      	bls.n	8005848 <PCD_EP_ISR_Handler+0x280>
 800580c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	095b      	lsrs	r3, r3, #5
 8005812:	647b      	str	r3, [r7, #68]	@ 0x44
 8005814:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	f003 031f 	and.w	r3, r3, #31
 800581c:	2b00      	cmp	r3, #0
 800581e:	d102      	bne.n	8005826 <PCD_EP_ISR_Handler+0x25e>
 8005820:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005822:	3b01      	subs	r3, #1
 8005824:	647b      	str	r3, [r7, #68]	@ 0x44
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	881b      	ldrh	r3, [r3, #0]
 800582a:	b29a      	uxth	r2, r3
 800582c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800582e:	b29b      	uxth	r3, r3
 8005830:	029b      	lsls	r3, r3, #10
 8005832:	b29b      	uxth	r3, r3
 8005834:	4313      	orrs	r3, r2
 8005836:	b29b      	uxth	r3, r3
 8005838:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800583c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005840:	b29a      	uxth	r2, r3
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	801a      	strh	r2, [r3, #0]
 8005846:	e026      	b.n	8005896 <PCD_EP_ISR_Handler+0x2ce>
 8005848:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d10a      	bne.n	8005866 <PCD_EP_ISR_Handler+0x29e>
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	b29b      	uxth	r3, r3
 8005856:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800585a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800585e:	b29a      	uxth	r2, r3
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	801a      	strh	r2, [r3, #0]
 8005864:	e017      	b.n	8005896 <PCD_EP_ISR_Handler+0x2ce>
 8005866:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	085b      	lsrs	r3, r3, #1
 800586c:	647b      	str	r3, [r7, #68]	@ 0x44
 800586e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	2b00      	cmp	r3, #0
 8005878:	d002      	beq.n	8005880 <PCD_EP_ISR_Handler+0x2b8>
 800587a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800587c:	3301      	adds	r3, #1
 800587e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	881b      	ldrh	r3, [r3, #0]
 8005884:	b29a      	uxth	r2, r3
 8005886:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005888:	b29b      	uxth	r3, r3
 800588a:	029b      	lsls	r3, r3, #10
 800588c:	b29b      	uxth	r3, r3
 800588e:	4313      	orrs	r3, r2
 8005890:	b29a      	uxth	r2, r3
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	881b      	ldrh	r3, [r3, #0]
 800589c:	b29b      	uxth	r3, r3
 800589e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058a6:	827b      	strh	r3, [r7, #18]
 80058a8:	8a7b      	ldrh	r3, [r7, #18]
 80058aa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80058ae:	827b      	strh	r3, [r7, #18]
 80058b0:	8a7b      	ldrh	r3, [r7, #18]
 80058b2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80058b6:	827b      	strh	r3, [r7, #18]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	8a7b      	ldrh	r3, [r7, #18]
 80058be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	8013      	strh	r3, [r2, #0]
 80058d2:	e22c      	b.n	8005d2e <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	461a      	mov	r2, r3
 80058da:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	4413      	add	r3, r2
 80058e2:	881b      	ldrh	r3, [r3, #0]
 80058e4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80058e8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f280 80f6 	bge.w	8005ade <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	461a      	mov	r2, r3
 80058f8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4413      	add	r3, r2
 8005900:	881b      	ldrh	r3, [r3, #0]
 8005902:	b29a      	uxth	r2, r3
 8005904:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005908:	4013      	ands	r3, r2
 800590a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	461a      	mov	r2, r3
 8005914:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	4413      	add	r3, r2
 800591c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8005920:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005924:	b292      	uxth	r2, r2
 8005926:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005928:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800592c:	4613      	mov	r3, r2
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	4413      	add	r3, r2
 8005932:	00db      	lsls	r3, r3, #3
 8005934:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	4413      	add	r3, r2
 800593c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800593e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005940:	7b1b      	ldrb	r3, [r3, #12]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d123      	bne.n	800598e <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800594e:	b29b      	uxth	r3, r3
 8005950:	461a      	mov	r2, r3
 8005952:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	00db      	lsls	r3, r3, #3
 8005958:	4413      	add	r3, r2
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	6812      	ldr	r2, [r2, #0]
 800595e:	4413      	add	r3, r2
 8005960:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005964:	881b      	ldrh	r3, [r3, #0]
 8005966:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800596a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800596e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005972:	2b00      	cmp	r3, #0
 8005974:	f000 808e 	beq.w	8005a94 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6818      	ldr	r0, [r3, #0]
 800597c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800597e:	6959      	ldr	r1, [r3, #20]
 8005980:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005982:	88da      	ldrh	r2, [r3, #6]
 8005984:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005988:	f006 f9ce 	bl	800bd28 <USB_ReadPMA>
 800598c:	e082      	b.n	8005a94 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800598e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005990:	78db      	ldrb	r3, [r3, #3]
 8005992:	2b02      	cmp	r3, #2
 8005994:	d10a      	bne.n	80059ac <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005996:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800599a:	461a      	mov	r2, r3
 800599c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f9d3 	bl	8005d4a <HAL_PCD_EP_DB_Receive>
 80059a4:	4603      	mov	r3, r0
 80059a6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80059aa:	e073      	b.n	8005a94 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	461a      	mov	r2, r3
 80059b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	4413      	add	r3, r2
 80059ba:	881b      	ldrh	r3, [r3, #0]
 80059bc:	b29b      	uxth	r3, r3
 80059be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059c6:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	461a      	mov	r2, r3
 80059d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	441a      	add	r2, r3
 80059d8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80059dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059e8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	461a      	mov	r2, r3
 80059f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4413      	add	r3, r2
 80059fe:	881b      	ldrh	r3, [r3, #0]
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d022      	beq.n	8005a50 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	461a      	mov	r2, r3
 8005a16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	00db      	lsls	r3, r3, #3
 8005a1c:	4413      	add	r3, r2
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	6812      	ldr	r2, [r2, #0]
 8005a22:	4413      	add	r3, r2
 8005a24:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005a28:	881b      	ldrh	r3, [r3, #0]
 8005a2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a2e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8005a32:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d02c      	beq.n	8005a94 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6818      	ldr	r0, [r3, #0]
 8005a3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a40:	6959      	ldr	r1, [r3, #20]
 8005a42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a44:	891a      	ldrh	r2, [r3, #8]
 8005a46:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005a4a:	f006 f96d 	bl	800bd28 <USB_ReadPMA>
 8005a4e:	e021      	b.n	8005a94 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	00db      	lsls	r3, r3, #3
 8005a62:	4413      	add	r3, r2
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	6812      	ldr	r2, [r2, #0]
 8005a68:	4413      	add	r3, r2
 8005a6a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005a6e:	881b      	ldrh	r3, [r3, #0]
 8005a70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a74:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8005a78:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d009      	beq.n	8005a94 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6818      	ldr	r0, [r3, #0]
 8005a84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a86:	6959      	ldr	r1, [r3, #20]
 8005a88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a8a:	895a      	ldrh	r2, [r3, #10]
 8005a8c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005a90:	f006 f94a 	bl	800bd28 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005a94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a96:	69da      	ldr	r2, [r3, #28]
 8005a98:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005a9c:	441a      	add	r2, r3
 8005a9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005aa0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005aa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005aa4:	695a      	ldr	r2, [r3, #20]
 8005aa6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005aaa:	441a      	add	r2, r3
 8005aac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005aae:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005ab0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d005      	beq.n	8005ac4 <PCD_EP_ISR_Handler+0x4fc>
 8005ab8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8005abc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d206      	bcs.n	8005ad2 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005ac4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	4619      	mov	r1, r3
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f008 fb88 	bl	800e1e0 <HAL_PCD_DataOutStageCallback>
 8005ad0:	e005      	b.n	8005ade <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f004 fbf8 	bl	800a2ce <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005ade:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	f000 8121 	beq.w	8005d2e <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8005aec:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8005af0:	4613      	mov	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4413      	add	r3, r2
 8005af6:	00db      	lsls	r3, r3, #3
 8005af8:	3310      	adds	r3, #16
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	4413      	add	r3, r2
 8005afe:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	461a      	mov	r2, r3
 8005b06:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	4413      	add	r3, r2
 8005b0e:	881b      	ldrh	r3, [r3, #0]
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005b16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b1a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	461a      	mov	r2, r3
 8005b24:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	441a      	add	r2, r3
 8005b2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005b30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005b3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b3e:	78db      	ldrb	r3, [r3, #3]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	f040 80a2 	bne.w	8005c8a <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8005b46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b48:	2200      	movs	r2, #0
 8005b4a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005b4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b4e:	7b1b      	ldrb	r3, [r3, #12]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f000 8093 	beq.w	8005c7c <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005b56:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d046      	beq.n	8005bf0 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b64:	785b      	ldrb	r3, [r3, #1]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d126      	bne.n	8005bb8 <PCD_EP_ISR_Handler+0x5f0>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7e:	4413      	add	r3, r2
 8005b80:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	00da      	lsls	r2, r3, #3
 8005b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005b90:	623b      	str	r3, [r7, #32]
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	881b      	ldrh	r3, [r3, #0]
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	6a3b      	ldr	r3, [r7, #32]
 8005ba0:	801a      	strh	r2, [r3, #0]
 8005ba2:	6a3b      	ldr	r3, [r7, #32]
 8005ba4:	881b      	ldrh	r3, [r3, #0]
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	6a3b      	ldr	r3, [r7, #32]
 8005bb4:	801a      	strh	r2, [r3, #0]
 8005bb6:	e061      	b.n	8005c7c <PCD_EP_ISR_Handler+0x6b4>
 8005bb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bba:	785b      	ldrb	r3, [r3, #1]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d15d      	bne.n	8005c7c <PCD_EP_ISR_Handler+0x6b4>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bd4:	4413      	add	r3, r2
 8005bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	00da      	lsls	r2, r3, #3
 8005bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005be0:	4413      	add	r3, r2
 8005be2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005be6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bea:	2200      	movs	r2, #0
 8005bec:	801a      	strh	r2, [r3, #0]
 8005bee:	e045      	b.n	8005c7c <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bf8:	785b      	ldrb	r3, [r3, #1]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d126      	bne.n	8005c4c <PCD_EP_ISR_Handler+0x684>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	461a      	mov	r2, r3
 8005c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c12:	4413      	add	r3, r2
 8005c14:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	00da      	lsls	r2, r3, #3
 8005c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c1e:	4413      	add	r3, r2
 8005c20:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005c24:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c28:	881b      	ldrh	r3, [r3, #0]
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c34:	801a      	strh	r2, [r3, #0]
 8005c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c38:	881b      	ldrh	r3, [r3, #0]
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c48:	801a      	strh	r2, [r3, #0]
 8005c4a:	e017      	b.n	8005c7c <PCD_EP_ISR_Handler+0x6b4>
 8005c4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c4e:	785b      	ldrb	r3, [r3, #1]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d113      	bne.n	8005c7c <PCD_EP_ISR_Handler+0x6b4>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	461a      	mov	r2, r3
 8005c60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c62:	4413      	add	r3, r2
 8005c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	00da      	lsls	r2, r3, #3
 8005c6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c6e:	4413      	add	r3, r2
 8005c70:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005c74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c78:	2200      	movs	r2, #0
 8005c7a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	4619      	mov	r1, r3
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f008 fac7 	bl	800e216 <HAL_PCD_DataInStageCallback>
 8005c88:	e051      	b.n	8005d2e <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005c8a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005c8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d144      	bne.n	8005d20 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	00db      	lsls	r3, r3, #3
 8005ca8:	4413      	add	r3, r2
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	6812      	ldr	r2, [r2, #0]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005cb4:	881b      	ldrh	r3, [r3, #0]
 8005cb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cba:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8005cbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cc0:	699a      	ldr	r2, [r3, #24]
 8005cc2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d907      	bls.n	8005cda <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8005cca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ccc:	699a      	ldr	r2, [r3, #24]
 8005cce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005cd2:	1ad2      	subs	r2, r2, r3
 8005cd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cd6:	619a      	str	r2, [r3, #24]
 8005cd8:	e002      	b.n	8005ce0 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8005cda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cdc:	2200      	movs	r2, #0
 8005cde:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005ce0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d106      	bne.n	8005cf6 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005ce8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	4619      	mov	r1, r3
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f008 fa91 	bl	800e216 <HAL_PCD_DataInStageCallback>
 8005cf4:	e01b      	b.n	8005d2e <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005cf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cf8:	695a      	ldr	r2, [r3, #20]
 8005cfa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005cfe:	441a      	add	r2, r3
 8005d00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d02:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005d04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d06:	69da      	ldr	r2, [r3, #28]
 8005d08:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005d0c:	441a      	add	r2, r3
 8005d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d10:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f004 fad8 	bl	800a2ce <USB_EPStartXfer>
 8005d1e:	e006      	b.n	8005d2e <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005d20:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005d24:	461a      	mov	r2, r3
 8005d26:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 f917 	bl	8005f5c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	b21b      	sxth	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f6ff ac49 	blt.w	80055d2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3758      	adds	r7, #88	@ 0x58
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b088      	sub	sp, #32
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	60f8      	str	r0, [r7, #12]
 8005d52:	60b9      	str	r1, [r7, #8]
 8005d54:	4613      	mov	r3, r2
 8005d56:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005d58:	88fb      	ldrh	r3, [r7, #6]
 8005d5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d07c      	beq.n	8005e5c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	00db      	lsls	r3, r3, #3
 8005d74:	4413      	add	r3, r2
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	6812      	ldr	r2, [r2, #0]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005d80:	881b      	ldrh	r3, [r3, #0]
 8005d82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d86:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	699a      	ldr	r2, [r3, #24]
 8005d8c:	8b7b      	ldrh	r3, [r7, #26]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d306      	bcc.n	8005da0 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	699a      	ldr	r2, [r3, #24]
 8005d96:	8b7b      	ldrh	r3, [r7, #26]
 8005d98:	1ad2      	subs	r2, r2, r3
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	619a      	str	r2, [r3, #24]
 8005d9e:	e002      	b.n	8005da6 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	2200      	movs	r2, #0
 8005da4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d123      	bne.n	8005df6 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	461a      	mov	r2, r3
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	4413      	add	r3, r2
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005dc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dc8:	833b      	strh	r3, [r7, #24]
 8005dca:	8b3b      	ldrh	r3, [r7, #24]
 8005dcc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005dd0:	833b      	strh	r3, [r7, #24]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	441a      	add	r2, r3
 8005de0:	8b3b      	ldrh	r3, [r7, #24]
 8005de2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005de6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005df6:	88fb      	ldrh	r3, [r7, #6]
 8005df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d01f      	beq.n	8005e40 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	461a      	mov	r2, r3
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	881b      	ldrh	r3, [r3, #0]
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e1a:	82fb      	strh	r3, [r7, #22]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	461a      	mov	r2, r3
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	441a      	add	r2, r3
 8005e2a:	8afb      	ldrh	r3, [r7, #22]
 8005e2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e38:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005e40:	8b7b      	ldrh	r3, [r7, #26]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f000 8085 	beq.w	8005f52 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6818      	ldr	r0, [r3, #0]
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	6959      	ldr	r1, [r3, #20]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	891a      	ldrh	r2, [r3, #8]
 8005e54:	8b7b      	ldrh	r3, [r7, #26]
 8005e56:	f005 ff67 	bl	800bd28 <USB_ReadPMA>
 8005e5a:	e07a      	b.n	8005f52 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	461a      	mov	r2, r3
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	00db      	lsls	r3, r3, #3
 8005e6e:	4413      	add	r3, r2
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	6812      	ldr	r2, [r2, #0]
 8005e74:	4413      	add	r3, r2
 8005e76:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005e7a:	881b      	ldrh	r3, [r3, #0]
 8005e7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e80:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	699a      	ldr	r2, [r3, #24]
 8005e86:	8b7b      	ldrh	r3, [r7, #26]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d306      	bcc.n	8005e9a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	699a      	ldr	r2, [r3, #24]
 8005e90:	8b7b      	ldrh	r3, [r7, #26]
 8005e92:	1ad2      	subs	r2, r2, r3
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	619a      	str	r2, [r3, #24]
 8005e98:	e002      	b.n	8005ea0 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d123      	bne.n	8005ef0 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	461a      	mov	r2, r3
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4413      	add	r3, r2
 8005eb6:	881b      	ldrh	r3, [r3, #0]
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ebe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ec2:	83fb      	strh	r3, [r7, #30]
 8005ec4:	8bfb      	ldrh	r3, [r7, #30]
 8005ec6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005eca:	83fb      	strh	r3, [r7, #30]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	441a      	add	r2, r3
 8005eda:	8bfb      	ldrh	r3, [r7, #30]
 8005edc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ee0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ee4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ee8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005ef0:	88fb      	ldrh	r3, [r7, #6]
 8005ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d11f      	bne.n	8005f3a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	461a      	mov	r2, r3
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	4413      	add	r3, r2
 8005f08:	881b      	ldrh	r3, [r3, #0]
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f14:	83bb      	strh	r3, [r7, #28]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	441a      	add	r2, r3
 8005f24:	8bbb      	ldrh	r3, [r7, #28]
 8005f26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f32:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005f3a:	8b7b      	ldrh	r3, [r7, #26]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d008      	beq.n	8005f52 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6818      	ldr	r0, [r3, #0]
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	6959      	ldr	r1, [r3, #20]
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	895a      	ldrh	r2, [r3, #10]
 8005f4c:	8b7b      	ldrh	r3, [r7, #26]
 8005f4e:	f005 feeb 	bl	800bd28 <USB_ReadPMA>
    }
  }

  return count;
 8005f52:	8b7b      	ldrh	r3, [r7, #26]
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3720      	adds	r7, #32
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b0a4      	sub	sp, #144	@ 0x90
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	4613      	mov	r3, r2
 8005f68:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005f6a:	88fb      	ldrh	r3, [r7, #6]
 8005f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f000 81db 	beq.w	800632c <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	461a      	mov	r2, r3
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	00db      	lsls	r3, r3, #3
 8005f88:	4413      	add	r3, r2
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	6812      	ldr	r2, [r2, #0]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005f94:	881b      	ldrh	r3, [r3, #0]
 8005f96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f9a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	699a      	ldr	r2, [r3, #24]
 8005fa2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d907      	bls.n	8005fba <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	699a      	ldr	r2, [r3, #24]
 8005fae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005fb2:	1ad2      	subs	r2, r2, r3
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	619a      	str	r2, [r3, #24]
 8005fb8:	e002      	b.n	8005fc0 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f040 80b9 	bne.w	800613c <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	785b      	ldrb	r3, [r3, #1]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d126      	bne.n	8006020 <HAL_PCD_EP_DB_Transmit+0xc4>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fe6:	4413      	add	r3, r2
 8005fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	00da      	lsls	r2, r3, #3
 8005ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ffc:	881b      	ldrh	r3, [r3, #0]
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006004:	b29a      	uxth	r2, r3
 8006006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006008:	801a      	strh	r2, [r3, #0]
 800600a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800600c:	881b      	ldrh	r3, [r3, #0]
 800600e:	b29b      	uxth	r3, r3
 8006010:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006014:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006018:	b29a      	uxth	r2, r3
 800601a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800601c:	801a      	strh	r2, [r3, #0]
 800601e:	e01a      	b.n	8006056 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	785b      	ldrb	r3, [r3, #1]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d116      	bne.n	8006056 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	637b      	str	r3, [r7, #52]	@ 0x34
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006036:	b29b      	uxth	r3, r3
 8006038:	461a      	mov	r2, r3
 800603a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800603c:	4413      	add	r3, r2
 800603e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	00da      	lsls	r2, r3, #3
 8006046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006048:	4413      	add	r3, r2
 800604a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800604e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006052:	2200      	movs	r2, #0
 8006054:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	627b      	str	r3, [r7, #36]	@ 0x24
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	785b      	ldrb	r3, [r3, #1]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d126      	bne.n	80060b2 <HAL_PCD_EP_DB_Transmit+0x156>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	61fb      	str	r3, [r7, #28]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006072:	b29b      	uxth	r3, r3
 8006074:	461a      	mov	r2, r3
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	4413      	add	r3, r2
 800607a:	61fb      	str	r3, [r7, #28]
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	00da      	lsls	r2, r3, #3
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	4413      	add	r3, r2
 8006086:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800608a:	61bb      	str	r3, [r7, #24]
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	881b      	ldrh	r3, [r3, #0]
 8006090:	b29b      	uxth	r3, r3
 8006092:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006096:	b29a      	uxth	r2, r3
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	801a      	strh	r2, [r3, #0]
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	881b      	ldrh	r3, [r3, #0]
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	801a      	strh	r2, [r3, #0]
 80060b0:	e017      	b.n	80060e2 <HAL_PCD_EP_DB_Transmit+0x186>
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	785b      	ldrb	r3, [r3, #1]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d113      	bne.n	80060e2 <HAL_PCD_EP_DB_Transmit+0x186>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	461a      	mov	r2, r3
 80060c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c8:	4413      	add	r3, r2
 80060ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	00da      	lsls	r2, r3, #3
 80060d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d4:	4413      	add	r3, r2
 80060d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80060da:	623b      	str	r3, [r7, #32]
 80060dc:	6a3b      	ldr	r3, [r7, #32]
 80060de:	2200      	movs	r2, #0
 80060e0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	4619      	mov	r1, r3
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f008 f894 	bl	800e216 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80060ee:	88fb      	ldrh	r3, [r7, #6]
 80060f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f000 82fa 	beq.w	80066ee <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	461a      	mov	r2, r3
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4413      	add	r3, r2
 8006108:	881b      	ldrh	r3, [r3, #0]
 800610a:	b29b      	uxth	r3, r3
 800610c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006110:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006114:	82fb      	strh	r3, [r7, #22]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	461a      	mov	r2, r3
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	441a      	add	r2, r3
 8006124:	8afb      	ldrh	r3, [r7, #22]
 8006126:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800612a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800612e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006132:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006136:	b29b      	uxth	r3, r3
 8006138:	8013      	strh	r3, [r2, #0]
 800613a:	e2d8      	b.n	80066ee <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800613c:	88fb      	ldrh	r3, [r7, #6]
 800613e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d021      	beq.n	800618a <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	461a      	mov	r2, r3
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4413      	add	r3, r2
 8006154:	881b      	ldrh	r3, [r3, #0]
 8006156:	b29b      	uxth	r3, r3
 8006158:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800615c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006160:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	461a      	mov	r2, r3
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	441a      	add	r2, r3
 8006172:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006176:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800617a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800617e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006182:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006186:	b29b      	uxth	r3, r3
 8006188:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006190:	2b01      	cmp	r3, #1
 8006192:	f040 82ac 	bne.w	80066ee <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	695a      	ldr	r2, [r3, #20]
 800619a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800619e:	441a      	add	r2, r3
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	69da      	ldr	r2, [r3, #28]
 80061a8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80061ac:	441a      	add	r2, r3
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	6a1a      	ldr	r2, [r3, #32]
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d30b      	bcc.n	80061d6 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	6a1a      	ldr	r2, [r3, #32]
 80061ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061ce:	1ad2      	subs	r2, r2, r3
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	621a      	str	r2, [r3, #32]
 80061d4:	e017      	b.n	8006206 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d108      	bne.n	80061f0 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80061de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80061e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80061ee:	e00a      	b.n	8006206 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	6a1b      	ldr	r3, [r3, #32]
 80061fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	2200      	movs	r2, #0
 8006204:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	785b      	ldrb	r3, [r3, #1]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d165      	bne.n	80062da <HAL_PCD_EP_DB_Transmit+0x37e>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800621c:	b29b      	uxth	r3, r3
 800621e:	461a      	mov	r2, r3
 8006220:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006222:	4413      	add	r3, r2
 8006224:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	00da      	lsls	r2, r3, #3
 800622c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800622e:	4413      	add	r3, r2
 8006230:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006234:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006238:	881b      	ldrh	r3, [r3, #0]
 800623a:	b29b      	uxth	r3, r3
 800623c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006240:	b29a      	uxth	r2, r3
 8006242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006244:	801a      	strh	r2, [r3, #0]
 8006246:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800624a:	2b3e      	cmp	r3, #62	@ 0x3e
 800624c:	d91d      	bls.n	800628a <HAL_PCD_EP_DB_Transmit+0x32e>
 800624e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006252:	095b      	lsrs	r3, r3, #5
 8006254:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006256:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800625a:	f003 031f 	and.w	r3, r3, #31
 800625e:	2b00      	cmp	r3, #0
 8006260:	d102      	bne.n	8006268 <HAL_PCD_EP_DB_Transmit+0x30c>
 8006262:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006264:	3b01      	subs	r3, #1
 8006266:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800626a:	881b      	ldrh	r3, [r3, #0]
 800626c:	b29a      	uxth	r2, r3
 800626e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006270:	b29b      	uxth	r3, r3
 8006272:	029b      	lsls	r3, r3, #10
 8006274:	b29b      	uxth	r3, r3
 8006276:	4313      	orrs	r3, r2
 8006278:	b29b      	uxth	r3, r3
 800627a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800627e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006282:	b29a      	uxth	r2, r3
 8006284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006286:	801a      	strh	r2, [r3, #0]
 8006288:	e044      	b.n	8006314 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800628a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10a      	bne.n	80062a8 <HAL_PCD_EP_DB_Transmit+0x34c>
 8006292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006294:	881b      	ldrh	r3, [r3, #0]
 8006296:	b29b      	uxth	r3, r3
 8006298:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800629c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062a4:	801a      	strh	r2, [r3, #0]
 80062a6:	e035      	b.n	8006314 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80062a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062ac:	085b      	lsrs	r3, r3, #1
 80062ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062b4:	f003 0301 	and.w	r3, r3, #1
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d002      	beq.n	80062c2 <HAL_PCD_EP_DB_Transmit+0x366>
 80062bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062be:	3301      	adds	r3, #1
 80062c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062c4:	881b      	ldrh	r3, [r3, #0]
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	029b      	lsls	r3, r3, #10
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	4313      	orrs	r3, r2
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d6:	801a      	strh	r2, [r3, #0]
 80062d8:	e01c      	b.n	8006314 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	785b      	ldrb	r3, [r3, #1]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d118      	bne.n	8006314 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	461a      	mov	r2, r3
 80062f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062f6:	4413      	add	r3, r2
 80062f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	00da      	lsls	r2, r3, #3
 8006300:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006302:	4413      	add	r3, r2
 8006304:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006308:	643b      	str	r3, [r7, #64]	@ 0x40
 800630a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800630e:	b29a      	uxth	r2, r3
 8006310:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006312:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6818      	ldr	r0, [r3, #0]
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	6959      	ldr	r1, [r3, #20]
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	891a      	ldrh	r2, [r3, #8]
 8006320:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006324:	b29b      	uxth	r3, r3
 8006326:	f005 fcbd 	bl	800bca4 <USB_WritePMA>
 800632a:	e1e0      	b.n	80066ee <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006334:	b29b      	uxth	r3, r3
 8006336:	461a      	mov	r2, r3
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	00db      	lsls	r3, r3, #3
 800633e:	4413      	add	r3, r2
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	6812      	ldr	r2, [r2, #0]
 8006344:	4413      	add	r3, r2
 8006346:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800634a:	881b      	ldrh	r3, [r3, #0]
 800634c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006350:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	699a      	ldr	r2, [r3, #24]
 8006358:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800635c:	429a      	cmp	r2, r3
 800635e:	d307      	bcc.n	8006370 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	699a      	ldr	r2, [r3, #24]
 8006364:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006368:	1ad2      	subs	r2, r2, r3
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	619a      	str	r2, [r3, #24]
 800636e:	e002      	b.n	8006376 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	2200      	movs	r2, #0
 8006374:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	2b00      	cmp	r3, #0
 800637c:	f040 80c0 	bne.w	8006500 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	785b      	ldrb	r3, [r3, #1]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d126      	bne.n	80063d6 <HAL_PCD_EP_DB_Transmit+0x47a>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006396:	b29b      	uxth	r3, r3
 8006398:	461a      	mov	r2, r3
 800639a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800639c:	4413      	add	r3, r2
 800639e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	00da      	lsls	r2, r3, #3
 80063a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80063a8:	4413      	add	r3, r2
 80063aa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80063ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 80063b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063b2:	881b      	ldrh	r3, [r3, #0]
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063be:	801a      	strh	r2, [r3, #0]
 80063c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063c2:	881b      	ldrh	r3, [r3, #0]
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063d2:	801a      	strh	r2, [r3, #0]
 80063d4:	e01a      	b.n	800640c <HAL_PCD_EP_DB_Transmit+0x4b0>
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	785b      	ldrb	r3, [r3, #1]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d116      	bne.n	800640c <HAL_PCD_EP_DB_Transmit+0x4b0>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	461a      	mov	r2, r3
 80063f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063f2:	4413      	add	r3, r2
 80063f4:	667b      	str	r3, [r7, #100]	@ 0x64
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	00da      	lsls	r2, r3, #3
 80063fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063fe:	4413      	add	r3, r2
 8006400:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006404:	663b      	str	r3, [r7, #96]	@ 0x60
 8006406:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006408:	2200      	movs	r2, #0
 800640a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	677b      	str	r3, [r7, #116]	@ 0x74
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	785b      	ldrb	r3, [r3, #1]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d12b      	bne.n	8006472 <HAL_PCD_EP_DB_Transmit+0x516>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006428:	b29b      	uxth	r3, r3
 800642a:	461a      	mov	r2, r3
 800642c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800642e:	4413      	add	r3, r2
 8006430:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	00da      	lsls	r2, r3, #3
 8006438:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800643a:	4413      	add	r3, r2
 800643c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006440:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006444:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006448:	881b      	ldrh	r3, [r3, #0]
 800644a:	b29b      	uxth	r3, r3
 800644c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006450:	b29a      	uxth	r2, r3
 8006452:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006456:	801a      	strh	r2, [r3, #0]
 8006458:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800645c:	881b      	ldrh	r3, [r3, #0]
 800645e:	b29b      	uxth	r3, r3
 8006460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006468:	b29a      	uxth	r2, r3
 800646a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800646e:	801a      	strh	r2, [r3, #0]
 8006470:	e017      	b.n	80064a2 <HAL_PCD_EP_DB_Transmit+0x546>
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	785b      	ldrb	r3, [r3, #1]
 8006476:	2b01      	cmp	r3, #1
 8006478:	d113      	bne.n	80064a2 <HAL_PCD_EP_DB_Transmit+0x546>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006482:	b29b      	uxth	r3, r3
 8006484:	461a      	mov	r2, r3
 8006486:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006488:	4413      	add	r3, r2
 800648a:	677b      	str	r3, [r7, #116]	@ 0x74
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	00da      	lsls	r2, r3, #3
 8006492:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006494:	4413      	add	r3, r2
 8006496:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800649a:	673b      	str	r3, [r7, #112]	@ 0x70
 800649c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800649e:	2200      	movs	r2, #0
 80064a0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	4619      	mov	r1, r3
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f007 feb4 	bl	800e216 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80064ae:	88fb      	ldrh	r3, [r7, #6]
 80064b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f040 811a 	bne.w	80066ee <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	461a      	mov	r2, r3
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4413      	add	r3, r2
 80064c8:	881b      	ldrh	r3, [r3, #0]
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064d4:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	461a      	mov	r2, r3
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	441a      	add	r2, r3
 80064e6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80064ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80064f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	8013      	strh	r3, [r2, #0]
 80064fe:	e0f6      	b.n	80066ee <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006500:	88fb      	ldrh	r3, [r7, #6]
 8006502:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d121      	bne.n	800654e <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	461a      	mov	r2, r3
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	4413      	add	r3, r2
 8006518:	881b      	ldrh	r3, [r3, #0]
 800651a:	b29b      	uxth	r3, r3
 800651c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006520:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006524:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	461a      	mov	r2, r3
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	441a      	add	r2, r3
 8006536:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800653a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800653e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006542:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006546:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800654a:	b29b      	uxth	r3, r3
 800654c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006554:	2b01      	cmp	r3, #1
 8006556:	f040 80ca 	bne.w	80066ee <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	695a      	ldr	r2, [r3, #20]
 800655e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006562:	441a      	add	r2, r3
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	69da      	ldr	r2, [r3, #28]
 800656c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006570:	441a      	add	r2, r3
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	6a1a      	ldr	r2, [r3, #32]
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	429a      	cmp	r2, r3
 8006580:	d30b      	bcc.n	800659a <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	6a1a      	ldr	r2, [r3, #32]
 800658e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006592:	1ad2      	subs	r2, r2, r3
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	621a      	str	r2, [r3, #32]
 8006598:	e017      	b.n	80065ca <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d108      	bne.n	80065b4 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80065a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80065a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80065b2:	e00a      	b.n	80065ca <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	6a1b      	ldr	r3, [r3, #32]
 80065b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	2200      	movs	r2, #0
 80065c0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	785b      	ldrb	r3, [r3, #1]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d165      	bne.n	80066a4 <HAL_PCD_EP_DB_Transmit+0x748>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	461a      	mov	r2, r3
 80065ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065ec:	4413      	add	r3, r2
 80065ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	00da      	lsls	r2, r3, #3
 80065f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065f8:	4413      	add	r3, r2
 80065fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80065fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006600:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006602:	881b      	ldrh	r3, [r3, #0]
 8006604:	b29b      	uxth	r3, r3
 8006606:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800660a:	b29a      	uxth	r2, r3
 800660c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800660e:	801a      	strh	r2, [r3, #0]
 8006610:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006614:	2b3e      	cmp	r3, #62	@ 0x3e
 8006616:	d91d      	bls.n	8006654 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8006618:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800661c:	095b      	lsrs	r3, r3, #5
 800661e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006620:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006624:	f003 031f 	and.w	r3, r3, #31
 8006628:	2b00      	cmp	r3, #0
 800662a:	d102      	bne.n	8006632 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800662c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800662e:	3b01      	subs	r3, #1
 8006630:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006632:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	b29a      	uxth	r2, r3
 8006638:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800663a:	b29b      	uxth	r3, r3
 800663c:	029b      	lsls	r3, r3, #10
 800663e:	b29b      	uxth	r3, r3
 8006640:	4313      	orrs	r3, r2
 8006642:	b29b      	uxth	r3, r3
 8006644:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006648:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800664c:	b29a      	uxth	r2, r3
 800664e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006650:	801a      	strh	r2, [r3, #0]
 8006652:	e041      	b.n	80066d8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8006654:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10a      	bne.n	8006672 <HAL_PCD_EP_DB_Transmit+0x716>
 800665c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800665e:	881b      	ldrh	r3, [r3, #0]
 8006660:	b29b      	uxth	r3, r3
 8006662:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006666:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800666a:	b29a      	uxth	r2, r3
 800666c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800666e:	801a      	strh	r2, [r3, #0]
 8006670:	e032      	b.n	80066d8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8006672:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006676:	085b      	lsrs	r3, r3, #1
 8006678:	66bb      	str	r3, [r7, #104]	@ 0x68
 800667a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	2b00      	cmp	r3, #0
 8006684:	d002      	beq.n	800668c <HAL_PCD_EP_DB_Transmit+0x730>
 8006686:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006688:	3301      	adds	r3, #1
 800668a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800668c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800668e:	881b      	ldrh	r3, [r3, #0]
 8006690:	b29a      	uxth	r2, r3
 8006692:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006694:	b29b      	uxth	r3, r3
 8006696:	029b      	lsls	r3, r3, #10
 8006698:	b29b      	uxth	r3, r3
 800669a:	4313      	orrs	r3, r2
 800669c:	b29a      	uxth	r2, r3
 800669e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80066a0:	801a      	strh	r2, [r3, #0]
 80066a2:	e019      	b.n	80066d8 <HAL_PCD_EP_DB_Transmit+0x77c>
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	785b      	ldrb	r3, [r3, #1]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d115      	bne.n	80066d8 <HAL_PCD_EP_DB_Transmit+0x77c>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	461a      	mov	r2, r3
 80066b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066ba:	4413      	add	r3, r2
 80066bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	00da      	lsls	r2, r3, #3
 80066c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066c6:	4413      	add	r3, r2
 80066c8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80066cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80066ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066d6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6818      	ldr	r0, [r3, #0]
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	6959      	ldr	r1, [r3, #20]
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	895a      	ldrh	r2, [r3, #10]
 80066e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	f005 fadb 	bl	800bca4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	461a      	mov	r2, r3
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	881b      	ldrh	r3, [r3, #0]
 80066fe:	b29b      	uxth	r3, r3
 8006700:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006704:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006708:	82bb      	strh	r3, [r7, #20]
 800670a:	8abb      	ldrh	r3, [r7, #20]
 800670c:	f083 0310 	eor.w	r3, r3, #16
 8006710:	82bb      	strh	r3, [r7, #20]
 8006712:	8abb      	ldrh	r3, [r7, #20]
 8006714:	f083 0320 	eor.w	r3, r3, #32
 8006718:	82bb      	strh	r3, [r7, #20]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	461a      	mov	r2, r3
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	441a      	add	r2, r3
 8006728:	8abb      	ldrh	r3, [r7, #20]
 800672a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800672e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006732:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006736:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800673a:	b29b      	uxth	r3, r3
 800673c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3790      	adds	r7, #144	@ 0x90
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006748:	b480      	push	{r7}
 800674a:	b087      	sub	sp, #28
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	607b      	str	r3, [r7, #4]
 8006752:	460b      	mov	r3, r1
 8006754:	817b      	strh	r3, [r7, #10]
 8006756:	4613      	mov	r3, r2
 8006758:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800675a:	897b      	ldrh	r3, [r7, #10]
 800675c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006760:	b29b      	uxth	r3, r3
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00b      	beq.n	800677e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006766:	897b      	ldrh	r3, [r7, #10]
 8006768:	f003 0207 	and.w	r2, r3, #7
 800676c:	4613      	mov	r3, r2
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4413      	add	r3, r2
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	3310      	adds	r3, #16
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	4413      	add	r3, r2
 800677a:	617b      	str	r3, [r7, #20]
 800677c:	e009      	b.n	8006792 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800677e:	897a      	ldrh	r2, [r7, #10]
 8006780:	4613      	mov	r3, r2
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	4413      	add	r3, r2
 8006786:	00db      	lsls	r3, r3, #3
 8006788:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	4413      	add	r3, r2
 8006790:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006792:	893b      	ldrh	r3, [r7, #8]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d107      	bne.n	80067a8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	2200      	movs	r2, #0
 800679c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	80da      	strh	r2, [r3, #6]
 80067a6:	e00b      	b.n	80067c0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	2201      	movs	r2, #1
 80067ac:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	0c1b      	lsrs	r3, r3, #16
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	371c      	adds	r7, #28
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b085      	sub	sp, #20
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	f043 0301 	orr.w	r3, r3, #1
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006806:	b29b      	uxth	r3, r3
 8006808:	f043 0302 	orr.w	r3, r3, #2
 800680c:	b29a      	uxth	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
	...

08006824 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006824:	b480      	push	{r7}
 8006826:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006828:	4b05      	ldr	r3, [pc, #20]	@ (8006840 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a04      	ldr	r2, [pc, #16]	@ (8006840 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800682e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006832:	6013      	str	r3, [r2, #0]
}
 8006834:	bf00      	nop
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	58000400 	.word	0x58000400

08006844 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006844:	b480      	push	{r7}
 8006846:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8006848:	4b04      	ldr	r3, [pc, #16]	@ (800685c <HAL_PWREx_GetVoltageRange+0x18>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8006850:	4618      	mov	r0, r3
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	58000400 	.word	0x58000400

08006860 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006860:	b480      	push	{r7}
 8006862:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8006864:	4b05      	ldr	r3, [pc, #20]	@ (800687c <HAL_PWREx_EnableVddUSB+0x1c>)
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	4a04      	ldr	r2, [pc, #16]	@ (800687c <HAL_PWREx_EnableVddUSB+0x1c>)
 800686a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800686e:	6053      	str	r3, [r2, #4]
}
 8006870:	bf00      	nop
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop
 800687c:	58000400 	.word	0x58000400

08006880 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8006880:	b480      	push	{r7}
 8006882:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006884:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800688e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006892:	d101      	bne.n	8006898 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006894:	2301      	movs	r3, #1
 8006896:	e000      	b.n	800689a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80068a4:	b480      	push	{r7}
 80068a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80068a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80068b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068b6:	6013      	str	r3, [r2, #0]
}
 80068b8:	bf00      	nop
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr

080068c2 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80068c2:	b480      	push	{r7}
 80068c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80068c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80068d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068d4:	6013      	str	r3, [r2, #0]
}
 80068d6:	bf00      	nop
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80068e0:	b480      	push	{r7}
 80068e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80068e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068f2:	d101      	bne.n	80068f8 <LL_RCC_HSE_IsReady+0x18>
 80068f4:	2301      	movs	r3, #1
 80068f6:	e000      	b.n	80068fa <LL_RCC_HSE_IsReady+0x1a>
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8006904:	b480      	push	{r7}
 8006906:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006908:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006912:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006916:	6013      	str	r3, [r2, #0]
}
 8006918:	bf00      	nop
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr

08006922 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8006922:	b480      	push	{r7}
 8006924:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006926:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006930:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006934:	6013      	str	r3, [r2, #0]
}
 8006936:	bf00      	nop
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8006940:	b480      	push	{r7}
 8006942:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006944:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800694e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006952:	d101      	bne.n	8006958 <LL_RCC_HSI_IsReady+0x18>
 8006954:	2301      	movs	r3, #1
 8006956:	e000      	b.n	800695a <LL_RCC_HSI_IsReady+0x1a>
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800696c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	061b      	lsls	r3, r3, #24
 800697a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800697e:	4313      	orrs	r3, r2
 8006980:	604b      	str	r3, [r1, #4]
}
 8006982:	bf00      	nop
 8006984:	370c      	adds	r7, #12
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr

0800698e <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800698e:	b480      	push	{r7}
 8006990:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006992:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006996:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800699a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800699e:	f043 0301 	orr.w	r3, r3, #1
 80069a2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80069a6:	bf00      	nop
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80069b0:	b480      	push	{r7}
 80069b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80069b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80069bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80069c0:	f023 0301 	bic.w	r3, r3, #1
 80069c4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80069c8:	bf00      	nop
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr

080069d2 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80069d2:	b480      	push	{r7}
 80069d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80069d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80069de:	f003 0302 	and.w	r3, r3, #2
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d101      	bne.n	80069ea <LL_RCC_HSI48_IsReady+0x18>
 80069e6:	2301      	movs	r3, #1
 80069e8:	e000      	b.n	80069ec <LL_RCC_HSI48_IsReady+0x1a>
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr

080069f6 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80069f6:	b480      	push	{r7}
 80069f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80069fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a06:	f043 0301 	orr.w	r3, r3, #1
 8006a0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006a0e:	bf00      	nop
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006a1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a28:	f023 0301 	bic.w	r3, r3, #1
 8006a2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006a30:	bf00      	nop
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr

08006a3a <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006a3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a4a:	f043 0304 	orr.w	r3, r3, #4
 8006a4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006a52:	bf00      	nop
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006a60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a6c:	f023 0304 	bic.w	r3, r3, #4
 8006a70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006a74:	bf00      	nop
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr

08006a7e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006a82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a8a:	f003 0302 	and.w	r3, r3, #2
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d101      	bne.n	8006a96 <LL_RCC_LSE_IsReady+0x18>
 8006a92:	2301      	movs	r3, #1
 8006a94:	e000      	b.n	8006a98 <LL_RCC_LSE_IsReady+0x1a>
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr

08006aa2 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8006aa2:	b480      	push	{r7}
 8006aa4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006aa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006aae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ab2:	f043 0301 	orr.w	r3, r3, #1
 8006ab6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006aba:	bf00      	nop
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006ac8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ad0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ad4:	f023 0301 	bic.w	r3, r3, #1
 8006ad8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006adc:	bf00      	nop
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr

08006ae6 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8006aea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006af2:	f003 0302 	and.w	r3, r3, #2
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	d101      	bne.n	8006afe <LL_RCC_LSI1_IsReady+0x18>
 8006afa:	2301      	movs	r3, #1
 8006afc:	e000      	b.n	8006b00 <LL_RCC_LSI1_IsReady+0x1a>
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr

08006b0a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006b0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b1a:	f043 0304 	orr.w	r3, r3, #4
 8006b1e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006b22:	bf00      	nop
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006b30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b3c:	f023 0304 	bic.w	r3, r3, #4
 8006b40:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006b44:	bf00      	nop
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr

08006b4e <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8006b4e:	b480      	push	{r7}
 8006b50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8006b52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b5a:	f003 0308 	and.w	r3, r3, #8
 8006b5e:	2b08      	cmp	r3, #8
 8006b60:	d101      	bne.n	8006b66 <LL_RCC_LSI2_IsReady+0x18>
 8006b62:	2301      	movs	r3, #1
 8006b64:	e000      	b.n	8006b68 <LL_RCC_LSI2_IsReady+0x1a>
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8006b72:	b480      	push	{r7}
 8006b74:	b083      	sub	sp, #12
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8006b7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b82:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	021b      	lsls	r3, r3, #8
 8006b8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8006b94:	bf00      	nop
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006ba4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006bae:	f043 0301 	orr.w	r3, r3, #1
 8006bb2:	6013      	str	r3, [r2, #0]
}
 8006bb4:	bf00      	nop
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr

08006bbe <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006bc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006bcc:	f023 0301 	bic.w	r3, r3, #1
 8006bd0:	6013      	str	r3, [r2, #0]
}
 8006bd2:	bf00      	nop
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006be0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0302 	and.w	r3, r3, #2
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d101      	bne.n	8006bf2 <LL_RCC_MSI_IsReady+0x16>
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e000      	b.n	8006bf4 <LL_RCC_MSI_IsReady+0x18>
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr

08006bfe <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8006bfe:	b480      	push	{r7}
 8006c00:	b083      	sub	sp, #12
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8006c06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	600b      	str	r3, [r1, #0]
}
 8006c1a:	bf00      	nop
 8006c1c:	370c      	adds	r7, #12
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr

08006c26 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8006c26:	b480      	push	{r7}
 8006c28:	b083      	sub	sp, #12
 8006c2a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8006c2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c36:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2bb0      	cmp	r3, #176	@ 0xb0
 8006c3c:	d901      	bls.n	8006c42 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8006c3e:	23b0      	movs	r3, #176	@ 0xb0
 8006c40:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8006c42:	687b      	ldr	r3, [r7, #4]
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006c58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	021b      	lsls	r3, r3, #8
 8006c66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	604b      	str	r3, [r1, #4]
}
 8006c6e:	bf00      	nop
 8006c70:	370c      	adds	r7, #12
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr

08006c7a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b083      	sub	sp, #12
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006c82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	f023 0203 	bic.w	r2, r3, #3
 8006c8c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	608b      	str	r3, [r1, #8]
}
 8006c96:	bf00      	nop
 8006c98:	370c      	adds	r7, #12
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006ca6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	f003 030c 	and.w	r3, r3, #12
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr

08006cba <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8006cba:	b480      	push	{r7}
 8006cbc:	b083      	sub	sp, #12
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006cc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006ccc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	608b      	str	r3, [r1, #8]
}
 8006cd6:	bf00      	nop
 8006cd8:	370c      	adds	r7, #12
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr

08006ce2 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	b083      	sub	sp, #12
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8006cea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cee:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006cf2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006cf6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8006d02:	bf00      	nop
 8006d04:	370c      	adds	r7, #12
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr

08006d0e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8006d0e:	b480      	push	{r7}
 8006d10:	b083      	sub	sp, #12
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006d16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d1a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006d1e:	f023 020f 	bic.w	r2, r3, #15
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	091b      	lsrs	r3, r3, #4
 8006d26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006d44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006d4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	608b      	str	r3, [r1, #8]
}
 8006d58:	bf00      	nop
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006d6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006d76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	608b      	str	r3, [r1, #8]
}
 8006d80:	bf00      	nop
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006d90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8006da4:	b480      	push	{r7}
 8006da6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006da8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dac:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006db0:	011b      	lsls	r3, r3, #4
 8006db2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006dc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006ddc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006df0:	b480      	push	{r7}
 8006df2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006df4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006dfe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e02:	6013      	str	r3, [r2, #0]
}
 8006e04:	bf00      	nop
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8006e0e:	b480      	push	{r7}
 8006e10:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006e12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e1c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e20:	6013      	str	r3, [r2, #0]
}
 8006e22:	bf00      	nop
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006e30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e3a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e3e:	d101      	bne.n	8006e44 <LL_RCC_PLL_IsReady+0x18>
 8006e40:	2301      	movs	r3, #1
 8006e42:	e000      	b.n	8006e46 <LL_RCC_PLL_IsReady+0x1a>
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006e50:	b480      	push	{r7}
 8006e52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006e54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	0a1b      	lsrs	r3, r3, #8
 8006e5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr

08006e6a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006e6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr

08006e82 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006e82:	b480      	push	{r7}
 8006e84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006e86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006e9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	f003 0303 	and.w	r3, r3, #3
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr

08006eb2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8006eb2:	b480      	push	{r7}
 8006eb4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006eb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ec0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ec4:	d101      	bne.n	8006eca <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e000      	b.n	8006ecc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr

08006ed6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8006eda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ede:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ee6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006eea:	d101      	bne.n	8006ef0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8006eec:	2301      	movs	r3, #1
 8006eee:	e000      	b.n	8006ef2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8006efc:	b480      	push	{r7}
 8006efe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006f00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f04:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006f08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f10:	d101      	bne.n	8006f16 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006f12:	2301      	movs	r3, #1
 8006f14:	e000      	b.n	8006f18 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr

08006f22 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006f22:	b480      	push	{r7}
 8006f24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006f26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f34:	d101      	bne.n	8006f3a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006f36:	2301      	movs	r3, #1
 8006f38:	e000      	b.n	8006f3c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr

08006f46 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8006f46:	b480      	push	{r7}
 8006f48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006f4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f54:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f58:	d101      	bne.n	8006f5e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e000      	b.n	8006f60 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
	...

08006f6c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f6c:	b590      	push	{r4, r7, lr}
 8006f6e:	b08d      	sub	sp, #52	@ 0x34
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d101      	bne.n	8006f7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e363      	b.n	8007646 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 0320 	and.w	r3, r3, #32
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f000 808d 	beq.w	80070a6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f8c:	f7ff fe89 	bl	8006ca2 <LL_RCC_GetSysClkSource>
 8006f90:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f92:	f7ff ff82 	bl	8006e9a <LL_RCC_PLL_GetMainSource>
 8006f96:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d005      	beq.n	8006faa <HAL_RCC_OscConfig+0x3e>
 8006f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fa0:	2b0c      	cmp	r3, #12
 8006fa2:	d147      	bne.n	8007034 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8006fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d144      	bne.n	8007034 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	69db      	ldr	r3, [r3, #28]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d101      	bne.n	8006fb6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e347      	b.n	8007646 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8006fba:	f7ff fe34 	bl	8006c26 <LL_RCC_MSI_GetRange>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	429c      	cmp	r4, r3
 8006fc2:	d914      	bls.n	8006fee <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f000 fd2f 	bl	8007a2c <RCC_SetFlashLatencyFromMSIRange>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d001      	beq.n	8006fd8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e336      	b.n	8007646 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f7ff fe0e 	bl	8006bfe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a1b      	ldr	r3, [r3, #32]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7ff fe32 	bl	8006c50 <LL_RCC_MSI_SetCalibTrimming>
 8006fec:	e013      	b.n	8007016 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7ff fe03 	bl	8006bfe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a1b      	ldr	r3, [r3, #32]
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7ff fe27 	bl	8006c50 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007006:	4618      	mov	r0, r3
 8007008:	f000 fd10 	bl	8007a2c <RCC_SetFlashLatencyFromMSIRange>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d001      	beq.n	8007016 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e317      	b.n	8007646 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007016:	f000 fcc9 	bl	80079ac <HAL_RCC_GetHCLKFreq>
 800701a:	4603      	mov	r3, r0
 800701c:	4aa4      	ldr	r2, [pc, #656]	@ (80072b0 <HAL_RCC_OscConfig+0x344>)
 800701e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007020:	4ba4      	ldr	r3, [pc, #656]	@ (80072b4 <HAL_RCC_OscConfig+0x348>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4618      	mov	r0, r3
 8007026:	f7fa febd 	bl	8001da4 <HAL_InitTick>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d039      	beq.n	80070a4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	e308      	b.n	8007646 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	69db      	ldr	r3, [r3, #28]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d01e      	beq.n	800707a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800703c:	f7ff fdb0 	bl	8006ba0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007040:	f7fa fefe 	bl	8001e40 <HAL_GetTick>
 8007044:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8007046:	e008      	b.n	800705a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007048:	f7fa fefa 	bl	8001e40 <HAL_GetTick>
 800704c:	4602      	mov	r2, r0
 800704e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007050:	1ad3      	subs	r3, r2, r3
 8007052:	2b02      	cmp	r3, #2
 8007054:	d901      	bls.n	800705a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	e2f5      	b.n	8007646 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800705a:	f7ff fdbf 	bl	8006bdc <LL_RCC_MSI_IsReady>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d0f1      	beq.n	8007048 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007068:	4618      	mov	r0, r3
 800706a:	f7ff fdc8 	bl	8006bfe <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	4618      	mov	r0, r3
 8007074:	f7ff fdec 	bl	8006c50 <LL_RCC_MSI_SetCalibTrimming>
 8007078:	e015      	b.n	80070a6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800707a:	f7ff fda0 	bl	8006bbe <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800707e:	f7fa fedf 	bl	8001e40 <HAL_GetTick>
 8007082:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8007084:	e008      	b.n	8007098 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007086:	f7fa fedb 	bl	8001e40 <HAL_GetTick>
 800708a:	4602      	mov	r2, r0
 800708c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	2b02      	cmp	r3, #2
 8007092:	d901      	bls.n	8007098 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007094:	2303      	movs	r3, #3
 8007096:	e2d6      	b.n	8007646 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8007098:	f7ff fda0 	bl	8006bdc <LL_RCC_MSI_IsReady>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1f1      	bne.n	8007086 <HAL_RCC_OscConfig+0x11a>
 80070a2:	e000      	b.n	80070a6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80070a4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 0301 	and.w	r3, r3, #1
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d047      	beq.n	8007142 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070b2:	f7ff fdf6 	bl	8006ca2 <LL_RCC_GetSysClkSource>
 80070b6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80070b8:	f7ff feef 	bl	8006e9a <LL_RCC_PLL_GetMainSource>
 80070bc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80070be:	6a3b      	ldr	r3, [r7, #32]
 80070c0:	2b08      	cmp	r3, #8
 80070c2:	d005      	beq.n	80070d0 <HAL_RCC_OscConfig+0x164>
 80070c4:	6a3b      	ldr	r3, [r7, #32]
 80070c6:	2b0c      	cmp	r3, #12
 80070c8:	d108      	bne.n	80070dc <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	2b03      	cmp	r3, #3
 80070ce:	d105      	bne.n	80070dc <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d134      	bne.n	8007142 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e2b4      	b.n	8007646 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070e4:	d102      	bne.n	80070ec <HAL_RCC_OscConfig+0x180>
 80070e6:	f7ff fbdd 	bl	80068a4 <LL_RCC_HSE_Enable>
 80070ea:	e001      	b.n	80070f0 <HAL_RCC_OscConfig+0x184>
 80070ec:	f7ff fbe9 	bl	80068c2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d012      	beq.n	800711e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070f8:	f7fa fea2 	bl	8001e40 <HAL_GetTick>
 80070fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80070fe:	e008      	b.n	8007112 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007100:	f7fa fe9e 	bl	8001e40 <HAL_GetTick>
 8007104:	4602      	mov	r2, r0
 8007106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	2b64      	cmp	r3, #100	@ 0x64
 800710c:	d901      	bls.n	8007112 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800710e:	2303      	movs	r3, #3
 8007110:	e299      	b.n	8007646 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8007112:	f7ff fbe5 	bl	80068e0 <LL_RCC_HSE_IsReady>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d0f1      	beq.n	8007100 <HAL_RCC_OscConfig+0x194>
 800711c:	e011      	b.n	8007142 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800711e:	f7fa fe8f 	bl	8001e40 <HAL_GetTick>
 8007122:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8007124:	e008      	b.n	8007138 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007126:	f7fa fe8b 	bl	8001e40 <HAL_GetTick>
 800712a:	4602      	mov	r2, r0
 800712c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712e:	1ad3      	subs	r3, r2, r3
 8007130:	2b64      	cmp	r3, #100	@ 0x64
 8007132:	d901      	bls.n	8007138 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8007134:	2303      	movs	r3, #3
 8007136:	e286      	b.n	8007646 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8007138:	f7ff fbd2 	bl	80068e0 <LL_RCC_HSE_IsReady>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1f1      	bne.n	8007126 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 0302 	and.w	r3, r3, #2
 800714a:	2b00      	cmp	r3, #0
 800714c:	d04c      	beq.n	80071e8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800714e:	f7ff fda8 	bl	8006ca2 <LL_RCC_GetSysClkSource>
 8007152:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007154:	f7ff fea1 	bl	8006e9a <LL_RCC_PLL_GetMainSource>
 8007158:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	2b04      	cmp	r3, #4
 800715e:	d005      	beq.n	800716c <HAL_RCC_OscConfig+0x200>
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	2b0c      	cmp	r3, #12
 8007164:	d10e      	bne.n	8007184 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	2b02      	cmp	r3, #2
 800716a:	d10b      	bne.n	8007184 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d101      	bne.n	8007178 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	e266      	b.n	8007646 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	4618      	mov	r0, r3
 800717e:	f7ff fbf1 	bl	8006964 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007182:	e031      	b.n	80071e8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d019      	beq.n	80071c0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800718c:	f7ff fbba 	bl	8006904 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007190:	f7fa fe56 	bl	8001e40 <HAL_GetTick>
 8007194:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8007196:	e008      	b.n	80071aa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007198:	f7fa fe52 	bl	8001e40 <HAL_GetTick>
 800719c:	4602      	mov	r2, r0
 800719e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	2b02      	cmp	r3, #2
 80071a4:	d901      	bls.n	80071aa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80071a6:	2303      	movs	r3, #3
 80071a8:	e24d      	b.n	8007646 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80071aa:	f7ff fbc9 	bl	8006940 <LL_RCC_HSI_IsReady>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d0f1      	beq.n	8007198 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7ff fbd3 	bl	8006964 <LL_RCC_HSI_SetCalibTrimming>
 80071be:	e013      	b.n	80071e8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071c0:	f7ff fbaf 	bl	8006922 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071c4:	f7fa fe3c 	bl	8001e40 <HAL_GetTick>
 80071c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80071ca:	e008      	b.n	80071de <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071cc:	f7fa fe38 	bl	8001e40 <HAL_GetTick>
 80071d0:	4602      	mov	r2, r0
 80071d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	d901      	bls.n	80071de <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	e233      	b.n	8007646 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80071de:	f7ff fbaf 	bl	8006940 <LL_RCC_HSI_IsReady>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1f1      	bne.n	80071cc <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 0308 	and.w	r3, r3, #8
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d106      	bne.n	8007202 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 80a3 	beq.w	8007348 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	695b      	ldr	r3, [r3, #20]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d076      	beq.n	80072f8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 0310 	and.w	r3, r3, #16
 8007212:	2b00      	cmp	r3, #0
 8007214:	d046      	beq.n	80072a4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8007216:	f7ff fc66 	bl	8006ae6 <LL_RCC_LSI1_IsReady>
 800721a:	4603      	mov	r3, r0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d113      	bne.n	8007248 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8007220:	f7ff fc3f 	bl	8006aa2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007224:	f7fa fe0c 	bl	8001e40 <HAL_GetTick>
 8007228:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800722a:	e008      	b.n	800723e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800722c:	f7fa fe08 	bl	8001e40 <HAL_GetTick>
 8007230:	4602      	mov	r2, r0
 8007232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007234:	1ad3      	subs	r3, r2, r3
 8007236:	2b02      	cmp	r3, #2
 8007238:	d901      	bls.n	800723e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800723a:	2303      	movs	r3, #3
 800723c:	e203      	b.n	8007646 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800723e:	f7ff fc52 	bl	8006ae6 <LL_RCC_LSI1_IsReady>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d0f1      	beq.n	800722c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8007248:	f7ff fc5f 	bl	8006b0a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800724c:	f7fa fdf8 	bl	8001e40 <HAL_GetTick>
 8007250:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8007252:	e008      	b.n	8007266 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007254:	f7fa fdf4 	bl	8001e40 <HAL_GetTick>
 8007258:	4602      	mov	r2, r0
 800725a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	2b03      	cmp	r3, #3
 8007260:	d901      	bls.n	8007266 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8007262:	2303      	movs	r3, #3
 8007264:	e1ef      	b.n	8007646 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8007266:	f7ff fc72 	bl	8006b4e <LL_RCC_LSI2_IsReady>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d0f1      	beq.n	8007254 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	699b      	ldr	r3, [r3, #24]
 8007274:	4618      	mov	r0, r3
 8007276:	f7ff fc7c 	bl	8006b72 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800727a:	f7ff fc23 	bl	8006ac4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800727e:	f7fa fddf 	bl	8001e40 <HAL_GetTick>
 8007282:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007284:	e008      	b.n	8007298 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007286:	f7fa fddb 	bl	8001e40 <HAL_GetTick>
 800728a:	4602      	mov	r2, r0
 800728c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	2b02      	cmp	r3, #2
 8007292:	d901      	bls.n	8007298 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8007294:	2303      	movs	r3, #3
 8007296:	e1d6      	b.n	8007646 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007298:	f7ff fc25 	bl	8006ae6 <LL_RCC_LSI1_IsReady>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1f1      	bne.n	8007286 <HAL_RCC_OscConfig+0x31a>
 80072a2:	e051      	b.n	8007348 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80072a4:	f7ff fbfd 	bl	8006aa2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072a8:	f7fa fdca 	bl	8001e40 <HAL_GetTick>
 80072ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80072ae:	e00c      	b.n	80072ca <HAL_RCC_OscConfig+0x35e>
 80072b0:	20000008 	.word	0x20000008
 80072b4:	20000028 	.word	0x20000028
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80072b8:	f7fa fdc2 	bl	8001e40 <HAL_GetTick>
 80072bc:	4602      	mov	r2, r0
 80072be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c0:	1ad3      	subs	r3, r2, r3
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	d901      	bls.n	80072ca <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80072c6:	2303      	movs	r3, #3
 80072c8:	e1bd      	b.n	8007646 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80072ca:	f7ff fc0c 	bl	8006ae6 <LL_RCC_LSI1_IsReady>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d0f1      	beq.n	80072b8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80072d4:	f7ff fc2a 	bl	8006b2c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80072d8:	e008      	b.n	80072ec <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80072da:	f7fa fdb1 	bl	8001e40 <HAL_GetTick>
 80072de:	4602      	mov	r2, r0
 80072e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e2:	1ad3      	subs	r3, r2, r3
 80072e4:	2b03      	cmp	r3, #3
 80072e6:	d901      	bls.n	80072ec <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80072e8:	2303      	movs	r3, #3
 80072ea:	e1ac      	b.n	8007646 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80072ec:	f7ff fc2f 	bl	8006b4e <LL_RCC_LSI2_IsReady>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1f1      	bne.n	80072da <HAL_RCC_OscConfig+0x36e>
 80072f6:	e027      	b.n	8007348 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80072f8:	f7ff fc18 	bl	8006b2c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072fc:	f7fa fda0 	bl	8001e40 <HAL_GetTick>
 8007300:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8007302:	e008      	b.n	8007316 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007304:	f7fa fd9c 	bl	8001e40 <HAL_GetTick>
 8007308:	4602      	mov	r2, r0
 800730a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	2b03      	cmp	r3, #3
 8007310:	d901      	bls.n	8007316 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007312:	2303      	movs	r3, #3
 8007314:	e197      	b.n	8007646 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8007316:	f7ff fc1a 	bl	8006b4e <LL_RCC_LSI2_IsReady>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d1f1      	bne.n	8007304 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8007320:	f7ff fbd0 	bl	8006ac4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007324:	f7fa fd8c 	bl	8001e40 <HAL_GetTick>
 8007328:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800732a:	e008      	b.n	800733e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800732c:	f7fa fd88 	bl	8001e40 <HAL_GetTick>
 8007330:	4602      	mov	r2, r0
 8007332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	2b02      	cmp	r3, #2
 8007338:	d901      	bls.n	800733e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	e183      	b.n	8007646 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800733e:	f7ff fbd2 	bl	8006ae6 <LL_RCC_LSI1_IsReady>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1f1      	bne.n	800732c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 0304 	and.w	r3, r3, #4
 8007350:	2b00      	cmp	r3, #0
 8007352:	d05b      	beq.n	800740c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007354:	4ba7      	ldr	r3, [pc, #668]	@ (80075f4 <HAL_RCC_OscConfig+0x688>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800735c:	2b00      	cmp	r3, #0
 800735e:	d114      	bne.n	800738a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007360:	f7ff fa60 	bl	8006824 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007364:	f7fa fd6c 	bl	8001e40 <HAL_GetTick>
 8007368:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800736a:	e008      	b.n	800737e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800736c:	f7fa fd68 	bl	8001e40 <HAL_GetTick>
 8007370:	4602      	mov	r2, r0
 8007372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007374:	1ad3      	subs	r3, r2, r3
 8007376:	2b02      	cmp	r3, #2
 8007378:	d901      	bls.n	800737e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800737a:	2303      	movs	r3, #3
 800737c:	e163      	b.n	8007646 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800737e:	4b9d      	ldr	r3, [pc, #628]	@ (80075f4 <HAL_RCC_OscConfig+0x688>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007386:	2b00      	cmp	r3, #0
 8007388:	d0f0      	beq.n	800736c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	2b01      	cmp	r3, #1
 8007390:	d102      	bne.n	8007398 <HAL_RCC_OscConfig+0x42c>
 8007392:	f7ff fb30 	bl	80069f6 <LL_RCC_LSE_Enable>
 8007396:	e00c      	b.n	80073b2 <HAL_RCC_OscConfig+0x446>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	2b05      	cmp	r3, #5
 800739e:	d104      	bne.n	80073aa <HAL_RCC_OscConfig+0x43e>
 80073a0:	f7ff fb4b 	bl	8006a3a <LL_RCC_LSE_EnableBypass>
 80073a4:	f7ff fb27 	bl	80069f6 <LL_RCC_LSE_Enable>
 80073a8:	e003      	b.n	80073b2 <HAL_RCC_OscConfig+0x446>
 80073aa:	f7ff fb35 	bl	8006a18 <LL_RCC_LSE_Disable>
 80073ae:	f7ff fb55 	bl	8006a5c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d014      	beq.n	80073e4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073ba:	f7fa fd41 	bl	8001e40 <HAL_GetTick>
 80073be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80073c0:	e00a      	b.n	80073d8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073c2:	f7fa fd3d 	bl	8001e40 <HAL_GetTick>
 80073c6:	4602      	mov	r2, r0
 80073c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ca:	1ad3      	subs	r3, r2, r3
 80073cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d901      	bls.n	80073d8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e136      	b.n	8007646 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80073d8:	f7ff fb51 	bl	8006a7e <LL_RCC_LSE_IsReady>
 80073dc:	4603      	mov	r3, r0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d0ef      	beq.n	80073c2 <HAL_RCC_OscConfig+0x456>
 80073e2:	e013      	b.n	800740c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073e4:	f7fa fd2c 	bl	8001e40 <HAL_GetTick>
 80073e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80073ea:	e00a      	b.n	8007402 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073ec:	f7fa fd28 	bl	8001e40 <HAL_GetTick>
 80073f0:	4602      	mov	r2, r0
 80073f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d901      	bls.n	8007402 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80073fe:	2303      	movs	r3, #3
 8007400:	e121      	b.n	8007646 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8007402:	f7ff fb3c 	bl	8006a7e <LL_RCC_LSE_IsReady>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d1ef      	bne.n	80073ec <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007414:	2b00      	cmp	r3, #0
 8007416:	d02c      	beq.n	8007472 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800741c:	2b00      	cmp	r3, #0
 800741e:	d014      	beq.n	800744a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007420:	f7ff fab5 	bl	800698e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007424:	f7fa fd0c 	bl	8001e40 <HAL_GetTick>
 8007428:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800742a:	e008      	b.n	800743e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800742c:	f7fa fd08 	bl	8001e40 <HAL_GetTick>
 8007430:	4602      	mov	r2, r0
 8007432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	2b02      	cmp	r3, #2
 8007438:	d901      	bls.n	800743e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	e103      	b.n	8007646 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800743e:	f7ff fac8 	bl	80069d2 <LL_RCC_HSI48_IsReady>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d0f1      	beq.n	800742c <HAL_RCC_OscConfig+0x4c0>
 8007448:	e013      	b.n	8007472 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800744a:	f7ff fab1 	bl	80069b0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800744e:	f7fa fcf7 	bl	8001e40 <HAL_GetTick>
 8007452:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007454:	e008      	b.n	8007468 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007456:	f7fa fcf3 	bl	8001e40 <HAL_GetTick>
 800745a:	4602      	mov	r2, r0
 800745c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	2b02      	cmp	r3, #2
 8007462:	d901      	bls.n	8007468 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8007464:	2303      	movs	r3, #3
 8007466:	e0ee      	b.n	8007646 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007468:	f7ff fab3 	bl	80069d2 <LL_RCC_HSI48_IsReady>
 800746c:	4603      	mov	r3, r0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1f1      	bne.n	8007456 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007476:	2b00      	cmp	r3, #0
 8007478:	f000 80e4 	beq.w	8007644 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800747c:	f7ff fc11 	bl	8006ca2 <LL_RCC_GetSysClkSource>
 8007480:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8007482:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800748e:	2b02      	cmp	r3, #2
 8007490:	f040 80b4 	bne.w	80075fc <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f003 0203 	and.w	r2, r3, #3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800749e:	429a      	cmp	r2, r3
 80074a0:	d123      	bne.n	80074ea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d11c      	bne.n	80074ea <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	0a1b      	lsrs	r3, r3, #8
 80074b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80074bc:	429a      	cmp	r2, r3
 80074be:	d114      	bne.n	80074ea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d10d      	bne.n	80074ea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80074d8:	429a      	cmp	r2, r3
 80074da:	d106      	bne.n	80074ea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d05d      	beq.n	80075a6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	2b0c      	cmp	r3, #12
 80074ee:	d058      	beq.n	80075a2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80074f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d001      	beq.n	8007502 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e0a1      	b.n	8007646 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007502:	f7ff fc84 	bl	8006e0e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007506:	f7fa fc9b 	bl	8001e40 <HAL_GetTick>
 800750a:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800750c:	e008      	b.n	8007520 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800750e:	f7fa fc97 	bl	8001e40 <HAL_GetTick>
 8007512:	4602      	mov	r2, r0
 8007514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007516:	1ad3      	subs	r3, r2, r3
 8007518:	2b02      	cmp	r3, #2
 800751a:	d901      	bls.n	8007520 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800751c:	2303      	movs	r3, #3
 800751e:	e092      	b.n	8007646 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007520:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1ef      	bne.n	800750e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800752e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007532:	68da      	ldr	r2, [r3, #12]
 8007534:	4b30      	ldr	r3, [pc, #192]	@ (80075f8 <HAL_RCC_OscConfig+0x68c>)
 8007536:	4013      	ands	r3, r2
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007540:	4311      	orrs	r1, r2
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007546:	0212      	lsls	r2, r2, #8
 8007548:	4311      	orrs	r1, r2
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800754e:	4311      	orrs	r1, r2
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007554:	4311      	orrs	r1, r2
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800755a:	430a      	orrs	r2, r1
 800755c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007560:	4313      	orrs	r3, r2
 8007562:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007564:	f7ff fc44 	bl	8006df0 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007568:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007572:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007576:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007578:	f7fa fc62 	bl	8001e40 <HAL_GetTick>
 800757c:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800757e:	e008      	b.n	8007592 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007580:	f7fa fc5e 	bl	8001e40 <HAL_GetTick>
 8007584:	4602      	mov	r2, r0
 8007586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	2b02      	cmp	r3, #2
 800758c:	d901      	bls.n	8007592 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800758e:	2303      	movs	r3, #3
 8007590:	e059      	b.n	8007646 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007592:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800759c:	2b00      	cmp	r3, #0
 800759e:	d0ef      	beq.n	8007580 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80075a0:	e050      	b.n	8007644 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e04f      	b.n	8007646 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d147      	bne.n	8007644 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80075b4:	f7ff fc1c 	bl	8006df0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80075b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80075c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80075c8:	f7fa fc3a 	bl	8001e40 <HAL_GetTick>
 80075cc:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075ce:	e008      	b.n	80075e2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075d0:	f7fa fc36 	bl	8001e40 <HAL_GetTick>
 80075d4:	4602      	mov	r2, r0
 80075d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d901      	bls.n	80075e2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80075de:	2303      	movs	r3, #3
 80075e0:	e031      	b.n	8007646 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d0ef      	beq.n	80075d0 <HAL_RCC_OscConfig+0x664>
 80075f0:	e028      	b.n	8007644 <HAL_RCC_OscConfig+0x6d8>
 80075f2:	bf00      	nop
 80075f4:	58000400 	.word	0x58000400
 80075f8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	2b0c      	cmp	r3, #12
 8007600:	d01e      	beq.n	8007640 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007602:	f7ff fc04 	bl	8006e0e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007606:	f7fa fc1b 	bl	8001e40 <HAL_GetTick>
 800760a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800760c:	e008      	b.n	8007620 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800760e:	f7fa fc17 	bl	8001e40 <HAL_GetTick>
 8007612:	4602      	mov	r2, r0
 8007614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	2b02      	cmp	r3, #2
 800761a:	d901      	bls.n	8007620 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800761c:	2303      	movs	r3, #3
 800761e:	e012      	b.n	8007646 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007620:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1ef      	bne.n	800760e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800762e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007632:	68da      	ldr	r2, [r3, #12]
 8007634:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007638:	4b05      	ldr	r3, [pc, #20]	@ (8007650 <HAL_RCC_OscConfig+0x6e4>)
 800763a:	4013      	ands	r3, r2
 800763c:	60cb      	str	r3, [r1, #12]
 800763e:	e001      	b.n	8007644 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e000      	b.n	8007646 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3734      	adds	r7, #52	@ 0x34
 800764a:	46bd      	mov	sp, r7
 800764c:	bd90      	pop	{r4, r7, pc}
 800764e:	bf00      	nop
 8007650:	eefefffc 	.word	0xeefefffc

08007654 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d101      	bne.n	8007668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	e12d      	b.n	80078c4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007668:	4b98      	ldr	r3, [pc, #608]	@ (80078cc <HAL_RCC_ClockConfig+0x278>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f003 0307 	and.w	r3, r3, #7
 8007670:	683a      	ldr	r2, [r7, #0]
 8007672:	429a      	cmp	r2, r3
 8007674:	d91b      	bls.n	80076ae <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007676:	4b95      	ldr	r3, [pc, #596]	@ (80078cc <HAL_RCC_ClockConfig+0x278>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f023 0207 	bic.w	r2, r3, #7
 800767e:	4993      	ldr	r1, [pc, #588]	@ (80078cc <HAL_RCC_ClockConfig+0x278>)
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	4313      	orrs	r3, r2
 8007684:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007686:	f7fa fbdb 	bl	8001e40 <HAL_GetTick>
 800768a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800768c:	e008      	b.n	80076a0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800768e:	f7fa fbd7 	bl	8001e40 <HAL_GetTick>
 8007692:	4602      	mov	r2, r0
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	2b02      	cmp	r3, #2
 800769a:	d901      	bls.n	80076a0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800769c:	2303      	movs	r3, #3
 800769e:	e111      	b.n	80078c4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076a0:	4b8a      	ldr	r3, [pc, #552]	@ (80078cc <HAL_RCC_ClockConfig+0x278>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f003 0307 	and.w	r3, r3, #7
 80076a8:	683a      	ldr	r2, [r7, #0]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d1ef      	bne.n	800768e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 0302 	and.w	r3, r3, #2
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d016      	beq.n	80076e8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	4618      	mov	r0, r3
 80076c0:	f7ff fafb 	bl	8006cba <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80076c4:	f7fa fbbc 	bl	8001e40 <HAL_GetTick>
 80076c8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80076ca:	e008      	b.n	80076de <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80076cc:	f7fa fbb8 	bl	8001e40 <HAL_GetTick>
 80076d0:	4602      	mov	r2, r0
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	1ad3      	subs	r3, r2, r3
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	d901      	bls.n	80076de <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e0f2      	b.n	80078c4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80076de:	f7ff fbe8 	bl	8006eb2 <LL_RCC_IsActiveFlag_HPRE>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d0f1      	beq.n	80076cc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0320 	and.w	r3, r3, #32
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d016      	beq.n	8007722 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	695b      	ldr	r3, [r3, #20]
 80076f8:	4618      	mov	r0, r3
 80076fa:	f7ff faf2 	bl	8006ce2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80076fe:	f7fa fb9f 	bl	8001e40 <HAL_GetTick>
 8007702:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007704:	e008      	b.n	8007718 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007706:	f7fa fb9b 	bl	8001e40 <HAL_GetTick>
 800770a:	4602      	mov	r2, r0
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	2b02      	cmp	r3, #2
 8007712:	d901      	bls.n	8007718 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8007714:	2303      	movs	r3, #3
 8007716:	e0d5      	b.n	80078c4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007718:	f7ff fbdd 	bl	8006ed6 <LL_RCC_IsActiveFlag_C2HPRE>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d0f1      	beq.n	8007706 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800772a:	2b00      	cmp	r3, #0
 800772c:	d016      	beq.n	800775c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	699b      	ldr	r3, [r3, #24]
 8007732:	4618      	mov	r0, r3
 8007734:	f7ff faeb 	bl	8006d0e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007738:	f7fa fb82 	bl	8001e40 <HAL_GetTick>
 800773c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800773e:	e008      	b.n	8007752 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007740:	f7fa fb7e 	bl	8001e40 <HAL_GetTick>
 8007744:	4602      	mov	r2, r0
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	2b02      	cmp	r3, #2
 800774c:	d901      	bls.n	8007752 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800774e:	2303      	movs	r3, #3
 8007750:	e0b8      	b.n	80078c4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007752:	f7ff fbd3 	bl	8006efc <LL_RCC_IsActiveFlag_SHDHPRE>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d0f1      	beq.n	8007740 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0304 	and.w	r3, r3, #4
 8007764:	2b00      	cmp	r3, #0
 8007766:	d016      	beq.n	8007796 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	4618      	mov	r0, r3
 800776e:	f7ff fae5 	bl	8006d3c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007772:	f7fa fb65 	bl	8001e40 <HAL_GetTick>
 8007776:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007778:	e008      	b.n	800778c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800777a:	f7fa fb61 	bl	8001e40 <HAL_GetTick>
 800777e:	4602      	mov	r2, r0
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	2b02      	cmp	r3, #2
 8007786:	d901      	bls.n	800778c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	e09b      	b.n	80078c4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800778c:	f7ff fbc9 	bl	8006f22 <LL_RCC_IsActiveFlag_PPRE1>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d0f1      	beq.n	800777a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f003 0308 	and.w	r3, r3, #8
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d017      	beq.n	80077d2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	00db      	lsls	r3, r3, #3
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7ff fadb 	bl	8006d64 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80077ae:	f7fa fb47 	bl	8001e40 <HAL_GetTick>
 80077b2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80077b4:	e008      	b.n	80077c8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80077b6:	f7fa fb43 	bl	8001e40 <HAL_GetTick>
 80077ba:	4602      	mov	r2, r0
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	1ad3      	subs	r3, r2, r3
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d901      	bls.n	80077c8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80077c4:	2303      	movs	r3, #3
 80077c6:	e07d      	b.n	80078c4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80077c8:	f7ff fbbd 	bl	8006f46 <LL_RCC_IsActiveFlag_PPRE2>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d0f1      	beq.n	80077b6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f003 0301 	and.w	r3, r3, #1
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d043      	beq.n	8007866 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d106      	bne.n	80077f4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80077e6:	f7ff f87b 	bl	80068e0 <LL_RCC_HSE_IsReady>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d11e      	bne.n	800782e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	e067      	b.n	80078c4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	2b03      	cmp	r3, #3
 80077fa:	d106      	bne.n	800780a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80077fc:	f7ff fb16 	bl	8006e2c <LL_RCC_PLL_IsReady>
 8007800:	4603      	mov	r3, r0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d113      	bne.n	800782e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	e05c      	b.n	80078c4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d106      	bne.n	8007820 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8007812:	f7ff f9e3 	bl	8006bdc <LL_RCC_MSI_IsReady>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d108      	bne.n	800782e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	e051      	b.n	80078c4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007820:	f7ff f88e 	bl	8006940 <LL_RCC_HSI_IsReady>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d101      	bne.n	800782e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	e04a      	b.n	80078c4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	4618      	mov	r0, r3
 8007834:	f7ff fa21 	bl	8006c7a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007838:	f7fa fb02 	bl	8001e40 <HAL_GetTick>
 800783c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800783e:	e00a      	b.n	8007856 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007840:	f7fa fafe 	bl	8001e40 <HAL_GetTick>
 8007844:	4602      	mov	r2, r0
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800784e:	4293      	cmp	r3, r2
 8007850:	d901      	bls.n	8007856 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8007852:	2303      	movs	r3, #3
 8007854:	e036      	b.n	80078c4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007856:	f7ff fa24 	bl	8006ca2 <LL_RCC_GetSysClkSource>
 800785a:	4602      	mov	r2, r0
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	429a      	cmp	r2, r3
 8007864:	d1ec      	bne.n	8007840 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007866:	4b19      	ldr	r3, [pc, #100]	@ (80078cc <HAL_RCC_ClockConfig+0x278>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 0307 	and.w	r3, r3, #7
 800786e:	683a      	ldr	r2, [r7, #0]
 8007870:	429a      	cmp	r2, r3
 8007872:	d21b      	bcs.n	80078ac <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007874:	4b15      	ldr	r3, [pc, #84]	@ (80078cc <HAL_RCC_ClockConfig+0x278>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f023 0207 	bic.w	r2, r3, #7
 800787c:	4913      	ldr	r1, [pc, #76]	@ (80078cc <HAL_RCC_ClockConfig+0x278>)
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	4313      	orrs	r3, r2
 8007882:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007884:	f7fa fadc 	bl	8001e40 <HAL_GetTick>
 8007888:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800788a:	e008      	b.n	800789e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800788c:	f7fa fad8 	bl	8001e40 <HAL_GetTick>
 8007890:	4602      	mov	r2, r0
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	1ad3      	subs	r3, r2, r3
 8007896:	2b02      	cmp	r3, #2
 8007898:	d901      	bls.n	800789e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800789a:	2303      	movs	r3, #3
 800789c:	e012      	b.n	80078c4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800789e:	4b0b      	ldr	r3, [pc, #44]	@ (80078cc <HAL_RCC_ClockConfig+0x278>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 0307 	and.w	r3, r3, #7
 80078a6:	683a      	ldr	r2, [r7, #0]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d1ef      	bne.n	800788c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80078ac:	f000 f87e 	bl	80079ac <HAL_RCC_GetHCLKFreq>
 80078b0:	4603      	mov	r3, r0
 80078b2:	4a07      	ldr	r2, [pc, #28]	@ (80078d0 <HAL_RCC_ClockConfig+0x27c>)
 80078b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80078b6:	f7fa facf 	bl	8001e58 <HAL_GetTickPrio>
 80078ba:	4603      	mov	r3, r0
 80078bc:	4618      	mov	r0, r3
 80078be:	f7fa fa71 	bl	8001da4 <HAL_InitTick>
 80078c2:	4603      	mov	r3, r0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3710      	adds	r7, #16
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	58004000 	.word	0x58004000
 80078d0:	20000008 	.word	0x20000008

080078d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078d4:	b590      	push	{r4, r7, lr}
 80078d6:	b085      	sub	sp, #20
 80078d8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80078da:	f7ff f9e2 	bl	8006ca2 <LL_RCC_GetSysClkSource>
 80078de:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d10a      	bne.n	80078fc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80078e6:	f7ff f99e 	bl	8006c26 <LL_RCC_MSI_GetRange>
 80078ea:	4603      	mov	r3, r0
 80078ec:	091b      	lsrs	r3, r3, #4
 80078ee:	f003 030f 	and.w	r3, r3, #15
 80078f2:	4a2b      	ldr	r2, [pc, #172]	@ (80079a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 80078f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078f8:	60fb      	str	r3, [r7, #12]
 80078fa:	e04b      	b.n	8007994 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2b04      	cmp	r3, #4
 8007900:	d102      	bne.n	8007908 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007902:	4b28      	ldr	r3, [pc, #160]	@ (80079a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007904:	60fb      	str	r3, [r7, #12]
 8007906:	e045      	b.n	8007994 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2b08      	cmp	r3, #8
 800790c:	d10a      	bne.n	8007924 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800790e:	f7fe ffb7 	bl	8006880 <LL_RCC_HSE_IsEnabledDiv2>
 8007912:	4603      	mov	r3, r0
 8007914:	2b01      	cmp	r3, #1
 8007916:	d102      	bne.n	800791e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8007918:	4b22      	ldr	r3, [pc, #136]	@ (80079a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800791a:	60fb      	str	r3, [r7, #12]
 800791c:	e03a      	b.n	8007994 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800791e:	4b22      	ldr	r3, [pc, #136]	@ (80079a8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007920:	60fb      	str	r3, [r7, #12]
 8007922:	e037      	b.n	8007994 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8007924:	f7ff fab9 	bl	8006e9a <LL_RCC_PLL_GetMainSource>
 8007928:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	2b02      	cmp	r3, #2
 800792e:	d003      	beq.n	8007938 <HAL_RCC_GetSysClockFreq+0x64>
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	2b03      	cmp	r3, #3
 8007934:	d003      	beq.n	800793e <HAL_RCC_GetSysClockFreq+0x6a>
 8007936:	e00d      	b.n	8007954 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8007938:	4b1a      	ldr	r3, [pc, #104]	@ (80079a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800793a:	60bb      	str	r3, [r7, #8]
        break;
 800793c:	e015      	b.n	800796a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800793e:	f7fe ff9f 	bl	8006880 <LL_RCC_HSE_IsEnabledDiv2>
 8007942:	4603      	mov	r3, r0
 8007944:	2b01      	cmp	r3, #1
 8007946:	d102      	bne.n	800794e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8007948:	4b16      	ldr	r3, [pc, #88]	@ (80079a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800794a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800794c:	e00d      	b.n	800796a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800794e:	4b16      	ldr	r3, [pc, #88]	@ (80079a8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007950:	60bb      	str	r3, [r7, #8]
        break;
 8007952:	e00a      	b.n	800796a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007954:	f7ff f967 	bl	8006c26 <LL_RCC_MSI_GetRange>
 8007958:	4603      	mov	r3, r0
 800795a:	091b      	lsrs	r3, r3, #4
 800795c:	f003 030f 	and.w	r3, r3, #15
 8007960:	4a0f      	ldr	r2, [pc, #60]	@ (80079a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007966:	60bb      	str	r3, [r7, #8]
        break;
 8007968:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800796a:	f7ff fa71 	bl	8006e50 <LL_RCC_PLL_GetN>
 800796e:	4602      	mov	r2, r0
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	fb03 f402 	mul.w	r4, r3, r2
 8007976:	f7ff fa84 	bl	8006e82 <LL_RCC_PLL_GetDivider>
 800797a:	4603      	mov	r3, r0
 800797c:	091b      	lsrs	r3, r3, #4
 800797e:	3301      	adds	r3, #1
 8007980:	fbb4 f4f3 	udiv	r4, r4, r3
 8007984:	f7ff fa71 	bl	8006e6a <LL_RCC_PLL_GetR>
 8007988:	4603      	mov	r3, r0
 800798a:	0f5b      	lsrs	r3, r3, #29
 800798c:	3301      	adds	r3, #1
 800798e:	fbb4 f3f3 	udiv	r3, r4, r3
 8007992:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8007994:	68fb      	ldr	r3, [r7, #12]
}
 8007996:	4618      	mov	r0, r3
 8007998:	3714      	adds	r7, #20
 800799a:	46bd      	mov	sp, r7
 800799c:	bd90      	pop	{r4, r7, pc}
 800799e:	bf00      	nop
 80079a0:	08011214 	.word	0x08011214
 80079a4:	00f42400 	.word	0x00f42400
 80079a8:	01e84800 	.word	0x01e84800

080079ac <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079ac:	b598      	push	{r3, r4, r7, lr}
 80079ae:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80079b0:	f7ff ff90 	bl	80078d4 <HAL_RCC_GetSysClockFreq>
 80079b4:	4604      	mov	r4, r0
 80079b6:	f7ff f9e9 	bl	8006d8c <LL_RCC_GetAHBPrescaler>
 80079ba:	4603      	mov	r3, r0
 80079bc:	091b      	lsrs	r3, r3, #4
 80079be:	f003 030f 	and.w	r3, r3, #15
 80079c2:	4a03      	ldr	r2, [pc, #12]	@ (80079d0 <HAL_RCC_GetHCLKFreq+0x24>)
 80079c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079c8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	bd98      	pop	{r3, r4, r7, pc}
 80079d0:	080111b4 	.word	0x080111b4

080079d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079d4:	b598      	push	{r3, r4, r7, lr}
 80079d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80079d8:	f7ff ffe8 	bl	80079ac <HAL_RCC_GetHCLKFreq>
 80079dc:	4604      	mov	r4, r0
 80079de:	f7ff f9ef 	bl	8006dc0 <LL_RCC_GetAPB1Prescaler>
 80079e2:	4603      	mov	r3, r0
 80079e4:	0a1b      	lsrs	r3, r3, #8
 80079e6:	f003 0307 	and.w	r3, r3, #7
 80079ea:	4a04      	ldr	r2, [pc, #16]	@ (80079fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80079ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079f0:	f003 031f 	and.w	r3, r3, #31
 80079f4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	bd98      	pop	{r3, r4, r7, pc}
 80079fc:	080111f4 	.word	0x080111f4

08007a00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a00:	b598      	push	{r3, r4, r7, lr}
 8007a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8007a04:	f7ff ffd2 	bl	80079ac <HAL_RCC_GetHCLKFreq>
 8007a08:	4604      	mov	r4, r0
 8007a0a:	f7ff f9e5 	bl	8006dd8 <LL_RCC_GetAPB2Prescaler>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	0adb      	lsrs	r3, r3, #11
 8007a12:	f003 0307 	and.w	r3, r3, #7
 8007a16:	4a04      	ldr	r2, [pc, #16]	@ (8007a28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a1c:	f003 031f 	and.w	r3, r3, #31
 8007a20:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	bd98      	pop	{r3, r4, r7, pc}
 8007a28:	080111f4 	.word	0x080111f4

08007a2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8007a2c:	b590      	push	{r4, r7, lr}
 8007a2e:	b085      	sub	sp, #20
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2bb0      	cmp	r3, #176	@ 0xb0
 8007a38:	d903      	bls.n	8007a42 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8007a3a:	4b15      	ldr	r3, [pc, #84]	@ (8007a90 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a3e:	60fb      	str	r3, [r7, #12]
 8007a40:	e007      	b.n	8007a52 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	091b      	lsrs	r3, r3, #4
 8007a46:	f003 030f 	and.w	r3, r3, #15
 8007a4a:	4a11      	ldr	r2, [pc, #68]	@ (8007a90 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a50:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8007a52:	f7ff f9a7 	bl	8006da4 <LL_RCC_GetAHB4Prescaler>
 8007a56:	4603      	mov	r3, r0
 8007a58:	091b      	lsrs	r3, r3, #4
 8007a5a:	f003 030f 	and.w	r3, r3, #15
 8007a5e:	4a0d      	ldr	r2, [pc, #52]	@ (8007a94 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8007a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a6a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8007a98 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8007a70:	fba2 2303 	umull	r2, r3, r2, r3
 8007a74:	0c9c      	lsrs	r4, r3, #18
 8007a76:	f7fe fee5 	bl	8006844 <HAL_PWREx_GetVoltageRange>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	4620      	mov	r0, r4
 8007a80:	f000 f80c 	bl	8007a9c <RCC_SetFlashLatency>
 8007a84:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3714      	adds	r7, #20
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd90      	pop	{r4, r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	08011214 	.word	0x08011214
 8007a94:	080111b4 	.word	0x080111b4
 8007a98:	431bde83 	.word	0x431bde83

08007a9c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007a9c:	b590      	push	{r4, r7, lr}
 8007a9e:	b093      	sub	sp, #76	@ 0x4c
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8007aa6:	4b37      	ldr	r3, [pc, #220]	@ (8007b84 <RCC_SetFlashLatency+0xe8>)
 8007aa8:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8007aac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007aae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8007ab2:	4a35      	ldr	r2, [pc, #212]	@ (8007b88 <RCC_SetFlashLatency+0xec>)
 8007ab4:	f107 031c 	add.w	r3, r7, #28
 8007ab8:	ca07      	ldmia	r2, {r0, r1, r2}
 8007aba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8007abe:	4b33      	ldr	r3, [pc, #204]	@ (8007b8c <RCC_SetFlashLatency+0xf0>)
 8007ac0:	f107 040c 	add.w	r4, r7, #12
 8007ac4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007ac6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007aca:	2300      	movs	r3, #0
 8007acc:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ad4:	d11a      	bne.n	8007b0c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ada:	e013      	b.n	8007b04 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007adc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	3348      	adds	r3, #72	@ 0x48
 8007ae2:	443b      	add	r3, r7
 8007ae4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d807      	bhi.n	8007afe <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007aee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	3348      	adds	r3, #72	@ 0x48
 8007af4:	443b      	add	r3, r7
 8007af6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007afa:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8007afc:	e020      	b.n	8007b40 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007afe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b00:	3301      	adds	r3, #1
 8007b02:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b06:	2b03      	cmp	r3, #3
 8007b08:	d9e8      	bls.n	8007adc <RCC_SetFlashLatency+0x40>
 8007b0a:	e019      	b.n	8007b40 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b10:	e013      	b.n	8007b3a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007b12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	3348      	adds	r3, #72	@ 0x48
 8007b18:	443b      	add	r3, r7
 8007b1a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d807      	bhi.n	8007b34 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007b24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	3348      	adds	r3, #72	@ 0x48
 8007b2a:	443b      	add	r3, r7
 8007b2c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007b30:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8007b32:	e005      	b.n	8007b40 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007b34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b36:	3301      	adds	r3, #1
 8007b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d9e8      	bls.n	8007b12 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8007b40:	4b13      	ldr	r3, [pc, #76]	@ (8007b90 <RCC_SetFlashLatency+0xf4>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f023 0207 	bic.w	r2, r3, #7
 8007b48:	4911      	ldr	r1, [pc, #68]	@ (8007b90 <RCC_SetFlashLatency+0xf4>)
 8007b4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007b50:	f7fa f976 	bl	8001e40 <HAL_GetTick>
 8007b54:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007b56:	e008      	b.n	8007b6a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007b58:	f7fa f972 	bl	8001e40 <HAL_GetTick>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	d901      	bls.n	8007b6a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	e007      	b.n	8007b7a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007b6a:	4b09      	ldr	r3, [pc, #36]	@ (8007b90 <RCC_SetFlashLatency+0xf4>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 0307 	and.w	r3, r3, #7
 8007b72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d1ef      	bne.n	8007b58 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	374c      	adds	r7, #76	@ 0x4c
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd90      	pop	{r4, r7, pc}
 8007b82:	bf00      	nop
 8007b84:	08011108 	.word	0x08011108
 8007b88:	08011118 	.word	0x08011118
 8007b8c:	08011124 	.word	0x08011124
 8007b90:	58004000 	.word	0x58004000

08007b94 <LL_RCC_LSE_IsEnabled>:
{
 8007b94:	b480      	push	{r7}
 8007b96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8007b98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ba0:	f003 0301 	and.w	r3, r3, #1
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d101      	bne.n	8007bac <LL_RCC_LSE_IsEnabled+0x18>
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e000      	b.n	8007bae <LL_RCC_LSE_IsEnabled+0x1a>
 8007bac:	2300      	movs	r3, #0
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <LL_RCC_LSE_IsReady>:
{
 8007bb8:	b480      	push	{r7}
 8007bba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007bbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bc4:	f003 0302 	and.w	r3, r3, #2
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	d101      	bne.n	8007bd0 <LL_RCC_LSE_IsReady+0x18>
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e000      	b.n	8007bd2 <LL_RCC_LSE_IsReady+0x1a>
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <LL_RCC_SetRFWKPClockSource>:
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8007be4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007bec:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007bf0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <LL_RCC_SetSMPSClockSource>:
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8007c10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c16:	f023 0203 	bic.w	r2, r3, #3
 8007c1a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8007c24:	bf00      	nop
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <LL_RCC_SetSMPSPrescaler>:
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8007c38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c3e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007c42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8007c4c:	bf00      	nop
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <LL_RCC_SetUSARTClockSource>:
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8007c60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c68:	f023 0203 	bic.w	r2, r3, #3
 8007c6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007c78:	bf00      	nop
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <LL_RCC_SetLPUARTClockSource>:
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007c8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c94:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007c98:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007ca4:	bf00      	nop
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <LL_RCC_SetI2CClockSource>:
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007cb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cbc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	091b      	lsrs	r3, r3, #4
 8007cc4:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007cc8:	43db      	mvns	r3, r3
 8007cca:	401a      	ands	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	011b      	lsls	r3, r3, #4
 8007cd0:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007cd4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007cde:	bf00      	nop
 8007ce0:	370c      	adds	r7, #12
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr

08007cea <LL_RCC_SetLPTIMClockSource>:
{
 8007cea:	b480      	push	{r7}
 8007cec:	b083      	sub	sp, #12
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007cf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cf6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	0c1b      	lsrs	r3, r3, #16
 8007cfe:	041b      	lsls	r3, r3, #16
 8007d00:	43db      	mvns	r3, r3
 8007d02:	401a      	ands	r2, r3
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	041b      	lsls	r3, r3, #16
 8007d08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007d12:	bf00      	nop
 8007d14:	370c      	adds	r7, #12
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr

08007d1e <LL_RCC_SetSAIClockSource>:
{
 8007d1e:	b480      	push	{r7}
 8007d20:	b083      	sub	sp, #12
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8007d26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d2e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007d32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007d3e:	bf00      	nop
 8007d40:	370c      	adds	r7, #12
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr

08007d4a <LL_RCC_SetRNGClockSource>:
{
 8007d4a:	b480      	push	{r7}
 8007d4c:	b083      	sub	sp, #12
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007d52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d5a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007d5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4313      	orrs	r3, r2
 8007d66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007d6a:	bf00      	nop
 8007d6c:	370c      	adds	r7, #12
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr

08007d76 <LL_RCC_SetCLK48ClockSource>:
{
 8007d76:	b480      	push	{r7}
 8007d78:	b083      	sub	sp, #12
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8007d7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d86:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007d8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4313      	orrs	r3, r2
 8007d92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007d96:	bf00      	nop
 8007d98:	370c      	adds	r7, #12
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr

08007da2 <LL_RCC_SetUSBClockSource>:
{
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b082      	sub	sp, #8
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f7ff ffe3 	bl	8007d76 <LL_RCC_SetCLK48ClockSource>
}
 8007db0:	bf00      	nop
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <LL_RCC_SetADCClockSource>:
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007dc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dc8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007dcc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007dd8:	bf00      	nop
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <LL_RCC_SetRTCClockSource>:
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007dec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007df4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007df8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8007e04:	bf00      	nop
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <LL_RCC_GetRTCClockSource>:
{
 8007e10:	b480      	push	{r7}
 8007e12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007e14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr

08007e2a <LL_RCC_ForceBackupDomainReset>:
{
 8007e2a:	b480      	push	{r7}
 8007e2c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007e2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007e3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007e42:	bf00      	nop
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <LL_RCC_ReleaseBackupDomainReset>:
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007e50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007e5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007e64:	bf00      	nop
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr

08007e6e <LL_RCC_PLLSAI1_Enable>:
{
 8007e6e:	b480      	push	{r7}
 8007e70:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007e72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007e7c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007e80:	6013      	str	r3, [r2, #0]
}
 8007e82:	bf00      	nop
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <LL_RCC_PLLSAI1_Disable>:
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007e90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007e9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007e9e:	6013      	str	r3, [r2, #0]
}
 8007ea0:	bf00      	nop
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr

08007eaa <LL_RCC_PLLSAI1_IsReady>:
{
 8007eaa:	b480      	push	{r7}
 8007eac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8007eae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007eb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ebc:	d101      	bne.n	8007ec2 <LL_RCC_PLLSAI1_IsReady+0x18>
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e000      	b.n	8007ec4 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr

08007ece <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b088      	sub	sp, #32
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007eda:	2300      	movs	r3, #0
 8007edc:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d034      	beq.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eee:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007ef2:	d021      	beq.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8007ef4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007ef8:	d81b      	bhi.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007efa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007efe:	d01d      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8007f00:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007f04:	d815      	bhi.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00b      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8007f0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f0e:	d110      	bne.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8007f10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f1e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8007f20:	e00d      	b.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	3304      	adds	r3, #4
 8007f26:	4618      	mov	r0, r3
 8007f28:	f000 f947 	bl	80081ba <RCCEx_PLLSAI1_ConfigNP>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007f30:	e005      	b.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	77fb      	strb	r3, [r7, #31]
        break;
 8007f36:	e002      	b.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007f38:	bf00      	nop
 8007f3a:	e000      	b.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007f3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f3e:	7ffb      	ldrb	r3, [r7, #31]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d105      	bne.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7ff fee8 	bl	8007d1e <LL_RCC_SetSAIClockSource>
 8007f4e:	e001      	b.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f50:	7ffb      	ldrb	r3, [r7, #31]
 8007f52:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d046      	beq.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8007f60:	f7ff ff56 	bl	8007e10 <LL_RCC_GetRTCClockSource>
 8007f64:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f6a:	69ba      	ldr	r2, [r7, #24]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d03c      	beq.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007f70:	f7fe fc58 	bl	8006824 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d105      	bne.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7ff ff30 	bl	8007de4 <LL_RCC_SetRTCClockSource>
 8007f84:	e02e      	b.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8007f86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f8e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8007f90:	f7ff ff4b 	bl	8007e2a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8007f94:	f7ff ff5a 	bl	8007e4c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8007fa6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8007fb0:	f7ff fdf0 	bl	8007b94 <LL_RCC_LSE_IsEnabled>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d114      	bne.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007fba:	f7f9 ff41 	bl	8001e40 <HAL_GetTick>
 8007fbe:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8007fc0:	e00b      	b.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fc2:	f7f9 ff3d 	bl	8001e40 <HAL_GetTick>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	1ad3      	subs	r3, r2, r3
 8007fcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d902      	bls.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	77fb      	strb	r3, [r7, #31]
              break;
 8007fd8:	e004      	b.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8007fda:	f7ff fded 	bl	8007bb8 <LL_RCC_LSE_IsReady>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d1ee      	bne.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8007fe4:	7ffb      	ldrb	r3, [r7, #31]
 8007fe6:	77bb      	strb	r3, [r7, #30]
 8007fe8:	e001      	b.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fea:	7ffb      	ldrb	r3, [r7, #31]
 8007fec:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 0301 	and.w	r3, r3, #1
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d004      	beq.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	699b      	ldr	r3, [r3, #24]
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7ff fe2a 	bl	8007c58 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f003 0302 	and.w	r3, r3, #2
 800800c:	2b00      	cmp	r3, #0
 800800e:	d004      	beq.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	69db      	ldr	r3, [r3, #28]
 8008014:	4618      	mov	r0, r3
 8008016:	f7ff fe35 	bl	8007c84 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f003 0310 	and.w	r3, r3, #16
 8008022:	2b00      	cmp	r3, #0
 8008024:	d004      	beq.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800802a:	4618      	mov	r0, r3
 800802c:	f7ff fe5d 	bl	8007cea <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 0320 	and.w	r3, r3, #32
 8008038:	2b00      	cmp	r3, #0
 800803a:	d004      	beq.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008040:	4618      	mov	r0, r3
 8008042:	f7ff fe52 	bl	8007cea <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f003 0304 	and.w	r3, r3, #4
 800804e:	2b00      	cmp	r3, #0
 8008050:	d004      	beq.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6a1b      	ldr	r3, [r3, #32]
 8008056:	4618      	mov	r0, r3
 8008058:	f7ff fe2a 	bl	8007cb0 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 0308 	and.w	r3, r3, #8
 8008064:	2b00      	cmp	r3, #0
 8008066:	d004      	beq.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800806c:	4618      	mov	r0, r3
 800806e:	f7ff fe1f 	bl	8007cb0 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800807a:	2b00      	cmp	r3, #0
 800807c:	d022      	beq.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008082:	4618      	mov	r0, r3
 8008084:	f7ff fe8d 	bl	8007da2 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800808c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008090:	d107      	bne.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8008092:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800809c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80080a0:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80080aa:	d10b      	bne.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	3304      	adds	r3, #4
 80080b0:	4618      	mov	r0, r3
 80080b2:	f000 f8dd 	bl	8008270 <RCCEx_PLLSAI1_ConfigNQ>
 80080b6:	4603      	mov	r3, r0
 80080b8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80080ba:	7ffb      	ldrb	r3, [r7, #31]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d001      	beq.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80080c0:	7ffb      	ldrb	r3, [r7, #31]
 80080c2:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d02b      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080d8:	d008      	beq.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080e2:	d003      	beq.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d105      	bne.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7ff fe2a 	bl	8007d4a <LL_RCC_SetRNGClockSource>
 80080f6:	e00a      	b.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x240>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008100:	60fb      	str	r3, [r7, #12]
 8008102:	2000      	movs	r0, #0
 8008104:	f7ff fe21 	bl	8007d4a <LL_RCC_SetRNGClockSource>
 8008108:	68f8      	ldr	r0, [r7, #12]
 800810a:	f7ff fe34 	bl	8007d76 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008112:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8008116:	d107      	bne.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8008118:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008122:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008126:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008130:	2b00      	cmp	r3, #0
 8008132:	d022      	beq.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008138:	4618      	mov	r0, r3
 800813a:	f7ff fe3d 	bl	8007db8 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008142:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008146:	d107      	bne.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008148:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008152:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008156:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800815c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008160:	d10b      	bne.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	3304      	adds	r3, #4
 8008166:	4618      	mov	r0, r3
 8008168:	f000 f8dd 	bl	8008326 <RCCEx_PLLSAI1_ConfigNR>
 800816c:	4603      	mov	r3, r0
 800816e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008170:	7ffb      	ldrb	r3, [r7, #31]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d001      	beq.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8008176:	7ffb      	ldrb	r3, [r7, #31]
 8008178:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008182:	2b00      	cmp	r3, #0
 8008184:	d004      	beq.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800818a:	4618      	mov	r0, r3
 800818c:	f7ff fd26 	bl	8007bdc <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008198:	2b00      	cmp	r3, #0
 800819a:	d009      	beq.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7ff fd45 	bl	8007c30 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7ff fd2c 	bl	8007c08 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80081b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3720      	adds	r7, #32
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b084      	sub	sp, #16
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80081c2:	2300      	movs	r3, #0
 80081c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80081c6:	f7ff fe61 	bl	8007e8c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80081ca:	f7f9 fe39 	bl	8001e40 <HAL_GetTick>
 80081ce:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80081d0:	e009      	b.n	80081e6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80081d2:	f7f9 fe35 	bl	8001e40 <HAL_GetTick>
 80081d6:	4602      	mov	r2, r0
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	2b02      	cmp	r3, #2
 80081de:	d902      	bls.n	80081e6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80081e0:	2303      	movs	r3, #3
 80081e2:	73fb      	strb	r3, [r7, #15]
      break;
 80081e4:	e004      	b.n	80081f0 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80081e6:	f7ff fe60 	bl	8007eaa <LL_RCC_PLLSAI1_IsReady>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d1f0      	bne.n	80081d2 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80081f0:	7bfb      	ldrb	r3, [r7, #15]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d137      	bne.n	8008266 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80081f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081fa:	691b      	ldr	r3, [r3, #16]
 80081fc:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	021b      	lsls	r3, r3, #8
 8008206:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800820a:	4313      	orrs	r3, r2
 800820c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800820e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008220:	4313      	orrs	r3, r2
 8008222:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008224:	f7ff fe23 	bl	8007e6e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008228:	f7f9 fe0a 	bl	8001e40 <HAL_GetTick>
 800822c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800822e:	e009      	b.n	8008244 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008230:	f7f9 fe06 	bl	8001e40 <HAL_GetTick>
 8008234:	4602      	mov	r2, r0
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	1ad3      	subs	r3, r2, r3
 800823a:	2b02      	cmp	r3, #2
 800823c:	d902      	bls.n	8008244 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800823e:	2303      	movs	r3, #3
 8008240:	73fb      	strb	r3, [r7, #15]
        break;
 8008242:	e004      	b.n	800824e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008244:	f7ff fe31 	bl	8007eaa <LL_RCC_PLLSAI1_IsReady>
 8008248:	4603      	mov	r3, r0
 800824a:	2b01      	cmp	r3, #1
 800824c:	d1f0      	bne.n	8008230 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800824e:	7bfb      	ldrb	r3, [r7, #15]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d108      	bne.n	8008266 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008254:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008258:	691a      	ldr	r2, [r3, #16]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	691b      	ldr	r3, [r3, #16]
 800825e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008262:	4313      	orrs	r3, r2
 8008264:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008266:	7bfb      	ldrb	r3, [r7, #15]
}
 8008268:	4618      	mov	r0, r3
 800826a:	3710      	adds	r7, #16
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008278:	2300      	movs	r3, #0
 800827a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800827c:	f7ff fe06 	bl	8007e8c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008280:	f7f9 fdde 	bl	8001e40 <HAL_GetTick>
 8008284:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008286:	e009      	b.n	800829c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008288:	f7f9 fdda 	bl	8001e40 <HAL_GetTick>
 800828c:	4602      	mov	r2, r0
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	2b02      	cmp	r3, #2
 8008294:	d902      	bls.n	800829c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8008296:	2303      	movs	r3, #3
 8008298:	73fb      	strb	r3, [r7, #15]
      break;
 800829a:	e004      	b.n	80082a6 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800829c:	f7ff fe05 	bl	8007eaa <LL_RCC_PLLSAI1_IsReady>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d1f0      	bne.n	8008288 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80082a6:	7bfb      	ldrb	r3, [r7, #15]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d137      	bne.n	800831c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80082ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	021b      	lsls	r3, r3, #8
 80082bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80082c0:	4313      	orrs	r3, r2
 80082c2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80082c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80082d6:	4313      	orrs	r3, r2
 80082d8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80082da:	f7ff fdc8 	bl	8007e6e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082de:	f7f9 fdaf 	bl	8001e40 <HAL_GetTick>
 80082e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80082e4:	e009      	b.n	80082fa <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80082e6:	f7f9 fdab 	bl	8001e40 <HAL_GetTick>
 80082ea:	4602      	mov	r2, r0
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	1ad3      	subs	r3, r2, r3
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	d902      	bls.n	80082fa <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80082f4:	2303      	movs	r3, #3
 80082f6:	73fb      	strb	r3, [r7, #15]
        break;
 80082f8:	e004      	b.n	8008304 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80082fa:	f7ff fdd6 	bl	8007eaa <LL_RCC_PLLSAI1_IsReady>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b01      	cmp	r3, #1
 8008302:	d1f0      	bne.n	80082e6 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8008304:	7bfb      	ldrb	r3, [r7, #15]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d108      	bne.n	800831c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800830a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800830e:	691a      	ldr	r2, [r3, #16]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	691b      	ldr	r3, [r3, #16]
 8008314:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008318:	4313      	orrs	r3, r2
 800831a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800831c:	7bfb      	ldrb	r3, [r7, #15]
}
 800831e:	4618      	mov	r0, r3
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b084      	sub	sp, #16
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800832e:	2300      	movs	r3, #0
 8008330:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008332:	f7ff fdab 	bl	8007e8c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008336:	f7f9 fd83 	bl	8001e40 <HAL_GetTick>
 800833a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800833c:	e009      	b.n	8008352 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800833e:	f7f9 fd7f 	bl	8001e40 <HAL_GetTick>
 8008342:	4602      	mov	r2, r0
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	1ad3      	subs	r3, r2, r3
 8008348:	2b02      	cmp	r3, #2
 800834a:	d902      	bls.n	8008352 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800834c:	2303      	movs	r3, #3
 800834e:	73fb      	strb	r3, [r7, #15]
      break;
 8008350:	e004      	b.n	800835c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008352:	f7ff fdaa 	bl	8007eaa <LL_RCC_PLLSAI1_IsReady>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d1f0      	bne.n	800833e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800835c:	7bfb      	ldrb	r3, [r7, #15]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d137      	bne.n	80083d2 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008362:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008366:	691b      	ldr	r3, [r3, #16]
 8008368:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	021b      	lsls	r3, r3, #8
 8008372:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008376:	4313      	orrs	r3, r2
 8008378:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800837a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800838c:	4313      	orrs	r3, r2
 800838e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008390:	f7ff fd6d 	bl	8007e6e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008394:	f7f9 fd54 	bl	8001e40 <HAL_GetTick>
 8008398:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800839a:	e009      	b.n	80083b0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800839c:	f7f9 fd50 	bl	8001e40 <HAL_GetTick>
 80083a0:	4602      	mov	r2, r0
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	1ad3      	subs	r3, r2, r3
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	d902      	bls.n	80083b0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80083aa:	2303      	movs	r3, #3
 80083ac:	73fb      	strb	r3, [r7, #15]
        break;
 80083ae:	e004      	b.n	80083ba <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80083b0:	f7ff fd7b 	bl	8007eaa <LL_RCC_PLLSAI1_IsReady>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d1f0      	bne.n	800839c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80083ba:	7bfb      	ldrb	r3, [r7, #15]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d108      	bne.n	80083d2 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80083c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083c4:	691a      	ldr	r2, [r3, #16]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80083ce:	4313      	orrs	r3, r2
 80083d0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80083d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d101      	bne.n	80083ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	e049      	b.n	8008482 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d106      	bne.n	8008408 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f7f9 f916 	bl	8001634 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2202      	movs	r2, #2
 800840c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	3304      	adds	r3, #4
 8008418:	4619      	mov	r1, r3
 800841a:	4610      	mov	r0, r2
 800841c:	f000 fa7c 	bl	8008918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2201      	movs	r2, #1
 800842c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2201      	movs	r2, #1
 8008464:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3708      	adds	r7, #8
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
	...

0800848c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800848c:	b480      	push	{r7}
 800848e:	b085      	sub	sp, #20
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800849a:	b2db      	uxtb	r3, r3
 800849c:	2b01      	cmp	r3, #1
 800849e:	d001      	beq.n	80084a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	e036      	b.n	8008512 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2202      	movs	r2, #2
 80084a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	68da      	ldr	r2, [r3, #12]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f042 0201 	orr.w	r2, r2, #1
 80084ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a17      	ldr	r2, [pc, #92]	@ (8008520 <HAL_TIM_Base_Start_IT+0x94>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d004      	beq.n	80084d0 <HAL_TIM_Base_Start_IT+0x44>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084ce:	d115      	bne.n	80084fc <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	689a      	ldr	r2, [r3, #8]
 80084d6:	4b13      	ldr	r3, [pc, #76]	@ (8008524 <HAL_TIM_Base_Start_IT+0x98>)
 80084d8:	4013      	ands	r3, r2
 80084da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2b06      	cmp	r3, #6
 80084e0:	d015      	beq.n	800850e <HAL_TIM_Base_Start_IT+0x82>
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084e8:	d011      	beq.n	800850e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f042 0201 	orr.w	r2, r2, #1
 80084f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084fa:	e008      	b.n	800850e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f042 0201 	orr.w	r2, r2, #1
 800850a:	601a      	str	r2, [r3, #0]
 800850c:	e000      	b.n	8008510 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800850e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008510:	2300      	movs	r3, #0
}
 8008512:	4618      	mov	r0, r3
 8008514:	3714      	adds	r7, #20
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr
 800851e:	bf00      	nop
 8008520:	40012c00 	.word	0x40012c00
 8008524:	00010007 	.word	0x00010007

08008528 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	68db      	ldr	r3, [r3, #12]
 8008536:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	f003 0302 	and.w	r3, r3, #2
 8008546:	2b00      	cmp	r3, #0
 8008548:	d020      	beq.n	800858c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f003 0302 	and.w	r3, r3, #2
 8008550:	2b00      	cmp	r3, #0
 8008552:	d01b      	beq.n	800858c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f06f 0202 	mvn.w	r2, #2
 800855c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2201      	movs	r2, #1
 8008562:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	699b      	ldr	r3, [r3, #24]
 800856a:	f003 0303 	and.w	r3, r3, #3
 800856e:	2b00      	cmp	r3, #0
 8008570:	d003      	beq.n	800857a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 f9b2 	bl	80088dc <HAL_TIM_IC_CaptureCallback>
 8008578:	e005      	b.n	8008586 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f9a4 	bl	80088c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 f9b5 	bl	80088f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2200      	movs	r2, #0
 800858a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	f003 0304 	and.w	r3, r3, #4
 8008592:	2b00      	cmp	r3, #0
 8008594:	d020      	beq.n	80085d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f003 0304 	and.w	r3, r3, #4
 800859c:	2b00      	cmp	r3, #0
 800859e:	d01b      	beq.n	80085d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f06f 0204 	mvn.w	r2, #4
 80085a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2202      	movs	r2, #2
 80085ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	699b      	ldr	r3, [r3, #24]
 80085b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d003      	beq.n	80085c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 f98c 	bl	80088dc <HAL_TIM_IC_CaptureCallback>
 80085c4:	e005      	b.n	80085d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 f97e 	bl	80088c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 f98f 	bl	80088f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	f003 0308 	and.w	r3, r3, #8
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d020      	beq.n	8008624 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f003 0308 	and.w	r3, r3, #8
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d01b      	beq.n	8008624 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f06f 0208 	mvn.w	r2, #8
 80085f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2204      	movs	r2, #4
 80085fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	69db      	ldr	r3, [r3, #28]
 8008602:	f003 0303 	and.w	r3, r3, #3
 8008606:	2b00      	cmp	r3, #0
 8008608:	d003      	beq.n	8008612 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 f966 	bl	80088dc <HAL_TIM_IC_CaptureCallback>
 8008610:	e005      	b.n	800861e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 f958 	bl	80088c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 f969 	bl	80088f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	f003 0310 	and.w	r3, r3, #16
 800862a:	2b00      	cmp	r3, #0
 800862c:	d020      	beq.n	8008670 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f003 0310 	and.w	r3, r3, #16
 8008634:	2b00      	cmp	r3, #0
 8008636:	d01b      	beq.n	8008670 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f06f 0210 	mvn.w	r2, #16
 8008640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2208      	movs	r2, #8
 8008646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	69db      	ldr	r3, [r3, #28]
 800864e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008652:	2b00      	cmp	r3, #0
 8008654:	d003      	beq.n	800865e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 f940 	bl	80088dc <HAL_TIM_IC_CaptureCallback>
 800865c:	e005      	b.n	800866a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 f932 	bl	80088c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 f943 	bl	80088f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	f003 0301 	and.w	r3, r3, #1
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00c      	beq.n	8008694 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f003 0301 	and.w	r3, r3, #1
 8008680:	2b00      	cmp	r3, #0
 8008682:	d007      	beq.n	8008694 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f06f 0201 	mvn.w	r2, #1
 800868c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f7f8 fc0c 	bl	8000eac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800869a:	2b00      	cmp	r3, #0
 800869c:	d104      	bne.n	80086a8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d00c      	beq.n	80086c2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d007      	beq.n	80086c2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80086ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 faa1 	bl	8008c04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00c      	beq.n	80086e6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d007      	beq.n	80086e6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80086de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 fa99 	bl	8008c18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d00c      	beq.n	800870a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d007      	beq.n	800870a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 f8fd 	bl	8008904 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	f003 0320 	and.w	r3, r3, #32
 8008710:	2b00      	cmp	r3, #0
 8008712:	d00c      	beq.n	800872e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f003 0320 	and.w	r3, r3, #32
 800871a:	2b00      	cmp	r3, #0
 800871c:	d007      	beq.n	800872e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f06f 0220 	mvn.w	r2, #32
 8008726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 fa61 	bl	8008bf0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800872e:	bf00      	nop
 8008730:	3710      	adds	r7, #16
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008736:	b580      	push	{r7, lr}
 8008738:	b084      	sub	sp, #16
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
 800873e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008740:	2300      	movs	r3, #0
 8008742:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800874a:	2b01      	cmp	r3, #1
 800874c:	d101      	bne.n	8008752 <HAL_TIM_ConfigClockSource+0x1c>
 800874e:	2302      	movs	r3, #2
 8008750:	e0b6      	b.n	80088c0 <HAL_TIM_ConfigClockSource+0x18a>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2201      	movs	r2, #1
 8008756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2202      	movs	r2, #2
 800875e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008770:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008774:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800877c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	68ba      	ldr	r2, [r7, #8]
 8008784:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800878e:	d03e      	beq.n	800880e <HAL_TIM_ConfigClockSource+0xd8>
 8008790:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008794:	f200 8087 	bhi.w	80088a6 <HAL_TIM_ConfigClockSource+0x170>
 8008798:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800879c:	f000 8086 	beq.w	80088ac <HAL_TIM_ConfigClockSource+0x176>
 80087a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087a4:	d87f      	bhi.n	80088a6 <HAL_TIM_ConfigClockSource+0x170>
 80087a6:	2b70      	cmp	r3, #112	@ 0x70
 80087a8:	d01a      	beq.n	80087e0 <HAL_TIM_ConfigClockSource+0xaa>
 80087aa:	2b70      	cmp	r3, #112	@ 0x70
 80087ac:	d87b      	bhi.n	80088a6 <HAL_TIM_ConfigClockSource+0x170>
 80087ae:	2b60      	cmp	r3, #96	@ 0x60
 80087b0:	d050      	beq.n	8008854 <HAL_TIM_ConfigClockSource+0x11e>
 80087b2:	2b60      	cmp	r3, #96	@ 0x60
 80087b4:	d877      	bhi.n	80088a6 <HAL_TIM_ConfigClockSource+0x170>
 80087b6:	2b50      	cmp	r3, #80	@ 0x50
 80087b8:	d03c      	beq.n	8008834 <HAL_TIM_ConfigClockSource+0xfe>
 80087ba:	2b50      	cmp	r3, #80	@ 0x50
 80087bc:	d873      	bhi.n	80088a6 <HAL_TIM_ConfigClockSource+0x170>
 80087be:	2b40      	cmp	r3, #64	@ 0x40
 80087c0:	d058      	beq.n	8008874 <HAL_TIM_ConfigClockSource+0x13e>
 80087c2:	2b40      	cmp	r3, #64	@ 0x40
 80087c4:	d86f      	bhi.n	80088a6 <HAL_TIM_ConfigClockSource+0x170>
 80087c6:	2b30      	cmp	r3, #48	@ 0x30
 80087c8:	d064      	beq.n	8008894 <HAL_TIM_ConfigClockSource+0x15e>
 80087ca:	2b30      	cmp	r3, #48	@ 0x30
 80087cc:	d86b      	bhi.n	80088a6 <HAL_TIM_ConfigClockSource+0x170>
 80087ce:	2b20      	cmp	r3, #32
 80087d0:	d060      	beq.n	8008894 <HAL_TIM_ConfigClockSource+0x15e>
 80087d2:	2b20      	cmp	r3, #32
 80087d4:	d867      	bhi.n	80088a6 <HAL_TIM_ConfigClockSource+0x170>
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d05c      	beq.n	8008894 <HAL_TIM_ConfigClockSource+0x15e>
 80087da:	2b10      	cmp	r3, #16
 80087dc:	d05a      	beq.n	8008894 <HAL_TIM_ConfigClockSource+0x15e>
 80087de:	e062      	b.n	80088a6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80087f0:	f000 f97e 	bl	8008af0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008802:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	68ba      	ldr	r2, [r7, #8]
 800880a:	609a      	str	r2, [r3, #8]
      break;
 800880c:	e04f      	b.n	80088ae <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800881e:	f000 f967 	bl	8008af0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	689a      	ldr	r2, [r3, #8]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008830:	609a      	str	r2, [r3, #8]
      break;
 8008832:	e03c      	b.n	80088ae <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008840:	461a      	mov	r2, r3
 8008842:	f000 f8d9 	bl	80089f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2150      	movs	r1, #80	@ 0x50
 800884c:	4618      	mov	r0, r3
 800884e:	f000 f932 	bl	8008ab6 <TIM_ITRx_SetConfig>
      break;
 8008852:	e02c      	b.n	80088ae <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008860:	461a      	mov	r2, r3
 8008862:	f000 f8f8 	bl	8008a56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	2160      	movs	r1, #96	@ 0x60
 800886c:	4618      	mov	r0, r3
 800886e:	f000 f922 	bl	8008ab6 <TIM_ITRx_SetConfig>
      break;
 8008872:	e01c      	b.n	80088ae <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008880:	461a      	mov	r2, r3
 8008882:	f000 f8b9 	bl	80089f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2140      	movs	r1, #64	@ 0x40
 800888c:	4618      	mov	r0, r3
 800888e:	f000 f912 	bl	8008ab6 <TIM_ITRx_SetConfig>
      break;
 8008892:	e00c      	b.n	80088ae <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4619      	mov	r1, r3
 800889e:	4610      	mov	r0, r2
 80088a0:	f000 f909 	bl	8008ab6 <TIM_ITRx_SetConfig>
      break;
 80088a4:	e003      	b.n	80088ae <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	73fb      	strb	r3, [r7, #15]
      break;
 80088aa:	e000      	b.n	80088ae <HAL_TIM_ConfigClockSource+0x178>
      break;
 80088ac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2201      	movs	r2, #1
 80088b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80088be:	7bfb      	ldrb	r3, [r7, #15]
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3710      	adds	r7, #16
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80088d0:	bf00      	nop
 80088d2:	370c      	adds	r7, #12
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80088dc:	b480      	push	{r7}
 80088de:	b083      	sub	sp, #12
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80088e4:	bf00      	nop
 80088e6:	370c      	adds	r7, #12
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b083      	sub	sp, #12
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80088f8:	bf00      	nop
 80088fa:	370c      	adds	r7, #12
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr

08008904 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008904:	b480      	push	{r7}
 8008906:	b083      	sub	sp, #12
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800890c:	bf00      	nop
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008918:	b480      	push	{r7}
 800891a:	b085      	sub	sp, #20
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4a30      	ldr	r2, [pc, #192]	@ (80089ec <TIM_Base_SetConfig+0xd4>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d003      	beq.n	8008938 <TIM_Base_SetConfig+0x20>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008936:	d108      	bne.n	800894a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800893e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	4313      	orrs	r3, r2
 8008948:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4a27      	ldr	r2, [pc, #156]	@ (80089ec <TIM_Base_SetConfig+0xd4>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d00b      	beq.n	800896a <TIM_Base_SetConfig+0x52>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008958:	d007      	beq.n	800896a <TIM_Base_SetConfig+0x52>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	4a24      	ldr	r2, [pc, #144]	@ (80089f0 <TIM_Base_SetConfig+0xd8>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d003      	beq.n	800896a <TIM_Base_SetConfig+0x52>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	4a23      	ldr	r2, [pc, #140]	@ (80089f4 <TIM_Base_SetConfig+0xdc>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d108      	bne.n	800897c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	68fa      	ldr	r2, [r7, #12]
 8008978:	4313      	orrs	r3, r2
 800897a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	695b      	ldr	r3, [r3, #20]
 8008986:	4313      	orrs	r3, r2
 8008988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	68fa      	ldr	r2, [r7, #12]
 800898e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	689a      	ldr	r2, [r3, #8]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	4a12      	ldr	r2, [pc, #72]	@ (80089ec <TIM_Base_SetConfig+0xd4>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d007      	beq.n	80089b8 <TIM_Base_SetConfig+0xa0>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	4a11      	ldr	r2, [pc, #68]	@ (80089f0 <TIM_Base_SetConfig+0xd8>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d003      	beq.n	80089b8 <TIM_Base_SetConfig+0xa0>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4a10      	ldr	r2, [pc, #64]	@ (80089f4 <TIM_Base_SetConfig+0xdc>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d103      	bne.n	80089c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	691a      	ldr	r2, [r3, #16]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2201      	movs	r2, #1
 80089c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	691b      	ldr	r3, [r3, #16]
 80089ca:	f003 0301 	and.w	r3, r3, #1
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d105      	bne.n	80089de <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	f023 0201 	bic.w	r2, r3, #1
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	611a      	str	r2, [r3, #16]
  }
}
 80089de:	bf00      	nop
 80089e0:	3714      	adds	r7, #20
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop
 80089ec:	40012c00 	.word	0x40012c00
 80089f0:	40014400 	.word	0x40014400
 80089f4:	40014800 	.word	0x40014800

080089f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b087      	sub	sp, #28
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	60b9      	str	r1, [r7, #8]
 8008a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6a1b      	ldr	r3, [r3, #32]
 8008a08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	6a1b      	ldr	r3, [r3, #32]
 8008a0e:	f023 0201 	bic.w	r2, r3, #1
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	699b      	ldr	r3, [r3, #24]
 8008a1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008a22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	011b      	lsls	r3, r3, #4
 8008a28:	693a      	ldr	r2, [r7, #16]
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	f023 030a 	bic.w	r3, r3, #10
 8008a34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008a36:	697a      	ldr	r2, [r7, #20]
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	693a      	ldr	r2, [r7, #16]
 8008a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	697a      	ldr	r2, [r7, #20]
 8008a48:	621a      	str	r2, [r3, #32]
}
 8008a4a:	bf00      	nop
 8008a4c:	371c      	adds	r7, #28
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr

08008a56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a56:	b480      	push	{r7}
 8008a58:	b087      	sub	sp, #28
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	60f8      	str	r0, [r7, #12]
 8008a5e:	60b9      	str	r1, [r7, #8]
 8008a60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	6a1b      	ldr	r3, [r3, #32]
 8008a66:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6a1b      	ldr	r3, [r3, #32]
 8008a6c:	f023 0210 	bic.w	r2, r3, #16
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	699b      	ldr	r3, [r3, #24]
 8008a78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008a80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	031b      	lsls	r3, r3, #12
 8008a86:	693a      	ldr	r2, [r7, #16]
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008a92:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	011b      	lsls	r3, r3, #4
 8008a98:	697a      	ldr	r2, [r7, #20]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	693a      	ldr	r2, [r7, #16]
 8008aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	697a      	ldr	r2, [r7, #20]
 8008aa8:	621a      	str	r2, [r3, #32]
}
 8008aaa:	bf00      	nop
 8008aac:	371c      	adds	r7, #28
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr

08008ab6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008ab6:	b480      	push	{r7}
 8008ab8:	b085      	sub	sp, #20
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
 8008abe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008acc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ad0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008ad2:	683a      	ldr	r2, [r7, #0]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	f043 0307 	orr.w	r3, r3, #7
 8008adc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	68fa      	ldr	r2, [r7, #12]
 8008ae2:	609a      	str	r2, [r3, #8]
}
 8008ae4:	bf00      	nop
 8008ae6:	3714      	adds	r7, #20
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b087      	sub	sp, #28
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	60b9      	str	r1, [r7, #8]
 8008afa:	607a      	str	r2, [r7, #4]
 8008afc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008b0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	021a      	lsls	r2, r3, #8
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	431a      	orrs	r2, r3
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	697a      	ldr	r2, [r7, #20]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	697a      	ldr	r2, [r7, #20]
 8008b22:	609a      	str	r2, [r3, #8]
}
 8008b24:	bf00      	nop
 8008b26:	371c      	adds	r7, #28
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d101      	bne.n	8008b48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b44:	2302      	movs	r3, #2
 8008b46:	e04a      	b.n	8008bde <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2202      	movs	r2, #2
 8008b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a1f      	ldr	r2, [pc, #124]	@ (8008bec <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d108      	bne.n	8008b84 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008b78:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	68fa      	ldr	r2, [r7, #12]
 8008b80:	4313      	orrs	r3, r2
 8008b82:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68fa      	ldr	r2, [r7, #12]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a12      	ldr	r2, [pc, #72]	@ (8008bec <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d004      	beq.n	8008bb2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bb0:	d10c      	bne.n	8008bcc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008bb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	68ba      	ldr	r2, [r7, #8]
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	68ba      	ldr	r2, [r7, #8]
 8008bca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3714      	adds	r7, #20
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr
 8008bea:	bf00      	nop
 8008bec:	40012c00 	.word	0x40012c00

08008bf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008bf8:	bf00      	nop
 8008bfa:	370c      	adds	r7, #12
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr

08008c04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c0c:	bf00      	nop
 8008c0e:	370c      	adds	r7, #12
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008c20:	bf00      	nop
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <LL_RCC_GetUSARTClockSource>:
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8008c34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c38:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	4013      	ands	r3, r2
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	370c      	adds	r7, #12
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <LL_RCC_GetLPUARTClockSource>:
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008c54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c58:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4013      	ands	r3, r2
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d101      	bne.n	8008c7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e042      	b.n	8008d04 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d106      	bne.n	8008c96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 f83b 	bl	8008d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2224      	movs	r2, #36	@ 0x24
 8008c9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f022 0201 	bic.w	r2, r2, #1
 8008cac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d002      	beq.n	8008cbc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 fae8 	bl	800928c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 f8bd 	bl	8008e3c <UART_SetConfig>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d101      	bne.n	8008ccc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	e01b      	b.n	8008d04 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	685a      	ldr	r2, [r3, #4]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008cda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	689a      	ldr	r2, [r3, #8]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008cea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f042 0201 	orr.w	r2, r2, #1
 8008cfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 fb67 	bl	80093d0 <UART_CheckIdleState>
 8008d02:	4603      	mov	r3, r0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3708      	adds	r7, #8
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8008d14:	bf00      	nop
 8008d16:	370c      	adds	r7, #12
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b08a      	sub	sp, #40	@ 0x28
 8008d24:	af02      	add	r7, sp, #8
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	60b9      	str	r1, [r7, #8]
 8008d2a:	603b      	str	r3, [r7, #0]
 8008d2c:	4613      	mov	r3, r2
 8008d2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d36:	2b20      	cmp	r3, #32
 8008d38:	d17b      	bne.n	8008e32 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d002      	beq.n	8008d46 <HAL_UART_Transmit+0x26>
 8008d40:	88fb      	ldrh	r3, [r7, #6]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d101      	bne.n	8008d4a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008d46:	2301      	movs	r3, #1
 8008d48:	e074      	b.n	8008e34 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2221      	movs	r2, #33	@ 0x21
 8008d56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008d5a:	f7f9 f871 	bl	8001e40 <HAL_GetTick>
 8008d5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	88fa      	ldrh	r2, [r7, #6]
 8008d64:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	88fa      	ldrh	r2, [r7, #6]
 8008d6c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	689b      	ldr	r3, [r3, #8]
 8008d74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d78:	d108      	bne.n	8008d8c <HAL_UART_Transmit+0x6c>
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	691b      	ldr	r3, [r3, #16]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d104      	bne.n	8008d8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008d82:	2300      	movs	r3, #0
 8008d84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	61bb      	str	r3, [r7, #24]
 8008d8a:	e003      	b.n	8008d94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d90:	2300      	movs	r3, #0
 8008d92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008d94:	e030      	b.n	8008df8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	9300      	str	r3, [sp, #0]
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	2180      	movs	r1, #128	@ 0x80
 8008da0:	68f8      	ldr	r0, [r7, #12]
 8008da2:	f000 fbbf 	bl	8009524 <UART_WaitOnFlagUntilTimeout>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d005      	beq.n	8008db8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2220      	movs	r2, #32
 8008db0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008db4:	2303      	movs	r3, #3
 8008db6:	e03d      	b.n	8008e34 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d10b      	bne.n	8008dd6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	881b      	ldrh	r3, [r3, #0]
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008dcc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008dce:	69bb      	ldr	r3, [r7, #24]
 8008dd0:	3302      	adds	r3, #2
 8008dd2:	61bb      	str	r3, [r7, #24]
 8008dd4:	e007      	b.n	8008de6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008dd6:	69fb      	ldr	r3, [r7, #28]
 8008dd8:	781a      	ldrb	r2, [r3, #0]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	3301      	adds	r3, #1
 8008de4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	3b01      	subs	r3, #1
 8008df0:	b29a      	uxth	r2, r3
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d1c8      	bne.n	8008d96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	9300      	str	r3, [sp, #0]
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	2140      	movs	r1, #64	@ 0x40
 8008e0e:	68f8      	ldr	r0, [r7, #12]
 8008e10:	f000 fb88 	bl	8009524 <UART_WaitOnFlagUntilTimeout>
 8008e14:	4603      	mov	r3, r0
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d005      	beq.n	8008e26 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2220      	movs	r2, #32
 8008e1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008e22:	2303      	movs	r3, #3
 8008e24:	e006      	b.n	8008e34 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2220      	movs	r2, #32
 8008e2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	e000      	b.n	8008e34 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008e32:	2302      	movs	r3, #2
  }
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3720      	adds	r7, #32
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e40:	b08c      	sub	sp, #48	@ 0x30
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008e46:	2300      	movs	r3, #0
 8008e48:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	689a      	ldr	r2, [r3, #8]
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	691b      	ldr	r3, [r3, #16]
 8008e54:	431a      	orrs	r2, r3
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	695b      	ldr	r3, [r3, #20]
 8008e5a:	431a      	orrs	r2, r3
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	69db      	ldr	r3, [r3, #28]
 8008e60:	4313      	orrs	r3, r2
 8008e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	4baf      	ldr	r3, [pc, #700]	@ (8009128 <UART_SetConfig+0x2ec>)
 8008e6c:	4013      	ands	r3, r2
 8008e6e:	697a      	ldr	r2, [r7, #20]
 8008e70:	6812      	ldr	r2, [r2, #0]
 8008e72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e74:	430b      	orrs	r3, r1
 8008e76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	68da      	ldr	r2, [r3, #12]
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	430a      	orrs	r2, r1
 8008e8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	699b      	ldr	r3, [r3, #24]
 8008e92:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4aa4      	ldr	r2, [pc, #656]	@ (800912c <UART_SetConfig+0x2f0>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d004      	beq.n	8008ea8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	6a1b      	ldr	r3, [r3, #32]
 8008ea2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008eb2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008eb6:	697a      	ldr	r2, [r7, #20]
 8008eb8:	6812      	ldr	r2, [r2, #0]
 8008eba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ebc:	430b      	orrs	r3, r1
 8008ebe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ec6:	f023 010f 	bic.w	r1, r3, #15
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	430a      	orrs	r2, r1
 8008ed4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a95      	ldr	r2, [pc, #596]	@ (8009130 <UART_SetConfig+0x2f4>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d125      	bne.n	8008f2c <UART_SetConfig+0xf0>
 8008ee0:	2003      	movs	r0, #3
 8008ee2:	f7ff fea3 	bl	8008c2c <LL_RCC_GetUSARTClockSource>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b03      	cmp	r3, #3
 8008eea:	d81b      	bhi.n	8008f24 <UART_SetConfig+0xe8>
 8008eec:	a201      	add	r2, pc, #4	@ (adr r2, 8008ef4 <UART_SetConfig+0xb8>)
 8008eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef2:	bf00      	nop
 8008ef4:	08008f05 	.word	0x08008f05
 8008ef8:	08008f15 	.word	0x08008f15
 8008efc:	08008f0d 	.word	0x08008f0d
 8008f00:	08008f1d 	.word	0x08008f1d
 8008f04:	2301      	movs	r3, #1
 8008f06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f0a:	e042      	b.n	8008f92 <UART_SetConfig+0x156>
 8008f0c:	2302      	movs	r3, #2
 8008f0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f12:	e03e      	b.n	8008f92 <UART_SetConfig+0x156>
 8008f14:	2304      	movs	r3, #4
 8008f16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f1a:	e03a      	b.n	8008f92 <UART_SetConfig+0x156>
 8008f1c:	2308      	movs	r3, #8
 8008f1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f22:	e036      	b.n	8008f92 <UART_SetConfig+0x156>
 8008f24:	2310      	movs	r3, #16
 8008f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f2a:	e032      	b.n	8008f92 <UART_SetConfig+0x156>
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a7e      	ldr	r2, [pc, #504]	@ (800912c <UART_SetConfig+0x2f0>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d12a      	bne.n	8008f8c <UART_SetConfig+0x150>
 8008f36:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8008f3a:	f7ff fe87 	bl	8008c4c <LL_RCC_GetLPUARTClockSource>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008f44:	d01a      	beq.n	8008f7c <UART_SetConfig+0x140>
 8008f46:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008f4a:	d81b      	bhi.n	8008f84 <UART_SetConfig+0x148>
 8008f4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f50:	d00c      	beq.n	8008f6c <UART_SetConfig+0x130>
 8008f52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f56:	d815      	bhi.n	8008f84 <UART_SetConfig+0x148>
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d003      	beq.n	8008f64 <UART_SetConfig+0x128>
 8008f5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f60:	d008      	beq.n	8008f74 <UART_SetConfig+0x138>
 8008f62:	e00f      	b.n	8008f84 <UART_SetConfig+0x148>
 8008f64:	2300      	movs	r3, #0
 8008f66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f6a:	e012      	b.n	8008f92 <UART_SetConfig+0x156>
 8008f6c:	2302      	movs	r3, #2
 8008f6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f72:	e00e      	b.n	8008f92 <UART_SetConfig+0x156>
 8008f74:	2304      	movs	r3, #4
 8008f76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f7a:	e00a      	b.n	8008f92 <UART_SetConfig+0x156>
 8008f7c:	2308      	movs	r3, #8
 8008f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f82:	e006      	b.n	8008f92 <UART_SetConfig+0x156>
 8008f84:	2310      	movs	r3, #16
 8008f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f8a:	e002      	b.n	8008f92 <UART_SetConfig+0x156>
 8008f8c:	2310      	movs	r3, #16
 8008f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a65      	ldr	r2, [pc, #404]	@ (800912c <UART_SetConfig+0x2f0>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	f040 8097 	bne.w	80090cc <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008f9e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008fa2:	2b08      	cmp	r3, #8
 8008fa4:	d823      	bhi.n	8008fee <UART_SetConfig+0x1b2>
 8008fa6:	a201      	add	r2, pc, #4	@ (adr r2, 8008fac <UART_SetConfig+0x170>)
 8008fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fac:	08008fd1 	.word	0x08008fd1
 8008fb0:	08008fef 	.word	0x08008fef
 8008fb4:	08008fd9 	.word	0x08008fd9
 8008fb8:	08008fef 	.word	0x08008fef
 8008fbc:	08008fdf 	.word	0x08008fdf
 8008fc0:	08008fef 	.word	0x08008fef
 8008fc4:	08008fef 	.word	0x08008fef
 8008fc8:	08008fef 	.word	0x08008fef
 8008fcc:	08008fe7 	.word	0x08008fe7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fd0:	f7fe fd00 	bl	80079d4 <HAL_RCC_GetPCLK1Freq>
 8008fd4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008fd6:	e010      	b.n	8008ffa <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008fd8:	4b56      	ldr	r3, [pc, #344]	@ (8009134 <UART_SetConfig+0x2f8>)
 8008fda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008fdc:	e00d      	b.n	8008ffa <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008fde:	f7fe fc79 	bl	80078d4 <HAL_RCC_GetSysClockFreq>
 8008fe2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008fe4:	e009      	b.n	8008ffa <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008fe6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008fea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008fec:	e005      	b.n	8008ffa <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008ff8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	f000 812b 	beq.w	8009258 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009006:	4a4c      	ldr	r2, [pc, #304]	@ (8009138 <UART_SetConfig+0x2fc>)
 8009008:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800900c:	461a      	mov	r2, r3
 800900e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009010:	fbb3 f3f2 	udiv	r3, r3, r2
 8009014:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	685a      	ldr	r2, [r3, #4]
 800901a:	4613      	mov	r3, r2
 800901c:	005b      	lsls	r3, r3, #1
 800901e:	4413      	add	r3, r2
 8009020:	69ba      	ldr	r2, [r7, #24]
 8009022:	429a      	cmp	r2, r3
 8009024:	d305      	bcc.n	8009032 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800902c:	69ba      	ldr	r2, [r7, #24]
 800902e:	429a      	cmp	r2, r3
 8009030:	d903      	bls.n	800903a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009038:	e10e      	b.n	8009258 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800903a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800903c:	2200      	movs	r2, #0
 800903e:	60bb      	str	r3, [r7, #8]
 8009040:	60fa      	str	r2, [r7, #12]
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009046:	4a3c      	ldr	r2, [pc, #240]	@ (8009138 <UART_SetConfig+0x2fc>)
 8009048:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800904c:	b29b      	uxth	r3, r3
 800904e:	2200      	movs	r2, #0
 8009050:	603b      	str	r3, [r7, #0]
 8009052:	607a      	str	r2, [r7, #4]
 8009054:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009058:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800905c:	f7f7 fd7c 	bl	8000b58 <__aeabi_uldivmod>
 8009060:	4602      	mov	r2, r0
 8009062:	460b      	mov	r3, r1
 8009064:	4610      	mov	r0, r2
 8009066:	4619      	mov	r1, r3
 8009068:	f04f 0200 	mov.w	r2, #0
 800906c:	f04f 0300 	mov.w	r3, #0
 8009070:	020b      	lsls	r3, r1, #8
 8009072:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009076:	0202      	lsls	r2, r0, #8
 8009078:	6979      	ldr	r1, [r7, #20]
 800907a:	6849      	ldr	r1, [r1, #4]
 800907c:	0849      	lsrs	r1, r1, #1
 800907e:	2000      	movs	r0, #0
 8009080:	460c      	mov	r4, r1
 8009082:	4605      	mov	r5, r0
 8009084:	eb12 0804 	adds.w	r8, r2, r4
 8009088:	eb43 0905 	adc.w	r9, r3, r5
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	469a      	mov	sl, r3
 8009094:	4693      	mov	fp, r2
 8009096:	4652      	mov	r2, sl
 8009098:	465b      	mov	r3, fp
 800909a:	4640      	mov	r0, r8
 800909c:	4649      	mov	r1, r9
 800909e:	f7f7 fd5b 	bl	8000b58 <__aeabi_uldivmod>
 80090a2:	4602      	mov	r2, r0
 80090a4:	460b      	mov	r3, r1
 80090a6:	4613      	mov	r3, r2
 80090a8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80090aa:	6a3b      	ldr	r3, [r7, #32]
 80090ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80090b0:	d308      	bcc.n	80090c4 <UART_SetConfig+0x288>
 80090b2:	6a3b      	ldr	r3, [r7, #32]
 80090b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80090b8:	d204      	bcs.n	80090c4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	6a3a      	ldr	r2, [r7, #32]
 80090c0:	60da      	str	r2, [r3, #12]
 80090c2:	e0c9      	b.n	8009258 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80090ca:	e0c5      	b.n	8009258 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	69db      	ldr	r3, [r3, #28]
 80090d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090d4:	d16d      	bne.n	80091b2 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80090d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80090da:	3b01      	subs	r3, #1
 80090dc:	2b07      	cmp	r3, #7
 80090de:	d82d      	bhi.n	800913c <UART_SetConfig+0x300>
 80090e0:	a201      	add	r2, pc, #4	@ (adr r2, 80090e8 <UART_SetConfig+0x2ac>)
 80090e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e6:	bf00      	nop
 80090e8:	08009109 	.word	0x08009109
 80090ec:	08009111 	.word	0x08009111
 80090f0:	0800913d 	.word	0x0800913d
 80090f4:	08009117 	.word	0x08009117
 80090f8:	0800913d 	.word	0x0800913d
 80090fc:	0800913d 	.word	0x0800913d
 8009100:	0800913d 	.word	0x0800913d
 8009104:	0800911f 	.word	0x0800911f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009108:	f7fe fc7a 	bl	8007a00 <HAL_RCC_GetPCLK2Freq>
 800910c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800910e:	e01b      	b.n	8009148 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009110:	4b08      	ldr	r3, [pc, #32]	@ (8009134 <UART_SetConfig+0x2f8>)
 8009112:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009114:	e018      	b.n	8009148 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009116:	f7fe fbdd 	bl	80078d4 <HAL_RCC_GetSysClockFreq>
 800911a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800911c:	e014      	b.n	8009148 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800911e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009122:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009124:	e010      	b.n	8009148 <UART_SetConfig+0x30c>
 8009126:	bf00      	nop
 8009128:	cfff69f3 	.word	0xcfff69f3
 800912c:	40008000 	.word	0x40008000
 8009130:	40013800 	.word	0x40013800
 8009134:	00f42400 	.word	0x00f42400
 8009138:	08011268 	.word	0x08011268
      default:
        pclk = 0U;
 800913c:	2300      	movs	r3, #0
 800913e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009140:	2301      	movs	r3, #1
 8009142:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009146:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800914a:	2b00      	cmp	r3, #0
 800914c:	f000 8084 	beq.w	8009258 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009154:	4a4b      	ldr	r2, [pc, #300]	@ (8009284 <UART_SetConfig+0x448>)
 8009156:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800915a:	461a      	mov	r2, r3
 800915c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800915e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009162:	005a      	lsls	r2, r3, #1
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	085b      	lsrs	r3, r3, #1
 800916a:	441a      	add	r2, r3
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	fbb2 f3f3 	udiv	r3, r2, r3
 8009174:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009176:	6a3b      	ldr	r3, [r7, #32]
 8009178:	2b0f      	cmp	r3, #15
 800917a:	d916      	bls.n	80091aa <UART_SetConfig+0x36e>
 800917c:	6a3b      	ldr	r3, [r7, #32]
 800917e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009182:	d212      	bcs.n	80091aa <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009184:	6a3b      	ldr	r3, [r7, #32]
 8009186:	b29b      	uxth	r3, r3
 8009188:	f023 030f 	bic.w	r3, r3, #15
 800918c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800918e:	6a3b      	ldr	r3, [r7, #32]
 8009190:	085b      	lsrs	r3, r3, #1
 8009192:	b29b      	uxth	r3, r3
 8009194:	f003 0307 	and.w	r3, r3, #7
 8009198:	b29a      	uxth	r2, r3
 800919a:	8bfb      	ldrh	r3, [r7, #30]
 800919c:	4313      	orrs	r3, r2
 800919e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	8bfa      	ldrh	r2, [r7, #30]
 80091a6:	60da      	str	r2, [r3, #12]
 80091a8:	e056      	b.n	8009258 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80091b0:	e052      	b.n	8009258 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80091b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80091b6:	3b01      	subs	r3, #1
 80091b8:	2b07      	cmp	r3, #7
 80091ba:	d822      	bhi.n	8009202 <UART_SetConfig+0x3c6>
 80091bc:	a201      	add	r2, pc, #4	@ (adr r2, 80091c4 <UART_SetConfig+0x388>)
 80091be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c2:	bf00      	nop
 80091c4:	080091e5 	.word	0x080091e5
 80091c8:	080091ed 	.word	0x080091ed
 80091cc:	08009203 	.word	0x08009203
 80091d0:	080091f3 	.word	0x080091f3
 80091d4:	08009203 	.word	0x08009203
 80091d8:	08009203 	.word	0x08009203
 80091dc:	08009203 	.word	0x08009203
 80091e0:	080091fb 	.word	0x080091fb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091e4:	f7fe fc0c 	bl	8007a00 <HAL_RCC_GetPCLK2Freq>
 80091e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80091ea:	e010      	b.n	800920e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80091ec:	4b26      	ldr	r3, [pc, #152]	@ (8009288 <UART_SetConfig+0x44c>)
 80091ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80091f0:	e00d      	b.n	800920e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80091f2:	f7fe fb6f 	bl	80078d4 <HAL_RCC_GetSysClockFreq>
 80091f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80091f8:	e009      	b.n	800920e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009200:	e005      	b.n	800920e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8009202:	2300      	movs	r3, #0
 8009204:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009206:	2301      	movs	r3, #1
 8009208:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800920c:	bf00      	nop
    }

    if (pclk != 0U)
 800920e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009210:	2b00      	cmp	r3, #0
 8009212:	d021      	beq.n	8009258 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009218:	4a1a      	ldr	r2, [pc, #104]	@ (8009284 <UART_SetConfig+0x448>)
 800921a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800921e:	461a      	mov	r2, r3
 8009220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009222:	fbb3 f2f2 	udiv	r2, r3, r2
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	085b      	lsrs	r3, r3, #1
 800922c:	441a      	add	r2, r3
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	fbb2 f3f3 	udiv	r3, r2, r3
 8009236:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009238:	6a3b      	ldr	r3, [r7, #32]
 800923a:	2b0f      	cmp	r3, #15
 800923c:	d909      	bls.n	8009252 <UART_SetConfig+0x416>
 800923e:	6a3b      	ldr	r3, [r7, #32]
 8009240:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009244:	d205      	bcs.n	8009252 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009246:	6a3b      	ldr	r3, [r7, #32]
 8009248:	b29a      	uxth	r2, r3
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	60da      	str	r2, [r3, #12]
 8009250:	e002      	b.n	8009258 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8009252:	2301      	movs	r3, #1
 8009254:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	2201      	movs	r2, #1
 800925c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	2201      	movs	r2, #1
 8009264:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	2200      	movs	r2, #0
 800926c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	2200      	movs	r2, #0
 8009272:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009274:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009278:	4618      	mov	r0, r3
 800927a:	3730      	adds	r7, #48	@ 0x30
 800927c:	46bd      	mov	sp, r7
 800927e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009282:	bf00      	nop
 8009284:	08011268 	.word	0x08011268
 8009288:	00f42400 	.word	0x00f42400

0800928c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009298:	f003 0308 	and.w	r3, r3, #8
 800929c:	2b00      	cmp	r3, #0
 800929e:	d00a      	beq.n	80092b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	430a      	orrs	r2, r1
 80092b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092ba:	f003 0301 	and.w	r3, r3, #1
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d00a      	beq.n	80092d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	430a      	orrs	r2, r1
 80092d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092dc:	f003 0302 	and.w	r3, r3, #2
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d00a      	beq.n	80092fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	430a      	orrs	r2, r1
 80092f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092fe:	f003 0304 	and.w	r3, r3, #4
 8009302:	2b00      	cmp	r3, #0
 8009304:	d00a      	beq.n	800931c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	685b      	ldr	r3, [r3, #4]
 800930c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	430a      	orrs	r2, r1
 800931a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009320:	f003 0310 	and.w	r3, r3, #16
 8009324:	2b00      	cmp	r3, #0
 8009326:	d00a      	beq.n	800933e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	430a      	orrs	r2, r1
 800933c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009342:	f003 0320 	and.w	r3, r3, #32
 8009346:	2b00      	cmp	r3, #0
 8009348:	d00a      	beq.n	8009360 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	430a      	orrs	r2, r1
 800935e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009368:	2b00      	cmp	r3, #0
 800936a:	d01a      	beq.n	80093a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	430a      	orrs	r2, r1
 8009380:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009386:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800938a:	d10a      	bne.n	80093a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	430a      	orrs	r2, r1
 80093a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d00a      	beq.n	80093c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	430a      	orrs	r2, r1
 80093c2:	605a      	str	r2, [r3, #4]
  }
}
 80093c4:	bf00      	nop
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b098      	sub	sp, #96	@ 0x60
 80093d4:	af02      	add	r7, sp, #8
 80093d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80093e0:	f7f8 fd2e 	bl	8001e40 <HAL_GetTick>
 80093e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f003 0308 	and.w	r3, r3, #8
 80093f0:	2b08      	cmp	r3, #8
 80093f2:	d12f      	bne.n	8009454 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80093f8:	9300      	str	r3, [sp, #0]
 80093fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80093fc:	2200      	movs	r2, #0
 80093fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 f88e 	bl	8009524 <UART_WaitOnFlagUntilTimeout>
 8009408:	4603      	mov	r3, r0
 800940a:	2b00      	cmp	r3, #0
 800940c:	d022      	beq.n	8009454 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009416:	e853 3f00 	ldrex	r3, [r3]
 800941a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800941c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800941e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009422:	653b      	str	r3, [r7, #80]	@ 0x50
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	461a      	mov	r2, r3
 800942a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800942c:	647b      	str	r3, [r7, #68]	@ 0x44
 800942e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009430:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009432:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009434:	e841 2300 	strex	r3, r2, [r1]
 8009438:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800943a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800943c:	2b00      	cmp	r3, #0
 800943e:	d1e6      	bne.n	800940e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2220      	movs	r2, #32
 8009444:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009450:	2303      	movs	r3, #3
 8009452:	e063      	b.n	800951c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f003 0304 	and.w	r3, r3, #4
 800945e:	2b04      	cmp	r3, #4
 8009460:	d149      	bne.n	80094f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009462:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009466:	9300      	str	r3, [sp, #0]
 8009468:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800946a:	2200      	movs	r2, #0
 800946c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 f857 	bl	8009524 <UART_WaitOnFlagUntilTimeout>
 8009476:	4603      	mov	r3, r0
 8009478:	2b00      	cmp	r3, #0
 800947a:	d03c      	beq.n	80094f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009484:	e853 3f00 	ldrex	r3, [r3]
 8009488:	623b      	str	r3, [r7, #32]
   return(result);
 800948a:	6a3b      	ldr	r3, [r7, #32]
 800948c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009490:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	461a      	mov	r2, r3
 8009498:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800949a:	633b      	str	r3, [r7, #48]	@ 0x30
 800949c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800949e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80094a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094a2:	e841 2300 	strex	r3, r2, [r1]
 80094a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80094a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d1e6      	bne.n	800947c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	3308      	adds	r3, #8
 80094b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	e853 3f00 	ldrex	r3, [r3]
 80094bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f023 0301 	bic.w	r3, r3, #1
 80094c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	3308      	adds	r3, #8
 80094cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80094ce:	61fa      	str	r2, [r7, #28]
 80094d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d2:	69b9      	ldr	r1, [r7, #24]
 80094d4:	69fa      	ldr	r2, [r7, #28]
 80094d6:	e841 2300 	strex	r3, r2, [r1]
 80094da:	617b      	str	r3, [r7, #20]
   return(result);
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d1e5      	bne.n	80094ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2220      	movs	r2, #32
 80094e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094f2:	2303      	movs	r3, #3
 80094f4:	e012      	b.n	800951c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2220      	movs	r2, #32
 80094fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2220      	movs	r2, #32
 8009502:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2200      	movs	r2, #0
 800950a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800951a:	2300      	movs	r3, #0
}
 800951c:	4618      	mov	r0, r3
 800951e:	3758      	adds	r7, #88	@ 0x58
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	60f8      	str	r0, [r7, #12]
 800952c:	60b9      	str	r1, [r7, #8]
 800952e:	603b      	str	r3, [r7, #0]
 8009530:	4613      	mov	r3, r2
 8009532:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009534:	e04f      	b.n	80095d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009536:	69bb      	ldr	r3, [r7, #24]
 8009538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800953c:	d04b      	beq.n	80095d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800953e:	f7f8 fc7f 	bl	8001e40 <HAL_GetTick>
 8009542:	4602      	mov	r2, r0
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	1ad3      	subs	r3, r2, r3
 8009548:	69ba      	ldr	r2, [r7, #24]
 800954a:	429a      	cmp	r2, r3
 800954c:	d302      	bcc.n	8009554 <UART_WaitOnFlagUntilTimeout+0x30>
 800954e:	69bb      	ldr	r3, [r7, #24]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d101      	bne.n	8009558 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009554:	2303      	movs	r3, #3
 8009556:	e04e      	b.n	80095f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f003 0304 	and.w	r3, r3, #4
 8009562:	2b00      	cmp	r3, #0
 8009564:	d037      	beq.n	80095d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	2b80      	cmp	r3, #128	@ 0x80
 800956a:	d034      	beq.n	80095d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	2b40      	cmp	r3, #64	@ 0x40
 8009570:	d031      	beq.n	80095d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	69db      	ldr	r3, [r3, #28]
 8009578:	f003 0308 	and.w	r3, r3, #8
 800957c:	2b08      	cmp	r3, #8
 800957e:	d110      	bne.n	80095a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	2208      	movs	r2, #8
 8009586:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009588:	68f8      	ldr	r0, [r7, #12]
 800958a:	f000 f838 	bl	80095fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2208      	movs	r2, #8
 8009592:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2200      	movs	r2, #0
 800959a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800959e:	2301      	movs	r3, #1
 80095a0:	e029      	b.n	80095f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	69db      	ldr	r3, [r3, #28]
 80095a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80095ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80095b0:	d111      	bne.n	80095d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80095ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80095bc:	68f8      	ldr	r0, [r7, #12]
 80095be:	f000 f81e 	bl	80095fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2220      	movs	r2, #32
 80095c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2200      	movs	r2, #0
 80095ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80095d2:	2303      	movs	r3, #3
 80095d4:	e00f      	b.n	80095f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	69da      	ldr	r2, [r3, #28]
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	4013      	ands	r3, r2
 80095e0:	68ba      	ldr	r2, [r7, #8]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	bf0c      	ite	eq
 80095e6:	2301      	moveq	r3, #1
 80095e8:	2300      	movne	r3, #0
 80095ea:	b2db      	uxtb	r3, r3
 80095ec:	461a      	mov	r2, r3
 80095ee:	79fb      	ldrb	r3, [r7, #7]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d0a0      	beq.n	8009536 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095f4:	2300      	movs	r3, #0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3710      	adds	r7, #16
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}

080095fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80095fe:	b480      	push	{r7}
 8009600:	b095      	sub	sp, #84	@ 0x54
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800960c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800960e:	e853 3f00 	ldrex	r3, [r3]
 8009612:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009616:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800961a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	461a      	mov	r2, r3
 8009622:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009624:	643b      	str	r3, [r7, #64]	@ 0x40
 8009626:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009628:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800962a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800962c:	e841 2300 	strex	r3, r2, [r1]
 8009630:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009634:	2b00      	cmp	r3, #0
 8009636:	d1e6      	bne.n	8009606 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	3308      	adds	r3, #8
 800963e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009640:	6a3b      	ldr	r3, [r7, #32]
 8009642:	e853 3f00 	ldrex	r3, [r3]
 8009646:	61fb      	str	r3, [r7, #28]
   return(result);
 8009648:	69fb      	ldr	r3, [r7, #28]
 800964a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800964e:	f023 0301 	bic.w	r3, r3, #1
 8009652:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	3308      	adds	r3, #8
 800965a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800965c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800965e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009660:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009662:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009664:	e841 2300 	strex	r3, r2, [r1]
 8009668:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800966a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800966c:	2b00      	cmp	r3, #0
 800966e:	d1e3      	bne.n	8009638 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009674:	2b01      	cmp	r3, #1
 8009676:	d118      	bne.n	80096aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	e853 3f00 	ldrex	r3, [r3]
 8009684:	60bb      	str	r3, [r7, #8]
   return(result);
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	f023 0310 	bic.w	r3, r3, #16
 800968c:	647b      	str	r3, [r7, #68]	@ 0x44
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	461a      	mov	r2, r3
 8009694:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009696:	61bb      	str	r3, [r7, #24]
 8009698:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969a:	6979      	ldr	r1, [r7, #20]
 800969c:	69ba      	ldr	r2, [r7, #24]
 800969e:	e841 2300 	strex	r3, r2, [r1]
 80096a2:	613b      	str	r3, [r7, #16]
   return(result);
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d1e6      	bne.n	8009678 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2220      	movs	r2, #32
 80096ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2200      	movs	r2, #0
 80096b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2200      	movs	r2, #0
 80096bc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80096be:	bf00      	nop
 80096c0:	3754      	adds	r7, #84	@ 0x54
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr

080096ca <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80096ca:	b480      	push	{r7}
 80096cc:	b085      	sub	sp, #20
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2200      	movs	r2, #0
 80096d6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80096da:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80096de:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	b29a      	uxth	r2, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80096ea:	2300      	movs	r3, #0
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3714      	adds	r7, #20
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009700:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8009704:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800970c:	b29a      	uxth	r2, r3
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	b29b      	uxth	r3, r3
 8009712:	43db      	mvns	r3, r3
 8009714:	b29b      	uxth	r3, r3
 8009716:	4013      	ands	r3, r2
 8009718:	b29a      	uxth	r2, r3
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009720:	2300      	movs	r3, #0
}
 8009722:	4618      	mov	r0, r3
 8009724:	3714      	adds	r7, #20
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr

0800972e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800972e:	b480      	push	{r7}
 8009730:	b085      	sub	sp, #20
 8009732:	af00      	add	r7, sp, #0
 8009734:	60f8      	str	r0, [r7, #12]
 8009736:	1d3b      	adds	r3, r7, #4
 8009738:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2201      	movs	r2, #1
 8009740:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2200      	movs	r2, #0
 8009748:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2200      	movs	r2, #0
 8009750:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2200      	movs	r2, #0
 8009758:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800975c:	2300      	movs	r3, #0
}
 800975e:	4618      	mov	r0, r3
 8009760:	3714      	adds	r7, #20
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr
	...

0800976c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800976c:	b480      	push	{r7}
 800976e:	b09d      	sub	sp, #116	@ 0x74
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009776:	2300      	movs	r3, #0
 8009778:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	009b      	lsls	r3, r3, #2
 8009784:	4413      	add	r3, r2
 8009786:	881b      	ldrh	r3, [r3, #0]
 8009788:	b29b      	uxth	r3, r3
 800978a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800978e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009792:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	78db      	ldrb	r3, [r3, #3]
 800979a:	2b03      	cmp	r3, #3
 800979c:	d81f      	bhi.n	80097de <USB_ActivateEndpoint+0x72>
 800979e:	a201      	add	r2, pc, #4	@ (adr r2, 80097a4 <USB_ActivateEndpoint+0x38>)
 80097a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a4:	080097b5 	.word	0x080097b5
 80097a8:	080097d1 	.word	0x080097d1
 80097ac:	080097e7 	.word	0x080097e7
 80097b0:	080097c3 	.word	0x080097c3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80097b4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80097b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80097bc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80097c0:	e012      	b.n	80097e8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80097c2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80097c6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80097ca:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80097ce:	e00b      	b.n	80097e8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80097d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80097d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80097d8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80097dc:	e004      	b.n	80097e8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80097de:	2301      	movs	r3, #1
 80097e0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80097e4:	e000      	b.n	80097e8 <USB_ActivateEndpoint+0x7c>
      break;
 80097e6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	441a      	add	r2, r3
 80097f2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80097f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80097fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80097fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009802:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009806:	b29b      	uxth	r3, r3
 8009808:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	781b      	ldrb	r3, [r3, #0]
 8009810:	009b      	lsls	r3, r3, #2
 8009812:	4413      	add	r3, r2
 8009814:	881b      	ldrh	r3, [r3, #0]
 8009816:	b29b      	uxth	r3, r3
 8009818:	b21b      	sxth	r3, r3
 800981a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800981e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009822:	b21a      	sxth	r2, r3
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	b21b      	sxth	r3, r3
 800982a:	4313      	orrs	r3, r2
 800982c:	b21b      	sxth	r3, r3
 800982e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	781b      	ldrb	r3, [r3, #0]
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	441a      	add	r2, r3
 800983c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009840:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009844:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009848:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800984c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009850:	b29b      	uxth	r3, r3
 8009852:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	7b1b      	ldrb	r3, [r3, #12]
 8009858:	2b00      	cmp	r3, #0
 800985a:	f040 8178 	bne.w	8009b4e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	785b      	ldrb	r3, [r3, #1]
 8009862:	2b00      	cmp	r3, #0
 8009864:	f000 8084 	beq.w	8009970 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	61bb      	str	r3, [r7, #24]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009872:	b29b      	uxth	r3, r3
 8009874:	461a      	mov	r2, r3
 8009876:	69bb      	ldr	r3, [r7, #24]
 8009878:	4413      	add	r3, r2
 800987a:	61bb      	str	r3, [r7, #24]
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	00da      	lsls	r2, r3, #3
 8009882:	69bb      	ldr	r3, [r7, #24]
 8009884:	4413      	add	r3, r2
 8009886:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800988a:	617b      	str	r3, [r7, #20]
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	88db      	ldrh	r3, [r3, #6]
 8009890:	085b      	lsrs	r3, r3, #1
 8009892:	b29b      	uxth	r3, r3
 8009894:	005b      	lsls	r3, r3, #1
 8009896:	b29a      	uxth	r2, r3
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	781b      	ldrb	r3, [r3, #0]
 80098a2:	009b      	lsls	r3, r3, #2
 80098a4:	4413      	add	r3, r2
 80098a6:	881b      	ldrh	r3, [r3, #0]
 80098a8:	827b      	strh	r3, [r7, #18]
 80098aa:	8a7b      	ldrh	r3, [r7, #18]
 80098ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d01b      	beq.n	80098ec <USB_ActivateEndpoint+0x180>
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	4413      	add	r3, r2
 80098be:	881b      	ldrh	r3, [r3, #0]
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80098c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098ca:	823b      	strh	r3, [r7, #16]
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	441a      	add	r2, r3
 80098d6:	8a3b      	ldrh	r3, [r7, #16]
 80098d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80098dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80098e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80098e4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	78db      	ldrb	r3, [r3, #3]
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d020      	beq.n	8009936 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	4413      	add	r3, r2
 80098fe:	881b      	ldrh	r3, [r3, #0]
 8009900:	b29b      	uxth	r3, r3
 8009902:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009906:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800990a:	81bb      	strh	r3, [r7, #12]
 800990c:	89bb      	ldrh	r3, [r7, #12]
 800990e:	f083 0320 	eor.w	r3, r3, #32
 8009912:	81bb      	strh	r3, [r7, #12]
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	441a      	add	r2, r3
 800991e:	89bb      	ldrh	r3, [r7, #12]
 8009920:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009924:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009928:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800992c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009930:	b29b      	uxth	r3, r3
 8009932:	8013      	strh	r3, [r2, #0]
 8009934:	e2d5      	b.n	8009ee2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009936:	687a      	ldr	r2, [r7, #4]
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	009b      	lsls	r3, r3, #2
 800993e:	4413      	add	r3, r2
 8009940:	881b      	ldrh	r3, [r3, #0]
 8009942:	b29b      	uxth	r3, r3
 8009944:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009948:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800994c:	81fb      	strh	r3, [r7, #14]
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	441a      	add	r2, r3
 8009958:	89fb      	ldrh	r3, [r7, #14]
 800995a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800995e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009962:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009966:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800996a:	b29b      	uxth	r3, r3
 800996c:	8013      	strh	r3, [r2, #0]
 800996e:	e2b8      	b.n	8009ee2 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	633b      	str	r3, [r7, #48]	@ 0x30
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800997a:	b29b      	uxth	r3, r3
 800997c:	461a      	mov	r2, r3
 800997e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009980:	4413      	add	r3, r2
 8009982:	633b      	str	r3, [r7, #48]	@ 0x30
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	00da      	lsls	r2, r3, #3
 800998a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800998c:	4413      	add	r3, r2
 800998e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009992:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	88db      	ldrh	r3, [r3, #6]
 8009998:	085b      	lsrs	r3, r3, #1
 800999a:	b29b      	uxth	r3, r3
 800999c:	005b      	lsls	r3, r3, #1
 800999e:	b29a      	uxth	r2, r3
 80099a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099a2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	461a      	mov	r2, r3
 80099b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099b4:	4413      	add	r3, r2
 80099b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	781b      	ldrb	r3, [r3, #0]
 80099bc:	00da      	lsls	r2, r3, #3
 80099be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c0:	4413      	add	r3, r2
 80099c2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80099c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80099c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ca:	881b      	ldrh	r3, [r3, #0]
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80099d2:	b29a      	uxth	r2, r3
 80099d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099d6:	801a      	strh	r2, [r3, #0]
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	691b      	ldr	r3, [r3, #16]
 80099dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80099de:	d91d      	bls.n	8009a1c <USB_ActivateEndpoint+0x2b0>
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	691b      	ldr	r3, [r3, #16]
 80099e4:	095b      	lsrs	r3, r3, #5
 80099e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	691b      	ldr	r3, [r3, #16]
 80099ec:	f003 031f 	and.w	r3, r3, #31
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d102      	bne.n	80099fa <USB_ActivateEndpoint+0x28e>
 80099f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80099f6:	3b01      	subs	r3, #1
 80099f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80099fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099fc:	881b      	ldrh	r3, [r3, #0]
 80099fe:	b29a      	uxth	r2, r3
 8009a00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	029b      	lsls	r3, r3, #10
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a14:	b29a      	uxth	r2, r3
 8009a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a18:	801a      	strh	r2, [r3, #0]
 8009a1a:	e026      	b.n	8009a6a <USB_ActivateEndpoint+0x2fe>
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	691b      	ldr	r3, [r3, #16]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d10a      	bne.n	8009a3a <USB_ActivateEndpoint+0x2ce>
 8009a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a26:	881b      	ldrh	r3, [r3, #0]
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a32:	b29a      	uxth	r2, r3
 8009a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a36:	801a      	strh	r2, [r3, #0]
 8009a38:	e017      	b.n	8009a6a <USB_ActivateEndpoint+0x2fe>
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	691b      	ldr	r3, [r3, #16]
 8009a3e:	085b      	lsrs	r3, r3, #1
 8009a40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	691b      	ldr	r3, [r3, #16]
 8009a46:	f003 0301 	and.w	r3, r3, #1
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d002      	beq.n	8009a54 <USB_ActivateEndpoint+0x2e8>
 8009a4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009a50:	3301      	adds	r3, #1
 8009a52:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a56:	881b      	ldrh	r3, [r3, #0]
 8009a58:	b29a      	uxth	r2, r3
 8009a5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	029b      	lsls	r3, r3, #10
 8009a60:	b29b      	uxth	r3, r3
 8009a62:	4313      	orrs	r3, r2
 8009a64:	b29a      	uxth	r2, r3
 8009a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a68:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009a6a:	687a      	ldr	r2, [r7, #4]
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	781b      	ldrb	r3, [r3, #0]
 8009a70:	009b      	lsls	r3, r3, #2
 8009a72:	4413      	add	r3, r2
 8009a74:	881b      	ldrh	r3, [r3, #0]
 8009a76:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009a78:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009a7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d01b      	beq.n	8009aba <USB_ActivateEndpoint+0x34e>
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	009b      	lsls	r3, r3, #2
 8009a8a:	4413      	add	r3, r2
 8009a8c:	881b      	ldrh	r3, [r3, #0]
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a98:	843b      	strh	r3, [r7, #32]
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	781b      	ldrb	r3, [r3, #0]
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	441a      	add	r2, r3
 8009aa4:	8c3b      	ldrh	r3, [r7, #32]
 8009aa6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009aaa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009aae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009ab2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d124      	bne.n	8009b0c <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	4413      	add	r3, r2
 8009acc:	881b      	ldrh	r3, [r3, #0]
 8009ace:	b29b      	uxth	r3, r3
 8009ad0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009ad4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ad8:	83bb      	strh	r3, [r7, #28]
 8009ada:	8bbb      	ldrh	r3, [r7, #28]
 8009adc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009ae0:	83bb      	strh	r3, [r7, #28]
 8009ae2:	8bbb      	ldrh	r3, [r7, #28]
 8009ae4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009ae8:	83bb      	strh	r3, [r7, #28]
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	441a      	add	r2, r3
 8009af4:	8bbb      	ldrh	r3, [r7, #28]
 8009af6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009afa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009afe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b06:	b29b      	uxth	r3, r3
 8009b08:	8013      	strh	r3, [r2, #0]
 8009b0a:	e1ea      	b.n	8009ee2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009b0c:	687a      	ldr	r2, [r7, #4]
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	4413      	add	r3, r2
 8009b16:	881b      	ldrh	r3, [r3, #0]
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009b1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b22:	83fb      	strh	r3, [r7, #30]
 8009b24:	8bfb      	ldrh	r3, [r7, #30]
 8009b26:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009b2a:	83fb      	strh	r3, [r7, #30]
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	009b      	lsls	r3, r3, #2
 8009b34:	441a      	add	r2, r3
 8009b36:	8bfb      	ldrh	r3, [r7, #30]
 8009b38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	8013      	strh	r3, [r2, #0]
 8009b4c:	e1c9      	b.n	8009ee2 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	78db      	ldrb	r3, [r3, #3]
 8009b52:	2b02      	cmp	r3, #2
 8009b54:	d11e      	bne.n	8009b94 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	4413      	add	r3, r2
 8009b60:	881b      	ldrh	r3, [r3, #0]
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b6c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	009b      	lsls	r3, r3, #2
 8009b78:	441a      	add	r2, r3
 8009b7a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009b7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b86:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009b8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	8013      	strh	r3, [r2, #0]
 8009b92:	e01d      	b.n	8009bd0 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	4413      	add	r3, r2
 8009b9e:	881b      	ldrh	r3, [r3, #0]
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009ba6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009baa:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	009b      	lsls	r3, r3, #2
 8009bb6:	441a      	add	r2, r3
 8009bb8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8009bbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009bc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009bc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009bc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	461a      	mov	r2, r3
 8009bde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009be0:	4413      	add	r3, r2
 8009be2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	00da      	lsls	r2, r3, #3
 8009bea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009bec:	4413      	add	r3, r2
 8009bee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009bf2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	891b      	ldrh	r3, [r3, #8]
 8009bf8:	085b      	lsrs	r3, r3, #1
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	005b      	lsls	r3, r3, #1
 8009bfe:	b29a      	uxth	r2, r3
 8009c00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009c02:	801a      	strh	r2, [r3, #0]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	461a      	mov	r2, r3
 8009c12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c14:	4413      	add	r3, r2
 8009c16:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	00da      	lsls	r2, r3, #3
 8009c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c20:	4413      	add	r3, r2
 8009c22:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009c26:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	895b      	ldrh	r3, [r3, #10]
 8009c2c:	085b      	lsrs	r3, r3, #1
 8009c2e:	b29b      	uxth	r3, r3
 8009c30:	005b      	lsls	r3, r3, #1
 8009c32:	b29a      	uxth	r2, r3
 8009c34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c36:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	785b      	ldrb	r3, [r3, #1]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	f040 8093 	bne.w	8009d68 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c42:	687a      	ldr	r2, [r7, #4]
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	781b      	ldrb	r3, [r3, #0]
 8009c48:	009b      	lsls	r3, r3, #2
 8009c4a:	4413      	add	r3, r2
 8009c4c:	881b      	ldrh	r3, [r3, #0]
 8009c4e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8009c52:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009c56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d01b      	beq.n	8009c96 <USB_ActivateEndpoint+0x52a>
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	4413      	add	r3, r2
 8009c68:	881b      	ldrh	r3, [r3, #0]
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c74:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	441a      	add	r2, r3
 8009c80:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009c82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c8a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009c8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	4413      	add	r3, r2
 8009ca0:	881b      	ldrh	r3, [r3, #0]
 8009ca2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8009ca4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d01b      	beq.n	8009ce6 <USB_ActivateEndpoint+0x57a>
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	009b      	lsls	r3, r3, #2
 8009cb6:	4413      	add	r3, r2
 8009cb8:	881b      	ldrh	r3, [r3, #0]
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009cc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cc4:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	441a      	add	r2, r3
 8009cd0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009cd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009cd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009cda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009cde:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009ce2:	b29b      	uxth	r3, r3
 8009ce4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009ce6:	687a      	ldr	r2, [r7, #4]
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	009b      	lsls	r3, r3, #2
 8009cee:	4413      	add	r3, r2
 8009cf0:	881b      	ldrh	r3, [r3, #0]
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009cf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cfc:	873b      	strh	r3, [r7, #56]	@ 0x38
 8009cfe:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8009d00:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009d04:	873b      	strh	r3, [r7, #56]	@ 0x38
 8009d06:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8009d08:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009d0c:	873b      	strh	r3, [r7, #56]	@ 0x38
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	009b      	lsls	r3, r3, #2
 8009d16:	441a      	add	r2, r3
 8009d18:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8009d1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d2a:	b29b      	uxth	r3, r3
 8009d2c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	781b      	ldrb	r3, [r3, #0]
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	4413      	add	r3, r2
 8009d38:	881b      	ldrh	r3, [r3, #0]
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d44:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009d46:	687a      	ldr	r2, [r7, #4]
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	441a      	add	r2, r3
 8009d50:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009d52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	8013      	strh	r3, [r2, #0]
 8009d66:	e0bc      	b.n	8009ee2 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	781b      	ldrb	r3, [r3, #0]
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	4413      	add	r3, r2
 8009d72:	881b      	ldrh	r3, [r3, #0]
 8009d74:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8009d78:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009d7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d01d      	beq.n	8009dc0 <USB_ActivateEndpoint+0x654>
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	4413      	add	r3, r2
 8009d8e:	881b      	ldrh	r3, [r3, #0]
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d9a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	441a      	add	r2, r3
 8009da8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8009dac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009db0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009db4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009db8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	4413      	add	r3, r2
 8009dca:	881b      	ldrh	r3, [r3, #0]
 8009dcc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8009dd0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d01d      	beq.n	8009e18 <USB_ActivateEndpoint+0x6ac>
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	4413      	add	r3, r2
 8009de6:	881b      	ldrh	r3, [r3, #0]
 8009de8:	b29b      	uxth	r3, r3
 8009dea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009dee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009df2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	441a      	add	r2, r3
 8009e00:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8009e04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e10:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	78db      	ldrb	r3, [r3, #3]
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d024      	beq.n	8009e6a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	4413      	add	r3, r2
 8009e2a:	881b      	ldrh	r3, [r3, #0]
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e36:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8009e3a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8009e3e:	f083 0320 	eor.w	r3, r3, #32
 8009e42:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	009b      	lsls	r3, r3, #2
 8009e4e:	441a      	add	r2, r3
 8009e50:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8009e54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	8013      	strh	r3, [r2, #0]
 8009e68:	e01d      	b.n	8009ea6 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	4413      	add	r3, r2
 8009e74:	881b      	ldrh	r3, [r3, #0]
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e80:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	441a      	add	r2, r3
 8009e8e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009e92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009ea6:	687a      	ldr	r2, [r7, #4]
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	4413      	add	r3, r2
 8009eb0:	881b      	ldrh	r3, [r3, #0]
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009eb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ebc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	441a      	add	r2, r3
 8009eca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009ece:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ed2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ed6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009eda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009ee2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3774      	adds	r7, #116	@ 0x74
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr
 8009ef2:	bf00      	nop

08009ef4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b08d      	sub	sp, #52	@ 0x34
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	7b1b      	ldrb	r3, [r3, #12]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	f040 808e 	bne.w	800a024 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	785b      	ldrb	r3, [r3, #1]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d044      	beq.n	8009f9a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	009b      	lsls	r3, r3, #2
 8009f18:	4413      	add	r3, r2
 8009f1a:	881b      	ldrh	r3, [r3, #0]
 8009f1c:	81bb      	strh	r3, [r7, #12]
 8009f1e:	89bb      	ldrh	r3, [r7, #12]
 8009f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d01b      	beq.n	8009f60 <USB_DeactivateEndpoint+0x6c>
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	009b      	lsls	r3, r3, #2
 8009f30:	4413      	add	r3, r2
 8009f32:	881b      	ldrh	r3, [r3, #0]
 8009f34:	b29b      	uxth	r3, r3
 8009f36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f3e:	817b      	strh	r3, [r7, #10]
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	009b      	lsls	r3, r3, #2
 8009f48:	441a      	add	r2, r3
 8009f4a:	897b      	ldrh	r3, [r7, #10]
 8009f4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f58:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009f60:	687a      	ldr	r2, [r7, #4]
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	4413      	add	r3, r2
 8009f6a:	881b      	ldrh	r3, [r3, #0]
 8009f6c:	b29b      	uxth	r3, r3
 8009f6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f76:	813b      	strh	r3, [r7, #8]
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	441a      	add	r2, r3
 8009f82:	893b      	ldrh	r3, [r7, #8]
 8009f84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	8013      	strh	r3, [r2, #0]
 8009f98:	e192      	b.n	800a2c0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009f9a:	687a      	ldr	r2, [r7, #4]
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	781b      	ldrb	r3, [r3, #0]
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	4413      	add	r3, r2
 8009fa4:	881b      	ldrh	r3, [r3, #0]
 8009fa6:	827b      	strh	r3, [r7, #18]
 8009fa8:	8a7b      	ldrh	r3, [r7, #18]
 8009faa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d01b      	beq.n	8009fea <USB_DeactivateEndpoint+0xf6>
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	4413      	add	r3, r2
 8009fbc:	881b      	ldrh	r3, [r3, #0]
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009fc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fc8:	823b      	strh	r3, [r7, #16]
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	781b      	ldrb	r3, [r3, #0]
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	441a      	add	r2, r3
 8009fd4:	8a3b      	ldrh	r3, [r7, #16]
 8009fd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009fda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009fde:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009fe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	4413      	add	r3, r2
 8009ff4:	881b      	ldrh	r3, [r3, #0]
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009ffc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a000:	81fb      	strh	r3, [r7, #14]
 800a002:	687a      	ldr	r2, [r7, #4]
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	441a      	add	r2, r3
 800a00c:	89fb      	ldrh	r3, [r7, #14]
 800a00e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a012:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a016:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a01a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a01e:	b29b      	uxth	r3, r3
 800a020:	8013      	strh	r3, [r2, #0]
 800a022:	e14d      	b.n	800a2c0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	785b      	ldrb	r3, [r3, #1]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	f040 80a5 	bne.w	800a178 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	4413      	add	r3, r2
 800a038:	881b      	ldrh	r3, [r3, #0]
 800a03a:	843b      	strh	r3, [r7, #32]
 800a03c:	8c3b      	ldrh	r3, [r7, #32]
 800a03e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a042:	2b00      	cmp	r3, #0
 800a044:	d01b      	beq.n	800a07e <USB_DeactivateEndpoint+0x18a>
 800a046:	687a      	ldr	r2, [r7, #4]
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	009b      	lsls	r3, r3, #2
 800a04e:	4413      	add	r3, r2
 800a050:	881b      	ldrh	r3, [r3, #0]
 800a052:	b29b      	uxth	r3, r3
 800a054:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a058:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a05c:	83fb      	strh	r3, [r7, #30]
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	441a      	add	r2, r3
 800a068:	8bfb      	ldrh	r3, [r7, #30]
 800a06a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a06e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a072:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a076:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a07e:	687a      	ldr	r2, [r7, #4]
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	781b      	ldrb	r3, [r3, #0]
 800a084:	009b      	lsls	r3, r3, #2
 800a086:	4413      	add	r3, r2
 800a088:	881b      	ldrh	r3, [r3, #0]
 800a08a:	83bb      	strh	r3, [r7, #28]
 800a08c:	8bbb      	ldrh	r3, [r7, #28]
 800a08e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a092:	2b00      	cmp	r3, #0
 800a094:	d01b      	beq.n	800a0ce <USB_DeactivateEndpoint+0x1da>
 800a096:	687a      	ldr	r2, [r7, #4]
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	009b      	lsls	r3, r3, #2
 800a09e:	4413      	add	r3, r2
 800a0a0:	881b      	ldrh	r3, [r3, #0]
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a0a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0ac:	837b      	strh	r3, [r7, #26]
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	781b      	ldrb	r3, [r3, #0]
 800a0b4:	009b      	lsls	r3, r3, #2
 800a0b6:	441a      	add	r2, r3
 800a0b8:	8b7b      	ldrh	r3, [r7, #26]
 800a0ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a0be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a0c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a0c6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a0ce:	687a      	ldr	r2, [r7, #4]
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	009b      	lsls	r3, r3, #2
 800a0d6:	4413      	add	r3, r2
 800a0d8:	881b      	ldrh	r3, [r3, #0]
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a0e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0e4:	833b      	strh	r3, [r7, #24]
 800a0e6:	687a      	ldr	r2, [r7, #4]
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	441a      	add	r2, r3
 800a0f0:	8b3b      	ldrh	r3, [r7, #24]
 800a0f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a0f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a0fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a0fe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a102:	b29b      	uxth	r3, r3
 800a104:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	009b      	lsls	r3, r3, #2
 800a10e:	4413      	add	r3, r2
 800a110:	881b      	ldrh	r3, [r3, #0]
 800a112:	b29b      	uxth	r3, r3
 800a114:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a118:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a11c:	82fb      	strh	r3, [r7, #22]
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	009b      	lsls	r3, r3, #2
 800a126:	441a      	add	r2, r3
 800a128:	8afb      	ldrh	r3, [r7, #22]
 800a12a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a12e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a132:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a136:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a13a:	b29b      	uxth	r3, r3
 800a13c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	009b      	lsls	r3, r3, #2
 800a146:	4413      	add	r3, r2
 800a148:	881b      	ldrh	r3, [r3, #0]
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a150:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a154:	82bb      	strh	r3, [r7, #20]
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	009b      	lsls	r3, r3, #2
 800a15e:	441a      	add	r2, r3
 800a160:	8abb      	ldrh	r3, [r7, #20]
 800a162:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a166:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a16a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a16e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a172:	b29b      	uxth	r3, r3
 800a174:	8013      	strh	r3, [r2, #0]
 800a176:	e0a3      	b.n	800a2c0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	009b      	lsls	r3, r3, #2
 800a180:	4413      	add	r3, r2
 800a182:	881b      	ldrh	r3, [r3, #0]
 800a184:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800a186:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a188:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d01b      	beq.n	800a1c8 <USB_DeactivateEndpoint+0x2d4>
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	781b      	ldrb	r3, [r3, #0]
 800a196:	009b      	lsls	r3, r3, #2
 800a198:	4413      	add	r3, r2
 800a19a:	881b      	ldrh	r3, [r3, #0]
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a1a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1a6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	781b      	ldrb	r3, [r3, #0]
 800a1ae:	009b      	lsls	r3, r3, #2
 800a1b0:	441a      	add	r2, r3
 800a1b2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a1b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a1b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a1bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a1c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a1c8:	687a      	ldr	r2, [r7, #4]
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	781b      	ldrb	r3, [r3, #0]
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	4413      	add	r3, r2
 800a1d2:	881b      	ldrh	r3, [r3, #0]
 800a1d4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800a1d6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a1d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d01b      	beq.n	800a218 <USB_DeactivateEndpoint+0x324>
 800a1e0:	687a      	ldr	r2, [r7, #4]
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	781b      	ldrb	r3, [r3, #0]
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	4413      	add	r3, r2
 800a1ea:	881b      	ldrh	r3, [r3, #0]
 800a1ec:	b29b      	uxth	r3, r3
 800a1ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a1f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1f6:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	009b      	lsls	r3, r3, #2
 800a200:	441a      	add	r2, r3
 800a202:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a204:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a208:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a20c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a210:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a214:	b29b      	uxth	r3, r3
 800a216:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	009b      	lsls	r3, r3, #2
 800a220:	4413      	add	r3, r2
 800a222:	881b      	ldrh	r3, [r3, #0]
 800a224:	b29b      	uxth	r3, r3
 800a226:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a22a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a22e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800a230:	687a      	ldr	r2, [r7, #4]
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	009b      	lsls	r3, r3, #2
 800a238:	441a      	add	r2, r3
 800a23a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a23c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a240:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a244:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a248:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a24c:	b29b      	uxth	r3, r3
 800a24e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	4413      	add	r3, r2
 800a25a:	881b      	ldrh	r3, [r3, #0]
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a262:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a266:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	009b      	lsls	r3, r3, #2
 800a270:	441a      	add	r2, r3
 800a272:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a274:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a278:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a27c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a280:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a284:	b29b      	uxth	r3, r3
 800a286:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	009b      	lsls	r3, r3, #2
 800a290:	4413      	add	r3, r2
 800a292:	881b      	ldrh	r3, [r3, #0]
 800a294:	b29b      	uxth	r3, r3
 800a296:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a29a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a29e:	847b      	strh	r3, [r7, #34]	@ 0x22
 800a2a0:	687a      	ldr	r2, [r7, #4]
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	009b      	lsls	r3, r3, #2
 800a2a8:	441a      	add	r2, r3
 800a2aa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a2ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a2b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a2b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a2b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a2c0:	2300      	movs	r3, #0
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3734      	adds	r7, #52	@ 0x34
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2cc:	4770      	bx	lr

0800a2ce <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a2ce:	b580      	push	{r7, lr}
 800a2d0:	b0c2      	sub	sp, #264	@ 0x108
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a2dc:	6018      	str	r0, [r3, #0]
 800a2de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2e6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a2e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	785b      	ldrb	r3, [r3, #1]
 800a2f4:	2b01      	cmp	r3, #1
 800a2f6:	f040 86b7 	bne.w	800b068 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a2fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	699a      	ldr	r2, [r3, #24]
 800a306:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a30a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	691b      	ldr	r3, [r3, #16]
 800a312:	429a      	cmp	r2, r3
 800a314:	d908      	bls.n	800a328 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800a316:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a31a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	691b      	ldr	r3, [r3, #16]
 800a322:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a326:	e007      	b.n	800a338 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a32c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	699b      	ldr	r3, [r3, #24]
 800a334:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a33c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	7b1b      	ldrb	r3, [r3, #12]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d13a      	bne.n	800a3be <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a34c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	6959      	ldr	r1, [r3, #20]
 800a354:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a358:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	88da      	ldrh	r2, [r3, #6]
 800a360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a364:	b29b      	uxth	r3, r3
 800a366:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a36a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a36e:	6800      	ldr	r0, [r0, #0]
 800a370:	f001 fc98 	bl	800bca4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a378:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	613b      	str	r3, [r7, #16]
 800a380:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a384:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a38e:	b29b      	uxth	r3, r3
 800a390:	461a      	mov	r2, r3
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	4413      	add	r3, r2
 800a396:	613b      	str	r3, [r7, #16]
 800a398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a39c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	00da      	lsls	r2, r3, #3
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	4413      	add	r3, r2
 800a3aa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a3ae:	60fb      	str	r3, [r7, #12]
 800a3b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3b4:	b29a      	uxth	r2, r3
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	801a      	strh	r2, [r3, #0]
 800a3ba:	f000 be1f 	b.w	800affc <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a3be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	78db      	ldrb	r3, [r3, #3]
 800a3ca:	2b02      	cmp	r3, #2
 800a3cc:	f040 8462 	bne.w	800ac94 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a3d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	6a1a      	ldr	r2, [r3, #32]
 800a3dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	691b      	ldr	r3, [r3, #16]
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	f240 83df 	bls.w	800abac <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a3ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	009b      	lsls	r3, r3, #2
 800a406:	4413      	add	r3, r2
 800a408:	881b      	ldrh	r3, [r3, #0]
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a410:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a414:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800a418:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a41c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a420:	681a      	ldr	r2, [r3, #0]
 800a422:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a426:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	009b      	lsls	r3, r3, #2
 800a430:	441a      	add	r2, r3
 800a432:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a436:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a43a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a43e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a442:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a446:	b29b      	uxth	r3, r3
 800a448:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a44a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a44e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	6a1a      	ldr	r2, [r3, #32]
 800a456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a45a:	1ad2      	subs	r2, r2, r3
 800a45c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a460:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a468:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a46c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a476:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	781b      	ldrb	r3, [r3, #0]
 800a47e:	009b      	lsls	r3, r3, #2
 800a480:	4413      	add	r3, r2
 800a482:	881b      	ldrh	r3, [r3, #0]
 800a484:	b29b      	uxth	r3, r3
 800a486:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	f000 81c7 	beq.w	800a81e <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a490:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a494:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a49c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	785b      	ldrb	r3, [r3, #1]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d177      	bne.n	800a59c <USB_EPStartXfer+0x2ce>
 800a4ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a4b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a4c6:	b29b      	uxth	r3, r3
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4cc:	4413      	add	r3, r2
 800a4ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a4d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	00da      	lsls	r2, r3, #3
 800a4de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4e0:	4413      	add	r3, r2
 800a4e2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a4e6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ea:	881b      	ldrh	r3, [r3, #0]
 800a4ec:	b29b      	uxth	r3, r3
 800a4ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a4f2:	b29a      	uxth	r2, r3
 800a4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f6:	801a      	strh	r2, [r3, #0]
 800a4f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4fc:	2b3e      	cmp	r3, #62	@ 0x3e
 800a4fe:	d921      	bls.n	800a544 <USB_EPStartXfer+0x276>
 800a500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a504:	095b      	lsrs	r3, r3, #5
 800a506:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a50a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a50e:	f003 031f 	and.w	r3, r3, #31
 800a512:	2b00      	cmp	r3, #0
 800a514:	d104      	bne.n	800a520 <USB_EPStartXfer+0x252>
 800a516:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a51a:	3b01      	subs	r3, #1
 800a51c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a522:	881b      	ldrh	r3, [r3, #0]
 800a524:	b29a      	uxth	r2, r3
 800a526:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	029b      	lsls	r3, r3, #10
 800a52e:	b29b      	uxth	r3, r3
 800a530:	4313      	orrs	r3, r2
 800a532:	b29b      	uxth	r3, r3
 800a534:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a538:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a53c:	b29a      	uxth	r2, r3
 800a53e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a540:	801a      	strh	r2, [r3, #0]
 800a542:	e050      	b.n	800a5e6 <USB_EPStartXfer+0x318>
 800a544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d10a      	bne.n	800a562 <USB_EPStartXfer+0x294>
 800a54c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a54e:	881b      	ldrh	r3, [r3, #0]
 800a550:	b29b      	uxth	r3, r3
 800a552:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a556:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a55a:	b29a      	uxth	r2, r3
 800a55c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a55e:	801a      	strh	r2, [r3, #0]
 800a560:	e041      	b.n	800a5e6 <USB_EPStartXfer+0x318>
 800a562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a566:	085b      	lsrs	r3, r3, #1
 800a568:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a56c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a570:	f003 0301 	and.w	r3, r3, #1
 800a574:	2b00      	cmp	r3, #0
 800a576:	d004      	beq.n	800a582 <USB_EPStartXfer+0x2b4>
 800a578:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a57c:	3301      	adds	r3, #1
 800a57e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a584:	881b      	ldrh	r3, [r3, #0]
 800a586:	b29a      	uxth	r2, r3
 800a588:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a58c:	b29b      	uxth	r3, r3
 800a58e:	029b      	lsls	r3, r3, #10
 800a590:	b29b      	uxth	r3, r3
 800a592:	4313      	orrs	r3, r2
 800a594:	b29a      	uxth	r2, r3
 800a596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a598:	801a      	strh	r2, [r3, #0]
 800a59a:	e024      	b.n	800a5e6 <USB_EPStartXfer+0x318>
 800a59c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	785b      	ldrb	r3, [r3, #1]
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	d11c      	bne.n	800a5e6 <USB_EPStartXfer+0x318>
 800a5ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	461a      	mov	r2, r3
 800a5be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5c0:	4413      	add	r3, r2
 800a5c2:	633b      	str	r3, [r7, #48]	@ 0x30
 800a5c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	00da      	lsls	r2, r3, #3
 800a5d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5d4:	4413      	add	r3, r2
 800a5d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a5da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a5dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5e0:	b29a      	uxth	r2, r3
 800a5e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a5e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	895b      	ldrh	r3, [r3, #10]
 800a5f2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a5f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	6959      	ldr	r1, [r3, #20]
 800a602:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a606:	b29b      	uxth	r3, r3
 800a608:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a60c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a610:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a614:	6800      	ldr	r0, [r0, #0]
 800a616:	f001 fb45 	bl	800bca4 <USB_WritePMA>
            ep->xfer_buff += len;
 800a61a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a61e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	695a      	ldr	r2, [r3, #20]
 800a626:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a62a:	441a      	add	r2, r3
 800a62c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a630:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a638:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a63c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	6a1a      	ldr	r2, [r3, #32]
 800a644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a648:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	691b      	ldr	r3, [r3, #16]
 800a650:	429a      	cmp	r2, r3
 800a652:	d90f      	bls.n	800a674 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800a654:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a658:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	6a1a      	ldr	r2, [r3, #32]
 800a660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a664:	1ad2      	subs	r2, r2, r3
 800a666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a66a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	621a      	str	r2, [r3, #32]
 800a672:	e00e      	b.n	800a692 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800a674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a678:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	6a1b      	ldr	r3, [r3, #32]
 800a680:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800a684:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a688:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	2200      	movs	r2, #0
 800a690:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a692:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a696:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	785b      	ldrb	r3, [r3, #1]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d177      	bne.n	800a792 <USB_EPStartXfer+0x4c4>
 800a6a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	61bb      	str	r3, [r7, #24]
 800a6ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a6bc:	b29b      	uxth	r3, r3
 800a6be:	461a      	mov	r2, r3
 800a6c0:	69bb      	ldr	r3, [r7, #24]
 800a6c2:	4413      	add	r3, r2
 800a6c4:	61bb      	str	r3, [r7, #24]
 800a6c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	00da      	lsls	r2, r3, #3
 800a6d4:	69bb      	ldr	r3, [r7, #24]
 800a6d6:	4413      	add	r3, r2
 800a6d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a6dc:	617b      	str	r3, [r7, #20]
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	881b      	ldrh	r3, [r3, #0]
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a6e8:	b29a      	uxth	r2, r3
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	801a      	strh	r2, [r3, #0]
 800a6ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6f2:	2b3e      	cmp	r3, #62	@ 0x3e
 800a6f4:	d921      	bls.n	800a73a <USB_EPStartXfer+0x46c>
 800a6f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6fa:	095b      	lsrs	r3, r3, #5
 800a6fc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a704:	f003 031f 	and.w	r3, r3, #31
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d104      	bne.n	800a716 <USB_EPStartXfer+0x448>
 800a70c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a710:	3b01      	subs	r3, #1
 800a712:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	881b      	ldrh	r3, [r3, #0]
 800a71a:	b29a      	uxth	r2, r3
 800a71c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a720:	b29b      	uxth	r3, r3
 800a722:	029b      	lsls	r3, r3, #10
 800a724:	b29b      	uxth	r3, r3
 800a726:	4313      	orrs	r3, r2
 800a728:	b29b      	uxth	r3, r3
 800a72a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a72e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a732:	b29a      	uxth	r2, r3
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	801a      	strh	r2, [r3, #0]
 800a738:	e056      	b.n	800a7e8 <USB_EPStartXfer+0x51a>
 800a73a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d10a      	bne.n	800a758 <USB_EPStartXfer+0x48a>
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	881b      	ldrh	r3, [r3, #0]
 800a746:	b29b      	uxth	r3, r3
 800a748:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a74c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a750:	b29a      	uxth	r2, r3
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	801a      	strh	r2, [r3, #0]
 800a756:	e047      	b.n	800a7e8 <USB_EPStartXfer+0x51a>
 800a758:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a75c:	085b      	lsrs	r3, r3, #1
 800a75e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a766:	f003 0301 	and.w	r3, r3, #1
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d004      	beq.n	800a778 <USB_EPStartXfer+0x4aa>
 800a76e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a772:	3301      	adds	r3, #1
 800a774:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	881b      	ldrh	r3, [r3, #0]
 800a77c:	b29a      	uxth	r2, r3
 800a77e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a782:	b29b      	uxth	r3, r3
 800a784:	029b      	lsls	r3, r3, #10
 800a786:	b29b      	uxth	r3, r3
 800a788:	4313      	orrs	r3, r2
 800a78a:	b29a      	uxth	r2, r3
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	801a      	strh	r2, [r3, #0]
 800a790:	e02a      	b.n	800a7e8 <USB_EPStartXfer+0x51a>
 800a792:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a796:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	785b      	ldrb	r3, [r3, #1]
 800a79e:	2b01      	cmp	r3, #1
 800a7a0:	d122      	bne.n	800a7e8 <USB_EPStartXfer+0x51a>
 800a7a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	623b      	str	r3, [r7, #32]
 800a7ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	461a      	mov	r2, r3
 800a7c0:	6a3b      	ldr	r3, [r7, #32]
 800a7c2:	4413      	add	r3, r2
 800a7c4:	623b      	str	r3, [r7, #32]
 800a7c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	00da      	lsls	r2, r3, #3
 800a7d4:	6a3b      	ldr	r3, [r7, #32]
 800a7d6:	4413      	add	r3, r2
 800a7d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a7dc:	61fb      	str	r3, [r7, #28]
 800a7de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7e2:	b29a      	uxth	r2, r3
 800a7e4:	69fb      	ldr	r3, [r7, #28]
 800a7e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a7e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	891b      	ldrh	r3, [r3, #8]
 800a7f4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a7f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	6959      	ldr	r1, [r3, #20]
 800a804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a808:	b29b      	uxth	r3, r3
 800a80a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a80e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a812:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a816:	6800      	ldr	r0, [r0, #0]
 800a818:	f001 fa44 	bl	800bca4 <USB_WritePMA>
 800a81c:	e3ee      	b.n	800affc <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a81e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a822:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	785b      	ldrb	r3, [r3, #1]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d177      	bne.n	800a91e <USB_EPStartXfer+0x650>
 800a82e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a832:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a83a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a83e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a848:	b29b      	uxth	r3, r3
 800a84a:	461a      	mov	r2, r3
 800a84c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a84e:	4413      	add	r3, r2
 800a850:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a852:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a856:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	781b      	ldrb	r3, [r3, #0]
 800a85e:	00da      	lsls	r2, r3, #3
 800a860:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a862:	4413      	add	r3, r2
 800a864:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a868:	647b      	str	r3, [r7, #68]	@ 0x44
 800a86a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a86c:	881b      	ldrh	r3, [r3, #0]
 800a86e:	b29b      	uxth	r3, r3
 800a870:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a874:	b29a      	uxth	r2, r3
 800a876:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a878:	801a      	strh	r2, [r3, #0]
 800a87a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a87e:	2b3e      	cmp	r3, #62	@ 0x3e
 800a880:	d921      	bls.n	800a8c6 <USB_EPStartXfer+0x5f8>
 800a882:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a886:	095b      	lsrs	r3, r3, #5
 800a888:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a88c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a890:	f003 031f 	and.w	r3, r3, #31
 800a894:	2b00      	cmp	r3, #0
 800a896:	d104      	bne.n	800a8a2 <USB_EPStartXfer+0x5d4>
 800a898:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a89c:	3b01      	subs	r3, #1
 800a89e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a8a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8a4:	881b      	ldrh	r3, [r3, #0]
 800a8a6:	b29a      	uxth	r2, r3
 800a8a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a8ac:	b29b      	uxth	r3, r3
 800a8ae:	029b      	lsls	r3, r3, #10
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	4313      	orrs	r3, r2
 800a8b4:	b29b      	uxth	r3, r3
 800a8b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8be:	b29a      	uxth	r2, r3
 800a8c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8c2:	801a      	strh	r2, [r3, #0]
 800a8c4:	e056      	b.n	800a974 <USB_EPStartXfer+0x6a6>
 800a8c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d10a      	bne.n	800a8e4 <USB_EPStartXfer+0x616>
 800a8ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8d0:	881b      	ldrh	r3, [r3, #0]
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8dc:	b29a      	uxth	r2, r3
 800a8de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8e0:	801a      	strh	r2, [r3, #0]
 800a8e2:	e047      	b.n	800a974 <USB_EPStartXfer+0x6a6>
 800a8e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8e8:	085b      	lsrs	r3, r3, #1
 800a8ea:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a8ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8f2:	f003 0301 	and.w	r3, r3, #1
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d004      	beq.n	800a904 <USB_EPStartXfer+0x636>
 800a8fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a8fe:	3301      	adds	r3, #1
 800a900:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a904:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a906:	881b      	ldrh	r3, [r3, #0]
 800a908:	b29a      	uxth	r2, r3
 800a90a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a90e:	b29b      	uxth	r3, r3
 800a910:	029b      	lsls	r3, r3, #10
 800a912:	b29b      	uxth	r3, r3
 800a914:	4313      	orrs	r3, r2
 800a916:	b29a      	uxth	r2, r3
 800a918:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a91a:	801a      	strh	r2, [r3, #0]
 800a91c:	e02a      	b.n	800a974 <USB_EPStartXfer+0x6a6>
 800a91e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a922:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	785b      	ldrb	r3, [r3, #1]
 800a92a:	2b01      	cmp	r3, #1
 800a92c:	d122      	bne.n	800a974 <USB_EPStartXfer+0x6a6>
 800a92e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a932:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	653b      	str	r3, [r7, #80]	@ 0x50
 800a93a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a93e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a948:	b29b      	uxth	r3, r3
 800a94a:	461a      	mov	r2, r3
 800a94c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a94e:	4413      	add	r3, r2
 800a950:	653b      	str	r3, [r7, #80]	@ 0x50
 800a952:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a956:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	00da      	lsls	r2, r3, #3
 800a960:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a962:	4413      	add	r3, r2
 800a964:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a968:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a96a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a96e:	b29a      	uxth	r2, r3
 800a970:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a972:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a974:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a978:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	891b      	ldrh	r3, [r3, #8]
 800a980:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a984:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a988:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	6959      	ldr	r1, [r3, #20]
 800a990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a994:	b29b      	uxth	r3, r3
 800a996:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a99a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a99e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a9a2:	6800      	ldr	r0, [r0, #0]
 800a9a4:	f001 f97e 	bl	800bca4 <USB_WritePMA>
            ep->xfer_buff += len;
 800a9a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	695a      	ldr	r2, [r3, #20]
 800a9b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9b8:	441a      	add	r2, r3
 800a9ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a9c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	6a1a      	ldr	r2, [r3, #32]
 800a9d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	691b      	ldr	r3, [r3, #16]
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d90f      	bls.n	800aa02 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800a9e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	6a1a      	ldr	r2, [r3, #32]
 800a9ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9f2:	1ad2      	subs	r2, r2, r3
 800a9f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	621a      	str	r2, [r3, #32]
 800aa00:	e00e      	b.n	800aa20 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800aa02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	6a1b      	ldr	r3, [r3, #32]
 800aa0e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800aa12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800aa20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	643b      	str	r3, [r7, #64]	@ 0x40
 800aa2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	785b      	ldrb	r3, [r3, #1]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d177      	bne.n	800ab2c <USB_EPStartXfer+0x85e>
 800aa3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	63bb      	str	r3, [r7, #56]	@ 0x38
 800aa48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	461a      	mov	r2, r3
 800aa5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa5c:	4413      	add	r3, r2
 800aa5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800aa60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	00da      	lsls	r2, r3, #3
 800aa6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa70:	4413      	add	r3, r2
 800aa72:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800aa76:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa7a:	881b      	ldrh	r3, [r3, #0]
 800aa7c:	b29b      	uxth	r3, r3
 800aa7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa82:	b29a      	uxth	r2, r3
 800aa84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa86:	801a      	strh	r2, [r3, #0]
 800aa88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa8c:	2b3e      	cmp	r3, #62	@ 0x3e
 800aa8e:	d921      	bls.n	800aad4 <USB_EPStartXfer+0x806>
 800aa90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa94:	095b      	lsrs	r3, r3, #5
 800aa96:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800aa9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa9e:	f003 031f 	and.w	r3, r3, #31
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d104      	bne.n	800aab0 <USB_EPStartXfer+0x7e2>
 800aaa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aaaa:	3b01      	subs	r3, #1
 800aaac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800aab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aab2:	881b      	ldrh	r3, [r3, #0]
 800aab4:	b29a      	uxth	r2, r3
 800aab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aaba:	b29b      	uxth	r3, r3
 800aabc:	029b      	lsls	r3, r3, #10
 800aabe:	b29b      	uxth	r3, r3
 800aac0:	4313      	orrs	r3, r2
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aac8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aacc:	b29a      	uxth	r2, r3
 800aace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aad0:	801a      	strh	r2, [r3, #0]
 800aad2:	e050      	b.n	800ab76 <USB_EPStartXfer+0x8a8>
 800aad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d10a      	bne.n	800aaf2 <USB_EPStartXfer+0x824>
 800aadc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aade:	881b      	ldrh	r3, [r3, #0]
 800aae0:	b29b      	uxth	r3, r3
 800aae2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aae6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aaea:	b29a      	uxth	r2, r3
 800aaec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaee:	801a      	strh	r2, [r3, #0]
 800aaf0:	e041      	b.n	800ab76 <USB_EPStartXfer+0x8a8>
 800aaf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aaf6:	085b      	lsrs	r3, r3, #1
 800aaf8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800aafc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab00:	f003 0301 	and.w	r3, r3, #1
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d004      	beq.n	800ab12 <USB_EPStartXfer+0x844>
 800ab08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab0c:	3301      	adds	r3, #1
 800ab0e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ab12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab14:	881b      	ldrh	r3, [r3, #0]
 800ab16:	b29a      	uxth	r2, r3
 800ab18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab1c:	b29b      	uxth	r3, r3
 800ab1e:	029b      	lsls	r3, r3, #10
 800ab20:	b29b      	uxth	r3, r3
 800ab22:	4313      	orrs	r3, r2
 800ab24:	b29a      	uxth	r2, r3
 800ab26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab28:	801a      	strh	r2, [r3, #0]
 800ab2a:	e024      	b.n	800ab76 <USB_EPStartXfer+0x8a8>
 800ab2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	785b      	ldrb	r3, [r3, #1]
 800ab38:	2b01      	cmp	r3, #1
 800ab3a:	d11c      	bne.n	800ab76 <USB_EPStartXfer+0x8a8>
 800ab3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	461a      	mov	r2, r3
 800ab4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab50:	4413      	add	r3, r2
 800ab52:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	00da      	lsls	r2, r3, #3
 800ab62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab64:	4413      	add	r3, r2
 800ab66:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ab6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab70:	b29a      	uxth	r2, r3
 800ab72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab74:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ab76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	895b      	ldrh	r3, [r3, #10]
 800ab82:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ab86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	6959      	ldr	r1, [r3, #20]
 800ab92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab96:	b29b      	uxth	r3, r3
 800ab98:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ab9c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800aba0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800aba4:	6800      	ldr	r0, [r0, #0]
 800aba6:	f001 f87d 	bl	800bca4 <USB_WritePMA>
 800abaa:	e227      	b.n	800affc <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800abac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	6a1b      	ldr	r3, [r3, #32]
 800abb8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800abbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800abc4:	681a      	ldr	r2, [r3, #0]
 800abc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	781b      	ldrb	r3, [r3, #0]
 800abd2:	009b      	lsls	r3, r3, #2
 800abd4:	4413      	add	r3, r2
 800abd6:	881b      	ldrh	r3, [r3, #0]
 800abd8:	b29b      	uxth	r3, r3
 800abda:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800abde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abe2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800abe6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800abee:	681a      	ldr	r2, [r3, #0]
 800abf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	781b      	ldrb	r3, [r3, #0]
 800abfc:	009b      	lsls	r3, r3, #2
 800abfe:	441a      	add	r2, r3
 800ac00:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800ac04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac14:	b29b      	uxth	r3, r3
 800ac16:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ac18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ac24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac32:	b29b      	uxth	r3, r3
 800ac34:	461a      	mov	r2, r3
 800ac36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac38:	4413      	add	r3, r2
 800ac3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ac3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	00da      	lsls	r2, r3, #3
 800ac4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac4c:	4413      	add	r3, r2
 800ac4e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ac52:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ac54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac58:	b29a      	uxth	r2, r3
 800ac5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ac5c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ac5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	891b      	ldrh	r3, [r3, #8]
 800ac6a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ac6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	6959      	ldr	r1, [r3, #20]
 800ac7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac7e:	b29b      	uxth	r3, r3
 800ac80:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ac84:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ac88:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ac8c:	6800      	ldr	r0, [r0, #0]
 800ac8e:	f001 f809 	bl	800bca4 <USB_WritePMA>
 800ac92:	e1b3      	b.n	800affc <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ac94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	6a1a      	ldr	r2, [r3, #32]
 800aca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aca4:	1ad2      	subs	r2, r2, r3
 800aca6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800acb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800acba:	681a      	ldr	r2, [r3, #0]
 800acbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	009b      	lsls	r3, r3, #2
 800acca:	4413      	add	r3, r2
 800accc:	881b      	ldrh	r3, [r3, #0]
 800acce:	b29b      	uxth	r3, r3
 800acd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	f000 80c6 	beq.w	800ae66 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800acda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	673b      	str	r3, [r7, #112]	@ 0x70
 800ace6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	785b      	ldrb	r3, [r3, #1]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d177      	bne.n	800ade6 <USB_EPStartXfer+0xb18>
 800acf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ad02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	461a      	mov	r2, r3
 800ad14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ad16:	4413      	add	r3, r2
 800ad18:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ad1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	781b      	ldrb	r3, [r3, #0]
 800ad26:	00da      	lsls	r2, r3, #3
 800ad28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ad2a:	4413      	add	r3, r2
 800ad2c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ad30:	667b      	str	r3, [r7, #100]	@ 0x64
 800ad32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad34:	881b      	ldrh	r3, [r3, #0]
 800ad36:	b29b      	uxth	r3, r3
 800ad38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad3c:	b29a      	uxth	r2, r3
 800ad3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad40:	801a      	strh	r2, [r3, #0]
 800ad42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad46:	2b3e      	cmp	r3, #62	@ 0x3e
 800ad48:	d921      	bls.n	800ad8e <USB_EPStartXfer+0xac0>
 800ad4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad4e:	095b      	lsrs	r3, r3, #5
 800ad50:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ad54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad58:	f003 031f 	and.w	r3, r3, #31
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d104      	bne.n	800ad6a <USB_EPStartXfer+0xa9c>
 800ad60:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ad64:	3b01      	subs	r3, #1
 800ad66:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ad6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad6c:	881b      	ldrh	r3, [r3, #0]
 800ad6e:	b29a      	uxth	r2, r3
 800ad70:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ad74:	b29b      	uxth	r3, r3
 800ad76:	029b      	lsls	r3, r3, #10
 800ad78:	b29b      	uxth	r3, r3
 800ad7a:	4313      	orrs	r3, r2
 800ad7c:	b29b      	uxth	r3, r3
 800ad7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad86:	b29a      	uxth	r2, r3
 800ad88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad8a:	801a      	strh	r2, [r3, #0]
 800ad8c:	e050      	b.n	800ae30 <USB_EPStartXfer+0xb62>
 800ad8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d10a      	bne.n	800adac <USB_EPStartXfer+0xade>
 800ad96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad98:	881b      	ldrh	r3, [r3, #0]
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ada0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ada4:	b29a      	uxth	r2, r3
 800ada6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ada8:	801a      	strh	r2, [r3, #0]
 800adaa:	e041      	b.n	800ae30 <USB_EPStartXfer+0xb62>
 800adac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adb0:	085b      	lsrs	r3, r3, #1
 800adb2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800adb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adba:	f003 0301 	and.w	r3, r3, #1
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d004      	beq.n	800adcc <USB_EPStartXfer+0xafe>
 800adc2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800adc6:	3301      	adds	r3, #1
 800adc8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800adcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800adce:	881b      	ldrh	r3, [r3, #0]
 800add0:	b29a      	uxth	r2, r3
 800add2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800add6:	b29b      	uxth	r3, r3
 800add8:	029b      	lsls	r3, r3, #10
 800adda:	b29b      	uxth	r3, r3
 800addc:	4313      	orrs	r3, r2
 800adde:	b29a      	uxth	r2, r3
 800ade0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ade2:	801a      	strh	r2, [r3, #0]
 800ade4:	e024      	b.n	800ae30 <USB_EPStartXfer+0xb62>
 800ade6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	785b      	ldrb	r3, [r3, #1]
 800adf2:	2b01      	cmp	r3, #1
 800adf4:	d11c      	bne.n	800ae30 <USB_EPStartXfer+0xb62>
 800adf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae04:	b29b      	uxth	r3, r3
 800ae06:	461a      	mov	r2, r3
 800ae08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ae0a:	4413      	add	r3, r2
 800ae0c:	673b      	str	r3, [r7, #112]	@ 0x70
 800ae0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	00da      	lsls	r2, r3, #3
 800ae1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ae1e:	4413      	add	r3, r2
 800ae20:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ae24:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ae26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae2a:	b29a      	uxth	r2, r3
 800ae2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae2e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800ae30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	895b      	ldrh	r3, [r3, #10]
 800ae3c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ae40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	6959      	ldr	r1, [r3, #20]
 800ae4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ae56:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ae5a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ae5e:	6800      	ldr	r0, [r0, #0]
 800ae60:	f000 ff20 	bl	800bca4 <USB_WritePMA>
 800ae64:	e0ca      	b.n	800affc <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ae66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	785b      	ldrb	r3, [r3, #1]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d177      	bne.n	800af66 <USB_EPStartXfer+0xc98>
 800ae76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ae82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae90:	b29b      	uxth	r3, r3
 800ae92:	461a      	mov	r2, r3
 800ae94:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ae96:	4413      	add	r3, r2
 800ae98:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ae9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	781b      	ldrb	r3, [r3, #0]
 800aea6:	00da      	lsls	r2, r3, #3
 800aea8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800aeaa:	4413      	add	r3, r2
 800aeac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800aeb0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800aeb2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aeb4:	881b      	ldrh	r3, [r3, #0]
 800aeb6:	b29b      	uxth	r3, r3
 800aeb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aebc:	b29a      	uxth	r2, r3
 800aebe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aec0:	801a      	strh	r2, [r3, #0]
 800aec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aec6:	2b3e      	cmp	r3, #62	@ 0x3e
 800aec8:	d921      	bls.n	800af0e <USB_EPStartXfer+0xc40>
 800aeca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aece:	095b      	lsrs	r3, r3, #5
 800aed0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800aed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aed8:	f003 031f 	and.w	r3, r3, #31
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d104      	bne.n	800aeea <USB_EPStartXfer+0xc1c>
 800aee0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800aee4:	3b01      	subs	r3, #1
 800aee6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800aeea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aeec:	881b      	ldrh	r3, [r3, #0]
 800aeee:	b29a      	uxth	r2, r3
 800aef0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800aef4:	b29b      	uxth	r3, r3
 800aef6:	029b      	lsls	r3, r3, #10
 800aef8:	b29b      	uxth	r3, r3
 800aefa:	4313      	orrs	r3, r2
 800aefc:	b29b      	uxth	r3, r3
 800aefe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af06:	b29a      	uxth	r2, r3
 800af08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af0a:	801a      	strh	r2, [r3, #0]
 800af0c:	e05c      	b.n	800afc8 <USB_EPStartXfer+0xcfa>
 800af0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af12:	2b00      	cmp	r3, #0
 800af14:	d10a      	bne.n	800af2c <USB_EPStartXfer+0xc5e>
 800af16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af18:	881b      	ldrh	r3, [r3, #0]
 800af1a:	b29b      	uxth	r3, r3
 800af1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af24:	b29a      	uxth	r2, r3
 800af26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af28:	801a      	strh	r2, [r3, #0]
 800af2a:	e04d      	b.n	800afc8 <USB_EPStartXfer+0xcfa>
 800af2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af30:	085b      	lsrs	r3, r3, #1
 800af32:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800af36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af3a:	f003 0301 	and.w	r3, r3, #1
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d004      	beq.n	800af4c <USB_EPStartXfer+0xc7e>
 800af42:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800af46:	3301      	adds	r3, #1
 800af48:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800af4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af4e:	881b      	ldrh	r3, [r3, #0]
 800af50:	b29a      	uxth	r2, r3
 800af52:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800af56:	b29b      	uxth	r3, r3
 800af58:	029b      	lsls	r3, r3, #10
 800af5a:	b29b      	uxth	r3, r3
 800af5c:	4313      	orrs	r3, r2
 800af5e:	b29a      	uxth	r2, r3
 800af60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af62:	801a      	strh	r2, [r3, #0]
 800af64:	e030      	b.n	800afc8 <USB_EPStartXfer+0xcfa>
 800af66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	785b      	ldrb	r3, [r3, #1]
 800af72:	2b01      	cmp	r3, #1
 800af74:	d128      	bne.n	800afc8 <USB_EPStartXfer+0xcfa>
 800af76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800af84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af92:	b29b      	uxth	r3, r3
 800af94:	461a      	mov	r2, r3
 800af96:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800af9a:	4413      	add	r3, r2
 800af9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800afa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	781b      	ldrb	r3, [r3, #0]
 800afac:	00da      	lsls	r2, r3, #3
 800afae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800afb2:	4413      	add	r3, r2
 800afb4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800afb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800afbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afc0:	b29a      	uxth	r2, r3
 800afc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800afc6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800afc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	891b      	ldrh	r3, [r3, #8]
 800afd4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800afd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	6959      	ldr	r1, [r3, #20]
 800afe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afe8:	b29b      	uxth	r3, r3
 800afea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800afee:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800aff2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800aff6:	6800      	ldr	r0, [r0, #0]
 800aff8:	f000 fe54 	bl	800bca4 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800affc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b000:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b004:	681a      	ldr	r2, [r3, #0]
 800b006:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b00a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	781b      	ldrb	r3, [r3, #0]
 800b012:	009b      	lsls	r3, r3, #2
 800b014:	4413      	add	r3, r2
 800b016:	881b      	ldrh	r3, [r3, #0]
 800b018:	b29b      	uxth	r3, r3
 800b01a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b01e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b022:	817b      	strh	r3, [r7, #10]
 800b024:	897b      	ldrh	r3, [r7, #10]
 800b026:	f083 0310 	eor.w	r3, r3, #16
 800b02a:	817b      	strh	r3, [r7, #10]
 800b02c:	897b      	ldrh	r3, [r7, #10]
 800b02e:	f083 0320 	eor.w	r3, r3, #32
 800b032:	817b      	strh	r3, [r7, #10]
 800b034:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b038:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b03c:	681a      	ldr	r2, [r3, #0]
 800b03e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b042:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	009b      	lsls	r3, r3, #2
 800b04c:	441a      	add	r2, r3
 800b04e:	897b      	ldrh	r3, [r7, #10]
 800b050:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b054:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b058:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b05c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b060:	b29b      	uxth	r3, r3
 800b062:	8013      	strh	r3, [r2, #0]
 800b064:	f000 bcde 	b.w	800ba24 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b068:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b06c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	7b1b      	ldrb	r3, [r3, #12]
 800b074:	2b00      	cmp	r3, #0
 800b076:	f040 80bb 	bne.w	800b1f0 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b07a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b07e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	699a      	ldr	r2, [r3, #24]
 800b086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b08a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	691b      	ldr	r3, [r3, #16]
 800b092:	429a      	cmp	r2, r3
 800b094:	d917      	bls.n	800b0c6 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800b096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b09a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	691b      	ldr	r3, [r3, #16]
 800b0a2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800b0a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	699a      	ldr	r2, [r3, #24]
 800b0b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0b6:	1ad2      	subs	r2, r2, r3
 800b0b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	619a      	str	r2, [r3, #24]
 800b0c4:	e00e      	b.n	800b0e4 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800b0c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	699b      	ldr	r3, [r3, #24]
 800b0d2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800b0d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b0e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b0f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b100:	b29b      	uxth	r3, r3
 800b102:	461a      	mov	r2, r3
 800b104:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b108:	4413      	add	r3, r2
 800b10a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b10e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b112:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	00da      	lsls	r2, r3, #3
 800b11c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b120:	4413      	add	r3, r2
 800b122:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b126:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b12a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b12e:	881b      	ldrh	r3, [r3, #0]
 800b130:	b29b      	uxth	r3, r3
 800b132:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b136:	b29a      	uxth	r2, r3
 800b138:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b13c:	801a      	strh	r2, [r3, #0]
 800b13e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b142:	2b3e      	cmp	r3, #62	@ 0x3e
 800b144:	d924      	bls.n	800b190 <USB_EPStartXfer+0xec2>
 800b146:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b14a:	095b      	lsrs	r3, r3, #5
 800b14c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b154:	f003 031f 	and.w	r3, r3, #31
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d104      	bne.n	800b166 <USB_EPStartXfer+0xe98>
 800b15c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b160:	3b01      	subs	r3, #1
 800b162:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b166:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b16a:	881b      	ldrh	r3, [r3, #0]
 800b16c:	b29a      	uxth	r2, r3
 800b16e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b172:	b29b      	uxth	r3, r3
 800b174:	029b      	lsls	r3, r3, #10
 800b176:	b29b      	uxth	r3, r3
 800b178:	4313      	orrs	r3, r2
 800b17a:	b29b      	uxth	r3, r3
 800b17c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b180:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b184:	b29a      	uxth	r2, r3
 800b186:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b18a:	801a      	strh	r2, [r3, #0]
 800b18c:	f000 bc10 	b.w	800b9b0 <USB_EPStartXfer+0x16e2>
 800b190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b194:	2b00      	cmp	r3, #0
 800b196:	d10c      	bne.n	800b1b2 <USB_EPStartXfer+0xee4>
 800b198:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b19c:	881b      	ldrh	r3, [r3, #0]
 800b19e:	b29b      	uxth	r3, r3
 800b1a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1a8:	b29a      	uxth	r2, r3
 800b1aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b1ae:	801a      	strh	r2, [r3, #0]
 800b1b0:	e3fe      	b.n	800b9b0 <USB_EPStartXfer+0x16e2>
 800b1b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1b6:	085b      	lsrs	r3, r3, #1
 800b1b8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b1bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1c0:	f003 0301 	and.w	r3, r3, #1
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d004      	beq.n	800b1d2 <USB_EPStartXfer+0xf04>
 800b1c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b1cc:	3301      	adds	r3, #1
 800b1ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b1d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b1d6:	881b      	ldrh	r3, [r3, #0]
 800b1d8:	b29a      	uxth	r2, r3
 800b1da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b1de:	b29b      	uxth	r3, r3
 800b1e0:	029b      	lsls	r3, r3, #10
 800b1e2:	b29b      	uxth	r3, r3
 800b1e4:	4313      	orrs	r3, r2
 800b1e6:	b29a      	uxth	r2, r3
 800b1e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b1ec:	801a      	strh	r2, [r3, #0]
 800b1ee:	e3df      	b.n	800b9b0 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b1f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	78db      	ldrb	r3, [r3, #3]
 800b1fc:	2b02      	cmp	r3, #2
 800b1fe:	f040 8218 	bne.w	800b632 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b202:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b206:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	785b      	ldrb	r3, [r3, #1]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	f040 809d 	bne.w	800b34e <USB_EPStartXfer+0x1080>
 800b214:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b218:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b222:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b226:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b230:	b29b      	uxth	r3, r3
 800b232:	461a      	mov	r2, r3
 800b234:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b238:	4413      	add	r3, r2
 800b23a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b23e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b242:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	781b      	ldrb	r3, [r3, #0]
 800b24a:	00da      	lsls	r2, r3, #3
 800b24c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b250:	4413      	add	r3, r2
 800b252:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b256:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b25a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b25e:	881b      	ldrh	r3, [r3, #0]
 800b260:	b29b      	uxth	r3, r3
 800b262:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b266:	b29a      	uxth	r2, r3
 800b268:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b26c:	801a      	strh	r2, [r3, #0]
 800b26e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b272:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	691b      	ldr	r3, [r3, #16]
 800b27a:	2b3e      	cmp	r3, #62	@ 0x3e
 800b27c:	d92b      	bls.n	800b2d6 <USB_EPStartXfer+0x1008>
 800b27e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b282:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	691b      	ldr	r3, [r3, #16]
 800b28a:	095b      	lsrs	r3, r3, #5
 800b28c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b290:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b294:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	691b      	ldr	r3, [r3, #16]
 800b29c:	f003 031f 	and.w	r3, r3, #31
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d104      	bne.n	800b2ae <USB_EPStartXfer+0xfe0>
 800b2a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2a8:	3b01      	subs	r3, #1
 800b2aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b2ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b2b2:	881b      	ldrh	r3, [r3, #0]
 800b2b4:	b29a      	uxth	r2, r3
 800b2b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2ba:	b29b      	uxth	r3, r3
 800b2bc:	029b      	lsls	r3, r3, #10
 800b2be:	b29b      	uxth	r3, r3
 800b2c0:	4313      	orrs	r3, r2
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2cc:	b29a      	uxth	r2, r3
 800b2ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b2d2:	801a      	strh	r2, [r3, #0]
 800b2d4:	e070      	b.n	800b3b8 <USB_EPStartXfer+0x10ea>
 800b2d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	691b      	ldr	r3, [r3, #16]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d10c      	bne.n	800b300 <USB_EPStartXfer+0x1032>
 800b2e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b2ea:	881b      	ldrh	r3, [r3, #0]
 800b2ec:	b29b      	uxth	r3, r3
 800b2ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2f6:	b29a      	uxth	r2, r3
 800b2f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b2fc:	801a      	strh	r2, [r3, #0]
 800b2fe:	e05b      	b.n	800b3b8 <USB_EPStartXfer+0x10ea>
 800b300:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b304:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	691b      	ldr	r3, [r3, #16]
 800b30c:	085b      	lsrs	r3, r3, #1
 800b30e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b312:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b316:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	691b      	ldr	r3, [r3, #16]
 800b31e:	f003 0301 	and.w	r3, r3, #1
 800b322:	2b00      	cmp	r3, #0
 800b324:	d004      	beq.n	800b330 <USB_EPStartXfer+0x1062>
 800b326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b32a:	3301      	adds	r3, #1
 800b32c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b330:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b334:	881b      	ldrh	r3, [r3, #0]
 800b336:	b29a      	uxth	r2, r3
 800b338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b33c:	b29b      	uxth	r3, r3
 800b33e:	029b      	lsls	r3, r3, #10
 800b340:	b29b      	uxth	r3, r3
 800b342:	4313      	orrs	r3, r2
 800b344:	b29a      	uxth	r2, r3
 800b346:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b34a:	801a      	strh	r2, [r3, #0]
 800b34c:	e034      	b.n	800b3b8 <USB_EPStartXfer+0x10ea>
 800b34e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b352:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	785b      	ldrb	r3, [r3, #1]
 800b35a:	2b01      	cmp	r3, #1
 800b35c:	d12c      	bne.n	800b3b8 <USB_EPStartXfer+0x10ea>
 800b35e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b362:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b36c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b370:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b37a:	b29b      	uxth	r3, r3
 800b37c:	461a      	mov	r2, r3
 800b37e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b382:	4413      	add	r3, r2
 800b384:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b388:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b38c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	781b      	ldrb	r3, [r3, #0]
 800b394:	00da      	lsls	r2, r3, #3
 800b396:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b39a:	4413      	add	r3, r2
 800b39c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b3a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b3a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	691b      	ldr	r3, [r3, #16]
 800b3b0:	b29a      	uxth	r2, r3
 800b3b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b3b6:	801a      	strh	r2, [r3, #0]
 800b3b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b3c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	785b      	ldrb	r3, [r3, #1]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	f040 809d 	bne.w	800b512 <USB_EPStartXfer+0x1244>
 800b3d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b3e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b3f4:	b29b      	uxth	r3, r3
 800b3f6:	461a      	mov	r2, r3
 800b3f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b3fc:	4413      	add	r3, r2
 800b3fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b402:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b406:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	781b      	ldrb	r3, [r3, #0]
 800b40e:	00da      	lsls	r2, r3, #3
 800b410:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b414:	4413      	add	r3, r2
 800b416:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b41a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b41e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b422:	881b      	ldrh	r3, [r3, #0]
 800b424:	b29b      	uxth	r3, r3
 800b426:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b42a:	b29a      	uxth	r2, r3
 800b42c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b430:	801a      	strh	r2, [r3, #0]
 800b432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b436:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	691b      	ldr	r3, [r3, #16]
 800b43e:	2b3e      	cmp	r3, #62	@ 0x3e
 800b440:	d92b      	bls.n	800b49a <USB_EPStartXfer+0x11cc>
 800b442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b446:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	691b      	ldr	r3, [r3, #16]
 800b44e:	095b      	lsrs	r3, r3, #5
 800b450:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b454:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b458:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	691b      	ldr	r3, [r3, #16]
 800b460:	f003 031f 	and.w	r3, r3, #31
 800b464:	2b00      	cmp	r3, #0
 800b466:	d104      	bne.n	800b472 <USB_EPStartXfer+0x11a4>
 800b468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b46c:	3b01      	subs	r3, #1
 800b46e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b472:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b476:	881b      	ldrh	r3, [r3, #0]
 800b478:	b29a      	uxth	r2, r3
 800b47a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b47e:	b29b      	uxth	r3, r3
 800b480:	029b      	lsls	r3, r3, #10
 800b482:	b29b      	uxth	r3, r3
 800b484:	4313      	orrs	r3, r2
 800b486:	b29b      	uxth	r3, r3
 800b488:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b48c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b490:	b29a      	uxth	r2, r3
 800b492:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b496:	801a      	strh	r2, [r3, #0]
 800b498:	e069      	b.n	800b56e <USB_EPStartXfer+0x12a0>
 800b49a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b49e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	691b      	ldr	r3, [r3, #16]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d10c      	bne.n	800b4c4 <USB_EPStartXfer+0x11f6>
 800b4aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b4ae:	881b      	ldrh	r3, [r3, #0]
 800b4b0:	b29b      	uxth	r3, r3
 800b4b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4ba:	b29a      	uxth	r2, r3
 800b4bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b4c0:	801a      	strh	r2, [r3, #0]
 800b4c2:	e054      	b.n	800b56e <USB_EPStartXfer+0x12a0>
 800b4c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	691b      	ldr	r3, [r3, #16]
 800b4d0:	085b      	lsrs	r3, r3, #1
 800b4d2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b4d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	691b      	ldr	r3, [r3, #16]
 800b4e2:	f003 0301 	and.w	r3, r3, #1
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d004      	beq.n	800b4f4 <USB_EPStartXfer+0x1226>
 800b4ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b4ee:	3301      	adds	r3, #1
 800b4f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b4f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b4f8:	881b      	ldrh	r3, [r3, #0]
 800b4fa:	b29a      	uxth	r2, r3
 800b4fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b500:	b29b      	uxth	r3, r3
 800b502:	029b      	lsls	r3, r3, #10
 800b504:	b29b      	uxth	r3, r3
 800b506:	4313      	orrs	r3, r2
 800b508:	b29a      	uxth	r2, r3
 800b50a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b50e:	801a      	strh	r2, [r3, #0]
 800b510:	e02d      	b.n	800b56e <USB_EPStartXfer+0x12a0>
 800b512:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b516:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	785b      	ldrb	r3, [r3, #1]
 800b51e:	2b01      	cmp	r3, #1
 800b520:	d125      	bne.n	800b56e <USB_EPStartXfer+0x12a0>
 800b522:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b526:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b530:	b29b      	uxth	r3, r3
 800b532:	461a      	mov	r2, r3
 800b534:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b538:	4413      	add	r3, r2
 800b53a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b53e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b542:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	781b      	ldrb	r3, [r3, #0]
 800b54a:	00da      	lsls	r2, r3, #3
 800b54c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b550:	4413      	add	r3, r2
 800b552:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b556:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b55a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b55e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	691b      	ldr	r3, [r3, #16]
 800b566:	b29a      	uxth	r2, r3
 800b568:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b56c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b56e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b572:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	69db      	ldr	r3, [r3, #28]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	f000 8218 	beq.w	800b9b0 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b584:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b588:	681a      	ldr	r2, [r3, #0]
 800b58a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b58e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	781b      	ldrb	r3, [r3, #0]
 800b596:	009b      	lsls	r3, r3, #2
 800b598:	4413      	add	r3, r2
 800b59a:	881b      	ldrh	r3, [r3, #0]
 800b59c:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b5a0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b5a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d005      	beq.n	800b5b8 <USB_EPStartXfer+0x12ea>
 800b5ac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b5b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d10d      	bne.n	800b5d4 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b5b8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b5bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	f040 81f5 	bne.w	800b9b0 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b5c6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b5ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	f040 81ee 	bne.w	800b9b0 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b5d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b5dc:	681a      	ldr	r2, [r3, #0]
 800b5de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	781b      	ldrb	r3, [r3, #0]
 800b5ea:	009b      	lsls	r3, r3, #2
 800b5ec:	4413      	add	r3, r2
 800b5ee:	881b      	ldrh	r3, [r3, #0]
 800b5f0:	b29b      	uxth	r3, r3
 800b5f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b5f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b5fa:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800b5fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b602:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b606:	681a      	ldr	r2, [r3, #0]
 800b608:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b60c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	781b      	ldrb	r3, [r3, #0]
 800b614:	009b      	lsls	r3, r3, #2
 800b616:	441a      	add	r2, r3
 800b618:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b61c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b620:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b624:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b628:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b62c:	b29b      	uxth	r3, r3
 800b62e:	8013      	strh	r3, [r2, #0]
 800b630:	e1be      	b.n	800b9b0 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b636:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	78db      	ldrb	r3, [r3, #3]
 800b63e:	2b01      	cmp	r3, #1
 800b640:	f040 81b4 	bne.w	800b9ac <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b648:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	699a      	ldr	r2, [r3, #24]
 800b650:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b654:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	691b      	ldr	r3, [r3, #16]
 800b65c:	429a      	cmp	r2, r3
 800b65e:	d917      	bls.n	800b690 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800b660:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b664:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	691b      	ldr	r3, [r3, #16]
 800b66c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800b670:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b674:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	699a      	ldr	r2, [r3, #24]
 800b67c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b680:	1ad2      	subs	r2, r2, r3
 800b682:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b686:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	619a      	str	r2, [r3, #24]
 800b68e:	e00e      	b.n	800b6ae <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800b690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b694:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	699b      	ldr	r3, [r3, #24]
 800b69c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800b6a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b6ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	785b      	ldrb	r3, [r3, #1]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	f040 8085 	bne.w	800b7ca <USB_EPStartXfer+0x14fc>
 800b6c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b6ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b6dc:	b29b      	uxth	r3, r3
 800b6de:	461a      	mov	r2, r3
 800b6e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b6e4:	4413      	add	r3, r2
 800b6e6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b6ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	781b      	ldrb	r3, [r3, #0]
 800b6f6:	00da      	lsls	r2, r3, #3
 800b6f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b6fc:	4413      	add	r3, r2
 800b6fe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b702:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b706:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b70a:	881b      	ldrh	r3, [r3, #0]
 800b70c:	b29b      	uxth	r3, r3
 800b70e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b712:	b29a      	uxth	r2, r3
 800b714:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b718:	801a      	strh	r2, [r3, #0]
 800b71a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b71e:	2b3e      	cmp	r3, #62	@ 0x3e
 800b720:	d923      	bls.n	800b76a <USB_EPStartXfer+0x149c>
 800b722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b726:	095b      	lsrs	r3, r3, #5
 800b728:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b72c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b730:	f003 031f 	and.w	r3, r3, #31
 800b734:	2b00      	cmp	r3, #0
 800b736:	d104      	bne.n	800b742 <USB_EPStartXfer+0x1474>
 800b738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b73c:	3b01      	subs	r3, #1
 800b73e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b742:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b746:	881b      	ldrh	r3, [r3, #0]
 800b748:	b29a      	uxth	r2, r3
 800b74a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b74e:	b29b      	uxth	r3, r3
 800b750:	029b      	lsls	r3, r3, #10
 800b752:	b29b      	uxth	r3, r3
 800b754:	4313      	orrs	r3, r2
 800b756:	b29b      	uxth	r3, r3
 800b758:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b75c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b760:	b29a      	uxth	r2, r3
 800b762:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b766:	801a      	strh	r2, [r3, #0]
 800b768:	e060      	b.n	800b82c <USB_EPStartXfer+0x155e>
 800b76a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d10c      	bne.n	800b78c <USB_EPStartXfer+0x14be>
 800b772:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b776:	881b      	ldrh	r3, [r3, #0]
 800b778:	b29b      	uxth	r3, r3
 800b77a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b77e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b782:	b29a      	uxth	r2, r3
 800b784:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b788:	801a      	strh	r2, [r3, #0]
 800b78a:	e04f      	b.n	800b82c <USB_EPStartXfer+0x155e>
 800b78c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b790:	085b      	lsrs	r3, r3, #1
 800b792:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b79a:	f003 0301 	and.w	r3, r3, #1
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d004      	beq.n	800b7ac <USB_EPStartXfer+0x14de>
 800b7a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b7a6:	3301      	adds	r3, #1
 800b7a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b7ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b7b0:	881b      	ldrh	r3, [r3, #0]
 800b7b2:	b29a      	uxth	r2, r3
 800b7b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b7b8:	b29b      	uxth	r3, r3
 800b7ba:	029b      	lsls	r3, r3, #10
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	b29a      	uxth	r2, r3
 800b7c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b7c6:	801a      	strh	r2, [r3, #0]
 800b7c8:	e030      	b.n	800b82c <USB_EPStartXfer+0x155e>
 800b7ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	785b      	ldrb	r3, [r3, #1]
 800b7d6:	2b01      	cmp	r3, #1
 800b7d8:	d128      	bne.n	800b82c <USB_EPStartXfer+0x155e>
 800b7da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b7e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b7f6:	b29b      	uxth	r3, r3
 800b7f8:	461a      	mov	r2, r3
 800b7fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b7fe:	4413      	add	r3, r2
 800b800:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b808:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	781b      	ldrb	r3, [r3, #0]
 800b810:	00da      	lsls	r2, r3, #3
 800b812:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b816:	4413      	add	r3, r2
 800b818:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b81c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b820:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b824:	b29a      	uxth	r2, r3
 800b826:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800b82a:	801a      	strh	r2, [r3, #0]
 800b82c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b830:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b83a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b83e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	785b      	ldrb	r3, [r3, #1]
 800b846:	2b00      	cmp	r3, #0
 800b848:	f040 8085 	bne.w	800b956 <USB_EPStartXfer+0x1688>
 800b84c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b850:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b85a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b85e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b868:	b29b      	uxth	r3, r3
 800b86a:	461a      	mov	r2, r3
 800b86c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b870:	4413      	add	r3, r2
 800b872:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b876:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b87a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	781b      	ldrb	r3, [r3, #0]
 800b882:	00da      	lsls	r2, r3, #3
 800b884:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b888:	4413      	add	r3, r2
 800b88a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b88e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b892:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b896:	881b      	ldrh	r3, [r3, #0]
 800b898:	b29b      	uxth	r3, r3
 800b89a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b89e:	b29a      	uxth	r2, r3
 800b8a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b8a4:	801a      	strh	r2, [r3, #0]
 800b8a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8aa:	2b3e      	cmp	r3, #62	@ 0x3e
 800b8ac:	d923      	bls.n	800b8f6 <USB_EPStartXfer+0x1628>
 800b8ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8b2:	095b      	lsrs	r3, r3, #5
 800b8b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b8b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8bc:	f003 031f 	and.w	r3, r3, #31
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d104      	bne.n	800b8ce <USB_EPStartXfer+0x1600>
 800b8c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b8c8:	3b01      	subs	r3, #1
 800b8ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b8ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b8d2:	881b      	ldrh	r3, [r3, #0]
 800b8d4:	b29a      	uxth	r2, r3
 800b8d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b8da:	b29b      	uxth	r3, r3
 800b8dc:	029b      	lsls	r3, r3, #10
 800b8de:	b29b      	uxth	r3, r3
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	b29b      	uxth	r3, r3
 800b8e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8ec:	b29a      	uxth	r2, r3
 800b8ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b8f2:	801a      	strh	r2, [r3, #0]
 800b8f4:	e05c      	b.n	800b9b0 <USB_EPStartXfer+0x16e2>
 800b8f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d10c      	bne.n	800b918 <USB_EPStartXfer+0x164a>
 800b8fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b902:	881b      	ldrh	r3, [r3, #0]
 800b904:	b29b      	uxth	r3, r3
 800b906:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b90a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b90e:	b29a      	uxth	r2, r3
 800b910:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b914:	801a      	strh	r2, [r3, #0]
 800b916:	e04b      	b.n	800b9b0 <USB_EPStartXfer+0x16e2>
 800b918:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b91c:	085b      	lsrs	r3, r3, #1
 800b91e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b922:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b926:	f003 0301 	and.w	r3, r3, #1
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d004      	beq.n	800b938 <USB_EPStartXfer+0x166a>
 800b92e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b932:	3301      	adds	r3, #1
 800b934:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b938:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b93c:	881b      	ldrh	r3, [r3, #0]
 800b93e:	b29a      	uxth	r2, r3
 800b940:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b944:	b29b      	uxth	r3, r3
 800b946:	029b      	lsls	r3, r3, #10
 800b948:	b29b      	uxth	r3, r3
 800b94a:	4313      	orrs	r3, r2
 800b94c:	b29a      	uxth	r2, r3
 800b94e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b952:	801a      	strh	r2, [r3, #0]
 800b954:	e02c      	b.n	800b9b0 <USB_EPStartXfer+0x16e2>
 800b956:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b95a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	785b      	ldrb	r3, [r3, #1]
 800b962:	2b01      	cmp	r3, #1
 800b964:	d124      	bne.n	800b9b0 <USB_EPStartXfer+0x16e2>
 800b966:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b96a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b974:	b29b      	uxth	r3, r3
 800b976:	461a      	mov	r2, r3
 800b978:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b97c:	4413      	add	r3, r2
 800b97e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b982:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b986:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	781b      	ldrb	r3, [r3, #0]
 800b98e:	00da      	lsls	r2, r3, #3
 800b990:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b994:	4413      	add	r3, r2
 800b996:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b99a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b99e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9a2:	b29a      	uxth	r2, r3
 800b9a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b9a8:	801a      	strh	r2, [r3, #0]
 800b9aa:	e001      	b.n	800b9b0 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	e03a      	b.n	800ba26 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b9b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b9b8:	681a      	ldr	r2, [r3, #0]
 800b9ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	781b      	ldrb	r3, [r3, #0]
 800b9c6:	009b      	lsls	r3, r3, #2
 800b9c8:	4413      	add	r3, r2
 800b9ca:	881b      	ldrh	r3, [r3, #0]
 800b9cc:	b29b      	uxth	r3, r3
 800b9ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b9d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b9d6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800b9da:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b9de:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b9e2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800b9e6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b9ea:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b9ee:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800b9f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b9fa:	681a      	ldr	r2, [r3, #0]
 800b9fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	009b      	lsls	r3, r3, #2
 800ba0a:	441a      	add	r2, r3
 800ba0c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ba10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ba14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ba18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ba1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba20:	b29b      	uxth	r3, r3
 800ba22:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ba24:	2300      	movs	r3, #0
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}

0800ba30 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ba30:	b480      	push	{r7}
 800ba32:	b085      	sub	sp, #20
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
 800ba38:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	785b      	ldrb	r3, [r3, #1]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d020      	beq.n	800ba84 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ba42:	687a      	ldr	r2, [r7, #4]
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	781b      	ldrb	r3, [r3, #0]
 800ba48:	009b      	lsls	r3, r3, #2
 800ba4a:	4413      	add	r3, r2
 800ba4c:	881b      	ldrh	r3, [r3, #0]
 800ba4e:	b29b      	uxth	r3, r3
 800ba50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ba54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba58:	81bb      	strh	r3, [r7, #12]
 800ba5a:	89bb      	ldrh	r3, [r7, #12]
 800ba5c:	f083 0310 	eor.w	r3, r3, #16
 800ba60:	81bb      	strh	r3, [r7, #12]
 800ba62:	687a      	ldr	r2, [r7, #4]
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	781b      	ldrb	r3, [r3, #0]
 800ba68:	009b      	lsls	r3, r3, #2
 800ba6a:	441a      	add	r2, r3
 800ba6c:	89bb      	ldrh	r3, [r7, #12]
 800ba6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ba72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ba76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ba7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba7e:	b29b      	uxth	r3, r3
 800ba80:	8013      	strh	r3, [r2, #0]
 800ba82:	e01f      	b.n	800bac4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ba84:	687a      	ldr	r2, [r7, #4]
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	781b      	ldrb	r3, [r3, #0]
 800ba8a:	009b      	lsls	r3, r3, #2
 800ba8c:	4413      	add	r3, r2
 800ba8e:	881b      	ldrh	r3, [r3, #0]
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ba96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba9a:	81fb      	strh	r3, [r7, #14]
 800ba9c:	89fb      	ldrh	r3, [r7, #14]
 800ba9e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800baa2:	81fb      	strh	r3, [r7, #14]
 800baa4:	687a      	ldr	r2, [r7, #4]
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	781b      	ldrb	r3, [r3, #0]
 800baaa:	009b      	lsls	r3, r3, #2
 800baac:	441a      	add	r2, r3
 800baae:	89fb      	ldrh	r3, [r7, #14]
 800bab0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bab4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bab8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800babc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bac0:	b29b      	uxth	r3, r3
 800bac2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800bac4:	2300      	movs	r3, #0
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3714      	adds	r7, #20
 800baca:	46bd      	mov	sp, r7
 800bacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad0:	4770      	bx	lr

0800bad2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bad2:	b480      	push	{r7}
 800bad4:	b087      	sub	sp, #28
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
 800bada:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	7b1b      	ldrb	r3, [r3, #12]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	f040 809d 	bne.w	800bc20 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	785b      	ldrb	r3, [r3, #1]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d04c      	beq.n	800bb88 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800baee:	687a      	ldr	r2, [r7, #4]
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	781b      	ldrb	r3, [r3, #0]
 800baf4:	009b      	lsls	r3, r3, #2
 800baf6:	4413      	add	r3, r2
 800baf8:	881b      	ldrh	r3, [r3, #0]
 800bafa:	823b      	strh	r3, [r7, #16]
 800bafc:	8a3b      	ldrh	r3, [r7, #16]
 800bafe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d01b      	beq.n	800bb3e <USB_EPClearStall+0x6c>
 800bb06:	687a      	ldr	r2, [r7, #4]
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	781b      	ldrb	r3, [r3, #0]
 800bb0c:	009b      	lsls	r3, r3, #2
 800bb0e:	4413      	add	r3, r2
 800bb10:	881b      	ldrh	r3, [r3, #0]
 800bb12:	b29b      	uxth	r3, r3
 800bb14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bb18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb1c:	81fb      	strh	r3, [r7, #14]
 800bb1e:	687a      	ldr	r2, [r7, #4]
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	781b      	ldrb	r3, [r3, #0]
 800bb24:	009b      	lsls	r3, r3, #2
 800bb26:	441a      	add	r2, r3
 800bb28:	89fb      	ldrh	r3, [r7, #14]
 800bb2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bb2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bb32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bb36:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bb3a:	b29b      	uxth	r3, r3
 800bb3c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	78db      	ldrb	r3, [r3, #3]
 800bb42:	2b01      	cmp	r3, #1
 800bb44:	d06c      	beq.n	800bc20 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bb46:	687a      	ldr	r2, [r7, #4]
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	781b      	ldrb	r3, [r3, #0]
 800bb4c:	009b      	lsls	r3, r3, #2
 800bb4e:	4413      	add	r3, r2
 800bb50:	881b      	ldrh	r3, [r3, #0]
 800bb52:	b29b      	uxth	r3, r3
 800bb54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bb58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bb5c:	81bb      	strh	r3, [r7, #12]
 800bb5e:	89bb      	ldrh	r3, [r7, #12]
 800bb60:	f083 0320 	eor.w	r3, r3, #32
 800bb64:	81bb      	strh	r3, [r7, #12]
 800bb66:	687a      	ldr	r2, [r7, #4]
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	781b      	ldrb	r3, [r3, #0]
 800bb6c:	009b      	lsls	r3, r3, #2
 800bb6e:	441a      	add	r2, r3
 800bb70:	89bb      	ldrh	r3, [r7, #12]
 800bb72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bb76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bb7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bb7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb82:	b29b      	uxth	r3, r3
 800bb84:	8013      	strh	r3, [r2, #0]
 800bb86:	e04b      	b.n	800bc20 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bb88:	687a      	ldr	r2, [r7, #4]
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	781b      	ldrb	r3, [r3, #0]
 800bb8e:	009b      	lsls	r3, r3, #2
 800bb90:	4413      	add	r3, r2
 800bb92:	881b      	ldrh	r3, [r3, #0]
 800bb94:	82fb      	strh	r3, [r7, #22]
 800bb96:	8afb      	ldrh	r3, [r7, #22]
 800bb98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d01b      	beq.n	800bbd8 <USB_EPClearStall+0x106>
 800bba0:	687a      	ldr	r2, [r7, #4]
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	781b      	ldrb	r3, [r3, #0]
 800bba6:	009b      	lsls	r3, r3, #2
 800bba8:	4413      	add	r3, r2
 800bbaa:	881b      	ldrh	r3, [r3, #0]
 800bbac:	b29b      	uxth	r3, r3
 800bbae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bbb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bbb6:	82bb      	strh	r3, [r7, #20]
 800bbb8:	687a      	ldr	r2, [r7, #4]
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	781b      	ldrb	r3, [r3, #0]
 800bbbe:	009b      	lsls	r3, r3, #2
 800bbc0:	441a      	add	r2, r3
 800bbc2:	8abb      	ldrh	r3, [r7, #20]
 800bbc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bbc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bbcc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bbd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbd4:	b29b      	uxth	r3, r3
 800bbd6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bbd8:	687a      	ldr	r2, [r7, #4]
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	009b      	lsls	r3, r3, #2
 800bbe0:	4413      	add	r3, r2
 800bbe2:	881b      	ldrh	r3, [r3, #0]
 800bbe4:	b29b      	uxth	r3, r3
 800bbe6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bbea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bbee:	827b      	strh	r3, [r7, #18]
 800bbf0:	8a7b      	ldrh	r3, [r7, #18]
 800bbf2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800bbf6:	827b      	strh	r3, [r7, #18]
 800bbf8:	8a7b      	ldrh	r3, [r7, #18]
 800bbfa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800bbfe:	827b      	strh	r3, [r7, #18]
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	781b      	ldrb	r3, [r3, #0]
 800bc06:	009b      	lsls	r3, r3, #2
 800bc08:	441a      	add	r2, r3
 800bc0a:	8a7b      	ldrh	r3, [r7, #18]
 800bc0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bc10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bc14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc1c:	b29b      	uxth	r3, r3
 800bc1e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800bc20:	2300      	movs	r3, #0
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	371c      	adds	r7, #28
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr

0800bc2e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800bc2e:	b480      	push	{r7}
 800bc30:	b083      	sub	sp, #12
 800bc32:	af00      	add	r7, sp, #0
 800bc34:	6078      	str	r0, [r7, #4]
 800bc36:	460b      	mov	r3, r1
 800bc38:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800bc3a:	78fb      	ldrb	r3, [r7, #3]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d103      	bne.n	800bc48 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2280      	movs	r2, #128	@ 0x80
 800bc44:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800bc48:	2300      	movs	r3, #0
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	370c      	adds	r7, #12
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc54:	4770      	bx	lr

0800bc56 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800bc56:	b480      	push	{r7}
 800bc58:	b083      	sub	sp, #12
 800bc5a:	af00      	add	r7, sp, #0
 800bc5c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bc64:	b29b      	uxth	r3, r3
 800bc66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc6e:	b29a      	uxth	r2, r3
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800bc76:	2300      	movs	r3, #0
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	370c      	adds	r7, #12
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr

0800bc84 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b085      	sub	sp, #20
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800bc92:	b29b      	uxth	r3, r3
 800bc94:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800bc96:	68fb      	ldr	r3, [r7, #12]
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3714      	adds	r7, #20
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr

0800bca4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b08b      	sub	sp, #44	@ 0x2c
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	60f8      	str	r0, [r7, #12]
 800bcac:	60b9      	str	r1, [r7, #8]
 800bcae:	4611      	mov	r1, r2
 800bcb0:	461a      	mov	r2, r3
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	80fb      	strh	r3, [r7, #6]
 800bcb6:	4613      	mov	r3, r2
 800bcb8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bcba:	88bb      	ldrh	r3, [r7, #4]
 800bcbc:	3301      	adds	r3, #1
 800bcbe:	085b      	lsrs	r3, r3, #1
 800bcc0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bcca:	88fa      	ldrh	r2, [r7, #6]
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	4413      	add	r3, r2
 800bcd0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bcd4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800bcd6:	69bb      	ldr	r3, [r7, #24]
 800bcd8:	627b      	str	r3, [r7, #36]	@ 0x24
 800bcda:	e01b      	b.n	800bd14 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800bcdc:	69fb      	ldr	r3, [r7, #28]
 800bcde:	781b      	ldrb	r3, [r3, #0]
 800bce0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800bce2:	69fb      	ldr	r3, [r7, #28]
 800bce4:	3301      	adds	r3, #1
 800bce6:	781b      	ldrb	r3, [r3, #0]
 800bce8:	021b      	lsls	r3, r3, #8
 800bcea:	b21a      	sxth	r2, r3
 800bcec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bcf0:	4313      	orrs	r3, r2
 800bcf2:	b21b      	sxth	r3, r3
 800bcf4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800bcf6:	6a3b      	ldr	r3, [r7, #32]
 800bcf8:	8a7a      	ldrh	r2, [r7, #18]
 800bcfa:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800bcfc:	6a3b      	ldr	r3, [r7, #32]
 800bcfe:	3302      	adds	r3, #2
 800bd00:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800bd02:	69fb      	ldr	r3, [r7, #28]
 800bd04:	3301      	adds	r3, #1
 800bd06:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800bd08:	69fb      	ldr	r3, [r7, #28]
 800bd0a:	3301      	adds	r3, #1
 800bd0c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800bd0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd10:	3b01      	subs	r3, #1
 800bd12:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d1e0      	bne.n	800bcdc <USB_WritePMA+0x38>
  }
}
 800bd1a:	bf00      	nop
 800bd1c:	bf00      	nop
 800bd1e:	372c      	adds	r7, #44	@ 0x2c
 800bd20:	46bd      	mov	sp, r7
 800bd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd26:	4770      	bx	lr

0800bd28 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bd28:	b480      	push	{r7}
 800bd2a:	b08b      	sub	sp, #44	@ 0x2c
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	60f8      	str	r0, [r7, #12]
 800bd30:	60b9      	str	r1, [r7, #8]
 800bd32:	4611      	mov	r1, r2
 800bd34:	461a      	mov	r2, r3
 800bd36:	460b      	mov	r3, r1
 800bd38:	80fb      	strh	r3, [r7, #6]
 800bd3a:	4613      	mov	r3, r2
 800bd3c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800bd3e:	88bb      	ldrh	r3, [r7, #4]
 800bd40:	085b      	lsrs	r3, r3, #1
 800bd42:	b29b      	uxth	r3, r3
 800bd44:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bd4e:	88fa      	ldrh	r2, [r7, #6]
 800bd50:	697b      	ldr	r3, [r7, #20]
 800bd52:	4413      	add	r3, r2
 800bd54:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bd58:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800bd5a:	69bb      	ldr	r3, [r7, #24]
 800bd5c:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd5e:	e018      	b.n	800bd92 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800bd60:	6a3b      	ldr	r3, [r7, #32]
 800bd62:	881b      	ldrh	r3, [r3, #0]
 800bd64:	b29b      	uxth	r3, r3
 800bd66:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800bd68:	6a3b      	ldr	r3, [r7, #32]
 800bd6a:	3302      	adds	r3, #2
 800bd6c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800bd6e:	693b      	ldr	r3, [r7, #16]
 800bd70:	b2da      	uxtb	r2, r3
 800bd72:	69fb      	ldr	r3, [r7, #28]
 800bd74:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bd76:	69fb      	ldr	r3, [r7, #28]
 800bd78:	3301      	adds	r3, #1
 800bd7a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	0a1b      	lsrs	r3, r3, #8
 800bd80:	b2da      	uxtb	r2, r3
 800bd82:	69fb      	ldr	r3, [r7, #28]
 800bd84:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bd86:	69fb      	ldr	r3, [r7, #28]
 800bd88:	3301      	adds	r3, #1
 800bd8a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800bd8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd8e:	3b01      	subs	r3, #1
 800bd90:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d1e3      	bne.n	800bd60 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800bd98:	88bb      	ldrh	r3, [r7, #4]
 800bd9a:	f003 0301 	and.w	r3, r3, #1
 800bd9e:	b29b      	uxth	r3, r3
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d007      	beq.n	800bdb4 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800bda4:	6a3b      	ldr	r3, [r7, #32]
 800bda6:	881b      	ldrh	r3, [r3, #0]
 800bda8:	b29b      	uxth	r3, r3
 800bdaa:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	b2da      	uxtb	r2, r3
 800bdb0:	69fb      	ldr	r3, [r7, #28]
 800bdb2:	701a      	strb	r2, [r3, #0]
  }
}
 800bdb4:	bf00      	nop
 800bdb6:	372c      	adds	r7, #44	@ 0x2c
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbe:	4770      	bx	lr

0800bdc0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b084      	sub	sp, #16
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
 800bdc8:	460b      	mov	r3, r1
 800bdca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bdcc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800bdd0:	f002 fc74 	bl	800e6bc <USBD_static_malloc>
 800bdd4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d109      	bne.n	800bdf0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	32b0      	adds	r2, #176	@ 0xb0
 800bde6:	2100      	movs	r1, #0
 800bde8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bdec:	2302      	movs	r3, #2
 800bdee:	e0d4      	b.n	800bf9a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800bdf0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800bdf4:	2100      	movs	r1, #0
 800bdf6:	68f8      	ldr	r0, [r7, #12]
 800bdf8:	f003 fa21 	bl	800f23e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	32b0      	adds	r2, #176	@ 0xb0
 800be06:	68f9      	ldr	r1, [r7, #12]
 800be08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	32b0      	adds	r2, #176	@ 0xb0
 800be16:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	7c1b      	ldrb	r3, [r3, #16]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d138      	bne.n	800be9a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800be28:	4b5e      	ldr	r3, [pc, #376]	@ (800bfa4 <USBD_CDC_Init+0x1e4>)
 800be2a:	7819      	ldrb	r1, [r3, #0]
 800be2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800be30:	2202      	movs	r2, #2
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f002 fae9 	bl	800e40a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800be38:	4b5a      	ldr	r3, [pc, #360]	@ (800bfa4 <USBD_CDC_Init+0x1e4>)
 800be3a:	781b      	ldrb	r3, [r3, #0]
 800be3c:	f003 020f 	and.w	r2, r3, #15
 800be40:	6879      	ldr	r1, [r7, #4]
 800be42:	4613      	mov	r3, r2
 800be44:	009b      	lsls	r3, r3, #2
 800be46:	4413      	add	r3, r2
 800be48:	009b      	lsls	r3, r3, #2
 800be4a:	440b      	add	r3, r1
 800be4c:	3324      	adds	r3, #36	@ 0x24
 800be4e:	2201      	movs	r2, #1
 800be50:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800be52:	4b55      	ldr	r3, [pc, #340]	@ (800bfa8 <USBD_CDC_Init+0x1e8>)
 800be54:	7819      	ldrb	r1, [r3, #0]
 800be56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800be5a:	2202      	movs	r2, #2
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f002 fad4 	bl	800e40a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800be62:	4b51      	ldr	r3, [pc, #324]	@ (800bfa8 <USBD_CDC_Init+0x1e8>)
 800be64:	781b      	ldrb	r3, [r3, #0]
 800be66:	f003 020f 	and.w	r2, r3, #15
 800be6a:	6879      	ldr	r1, [r7, #4]
 800be6c:	4613      	mov	r3, r2
 800be6e:	009b      	lsls	r3, r3, #2
 800be70:	4413      	add	r3, r2
 800be72:	009b      	lsls	r3, r3, #2
 800be74:	440b      	add	r3, r1
 800be76:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800be7a:	2201      	movs	r2, #1
 800be7c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800be7e:	4b4b      	ldr	r3, [pc, #300]	@ (800bfac <USBD_CDC_Init+0x1ec>)
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	f003 020f 	and.w	r2, r3, #15
 800be86:	6879      	ldr	r1, [r7, #4]
 800be88:	4613      	mov	r3, r2
 800be8a:	009b      	lsls	r3, r3, #2
 800be8c:	4413      	add	r3, r2
 800be8e:	009b      	lsls	r3, r3, #2
 800be90:	440b      	add	r3, r1
 800be92:	3326      	adds	r3, #38	@ 0x26
 800be94:	2210      	movs	r2, #16
 800be96:	801a      	strh	r2, [r3, #0]
 800be98:	e035      	b.n	800bf06 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800be9a:	4b42      	ldr	r3, [pc, #264]	@ (800bfa4 <USBD_CDC_Init+0x1e4>)
 800be9c:	7819      	ldrb	r1, [r3, #0]
 800be9e:	2340      	movs	r3, #64	@ 0x40
 800bea0:	2202      	movs	r2, #2
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f002 fab1 	bl	800e40a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bea8:	4b3e      	ldr	r3, [pc, #248]	@ (800bfa4 <USBD_CDC_Init+0x1e4>)
 800beaa:	781b      	ldrb	r3, [r3, #0]
 800beac:	f003 020f 	and.w	r2, r3, #15
 800beb0:	6879      	ldr	r1, [r7, #4]
 800beb2:	4613      	mov	r3, r2
 800beb4:	009b      	lsls	r3, r3, #2
 800beb6:	4413      	add	r3, r2
 800beb8:	009b      	lsls	r3, r3, #2
 800beba:	440b      	add	r3, r1
 800bebc:	3324      	adds	r3, #36	@ 0x24
 800bebe:	2201      	movs	r2, #1
 800bec0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bec2:	4b39      	ldr	r3, [pc, #228]	@ (800bfa8 <USBD_CDC_Init+0x1e8>)
 800bec4:	7819      	ldrb	r1, [r3, #0]
 800bec6:	2340      	movs	r3, #64	@ 0x40
 800bec8:	2202      	movs	r2, #2
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f002 fa9d 	bl	800e40a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bed0:	4b35      	ldr	r3, [pc, #212]	@ (800bfa8 <USBD_CDC_Init+0x1e8>)
 800bed2:	781b      	ldrb	r3, [r3, #0]
 800bed4:	f003 020f 	and.w	r2, r3, #15
 800bed8:	6879      	ldr	r1, [r7, #4]
 800beda:	4613      	mov	r3, r2
 800bedc:	009b      	lsls	r3, r3, #2
 800bede:	4413      	add	r3, r2
 800bee0:	009b      	lsls	r3, r3, #2
 800bee2:	440b      	add	r3, r1
 800bee4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bee8:	2201      	movs	r2, #1
 800beea:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800beec:	4b2f      	ldr	r3, [pc, #188]	@ (800bfac <USBD_CDC_Init+0x1ec>)
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	f003 020f 	and.w	r2, r3, #15
 800bef4:	6879      	ldr	r1, [r7, #4]
 800bef6:	4613      	mov	r3, r2
 800bef8:	009b      	lsls	r3, r3, #2
 800befa:	4413      	add	r3, r2
 800befc:	009b      	lsls	r3, r3, #2
 800befe:	440b      	add	r3, r1
 800bf00:	3326      	adds	r3, #38	@ 0x26
 800bf02:	2210      	movs	r2, #16
 800bf04:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bf06:	4b29      	ldr	r3, [pc, #164]	@ (800bfac <USBD_CDC_Init+0x1ec>)
 800bf08:	7819      	ldrb	r1, [r3, #0]
 800bf0a:	2308      	movs	r3, #8
 800bf0c:	2203      	movs	r2, #3
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f002 fa7b 	bl	800e40a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bf14:	4b25      	ldr	r3, [pc, #148]	@ (800bfac <USBD_CDC_Init+0x1ec>)
 800bf16:	781b      	ldrb	r3, [r3, #0]
 800bf18:	f003 020f 	and.w	r2, r3, #15
 800bf1c:	6879      	ldr	r1, [r7, #4]
 800bf1e:	4613      	mov	r3, r2
 800bf20:	009b      	lsls	r3, r3, #2
 800bf22:	4413      	add	r3, r2
 800bf24:	009b      	lsls	r3, r3, #2
 800bf26:	440b      	add	r3, r1
 800bf28:	3324      	adds	r3, #36	@ 0x24
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	2200      	movs	r2, #0
 800bf32:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bf3c:	687a      	ldr	r2, [r7, #4]
 800bf3e:	33b0      	adds	r3, #176	@ 0xb0
 800bf40:	009b      	lsls	r3, r3, #2
 800bf42:	4413      	add	r3, r2
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	2200      	movs	r2, #0
 800bf56:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d101      	bne.n	800bf68 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800bf64:	2302      	movs	r3, #2
 800bf66:	e018      	b.n	800bf9a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	7c1b      	ldrb	r3, [r3, #16]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d10a      	bne.n	800bf86 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bf70:	4b0d      	ldr	r3, [pc, #52]	@ (800bfa8 <USBD_CDC_Init+0x1e8>)
 800bf72:	7819      	ldrb	r1, [r3, #0]
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bf7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f002 fb32 	bl	800e5e8 <USBD_LL_PrepareReceive>
 800bf84:	e008      	b.n	800bf98 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bf86:	4b08      	ldr	r3, [pc, #32]	@ (800bfa8 <USBD_CDC_Init+0x1e8>)
 800bf88:	7819      	ldrb	r1, [r3, #0]
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bf90:	2340      	movs	r3, #64	@ 0x40
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	f002 fb28 	bl	800e5e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bf98:	2300      	movs	r3, #0
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3710      	adds	r7, #16
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}
 800bfa2:	bf00      	nop
 800bfa4:	200000b7 	.word	0x200000b7
 800bfa8:	200000b8 	.word	0x200000b8
 800bfac:	200000b9 	.word	0x200000b9

0800bfb0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b082      	sub	sp, #8
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
 800bfb8:	460b      	mov	r3, r1
 800bfba:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800bfbc:	4b3a      	ldr	r3, [pc, #232]	@ (800c0a8 <USBD_CDC_DeInit+0xf8>)
 800bfbe:	781b      	ldrb	r3, [r3, #0]
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f002 fa47 	bl	800e456 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800bfc8:	4b37      	ldr	r3, [pc, #220]	@ (800c0a8 <USBD_CDC_DeInit+0xf8>)
 800bfca:	781b      	ldrb	r3, [r3, #0]
 800bfcc:	f003 020f 	and.w	r2, r3, #15
 800bfd0:	6879      	ldr	r1, [r7, #4]
 800bfd2:	4613      	mov	r3, r2
 800bfd4:	009b      	lsls	r3, r3, #2
 800bfd6:	4413      	add	r3, r2
 800bfd8:	009b      	lsls	r3, r3, #2
 800bfda:	440b      	add	r3, r1
 800bfdc:	3324      	adds	r3, #36	@ 0x24
 800bfde:	2200      	movs	r2, #0
 800bfe0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800bfe2:	4b32      	ldr	r3, [pc, #200]	@ (800c0ac <USBD_CDC_DeInit+0xfc>)
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	4619      	mov	r1, r3
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f002 fa34 	bl	800e456 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800bfee:	4b2f      	ldr	r3, [pc, #188]	@ (800c0ac <USBD_CDC_DeInit+0xfc>)
 800bff0:	781b      	ldrb	r3, [r3, #0]
 800bff2:	f003 020f 	and.w	r2, r3, #15
 800bff6:	6879      	ldr	r1, [r7, #4]
 800bff8:	4613      	mov	r3, r2
 800bffa:	009b      	lsls	r3, r3, #2
 800bffc:	4413      	add	r3, r2
 800bffe:	009b      	lsls	r3, r3, #2
 800c000:	440b      	add	r3, r1
 800c002:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c006:	2200      	movs	r2, #0
 800c008:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c00a:	4b29      	ldr	r3, [pc, #164]	@ (800c0b0 <USBD_CDC_DeInit+0x100>)
 800c00c:	781b      	ldrb	r3, [r3, #0]
 800c00e:	4619      	mov	r1, r3
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f002 fa20 	bl	800e456 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c016:	4b26      	ldr	r3, [pc, #152]	@ (800c0b0 <USBD_CDC_DeInit+0x100>)
 800c018:	781b      	ldrb	r3, [r3, #0]
 800c01a:	f003 020f 	and.w	r2, r3, #15
 800c01e:	6879      	ldr	r1, [r7, #4]
 800c020:	4613      	mov	r3, r2
 800c022:	009b      	lsls	r3, r3, #2
 800c024:	4413      	add	r3, r2
 800c026:	009b      	lsls	r3, r3, #2
 800c028:	440b      	add	r3, r1
 800c02a:	3324      	adds	r3, #36	@ 0x24
 800c02c:	2200      	movs	r2, #0
 800c02e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c030:	4b1f      	ldr	r3, [pc, #124]	@ (800c0b0 <USBD_CDC_DeInit+0x100>)
 800c032:	781b      	ldrb	r3, [r3, #0]
 800c034:	f003 020f 	and.w	r2, r3, #15
 800c038:	6879      	ldr	r1, [r7, #4]
 800c03a:	4613      	mov	r3, r2
 800c03c:	009b      	lsls	r3, r3, #2
 800c03e:	4413      	add	r3, r2
 800c040:	009b      	lsls	r3, r3, #2
 800c042:	440b      	add	r3, r1
 800c044:	3326      	adds	r3, #38	@ 0x26
 800c046:	2200      	movs	r2, #0
 800c048:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	32b0      	adds	r2, #176	@ 0xb0
 800c054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d01f      	beq.n	800c09c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c062:	687a      	ldr	r2, [r7, #4]
 800c064:	33b0      	adds	r3, #176	@ 0xb0
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	4413      	add	r3, r2
 800c06a:	685b      	ldr	r3, [r3, #4]
 800c06c:	685b      	ldr	r3, [r3, #4]
 800c06e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	32b0      	adds	r2, #176	@ 0xb0
 800c07a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c07e:	4618      	mov	r0, r3
 800c080:	f002 fb2a 	bl	800e6d8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	32b0      	adds	r2, #176	@ 0xb0
 800c08e:	2100      	movs	r1, #0
 800c090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2200      	movs	r2, #0
 800c098:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c09c:	2300      	movs	r3, #0
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3708      	adds	r7, #8
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}
 800c0a6:	bf00      	nop
 800c0a8:	200000b7 	.word	0x200000b7
 800c0ac:	200000b8 	.word	0x200000b8
 800c0b0:	200000b9 	.word	0x200000b9

0800c0b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b086      	sub	sp, #24
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
 800c0bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	32b0      	adds	r2, #176	@ 0xb0
 800c0c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0cc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d101      	bne.n	800c0e4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c0e0:	2303      	movs	r3, #3
 800c0e2:	e0bf      	b.n	800c264 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	781b      	ldrb	r3, [r3, #0]
 800c0e8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d050      	beq.n	800c192 <USBD_CDC_Setup+0xde>
 800c0f0:	2b20      	cmp	r3, #32
 800c0f2:	f040 80af 	bne.w	800c254 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	88db      	ldrh	r3, [r3, #6]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d03a      	beq.n	800c174 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	781b      	ldrb	r3, [r3, #0]
 800c102:	b25b      	sxtb	r3, r3
 800c104:	2b00      	cmp	r3, #0
 800c106:	da1b      	bge.n	800c140 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c10e:	687a      	ldr	r2, [r7, #4]
 800c110:	33b0      	adds	r3, #176	@ 0xb0
 800c112:	009b      	lsls	r3, r3, #2
 800c114:	4413      	add	r3, r2
 800c116:	685b      	ldr	r3, [r3, #4]
 800c118:	689b      	ldr	r3, [r3, #8]
 800c11a:	683a      	ldr	r2, [r7, #0]
 800c11c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c11e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c120:	683a      	ldr	r2, [r7, #0]
 800c122:	88d2      	ldrh	r2, [r2, #6]
 800c124:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	88db      	ldrh	r3, [r3, #6]
 800c12a:	2b07      	cmp	r3, #7
 800c12c:	bf28      	it	cs
 800c12e:	2307      	movcs	r3, #7
 800c130:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	89fa      	ldrh	r2, [r7, #14]
 800c136:	4619      	mov	r1, r3
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f001 fd47 	bl	800dbcc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c13e:	e090      	b.n	800c262 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	785a      	ldrb	r2, [r3, #1]
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	88db      	ldrh	r3, [r3, #6]
 800c14e:	2b3f      	cmp	r3, #63	@ 0x3f
 800c150:	d803      	bhi.n	800c15a <USBD_CDC_Setup+0xa6>
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	88db      	ldrh	r3, [r3, #6]
 800c156:	b2da      	uxtb	r2, r3
 800c158:	e000      	b.n	800c15c <USBD_CDC_Setup+0xa8>
 800c15a:	2240      	movs	r2, #64	@ 0x40
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c162:	6939      	ldr	r1, [r7, #16]
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800c16a:	461a      	mov	r2, r3
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f001 fd59 	bl	800dc24 <USBD_CtlPrepareRx>
      break;
 800c172:	e076      	b.n	800c262 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c17a:	687a      	ldr	r2, [r7, #4]
 800c17c:	33b0      	adds	r3, #176	@ 0xb0
 800c17e:	009b      	lsls	r3, r3, #2
 800c180:	4413      	add	r3, r2
 800c182:	685b      	ldr	r3, [r3, #4]
 800c184:	689b      	ldr	r3, [r3, #8]
 800c186:	683a      	ldr	r2, [r7, #0]
 800c188:	7850      	ldrb	r0, [r2, #1]
 800c18a:	2200      	movs	r2, #0
 800c18c:	6839      	ldr	r1, [r7, #0]
 800c18e:	4798      	blx	r3
      break;
 800c190:	e067      	b.n	800c262 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	785b      	ldrb	r3, [r3, #1]
 800c196:	2b0b      	cmp	r3, #11
 800c198:	d851      	bhi.n	800c23e <USBD_CDC_Setup+0x18a>
 800c19a:	a201      	add	r2, pc, #4	@ (adr r2, 800c1a0 <USBD_CDC_Setup+0xec>)
 800c19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1a0:	0800c1d1 	.word	0x0800c1d1
 800c1a4:	0800c24d 	.word	0x0800c24d
 800c1a8:	0800c23f 	.word	0x0800c23f
 800c1ac:	0800c23f 	.word	0x0800c23f
 800c1b0:	0800c23f 	.word	0x0800c23f
 800c1b4:	0800c23f 	.word	0x0800c23f
 800c1b8:	0800c23f 	.word	0x0800c23f
 800c1bc:	0800c23f 	.word	0x0800c23f
 800c1c0:	0800c23f 	.word	0x0800c23f
 800c1c4:	0800c23f 	.word	0x0800c23f
 800c1c8:	0800c1fb 	.word	0x0800c1fb
 800c1cc:	0800c225 	.word	0x0800c225
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1d6:	b2db      	uxtb	r3, r3
 800c1d8:	2b03      	cmp	r3, #3
 800c1da:	d107      	bne.n	800c1ec <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c1dc:	f107 030a 	add.w	r3, r7, #10
 800c1e0:	2202      	movs	r2, #2
 800c1e2:	4619      	mov	r1, r3
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f001 fcf1 	bl	800dbcc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c1ea:	e032      	b.n	800c252 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c1ec:	6839      	ldr	r1, [r7, #0]
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f001 fc6f 	bl	800dad2 <USBD_CtlError>
            ret = USBD_FAIL;
 800c1f4:	2303      	movs	r3, #3
 800c1f6:	75fb      	strb	r3, [r7, #23]
          break;
 800c1f8:	e02b      	b.n	800c252 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c200:	b2db      	uxtb	r3, r3
 800c202:	2b03      	cmp	r3, #3
 800c204:	d107      	bne.n	800c216 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c206:	f107 030d 	add.w	r3, r7, #13
 800c20a:	2201      	movs	r2, #1
 800c20c:	4619      	mov	r1, r3
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f001 fcdc 	bl	800dbcc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c214:	e01d      	b.n	800c252 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c216:	6839      	ldr	r1, [r7, #0]
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f001 fc5a 	bl	800dad2 <USBD_CtlError>
            ret = USBD_FAIL;
 800c21e:	2303      	movs	r3, #3
 800c220:	75fb      	strb	r3, [r7, #23]
          break;
 800c222:	e016      	b.n	800c252 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c22a:	b2db      	uxtb	r3, r3
 800c22c:	2b03      	cmp	r3, #3
 800c22e:	d00f      	beq.n	800c250 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c230:	6839      	ldr	r1, [r7, #0]
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f001 fc4d 	bl	800dad2 <USBD_CtlError>
            ret = USBD_FAIL;
 800c238:	2303      	movs	r3, #3
 800c23a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c23c:	e008      	b.n	800c250 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c23e:	6839      	ldr	r1, [r7, #0]
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f001 fc46 	bl	800dad2 <USBD_CtlError>
          ret = USBD_FAIL;
 800c246:	2303      	movs	r3, #3
 800c248:	75fb      	strb	r3, [r7, #23]
          break;
 800c24a:	e002      	b.n	800c252 <USBD_CDC_Setup+0x19e>
          break;
 800c24c:	bf00      	nop
 800c24e:	e008      	b.n	800c262 <USBD_CDC_Setup+0x1ae>
          break;
 800c250:	bf00      	nop
      }
      break;
 800c252:	e006      	b.n	800c262 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c254:	6839      	ldr	r1, [r7, #0]
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f001 fc3b 	bl	800dad2 <USBD_CtlError>
      ret = USBD_FAIL;
 800c25c:	2303      	movs	r3, #3
 800c25e:	75fb      	strb	r3, [r7, #23]
      break;
 800c260:	bf00      	nop
  }

  return (uint8_t)ret;
 800c262:	7dfb      	ldrb	r3, [r7, #23]
}
 800c264:	4618      	mov	r0, r3
 800c266:	3718      	adds	r7, #24
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}

0800c26c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b084      	sub	sp, #16
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
 800c274:	460b      	mov	r3, r1
 800c276:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c27e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	32b0      	adds	r2, #176	@ 0xb0
 800c28a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d101      	bne.n	800c296 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c292:	2303      	movs	r3, #3
 800c294:	e065      	b.n	800c362 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	32b0      	adds	r2, #176	@ 0xb0
 800c2a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2a4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c2a6:	78fb      	ldrb	r3, [r7, #3]
 800c2a8:	f003 020f 	and.w	r2, r3, #15
 800c2ac:	6879      	ldr	r1, [r7, #4]
 800c2ae:	4613      	mov	r3, r2
 800c2b0:	009b      	lsls	r3, r3, #2
 800c2b2:	4413      	add	r3, r2
 800c2b4:	009b      	lsls	r3, r3, #2
 800c2b6:	440b      	add	r3, r1
 800c2b8:	3318      	adds	r3, #24
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d02f      	beq.n	800c320 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c2c0:	78fb      	ldrb	r3, [r7, #3]
 800c2c2:	f003 020f 	and.w	r2, r3, #15
 800c2c6:	6879      	ldr	r1, [r7, #4]
 800c2c8:	4613      	mov	r3, r2
 800c2ca:	009b      	lsls	r3, r3, #2
 800c2cc:	4413      	add	r3, r2
 800c2ce:	009b      	lsls	r3, r3, #2
 800c2d0:	440b      	add	r3, r1
 800c2d2:	3318      	adds	r3, #24
 800c2d4:	681a      	ldr	r2, [r3, #0]
 800c2d6:	78fb      	ldrb	r3, [r7, #3]
 800c2d8:	f003 010f 	and.w	r1, r3, #15
 800c2dc:	68f8      	ldr	r0, [r7, #12]
 800c2de:	460b      	mov	r3, r1
 800c2e0:	009b      	lsls	r3, r3, #2
 800c2e2:	440b      	add	r3, r1
 800c2e4:	00db      	lsls	r3, r3, #3
 800c2e6:	4403      	add	r3, r0
 800c2e8:	3320      	adds	r3, #32
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	fbb2 f1f3 	udiv	r1, r2, r3
 800c2f0:	fb01 f303 	mul.w	r3, r1, r3
 800c2f4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d112      	bne.n	800c320 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c2fa:	78fb      	ldrb	r3, [r7, #3]
 800c2fc:	f003 020f 	and.w	r2, r3, #15
 800c300:	6879      	ldr	r1, [r7, #4]
 800c302:	4613      	mov	r3, r2
 800c304:	009b      	lsls	r3, r3, #2
 800c306:	4413      	add	r3, r2
 800c308:	009b      	lsls	r3, r3, #2
 800c30a:	440b      	add	r3, r1
 800c30c:	3318      	adds	r3, #24
 800c30e:	2200      	movs	r2, #0
 800c310:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c312:	78f9      	ldrb	r1, [r7, #3]
 800c314:	2300      	movs	r3, #0
 800c316:	2200      	movs	r2, #0
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f002 f944 	bl	800e5a6 <USBD_LL_Transmit>
 800c31e:	e01f      	b.n	800c360 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	2200      	movs	r2, #0
 800c324:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c32e:	687a      	ldr	r2, [r7, #4]
 800c330:	33b0      	adds	r3, #176	@ 0xb0
 800c332:	009b      	lsls	r3, r3, #2
 800c334:	4413      	add	r3, r2
 800c336:	685b      	ldr	r3, [r3, #4]
 800c338:	691b      	ldr	r3, [r3, #16]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d010      	beq.n	800c360 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c344:	687a      	ldr	r2, [r7, #4]
 800c346:	33b0      	adds	r3, #176	@ 0xb0
 800c348:	009b      	lsls	r3, r3, #2
 800c34a:	4413      	add	r3, r2
 800c34c:	685b      	ldr	r3, [r3, #4]
 800c34e:	691b      	ldr	r3, [r3, #16]
 800c350:	68ba      	ldr	r2, [r7, #8]
 800c352:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800c356:	68ba      	ldr	r2, [r7, #8]
 800c358:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800c35c:	78fa      	ldrb	r2, [r7, #3]
 800c35e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c360:	2300      	movs	r3, #0
}
 800c362:	4618      	mov	r0, r3
 800c364:	3710      	adds	r7, #16
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}

0800c36a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c36a:	b580      	push	{r7, lr}
 800c36c:	b084      	sub	sp, #16
 800c36e:	af00      	add	r7, sp, #0
 800c370:	6078      	str	r0, [r7, #4]
 800c372:	460b      	mov	r3, r1
 800c374:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	32b0      	adds	r2, #176	@ 0xb0
 800c380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c384:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	32b0      	adds	r2, #176	@ 0xb0
 800c390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d101      	bne.n	800c39c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c398:	2303      	movs	r3, #3
 800c39a:	e01a      	b.n	800c3d2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c39c:	78fb      	ldrb	r3, [r7, #3]
 800c39e:	4619      	mov	r1, r3
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f002 f942 	bl	800e62a <USBD_LL_GetRxDataSize>
 800c3a6:	4602      	mov	r2, r0
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c3b4:	687a      	ldr	r2, [r7, #4]
 800c3b6:	33b0      	adds	r3, #176	@ 0xb0
 800c3b8:	009b      	lsls	r3, r3, #2
 800c3ba:	4413      	add	r3, r2
 800c3bc:	685b      	ldr	r3, [r3, #4]
 800c3be:	68db      	ldr	r3, [r3, #12]
 800c3c0:	68fa      	ldr	r2, [r7, #12]
 800c3c2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800c3c6:	68fa      	ldr	r2, [r7, #12]
 800c3c8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800c3cc:	4611      	mov	r1, r2
 800c3ce:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c3d0:	2300      	movs	r3, #0
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3710      	adds	r7, #16
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}

0800c3da <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c3da:	b580      	push	{r7, lr}
 800c3dc:	b084      	sub	sp, #16
 800c3de:	af00      	add	r7, sp, #0
 800c3e0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	32b0      	adds	r2, #176	@ 0xb0
 800c3ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3f0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d101      	bne.n	800c3fc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c3f8:	2303      	movs	r3, #3
 800c3fa:	e024      	b.n	800c446 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c402:	687a      	ldr	r2, [r7, #4]
 800c404:	33b0      	adds	r3, #176	@ 0xb0
 800c406:	009b      	lsls	r3, r3, #2
 800c408:	4413      	add	r3, r2
 800c40a:	685b      	ldr	r3, [r3, #4]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d019      	beq.n	800c444 <USBD_CDC_EP0_RxReady+0x6a>
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800c416:	2bff      	cmp	r3, #255	@ 0xff
 800c418:	d014      	beq.n	800c444 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c420:	687a      	ldr	r2, [r7, #4]
 800c422:	33b0      	adds	r3, #176	@ 0xb0
 800c424:	009b      	lsls	r3, r3, #2
 800c426:	4413      	add	r3, r2
 800c428:	685b      	ldr	r3, [r3, #4]
 800c42a:	689b      	ldr	r3, [r3, #8]
 800c42c:	68fa      	ldr	r2, [r7, #12]
 800c42e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800c432:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c434:	68fa      	ldr	r2, [r7, #12]
 800c436:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c43a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	22ff      	movs	r2, #255	@ 0xff
 800c440:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800c444:	2300      	movs	r3, #0
}
 800c446:	4618      	mov	r0, r3
 800c448:	3710      	adds	r7, #16
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}
	...

0800c450 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b086      	sub	sp, #24
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c458:	2182      	movs	r1, #130	@ 0x82
 800c45a:	4818      	ldr	r0, [pc, #96]	@ (800c4bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c45c:	f000 fcd9 	bl	800ce12 <USBD_GetEpDesc>
 800c460:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c462:	2101      	movs	r1, #1
 800c464:	4815      	ldr	r0, [pc, #84]	@ (800c4bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c466:	f000 fcd4 	bl	800ce12 <USBD_GetEpDesc>
 800c46a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c46c:	2181      	movs	r1, #129	@ 0x81
 800c46e:	4813      	ldr	r0, [pc, #76]	@ (800c4bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c470:	f000 fccf 	bl	800ce12 <USBD_GetEpDesc>
 800c474:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c476:	697b      	ldr	r3, [r7, #20]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d002      	beq.n	800c482 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	2210      	movs	r2, #16
 800c480:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d006      	beq.n	800c496 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c488:	693b      	ldr	r3, [r7, #16]
 800c48a:	2200      	movs	r2, #0
 800c48c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c490:	711a      	strb	r2, [r3, #4]
 800c492:	2200      	movs	r2, #0
 800c494:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d006      	beq.n	800c4aa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	2200      	movs	r2, #0
 800c4a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c4a4:	711a      	strb	r2, [r3, #4]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2243      	movs	r2, #67	@ 0x43
 800c4ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c4b0:	4b02      	ldr	r3, [pc, #8]	@ (800c4bc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3718      	adds	r7, #24
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}
 800c4ba:	bf00      	nop
 800c4bc:	20000074 	.word	0x20000074

0800c4c0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b086      	sub	sp, #24
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c4c8:	2182      	movs	r1, #130	@ 0x82
 800c4ca:	4818      	ldr	r0, [pc, #96]	@ (800c52c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c4cc:	f000 fca1 	bl	800ce12 <USBD_GetEpDesc>
 800c4d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c4d2:	2101      	movs	r1, #1
 800c4d4:	4815      	ldr	r0, [pc, #84]	@ (800c52c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c4d6:	f000 fc9c 	bl	800ce12 <USBD_GetEpDesc>
 800c4da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c4dc:	2181      	movs	r1, #129	@ 0x81
 800c4de:	4813      	ldr	r0, [pc, #76]	@ (800c52c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c4e0:	f000 fc97 	bl	800ce12 <USBD_GetEpDesc>
 800c4e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c4e6:	697b      	ldr	r3, [r7, #20]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d002      	beq.n	800c4f2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c4ec:	697b      	ldr	r3, [r7, #20]
 800c4ee:	2210      	movs	r2, #16
 800c4f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d006      	beq.n	800c506 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c4f8:	693b      	ldr	r3, [r7, #16]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	711a      	strb	r2, [r3, #4]
 800c4fe:	2200      	movs	r2, #0
 800c500:	f042 0202 	orr.w	r2, r2, #2
 800c504:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d006      	beq.n	800c51a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	2200      	movs	r2, #0
 800c510:	711a      	strb	r2, [r3, #4]
 800c512:	2200      	movs	r2, #0
 800c514:	f042 0202 	orr.w	r2, r2, #2
 800c518:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2243      	movs	r2, #67	@ 0x43
 800c51e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c520:	4b02      	ldr	r3, [pc, #8]	@ (800c52c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c522:	4618      	mov	r0, r3
 800c524:	3718      	adds	r7, #24
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
 800c52a:	bf00      	nop
 800c52c:	20000074 	.word	0x20000074

0800c530 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b086      	sub	sp, #24
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c538:	2182      	movs	r1, #130	@ 0x82
 800c53a:	4818      	ldr	r0, [pc, #96]	@ (800c59c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c53c:	f000 fc69 	bl	800ce12 <USBD_GetEpDesc>
 800c540:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c542:	2101      	movs	r1, #1
 800c544:	4815      	ldr	r0, [pc, #84]	@ (800c59c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c546:	f000 fc64 	bl	800ce12 <USBD_GetEpDesc>
 800c54a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c54c:	2181      	movs	r1, #129	@ 0x81
 800c54e:	4813      	ldr	r0, [pc, #76]	@ (800c59c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c550:	f000 fc5f 	bl	800ce12 <USBD_GetEpDesc>
 800c554:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d002      	beq.n	800c562 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	2210      	movs	r2, #16
 800c560:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c562:	693b      	ldr	r3, [r7, #16]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d006      	beq.n	800c576 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	2200      	movs	r2, #0
 800c56c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c570:	711a      	strb	r2, [r3, #4]
 800c572:	2200      	movs	r2, #0
 800c574:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d006      	beq.n	800c58a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	2200      	movs	r2, #0
 800c580:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c584:	711a      	strb	r2, [r3, #4]
 800c586:	2200      	movs	r2, #0
 800c588:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2243      	movs	r2, #67	@ 0x43
 800c58e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c590:	4b02      	ldr	r3, [pc, #8]	@ (800c59c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c592:	4618      	mov	r0, r3
 800c594:	3718      	adds	r7, #24
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
 800c59a:	bf00      	nop
 800c59c:	20000074 	.word	0x20000074

0800c5a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c5a0:	b480      	push	{r7}
 800c5a2:	b083      	sub	sp, #12
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	220a      	movs	r2, #10
 800c5ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c5ae:	4b03      	ldr	r3, [pc, #12]	@ (800c5bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	370c      	adds	r7, #12
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ba:	4770      	bx	lr
 800c5bc:	20000030 	.word	0x20000030

0800c5c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c5c0:	b480      	push	{r7}
 800c5c2:	b083      	sub	sp, #12
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
 800c5c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d101      	bne.n	800c5d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c5d0:	2303      	movs	r3, #3
 800c5d2:	e009      	b.n	800c5e8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c5da:	687a      	ldr	r2, [r7, #4]
 800c5dc:	33b0      	adds	r3, #176	@ 0xb0
 800c5de:	009b      	lsls	r3, r3, #2
 800c5e0:	4413      	add	r3, r2
 800c5e2:	683a      	ldr	r2, [r7, #0]
 800c5e4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c5e6:	2300      	movs	r3, #0
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	370c      	adds	r7, #12
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f2:	4770      	bx	lr

0800c5f4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b087      	sub	sp, #28
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	60f8      	str	r0, [r7, #12]
 800c5fc:	60b9      	str	r1, [r7, #8]
 800c5fe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	32b0      	adds	r2, #176	@ 0xb0
 800c60a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c60e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c610:	697b      	ldr	r3, [r7, #20]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d101      	bne.n	800c61a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c616:	2303      	movs	r3, #3
 800c618:	e008      	b.n	800c62c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	68ba      	ldr	r2, [r7, #8]
 800c61e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	687a      	ldr	r2, [r7, #4]
 800c626:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800c62a:	2300      	movs	r3, #0
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	371c      	adds	r7, #28
 800c630:	46bd      	mov	sp, r7
 800c632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c636:	4770      	bx	lr

0800c638 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c638:	b480      	push	{r7}
 800c63a:	b085      	sub	sp, #20
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	32b0      	adds	r2, #176	@ 0xb0
 800c64c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c650:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d101      	bne.n	800c65c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c658:	2303      	movs	r3, #3
 800c65a:	e004      	b.n	800c666 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	683a      	ldr	r2, [r7, #0]
 800c660:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800c664:	2300      	movs	r3, #0
}
 800c666:	4618      	mov	r0, r3
 800c668:	3714      	adds	r7, #20
 800c66a:	46bd      	mov	sp, r7
 800c66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c670:	4770      	bx	lr
	...

0800c674 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b084      	sub	sp, #16
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	32b0      	adds	r2, #176	@ 0xb0
 800c686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c68a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800c68c:	2301      	movs	r3, #1
 800c68e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d101      	bne.n	800c69a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c696:	2303      	movs	r3, #3
 800c698:	e025      	b.n	800c6e6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d11f      	bne.n	800c6e4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	2201      	movs	r2, #1
 800c6a8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c6ac:	4b10      	ldr	r3, [pc, #64]	@ (800c6f0 <USBD_CDC_TransmitPacket+0x7c>)
 800c6ae:	781b      	ldrb	r3, [r3, #0]
 800c6b0:	f003 020f 	and.w	r2, r3, #15
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	4613      	mov	r3, r2
 800c6be:	009b      	lsls	r3, r3, #2
 800c6c0:	4413      	add	r3, r2
 800c6c2:	009b      	lsls	r3, r3, #2
 800c6c4:	4403      	add	r3, r0
 800c6c6:	3318      	adds	r3, #24
 800c6c8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c6ca:	4b09      	ldr	r3, [pc, #36]	@ (800c6f0 <USBD_CDC_TransmitPacket+0x7c>)
 800c6cc:	7819      	ldrb	r1, [r3, #0]
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f001 ff63 	bl	800e5a6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c6e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3710      	adds	r7, #16
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}
 800c6ee:	bf00      	nop
 800c6f0:	200000b7 	.word	0x200000b7

0800c6f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b084      	sub	sp, #16
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	32b0      	adds	r2, #176	@ 0xb0
 800c706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c70a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	32b0      	adds	r2, #176	@ 0xb0
 800c716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d101      	bne.n	800c722 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c71e:	2303      	movs	r3, #3
 800c720:	e018      	b.n	800c754 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	7c1b      	ldrb	r3, [r3, #16]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d10a      	bne.n	800c740 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c72a:	4b0c      	ldr	r3, [pc, #48]	@ (800c75c <USBD_CDC_ReceivePacket+0x68>)
 800c72c:	7819      	ldrb	r1, [r3, #0]
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c734:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f001 ff55 	bl	800e5e8 <USBD_LL_PrepareReceive>
 800c73e:	e008      	b.n	800c752 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c740:	4b06      	ldr	r3, [pc, #24]	@ (800c75c <USBD_CDC_ReceivePacket+0x68>)
 800c742:	7819      	ldrb	r1, [r3, #0]
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c74a:	2340      	movs	r3, #64	@ 0x40
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f001 ff4b 	bl	800e5e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c752:	2300      	movs	r3, #0
}
 800c754:	4618      	mov	r0, r3
 800c756:	3710      	adds	r7, #16
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}
 800c75c:	200000b8 	.word	0x200000b8

0800c760 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b086      	sub	sp, #24
 800c764:	af00      	add	r7, sp, #0
 800c766:	60f8      	str	r0, [r7, #12]
 800c768:	60b9      	str	r1, [r7, #8]
 800c76a:	4613      	mov	r3, r2
 800c76c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d10a      	bne.n	800c78a <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800c774:	4817      	ldr	r0, [pc, #92]	@ (800c7d4 <USBD_Init+0x74>)
 800c776:	f002 fd05 	bl	800f184 <iprintf>
 800c77a:	4817      	ldr	r0, [pc, #92]	@ (800c7d8 <USBD_Init+0x78>)
 800c77c:	f002 fd02 	bl	800f184 <iprintf>
 800c780:	200a      	movs	r0, #10
 800c782:	f002 fd11 	bl	800f1a8 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c786:	2303      	movs	r3, #3
 800c788:	e01f      	b.n	800c7ca <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	2200      	movs	r2, #0
 800c78e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	2200      	movs	r2, #0
 800c796:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	2200      	movs	r2, #0
 800c79e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d003      	beq.n	800c7b0 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	68ba      	ldr	r2, [r7, #8]
 800c7ac:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	2201      	movs	r2, #1
 800c7b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	79fa      	ldrb	r2, [r7, #7]
 800c7bc:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c7be:	68f8      	ldr	r0, [r7, #12]
 800c7c0:	f001 fda6 	bl	800e310 <USBD_LL_Init>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c7c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3718      	adds	r7, #24
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}
 800c7d2:	bf00      	nop
 800c7d4:	08011134 	.word	0x08011134
 800c7d8:	0801113c 	.word	0x0801113c

0800c7dc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b084      	sub	sp, #16
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
 800c7e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d10a      	bne.n	800c806 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800c7f0:	481a      	ldr	r0, [pc, #104]	@ (800c85c <USBD_RegisterClass+0x80>)
 800c7f2:	f002 fcc7 	bl	800f184 <iprintf>
 800c7f6:	481a      	ldr	r0, [pc, #104]	@ (800c860 <USBD_RegisterClass+0x84>)
 800c7f8:	f002 fcc4 	bl	800f184 <iprintf>
 800c7fc:	200a      	movs	r0, #10
 800c7fe:	f002 fcd3 	bl	800f1a8 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c802:	2303      	movs	r3, #3
 800c804:	e025      	b.n	800c852 <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	683a      	ldr	r2, [r7, #0]
 800c80a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	32ae      	adds	r2, #174	@ 0xae
 800c818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c81c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d00f      	beq.n	800c842 <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	32ae      	adds	r2, #174	@ 0xae
 800c82c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c832:	f107 020e 	add.w	r2, r7, #14
 800c836:	4610      	mov	r0, r2
 800c838:	4798      	blx	r3
 800c83a:	4602      	mov	r2, r0
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c848:	1c5a      	adds	r2, r3, #1
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c850:	2300      	movs	r3, #0
}
 800c852:	4618      	mov	r0, r3
 800c854:	3710      	adds	r7, #16
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
 800c85a:	bf00      	nop
 800c85c:	08011134 	.word	0x08011134
 800c860:	08011154 	.word	0x08011154

0800c864 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b082      	sub	sp, #8
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f001 fdb1 	bl	800e3d4 <USBD_LL_Start>
 800c872:	4603      	mov	r3, r0
}
 800c874:	4618      	mov	r0, r3
 800c876:	3708      	adds	r7, #8
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}

0800c87c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c87c:	b480      	push	{r7}
 800c87e:	b083      	sub	sp, #12
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c884:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c886:	4618      	mov	r0, r3
 800c888:	370c      	adds	r7, #12
 800c88a:	46bd      	mov	sp, r7
 800c88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c890:	4770      	bx	lr

0800c892 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c892:	b580      	push	{r7, lr}
 800c894:	b084      	sub	sp, #16
 800c896:	af00      	add	r7, sp, #0
 800c898:	6078      	str	r0, [r7, #4]
 800c89a:	460b      	mov	r3, r1
 800c89c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d009      	beq.n	800c8c0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	78fa      	ldrb	r2, [r7, #3]
 800c8b6:	4611      	mov	r1, r2
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	4798      	blx	r3
 800c8bc:	4603      	mov	r3, r0
 800c8be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c8c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	3710      	adds	r7, #16
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}

0800c8ca <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c8ca:	b580      	push	{r7, lr}
 800c8cc:	b084      	sub	sp, #16
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	6078      	str	r0, [r7, #4]
 800c8d2:	460b      	mov	r3, r1
 800c8d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c8e0:	685b      	ldr	r3, [r3, #4]
 800c8e2:	78fa      	ldrb	r2, [r7, #3]
 800c8e4:	4611      	mov	r1, r2
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	4798      	blx	r3
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d001      	beq.n	800c8f4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c8f0:	2303      	movs	r3, #3
 800c8f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c8f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	3710      	adds	r7, #16
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}

0800c8fe <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c8fe:	b580      	push	{r7, lr}
 800c900:	b084      	sub	sp, #16
 800c902:	af00      	add	r7, sp, #0
 800c904:	6078      	str	r0, [r7, #4]
 800c906:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c90e:	6839      	ldr	r1, [r7, #0]
 800c910:	4618      	mov	r0, r3
 800c912:	f001 f8a4 	bl	800da5e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2201      	movs	r2, #1
 800c91a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c924:	461a      	mov	r2, r3
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c932:	f003 031f 	and.w	r3, r3, #31
 800c936:	2b02      	cmp	r3, #2
 800c938:	d01a      	beq.n	800c970 <USBD_LL_SetupStage+0x72>
 800c93a:	2b02      	cmp	r3, #2
 800c93c:	d822      	bhi.n	800c984 <USBD_LL_SetupStage+0x86>
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d002      	beq.n	800c948 <USBD_LL_SetupStage+0x4a>
 800c942:	2b01      	cmp	r3, #1
 800c944:	d00a      	beq.n	800c95c <USBD_LL_SetupStage+0x5e>
 800c946:	e01d      	b.n	800c984 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c94e:	4619      	mov	r1, r3
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f000 fad1 	bl	800cef8 <USBD_StdDevReq>
 800c956:	4603      	mov	r3, r0
 800c958:	73fb      	strb	r3, [r7, #15]
      break;
 800c95a:	e020      	b.n	800c99e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c962:	4619      	mov	r1, r3
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f000 fb39 	bl	800cfdc <USBD_StdItfReq>
 800c96a:	4603      	mov	r3, r0
 800c96c:	73fb      	strb	r3, [r7, #15]
      break;
 800c96e:	e016      	b.n	800c99e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c976:	4619      	mov	r1, r3
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f000 fb9b 	bl	800d0b4 <USBD_StdEPReq>
 800c97e:	4603      	mov	r3, r0
 800c980:	73fb      	strb	r3, [r7, #15]
      break;
 800c982:	e00c      	b.n	800c99e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c98a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c98e:	b2db      	uxtb	r3, r3
 800c990:	4619      	mov	r1, r3
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f001 fd7e 	bl	800e494 <USBD_LL_StallEP>
 800c998:	4603      	mov	r3, r0
 800c99a:	73fb      	strb	r3, [r7, #15]
      break;
 800c99c:	bf00      	nop
  }

  return ret;
 800c99e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	3710      	adds	r7, #16
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}

0800c9a8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b086      	sub	sp, #24
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	60f8      	str	r0, [r7, #12]
 800c9b0:	460b      	mov	r3, r1
 800c9b2:	607a      	str	r2, [r7, #4]
 800c9b4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c9ba:	7afb      	ldrb	r3, [r7, #11]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d16e      	bne.n	800ca9e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c9c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c9ce:	2b03      	cmp	r3, #3
 800c9d0:	f040 8098 	bne.w	800cb04 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	689a      	ldr	r2, [r3, #8]
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	68db      	ldr	r3, [r3, #12]
 800c9dc:	429a      	cmp	r2, r3
 800c9de:	d913      	bls.n	800ca08 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c9e0:	693b      	ldr	r3, [r7, #16]
 800c9e2:	689a      	ldr	r2, [r3, #8]
 800c9e4:	693b      	ldr	r3, [r7, #16]
 800c9e6:	68db      	ldr	r3, [r3, #12]
 800c9e8:	1ad2      	subs	r2, r2, r3
 800c9ea:	693b      	ldr	r3, [r7, #16]
 800c9ec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c9ee:	693b      	ldr	r3, [r7, #16]
 800c9f0:	68da      	ldr	r2, [r3, #12]
 800c9f2:	693b      	ldr	r3, [r7, #16]
 800c9f4:	689b      	ldr	r3, [r3, #8]
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	bf28      	it	cs
 800c9fa:	4613      	movcs	r3, r2
 800c9fc:	461a      	mov	r2, r3
 800c9fe:	6879      	ldr	r1, [r7, #4]
 800ca00:	68f8      	ldr	r0, [r7, #12]
 800ca02:	f001 f92c 	bl	800dc5e <USBD_CtlContinueRx>
 800ca06:	e07d      	b.n	800cb04 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ca0e:	f003 031f 	and.w	r3, r3, #31
 800ca12:	2b02      	cmp	r3, #2
 800ca14:	d014      	beq.n	800ca40 <USBD_LL_DataOutStage+0x98>
 800ca16:	2b02      	cmp	r3, #2
 800ca18:	d81d      	bhi.n	800ca56 <USBD_LL_DataOutStage+0xae>
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d002      	beq.n	800ca24 <USBD_LL_DataOutStage+0x7c>
 800ca1e:	2b01      	cmp	r3, #1
 800ca20:	d003      	beq.n	800ca2a <USBD_LL_DataOutStage+0x82>
 800ca22:	e018      	b.n	800ca56 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ca24:	2300      	movs	r3, #0
 800ca26:	75bb      	strb	r3, [r7, #22]
            break;
 800ca28:	e018      	b.n	800ca5c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ca30:	b2db      	uxtb	r3, r3
 800ca32:	4619      	mov	r1, r3
 800ca34:	68f8      	ldr	r0, [r7, #12]
 800ca36:	f000 f9d2 	bl	800cdde <USBD_CoreFindIF>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	75bb      	strb	r3, [r7, #22]
            break;
 800ca3e:	e00d      	b.n	800ca5c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ca46:	b2db      	uxtb	r3, r3
 800ca48:	4619      	mov	r1, r3
 800ca4a:	68f8      	ldr	r0, [r7, #12]
 800ca4c:	f000 f9d4 	bl	800cdf8 <USBD_CoreFindEP>
 800ca50:	4603      	mov	r3, r0
 800ca52:	75bb      	strb	r3, [r7, #22]
            break;
 800ca54:	e002      	b.n	800ca5c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ca56:	2300      	movs	r3, #0
 800ca58:	75bb      	strb	r3, [r7, #22]
            break;
 800ca5a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ca5c:	7dbb      	ldrb	r3, [r7, #22]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d119      	bne.n	800ca96 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca68:	b2db      	uxtb	r3, r3
 800ca6a:	2b03      	cmp	r3, #3
 800ca6c:	d113      	bne.n	800ca96 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ca6e:	7dba      	ldrb	r2, [r7, #22]
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	32ae      	adds	r2, #174	@ 0xae
 800ca74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca78:	691b      	ldr	r3, [r3, #16]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d00b      	beq.n	800ca96 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ca7e:	7dba      	ldrb	r2, [r7, #22]
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ca86:	7dba      	ldrb	r2, [r7, #22]
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	32ae      	adds	r2, #174	@ 0xae
 800ca8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca90:	691b      	ldr	r3, [r3, #16]
 800ca92:	68f8      	ldr	r0, [r7, #12]
 800ca94:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ca96:	68f8      	ldr	r0, [r7, #12]
 800ca98:	f001 f8f2 	bl	800dc80 <USBD_CtlSendStatus>
 800ca9c:	e032      	b.n	800cb04 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ca9e:	7afb      	ldrb	r3, [r7, #11]
 800caa0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800caa4:	b2db      	uxtb	r3, r3
 800caa6:	4619      	mov	r1, r3
 800caa8:	68f8      	ldr	r0, [r7, #12]
 800caaa:	f000 f9a5 	bl	800cdf8 <USBD_CoreFindEP>
 800caae:	4603      	mov	r3, r0
 800cab0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cab2:	7dbb      	ldrb	r3, [r7, #22]
 800cab4:	2bff      	cmp	r3, #255	@ 0xff
 800cab6:	d025      	beq.n	800cb04 <USBD_LL_DataOutStage+0x15c>
 800cab8:	7dbb      	ldrb	r3, [r7, #22]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d122      	bne.n	800cb04 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cac4:	b2db      	uxtb	r3, r3
 800cac6:	2b03      	cmp	r3, #3
 800cac8:	d117      	bne.n	800cafa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800caca:	7dba      	ldrb	r2, [r7, #22]
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	32ae      	adds	r2, #174	@ 0xae
 800cad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cad4:	699b      	ldr	r3, [r3, #24]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d00f      	beq.n	800cafa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800cada:	7dba      	ldrb	r2, [r7, #22]
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800cae2:	7dba      	ldrb	r2, [r7, #22]
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	32ae      	adds	r2, #174	@ 0xae
 800cae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caec:	699b      	ldr	r3, [r3, #24]
 800caee:	7afa      	ldrb	r2, [r7, #11]
 800caf0:	4611      	mov	r1, r2
 800caf2:	68f8      	ldr	r0, [r7, #12]
 800caf4:	4798      	blx	r3
 800caf6:	4603      	mov	r3, r0
 800caf8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800cafa:	7dfb      	ldrb	r3, [r7, #23]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d001      	beq.n	800cb04 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800cb00:	7dfb      	ldrb	r3, [r7, #23]
 800cb02:	e000      	b.n	800cb06 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800cb04:	2300      	movs	r3, #0
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	3718      	adds	r7, #24
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}

0800cb0e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cb0e:	b580      	push	{r7, lr}
 800cb10:	b086      	sub	sp, #24
 800cb12:	af00      	add	r7, sp, #0
 800cb14:	60f8      	str	r0, [r7, #12]
 800cb16:	460b      	mov	r3, r1
 800cb18:	607a      	str	r2, [r7, #4]
 800cb1a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800cb1c:	7afb      	ldrb	r3, [r7, #11]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d16f      	bne.n	800cc02 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	3314      	adds	r3, #20
 800cb26:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cb2e:	2b02      	cmp	r3, #2
 800cb30:	d15a      	bne.n	800cbe8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	689a      	ldr	r2, [r3, #8]
 800cb36:	693b      	ldr	r3, [r7, #16]
 800cb38:	68db      	ldr	r3, [r3, #12]
 800cb3a:	429a      	cmp	r2, r3
 800cb3c:	d914      	bls.n	800cb68 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cb3e:	693b      	ldr	r3, [r7, #16]
 800cb40:	689a      	ldr	r2, [r3, #8]
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	68db      	ldr	r3, [r3, #12]
 800cb46:	1ad2      	subs	r2, r2, r3
 800cb48:	693b      	ldr	r3, [r7, #16]
 800cb4a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800cb4c:	693b      	ldr	r3, [r7, #16]
 800cb4e:	689b      	ldr	r3, [r3, #8]
 800cb50:	461a      	mov	r2, r3
 800cb52:	6879      	ldr	r1, [r7, #4]
 800cb54:	68f8      	ldr	r0, [r7, #12]
 800cb56:	f001 f854 	bl	800dc02 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	2100      	movs	r1, #0
 800cb60:	68f8      	ldr	r0, [r7, #12]
 800cb62:	f001 fd41 	bl	800e5e8 <USBD_LL_PrepareReceive>
 800cb66:	e03f      	b.n	800cbe8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800cb68:	693b      	ldr	r3, [r7, #16]
 800cb6a:	68da      	ldr	r2, [r3, #12]
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	689b      	ldr	r3, [r3, #8]
 800cb70:	429a      	cmp	r2, r3
 800cb72:	d11c      	bne.n	800cbae <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800cb74:	693b      	ldr	r3, [r7, #16]
 800cb76:	685a      	ldr	r2, [r3, #4]
 800cb78:	693b      	ldr	r3, [r7, #16]
 800cb7a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	d316      	bcc.n	800cbae <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800cb80:	693b      	ldr	r3, [r7, #16]
 800cb82:	685a      	ldr	r2, [r3, #4]
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cb8a:	429a      	cmp	r2, r3
 800cb8c:	d20f      	bcs.n	800cbae <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cb8e:	2200      	movs	r2, #0
 800cb90:	2100      	movs	r1, #0
 800cb92:	68f8      	ldr	r0, [r7, #12]
 800cb94:	f001 f835 	bl	800dc02 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cba0:	2300      	movs	r3, #0
 800cba2:	2200      	movs	r2, #0
 800cba4:	2100      	movs	r1, #0
 800cba6:	68f8      	ldr	r0, [r7, #12]
 800cba8:	f001 fd1e 	bl	800e5e8 <USBD_LL_PrepareReceive>
 800cbac:	e01c      	b.n	800cbe8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbb4:	b2db      	uxtb	r3, r3
 800cbb6:	2b03      	cmp	r3, #3
 800cbb8:	d10f      	bne.n	800cbda <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbc0:	68db      	ldr	r3, [r3, #12]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d009      	beq.n	800cbda <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	2200      	movs	r2, #0
 800cbca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbd4:	68db      	ldr	r3, [r3, #12]
 800cbd6:	68f8      	ldr	r0, [r7, #12]
 800cbd8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cbda:	2180      	movs	r1, #128	@ 0x80
 800cbdc:	68f8      	ldr	r0, [r7, #12]
 800cbde:	f001 fc59 	bl	800e494 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800cbe2:	68f8      	ldr	r0, [r7, #12]
 800cbe4:	f001 f85f 	bl	800dca6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d03a      	beq.n	800cc68 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800cbf2:	68f8      	ldr	r0, [r7, #12]
 800cbf4:	f7ff fe42 	bl	800c87c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800cc00:	e032      	b.n	800cc68 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800cc02:	7afb      	ldrb	r3, [r7, #11]
 800cc04:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cc08:	b2db      	uxtb	r3, r3
 800cc0a:	4619      	mov	r1, r3
 800cc0c:	68f8      	ldr	r0, [r7, #12]
 800cc0e:	f000 f8f3 	bl	800cdf8 <USBD_CoreFindEP>
 800cc12:	4603      	mov	r3, r0
 800cc14:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cc16:	7dfb      	ldrb	r3, [r7, #23]
 800cc18:	2bff      	cmp	r3, #255	@ 0xff
 800cc1a:	d025      	beq.n	800cc68 <USBD_LL_DataInStage+0x15a>
 800cc1c:	7dfb      	ldrb	r3, [r7, #23]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d122      	bne.n	800cc68 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc28:	b2db      	uxtb	r3, r3
 800cc2a:	2b03      	cmp	r3, #3
 800cc2c:	d11c      	bne.n	800cc68 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800cc2e:	7dfa      	ldrb	r2, [r7, #23]
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	32ae      	adds	r2, #174	@ 0xae
 800cc34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc38:	695b      	ldr	r3, [r3, #20]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d014      	beq.n	800cc68 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800cc3e:	7dfa      	ldrb	r2, [r7, #23]
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800cc46:	7dfa      	ldrb	r2, [r7, #23]
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	32ae      	adds	r2, #174	@ 0xae
 800cc4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc50:	695b      	ldr	r3, [r3, #20]
 800cc52:	7afa      	ldrb	r2, [r7, #11]
 800cc54:	4611      	mov	r1, r2
 800cc56:	68f8      	ldr	r0, [r7, #12]
 800cc58:	4798      	blx	r3
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800cc5e:	7dbb      	ldrb	r3, [r7, #22]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d001      	beq.n	800cc68 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800cc64:	7dbb      	ldrb	r3, [r7, #22]
 800cc66:	e000      	b.n	800cc6a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800cc68:	2300      	movs	r3, #0
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3718      	adds	r7, #24
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}

0800cc72 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800cc72:	b580      	push	{r7, lr}
 800cc74:	b084      	sub	sp, #16
 800cc76:	af00      	add	r7, sp, #0
 800cc78:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2201      	movs	r2, #1
 800cc82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2200      	movs	r2, #0
 800cc8a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2200      	movs	r2, #0
 800cc92:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2200      	movs	r2, #0
 800cc98:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d014      	beq.n	800ccd8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ccb4:	685b      	ldr	r3, [r3, #4]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d00e      	beq.n	800ccd8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ccc0:	685b      	ldr	r3, [r3, #4]
 800ccc2:	687a      	ldr	r2, [r7, #4]
 800ccc4:	6852      	ldr	r2, [r2, #4]
 800ccc6:	b2d2      	uxtb	r2, r2
 800ccc8:	4611      	mov	r1, r2
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	4798      	blx	r3
 800ccce:	4603      	mov	r3, r0
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d001      	beq.n	800ccd8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ccd4:	2303      	movs	r3, #3
 800ccd6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ccd8:	2340      	movs	r3, #64	@ 0x40
 800ccda:	2200      	movs	r2, #0
 800ccdc:	2100      	movs	r1, #0
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f001 fb93 	bl	800e40a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2201      	movs	r2, #1
 800cce8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2240      	movs	r2, #64	@ 0x40
 800ccf0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ccf4:	2340      	movs	r3, #64	@ 0x40
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	2180      	movs	r1, #128	@ 0x80
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f001 fb85 	bl	800e40a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2201      	movs	r2, #1
 800cd04:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2240      	movs	r2, #64	@ 0x40
 800cd0a:	621a      	str	r2, [r3, #32]

  return ret;
 800cd0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3710      	adds	r7, #16
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}

0800cd16 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cd16:	b480      	push	{r7}
 800cd18:	b083      	sub	sp, #12
 800cd1a:	af00      	add	r7, sp, #0
 800cd1c:	6078      	str	r0, [r7, #4]
 800cd1e:	460b      	mov	r3, r1
 800cd20:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	78fa      	ldrb	r2, [r7, #3]
 800cd26:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cd28:	2300      	movs	r3, #0
}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	370c      	adds	r7, #12
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd34:	4770      	bx	lr

0800cd36 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cd36:	b480      	push	{r7}
 800cd38:	b083      	sub	sp, #12
 800cd3a:	af00      	add	r7, sp, #0
 800cd3c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd44:	b2db      	uxtb	r3, r3
 800cd46:	2b04      	cmp	r3, #4
 800cd48:	d006      	beq.n	800cd58 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd50:	b2da      	uxtb	r2, r3
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2204      	movs	r2, #4
 800cd5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800cd60:	2300      	movs	r3, #0
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	370c      	adds	r7, #12
 800cd66:	46bd      	mov	sp, r7
 800cd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6c:	4770      	bx	lr

0800cd6e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cd6e:	b480      	push	{r7}
 800cd70:	b083      	sub	sp, #12
 800cd72:	af00      	add	r7, sp, #0
 800cd74:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd7c:	b2db      	uxtb	r3, r3
 800cd7e:	2b04      	cmp	r3, #4
 800cd80:	d106      	bne.n	800cd90 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800cd88:	b2da      	uxtb	r2, r3
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800cd90:	2300      	movs	r3, #0
}
 800cd92:	4618      	mov	r0, r3
 800cd94:	370c      	adds	r7, #12
 800cd96:	46bd      	mov	sp, r7
 800cd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9c:	4770      	bx	lr

0800cd9e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cd9e:	b580      	push	{r7, lr}
 800cda0:	b082      	sub	sp, #8
 800cda2:	af00      	add	r7, sp, #0
 800cda4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cdac:	b2db      	uxtb	r3, r3
 800cdae:	2b03      	cmp	r3, #3
 800cdb0:	d110      	bne.n	800cdd4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d00b      	beq.n	800cdd4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cdc2:	69db      	ldr	r3, [r3, #28]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d005      	beq.n	800cdd4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cdce:	69db      	ldr	r3, [r3, #28]
 800cdd0:	6878      	ldr	r0, [r7, #4]
 800cdd2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cdd4:	2300      	movs	r3, #0
}
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	3708      	adds	r7, #8
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}

0800cdde <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cdde:	b480      	push	{r7}
 800cde0:	b083      	sub	sp, #12
 800cde2:	af00      	add	r7, sp, #0
 800cde4:	6078      	str	r0, [r7, #4]
 800cde6:	460b      	mov	r3, r1
 800cde8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cdea:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	370c      	adds	r7, #12
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf6:	4770      	bx	lr

0800cdf8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b083      	sub	sp, #12
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
 800ce00:	460b      	mov	r3, r1
 800ce02:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ce04:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	370c      	adds	r7, #12
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce10:	4770      	bx	lr

0800ce12 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ce12:	b580      	push	{r7, lr}
 800ce14:	b086      	sub	sp, #24
 800ce16:	af00      	add	r7, sp, #0
 800ce18:	6078      	str	r0, [r7, #4]
 800ce1a:	460b      	mov	r3, r1
 800ce1c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ce26:	2300      	movs	r3, #0
 800ce28:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	885b      	ldrh	r3, [r3, #2]
 800ce2e:	b29b      	uxth	r3, r3
 800ce30:	68fa      	ldr	r2, [r7, #12]
 800ce32:	7812      	ldrb	r2, [r2, #0]
 800ce34:	4293      	cmp	r3, r2
 800ce36:	d91f      	bls.n	800ce78 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	781b      	ldrb	r3, [r3, #0]
 800ce3c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ce3e:	e013      	b.n	800ce68 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ce40:	f107 030a 	add.w	r3, r7, #10
 800ce44:	4619      	mov	r1, r3
 800ce46:	6978      	ldr	r0, [r7, #20]
 800ce48:	f000 f81b 	bl	800ce82 <USBD_GetNextDesc>
 800ce4c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ce4e:	697b      	ldr	r3, [r7, #20]
 800ce50:	785b      	ldrb	r3, [r3, #1]
 800ce52:	2b05      	cmp	r3, #5
 800ce54:	d108      	bne.n	800ce68 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ce5a:	693b      	ldr	r3, [r7, #16]
 800ce5c:	789b      	ldrb	r3, [r3, #2]
 800ce5e:	78fa      	ldrb	r2, [r7, #3]
 800ce60:	429a      	cmp	r2, r3
 800ce62:	d008      	beq.n	800ce76 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ce64:	2300      	movs	r3, #0
 800ce66:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	885b      	ldrh	r3, [r3, #2]
 800ce6c:	b29a      	uxth	r2, r3
 800ce6e:	897b      	ldrh	r3, [r7, #10]
 800ce70:	429a      	cmp	r2, r3
 800ce72:	d8e5      	bhi.n	800ce40 <USBD_GetEpDesc+0x2e>
 800ce74:	e000      	b.n	800ce78 <USBD_GetEpDesc+0x66>
          break;
 800ce76:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ce78:	693b      	ldr	r3, [r7, #16]
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	3718      	adds	r7, #24
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}

0800ce82 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ce82:	b480      	push	{r7}
 800ce84:	b085      	sub	sp, #20
 800ce86:	af00      	add	r7, sp, #0
 800ce88:	6078      	str	r0, [r7, #4]
 800ce8a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	881b      	ldrh	r3, [r3, #0]
 800ce94:	68fa      	ldr	r2, [r7, #12]
 800ce96:	7812      	ldrb	r2, [r2, #0]
 800ce98:	4413      	add	r3, r2
 800ce9a:	b29a      	uxth	r2, r3
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	781b      	ldrb	r3, [r3, #0]
 800cea4:	461a      	mov	r2, r3
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	4413      	add	r3, r2
 800ceaa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ceac:	68fb      	ldr	r3, [r7, #12]
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	3714      	adds	r7, #20
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb8:	4770      	bx	lr

0800ceba <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ceba:	b480      	push	{r7}
 800cebc:	b087      	sub	sp, #28
 800cebe:	af00      	add	r7, sp, #0
 800cec0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	781b      	ldrb	r3, [r3, #0]
 800ceca:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cecc:	697b      	ldr	r3, [r7, #20]
 800cece:	3301      	adds	r3, #1
 800ced0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ced2:	697b      	ldr	r3, [r7, #20]
 800ced4:	781b      	ldrb	r3, [r3, #0]
 800ced6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ced8:	8a3b      	ldrh	r3, [r7, #16]
 800ceda:	021b      	lsls	r3, r3, #8
 800cedc:	b21a      	sxth	r2, r3
 800cede:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cee2:	4313      	orrs	r3, r2
 800cee4:	b21b      	sxth	r3, r3
 800cee6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cee8:	89fb      	ldrh	r3, [r7, #14]
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	371c      	adds	r7, #28
 800ceee:	46bd      	mov	sp, r7
 800cef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef4:	4770      	bx	lr
	...

0800cef8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b084      	sub	sp, #16
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
 800cf00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf02:	2300      	movs	r3, #0
 800cf04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	781b      	ldrb	r3, [r3, #0]
 800cf0a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cf0e:	2b40      	cmp	r3, #64	@ 0x40
 800cf10:	d005      	beq.n	800cf1e <USBD_StdDevReq+0x26>
 800cf12:	2b40      	cmp	r3, #64	@ 0x40
 800cf14:	d857      	bhi.n	800cfc6 <USBD_StdDevReq+0xce>
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d00f      	beq.n	800cf3a <USBD_StdDevReq+0x42>
 800cf1a:	2b20      	cmp	r3, #32
 800cf1c:	d153      	bne.n	800cfc6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	32ae      	adds	r2, #174	@ 0xae
 800cf28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf2c:	689b      	ldr	r3, [r3, #8]
 800cf2e:	6839      	ldr	r1, [r7, #0]
 800cf30:	6878      	ldr	r0, [r7, #4]
 800cf32:	4798      	blx	r3
 800cf34:	4603      	mov	r3, r0
 800cf36:	73fb      	strb	r3, [r7, #15]
      break;
 800cf38:	e04a      	b.n	800cfd0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	785b      	ldrb	r3, [r3, #1]
 800cf3e:	2b09      	cmp	r3, #9
 800cf40:	d83b      	bhi.n	800cfba <USBD_StdDevReq+0xc2>
 800cf42:	a201      	add	r2, pc, #4	@ (adr r2, 800cf48 <USBD_StdDevReq+0x50>)
 800cf44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf48:	0800cf9d 	.word	0x0800cf9d
 800cf4c:	0800cfb1 	.word	0x0800cfb1
 800cf50:	0800cfbb 	.word	0x0800cfbb
 800cf54:	0800cfa7 	.word	0x0800cfa7
 800cf58:	0800cfbb 	.word	0x0800cfbb
 800cf5c:	0800cf7b 	.word	0x0800cf7b
 800cf60:	0800cf71 	.word	0x0800cf71
 800cf64:	0800cfbb 	.word	0x0800cfbb
 800cf68:	0800cf93 	.word	0x0800cf93
 800cf6c:	0800cf85 	.word	0x0800cf85
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cf70:	6839      	ldr	r1, [r7, #0]
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f000 fa3c 	bl	800d3f0 <USBD_GetDescriptor>
          break;
 800cf78:	e024      	b.n	800cfc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cf7a:	6839      	ldr	r1, [r7, #0]
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f000 fbcb 	bl	800d718 <USBD_SetAddress>
          break;
 800cf82:	e01f      	b.n	800cfc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cf84:	6839      	ldr	r1, [r7, #0]
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f000 fc0a 	bl	800d7a0 <USBD_SetConfig>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	73fb      	strb	r3, [r7, #15]
          break;
 800cf90:	e018      	b.n	800cfc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cf92:	6839      	ldr	r1, [r7, #0]
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f000 fcad 	bl	800d8f4 <USBD_GetConfig>
          break;
 800cf9a:	e013      	b.n	800cfc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cf9c:	6839      	ldr	r1, [r7, #0]
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	f000 fcde 	bl	800d960 <USBD_GetStatus>
          break;
 800cfa4:	e00e      	b.n	800cfc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cfa6:	6839      	ldr	r1, [r7, #0]
 800cfa8:	6878      	ldr	r0, [r7, #4]
 800cfaa:	f000 fd0d 	bl	800d9c8 <USBD_SetFeature>
          break;
 800cfae:	e009      	b.n	800cfc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cfb0:	6839      	ldr	r1, [r7, #0]
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f000 fd31 	bl	800da1a <USBD_ClrFeature>
          break;
 800cfb8:	e004      	b.n	800cfc4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800cfba:	6839      	ldr	r1, [r7, #0]
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	f000 fd88 	bl	800dad2 <USBD_CtlError>
          break;
 800cfc2:	bf00      	nop
      }
      break;
 800cfc4:	e004      	b.n	800cfd0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800cfc6:	6839      	ldr	r1, [r7, #0]
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f000 fd82 	bl	800dad2 <USBD_CtlError>
      break;
 800cfce:	bf00      	nop
  }

  return ret;
 800cfd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	3710      	adds	r7, #16
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}
 800cfda:	bf00      	nop

0800cfdc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b084      	sub	sp, #16
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	781b      	ldrb	r3, [r3, #0]
 800cfee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cff2:	2b40      	cmp	r3, #64	@ 0x40
 800cff4:	d005      	beq.n	800d002 <USBD_StdItfReq+0x26>
 800cff6:	2b40      	cmp	r3, #64	@ 0x40
 800cff8:	d852      	bhi.n	800d0a0 <USBD_StdItfReq+0xc4>
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d001      	beq.n	800d002 <USBD_StdItfReq+0x26>
 800cffe:	2b20      	cmp	r3, #32
 800d000:	d14e      	bne.n	800d0a0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d008:	b2db      	uxtb	r3, r3
 800d00a:	3b01      	subs	r3, #1
 800d00c:	2b02      	cmp	r3, #2
 800d00e:	d840      	bhi.n	800d092 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	889b      	ldrh	r3, [r3, #4]
 800d014:	b2db      	uxtb	r3, r3
 800d016:	2b01      	cmp	r3, #1
 800d018:	d836      	bhi.n	800d088 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	889b      	ldrh	r3, [r3, #4]
 800d01e:	b2db      	uxtb	r3, r3
 800d020:	4619      	mov	r1, r3
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f7ff fedb 	bl	800cdde <USBD_CoreFindIF>
 800d028:	4603      	mov	r3, r0
 800d02a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d02c:	7bbb      	ldrb	r3, [r7, #14]
 800d02e:	2bff      	cmp	r3, #255	@ 0xff
 800d030:	d01d      	beq.n	800d06e <USBD_StdItfReq+0x92>
 800d032:	7bbb      	ldrb	r3, [r7, #14]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d11a      	bne.n	800d06e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d038:	7bba      	ldrb	r2, [r7, #14]
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	32ae      	adds	r2, #174	@ 0xae
 800d03e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d042:	689b      	ldr	r3, [r3, #8]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d00f      	beq.n	800d068 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d048:	7bba      	ldrb	r2, [r7, #14]
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d050:	7bba      	ldrb	r2, [r7, #14]
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	32ae      	adds	r2, #174	@ 0xae
 800d056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d05a:	689b      	ldr	r3, [r3, #8]
 800d05c:	6839      	ldr	r1, [r7, #0]
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	4798      	blx	r3
 800d062:	4603      	mov	r3, r0
 800d064:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d066:	e004      	b.n	800d072 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d068:	2303      	movs	r3, #3
 800d06a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d06c:	e001      	b.n	800d072 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d06e:	2303      	movs	r3, #3
 800d070:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	88db      	ldrh	r3, [r3, #6]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d110      	bne.n	800d09c <USBD_StdItfReq+0xc0>
 800d07a:	7bfb      	ldrb	r3, [r7, #15]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d10d      	bne.n	800d09c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d080:	6878      	ldr	r0, [r7, #4]
 800d082:	f000 fdfd 	bl	800dc80 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d086:	e009      	b.n	800d09c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d088:	6839      	ldr	r1, [r7, #0]
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f000 fd21 	bl	800dad2 <USBD_CtlError>
          break;
 800d090:	e004      	b.n	800d09c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d092:	6839      	ldr	r1, [r7, #0]
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f000 fd1c 	bl	800dad2 <USBD_CtlError>
          break;
 800d09a:	e000      	b.n	800d09e <USBD_StdItfReq+0xc2>
          break;
 800d09c:	bf00      	nop
      }
      break;
 800d09e:	e004      	b.n	800d0aa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d0a0:	6839      	ldr	r1, [r7, #0]
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	f000 fd15 	bl	800dad2 <USBD_CtlError>
      break;
 800d0a8:	bf00      	nop
  }

  return ret;
 800d0aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	3710      	adds	r7, #16
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}

0800d0b4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b084      	sub	sp, #16
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	889b      	ldrh	r3, [r3, #4]
 800d0c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	781b      	ldrb	r3, [r3, #0]
 800d0cc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d0d0:	2b40      	cmp	r3, #64	@ 0x40
 800d0d2:	d007      	beq.n	800d0e4 <USBD_StdEPReq+0x30>
 800d0d4:	2b40      	cmp	r3, #64	@ 0x40
 800d0d6:	f200 817f 	bhi.w	800d3d8 <USBD_StdEPReq+0x324>
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d02a      	beq.n	800d134 <USBD_StdEPReq+0x80>
 800d0de:	2b20      	cmp	r3, #32
 800d0e0:	f040 817a 	bne.w	800d3d8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d0e4:	7bbb      	ldrb	r3, [r7, #14]
 800d0e6:	4619      	mov	r1, r3
 800d0e8:	6878      	ldr	r0, [r7, #4]
 800d0ea:	f7ff fe85 	bl	800cdf8 <USBD_CoreFindEP>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d0f2:	7b7b      	ldrb	r3, [r7, #13]
 800d0f4:	2bff      	cmp	r3, #255	@ 0xff
 800d0f6:	f000 8174 	beq.w	800d3e2 <USBD_StdEPReq+0x32e>
 800d0fa:	7b7b      	ldrb	r3, [r7, #13]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	f040 8170 	bne.w	800d3e2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d102:	7b7a      	ldrb	r2, [r7, #13]
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d10a:	7b7a      	ldrb	r2, [r7, #13]
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	32ae      	adds	r2, #174	@ 0xae
 800d110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d114:	689b      	ldr	r3, [r3, #8]
 800d116:	2b00      	cmp	r3, #0
 800d118:	f000 8163 	beq.w	800d3e2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d11c:	7b7a      	ldrb	r2, [r7, #13]
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	32ae      	adds	r2, #174	@ 0xae
 800d122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d126:	689b      	ldr	r3, [r3, #8]
 800d128:	6839      	ldr	r1, [r7, #0]
 800d12a:	6878      	ldr	r0, [r7, #4]
 800d12c:	4798      	blx	r3
 800d12e:	4603      	mov	r3, r0
 800d130:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d132:	e156      	b.n	800d3e2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	785b      	ldrb	r3, [r3, #1]
 800d138:	2b03      	cmp	r3, #3
 800d13a:	d008      	beq.n	800d14e <USBD_StdEPReq+0x9a>
 800d13c:	2b03      	cmp	r3, #3
 800d13e:	f300 8145 	bgt.w	800d3cc <USBD_StdEPReq+0x318>
 800d142:	2b00      	cmp	r3, #0
 800d144:	f000 809b 	beq.w	800d27e <USBD_StdEPReq+0x1ca>
 800d148:	2b01      	cmp	r3, #1
 800d14a:	d03c      	beq.n	800d1c6 <USBD_StdEPReq+0x112>
 800d14c:	e13e      	b.n	800d3cc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d154:	b2db      	uxtb	r3, r3
 800d156:	2b02      	cmp	r3, #2
 800d158:	d002      	beq.n	800d160 <USBD_StdEPReq+0xac>
 800d15a:	2b03      	cmp	r3, #3
 800d15c:	d016      	beq.n	800d18c <USBD_StdEPReq+0xd8>
 800d15e:	e02c      	b.n	800d1ba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d160:	7bbb      	ldrb	r3, [r7, #14]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d00d      	beq.n	800d182 <USBD_StdEPReq+0xce>
 800d166:	7bbb      	ldrb	r3, [r7, #14]
 800d168:	2b80      	cmp	r3, #128	@ 0x80
 800d16a:	d00a      	beq.n	800d182 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d16c:	7bbb      	ldrb	r3, [r7, #14]
 800d16e:	4619      	mov	r1, r3
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f001 f98f 	bl	800e494 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d176:	2180      	movs	r1, #128	@ 0x80
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	f001 f98b 	bl	800e494 <USBD_LL_StallEP>
 800d17e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d180:	e020      	b.n	800d1c4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d182:	6839      	ldr	r1, [r7, #0]
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f000 fca4 	bl	800dad2 <USBD_CtlError>
              break;
 800d18a:	e01b      	b.n	800d1c4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	885b      	ldrh	r3, [r3, #2]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d10e      	bne.n	800d1b2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d194:	7bbb      	ldrb	r3, [r7, #14]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d00b      	beq.n	800d1b2 <USBD_StdEPReq+0xfe>
 800d19a:	7bbb      	ldrb	r3, [r7, #14]
 800d19c:	2b80      	cmp	r3, #128	@ 0x80
 800d19e:	d008      	beq.n	800d1b2 <USBD_StdEPReq+0xfe>
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	88db      	ldrh	r3, [r3, #6]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d104      	bne.n	800d1b2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d1a8:	7bbb      	ldrb	r3, [r7, #14]
 800d1aa:	4619      	mov	r1, r3
 800d1ac:	6878      	ldr	r0, [r7, #4]
 800d1ae:	f001 f971 	bl	800e494 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f000 fd64 	bl	800dc80 <USBD_CtlSendStatus>

              break;
 800d1b8:	e004      	b.n	800d1c4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d1ba:	6839      	ldr	r1, [r7, #0]
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f000 fc88 	bl	800dad2 <USBD_CtlError>
              break;
 800d1c2:	bf00      	nop
          }
          break;
 800d1c4:	e107      	b.n	800d3d6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d1cc:	b2db      	uxtb	r3, r3
 800d1ce:	2b02      	cmp	r3, #2
 800d1d0:	d002      	beq.n	800d1d8 <USBD_StdEPReq+0x124>
 800d1d2:	2b03      	cmp	r3, #3
 800d1d4:	d016      	beq.n	800d204 <USBD_StdEPReq+0x150>
 800d1d6:	e04b      	b.n	800d270 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d1d8:	7bbb      	ldrb	r3, [r7, #14]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d00d      	beq.n	800d1fa <USBD_StdEPReq+0x146>
 800d1de:	7bbb      	ldrb	r3, [r7, #14]
 800d1e0:	2b80      	cmp	r3, #128	@ 0x80
 800d1e2:	d00a      	beq.n	800d1fa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d1e4:	7bbb      	ldrb	r3, [r7, #14]
 800d1e6:	4619      	mov	r1, r3
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f001 f953 	bl	800e494 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d1ee:	2180      	movs	r1, #128	@ 0x80
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f001 f94f 	bl	800e494 <USBD_LL_StallEP>
 800d1f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d1f8:	e040      	b.n	800d27c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d1fa:	6839      	ldr	r1, [r7, #0]
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f000 fc68 	bl	800dad2 <USBD_CtlError>
              break;
 800d202:	e03b      	b.n	800d27c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	885b      	ldrh	r3, [r3, #2]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d136      	bne.n	800d27a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d20c:	7bbb      	ldrb	r3, [r7, #14]
 800d20e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d212:	2b00      	cmp	r3, #0
 800d214:	d004      	beq.n	800d220 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d216:	7bbb      	ldrb	r3, [r7, #14]
 800d218:	4619      	mov	r1, r3
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f001 f959 	bl	800e4d2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f000 fd2d 	bl	800dc80 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d226:	7bbb      	ldrb	r3, [r7, #14]
 800d228:	4619      	mov	r1, r3
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f7ff fde4 	bl	800cdf8 <USBD_CoreFindEP>
 800d230:	4603      	mov	r3, r0
 800d232:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d234:	7b7b      	ldrb	r3, [r7, #13]
 800d236:	2bff      	cmp	r3, #255	@ 0xff
 800d238:	d01f      	beq.n	800d27a <USBD_StdEPReq+0x1c6>
 800d23a:	7b7b      	ldrb	r3, [r7, #13]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d11c      	bne.n	800d27a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d240:	7b7a      	ldrb	r2, [r7, #13]
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d248:	7b7a      	ldrb	r2, [r7, #13]
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	32ae      	adds	r2, #174	@ 0xae
 800d24e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d252:	689b      	ldr	r3, [r3, #8]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d010      	beq.n	800d27a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d258:	7b7a      	ldrb	r2, [r7, #13]
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	32ae      	adds	r2, #174	@ 0xae
 800d25e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d262:	689b      	ldr	r3, [r3, #8]
 800d264:	6839      	ldr	r1, [r7, #0]
 800d266:	6878      	ldr	r0, [r7, #4]
 800d268:	4798      	blx	r3
 800d26a:	4603      	mov	r3, r0
 800d26c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d26e:	e004      	b.n	800d27a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d270:	6839      	ldr	r1, [r7, #0]
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f000 fc2d 	bl	800dad2 <USBD_CtlError>
              break;
 800d278:	e000      	b.n	800d27c <USBD_StdEPReq+0x1c8>
              break;
 800d27a:	bf00      	nop
          }
          break;
 800d27c:	e0ab      	b.n	800d3d6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d284:	b2db      	uxtb	r3, r3
 800d286:	2b02      	cmp	r3, #2
 800d288:	d002      	beq.n	800d290 <USBD_StdEPReq+0x1dc>
 800d28a:	2b03      	cmp	r3, #3
 800d28c:	d032      	beq.n	800d2f4 <USBD_StdEPReq+0x240>
 800d28e:	e097      	b.n	800d3c0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d290:	7bbb      	ldrb	r3, [r7, #14]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d007      	beq.n	800d2a6 <USBD_StdEPReq+0x1f2>
 800d296:	7bbb      	ldrb	r3, [r7, #14]
 800d298:	2b80      	cmp	r3, #128	@ 0x80
 800d29a:	d004      	beq.n	800d2a6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d29c:	6839      	ldr	r1, [r7, #0]
 800d29e:	6878      	ldr	r0, [r7, #4]
 800d2a0:	f000 fc17 	bl	800dad2 <USBD_CtlError>
                break;
 800d2a4:	e091      	b.n	800d3ca <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d2a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	da0b      	bge.n	800d2c6 <USBD_StdEPReq+0x212>
 800d2ae:	7bbb      	ldrb	r3, [r7, #14]
 800d2b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d2b4:	4613      	mov	r3, r2
 800d2b6:	009b      	lsls	r3, r3, #2
 800d2b8:	4413      	add	r3, r2
 800d2ba:	009b      	lsls	r3, r3, #2
 800d2bc:	3310      	adds	r3, #16
 800d2be:	687a      	ldr	r2, [r7, #4]
 800d2c0:	4413      	add	r3, r2
 800d2c2:	3304      	adds	r3, #4
 800d2c4:	e00b      	b.n	800d2de <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d2c6:	7bbb      	ldrb	r3, [r7, #14]
 800d2c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d2cc:	4613      	mov	r3, r2
 800d2ce:	009b      	lsls	r3, r3, #2
 800d2d0:	4413      	add	r3, r2
 800d2d2:	009b      	lsls	r3, r3, #2
 800d2d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d2d8:	687a      	ldr	r2, [r7, #4]
 800d2da:	4413      	add	r3, r2
 800d2dc:	3304      	adds	r3, #4
 800d2de:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d2e6:	68bb      	ldr	r3, [r7, #8]
 800d2e8:	2202      	movs	r2, #2
 800d2ea:	4619      	mov	r1, r3
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f000 fc6d 	bl	800dbcc <USBD_CtlSendData>
              break;
 800d2f2:	e06a      	b.n	800d3ca <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d2f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	da11      	bge.n	800d320 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d2fc:	7bbb      	ldrb	r3, [r7, #14]
 800d2fe:	f003 020f 	and.w	r2, r3, #15
 800d302:	6879      	ldr	r1, [r7, #4]
 800d304:	4613      	mov	r3, r2
 800d306:	009b      	lsls	r3, r3, #2
 800d308:	4413      	add	r3, r2
 800d30a:	009b      	lsls	r3, r3, #2
 800d30c:	440b      	add	r3, r1
 800d30e:	3324      	adds	r3, #36	@ 0x24
 800d310:	881b      	ldrh	r3, [r3, #0]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d117      	bne.n	800d346 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d316:	6839      	ldr	r1, [r7, #0]
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f000 fbda 	bl	800dad2 <USBD_CtlError>
                  break;
 800d31e:	e054      	b.n	800d3ca <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d320:	7bbb      	ldrb	r3, [r7, #14]
 800d322:	f003 020f 	and.w	r2, r3, #15
 800d326:	6879      	ldr	r1, [r7, #4]
 800d328:	4613      	mov	r3, r2
 800d32a:	009b      	lsls	r3, r3, #2
 800d32c:	4413      	add	r3, r2
 800d32e:	009b      	lsls	r3, r3, #2
 800d330:	440b      	add	r3, r1
 800d332:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d336:	881b      	ldrh	r3, [r3, #0]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d104      	bne.n	800d346 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d33c:	6839      	ldr	r1, [r7, #0]
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f000 fbc7 	bl	800dad2 <USBD_CtlError>
                  break;
 800d344:	e041      	b.n	800d3ca <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d346:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	da0b      	bge.n	800d366 <USBD_StdEPReq+0x2b2>
 800d34e:	7bbb      	ldrb	r3, [r7, #14]
 800d350:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d354:	4613      	mov	r3, r2
 800d356:	009b      	lsls	r3, r3, #2
 800d358:	4413      	add	r3, r2
 800d35a:	009b      	lsls	r3, r3, #2
 800d35c:	3310      	adds	r3, #16
 800d35e:	687a      	ldr	r2, [r7, #4]
 800d360:	4413      	add	r3, r2
 800d362:	3304      	adds	r3, #4
 800d364:	e00b      	b.n	800d37e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d366:	7bbb      	ldrb	r3, [r7, #14]
 800d368:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d36c:	4613      	mov	r3, r2
 800d36e:	009b      	lsls	r3, r3, #2
 800d370:	4413      	add	r3, r2
 800d372:	009b      	lsls	r3, r3, #2
 800d374:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d378:	687a      	ldr	r2, [r7, #4]
 800d37a:	4413      	add	r3, r2
 800d37c:	3304      	adds	r3, #4
 800d37e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d380:	7bbb      	ldrb	r3, [r7, #14]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d002      	beq.n	800d38c <USBD_StdEPReq+0x2d8>
 800d386:	7bbb      	ldrb	r3, [r7, #14]
 800d388:	2b80      	cmp	r3, #128	@ 0x80
 800d38a:	d103      	bne.n	800d394 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	2200      	movs	r2, #0
 800d390:	601a      	str	r2, [r3, #0]
 800d392:	e00e      	b.n	800d3b2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d394:	7bbb      	ldrb	r3, [r7, #14]
 800d396:	4619      	mov	r1, r3
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f001 f8b9 	bl	800e510 <USBD_LL_IsStallEP>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d003      	beq.n	800d3ac <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	2201      	movs	r2, #1
 800d3a8:	601a      	str	r2, [r3, #0]
 800d3aa:	e002      	b.n	800d3b2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	2202      	movs	r2, #2
 800d3b6:	4619      	mov	r1, r3
 800d3b8:	6878      	ldr	r0, [r7, #4]
 800d3ba:	f000 fc07 	bl	800dbcc <USBD_CtlSendData>
              break;
 800d3be:	e004      	b.n	800d3ca <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d3c0:	6839      	ldr	r1, [r7, #0]
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	f000 fb85 	bl	800dad2 <USBD_CtlError>
              break;
 800d3c8:	bf00      	nop
          }
          break;
 800d3ca:	e004      	b.n	800d3d6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d3cc:	6839      	ldr	r1, [r7, #0]
 800d3ce:	6878      	ldr	r0, [r7, #4]
 800d3d0:	f000 fb7f 	bl	800dad2 <USBD_CtlError>
          break;
 800d3d4:	bf00      	nop
      }
      break;
 800d3d6:	e005      	b.n	800d3e4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d3d8:	6839      	ldr	r1, [r7, #0]
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f000 fb79 	bl	800dad2 <USBD_CtlError>
      break;
 800d3e0:	e000      	b.n	800d3e4 <USBD_StdEPReq+0x330>
      break;
 800d3e2:	bf00      	nop
  }

  return ret;
 800d3e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3710      	adds	r7, #16
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}
	...

0800d3f0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b084      	sub	sp, #16
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
 800d3f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d3fe:	2300      	movs	r3, #0
 800d400:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d402:	2300      	movs	r3, #0
 800d404:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	885b      	ldrh	r3, [r3, #2]
 800d40a:	0a1b      	lsrs	r3, r3, #8
 800d40c:	b29b      	uxth	r3, r3
 800d40e:	3b01      	subs	r3, #1
 800d410:	2b0e      	cmp	r3, #14
 800d412:	f200 8152 	bhi.w	800d6ba <USBD_GetDescriptor+0x2ca>
 800d416:	a201      	add	r2, pc, #4	@ (adr r2, 800d41c <USBD_GetDescriptor+0x2c>)
 800d418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d41c:	0800d48d 	.word	0x0800d48d
 800d420:	0800d4a5 	.word	0x0800d4a5
 800d424:	0800d4e5 	.word	0x0800d4e5
 800d428:	0800d6bb 	.word	0x0800d6bb
 800d42c:	0800d6bb 	.word	0x0800d6bb
 800d430:	0800d65b 	.word	0x0800d65b
 800d434:	0800d687 	.word	0x0800d687
 800d438:	0800d6bb 	.word	0x0800d6bb
 800d43c:	0800d6bb 	.word	0x0800d6bb
 800d440:	0800d6bb 	.word	0x0800d6bb
 800d444:	0800d6bb 	.word	0x0800d6bb
 800d448:	0800d6bb 	.word	0x0800d6bb
 800d44c:	0800d6bb 	.word	0x0800d6bb
 800d450:	0800d6bb 	.word	0x0800d6bb
 800d454:	0800d459 	.word	0x0800d459
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d45e:	69db      	ldr	r3, [r3, #28]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d00b      	beq.n	800d47c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d46a:	69db      	ldr	r3, [r3, #28]
 800d46c:	687a      	ldr	r2, [r7, #4]
 800d46e:	7c12      	ldrb	r2, [r2, #16]
 800d470:	f107 0108 	add.w	r1, r7, #8
 800d474:	4610      	mov	r0, r2
 800d476:	4798      	blx	r3
 800d478:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d47a:	e126      	b.n	800d6ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d47c:	6839      	ldr	r1, [r7, #0]
 800d47e:	6878      	ldr	r0, [r7, #4]
 800d480:	f000 fb27 	bl	800dad2 <USBD_CtlError>
        err++;
 800d484:	7afb      	ldrb	r3, [r7, #11]
 800d486:	3301      	adds	r3, #1
 800d488:	72fb      	strb	r3, [r7, #11]
      break;
 800d48a:	e11e      	b.n	800d6ca <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	687a      	ldr	r2, [r7, #4]
 800d496:	7c12      	ldrb	r2, [r2, #16]
 800d498:	f107 0108 	add.w	r1, r7, #8
 800d49c:	4610      	mov	r0, r2
 800d49e:	4798      	blx	r3
 800d4a0:	60f8      	str	r0, [r7, #12]
      break;
 800d4a2:	e112      	b.n	800d6ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	7c1b      	ldrb	r3, [r3, #16]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d10d      	bne.n	800d4c8 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d4b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4b4:	f107 0208 	add.w	r2, r7, #8
 800d4b8:	4610      	mov	r0, r2
 800d4ba:	4798      	blx	r3
 800d4bc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	3301      	adds	r3, #1
 800d4c2:	2202      	movs	r2, #2
 800d4c4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d4c6:	e100      	b.n	800d6ca <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d4ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4d0:	f107 0208 	add.w	r2, r7, #8
 800d4d4:	4610      	mov	r0, r2
 800d4d6:	4798      	blx	r3
 800d4d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	3301      	adds	r3, #1
 800d4de:	2202      	movs	r2, #2
 800d4e0:	701a      	strb	r2, [r3, #0]
      break;
 800d4e2:	e0f2      	b.n	800d6ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	885b      	ldrh	r3, [r3, #2]
 800d4e8:	b2db      	uxtb	r3, r3
 800d4ea:	2b05      	cmp	r3, #5
 800d4ec:	f200 80ac 	bhi.w	800d648 <USBD_GetDescriptor+0x258>
 800d4f0:	a201      	add	r2, pc, #4	@ (adr r2, 800d4f8 <USBD_GetDescriptor+0x108>)
 800d4f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4f6:	bf00      	nop
 800d4f8:	0800d511 	.word	0x0800d511
 800d4fc:	0800d545 	.word	0x0800d545
 800d500:	0800d579 	.word	0x0800d579
 800d504:	0800d5ad 	.word	0x0800d5ad
 800d508:	0800d5e1 	.word	0x0800d5e1
 800d50c:	0800d615 	.word	0x0800d615
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d516:	685b      	ldr	r3, [r3, #4]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d00b      	beq.n	800d534 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d522:	685b      	ldr	r3, [r3, #4]
 800d524:	687a      	ldr	r2, [r7, #4]
 800d526:	7c12      	ldrb	r2, [r2, #16]
 800d528:	f107 0108 	add.w	r1, r7, #8
 800d52c:	4610      	mov	r0, r2
 800d52e:	4798      	blx	r3
 800d530:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d532:	e091      	b.n	800d658 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d534:	6839      	ldr	r1, [r7, #0]
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f000 facb 	bl	800dad2 <USBD_CtlError>
            err++;
 800d53c:	7afb      	ldrb	r3, [r7, #11]
 800d53e:	3301      	adds	r3, #1
 800d540:	72fb      	strb	r3, [r7, #11]
          break;
 800d542:	e089      	b.n	800d658 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d54a:	689b      	ldr	r3, [r3, #8]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d00b      	beq.n	800d568 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d556:	689b      	ldr	r3, [r3, #8]
 800d558:	687a      	ldr	r2, [r7, #4]
 800d55a:	7c12      	ldrb	r2, [r2, #16]
 800d55c:	f107 0108 	add.w	r1, r7, #8
 800d560:	4610      	mov	r0, r2
 800d562:	4798      	blx	r3
 800d564:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d566:	e077      	b.n	800d658 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d568:	6839      	ldr	r1, [r7, #0]
 800d56a:	6878      	ldr	r0, [r7, #4]
 800d56c:	f000 fab1 	bl	800dad2 <USBD_CtlError>
            err++;
 800d570:	7afb      	ldrb	r3, [r7, #11]
 800d572:	3301      	adds	r3, #1
 800d574:	72fb      	strb	r3, [r7, #11]
          break;
 800d576:	e06f      	b.n	800d658 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d57e:	68db      	ldr	r3, [r3, #12]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d00b      	beq.n	800d59c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d58a:	68db      	ldr	r3, [r3, #12]
 800d58c:	687a      	ldr	r2, [r7, #4]
 800d58e:	7c12      	ldrb	r2, [r2, #16]
 800d590:	f107 0108 	add.w	r1, r7, #8
 800d594:	4610      	mov	r0, r2
 800d596:	4798      	blx	r3
 800d598:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d59a:	e05d      	b.n	800d658 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d59c:	6839      	ldr	r1, [r7, #0]
 800d59e:	6878      	ldr	r0, [r7, #4]
 800d5a0:	f000 fa97 	bl	800dad2 <USBD_CtlError>
            err++;
 800d5a4:	7afb      	ldrb	r3, [r7, #11]
 800d5a6:	3301      	adds	r3, #1
 800d5a8:	72fb      	strb	r3, [r7, #11]
          break;
 800d5aa:	e055      	b.n	800d658 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5b2:	691b      	ldr	r3, [r3, #16]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d00b      	beq.n	800d5d0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5be:	691b      	ldr	r3, [r3, #16]
 800d5c0:	687a      	ldr	r2, [r7, #4]
 800d5c2:	7c12      	ldrb	r2, [r2, #16]
 800d5c4:	f107 0108 	add.w	r1, r7, #8
 800d5c8:	4610      	mov	r0, r2
 800d5ca:	4798      	blx	r3
 800d5cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d5ce:	e043      	b.n	800d658 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d5d0:	6839      	ldr	r1, [r7, #0]
 800d5d2:	6878      	ldr	r0, [r7, #4]
 800d5d4:	f000 fa7d 	bl	800dad2 <USBD_CtlError>
            err++;
 800d5d8:	7afb      	ldrb	r3, [r7, #11]
 800d5da:	3301      	adds	r3, #1
 800d5dc:	72fb      	strb	r3, [r7, #11]
          break;
 800d5de:	e03b      	b.n	800d658 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5e6:	695b      	ldr	r3, [r3, #20]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d00b      	beq.n	800d604 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5f2:	695b      	ldr	r3, [r3, #20]
 800d5f4:	687a      	ldr	r2, [r7, #4]
 800d5f6:	7c12      	ldrb	r2, [r2, #16]
 800d5f8:	f107 0108 	add.w	r1, r7, #8
 800d5fc:	4610      	mov	r0, r2
 800d5fe:	4798      	blx	r3
 800d600:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d602:	e029      	b.n	800d658 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d604:	6839      	ldr	r1, [r7, #0]
 800d606:	6878      	ldr	r0, [r7, #4]
 800d608:	f000 fa63 	bl	800dad2 <USBD_CtlError>
            err++;
 800d60c:	7afb      	ldrb	r3, [r7, #11]
 800d60e:	3301      	adds	r3, #1
 800d610:	72fb      	strb	r3, [r7, #11]
          break;
 800d612:	e021      	b.n	800d658 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d61a:	699b      	ldr	r3, [r3, #24]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d00b      	beq.n	800d638 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d626:	699b      	ldr	r3, [r3, #24]
 800d628:	687a      	ldr	r2, [r7, #4]
 800d62a:	7c12      	ldrb	r2, [r2, #16]
 800d62c:	f107 0108 	add.w	r1, r7, #8
 800d630:	4610      	mov	r0, r2
 800d632:	4798      	blx	r3
 800d634:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d636:	e00f      	b.n	800d658 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d638:	6839      	ldr	r1, [r7, #0]
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f000 fa49 	bl	800dad2 <USBD_CtlError>
            err++;
 800d640:	7afb      	ldrb	r3, [r7, #11]
 800d642:	3301      	adds	r3, #1
 800d644:	72fb      	strb	r3, [r7, #11]
          break;
 800d646:	e007      	b.n	800d658 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d648:	6839      	ldr	r1, [r7, #0]
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f000 fa41 	bl	800dad2 <USBD_CtlError>
          err++;
 800d650:	7afb      	ldrb	r3, [r7, #11]
 800d652:	3301      	adds	r3, #1
 800d654:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d656:	bf00      	nop
      }
      break;
 800d658:	e037      	b.n	800d6ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	7c1b      	ldrb	r3, [r3, #16]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d109      	bne.n	800d676 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d66a:	f107 0208 	add.w	r2, r7, #8
 800d66e:	4610      	mov	r0, r2
 800d670:	4798      	blx	r3
 800d672:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d674:	e029      	b.n	800d6ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d676:	6839      	ldr	r1, [r7, #0]
 800d678:	6878      	ldr	r0, [r7, #4]
 800d67a:	f000 fa2a 	bl	800dad2 <USBD_CtlError>
        err++;
 800d67e:	7afb      	ldrb	r3, [r7, #11]
 800d680:	3301      	adds	r3, #1
 800d682:	72fb      	strb	r3, [r7, #11]
      break;
 800d684:	e021      	b.n	800d6ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	7c1b      	ldrb	r3, [r3, #16]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d10d      	bne.n	800d6aa <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d696:	f107 0208 	add.w	r2, r7, #8
 800d69a:	4610      	mov	r0, r2
 800d69c:	4798      	blx	r3
 800d69e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	3301      	adds	r3, #1
 800d6a4:	2207      	movs	r2, #7
 800d6a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d6a8:	e00f      	b.n	800d6ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d6aa:	6839      	ldr	r1, [r7, #0]
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f000 fa10 	bl	800dad2 <USBD_CtlError>
        err++;
 800d6b2:	7afb      	ldrb	r3, [r7, #11]
 800d6b4:	3301      	adds	r3, #1
 800d6b6:	72fb      	strb	r3, [r7, #11]
      break;
 800d6b8:	e007      	b.n	800d6ca <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d6ba:	6839      	ldr	r1, [r7, #0]
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f000 fa08 	bl	800dad2 <USBD_CtlError>
      err++;
 800d6c2:	7afb      	ldrb	r3, [r7, #11]
 800d6c4:	3301      	adds	r3, #1
 800d6c6:	72fb      	strb	r3, [r7, #11]
      break;
 800d6c8:	bf00      	nop
  }

  if (err != 0U)
 800d6ca:	7afb      	ldrb	r3, [r7, #11]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d11e      	bne.n	800d70e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	88db      	ldrh	r3, [r3, #6]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d016      	beq.n	800d706 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d6d8:	893b      	ldrh	r3, [r7, #8]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d00e      	beq.n	800d6fc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	88da      	ldrh	r2, [r3, #6]
 800d6e2:	893b      	ldrh	r3, [r7, #8]
 800d6e4:	4293      	cmp	r3, r2
 800d6e6:	bf28      	it	cs
 800d6e8:	4613      	movcs	r3, r2
 800d6ea:	b29b      	uxth	r3, r3
 800d6ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d6ee:	893b      	ldrh	r3, [r7, #8]
 800d6f0:	461a      	mov	r2, r3
 800d6f2:	68f9      	ldr	r1, [r7, #12]
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	f000 fa69 	bl	800dbcc <USBD_CtlSendData>
 800d6fa:	e009      	b.n	800d710 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d6fc:	6839      	ldr	r1, [r7, #0]
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	f000 f9e7 	bl	800dad2 <USBD_CtlError>
 800d704:	e004      	b.n	800d710 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f000 faba 	bl	800dc80 <USBD_CtlSendStatus>
 800d70c:	e000      	b.n	800d710 <USBD_GetDescriptor+0x320>
    return;
 800d70e:	bf00      	nop
  }
}
 800d710:	3710      	adds	r7, #16
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}
 800d716:	bf00      	nop

0800d718 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b084      	sub	sp, #16
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
 800d720:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	889b      	ldrh	r3, [r3, #4]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d131      	bne.n	800d78e <USBD_SetAddress+0x76>
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	88db      	ldrh	r3, [r3, #6]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d12d      	bne.n	800d78e <USBD_SetAddress+0x76>
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	885b      	ldrh	r3, [r3, #2]
 800d736:	2b7f      	cmp	r3, #127	@ 0x7f
 800d738:	d829      	bhi.n	800d78e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	885b      	ldrh	r3, [r3, #2]
 800d73e:	b2db      	uxtb	r3, r3
 800d740:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d744:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d74c:	b2db      	uxtb	r3, r3
 800d74e:	2b03      	cmp	r3, #3
 800d750:	d104      	bne.n	800d75c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d752:	6839      	ldr	r1, [r7, #0]
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	f000 f9bc 	bl	800dad2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d75a:	e01d      	b.n	800d798 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	7bfa      	ldrb	r2, [r7, #15]
 800d760:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d764:	7bfb      	ldrb	r3, [r7, #15]
 800d766:	4619      	mov	r1, r3
 800d768:	6878      	ldr	r0, [r7, #4]
 800d76a:	f000 fefd 	bl	800e568 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f000 fa86 	bl	800dc80 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d774:	7bfb      	ldrb	r3, [r7, #15]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d004      	beq.n	800d784 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2202      	movs	r2, #2
 800d77e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d782:	e009      	b.n	800d798 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2201      	movs	r2, #1
 800d788:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d78c:	e004      	b.n	800d798 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d78e:	6839      	ldr	r1, [r7, #0]
 800d790:	6878      	ldr	r0, [r7, #4]
 800d792:	f000 f99e 	bl	800dad2 <USBD_CtlError>
  }
}
 800d796:	bf00      	nop
 800d798:	bf00      	nop
 800d79a:	3710      	adds	r7, #16
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}

0800d7a0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b084      	sub	sp, #16
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
 800d7a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	885b      	ldrh	r3, [r3, #2]
 800d7b2:	b2da      	uxtb	r2, r3
 800d7b4:	4b4e      	ldr	r3, [pc, #312]	@ (800d8f0 <USBD_SetConfig+0x150>)
 800d7b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d7b8:	4b4d      	ldr	r3, [pc, #308]	@ (800d8f0 <USBD_SetConfig+0x150>)
 800d7ba:	781b      	ldrb	r3, [r3, #0]
 800d7bc:	2b01      	cmp	r3, #1
 800d7be:	d905      	bls.n	800d7cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d7c0:	6839      	ldr	r1, [r7, #0]
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f000 f985 	bl	800dad2 <USBD_CtlError>
    return USBD_FAIL;
 800d7c8:	2303      	movs	r3, #3
 800d7ca:	e08c      	b.n	800d8e6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d7d2:	b2db      	uxtb	r3, r3
 800d7d4:	2b02      	cmp	r3, #2
 800d7d6:	d002      	beq.n	800d7de <USBD_SetConfig+0x3e>
 800d7d8:	2b03      	cmp	r3, #3
 800d7da:	d029      	beq.n	800d830 <USBD_SetConfig+0x90>
 800d7dc:	e075      	b.n	800d8ca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d7de:	4b44      	ldr	r3, [pc, #272]	@ (800d8f0 <USBD_SetConfig+0x150>)
 800d7e0:	781b      	ldrb	r3, [r3, #0]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d020      	beq.n	800d828 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d7e6:	4b42      	ldr	r3, [pc, #264]	@ (800d8f0 <USBD_SetConfig+0x150>)
 800d7e8:	781b      	ldrb	r3, [r3, #0]
 800d7ea:	461a      	mov	r2, r3
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d7f0:	4b3f      	ldr	r3, [pc, #252]	@ (800d8f0 <USBD_SetConfig+0x150>)
 800d7f2:	781b      	ldrb	r3, [r3, #0]
 800d7f4:	4619      	mov	r1, r3
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	f7ff f84b 	bl	800c892 <USBD_SetClassConfig>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d800:	7bfb      	ldrb	r3, [r7, #15]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d008      	beq.n	800d818 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d806:	6839      	ldr	r1, [r7, #0]
 800d808:	6878      	ldr	r0, [r7, #4]
 800d80a:	f000 f962 	bl	800dad2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2202      	movs	r2, #2
 800d812:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d816:	e065      	b.n	800d8e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f000 fa31 	bl	800dc80 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2203      	movs	r2, #3
 800d822:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d826:	e05d      	b.n	800d8e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f000 fa29 	bl	800dc80 <USBD_CtlSendStatus>
      break;
 800d82e:	e059      	b.n	800d8e4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d830:	4b2f      	ldr	r3, [pc, #188]	@ (800d8f0 <USBD_SetConfig+0x150>)
 800d832:	781b      	ldrb	r3, [r3, #0]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d112      	bne.n	800d85e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2202      	movs	r2, #2
 800d83c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d840:	4b2b      	ldr	r3, [pc, #172]	@ (800d8f0 <USBD_SetConfig+0x150>)
 800d842:	781b      	ldrb	r3, [r3, #0]
 800d844:	461a      	mov	r2, r3
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d84a:	4b29      	ldr	r3, [pc, #164]	@ (800d8f0 <USBD_SetConfig+0x150>)
 800d84c:	781b      	ldrb	r3, [r3, #0]
 800d84e:	4619      	mov	r1, r3
 800d850:	6878      	ldr	r0, [r7, #4]
 800d852:	f7ff f83a 	bl	800c8ca <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d856:	6878      	ldr	r0, [r7, #4]
 800d858:	f000 fa12 	bl	800dc80 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d85c:	e042      	b.n	800d8e4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d85e:	4b24      	ldr	r3, [pc, #144]	@ (800d8f0 <USBD_SetConfig+0x150>)
 800d860:	781b      	ldrb	r3, [r3, #0]
 800d862:	461a      	mov	r2, r3
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	685b      	ldr	r3, [r3, #4]
 800d868:	429a      	cmp	r2, r3
 800d86a:	d02a      	beq.n	800d8c2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	685b      	ldr	r3, [r3, #4]
 800d870:	b2db      	uxtb	r3, r3
 800d872:	4619      	mov	r1, r3
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f7ff f828 	bl	800c8ca <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d87a:	4b1d      	ldr	r3, [pc, #116]	@ (800d8f0 <USBD_SetConfig+0x150>)
 800d87c:	781b      	ldrb	r3, [r3, #0]
 800d87e:	461a      	mov	r2, r3
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d884:	4b1a      	ldr	r3, [pc, #104]	@ (800d8f0 <USBD_SetConfig+0x150>)
 800d886:	781b      	ldrb	r3, [r3, #0]
 800d888:	4619      	mov	r1, r3
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f7ff f801 	bl	800c892 <USBD_SetClassConfig>
 800d890:	4603      	mov	r3, r0
 800d892:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d894:	7bfb      	ldrb	r3, [r7, #15]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d00f      	beq.n	800d8ba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d89a:	6839      	ldr	r1, [r7, #0]
 800d89c:	6878      	ldr	r0, [r7, #4]
 800d89e:	f000 f918 	bl	800dad2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	685b      	ldr	r3, [r3, #4]
 800d8a6:	b2db      	uxtb	r3, r3
 800d8a8:	4619      	mov	r1, r3
 800d8aa:	6878      	ldr	r0, [r7, #4]
 800d8ac:	f7ff f80d 	bl	800c8ca <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2202      	movs	r2, #2
 800d8b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d8b8:	e014      	b.n	800d8e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	f000 f9e0 	bl	800dc80 <USBD_CtlSendStatus>
      break;
 800d8c0:	e010      	b.n	800d8e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	f000 f9dc 	bl	800dc80 <USBD_CtlSendStatus>
      break;
 800d8c8:	e00c      	b.n	800d8e4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d8ca:	6839      	ldr	r1, [r7, #0]
 800d8cc:	6878      	ldr	r0, [r7, #4]
 800d8ce:	f000 f900 	bl	800dad2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d8d2:	4b07      	ldr	r3, [pc, #28]	@ (800d8f0 <USBD_SetConfig+0x150>)
 800d8d4:	781b      	ldrb	r3, [r3, #0]
 800d8d6:	4619      	mov	r1, r3
 800d8d8:	6878      	ldr	r0, [r7, #4]
 800d8da:	f7fe fff6 	bl	800c8ca <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d8de:	2303      	movs	r3, #3
 800d8e0:	73fb      	strb	r3, [r7, #15]
      break;
 800d8e2:	bf00      	nop
  }

  return ret;
 800d8e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	3710      	adds	r7, #16
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}
 800d8ee:	bf00      	nop
 800d8f0:	20000730 	.word	0x20000730

0800d8f4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b082      	sub	sp, #8
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
 800d8fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	88db      	ldrh	r3, [r3, #6]
 800d902:	2b01      	cmp	r3, #1
 800d904:	d004      	beq.n	800d910 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d906:	6839      	ldr	r1, [r7, #0]
 800d908:	6878      	ldr	r0, [r7, #4]
 800d90a:	f000 f8e2 	bl	800dad2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d90e:	e023      	b.n	800d958 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d916:	b2db      	uxtb	r3, r3
 800d918:	2b02      	cmp	r3, #2
 800d91a:	dc02      	bgt.n	800d922 <USBD_GetConfig+0x2e>
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	dc03      	bgt.n	800d928 <USBD_GetConfig+0x34>
 800d920:	e015      	b.n	800d94e <USBD_GetConfig+0x5a>
 800d922:	2b03      	cmp	r3, #3
 800d924:	d00b      	beq.n	800d93e <USBD_GetConfig+0x4a>
 800d926:	e012      	b.n	800d94e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2200      	movs	r2, #0
 800d92c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	3308      	adds	r3, #8
 800d932:	2201      	movs	r2, #1
 800d934:	4619      	mov	r1, r3
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	f000 f948 	bl	800dbcc <USBD_CtlSendData>
        break;
 800d93c:	e00c      	b.n	800d958 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	3304      	adds	r3, #4
 800d942:	2201      	movs	r2, #1
 800d944:	4619      	mov	r1, r3
 800d946:	6878      	ldr	r0, [r7, #4]
 800d948:	f000 f940 	bl	800dbcc <USBD_CtlSendData>
        break;
 800d94c:	e004      	b.n	800d958 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d94e:	6839      	ldr	r1, [r7, #0]
 800d950:	6878      	ldr	r0, [r7, #4]
 800d952:	f000 f8be 	bl	800dad2 <USBD_CtlError>
        break;
 800d956:	bf00      	nop
}
 800d958:	bf00      	nop
 800d95a:	3708      	adds	r7, #8
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}

0800d960 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b082      	sub	sp, #8
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
 800d968:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d970:	b2db      	uxtb	r3, r3
 800d972:	3b01      	subs	r3, #1
 800d974:	2b02      	cmp	r3, #2
 800d976:	d81e      	bhi.n	800d9b6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	88db      	ldrh	r3, [r3, #6]
 800d97c:	2b02      	cmp	r3, #2
 800d97e:	d004      	beq.n	800d98a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d980:	6839      	ldr	r1, [r7, #0]
 800d982:	6878      	ldr	r0, [r7, #4]
 800d984:	f000 f8a5 	bl	800dad2 <USBD_CtlError>
        break;
 800d988:	e01a      	b.n	800d9c0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	2201      	movs	r2, #1
 800d98e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d996:	2b00      	cmp	r3, #0
 800d998:	d005      	beq.n	800d9a6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	68db      	ldr	r3, [r3, #12]
 800d99e:	f043 0202 	orr.w	r2, r3, #2
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	330c      	adds	r3, #12
 800d9aa:	2202      	movs	r2, #2
 800d9ac:	4619      	mov	r1, r3
 800d9ae:	6878      	ldr	r0, [r7, #4]
 800d9b0:	f000 f90c 	bl	800dbcc <USBD_CtlSendData>
      break;
 800d9b4:	e004      	b.n	800d9c0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d9b6:	6839      	ldr	r1, [r7, #0]
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f000 f88a 	bl	800dad2 <USBD_CtlError>
      break;
 800d9be:	bf00      	nop
  }
}
 800d9c0:	bf00      	nop
 800d9c2:	3708      	adds	r7, #8
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}

0800d9c8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b082      	sub	sp, #8
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
 800d9d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	885b      	ldrh	r3, [r3, #2]
 800d9d6:	2b01      	cmp	r3, #1
 800d9d8:	d107      	bne.n	800d9ea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2201      	movs	r2, #1
 800d9de:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d9e2:	6878      	ldr	r0, [r7, #4]
 800d9e4:	f000 f94c 	bl	800dc80 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d9e8:	e013      	b.n	800da12 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	885b      	ldrh	r3, [r3, #2]
 800d9ee:	2b02      	cmp	r3, #2
 800d9f0:	d10b      	bne.n	800da0a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	889b      	ldrh	r3, [r3, #4]
 800d9f6:	0a1b      	lsrs	r3, r3, #8
 800d9f8:	b29b      	uxth	r3, r3
 800d9fa:	b2da      	uxtb	r2, r3
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f000 f93c 	bl	800dc80 <USBD_CtlSendStatus>
}
 800da08:	e003      	b.n	800da12 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800da0a:	6839      	ldr	r1, [r7, #0]
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	f000 f860 	bl	800dad2 <USBD_CtlError>
}
 800da12:	bf00      	nop
 800da14:	3708      	adds	r7, #8
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}

0800da1a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da1a:	b580      	push	{r7, lr}
 800da1c:	b082      	sub	sp, #8
 800da1e:	af00      	add	r7, sp, #0
 800da20:	6078      	str	r0, [r7, #4]
 800da22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da2a:	b2db      	uxtb	r3, r3
 800da2c:	3b01      	subs	r3, #1
 800da2e:	2b02      	cmp	r3, #2
 800da30:	d80b      	bhi.n	800da4a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	885b      	ldrh	r3, [r3, #2]
 800da36:	2b01      	cmp	r3, #1
 800da38:	d10c      	bne.n	800da54 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	2200      	movs	r2, #0
 800da3e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f000 f91c 	bl	800dc80 <USBD_CtlSendStatus>
      }
      break;
 800da48:	e004      	b.n	800da54 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800da4a:	6839      	ldr	r1, [r7, #0]
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f000 f840 	bl	800dad2 <USBD_CtlError>
      break;
 800da52:	e000      	b.n	800da56 <USBD_ClrFeature+0x3c>
      break;
 800da54:	bf00      	nop
  }
}
 800da56:	bf00      	nop
 800da58:	3708      	adds	r7, #8
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}

0800da5e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800da5e:	b580      	push	{r7, lr}
 800da60:	b084      	sub	sp, #16
 800da62:	af00      	add	r7, sp, #0
 800da64:	6078      	str	r0, [r7, #4]
 800da66:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	781a      	ldrb	r2, [r3, #0]
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	3301      	adds	r3, #1
 800da78:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	781a      	ldrb	r2, [r3, #0]
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	3301      	adds	r3, #1
 800da86:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800da88:	68f8      	ldr	r0, [r7, #12]
 800da8a:	f7ff fa16 	bl	800ceba <SWAPBYTE>
 800da8e:	4603      	mov	r3, r0
 800da90:	461a      	mov	r2, r3
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	3301      	adds	r3, #1
 800da9a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	3301      	adds	r3, #1
 800daa0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800daa2:	68f8      	ldr	r0, [r7, #12]
 800daa4:	f7ff fa09 	bl	800ceba <SWAPBYTE>
 800daa8:	4603      	mov	r3, r0
 800daaa:	461a      	mov	r2, r3
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	3301      	adds	r3, #1
 800dab4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	3301      	adds	r3, #1
 800daba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800dabc:	68f8      	ldr	r0, [r7, #12]
 800dabe:	f7ff f9fc 	bl	800ceba <SWAPBYTE>
 800dac2:	4603      	mov	r3, r0
 800dac4:	461a      	mov	r2, r3
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	80da      	strh	r2, [r3, #6]
}
 800daca:	bf00      	nop
 800dacc:	3710      	adds	r7, #16
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd80      	pop	{r7, pc}

0800dad2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dad2:	b580      	push	{r7, lr}
 800dad4:	b082      	sub	sp, #8
 800dad6:	af00      	add	r7, sp, #0
 800dad8:	6078      	str	r0, [r7, #4]
 800dada:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800dadc:	2180      	movs	r1, #128	@ 0x80
 800dade:	6878      	ldr	r0, [r7, #4]
 800dae0:	f000 fcd8 	bl	800e494 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800dae4:	2100      	movs	r1, #0
 800dae6:	6878      	ldr	r0, [r7, #4]
 800dae8:	f000 fcd4 	bl	800e494 <USBD_LL_StallEP>
}
 800daec:	bf00      	nop
 800daee:	3708      	adds	r7, #8
 800daf0:	46bd      	mov	sp, r7
 800daf2:	bd80      	pop	{r7, pc}

0800daf4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b086      	sub	sp, #24
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	60f8      	str	r0, [r7, #12]
 800dafc:	60b9      	str	r1, [r7, #8]
 800dafe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800db00:	2300      	movs	r3, #0
 800db02:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d042      	beq.n	800db90 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800db0e:	6938      	ldr	r0, [r7, #16]
 800db10:	f000 f842 	bl	800db98 <USBD_GetLen>
 800db14:	4603      	mov	r3, r0
 800db16:	3301      	adds	r3, #1
 800db18:	005b      	lsls	r3, r3, #1
 800db1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800db1e:	d808      	bhi.n	800db32 <USBD_GetString+0x3e>
 800db20:	6938      	ldr	r0, [r7, #16]
 800db22:	f000 f839 	bl	800db98 <USBD_GetLen>
 800db26:	4603      	mov	r3, r0
 800db28:	3301      	adds	r3, #1
 800db2a:	b29b      	uxth	r3, r3
 800db2c:	005b      	lsls	r3, r3, #1
 800db2e:	b29a      	uxth	r2, r3
 800db30:	e001      	b.n	800db36 <USBD_GetString+0x42>
 800db32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800db3a:	7dfb      	ldrb	r3, [r7, #23]
 800db3c:	68ba      	ldr	r2, [r7, #8]
 800db3e:	4413      	add	r3, r2
 800db40:	687a      	ldr	r2, [r7, #4]
 800db42:	7812      	ldrb	r2, [r2, #0]
 800db44:	701a      	strb	r2, [r3, #0]
  idx++;
 800db46:	7dfb      	ldrb	r3, [r7, #23]
 800db48:	3301      	adds	r3, #1
 800db4a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800db4c:	7dfb      	ldrb	r3, [r7, #23]
 800db4e:	68ba      	ldr	r2, [r7, #8]
 800db50:	4413      	add	r3, r2
 800db52:	2203      	movs	r2, #3
 800db54:	701a      	strb	r2, [r3, #0]
  idx++;
 800db56:	7dfb      	ldrb	r3, [r7, #23]
 800db58:	3301      	adds	r3, #1
 800db5a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800db5c:	e013      	b.n	800db86 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800db5e:	7dfb      	ldrb	r3, [r7, #23]
 800db60:	68ba      	ldr	r2, [r7, #8]
 800db62:	4413      	add	r3, r2
 800db64:	693a      	ldr	r2, [r7, #16]
 800db66:	7812      	ldrb	r2, [r2, #0]
 800db68:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800db6a:	693b      	ldr	r3, [r7, #16]
 800db6c:	3301      	adds	r3, #1
 800db6e:	613b      	str	r3, [r7, #16]
    idx++;
 800db70:	7dfb      	ldrb	r3, [r7, #23]
 800db72:	3301      	adds	r3, #1
 800db74:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800db76:	7dfb      	ldrb	r3, [r7, #23]
 800db78:	68ba      	ldr	r2, [r7, #8]
 800db7a:	4413      	add	r3, r2
 800db7c:	2200      	movs	r2, #0
 800db7e:	701a      	strb	r2, [r3, #0]
    idx++;
 800db80:	7dfb      	ldrb	r3, [r7, #23]
 800db82:	3301      	adds	r3, #1
 800db84:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800db86:	693b      	ldr	r3, [r7, #16]
 800db88:	781b      	ldrb	r3, [r3, #0]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d1e7      	bne.n	800db5e <USBD_GetString+0x6a>
 800db8e:	e000      	b.n	800db92 <USBD_GetString+0x9e>
    return;
 800db90:	bf00      	nop
  }
}
 800db92:	3718      	adds	r7, #24
 800db94:	46bd      	mov	sp, r7
 800db96:	bd80      	pop	{r7, pc}

0800db98 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800db98:	b480      	push	{r7}
 800db9a:	b085      	sub	sp, #20
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800dba0:	2300      	movs	r3, #0
 800dba2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800dba8:	e005      	b.n	800dbb6 <USBD_GetLen+0x1e>
  {
    len++;
 800dbaa:	7bfb      	ldrb	r3, [r7, #15]
 800dbac:	3301      	adds	r3, #1
 800dbae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	3301      	adds	r3, #1
 800dbb4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800dbb6:	68bb      	ldr	r3, [r7, #8]
 800dbb8:	781b      	ldrb	r3, [r3, #0]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d1f5      	bne.n	800dbaa <USBD_GetLen+0x12>
  }

  return len;
 800dbbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	3714      	adds	r7, #20
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbca:	4770      	bx	lr

0800dbcc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b084      	sub	sp, #16
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	60f8      	str	r0, [r7, #12]
 800dbd4:	60b9      	str	r1, [r7, #8]
 800dbd6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	2202      	movs	r2, #2
 800dbdc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	687a      	ldr	r2, [r7, #4]
 800dbe4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	687a      	ldr	r2, [r7, #4]
 800dbea:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	68ba      	ldr	r2, [r7, #8]
 800dbf0:	2100      	movs	r1, #0
 800dbf2:	68f8      	ldr	r0, [r7, #12]
 800dbf4:	f000 fcd7 	bl	800e5a6 <USBD_LL_Transmit>

  return USBD_OK;
 800dbf8:	2300      	movs	r3, #0
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3710      	adds	r7, #16
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}

0800dc02 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dc02:	b580      	push	{r7, lr}
 800dc04:	b084      	sub	sp, #16
 800dc06:	af00      	add	r7, sp, #0
 800dc08:	60f8      	str	r0, [r7, #12]
 800dc0a:	60b9      	str	r1, [r7, #8]
 800dc0c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	68ba      	ldr	r2, [r7, #8]
 800dc12:	2100      	movs	r1, #0
 800dc14:	68f8      	ldr	r0, [r7, #12]
 800dc16:	f000 fcc6 	bl	800e5a6 <USBD_LL_Transmit>

  return USBD_OK;
 800dc1a:	2300      	movs	r3, #0
}
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	3710      	adds	r7, #16
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}

0800dc24 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b084      	sub	sp, #16
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	60f8      	str	r0, [r7, #12]
 800dc2c:	60b9      	str	r1, [r7, #8]
 800dc2e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	2203      	movs	r2, #3
 800dc34:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	687a      	ldr	r2, [r7, #4]
 800dc3c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	687a      	ldr	r2, [r7, #4]
 800dc44:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	68ba      	ldr	r2, [r7, #8]
 800dc4c:	2100      	movs	r1, #0
 800dc4e:	68f8      	ldr	r0, [r7, #12]
 800dc50:	f000 fcca 	bl	800e5e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dc54:	2300      	movs	r3, #0
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3710      	adds	r7, #16
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}

0800dc5e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800dc5e:	b580      	push	{r7, lr}
 800dc60:	b084      	sub	sp, #16
 800dc62:	af00      	add	r7, sp, #0
 800dc64:	60f8      	str	r0, [r7, #12]
 800dc66:	60b9      	str	r1, [r7, #8]
 800dc68:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	68ba      	ldr	r2, [r7, #8]
 800dc6e:	2100      	movs	r1, #0
 800dc70:	68f8      	ldr	r0, [r7, #12]
 800dc72:	f000 fcb9 	bl	800e5e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dc76:	2300      	movs	r3, #0
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3710      	adds	r7, #16
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}

0800dc80 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b082      	sub	sp, #8
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	2204      	movs	r2, #4
 800dc8c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dc90:	2300      	movs	r3, #0
 800dc92:	2200      	movs	r2, #0
 800dc94:	2100      	movs	r1, #0
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f000 fc85 	bl	800e5a6 <USBD_LL_Transmit>

  return USBD_OK;
 800dc9c:	2300      	movs	r3, #0
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	3708      	adds	r7, #8
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}

0800dca6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dca6:	b580      	push	{r7, lr}
 800dca8:	b082      	sub	sp, #8
 800dcaa:	af00      	add	r7, sp, #0
 800dcac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	2205      	movs	r2, #5
 800dcb2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	2200      	movs	r2, #0
 800dcba:	2100      	movs	r1, #0
 800dcbc:	6878      	ldr	r0, [r7, #4]
 800dcbe:	f000 fc93 	bl	800e5e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dcc2:	2300      	movs	r3, #0
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	3708      	adds	r7, #8
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}

0800dccc <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	4912      	ldr	r1, [pc, #72]	@ (800dd1c <MX_USB_Device_Init+0x50>)
 800dcd4:	4812      	ldr	r0, [pc, #72]	@ (800dd20 <MX_USB_Device_Init+0x54>)
 800dcd6:	f7fe fd43 	bl	800c760 <USBD_Init>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d001      	beq.n	800dce4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800dce0:	f7f3 fbad 	bl	800143e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800dce4:	490f      	ldr	r1, [pc, #60]	@ (800dd24 <MX_USB_Device_Init+0x58>)
 800dce6:	480e      	ldr	r0, [pc, #56]	@ (800dd20 <MX_USB_Device_Init+0x54>)
 800dce8:	f7fe fd78 	bl	800c7dc <USBD_RegisterClass>
 800dcec:	4603      	mov	r3, r0
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d001      	beq.n	800dcf6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800dcf2:	f7f3 fba4 	bl	800143e <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800dcf6:	490c      	ldr	r1, [pc, #48]	@ (800dd28 <MX_USB_Device_Init+0x5c>)
 800dcf8:	4809      	ldr	r0, [pc, #36]	@ (800dd20 <MX_USB_Device_Init+0x54>)
 800dcfa:	f7fe fc61 	bl	800c5c0 <USBD_CDC_RegisterInterface>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d001      	beq.n	800dd08 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800dd04:	f7f3 fb9b 	bl	800143e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800dd08:	4805      	ldr	r0, [pc, #20]	@ (800dd20 <MX_USB_Device_Init+0x54>)
 800dd0a:	f7fe fdab 	bl	800c864 <USBD_Start>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d001      	beq.n	800dd18 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800dd14:	f7f3 fb93 	bl	800143e <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800dd18:	bf00      	nop
 800dd1a:	bd80      	pop	{r7, pc}
 800dd1c:	200000d0 	.word	0x200000d0
 800dd20:	20000734 	.word	0x20000734
 800dd24:	2000003c 	.word	0x2000003c
 800dd28:	200000bc 	.word	0x200000bc

0800dd2c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800dd30:	2200      	movs	r2, #0
 800dd32:	4905      	ldr	r1, [pc, #20]	@ (800dd48 <CDC_Init_FS+0x1c>)
 800dd34:	4805      	ldr	r0, [pc, #20]	@ (800dd4c <CDC_Init_FS+0x20>)
 800dd36:	f7fe fc5d 	bl	800c5f4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800dd3a:	4905      	ldr	r1, [pc, #20]	@ (800dd50 <CDC_Init_FS+0x24>)
 800dd3c:	4803      	ldr	r0, [pc, #12]	@ (800dd4c <CDC_Init_FS+0x20>)
 800dd3e:	f7fe fc7b 	bl	800c638 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800dd42:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800dd44:	4618      	mov	r0, r3
 800dd46:	bd80      	pop	{r7, pc}
 800dd48:	20001210 	.word	0x20001210
 800dd4c:	20000734 	.word	0x20000734
 800dd50:	20000a10 	.word	0x20000a10

0800dd54 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800dd54:	b480      	push	{r7}
 800dd56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800dd58:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd62:	4770      	bx	lr

0800dd64 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dd64:	b480      	push	{r7}
 800dd66:	b083      	sub	sp, #12
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	6039      	str	r1, [r7, #0]
 800dd6e:	71fb      	strb	r3, [r7, #7]
 800dd70:	4613      	mov	r3, r2
 800dd72:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800dd74:	79fb      	ldrb	r3, [r7, #7]
 800dd76:	2b23      	cmp	r3, #35	@ 0x23
 800dd78:	d84a      	bhi.n	800de10 <CDC_Control_FS+0xac>
 800dd7a:	a201      	add	r2, pc, #4	@ (adr r2, 800dd80 <CDC_Control_FS+0x1c>)
 800dd7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd80:	0800de11 	.word	0x0800de11
 800dd84:	0800de11 	.word	0x0800de11
 800dd88:	0800de11 	.word	0x0800de11
 800dd8c:	0800de11 	.word	0x0800de11
 800dd90:	0800de11 	.word	0x0800de11
 800dd94:	0800de11 	.word	0x0800de11
 800dd98:	0800de11 	.word	0x0800de11
 800dd9c:	0800de11 	.word	0x0800de11
 800dda0:	0800de11 	.word	0x0800de11
 800dda4:	0800de11 	.word	0x0800de11
 800dda8:	0800de11 	.word	0x0800de11
 800ddac:	0800de11 	.word	0x0800de11
 800ddb0:	0800de11 	.word	0x0800de11
 800ddb4:	0800de11 	.word	0x0800de11
 800ddb8:	0800de11 	.word	0x0800de11
 800ddbc:	0800de11 	.word	0x0800de11
 800ddc0:	0800de11 	.word	0x0800de11
 800ddc4:	0800de11 	.word	0x0800de11
 800ddc8:	0800de11 	.word	0x0800de11
 800ddcc:	0800de11 	.word	0x0800de11
 800ddd0:	0800de11 	.word	0x0800de11
 800ddd4:	0800de11 	.word	0x0800de11
 800ddd8:	0800de11 	.word	0x0800de11
 800dddc:	0800de11 	.word	0x0800de11
 800dde0:	0800de11 	.word	0x0800de11
 800dde4:	0800de11 	.word	0x0800de11
 800dde8:	0800de11 	.word	0x0800de11
 800ddec:	0800de11 	.word	0x0800de11
 800ddf0:	0800de11 	.word	0x0800de11
 800ddf4:	0800de11 	.word	0x0800de11
 800ddf8:	0800de11 	.word	0x0800de11
 800ddfc:	0800de11 	.word	0x0800de11
 800de00:	0800de11 	.word	0x0800de11
 800de04:	0800de11 	.word	0x0800de11
 800de08:	0800de11 	.word	0x0800de11
 800de0c:	0800de11 	.word	0x0800de11
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800de10:	bf00      	nop
  }

  return (USBD_OK);
 800de12:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800de14:	4618      	mov	r0, r3
 800de16:	370c      	adds	r7, #12
 800de18:	46bd      	mov	sp, r7
 800de1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1e:	4770      	bx	lr

0800de20 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b082      	sub	sp, #8
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
 800de28:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800de2a:	6879      	ldr	r1, [r7, #4]
 800de2c:	4805      	ldr	r0, [pc, #20]	@ (800de44 <CDC_Receive_FS+0x24>)
 800de2e:	f7fe fc03 	bl	800c638 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800de32:	4804      	ldr	r0, [pc, #16]	@ (800de44 <CDC_Receive_FS+0x24>)
 800de34:	f7fe fc5e 	bl	800c6f4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800de38:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800de3a:	4618      	mov	r0, r3
 800de3c:	3708      	adds	r7, #8
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}
 800de42:	bf00      	nop
 800de44:	20000734 	.word	0x20000734

0800de48 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b084      	sub	sp, #16
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
 800de50:	460b      	mov	r3, r1
 800de52:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800de54:	2300      	movs	r3, #0
 800de56:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800de58:	4b0d      	ldr	r3, [pc, #52]	@ (800de90 <CDC_Transmit_FS+0x48>)
 800de5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800de5e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800de66:	2b00      	cmp	r3, #0
 800de68:	d001      	beq.n	800de6e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800de6a:	2301      	movs	r3, #1
 800de6c:	e00b      	b.n	800de86 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800de6e:	887b      	ldrh	r3, [r7, #2]
 800de70:	461a      	mov	r2, r3
 800de72:	6879      	ldr	r1, [r7, #4]
 800de74:	4806      	ldr	r0, [pc, #24]	@ (800de90 <CDC_Transmit_FS+0x48>)
 800de76:	f7fe fbbd 	bl	800c5f4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800de7a:	4805      	ldr	r0, [pc, #20]	@ (800de90 <CDC_Transmit_FS+0x48>)
 800de7c:	f7fe fbfa 	bl	800c674 <USBD_CDC_TransmitPacket>
 800de80:	4603      	mov	r3, r0
 800de82:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800de84:	7bfb      	ldrb	r3, [r7, #15]
}
 800de86:	4618      	mov	r0, r3
 800de88:	3710      	adds	r7, #16
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bd80      	pop	{r7, pc}
 800de8e:	bf00      	nop
 800de90:	20000734 	.word	0x20000734

0800de94 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800de94:	b480      	push	{r7}
 800de96:	b087      	sub	sp, #28
 800de98:	af00      	add	r7, sp, #0
 800de9a:	60f8      	str	r0, [r7, #12]
 800de9c:	60b9      	str	r1, [r7, #8]
 800de9e:	4613      	mov	r3, r2
 800dea0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800dea2:	2300      	movs	r3, #0
 800dea4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800dea6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800deaa:	4618      	mov	r0, r3
 800deac:	371c      	adds	r7, #28
 800deae:	46bd      	mov	sp, r7
 800deb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb4:	4770      	bx	lr
	...

0800deb8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800deb8:	b480      	push	{r7}
 800deba:	b083      	sub	sp, #12
 800debc:	af00      	add	r7, sp, #0
 800debe:	4603      	mov	r3, r0
 800dec0:	6039      	str	r1, [r7, #0]
 800dec2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	2212      	movs	r2, #18
 800dec8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800deca:	4b03      	ldr	r3, [pc, #12]	@ (800ded8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800decc:	4618      	mov	r0, r3
 800dece:	370c      	adds	r7, #12
 800ded0:	46bd      	mov	sp, r7
 800ded2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded6:	4770      	bx	lr
 800ded8:	200000f0 	.word	0x200000f0

0800dedc <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dedc:	b480      	push	{r7}
 800dede:	b083      	sub	sp, #12
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	4603      	mov	r3, r0
 800dee4:	6039      	str	r1, [r7, #0]
 800dee6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	2204      	movs	r2, #4
 800deec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800deee:	4b03      	ldr	r3, [pc, #12]	@ (800defc <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800def0:	4618      	mov	r0, r3
 800def2:	370c      	adds	r7, #12
 800def4:	46bd      	mov	sp, r7
 800def6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defa:	4770      	bx	lr
 800defc:	20000104 	.word	0x20000104

0800df00 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b082      	sub	sp, #8
 800df04:	af00      	add	r7, sp, #0
 800df06:	4603      	mov	r3, r0
 800df08:	6039      	str	r1, [r7, #0]
 800df0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800df0c:	79fb      	ldrb	r3, [r7, #7]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d105      	bne.n	800df1e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800df12:	683a      	ldr	r2, [r7, #0]
 800df14:	4907      	ldr	r1, [pc, #28]	@ (800df34 <USBD_CDC_ProductStrDescriptor+0x34>)
 800df16:	4808      	ldr	r0, [pc, #32]	@ (800df38 <USBD_CDC_ProductStrDescriptor+0x38>)
 800df18:	f7ff fdec 	bl	800daf4 <USBD_GetString>
 800df1c:	e004      	b.n	800df28 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800df1e:	683a      	ldr	r2, [r7, #0]
 800df20:	4904      	ldr	r1, [pc, #16]	@ (800df34 <USBD_CDC_ProductStrDescriptor+0x34>)
 800df22:	4805      	ldr	r0, [pc, #20]	@ (800df38 <USBD_CDC_ProductStrDescriptor+0x38>)
 800df24:	f7ff fde6 	bl	800daf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800df28:	4b02      	ldr	r3, [pc, #8]	@ (800df34 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800df2a:	4618      	mov	r0, r3
 800df2c:	3708      	adds	r7, #8
 800df2e:	46bd      	mov	sp, r7
 800df30:	bd80      	pop	{r7, pc}
 800df32:	bf00      	nop
 800df34:	20001a10 	.word	0x20001a10
 800df38:	0801116c 	.word	0x0801116c

0800df3c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b082      	sub	sp, #8
 800df40:	af00      	add	r7, sp, #0
 800df42:	4603      	mov	r3, r0
 800df44:	6039      	str	r1, [r7, #0]
 800df46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800df48:	683a      	ldr	r2, [r7, #0]
 800df4a:	4904      	ldr	r1, [pc, #16]	@ (800df5c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800df4c:	4804      	ldr	r0, [pc, #16]	@ (800df60 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800df4e:	f7ff fdd1 	bl	800daf4 <USBD_GetString>
  return USBD_StrDesc;
 800df52:	4b02      	ldr	r3, [pc, #8]	@ (800df5c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800df54:	4618      	mov	r0, r3
 800df56:	3708      	adds	r7, #8
 800df58:	46bd      	mov	sp, r7
 800df5a:	bd80      	pop	{r7, pc}
 800df5c:	20001a10 	.word	0x20001a10
 800df60:	08011184 	.word	0x08011184

0800df64 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b082      	sub	sp, #8
 800df68:	af00      	add	r7, sp, #0
 800df6a:	4603      	mov	r3, r0
 800df6c:	6039      	str	r1, [r7, #0]
 800df6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	221a      	movs	r2, #26
 800df74:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800df76:	f000 f843 	bl	800e000 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800df7a:	4b02      	ldr	r3, [pc, #8]	@ (800df84 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800df7c:	4618      	mov	r0, r3
 800df7e:	3708      	adds	r7, #8
 800df80:	46bd      	mov	sp, r7
 800df82:	bd80      	pop	{r7, pc}
 800df84:	20000108 	.word	0x20000108

0800df88 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b082      	sub	sp, #8
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	4603      	mov	r3, r0
 800df90:	6039      	str	r1, [r7, #0]
 800df92:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800df94:	79fb      	ldrb	r3, [r7, #7]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d105      	bne.n	800dfa6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800df9a:	683a      	ldr	r2, [r7, #0]
 800df9c:	4907      	ldr	r1, [pc, #28]	@ (800dfbc <USBD_CDC_ConfigStrDescriptor+0x34>)
 800df9e:	4808      	ldr	r0, [pc, #32]	@ (800dfc0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800dfa0:	f7ff fda8 	bl	800daf4 <USBD_GetString>
 800dfa4:	e004      	b.n	800dfb0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800dfa6:	683a      	ldr	r2, [r7, #0]
 800dfa8:	4904      	ldr	r1, [pc, #16]	@ (800dfbc <USBD_CDC_ConfigStrDescriptor+0x34>)
 800dfaa:	4805      	ldr	r0, [pc, #20]	@ (800dfc0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800dfac:	f7ff fda2 	bl	800daf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dfb0:	4b02      	ldr	r3, [pc, #8]	@ (800dfbc <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	3708      	adds	r7, #8
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}
 800dfba:	bf00      	nop
 800dfbc:	20001a10 	.word	0x20001a10
 800dfc0:	08011198 	.word	0x08011198

0800dfc4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b082      	sub	sp, #8
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	4603      	mov	r3, r0
 800dfcc:	6039      	str	r1, [r7, #0]
 800dfce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dfd0:	79fb      	ldrb	r3, [r7, #7]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d105      	bne.n	800dfe2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800dfd6:	683a      	ldr	r2, [r7, #0]
 800dfd8:	4907      	ldr	r1, [pc, #28]	@ (800dff8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800dfda:	4808      	ldr	r0, [pc, #32]	@ (800dffc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800dfdc:	f7ff fd8a 	bl	800daf4 <USBD_GetString>
 800dfe0:	e004      	b.n	800dfec <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800dfe2:	683a      	ldr	r2, [r7, #0]
 800dfe4:	4904      	ldr	r1, [pc, #16]	@ (800dff8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800dfe6:	4805      	ldr	r0, [pc, #20]	@ (800dffc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800dfe8:	f7ff fd84 	bl	800daf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dfec:	4b02      	ldr	r3, [pc, #8]	@ (800dff8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800dfee:	4618      	mov	r0, r3
 800dff0:	3708      	adds	r7, #8
 800dff2:	46bd      	mov	sp, r7
 800dff4:	bd80      	pop	{r7, pc}
 800dff6:	bf00      	nop
 800dff8:	20001a10 	.word	0x20001a10
 800dffc:	080111a4 	.word	0x080111a4

0800e000 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b084      	sub	sp, #16
 800e004:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e006:	4b0f      	ldr	r3, [pc, #60]	@ (800e044 <Get_SerialNum+0x44>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e00c:	4b0e      	ldr	r3, [pc, #56]	@ (800e048 <Get_SerialNum+0x48>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e012:	4b0e      	ldr	r3, [pc, #56]	@ (800e04c <Get_SerialNum+0x4c>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e018:	68fa      	ldr	r2, [r7, #12]
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	4413      	add	r3, r2
 800e01e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d009      	beq.n	800e03a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e026:	2208      	movs	r2, #8
 800e028:	4909      	ldr	r1, [pc, #36]	@ (800e050 <Get_SerialNum+0x50>)
 800e02a:	68f8      	ldr	r0, [r7, #12]
 800e02c:	f000 f814 	bl	800e058 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e030:	2204      	movs	r2, #4
 800e032:	4908      	ldr	r1, [pc, #32]	@ (800e054 <Get_SerialNum+0x54>)
 800e034:	68b8      	ldr	r0, [r7, #8]
 800e036:	f000 f80f 	bl	800e058 <IntToUnicode>
  }
}
 800e03a:	bf00      	nop
 800e03c:	3710      	adds	r7, #16
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}
 800e042:	bf00      	nop
 800e044:	1fff7590 	.word	0x1fff7590
 800e048:	1fff7594 	.word	0x1fff7594
 800e04c:	1fff7598 	.word	0x1fff7598
 800e050:	2000010a 	.word	0x2000010a
 800e054:	2000011a 	.word	0x2000011a

0800e058 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e058:	b480      	push	{r7}
 800e05a:	b087      	sub	sp, #28
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	60f8      	str	r0, [r7, #12]
 800e060:	60b9      	str	r1, [r7, #8]
 800e062:	4613      	mov	r3, r2
 800e064:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e066:	2300      	movs	r3, #0
 800e068:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e06a:	2300      	movs	r3, #0
 800e06c:	75fb      	strb	r3, [r7, #23]
 800e06e:	e027      	b.n	800e0c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	0f1b      	lsrs	r3, r3, #28
 800e074:	2b09      	cmp	r3, #9
 800e076:	d80b      	bhi.n	800e090 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	0f1b      	lsrs	r3, r3, #28
 800e07c:	b2da      	uxtb	r2, r3
 800e07e:	7dfb      	ldrb	r3, [r7, #23]
 800e080:	005b      	lsls	r3, r3, #1
 800e082:	4619      	mov	r1, r3
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	440b      	add	r3, r1
 800e088:	3230      	adds	r2, #48	@ 0x30
 800e08a:	b2d2      	uxtb	r2, r2
 800e08c:	701a      	strb	r2, [r3, #0]
 800e08e:	e00a      	b.n	800e0a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	0f1b      	lsrs	r3, r3, #28
 800e094:	b2da      	uxtb	r2, r3
 800e096:	7dfb      	ldrb	r3, [r7, #23]
 800e098:	005b      	lsls	r3, r3, #1
 800e09a:	4619      	mov	r1, r3
 800e09c:	68bb      	ldr	r3, [r7, #8]
 800e09e:	440b      	add	r3, r1
 800e0a0:	3237      	adds	r2, #55	@ 0x37
 800e0a2:	b2d2      	uxtb	r2, r2
 800e0a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	011b      	lsls	r3, r3, #4
 800e0aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e0ac:	7dfb      	ldrb	r3, [r7, #23]
 800e0ae:	005b      	lsls	r3, r3, #1
 800e0b0:	3301      	adds	r3, #1
 800e0b2:	68ba      	ldr	r2, [r7, #8]
 800e0b4:	4413      	add	r3, r2
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e0ba:	7dfb      	ldrb	r3, [r7, #23]
 800e0bc:	3301      	adds	r3, #1
 800e0be:	75fb      	strb	r3, [r7, #23]
 800e0c0:	7dfa      	ldrb	r2, [r7, #23]
 800e0c2:	79fb      	ldrb	r3, [r7, #7]
 800e0c4:	429a      	cmp	r2, r3
 800e0c6:	d3d3      	bcc.n	800e070 <IntToUnicode+0x18>
  }
}
 800e0c8:	bf00      	nop
 800e0ca:	bf00      	nop
 800e0cc:	371c      	adds	r7, #28
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d4:	4770      	bx	lr

0800e0d6 <LL_AHB2_GRP1_EnableClock>:
{
 800e0d6:	b480      	push	{r7}
 800e0d8:	b085      	sub	sp, #20
 800e0da:	af00      	add	r7, sp, #0
 800e0dc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800e0de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e0e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e0e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	4313      	orrs	r3, r2
 800e0ec:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800e0ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e0f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	4013      	ands	r3, r2
 800e0f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
}
 800e0fc:	bf00      	nop
 800e0fe:	3714      	adds	r7, #20
 800e100:	46bd      	mov	sp, r7
 800e102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e106:	4770      	bx	lr

0800e108 <LL_APB1_GRP1_EnableClock>:
{
 800e108:	b480      	push	{r7}
 800e10a:	b085      	sub	sp, #20
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800e110:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e114:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e116:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	4313      	orrs	r3, r2
 800e11e:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800e120:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e124:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	4013      	ands	r3, r2
 800e12a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e12c:	68fb      	ldr	r3, [r7, #12]
}
 800e12e:	bf00      	nop
 800e130:	3714      	adds	r7, #20
 800e132:	46bd      	mov	sp, r7
 800e134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e138:	4770      	bx	lr
	...

0800e13c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b088      	sub	sp, #32
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e144:	f107 030c 	add.w	r3, r7, #12
 800e148:	2200      	movs	r2, #0
 800e14a:	601a      	str	r2, [r3, #0]
 800e14c:	605a      	str	r2, [r3, #4]
 800e14e:	609a      	str	r2, [r3, #8]
 800e150:	60da      	str	r2, [r3, #12]
 800e152:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	4a17      	ldr	r2, [pc, #92]	@ (800e1b8 <HAL_PCD_MspInit+0x7c>)
 800e15a:	4293      	cmp	r3, r2
 800e15c:	d128      	bne.n	800e1b0 <HAL_PCD_MspInit+0x74>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e15e:	2001      	movs	r0, #1
 800e160:	f7ff ffb9 	bl	800e0d6 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 800e164:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800e168:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e16a:	2302      	movs	r3, #2
 800e16c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e16e:	2300      	movs	r3, #0
 800e170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e172:	2300      	movs	r3, #0
 800e174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800e176:	230a      	movs	r3, #10
 800e178:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e17a:	f107 030c 	add.w	r3, r7, #12
 800e17e:	4619      	mov	r1, r3
 800e180:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800e184:	f7f5 fd26 	bl	8003bd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e188:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800e18c:	f7ff ffbc 	bl	800e108 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 800e190:	2200      	movs	r2, #0
 800e192:	2100      	movs	r1, #0
 800e194:	2013      	movs	r0, #19
 800e196:	f7f5 fa06 	bl	80035a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 800e19a:	2013      	movs	r0, #19
 800e19c:	f7f5 fa1d 	bl	80035da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	2100      	movs	r1, #0
 800e1a4:	2014      	movs	r0, #20
 800e1a6:	f7f5 f9fe 	bl	80035a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800e1aa:	2014      	movs	r0, #20
 800e1ac:	f7f5 fa15 	bl	80035da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800e1b0:	bf00      	nop
 800e1b2:	3720      	adds	r7, #32
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	bd80      	pop	{r7, pc}
 800e1b8:	40006800 	.word	0x40006800

0800e1bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b082      	sub	sp, #8
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800e1d0:	4619      	mov	r1, r3
 800e1d2:	4610      	mov	r0, r2
 800e1d4:	f7fe fb93 	bl	800c8fe <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800e1d8:	bf00      	nop
 800e1da:	3708      	adds	r7, #8
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	bd80      	pop	{r7, pc}

0800e1e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b082      	sub	sp, #8
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
 800e1e8:	460b      	mov	r3, r1
 800e1ea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800e1f2:	78fa      	ldrb	r2, [r7, #3]
 800e1f4:	6879      	ldr	r1, [r7, #4]
 800e1f6:	4613      	mov	r3, r2
 800e1f8:	009b      	lsls	r3, r3, #2
 800e1fa:	4413      	add	r3, r2
 800e1fc:	00db      	lsls	r3, r3, #3
 800e1fe:	440b      	add	r3, r1
 800e200:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e204:	681a      	ldr	r2, [r3, #0]
 800e206:	78fb      	ldrb	r3, [r7, #3]
 800e208:	4619      	mov	r1, r3
 800e20a:	f7fe fbcd 	bl	800c9a8 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800e20e:	bf00      	nop
 800e210:	3708      	adds	r7, #8
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}

0800e216 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e216:	b580      	push	{r7, lr}
 800e218:	b082      	sub	sp, #8
 800e21a:	af00      	add	r7, sp, #0
 800e21c:	6078      	str	r0, [r7, #4]
 800e21e:	460b      	mov	r3, r1
 800e220:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800e228:	78fa      	ldrb	r2, [r7, #3]
 800e22a:	6879      	ldr	r1, [r7, #4]
 800e22c:	4613      	mov	r3, r2
 800e22e:	009b      	lsls	r3, r3, #2
 800e230:	4413      	add	r3, r2
 800e232:	00db      	lsls	r3, r3, #3
 800e234:	440b      	add	r3, r1
 800e236:	3324      	adds	r3, #36	@ 0x24
 800e238:	681a      	ldr	r2, [r3, #0]
 800e23a:	78fb      	ldrb	r3, [r7, #3]
 800e23c:	4619      	mov	r1, r3
 800e23e:	f7fe fc66 	bl	800cb0e <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800e242:	bf00      	nop
 800e244:	3708      	adds	r7, #8
 800e246:	46bd      	mov	sp, r7
 800e248:	bd80      	pop	{r7, pc}

0800e24a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e24a:	b580      	push	{r7, lr}
 800e24c:	b082      	sub	sp, #8
 800e24e:	af00      	add	r7, sp, #0
 800e250:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e258:	4618      	mov	r0, r3
 800e25a:	f7fe fda0 	bl	800cd9e <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800e25e:	bf00      	nop
 800e260:	3708      	adds	r7, #8
 800e262:	46bd      	mov	sp, r7
 800e264:	bd80      	pop	{r7, pc}

0800e266 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e266:	b580      	push	{r7, lr}
 800e268:	b084      	sub	sp, #16
 800e26a:	af00      	add	r7, sp, #0
 800e26c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e26e:	2301      	movs	r3, #1
 800e270:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	795b      	ldrb	r3, [r3, #5]
 800e276:	2b02      	cmp	r3, #2
 800e278:	d001      	beq.n	800e27e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e27a:	f7f3 f8e0 	bl	800143e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e284:	7bfa      	ldrb	r2, [r7, #15]
 800e286:	4611      	mov	r1, r2
 800e288:	4618      	mov	r0, r3
 800e28a:	f7fe fd44 	bl	800cd16 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e294:	4618      	mov	r0, r3
 800e296:	f7fe fcec 	bl	800cc72 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800e29a:	bf00      	nop
 800e29c:	3710      	adds	r7, #16
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}
	...

0800e2a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b082      	sub	sp, #8
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f7fe fd3f 	bl	800cd36 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	7a5b      	ldrb	r3, [r3, #9]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d005      	beq.n	800e2cc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e2c0:	4b04      	ldr	r3, [pc, #16]	@ (800e2d4 <HAL_PCD_SuspendCallback+0x30>)
 800e2c2:	691b      	ldr	r3, [r3, #16]
 800e2c4:	4a03      	ldr	r2, [pc, #12]	@ (800e2d4 <HAL_PCD_SuspendCallback+0x30>)
 800e2c6:	f043 0306 	orr.w	r3, r3, #6
 800e2ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800e2cc:	bf00      	nop
 800e2ce:	3708      	adds	r7, #8
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}
 800e2d4:	e000ed00 	.word	0xe000ed00

0800e2d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b082      	sub	sp, #8
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	7a5b      	ldrb	r3, [r3, #9]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d007      	beq.n	800e2f8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e2e8:	4b08      	ldr	r3, [pc, #32]	@ (800e30c <HAL_PCD_ResumeCallback+0x34>)
 800e2ea:	691b      	ldr	r3, [r3, #16]
 800e2ec:	4a07      	ldr	r2, [pc, #28]	@ (800e30c <HAL_PCD_ResumeCallback+0x34>)
 800e2ee:	f023 0306 	bic.w	r3, r3, #6
 800e2f2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800e2f4:	f000 f9fa 	bl	800e6ec <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e2fe:	4618      	mov	r0, r3
 800e300:	f7fe fd35 	bl	800cd6e <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800e304:	bf00      	nop
 800e306:	3708      	adds	r7, #8
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}
 800e30c:	e000ed00 	.word	0xe000ed00

0800e310 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b082      	sub	sp, #8
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800e318:	4a2c      	ldr	r2, [pc, #176]	@ (800e3cc <USBD_LL_Init+0xbc>)
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	4a2a      	ldr	r2, [pc, #168]	@ (800e3cc <USBD_LL_Init+0xbc>)
 800e324:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800e328:	f7f8 fa9a 	bl	8006860 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800e32c:	4b27      	ldr	r3, [pc, #156]	@ (800e3cc <USBD_LL_Init+0xbc>)
 800e32e:	4a28      	ldr	r2, [pc, #160]	@ (800e3d0 <USBD_LL_Init+0xc0>)
 800e330:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e332:	4b26      	ldr	r3, [pc, #152]	@ (800e3cc <USBD_LL_Init+0xbc>)
 800e334:	2208      	movs	r2, #8
 800e336:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e338:	4b24      	ldr	r3, [pc, #144]	@ (800e3cc <USBD_LL_Init+0xbc>)
 800e33a:	2202      	movs	r2, #2
 800e33c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e33e:	4b23      	ldr	r3, [pc, #140]	@ (800e3cc <USBD_LL_Init+0xbc>)
 800e340:	2202      	movs	r2, #2
 800e342:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800e344:	4b21      	ldr	r3, [pc, #132]	@ (800e3cc <USBD_LL_Init+0xbc>)
 800e346:	2200      	movs	r2, #0
 800e348:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e34a:	4b20      	ldr	r3, [pc, #128]	@ (800e3cc <USBD_LL_Init+0xbc>)
 800e34c:	2200      	movs	r2, #0
 800e34e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800e350:	4b1e      	ldr	r3, [pc, #120]	@ (800e3cc <USBD_LL_Init+0xbc>)
 800e352:	2200      	movs	r2, #0
 800e354:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e356:	4b1d      	ldr	r3, [pc, #116]	@ (800e3cc <USBD_LL_Init+0xbc>)
 800e358:	2200      	movs	r2, #0
 800e35a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e35c:	481b      	ldr	r0, [pc, #108]	@ (800e3cc <USBD_LL_Init+0xbc>)
 800e35e:	f7f6 fd2d 	bl	8004dbc <HAL_PCD_Init>
 800e362:	4603      	mov	r3, r0
 800e364:	2b00      	cmp	r3, #0
 800e366:	d001      	beq.n	800e36c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800e368:	f7f3 f869 	bl	800143e <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e372:	2318      	movs	r3, #24
 800e374:	2200      	movs	r2, #0
 800e376:	2100      	movs	r1, #0
 800e378:	f7f8 f9e6 	bl	8006748 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e382:	2358      	movs	r3, #88	@ 0x58
 800e384:	2200      	movs	r2, #0
 800e386:	2180      	movs	r1, #128	@ 0x80
 800e388:	f7f8 f9de 	bl	8006748 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e392:	23c0      	movs	r3, #192	@ 0xc0
 800e394:	2200      	movs	r2, #0
 800e396:	2181      	movs	r1, #129	@ 0x81
 800e398:	f7f8 f9d6 	bl	8006748 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e3a2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	2101      	movs	r1, #1
 800e3aa:	f7f8 f9cd 	bl	8006748 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e3b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	2182      	movs	r1, #130	@ 0x82
 800e3bc:	f7f8 f9c4 	bl	8006748 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800e3c0:	2300      	movs	r3, #0
}
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	3708      	adds	r7, #8
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd80      	pop	{r7, pc}
 800e3ca:	bf00      	nop
 800e3cc:	20001c10 	.word	0x20001c10
 800e3d0:	40006800 	.word	0x40006800

0800e3d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b084      	sub	sp, #16
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3dc:	2300      	movs	r3, #0
 800e3de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f7f6 fdb4 	bl	8004f58 <HAL_PCD_Start>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3f4:	7bfb      	ldrb	r3, [r7, #15]
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f000 f97e 	bl	800e6f8 <USBD_Get_USB_Status>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e400:	7bbb      	ldrb	r3, [r7, #14]
}
 800e402:	4618      	mov	r0, r3
 800e404:	3710      	adds	r7, #16
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}

0800e40a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e40a:	b580      	push	{r7, lr}
 800e40c:	b084      	sub	sp, #16
 800e40e:	af00      	add	r7, sp, #0
 800e410:	6078      	str	r0, [r7, #4]
 800e412:	4608      	mov	r0, r1
 800e414:	4611      	mov	r1, r2
 800e416:	461a      	mov	r2, r3
 800e418:	4603      	mov	r3, r0
 800e41a:	70fb      	strb	r3, [r7, #3]
 800e41c:	460b      	mov	r3, r1
 800e41e:	70bb      	strb	r3, [r7, #2]
 800e420:	4613      	mov	r3, r2
 800e422:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e424:	2300      	movs	r3, #0
 800e426:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e428:	2300      	movs	r3, #0
 800e42a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e432:	78bb      	ldrb	r3, [r7, #2]
 800e434:	883a      	ldrh	r2, [r7, #0]
 800e436:	78f9      	ldrb	r1, [r7, #3]
 800e438:	f7f6 fefb 	bl	8005232 <HAL_PCD_EP_Open>
 800e43c:	4603      	mov	r3, r0
 800e43e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e440:	7bfb      	ldrb	r3, [r7, #15]
 800e442:	4618      	mov	r0, r3
 800e444:	f000 f958 	bl	800e6f8 <USBD_Get_USB_Status>
 800e448:	4603      	mov	r3, r0
 800e44a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e44c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e44e:	4618      	mov	r0, r3
 800e450:	3710      	adds	r7, #16
 800e452:	46bd      	mov	sp, r7
 800e454:	bd80      	pop	{r7, pc}

0800e456 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e456:	b580      	push	{r7, lr}
 800e458:	b084      	sub	sp, #16
 800e45a:	af00      	add	r7, sp, #0
 800e45c:	6078      	str	r0, [r7, #4]
 800e45e:	460b      	mov	r3, r1
 800e460:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e462:	2300      	movs	r3, #0
 800e464:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e466:	2300      	movs	r3, #0
 800e468:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e470:	78fa      	ldrb	r2, [r7, #3]
 800e472:	4611      	mov	r1, r2
 800e474:	4618      	mov	r0, r3
 800e476:	f7f6 ff39 	bl	80052ec <HAL_PCD_EP_Close>
 800e47a:	4603      	mov	r3, r0
 800e47c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e47e:	7bfb      	ldrb	r3, [r7, #15]
 800e480:	4618      	mov	r0, r3
 800e482:	f000 f939 	bl	800e6f8 <USBD_Get_USB_Status>
 800e486:	4603      	mov	r3, r0
 800e488:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e48a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e48c:	4618      	mov	r0, r3
 800e48e:	3710      	adds	r7, #16
 800e490:	46bd      	mov	sp, r7
 800e492:	bd80      	pop	{r7, pc}

0800e494 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b084      	sub	sp, #16
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
 800e49c:	460b      	mov	r3, r1
 800e49e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e4ae:	78fa      	ldrb	r2, [r7, #3]
 800e4b0:	4611      	mov	r1, r2
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f7f6 ffe2 	bl	800547c <HAL_PCD_EP_SetStall>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4bc:	7bfb      	ldrb	r3, [r7, #15]
 800e4be:	4618      	mov	r0, r3
 800e4c0:	f000 f91a 	bl	800e6f8 <USBD_Get_USB_Status>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e4c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	3710      	adds	r7, #16
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bd80      	pop	{r7, pc}

0800e4d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e4d2:	b580      	push	{r7, lr}
 800e4d4:	b084      	sub	sp, #16
 800e4d6:	af00      	add	r7, sp, #0
 800e4d8:	6078      	str	r0, [r7, #4]
 800e4da:	460b      	mov	r3, r1
 800e4dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4de:	2300      	movs	r3, #0
 800e4e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e4ec:	78fa      	ldrb	r2, [r7, #3]
 800e4ee:	4611      	mov	r1, r2
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f7f7 f815 	bl	8005520 <HAL_PCD_EP_ClrStall>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4fa:	7bfb      	ldrb	r3, [r7, #15]
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f000 f8fb 	bl	800e6f8 <USBD_Get_USB_Status>
 800e502:	4603      	mov	r3, r0
 800e504:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e506:	7bbb      	ldrb	r3, [r7, #14]
}
 800e508:	4618      	mov	r0, r3
 800e50a:	3710      	adds	r7, #16
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}

0800e510 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e510:	b480      	push	{r7}
 800e512:	b085      	sub	sp, #20
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
 800e518:	460b      	mov	r3, r1
 800e51a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e522:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e524:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	da0b      	bge.n	800e544 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e52c:	78fb      	ldrb	r3, [r7, #3]
 800e52e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e532:	68f9      	ldr	r1, [r7, #12]
 800e534:	4613      	mov	r3, r2
 800e536:	009b      	lsls	r3, r3, #2
 800e538:	4413      	add	r3, r2
 800e53a:	00db      	lsls	r3, r3, #3
 800e53c:	440b      	add	r3, r1
 800e53e:	3312      	adds	r3, #18
 800e540:	781b      	ldrb	r3, [r3, #0]
 800e542:	e00b      	b.n	800e55c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e544:	78fb      	ldrb	r3, [r7, #3]
 800e546:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e54a:	68f9      	ldr	r1, [r7, #12]
 800e54c:	4613      	mov	r3, r2
 800e54e:	009b      	lsls	r3, r3, #2
 800e550:	4413      	add	r3, r2
 800e552:	00db      	lsls	r3, r3, #3
 800e554:	440b      	add	r3, r1
 800e556:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800e55a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e55c:	4618      	mov	r0, r3
 800e55e:	3714      	adds	r7, #20
 800e560:	46bd      	mov	sp, r7
 800e562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e566:	4770      	bx	lr

0800e568 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b084      	sub	sp, #16
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
 800e570:	460b      	mov	r3, r1
 800e572:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e574:	2300      	movs	r3, #0
 800e576:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e578:	2300      	movs	r3, #0
 800e57a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e582:	78fa      	ldrb	r2, [r7, #3]
 800e584:	4611      	mov	r1, r2
 800e586:	4618      	mov	r0, r3
 800e588:	f7f6 fe2f 	bl	80051ea <HAL_PCD_SetAddress>
 800e58c:	4603      	mov	r3, r0
 800e58e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e590:	7bfb      	ldrb	r3, [r7, #15]
 800e592:	4618      	mov	r0, r3
 800e594:	f000 f8b0 	bl	800e6f8 <USBD_Get_USB_Status>
 800e598:	4603      	mov	r3, r0
 800e59a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e59c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e59e:	4618      	mov	r0, r3
 800e5a0:	3710      	adds	r7, #16
 800e5a2:	46bd      	mov	sp, r7
 800e5a4:	bd80      	pop	{r7, pc}

0800e5a6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e5a6:	b580      	push	{r7, lr}
 800e5a8:	b086      	sub	sp, #24
 800e5aa:	af00      	add	r7, sp, #0
 800e5ac:	60f8      	str	r0, [r7, #12]
 800e5ae:	607a      	str	r2, [r7, #4]
 800e5b0:	603b      	str	r3, [r7, #0]
 800e5b2:	460b      	mov	r3, r1
 800e5b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e5c4:	7af9      	ldrb	r1, [r7, #11]
 800e5c6:	683b      	ldr	r3, [r7, #0]
 800e5c8:	687a      	ldr	r2, [r7, #4]
 800e5ca:	f7f6 ff20 	bl	800540e <HAL_PCD_EP_Transmit>
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e5d2:	7dfb      	ldrb	r3, [r7, #23]
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	f000 f88f 	bl	800e6f8 <USBD_Get_USB_Status>
 800e5da:	4603      	mov	r3, r0
 800e5dc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e5de:	7dbb      	ldrb	r3, [r7, #22]
}
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	3718      	adds	r7, #24
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd80      	pop	{r7, pc}

0800e5e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b086      	sub	sp, #24
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	60f8      	str	r0, [r7, #12]
 800e5f0:	607a      	str	r2, [r7, #4]
 800e5f2:	603b      	str	r3, [r7, #0]
 800e5f4:	460b      	mov	r3, r1
 800e5f6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e606:	7af9      	ldrb	r1, [r7, #11]
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	687a      	ldr	r2, [r7, #4]
 800e60c:	f7f6 feb6 	bl	800537c <HAL_PCD_EP_Receive>
 800e610:	4603      	mov	r3, r0
 800e612:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e614:	7dfb      	ldrb	r3, [r7, #23]
 800e616:	4618      	mov	r0, r3
 800e618:	f000 f86e 	bl	800e6f8 <USBD_Get_USB_Status>
 800e61c:	4603      	mov	r3, r0
 800e61e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e620:	7dbb      	ldrb	r3, [r7, #22]
}
 800e622:	4618      	mov	r0, r3
 800e624:	3718      	adds	r7, #24
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}

0800e62a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e62a:	b580      	push	{r7, lr}
 800e62c:	b082      	sub	sp, #8
 800e62e:	af00      	add	r7, sp, #0
 800e630:	6078      	str	r0, [r7, #4]
 800e632:	460b      	mov	r3, r1
 800e634:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e63c:	78fa      	ldrb	r2, [r7, #3]
 800e63e:	4611      	mov	r1, r2
 800e640:	4618      	mov	r0, r3
 800e642:	f7f6 fecc 	bl	80053de <HAL_PCD_EP_GetRxCount>
 800e646:	4603      	mov	r3, r0
}
 800e648:	4618      	mov	r0, r3
 800e64a:	3708      	adds	r7, #8
 800e64c:	46bd      	mov	sp, r7
 800e64e:	bd80      	pop	{r7, pc}

0800e650 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b082      	sub	sp, #8
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
 800e658:	460b      	mov	r3, r1
 800e65a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800e65c:	78fb      	ldrb	r3, [r7, #3]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d002      	beq.n	800e668 <HAL_PCDEx_LPM_Callback+0x18>
 800e662:	2b01      	cmp	r3, #1
 800e664:	d013      	beq.n	800e68e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800e666:	e023      	b.n	800e6b0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	7a5b      	ldrb	r3, [r3, #9]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d007      	beq.n	800e680 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e670:	f000 f83c 	bl	800e6ec <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e674:	4b10      	ldr	r3, [pc, #64]	@ (800e6b8 <HAL_PCDEx_LPM_Callback+0x68>)
 800e676:	691b      	ldr	r3, [r3, #16]
 800e678:	4a0f      	ldr	r2, [pc, #60]	@ (800e6b8 <HAL_PCDEx_LPM_Callback+0x68>)
 800e67a:	f023 0306 	bic.w	r3, r3, #6
 800e67e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e686:	4618      	mov	r0, r3
 800e688:	f7fe fb71 	bl	800cd6e <USBD_LL_Resume>
    break;
 800e68c:	e010      	b.n	800e6b0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e694:	4618      	mov	r0, r3
 800e696:	f7fe fb4e 	bl	800cd36 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	7a5b      	ldrb	r3, [r3, #9]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d005      	beq.n	800e6ae <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e6a2:	4b05      	ldr	r3, [pc, #20]	@ (800e6b8 <HAL_PCDEx_LPM_Callback+0x68>)
 800e6a4:	691b      	ldr	r3, [r3, #16]
 800e6a6:	4a04      	ldr	r2, [pc, #16]	@ (800e6b8 <HAL_PCDEx_LPM_Callback+0x68>)
 800e6a8:	f043 0306 	orr.w	r3, r3, #6
 800e6ac:	6113      	str	r3, [r2, #16]
    break;
 800e6ae:	bf00      	nop
}
 800e6b0:	bf00      	nop
 800e6b2:	3708      	adds	r7, #8
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bd80      	pop	{r7, pc}
 800e6b8:	e000ed00 	.word	0xe000ed00

0800e6bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e6bc:	b480      	push	{r7}
 800e6be:	b083      	sub	sp, #12
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e6c4:	4b03      	ldr	r3, [pc, #12]	@ (800e6d4 <USBD_static_malloc+0x18>)
}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	370c      	adds	r7, #12
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d0:	4770      	bx	lr
 800e6d2:	bf00      	nop
 800e6d4:	20001eec 	.word	0x20001eec

0800e6d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e6d8:	b480      	push	{r7}
 800e6da:	b083      	sub	sp, #12
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800e6e0:	bf00      	nop
 800e6e2:	370c      	adds	r7, #12
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ea:	4770      	bx	lr

0800e6ec <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e6f0:	f7f2 fc9e 	bl	8001030 <SystemClock_Config>
}
 800e6f4:	bf00      	nop
 800e6f6:	bd80      	pop	{r7, pc}

0800e6f8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e6f8:	b480      	push	{r7}
 800e6fa:	b085      	sub	sp, #20
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	4603      	mov	r3, r0
 800e700:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e702:	2300      	movs	r3, #0
 800e704:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e706:	79fb      	ldrb	r3, [r7, #7]
 800e708:	2b03      	cmp	r3, #3
 800e70a:	d817      	bhi.n	800e73c <USBD_Get_USB_Status+0x44>
 800e70c:	a201      	add	r2, pc, #4	@ (adr r2, 800e714 <USBD_Get_USB_Status+0x1c>)
 800e70e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e712:	bf00      	nop
 800e714:	0800e725 	.word	0x0800e725
 800e718:	0800e72b 	.word	0x0800e72b
 800e71c:	0800e731 	.word	0x0800e731
 800e720:	0800e737 	.word	0x0800e737
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e724:	2300      	movs	r3, #0
 800e726:	73fb      	strb	r3, [r7, #15]
    break;
 800e728:	e00b      	b.n	800e742 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e72a:	2303      	movs	r3, #3
 800e72c:	73fb      	strb	r3, [r7, #15]
    break;
 800e72e:	e008      	b.n	800e742 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e730:	2301      	movs	r3, #1
 800e732:	73fb      	strb	r3, [r7, #15]
    break;
 800e734:	e005      	b.n	800e742 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e736:	2303      	movs	r3, #3
 800e738:	73fb      	strb	r3, [r7, #15]
    break;
 800e73a:	e002      	b.n	800e742 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e73c:	2303      	movs	r3, #3
 800e73e:	73fb      	strb	r3, [r7, #15]
    break;
 800e740:	bf00      	nop
  }
  return usb_status;
 800e742:	7bfb      	ldrb	r3, [r7, #15]
}
 800e744:	4618      	mov	r0, r3
 800e746:	3714      	adds	r7, #20
 800e748:	46bd      	mov	sp, r7
 800e74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74e:	4770      	bx	lr

0800e750 <__cvt>:
 800e750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e754:	ec57 6b10 	vmov	r6, r7, d0
 800e758:	2f00      	cmp	r7, #0
 800e75a:	460c      	mov	r4, r1
 800e75c:	4619      	mov	r1, r3
 800e75e:	463b      	mov	r3, r7
 800e760:	bfbb      	ittet	lt
 800e762:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e766:	461f      	movlt	r7, r3
 800e768:	2300      	movge	r3, #0
 800e76a:	232d      	movlt	r3, #45	@ 0x2d
 800e76c:	700b      	strb	r3, [r1, #0]
 800e76e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e770:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e774:	4691      	mov	r9, r2
 800e776:	f023 0820 	bic.w	r8, r3, #32
 800e77a:	bfbc      	itt	lt
 800e77c:	4632      	movlt	r2, r6
 800e77e:	4616      	movlt	r6, r2
 800e780:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e784:	d005      	beq.n	800e792 <__cvt+0x42>
 800e786:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e78a:	d100      	bne.n	800e78e <__cvt+0x3e>
 800e78c:	3401      	adds	r4, #1
 800e78e:	2102      	movs	r1, #2
 800e790:	e000      	b.n	800e794 <__cvt+0x44>
 800e792:	2103      	movs	r1, #3
 800e794:	ab03      	add	r3, sp, #12
 800e796:	9301      	str	r3, [sp, #4]
 800e798:	ab02      	add	r3, sp, #8
 800e79a:	9300      	str	r3, [sp, #0]
 800e79c:	ec47 6b10 	vmov	d0, r6, r7
 800e7a0:	4653      	mov	r3, sl
 800e7a2:	4622      	mov	r2, r4
 800e7a4:	f000 fe64 	bl	800f470 <_dtoa_r>
 800e7a8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e7ac:	4605      	mov	r5, r0
 800e7ae:	d119      	bne.n	800e7e4 <__cvt+0x94>
 800e7b0:	f019 0f01 	tst.w	r9, #1
 800e7b4:	d00e      	beq.n	800e7d4 <__cvt+0x84>
 800e7b6:	eb00 0904 	add.w	r9, r0, r4
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	2300      	movs	r3, #0
 800e7be:	4630      	mov	r0, r6
 800e7c0:	4639      	mov	r1, r7
 800e7c2:	f7f2 f959 	bl	8000a78 <__aeabi_dcmpeq>
 800e7c6:	b108      	cbz	r0, 800e7cc <__cvt+0x7c>
 800e7c8:	f8cd 900c 	str.w	r9, [sp, #12]
 800e7cc:	2230      	movs	r2, #48	@ 0x30
 800e7ce:	9b03      	ldr	r3, [sp, #12]
 800e7d0:	454b      	cmp	r3, r9
 800e7d2:	d31e      	bcc.n	800e812 <__cvt+0xc2>
 800e7d4:	9b03      	ldr	r3, [sp, #12]
 800e7d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e7d8:	1b5b      	subs	r3, r3, r5
 800e7da:	4628      	mov	r0, r5
 800e7dc:	6013      	str	r3, [r2, #0]
 800e7de:	b004      	add	sp, #16
 800e7e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e7e8:	eb00 0904 	add.w	r9, r0, r4
 800e7ec:	d1e5      	bne.n	800e7ba <__cvt+0x6a>
 800e7ee:	7803      	ldrb	r3, [r0, #0]
 800e7f0:	2b30      	cmp	r3, #48	@ 0x30
 800e7f2:	d10a      	bne.n	800e80a <__cvt+0xba>
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	4630      	mov	r0, r6
 800e7fa:	4639      	mov	r1, r7
 800e7fc:	f7f2 f93c 	bl	8000a78 <__aeabi_dcmpeq>
 800e800:	b918      	cbnz	r0, 800e80a <__cvt+0xba>
 800e802:	f1c4 0401 	rsb	r4, r4, #1
 800e806:	f8ca 4000 	str.w	r4, [sl]
 800e80a:	f8da 3000 	ldr.w	r3, [sl]
 800e80e:	4499      	add	r9, r3
 800e810:	e7d3      	b.n	800e7ba <__cvt+0x6a>
 800e812:	1c59      	adds	r1, r3, #1
 800e814:	9103      	str	r1, [sp, #12]
 800e816:	701a      	strb	r2, [r3, #0]
 800e818:	e7d9      	b.n	800e7ce <__cvt+0x7e>

0800e81a <__exponent>:
 800e81a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e81c:	2900      	cmp	r1, #0
 800e81e:	bfba      	itte	lt
 800e820:	4249      	neglt	r1, r1
 800e822:	232d      	movlt	r3, #45	@ 0x2d
 800e824:	232b      	movge	r3, #43	@ 0x2b
 800e826:	2909      	cmp	r1, #9
 800e828:	7002      	strb	r2, [r0, #0]
 800e82a:	7043      	strb	r3, [r0, #1]
 800e82c:	dd29      	ble.n	800e882 <__exponent+0x68>
 800e82e:	f10d 0307 	add.w	r3, sp, #7
 800e832:	461d      	mov	r5, r3
 800e834:	270a      	movs	r7, #10
 800e836:	461a      	mov	r2, r3
 800e838:	fbb1 f6f7 	udiv	r6, r1, r7
 800e83c:	fb07 1416 	mls	r4, r7, r6, r1
 800e840:	3430      	adds	r4, #48	@ 0x30
 800e842:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e846:	460c      	mov	r4, r1
 800e848:	2c63      	cmp	r4, #99	@ 0x63
 800e84a:	f103 33ff 	add.w	r3, r3, #4294967295
 800e84e:	4631      	mov	r1, r6
 800e850:	dcf1      	bgt.n	800e836 <__exponent+0x1c>
 800e852:	3130      	adds	r1, #48	@ 0x30
 800e854:	1e94      	subs	r4, r2, #2
 800e856:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e85a:	1c41      	adds	r1, r0, #1
 800e85c:	4623      	mov	r3, r4
 800e85e:	42ab      	cmp	r3, r5
 800e860:	d30a      	bcc.n	800e878 <__exponent+0x5e>
 800e862:	f10d 0309 	add.w	r3, sp, #9
 800e866:	1a9b      	subs	r3, r3, r2
 800e868:	42ac      	cmp	r4, r5
 800e86a:	bf88      	it	hi
 800e86c:	2300      	movhi	r3, #0
 800e86e:	3302      	adds	r3, #2
 800e870:	4403      	add	r3, r0
 800e872:	1a18      	subs	r0, r3, r0
 800e874:	b003      	add	sp, #12
 800e876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e878:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e87c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e880:	e7ed      	b.n	800e85e <__exponent+0x44>
 800e882:	2330      	movs	r3, #48	@ 0x30
 800e884:	3130      	adds	r1, #48	@ 0x30
 800e886:	7083      	strb	r3, [r0, #2]
 800e888:	70c1      	strb	r1, [r0, #3]
 800e88a:	1d03      	adds	r3, r0, #4
 800e88c:	e7f1      	b.n	800e872 <__exponent+0x58>
	...

0800e890 <_printf_float>:
 800e890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e894:	b08d      	sub	sp, #52	@ 0x34
 800e896:	460c      	mov	r4, r1
 800e898:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e89c:	4616      	mov	r6, r2
 800e89e:	461f      	mov	r7, r3
 800e8a0:	4605      	mov	r5, r0
 800e8a2:	f000 fcd5 	bl	800f250 <_localeconv_r>
 800e8a6:	6803      	ldr	r3, [r0, #0]
 800e8a8:	9304      	str	r3, [sp, #16]
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	f7f1 fcb8 	bl	8000220 <strlen>
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	930a      	str	r3, [sp, #40]	@ 0x28
 800e8b4:	f8d8 3000 	ldr.w	r3, [r8]
 800e8b8:	9005      	str	r0, [sp, #20]
 800e8ba:	3307      	adds	r3, #7
 800e8bc:	f023 0307 	bic.w	r3, r3, #7
 800e8c0:	f103 0208 	add.w	r2, r3, #8
 800e8c4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e8c8:	f8d4 b000 	ldr.w	fp, [r4]
 800e8cc:	f8c8 2000 	str.w	r2, [r8]
 800e8d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e8d4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e8d8:	9307      	str	r3, [sp, #28]
 800e8da:	f8cd 8018 	str.w	r8, [sp, #24]
 800e8de:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e8e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e8e6:	4b9c      	ldr	r3, [pc, #624]	@ (800eb58 <_printf_float+0x2c8>)
 800e8e8:	f04f 32ff 	mov.w	r2, #4294967295
 800e8ec:	f7f2 f8f6 	bl	8000adc <__aeabi_dcmpun>
 800e8f0:	bb70      	cbnz	r0, 800e950 <_printf_float+0xc0>
 800e8f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e8f6:	4b98      	ldr	r3, [pc, #608]	@ (800eb58 <_printf_float+0x2c8>)
 800e8f8:	f04f 32ff 	mov.w	r2, #4294967295
 800e8fc:	f7f2 f8d0 	bl	8000aa0 <__aeabi_dcmple>
 800e900:	bb30      	cbnz	r0, 800e950 <_printf_float+0xc0>
 800e902:	2200      	movs	r2, #0
 800e904:	2300      	movs	r3, #0
 800e906:	4640      	mov	r0, r8
 800e908:	4649      	mov	r1, r9
 800e90a:	f7f2 f8bf 	bl	8000a8c <__aeabi_dcmplt>
 800e90e:	b110      	cbz	r0, 800e916 <_printf_float+0x86>
 800e910:	232d      	movs	r3, #45	@ 0x2d
 800e912:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e916:	4a91      	ldr	r2, [pc, #580]	@ (800eb5c <_printf_float+0x2cc>)
 800e918:	4b91      	ldr	r3, [pc, #580]	@ (800eb60 <_printf_float+0x2d0>)
 800e91a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e91e:	bf94      	ite	ls
 800e920:	4690      	movls	r8, r2
 800e922:	4698      	movhi	r8, r3
 800e924:	2303      	movs	r3, #3
 800e926:	6123      	str	r3, [r4, #16]
 800e928:	f02b 0304 	bic.w	r3, fp, #4
 800e92c:	6023      	str	r3, [r4, #0]
 800e92e:	f04f 0900 	mov.w	r9, #0
 800e932:	9700      	str	r7, [sp, #0]
 800e934:	4633      	mov	r3, r6
 800e936:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e938:	4621      	mov	r1, r4
 800e93a:	4628      	mov	r0, r5
 800e93c:	f000 f9d2 	bl	800ece4 <_printf_common>
 800e940:	3001      	adds	r0, #1
 800e942:	f040 808d 	bne.w	800ea60 <_printf_float+0x1d0>
 800e946:	f04f 30ff 	mov.w	r0, #4294967295
 800e94a:	b00d      	add	sp, #52	@ 0x34
 800e94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e950:	4642      	mov	r2, r8
 800e952:	464b      	mov	r3, r9
 800e954:	4640      	mov	r0, r8
 800e956:	4649      	mov	r1, r9
 800e958:	f7f2 f8c0 	bl	8000adc <__aeabi_dcmpun>
 800e95c:	b140      	cbz	r0, 800e970 <_printf_float+0xe0>
 800e95e:	464b      	mov	r3, r9
 800e960:	2b00      	cmp	r3, #0
 800e962:	bfbc      	itt	lt
 800e964:	232d      	movlt	r3, #45	@ 0x2d
 800e966:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e96a:	4a7e      	ldr	r2, [pc, #504]	@ (800eb64 <_printf_float+0x2d4>)
 800e96c:	4b7e      	ldr	r3, [pc, #504]	@ (800eb68 <_printf_float+0x2d8>)
 800e96e:	e7d4      	b.n	800e91a <_printf_float+0x8a>
 800e970:	6863      	ldr	r3, [r4, #4]
 800e972:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e976:	9206      	str	r2, [sp, #24]
 800e978:	1c5a      	adds	r2, r3, #1
 800e97a:	d13b      	bne.n	800e9f4 <_printf_float+0x164>
 800e97c:	2306      	movs	r3, #6
 800e97e:	6063      	str	r3, [r4, #4]
 800e980:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e984:	2300      	movs	r3, #0
 800e986:	6022      	str	r2, [r4, #0]
 800e988:	9303      	str	r3, [sp, #12]
 800e98a:	ab0a      	add	r3, sp, #40	@ 0x28
 800e98c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e990:	ab09      	add	r3, sp, #36	@ 0x24
 800e992:	9300      	str	r3, [sp, #0]
 800e994:	6861      	ldr	r1, [r4, #4]
 800e996:	ec49 8b10 	vmov	d0, r8, r9
 800e99a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e99e:	4628      	mov	r0, r5
 800e9a0:	f7ff fed6 	bl	800e750 <__cvt>
 800e9a4:	9b06      	ldr	r3, [sp, #24]
 800e9a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e9a8:	2b47      	cmp	r3, #71	@ 0x47
 800e9aa:	4680      	mov	r8, r0
 800e9ac:	d129      	bne.n	800ea02 <_printf_float+0x172>
 800e9ae:	1cc8      	adds	r0, r1, #3
 800e9b0:	db02      	blt.n	800e9b8 <_printf_float+0x128>
 800e9b2:	6863      	ldr	r3, [r4, #4]
 800e9b4:	4299      	cmp	r1, r3
 800e9b6:	dd41      	ble.n	800ea3c <_printf_float+0x1ac>
 800e9b8:	f1aa 0a02 	sub.w	sl, sl, #2
 800e9bc:	fa5f fa8a 	uxtb.w	sl, sl
 800e9c0:	3901      	subs	r1, #1
 800e9c2:	4652      	mov	r2, sl
 800e9c4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e9c8:	9109      	str	r1, [sp, #36]	@ 0x24
 800e9ca:	f7ff ff26 	bl	800e81a <__exponent>
 800e9ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e9d0:	1813      	adds	r3, r2, r0
 800e9d2:	2a01      	cmp	r2, #1
 800e9d4:	4681      	mov	r9, r0
 800e9d6:	6123      	str	r3, [r4, #16]
 800e9d8:	dc02      	bgt.n	800e9e0 <_printf_float+0x150>
 800e9da:	6822      	ldr	r2, [r4, #0]
 800e9dc:	07d2      	lsls	r2, r2, #31
 800e9de:	d501      	bpl.n	800e9e4 <_printf_float+0x154>
 800e9e0:	3301      	adds	r3, #1
 800e9e2:	6123      	str	r3, [r4, #16]
 800e9e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d0a2      	beq.n	800e932 <_printf_float+0xa2>
 800e9ec:	232d      	movs	r3, #45	@ 0x2d
 800e9ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e9f2:	e79e      	b.n	800e932 <_printf_float+0xa2>
 800e9f4:	9a06      	ldr	r2, [sp, #24]
 800e9f6:	2a47      	cmp	r2, #71	@ 0x47
 800e9f8:	d1c2      	bne.n	800e980 <_printf_float+0xf0>
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d1c0      	bne.n	800e980 <_printf_float+0xf0>
 800e9fe:	2301      	movs	r3, #1
 800ea00:	e7bd      	b.n	800e97e <_printf_float+0xee>
 800ea02:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ea06:	d9db      	bls.n	800e9c0 <_printf_float+0x130>
 800ea08:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ea0c:	d118      	bne.n	800ea40 <_printf_float+0x1b0>
 800ea0e:	2900      	cmp	r1, #0
 800ea10:	6863      	ldr	r3, [r4, #4]
 800ea12:	dd0b      	ble.n	800ea2c <_printf_float+0x19c>
 800ea14:	6121      	str	r1, [r4, #16]
 800ea16:	b913      	cbnz	r3, 800ea1e <_printf_float+0x18e>
 800ea18:	6822      	ldr	r2, [r4, #0]
 800ea1a:	07d0      	lsls	r0, r2, #31
 800ea1c:	d502      	bpl.n	800ea24 <_printf_float+0x194>
 800ea1e:	3301      	adds	r3, #1
 800ea20:	440b      	add	r3, r1
 800ea22:	6123      	str	r3, [r4, #16]
 800ea24:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ea26:	f04f 0900 	mov.w	r9, #0
 800ea2a:	e7db      	b.n	800e9e4 <_printf_float+0x154>
 800ea2c:	b913      	cbnz	r3, 800ea34 <_printf_float+0x1a4>
 800ea2e:	6822      	ldr	r2, [r4, #0]
 800ea30:	07d2      	lsls	r2, r2, #31
 800ea32:	d501      	bpl.n	800ea38 <_printf_float+0x1a8>
 800ea34:	3302      	adds	r3, #2
 800ea36:	e7f4      	b.n	800ea22 <_printf_float+0x192>
 800ea38:	2301      	movs	r3, #1
 800ea3a:	e7f2      	b.n	800ea22 <_printf_float+0x192>
 800ea3c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ea40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea42:	4299      	cmp	r1, r3
 800ea44:	db05      	blt.n	800ea52 <_printf_float+0x1c2>
 800ea46:	6823      	ldr	r3, [r4, #0]
 800ea48:	6121      	str	r1, [r4, #16]
 800ea4a:	07d8      	lsls	r0, r3, #31
 800ea4c:	d5ea      	bpl.n	800ea24 <_printf_float+0x194>
 800ea4e:	1c4b      	adds	r3, r1, #1
 800ea50:	e7e7      	b.n	800ea22 <_printf_float+0x192>
 800ea52:	2900      	cmp	r1, #0
 800ea54:	bfd4      	ite	le
 800ea56:	f1c1 0202 	rsble	r2, r1, #2
 800ea5a:	2201      	movgt	r2, #1
 800ea5c:	4413      	add	r3, r2
 800ea5e:	e7e0      	b.n	800ea22 <_printf_float+0x192>
 800ea60:	6823      	ldr	r3, [r4, #0]
 800ea62:	055a      	lsls	r2, r3, #21
 800ea64:	d407      	bmi.n	800ea76 <_printf_float+0x1e6>
 800ea66:	6923      	ldr	r3, [r4, #16]
 800ea68:	4642      	mov	r2, r8
 800ea6a:	4631      	mov	r1, r6
 800ea6c:	4628      	mov	r0, r5
 800ea6e:	47b8      	blx	r7
 800ea70:	3001      	adds	r0, #1
 800ea72:	d12b      	bne.n	800eacc <_printf_float+0x23c>
 800ea74:	e767      	b.n	800e946 <_printf_float+0xb6>
 800ea76:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ea7a:	f240 80dd 	bls.w	800ec38 <_printf_float+0x3a8>
 800ea7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ea82:	2200      	movs	r2, #0
 800ea84:	2300      	movs	r3, #0
 800ea86:	f7f1 fff7 	bl	8000a78 <__aeabi_dcmpeq>
 800ea8a:	2800      	cmp	r0, #0
 800ea8c:	d033      	beq.n	800eaf6 <_printf_float+0x266>
 800ea8e:	4a37      	ldr	r2, [pc, #220]	@ (800eb6c <_printf_float+0x2dc>)
 800ea90:	2301      	movs	r3, #1
 800ea92:	4631      	mov	r1, r6
 800ea94:	4628      	mov	r0, r5
 800ea96:	47b8      	blx	r7
 800ea98:	3001      	adds	r0, #1
 800ea9a:	f43f af54 	beq.w	800e946 <_printf_float+0xb6>
 800ea9e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800eaa2:	4543      	cmp	r3, r8
 800eaa4:	db02      	blt.n	800eaac <_printf_float+0x21c>
 800eaa6:	6823      	ldr	r3, [r4, #0]
 800eaa8:	07d8      	lsls	r0, r3, #31
 800eaaa:	d50f      	bpl.n	800eacc <_printf_float+0x23c>
 800eaac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eab0:	4631      	mov	r1, r6
 800eab2:	4628      	mov	r0, r5
 800eab4:	47b8      	blx	r7
 800eab6:	3001      	adds	r0, #1
 800eab8:	f43f af45 	beq.w	800e946 <_printf_float+0xb6>
 800eabc:	f04f 0900 	mov.w	r9, #0
 800eac0:	f108 38ff 	add.w	r8, r8, #4294967295
 800eac4:	f104 0a1a 	add.w	sl, r4, #26
 800eac8:	45c8      	cmp	r8, r9
 800eaca:	dc09      	bgt.n	800eae0 <_printf_float+0x250>
 800eacc:	6823      	ldr	r3, [r4, #0]
 800eace:	079b      	lsls	r3, r3, #30
 800ead0:	f100 8103 	bmi.w	800ecda <_printf_float+0x44a>
 800ead4:	68e0      	ldr	r0, [r4, #12]
 800ead6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ead8:	4298      	cmp	r0, r3
 800eada:	bfb8      	it	lt
 800eadc:	4618      	movlt	r0, r3
 800eade:	e734      	b.n	800e94a <_printf_float+0xba>
 800eae0:	2301      	movs	r3, #1
 800eae2:	4652      	mov	r2, sl
 800eae4:	4631      	mov	r1, r6
 800eae6:	4628      	mov	r0, r5
 800eae8:	47b8      	blx	r7
 800eaea:	3001      	adds	r0, #1
 800eaec:	f43f af2b 	beq.w	800e946 <_printf_float+0xb6>
 800eaf0:	f109 0901 	add.w	r9, r9, #1
 800eaf4:	e7e8      	b.n	800eac8 <_printf_float+0x238>
 800eaf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	dc39      	bgt.n	800eb70 <_printf_float+0x2e0>
 800eafc:	4a1b      	ldr	r2, [pc, #108]	@ (800eb6c <_printf_float+0x2dc>)
 800eafe:	2301      	movs	r3, #1
 800eb00:	4631      	mov	r1, r6
 800eb02:	4628      	mov	r0, r5
 800eb04:	47b8      	blx	r7
 800eb06:	3001      	adds	r0, #1
 800eb08:	f43f af1d 	beq.w	800e946 <_printf_float+0xb6>
 800eb0c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800eb10:	ea59 0303 	orrs.w	r3, r9, r3
 800eb14:	d102      	bne.n	800eb1c <_printf_float+0x28c>
 800eb16:	6823      	ldr	r3, [r4, #0]
 800eb18:	07d9      	lsls	r1, r3, #31
 800eb1a:	d5d7      	bpl.n	800eacc <_printf_float+0x23c>
 800eb1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eb20:	4631      	mov	r1, r6
 800eb22:	4628      	mov	r0, r5
 800eb24:	47b8      	blx	r7
 800eb26:	3001      	adds	r0, #1
 800eb28:	f43f af0d 	beq.w	800e946 <_printf_float+0xb6>
 800eb2c:	f04f 0a00 	mov.w	sl, #0
 800eb30:	f104 0b1a 	add.w	fp, r4, #26
 800eb34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb36:	425b      	negs	r3, r3
 800eb38:	4553      	cmp	r3, sl
 800eb3a:	dc01      	bgt.n	800eb40 <_printf_float+0x2b0>
 800eb3c:	464b      	mov	r3, r9
 800eb3e:	e793      	b.n	800ea68 <_printf_float+0x1d8>
 800eb40:	2301      	movs	r3, #1
 800eb42:	465a      	mov	r2, fp
 800eb44:	4631      	mov	r1, r6
 800eb46:	4628      	mov	r0, r5
 800eb48:	47b8      	blx	r7
 800eb4a:	3001      	adds	r0, #1
 800eb4c:	f43f aefb 	beq.w	800e946 <_printf_float+0xb6>
 800eb50:	f10a 0a01 	add.w	sl, sl, #1
 800eb54:	e7ee      	b.n	800eb34 <_printf_float+0x2a4>
 800eb56:	bf00      	nop
 800eb58:	7fefffff 	.word	0x7fefffff
 800eb5c:	08011280 	.word	0x08011280
 800eb60:	08011284 	.word	0x08011284
 800eb64:	08011288 	.word	0x08011288
 800eb68:	0801128c 	.word	0x0801128c
 800eb6c:	08011290 	.word	0x08011290
 800eb70:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800eb72:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800eb76:	4553      	cmp	r3, sl
 800eb78:	bfa8      	it	ge
 800eb7a:	4653      	movge	r3, sl
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	4699      	mov	r9, r3
 800eb80:	dc36      	bgt.n	800ebf0 <_printf_float+0x360>
 800eb82:	f04f 0b00 	mov.w	fp, #0
 800eb86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eb8a:	f104 021a 	add.w	r2, r4, #26
 800eb8e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800eb90:	9306      	str	r3, [sp, #24]
 800eb92:	eba3 0309 	sub.w	r3, r3, r9
 800eb96:	455b      	cmp	r3, fp
 800eb98:	dc31      	bgt.n	800ebfe <_printf_float+0x36e>
 800eb9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb9c:	459a      	cmp	sl, r3
 800eb9e:	dc3a      	bgt.n	800ec16 <_printf_float+0x386>
 800eba0:	6823      	ldr	r3, [r4, #0]
 800eba2:	07da      	lsls	r2, r3, #31
 800eba4:	d437      	bmi.n	800ec16 <_printf_float+0x386>
 800eba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eba8:	ebaa 0903 	sub.w	r9, sl, r3
 800ebac:	9b06      	ldr	r3, [sp, #24]
 800ebae:	ebaa 0303 	sub.w	r3, sl, r3
 800ebb2:	4599      	cmp	r9, r3
 800ebb4:	bfa8      	it	ge
 800ebb6:	4699      	movge	r9, r3
 800ebb8:	f1b9 0f00 	cmp.w	r9, #0
 800ebbc:	dc33      	bgt.n	800ec26 <_printf_float+0x396>
 800ebbe:	f04f 0800 	mov.w	r8, #0
 800ebc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ebc6:	f104 0b1a 	add.w	fp, r4, #26
 800ebca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebcc:	ebaa 0303 	sub.w	r3, sl, r3
 800ebd0:	eba3 0309 	sub.w	r3, r3, r9
 800ebd4:	4543      	cmp	r3, r8
 800ebd6:	f77f af79 	ble.w	800eacc <_printf_float+0x23c>
 800ebda:	2301      	movs	r3, #1
 800ebdc:	465a      	mov	r2, fp
 800ebde:	4631      	mov	r1, r6
 800ebe0:	4628      	mov	r0, r5
 800ebe2:	47b8      	blx	r7
 800ebe4:	3001      	adds	r0, #1
 800ebe6:	f43f aeae 	beq.w	800e946 <_printf_float+0xb6>
 800ebea:	f108 0801 	add.w	r8, r8, #1
 800ebee:	e7ec      	b.n	800ebca <_printf_float+0x33a>
 800ebf0:	4642      	mov	r2, r8
 800ebf2:	4631      	mov	r1, r6
 800ebf4:	4628      	mov	r0, r5
 800ebf6:	47b8      	blx	r7
 800ebf8:	3001      	adds	r0, #1
 800ebfa:	d1c2      	bne.n	800eb82 <_printf_float+0x2f2>
 800ebfc:	e6a3      	b.n	800e946 <_printf_float+0xb6>
 800ebfe:	2301      	movs	r3, #1
 800ec00:	4631      	mov	r1, r6
 800ec02:	4628      	mov	r0, r5
 800ec04:	9206      	str	r2, [sp, #24]
 800ec06:	47b8      	blx	r7
 800ec08:	3001      	adds	r0, #1
 800ec0a:	f43f ae9c 	beq.w	800e946 <_printf_float+0xb6>
 800ec0e:	9a06      	ldr	r2, [sp, #24]
 800ec10:	f10b 0b01 	add.w	fp, fp, #1
 800ec14:	e7bb      	b.n	800eb8e <_printf_float+0x2fe>
 800ec16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec1a:	4631      	mov	r1, r6
 800ec1c:	4628      	mov	r0, r5
 800ec1e:	47b8      	blx	r7
 800ec20:	3001      	adds	r0, #1
 800ec22:	d1c0      	bne.n	800eba6 <_printf_float+0x316>
 800ec24:	e68f      	b.n	800e946 <_printf_float+0xb6>
 800ec26:	9a06      	ldr	r2, [sp, #24]
 800ec28:	464b      	mov	r3, r9
 800ec2a:	4442      	add	r2, r8
 800ec2c:	4631      	mov	r1, r6
 800ec2e:	4628      	mov	r0, r5
 800ec30:	47b8      	blx	r7
 800ec32:	3001      	adds	r0, #1
 800ec34:	d1c3      	bne.n	800ebbe <_printf_float+0x32e>
 800ec36:	e686      	b.n	800e946 <_printf_float+0xb6>
 800ec38:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ec3c:	f1ba 0f01 	cmp.w	sl, #1
 800ec40:	dc01      	bgt.n	800ec46 <_printf_float+0x3b6>
 800ec42:	07db      	lsls	r3, r3, #31
 800ec44:	d536      	bpl.n	800ecb4 <_printf_float+0x424>
 800ec46:	2301      	movs	r3, #1
 800ec48:	4642      	mov	r2, r8
 800ec4a:	4631      	mov	r1, r6
 800ec4c:	4628      	mov	r0, r5
 800ec4e:	47b8      	blx	r7
 800ec50:	3001      	adds	r0, #1
 800ec52:	f43f ae78 	beq.w	800e946 <_printf_float+0xb6>
 800ec56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec5a:	4631      	mov	r1, r6
 800ec5c:	4628      	mov	r0, r5
 800ec5e:	47b8      	blx	r7
 800ec60:	3001      	adds	r0, #1
 800ec62:	f43f ae70 	beq.w	800e946 <_printf_float+0xb6>
 800ec66:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ec72:	f7f1 ff01 	bl	8000a78 <__aeabi_dcmpeq>
 800ec76:	b9c0      	cbnz	r0, 800ecaa <_printf_float+0x41a>
 800ec78:	4653      	mov	r3, sl
 800ec7a:	f108 0201 	add.w	r2, r8, #1
 800ec7e:	4631      	mov	r1, r6
 800ec80:	4628      	mov	r0, r5
 800ec82:	47b8      	blx	r7
 800ec84:	3001      	adds	r0, #1
 800ec86:	d10c      	bne.n	800eca2 <_printf_float+0x412>
 800ec88:	e65d      	b.n	800e946 <_printf_float+0xb6>
 800ec8a:	2301      	movs	r3, #1
 800ec8c:	465a      	mov	r2, fp
 800ec8e:	4631      	mov	r1, r6
 800ec90:	4628      	mov	r0, r5
 800ec92:	47b8      	blx	r7
 800ec94:	3001      	adds	r0, #1
 800ec96:	f43f ae56 	beq.w	800e946 <_printf_float+0xb6>
 800ec9a:	f108 0801 	add.w	r8, r8, #1
 800ec9e:	45d0      	cmp	r8, sl
 800eca0:	dbf3      	blt.n	800ec8a <_printf_float+0x3fa>
 800eca2:	464b      	mov	r3, r9
 800eca4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800eca8:	e6df      	b.n	800ea6a <_printf_float+0x1da>
 800ecaa:	f04f 0800 	mov.w	r8, #0
 800ecae:	f104 0b1a 	add.w	fp, r4, #26
 800ecb2:	e7f4      	b.n	800ec9e <_printf_float+0x40e>
 800ecb4:	2301      	movs	r3, #1
 800ecb6:	4642      	mov	r2, r8
 800ecb8:	e7e1      	b.n	800ec7e <_printf_float+0x3ee>
 800ecba:	2301      	movs	r3, #1
 800ecbc:	464a      	mov	r2, r9
 800ecbe:	4631      	mov	r1, r6
 800ecc0:	4628      	mov	r0, r5
 800ecc2:	47b8      	blx	r7
 800ecc4:	3001      	adds	r0, #1
 800ecc6:	f43f ae3e 	beq.w	800e946 <_printf_float+0xb6>
 800ecca:	f108 0801 	add.w	r8, r8, #1
 800ecce:	68e3      	ldr	r3, [r4, #12]
 800ecd0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ecd2:	1a5b      	subs	r3, r3, r1
 800ecd4:	4543      	cmp	r3, r8
 800ecd6:	dcf0      	bgt.n	800ecba <_printf_float+0x42a>
 800ecd8:	e6fc      	b.n	800ead4 <_printf_float+0x244>
 800ecda:	f04f 0800 	mov.w	r8, #0
 800ecde:	f104 0919 	add.w	r9, r4, #25
 800ece2:	e7f4      	b.n	800ecce <_printf_float+0x43e>

0800ece4 <_printf_common>:
 800ece4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ece8:	4616      	mov	r6, r2
 800ecea:	4698      	mov	r8, r3
 800ecec:	688a      	ldr	r2, [r1, #8]
 800ecee:	690b      	ldr	r3, [r1, #16]
 800ecf0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ecf4:	4293      	cmp	r3, r2
 800ecf6:	bfb8      	it	lt
 800ecf8:	4613      	movlt	r3, r2
 800ecfa:	6033      	str	r3, [r6, #0]
 800ecfc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ed00:	4607      	mov	r7, r0
 800ed02:	460c      	mov	r4, r1
 800ed04:	b10a      	cbz	r2, 800ed0a <_printf_common+0x26>
 800ed06:	3301      	adds	r3, #1
 800ed08:	6033      	str	r3, [r6, #0]
 800ed0a:	6823      	ldr	r3, [r4, #0]
 800ed0c:	0699      	lsls	r1, r3, #26
 800ed0e:	bf42      	ittt	mi
 800ed10:	6833      	ldrmi	r3, [r6, #0]
 800ed12:	3302      	addmi	r3, #2
 800ed14:	6033      	strmi	r3, [r6, #0]
 800ed16:	6825      	ldr	r5, [r4, #0]
 800ed18:	f015 0506 	ands.w	r5, r5, #6
 800ed1c:	d106      	bne.n	800ed2c <_printf_common+0x48>
 800ed1e:	f104 0a19 	add.w	sl, r4, #25
 800ed22:	68e3      	ldr	r3, [r4, #12]
 800ed24:	6832      	ldr	r2, [r6, #0]
 800ed26:	1a9b      	subs	r3, r3, r2
 800ed28:	42ab      	cmp	r3, r5
 800ed2a:	dc26      	bgt.n	800ed7a <_printf_common+0x96>
 800ed2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ed30:	6822      	ldr	r2, [r4, #0]
 800ed32:	3b00      	subs	r3, #0
 800ed34:	bf18      	it	ne
 800ed36:	2301      	movne	r3, #1
 800ed38:	0692      	lsls	r2, r2, #26
 800ed3a:	d42b      	bmi.n	800ed94 <_printf_common+0xb0>
 800ed3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ed40:	4641      	mov	r1, r8
 800ed42:	4638      	mov	r0, r7
 800ed44:	47c8      	blx	r9
 800ed46:	3001      	adds	r0, #1
 800ed48:	d01e      	beq.n	800ed88 <_printf_common+0xa4>
 800ed4a:	6823      	ldr	r3, [r4, #0]
 800ed4c:	6922      	ldr	r2, [r4, #16]
 800ed4e:	f003 0306 	and.w	r3, r3, #6
 800ed52:	2b04      	cmp	r3, #4
 800ed54:	bf02      	ittt	eq
 800ed56:	68e5      	ldreq	r5, [r4, #12]
 800ed58:	6833      	ldreq	r3, [r6, #0]
 800ed5a:	1aed      	subeq	r5, r5, r3
 800ed5c:	68a3      	ldr	r3, [r4, #8]
 800ed5e:	bf0c      	ite	eq
 800ed60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ed64:	2500      	movne	r5, #0
 800ed66:	4293      	cmp	r3, r2
 800ed68:	bfc4      	itt	gt
 800ed6a:	1a9b      	subgt	r3, r3, r2
 800ed6c:	18ed      	addgt	r5, r5, r3
 800ed6e:	2600      	movs	r6, #0
 800ed70:	341a      	adds	r4, #26
 800ed72:	42b5      	cmp	r5, r6
 800ed74:	d11a      	bne.n	800edac <_printf_common+0xc8>
 800ed76:	2000      	movs	r0, #0
 800ed78:	e008      	b.n	800ed8c <_printf_common+0xa8>
 800ed7a:	2301      	movs	r3, #1
 800ed7c:	4652      	mov	r2, sl
 800ed7e:	4641      	mov	r1, r8
 800ed80:	4638      	mov	r0, r7
 800ed82:	47c8      	blx	r9
 800ed84:	3001      	adds	r0, #1
 800ed86:	d103      	bne.n	800ed90 <_printf_common+0xac>
 800ed88:	f04f 30ff 	mov.w	r0, #4294967295
 800ed8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed90:	3501      	adds	r5, #1
 800ed92:	e7c6      	b.n	800ed22 <_printf_common+0x3e>
 800ed94:	18e1      	adds	r1, r4, r3
 800ed96:	1c5a      	adds	r2, r3, #1
 800ed98:	2030      	movs	r0, #48	@ 0x30
 800ed9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ed9e:	4422      	add	r2, r4
 800eda0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800eda4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800eda8:	3302      	adds	r3, #2
 800edaa:	e7c7      	b.n	800ed3c <_printf_common+0x58>
 800edac:	2301      	movs	r3, #1
 800edae:	4622      	mov	r2, r4
 800edb0:	4641      	mov	r1, r8
 800edb2:	4638      	mov	r0, r7
 800edb4:	47c8      	blx	r9
 800edb6:	3001      	adds	r0, #1
 800edb8:	d0e6      	beq.n	800ed88 <_printf_common+0xa4>
 800edba:	3601      	adds	r6, #1
 800edbc:	e7d9      	b.n	800ed72 <_printf_common+0x8e>
	...

0800edc0 <_printf_i>:
 800edc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800edc4:	7e0f      	ldrb	r7, [r1, #24]
 800edc6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800edc8:	2f78      	cmp	r7, #120	@ 0x78
 800edca:	4691      	mov	r9, r2
 800edcc:	4680      	mov	r8, r0
 800edce:	460c      	mov	r4, r1
 800edd0:	469a      	mov	sl, r3
 800edd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800edd6:	d807      	bhi.n	800ede8 <_printf_i+0x28>
 800edd8:	2f62      	cmp	r7, #98	@ 0x62
 800edda:	d80a      	bhi.n	800edf2 <_printf_i+0x32>
 800eddc:	2f00      	cmp	r7, #0
 800edde:	f000 80d2 	beq.w	800ef86 <_printf_i+0x1c6>
 800ede2:	2f58      	cmp	r7, #88	@ 0x58
 800ede4:	f000 80b9 	beq.w	800ef5a <_printf_i+0x19a>
 800ede8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800edec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800edf0:	e03a      	b.n	800ee68 <_printf_i+0xa8>
 800edf2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800edf6:	2b15      	cmp	r3, #21
 800edf8:	d8f6      	bhi.n	800ede8 <_printf_i+0x28>
 800edfa:	a101      	add	r1, pc, #4	@ (adr r1, 800ee00 <_printf_i+0x40>)
 800edfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ee00:	0800ee59 	.word	0x0800ee59
 800ee04:	0800ee6d 	.word	0x0800ee6d
 800ee08:	0800ede9 	.word	0x0800ede9
 800ee0c:	0800ede9 	.word	0x0800ede9
 800ee10:	0800ede9 	.word	0x0800ede9
 800ee14:	0800ede9 	.word	0x0800ede9
 800ee18:	0800ee6d 	.word	0x0800ee6d
 800ee1c:	0800ede9 	.word	0x0800ede9
 800ee20:	0800ede9 	.word	0x0800ede9
 800ee24:	0800ede9 	.word	0x0800ede9
 800ee28:	0800ede9 	.word	0x0800ede9
 800ee2c:	0800ef6d 	.word	0x0800ef6d
 800ee30:	0800ee97 	.word	0x0800ee97
 800ee34:	0800ef27 	.word	0x0800ef27
 800ee38:	0800ede9 	.word	0x0800ede9
 800ee3c:	0800ede9 	.word	0x0800ede9
 800ee40:	0800ef8f 	.word	0x0800ef8f
 800ee44:	0800ede9 	.word	0x0800ede9
 800ee48:	0800ee97 	.word	0x0800ee97
 800ee4c:	0800ede9 	.word	0x0800ede9
 800ee50:	0800ede9 	.word	0x0800ede9
 800ee54:	0800ef2f 	.word	0x0800ef2f
 800ee58:	6833      	ldr	r3, [r6, #0]
 800ee5a:	1d1a      	adds	r2, r3, #4
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	6032      	str	r2, [r6, #0]
 800ee60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ee64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ee68:	2301      	movs	r3, #1
 800ee6a:	e09d      	b.n	800efa8 <_printf_i+0x1e8>
 800ee6c:	6833      	ldr	r3, [r6, #0]
 800ee6e:	6820      	ldr	r0, [r4, #0]
 800ee70:	1d19      	adds	r1, r3, #4
 800ee72:	6031      	str	r1, [r6, #0]
 800ee74:	0606      	lsls	r6, r0, #24
 800ee76:	d501      	bpl.n	800ee7c <_printf_i+0xbc>
 800ee78:	681d      	ldr	r5, [r3, #0]
 800ee7a:	e003      	b.n	800ee84 <_printf_i+0xc4>
 800ee7c:	0645      	lsls	r5, r0, #25
 800ee7e:	d5fb      	bpl.n	800ee78 <_printf_i+0xb8>
 800ee80:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ee84:	2d00      	cmp	r5, #0
 800ee86:	da03      	bge.n	800ee90 <_printf_i+0xd0>
 800ee88:	232d      	movs	r3, #45	@ 0x2d
 800ee8a:	426d      	negs	r5, r5
 800ee8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ee90:	4859      	ldr	r0, [pc, #356]	@ (800eff8 <_printf_i+0x238>)
 800ee92:	230a      	movs	r3, #10
 800ee94:	e011      	b.n	800eeba <_printf_i+0xfa>
 800ee96:	6821      	ldr	r1, [r4, #0]
 800ee98:	6833      	ldr	r3, [r6, #0]
 800ee9a:	0608      	lsls	r0, r1, #24
 800ee9c:	f853 5b04 	ldr.w	r5, [r3], #4
 800eea0:	d402      	bmi.n	800eea8 <_printf_i+0xe8>
 800eea2:	0649      	lsls	r1, r1, #25
 800eea4:	bf48      	it	mi
 800eea6:	b2ad      	uxthmi	r5, r5
 800eea8:	2f6f      	cmp	r7, #111	@ 0x6f
 800eeaa:	4853      	ldr	r0, [pc, #332]	@ (800eff8 <_printf_i+0x238>)
 800eeac:	6033      	str	r3, [r6, #0]
 800eeae:	bf14      	ite	ne
 800eeb0:	230a      	movne	r3, #10
 800eeb2:	2308      	moveq	r3, #8
 800eeb4:	2100      	movs	r1, #0
 800eeb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800eeba:	6866      	ldr	r6, [r4, #4]
 800eebc:	60a6      	str	r6, [r4, #8]
 800eebe:	2e00      	cmp	r6, #0
 800eec0:	bfa2      	ittt	ge
 800eec2:	6821      	ldrge	r1, [r4, #0]
 800eec4:	f021 0104 	bicge.w	r1, r1, #4
 800eec8:	6021      	strge	r1, [r4, #0]
 800eeca:	b90d      	cbnz	r5, 800eed0 <_printf_i+0x110>
 800eecc:	2e00      	cmp	r6, #0
 800eece:	d04b      	beq.n	800ef68 <_printf_i+0x1a8>
 800eed0:	4616      	mov	r6, r2
 800eed2:	fbb5 f1f3 	udiv	r1, r5, r3
 800eed6:	fb03 5711 	mls	r7, r3, r1, r5
 800eeda:	5dc7      	ldrb	r7, [r0, r7]
 800eedc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800eee0:	462f      	mov	r7, r5
 800eee2:	42bb      	cmp	r3, r7
 800eee4:	460d      	mov	r5, r1
 800eee6:	d9f4      	bls.n	800eed2 <_printf_i+0x112>
 800eee8:	2b08      	cmp	r3, #8
 800eeea:	d10b      	bne.n	800ef04 <_printf_i+0x144>
 800eeec:	6823      	ldr	r3, [r4, #0]
 800eeee:	07df      	lsls	r7, r3, #31
 800eef0:	d508      	bpl.n	800ef04 <_printf_i+0x144>
 800eef2:	6923      	ldr	r3, [r4, #16]
 800eef4:	6861      	ldr	r1, [r4, #4]
 800eef6:	4299      	cmp	r1, r3
 800eef8:	bfde      	ittt	le
 800eefa:	2330      	movle	r3, #48	@ 0x30
 800eefc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ef00:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ef04:	1b92      	subs	r2, r2, r6
 800ef06:	6122      	str	r2, [r4, #16]
 800ef08:	f8cd a000 	str.w	sl, [sp]
 800ef0c:	464b      	mov	r3, r9
 800ef0e:	aa03      	add	r2, sp, #12
 800ef10:	4621      	mov	r1, r4
 800ef12:	4640      	mov	r0, r8
 800ef14:	f7ff fee6 	bl	800ece4 <_printf_common>
 800ef18:	3001      	adds	r0, #1
 800ef1a:	d14a      	bne.n	800efb2 <_printf_i+0x1f2>
 800ef1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ef20:	b004      	add	sp, #16
 800ef22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef26:	6823      	ldr	r3, [r4, #0]
 800ef28:	f043 0320 	orr.w	r3, r3, #32
 800ef2c:	6023      	str	r3, [r4, #0]
 800ef2e:	4833      	ldr	r0, [pc, #204]	@ (800effc <_printf_i+0x23c>)
 800ef30:	2778      	movs	r7, #120	@ 0x78
 800ef32:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ef36:	6823      	ldr	r3, [r4, #0]
 800ef38:	6831      	ldr	r1, [r6, #0]
 800ef3a:	061f      	lsls	r7, r3, #24
 800ef3c:	f851 5b04 	ldr.w	r5, [r1], #4
 800ef40:	d402      	bmi.n	800ef48 <_printf_i+0x188>
 800ef42:	065f      	lsls	r7, r3, #25
 800ef44:	bf48      	it	mi
 800ef46:	b2ad      	uxthmi	r5, r5
 800ef48:	6031      	str	r1, [r6, #0]
 800ef4a:	07d9      	lsls	r1, r3, #31
 800ef4c:	bf44      	itt	mi
 800ef4e:	f043 0320 	orrmi.w	r3, r3, #32
 800ef52:	6023      	strmi	r3, [r4, #0]
 800ef54:	b11d      	cbz	r5, 800ef5e <_printf_i+0x19e>
 800ef56:	2310      	movs	r3, #16
 800ef58:	e7ac      	b.n	800eeb4 <_printf_i+0xf4>
 800ef5a:	4827      	ldr	r0, [pc, #156]	@ (800eff8 <_printf_i+0x238>)
 800ef5c:	e7e9      	b.n	800ef32 <_printf_i+0x172>
 800ef5e:	6823      	ldr	r3, [r4, #0]
 800ef60:	f023 0320 	bic.w	r3, r3, #32
 800ef64:	6023      	str	r3, [r4, #0]
 800ef66:	e7f6      	b.n	800ef56 <_printf_i+0x196>
 800ef68:	4616      	mov	r6, r2
 800ef6a:	e7bd      	b.n	800eee8 <_printf_i+0x128>
 800ef6c:	6833      	ldr	r3, [r6, #0]
 800ef6e:	6825      	ldr	r5, [r4, #0]
 800ef70:	6961      	ldr	r1, [r4, #20]
 800ef72:	1d18      	adds	r0, r3, #4
 800ef74:	6030      	str	r0, [r6, #0]
 800ef76:	062e      	lsls	r6, r5, #24
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	d501      	bpl.n	800ef80 <_printf_i+0x1c0>
 800ef7c:	6019      	str	r1, [r3, #0]
 800ef7e:	e002      	b.n	800ef86 <_printf_i+0x1c6>
 800ef80:	0668      	lsls	r0, r5, #25
 800ef82:	d5fb      	bpl.n	800ef7c <_printf_i+0x1bc>
 800ef84:	8019      	strh	r1, [r3, #0]
 800ef86:	2300      	movs	r3, #0
 800ef88:	6123      	str	r3, [r4, #16]
 800ef8a:	4616      	mov	r6, r2
 800ef8c:	e7bc      	b.n	800ef08 <_printf_i+0x148>
 800ef8e:	6833      	ldr	r3, [r6, #0]
 800ef90:	1d1a      	adds	r2, r3, #4
 800ef92:	6032      	str	r2, [r6, #0]
 800ef94:	681e      	ldr	r6, [r3, #0]
 800ef96:	6862      	ldr	r2, [r4, #4]
 800ef98:	2100      	movs	r1, #0
 800ef9a:	4630      	mov	r0, r6
 800ef9c:	f7f1 f8f0 	bl	8000180 <memchr>
 800efa0:	b108      	cbz	r0, 800efa6 <_printf_i+0x1e6>
 800efa2:	1b80      	subs	r0, r0, r6
 800efa4:	6060      	str	r0, [r4, #4]
 800efa6:	6863      	ldr	r3, [r4, #4]
 800efa8:	6123      	str	r3, [r4, #16]
 800efaa:	2300      	movs	r3, #0
 800efac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800efb0:	e7aa      	b.n	800ef08 <_printf_i+0x148>
 800efb2:	6923      	ldr	r3, [r4, #16]
 800efb4:	4632      	mov	r2, r6
 800efb6:	4649      	mov	r1, r9
 800efb8:	4640      	mov	r0, r8
 800efba:	47d0      	blx	sl
 800efbc:	3001      	adds	r0, #1
 800efbe:	d0ad      	beq.n	800ef1c <_printf_i+0x15c>
 800efc0:	6823      	ldr	r3, [r4, #0]
 800efc2:	079b      	lsls	r3, r3, #30
 800efc4:	d413      	bmi.n	800efee <_printf_i+0x22e>
 800efc6:	68e0      	ldr	r0, [r4, #12]
 800efc8:	9b03      	ldr	r3, [sp, #12]
 800efca:	4298      	cmp	r0, r3
 800efcc:	bfb8      	it	lt
 800efce:	4618      	movlt	r0, r3
 800efd0:	e7a6      	b.n	800ef20 <_printf_i+0x160>
 800efd2:	2301      	movs	r3, #1
 800efd4:	4632      	mov	r2, r6
 800efd6:	4649      	mov	r1, r9
 800efd8:	4640      	mov	r0, r8
 800efda:	47d0      	blx	sl
 800efdc:	3001      	adds	r0, #1
 800efde:	d09d      	beq.n	800ef1c <_printf_i+0x15c>
 800efe0:	3501      	adds	r5, #1
 800efe2:	68e3      	ldr	r3, [r4, #12]
 800efe4:	9903      	ldr	r1, [sp, #12]
 800efe6:	1a5b      	subs	r3, r3, r1
 800efe8:	42ab      	cmp	r3, r5
 800efea:	dcf2      	bgt.n	800efd2 <_printf_i+0x212>
 800efec:	e7eb      	b.n	800efc6 <_printf_i+0x206>
 800efee:	2500      	movs	r5, #0
 800eff0:	f104 0619 	add.w	r6, r4, #25
 800eff4:	e7f5      	b.n	800efe2 <_printf_i+0x222>
 800eff6:	bf00      	nop
 800eff8:	08011292 	.word	0x08011292
 800effc:	080112a3 	.word	0x080112a3

0800f000 <std>:
 800f000:	2300      	movs	r3, #0
 800f002:	b510      	push	{r4, lr}
 800f004:	4604      	mov	r4, r0
 800f006:	e9c0 3300 	strd	r3, r3, [r0]
 800f00a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f00e:	6083      	str	r3, [r0, #8]
 800f010:	8181      	strh	r1, [r0, #12]
 800f012:	6643      	str	r3, [r0, #100]	@ 0x64
 800f014:	81c2      	strh	r2, [r0, #14]
 800f016:	6183      	str	r3, [r0, #24]
 800f018:	4619      	mov	r1, r3
 800f01a:	2208      	movs	r2, #8
 800f01c:	305c      	adds	r0, #92	@ 0x5c
 800f01e:	f000 f90e 	bl	800f23e <memset>
 800f022:	4b0d      	ldr	r3, [pc, #52]	@ (800f058 <std+0x58>)
 800f024:	6263      	str	r3, [r4, #36]	@ 0x24
 800f026:	4b0d      	ldr	r3, [pc, #52]	@ (800f05c <std+0x5c>)
 800f028:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f02a:	4b0d      	ldr	r3, [pc, #52]	@ (800f060 <std+0x60>)
 800f02c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f02e:	4b0d      	ldr	r3, [pc, #52]	@ (800f064 <std+0x64>)
 800f030:	6323      	str	r3, [r4, #48]	@ 0x30
 800f032:	4b0d      	ldr	r3, [pc, #52]	@ (800f068 <std+0x68>)
 800f034:	6224      	str	r4, [r4, #32]
 800f036:	429c      	cmp	r4, r3
 800f038:	d006      	beq.n	800f048 <std+0x48>
 800f03a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f03e:	4294      	cmp	r4, r2
 800f040:	d002      	beq.n	800f048 <std+0x48>
 800f042:	33d0      	adds	r3, #208	@ 0xd0
 800f044:	429c      	cmp	r4, r3
 800f046:	d105      	bne.n	800f054 <std+0x54>
 800f048:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f04c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f050:	f000 b972 	b.w	800f338 <__retarget_lock_init_recursive>
 800f054:	bd10      	pop	{r4, pc}
 800f056:	bf00      	nop
 800f058:	0800f1b9 	.word	0x0800f1b9
 800f05c:	0800f1db 	.word	0x0800f1db
 800f060:	0800f213 	.word	0x0800f213
 800f064:	0800f237 	.word	0x0800f237
 800f068:	2000210c 	.word	0x2000210c

0800f06c <stdio_exit_handler>:
 800f06c:	4a02      	ldr	r2, [pc, #8]	@ (800f078 <stdio_exit_handler+0xc>)
 800f06e:	4903      	ldr	r1, [pc, #12]	@ (800f07c <stdio_exit_handler+0x10>)
 800f070:	4803      	ldr	r0, [pc, #12]	@ (800f080 <stdio_exit_handler+0x14>)
 800f072:	f000 b869 	b.w	800f148 <_fwalk_sglue>
 800f076:	bf00      	nop
 800f078:	20000124 	.word	0x20000124
 800f07c:	08010c89 	.word	0x08010c89
 800f080:	20000134 	.word	0x20000134

0800f084 <cleanup_stdio>:
 800f084:	6841      	ldr	r1, [r0, #4]
 800f086:	4b0c      	ldr	r3, [pc, #48]	@ (800f0b8 <cleanup_stdio+0x34>)
 800f088:	4299      	cmp	r1, r3
 800f08a:	b510      	push	{r4, lr}
 800f08c:	4604      	mov	r4, r0
 800f08e:	d001      	beq.n	800f094 <cleanup_stdio+0x10>
 800f090:	f001 fdfa 	bl	8010c88 <_fflush_r>
 800f094:	68a1      	ldr	r1, [r4, #8]
 800f096:	4b09      	ldr	r3, [pc, #36]	@ (800f0bc <cleanup_stdio+0x38>)
 800f098:	4299      	cmp	r1, r3
 800f09a:	d002      	beq.n	800f0a2 <cleanup_stdio+0x1e>
 800f09c:	4620      	mov	r0, r4
 800f09e:	f001 fdf3 	bl	8010c88 <_fflush_r>
 800f0a2:	68e1      	ldr	r1, [r4, #12]
 800f0a4:	4b06      	ldr	r3, [pc, #24]	@ (800f0c0 <cleanup_stdio+0x3c>)
 800f0a6:	4299      	cmp	r1, r3
 800f0a8:	d004      	beq.n	800f0b4 <cleanup_stdio+0x30>
 800f0aa:	4620      	mov	r0, r4
 800f0ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0b0:	f001 bdea 	b.w	8010c88 <_fflush_r>
 800f0b4:	bd10      	pop	{r4, pc}
 800f0b6:	bf00      	nop
 800f0b8:	2000210c 	.word	0x2000210c
 800f0bc:	20002174 	.word	0x20002174
 800f0c0:	200021dc 	.word	0x200021dc

0800f0c4 <global_stdio_init.part.0>:
 800f0c4:	b510      	push	{r4, lr}
 800f0c6:	4b0b      	ldr	r3, [pc, #44]	@ (800f0f4 <global_stdio_init.part.0+0x30>)
 800f0c8:	4c0b      	ldr	r4, [pc, #44]	@ (800f0f8 <global_stdio_init.part.0+0x34>)
 800f0ca:	4a0c      	ldr	r2, [pc, #48]	@ (800f0fc <global_stdio_init.part.0+0x38>)
 800f0cc:	601a      	str	r2, [r3, #0]
 800f0ce:	4620      	mov	r0, r4
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	2104      	movs	r1, #4
 800f0d4:	f7ff ff94 	bl	800f000 <std>
 800f0d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f0dc:	2201      	movs	r2, #1
 800f0de:	2109      	movs	r1, #9
 800f0e0:	f7ff ff8e 	bl	800f000 <std>
 800f0e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f0e8:	2202      	movs	r2, #2
 800f0ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0ee:	2112      	movs	r1, #18
 800f0f0:	f7ff bf86 	b.w	800f000 <std>
 800f0f4:	20002244 	.word	0x20002244
 800f0f8:	2000210c 	.word	0x2000210c
 800f0fc:	0800f06d 	.word	0x0800f06d

0800f100 <__sfp_lock_acquire>:
 800f100:	4801      	ldr	r0, [pc, #4]	@ (800f108 <__sfp_lock_acquire+0x8>)
 800f102:	f000 b91a 	b.w	800f33a <__retarget_lock_acquire_recursive>
 800f106:	bf00      	nop
 800f108:	2000224d 	.word	0x2000224d

0800f10c <__sfp_lock_release>:
 800f10c:	4801      	ldr	r0, [pc, #4]	@ (800f114 <__sfp_lock_release+0x8>)
 800f10e:	f000 b915 	b.w	800f33c <__retarget_lock_release_recursive>
 800f112:	bf00      	nop
 800f114:	2000224d 	.word	0x2000224d

0800f118 <__sinit>:
 800f118:	b510      	push	{r4, lr}
 800f11a:	4604      	mov	r4, r0
 800f11c:	f7ff fff0 	bl	800f100 <__sfp_lock_acquire>
 800f120:	6a23      	ldr	r3, [r4, #32]
 800f122:	b11b      	cbz	r3, 800f12c <__sinit+0x14>
 800f124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f128:	f7ff bff0 	b.w	800f10c <__sfp_lock_release>
 800f12c:	4b04      	ldr	r3, [pc, #16]	@ (800f140 <__sinit+0x28>)
 800f12e:	6223      	str	r3, [r4, #32]
 800f130:	4b04      	ldr	r3, [pc, #16]	@ (800f144 <__sinit+0x2c>)
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d1f5      	bne.n	800f124 <__sinit+0xc>
 800f138:	f7ff ffc4 	bl	800f0c4 <global_stdio_init.part.0>
 800f13c:	e7f2      	b.n	800f124 <__sinit+0xc>
 800f13e:	bf00      	nop
 800f140:	0800f085 	.word	0x0800f085
 800f144:	20002244 	.word	0x20002244

0800f148 <_fwalk_sglue>:
 800f148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f14c:	4607      	mov	r7, r0
 800f14e:	4688      	mov	r8, r1
 800f150:	4614      	mov	r4, r2
 800f152:	2600      	movs	r6, #0
 800f154:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f158:	f1b9 0901 	subs.w	r9, r9, #1
 800f15c:	d505      	bpl.n	800f16a <_fwalk_sglue+0x22>
 800f15e:	6824      	ldr	r4, [r4, #0]
 800f160:	2c00      	cmp	r4, #0
 800f162:	d1f7      	bne.n	800f154 <_fwalk_sglue+0xc>
 800f164:	4630      	mov	r0, r6
 800f166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f16a:	89ab      	ldrh	r3, [r5, #12]
 800f16c:	2b01      	cmp	r3, #1
 800f16e:	d907      	bls.n	800f180 <_fwalk_sglue+0x38>
 800f170:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f174:	3301      	adds	r3, #1
 800f176:	d003      	beq.n	800f180 <_fwalk_sglue+0x38>
 800f178:	4629      	mov	r1, r5
 800f17a:	4638      	mov	r0, r7
 800f17c:	47c0      	blx	r8
 800f17e:	4306      	orrs	r6, r0
 800f180:	3568      	adds	r5, #104	@ 0x68
 800f182:	e7e9      	b.n	800f158 <_fwalk_sglue+0x10>

0800f184 <iprintf>:
 800f184:	b40f      	push	{r0, r1, r2, r3}
 800f186:	b507      	push	{r0, r1, r2, lr}
 800f188:	4906      	ldr	r1, [pc, #24]	@ (800f1a4 <iprintf+0x20>)
 800f18a:	ab04      	add	r3, sp, #16
 800f18c:	6808      	ldr	r0, [r1, #0]
 800f18e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f192:	6881      	ldr	r1, [r0, #8]
 800f194:	9301      	str	r3, [sp, #4]
 800f196:	f001 fbdb 	bl	8010950 <_vfiprintf_r>
 800f19a:	b003      	add	sp, #12
 800f19c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f1a0:	b004      	add	sp, #16
 800f1a2:	4770      	bx	lr
 800f1a4:	20000130 	.word	0x20000130

0800f1a8 <putchar>:
 800f1a8:	4b02      	ldr	r3, [pc, #8]	@ (800f1b4 <putchar+0xc>)
 800f1aa:	4601      	mov	r1, r0
 800f1ac:	6818      	ldr	r0, [r3, #0]
 800f1ae:	6882      	ldr	r2, [r0, #8]
 800f1b0:	f001 bd92 	b.w	8010cd8 <_putc_r>
 800f1b4:	20000130 	.word	0x20000130

0800f1b8 <__sread>:
 800f1b8:	b510      	push	{r4, lr}
 800f1ba:	460c      	mov	r4, r1
 800f1bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1c0:	f000 f86c 	bl	800f29c <_read_r>
 800f1c4:	2800      	cmp	r0, #0
 800f1c6:	bfab      	itete	ge
 800f1c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f1ca:	89a3      	ldrhlt	r3, [r4, #12]
 800f1cc:	181b      	addge	r3, r3, r0
 800f1ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f1d2:	bfac      	ite	ge
 800f1d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f1d6:	81a3      	strhlt	r3, [r4, #12]
 800f1d8:	bd10      	pop	{r4, pc}

0800f1da <__swrite>:
 800f1da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1de:	461f      	mov	r7, r3
 800f1e0:	898b      	ldrh	r3, [r1, #12]
 800f1e2:	05db      	lsls	r3, r3, #23
 800f1e4:	4605      	mov	r5, r0
 800f1e6:	460c      	mov	r4, r1
 800f1e8:	4616      	mov	r6, r2
 800f1ea:	d505      	bpl.n	800f1f8 <__swrite+0x1e>
 800f1ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1f0:	2302      	movs	r3, #2
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	f000 f840 	bl	800f278 <_lseek_r>
 800f1f8:	89a3      	ldrh	r3, [r4, #12]
 800f1fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f1fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f202:	81a3      	strh	r3, [r4, #12]
 800f204:	4632      	mov	r2, r6
 800f206:	463b      	mov	r3, r7
 800f208:	4628      	mov	r0, r5
 800f20a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f20e:	f000 b857 	b.w	800f2c0 <_write_r>

0800f212 <__sseek>:
 800f212:	b510      	push	{r4, lr}
 800f214:	460c      	mov	r4, r1
 800f216:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f21a:	f000 f82d 	bl	800f278 <_lseek_r>
 800f21e:	1c43      	adds	r3, r0, #1
 800f220:	89a3      	ldrh	r3, [r4, #12]
 800f222:	bf15      	itete	ne
 800f224:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f226:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f22a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f22e:	81a3      	strheq	r3, [r4, #12]
 800f230:	bf18      	it	ne
 800f232:	81a3      	strhne	r3, [r4, #12]
 800f234:	bd10      	pop	{r4, pc}

0800f236 <__sclose>:
 800f236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f23a:	f000 b80d 	b.w	800f258 <_close_r>

0800f23e <memset>:
 800f23e:	4402      	add	r2, r0
 800f240:	4603      	mov	r3, r0
 800f242:	4293      	cmp	r3, r2
 800f244:	d100      	bne.n	800f248 <memset+0xa>
 800f246:	4770      	bx	lr
 800f248:	f803 1b01 	strb.w	r1, [r3], #1
 800f24c:	e7f9      	b.n	800f242 <memset+0x4>
	...

0800f250 <_localeconv_r>:
 800f250:	4800      	ldr	r0, [pc, #0]	@ (800f254 <_localeconv_r+0x4>)
 800f252:	4770      	bx	lr
 800f254:	20000270 	.word	0x20000270

0800f258 <_close_r>:
 800f258:	b538      	push	{r3, r4, r5, lr}
 800f25a:	4d06      	ldr	r5, [pc, #24]	@ (800f274 <_close_r+0x1c>)
 800f25c:	2300      	movs	r3, #0
 800f25e:	4604      	mov	r4, r0
 800f260:	4608      	mov	r0, r1
 800f262:	602b      	str	r3, [r5, #0]
 800f264:	f7f2 fae4 	bl	8001830 <_close>
 800f268:	1c43      	adds	r3, r0, #1
 800f26a:	d102      	bne.n	800f272 <_close_r+0x1a>
 800f26c:	682b      	ldr	r3, [r5, #0]
 800f26e:	b103      	cbz	r3, 800f272 <_close_r+0x1a>
 800f270:	6023      	str	r3, [r4, #0]
 800f272:	bd38      	pop	{r3, r4, r5, pc}
 800f274:	20002248 	.word	0x20002248

0800f278 <_lseek_r>:
 800f278:	b538      	push	{r3, r4, r5, lr}
 800f27a:	4d07      	ldr	r5, [pc, #28]	@ (800f298 <_lseek_r+0x20>)
 800f27c:	4604      	mov	r4, r0
 800f27e:	4608      	mov	r0, r1
 800f280:	4611      	mov	r1, r2
 800f282:	2200      	movs	r2, #0
 800f284:	602a      	str	r2, [r5, #0]
 800f286:	461a      	mov	r2, r3
 800f288:	f7f2 faf9 	bl	800187e <_lseek>
 800f28c:	1c43      	adds	r3, r0, #1
 800f28e:	d102      	bne.n	800f296 <_lseek_r+0x1e>
 800f290:	682b      	ldr	r3, [r5, #0]
 800f292:	b103      	cbz	r3, 800f296 <_lseek_r+0x1e>
 800f294:	6023      	str	r3, [r4, #0]
 800f296:	bd38      	pop	{r3, r4, r5, pc}
 800f298:	20002248 	.word	0x20002248

0800f29c <_read_r>:
 800f29c:	b538      	push	{r3, r4, r5, lr}
 800f29e:	4d07      	ldr	r5, [pc, #28]	@ (800f2bc <_read_r+0x20>)
 800f2a0:	4604      	mov	r4, r0
 800f2a2:	4608      	mov	r0, r1
 800f2a4:	4611      	mov	r1, r2
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	602a      	str	r2, [r5, #0]
 800f2aa:	461a      	mov	r2, r3
 800f2ac:	f7f2 fa87 	bl	80017be <_read>
 800f2b0:	1c43      	adds	r3, r0, #1
 800f2b2:	d102      	bne.n	800f2ba <_read_r+0x1e>
 800f2b4:	682b      	ldr	r3, [r5, #0]
 800f2b6:	b103      	cbz	r3, 800f2ba <_read_r+0x1e>
 800f2b8:	6023      	str	r3, [r4, #0]
 800f2ba:	bd38      	pop	{r3, r4, r5, pc}
 800f2bc:	20002248 	.word	0x20002248

0800f2c0 <_write_r>:
 800f2c0:	b538      	push	{r3, r4, r5, lr}
 800f2c2:	4d07      	ldr	r5, [pc, #28]	@ (800f2e0 <_write_r+0x20>)
 800f2c4:	4604      	mov	r4, r0
 800f2c6:	4608      	mov	r0, r1
 800f2c8:	4611      	mov	r1, r2
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	602a      	str	r2, [r5, #0]
 800f2ce:	461a      	mov	r2, r3
 800f2d0:	f7f2 fa92 	bl	80017f8 <_write>
 800f2d4:	1c43      	adds	r3, r0, #1
 800f2d6:	d102      	bne.n	800f2de <_write_r+0x1e>
 800f2d8:	682b      	ldr	r3, [r5, #0]
 800f2da:	b103      	cbz	r3, 800f2de <_write_r+0x1e>
 800f2dc:	6023      	str	r3, [r4, #0]
 800f2de:	bd38      	pop	{r3, r4, r5, pc}
 800f2e0:	20002248 	.word	0x20002248

0800f2e4 <__errno>:
 800f2e4:	4b01      	ldr	r3, [pc, #4]	@ (800f2ec <__errno+0x8>)
 800f2e6:	6818      	ldr	r0, [r3, #0]
 800f2e8:	4770      	bx	lr
 800f2ea:	bf00      	nop
 800f2ec:	20000130 	.word	0x20000130

0800f2f0 <__libc_init_array>:
 800f2f0:	b570      	push	{r4, r5, r6, lr}
 800f2f2:	4d0d      	ldr	r5, [pc, #52]	@ (800f328 <__libc_init_array+0x38>)
 800f2f4:	4c0d      	ldr	r4, [pc, #52]	@ (800f32c <__libc_init_array+0x3c>)
 800f2f6:	1b64      	subs	r4, r4, r5
 800f2f8:	10a4      	asrs	r4, r4, #2
 800f2fa:	2600      	movs	r6, #0
 800f2fc:	42a6      	cmp	r6, r4
 800f2fe:	d109      	bne.n	800f314 <__libc_init_array+0x24>
 800f300:	4d0b      	ldr	r5, [pc, #44]	@ (800f330 <__libc_init_array+0x40>)
 800f302:	4c0c      	ldr	r4, [pc, #48]	@ (800f334 <__libc_init_array+0x44>)
 800f304:	f001 fef4 	bl	80110f0 <_init>
 800f308:	1b64      	subs	r4, r4, r5
 800f30a:	10a4      	asrs	r4, r4, #2
 800f30c:	2600      	movs	r6, #0
 800f30e:	42a6      	cmp	r6, r4
 800f310:	d105      	bne.n	800f31e <__libc_init_array+0x2e>
 800f312:	bd70      	pop	{r4, r5, r6, pc}
 800f314:	f855 3b04 	ldr.w	r3, [r5], #4
 800f318:	4798      	blx	r3
 800f31a:	3601      	adds	r6, #1
 800f31c:	e7ee      	b.n	800f2fc <__libc_init_array+0xc>
 800f31e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f322:	4798      	blx	r3
 800f324:	3601      	adds	r6, #1
 800f326:	e7f2      	b.n	800f30e <__libc_init_array+0x1e>
 800f328:	080115f8 	.word	0x080115f8
 800f32c:	080115f8 	.word	0x080115f8
 800f330:	080115f8 	.word	0x080115f8
 800f334:	080115fc 	.word	0x080115fc

0800f338 <__retarget_lock_init_recursive>:
 800f338:	4770      	bx	lr

0800f33a <__retarget_lock_acquire_recursive>:
 800f33a:	4770      	bx	lr

0800f33c <__retarget_lock_release_recursive>:
 800f33c:	4770      	bx	lr

0800f33e <memcpy>:
 800f33e:	440a      	add	r2, r1
 800f340:	4291      	cmp	r1, r2
 800f342:	f100 33ff 	add.w	r3, r0, #4294967295
 800f346:	d100      	bne.n	800f34a <memcpy+0xc>
 800f348:	4770      	bx	lr
 800f34a:	b510      	push	{r4, lr}
 800f34c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f350:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f354:	4291      	cmp	r1, r2
 800f356:	d1f9      	bne.n	800f34c <memcpy+0xe>
 800f358:	bd10      	pop	{r4, pc}

0800f35a <quorem>:
 800f35a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f35e:	6903      	ldr	r3, [r0, #16]
 800f360:	690c      	ldr	r4, [r1, #16]
 800f362:	42a3      	cmp	r3, r4
 800f364:	4607      	mov	r7, r0
 800f366:	db7e      	blt.n	800f466 <quorem+0x10c>
 800f368:	3c01      	subs	r4, #1
 800f36a:	f101 0814 	add.w	r8, r1, #20
 800f36e:	00a3      	lsls	r3, r4, #2
 800f370:	f100 0514 	add.w	r5, r0, #20
 800f374:	9300      	str	r3, [sp, #0]
 800f376:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f37a:	9301      	str	r3, [sp, #4]
 800f37c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f380:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f384:	3301      	adds	r3, #1
 800f386:	429a      	cmp	r2, r3
 800f388:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f38c:	fbb2 f6f3 	udiv	r6, r2, r3
 800f390:	d32e      	bcc.n	800f3f0 <quorem+0x96>
 800f392:	f04f 0a00 	mov.w	sl, #0
 800f396:	46c4      	mov	ip, r8
 800f398:	46ae      	mov	lr, r5
 800f39a:	46d3      	mov	fp, sl
 800f39c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f3a0:	b298      	uxth	r0, r3
 800f3a2:	fb06 a000 	mla	r0, r6, r0, sl
 800f3a6:	0c02      	lsrs	r2, r0, #16
 800f3a8:	0c1b      	lsrs	r3, r3, #16
 800f3aa:	fb06 2303 	mla	r3, r6, r3, r2
 800f3ae:	f8de 2000 	ldr.w	r2, [lr]
 800f3b2:	b280      	uxth	r0, r0
 800f3b4:	b292      	uxth	r2, r2
 800f3b6:	1a12      	subs	r2, r2, r0
 800f3b8:	445a      	add	r2, fp
 800f3ba:	f8de 0000 	ldr.w	r0, [lr]
 800f3be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f3c2:	b29b      	uxth	r3, r3
 800f3c4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f3c8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f3cc:	b292      	uxth	r2, r2
 800f3ce:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f3d2:	45e1      	cmp	r9, ip
 800f3d4:	f84e 2b04 	str.w	r2, [lr], #4
 800f3d8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f3dc:	d2de      	bcs.n	800f39c <quorem+0x42>
 800f3de:	9b00      	ldr	r3, [sp, #0]
 800f3e0:	58eb      	ldr	r3, [r5, r3]
 800f3e2:	b92b      	cbnz	r3, 800f3f0 <quorem+0x96>
 800f3e4:	9b01      	ldr	r3, [sp, #4]
 800f3e6:	3b04      	subs	r3, #4
 800f3e8:	429d      	cmp	r5, r3
 800f3ea:	461a      	mov	r2, r3
 800f3ec:	d32f      	bcc.n	800f44e <quorem+0xf4>
 800f3ee:	613c      	str	r4, [r7, #16]
 800f3f0:	4638      	mov	r0, r7
 800f3f2:	f001 f97b 	bl	80106ec <__mcmp>
 800f3f6:	2800      	cmp	r0, #0
 800f3f8:	db25      	blt.n	800f446 <quorem+0xec>
 800f3fa:	4629      	mov	r1, r5
 800f3fc:	2000      	movs	r0, #0
 800f3fe:	f858 2b04 	ldr.w	r2, [r8], #4
 800f402:	f8d1 c000 	ldr.w	ip, [r1]
 800f406:	fa1f fe82 	uxth.w	lr, r2
 800f40a:	fa1f f38c 	uxth.w	r3, ip
 800f40e:	eba3 030e 	sub.w	r3, r3, lr
 800f412:	4403      	add	r3, r0
 800f414:	0c12      	lsrs	r2, r2, #16
 800f416:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f41a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f41e:	b29b      	uxth	r3, r3
 800f420:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f424:	45c1      	cmp	r9, r8
 800f426:	f841 3b04 	str.w	r3, [r1], #4
 800f42a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f42e:	d2e6      	bcs.n	800f3fe <quorem+0xa4>
 800f430:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f434:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f438:	b922      	cbnz	r2, 800f444 <quorem+0xea>
 800f43a:	3b04      	subs	r3, #4
 800f43c:	429d      	cmp	r5, r3
 800f43e:	461a      	mov	r2, r3
 800f440:	d30b      	bcc.n	800f45a <quorem+0x100>
 800f442:	613c      	str	r4, [r7, #16]
 800f444:	3601      	adds	r6, #1
 800f446:	4630      	mov	r0, r6
 800f448:	b003      	add	sp, #12
 800f44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f44e:	6812      	ldr	r2, [r2, #0]
 800f450:	3b04      	subs	r3, #4
 800f452:	2a00      	cmp	r2, #0
 800f454:	d1cb      	bne.n	800f3ee <quorem+0x94>
 800f456:	3c01      	subs	r4, #1
 800f458:	e7c6      	b.n	800f3e8 <quorem+0x8e>
 800f45a:	6812      	ldr	r2, [r2, #0]
 800f45c:	3b04      	subs	r3, #4
 800f45e:	2a00      	cmp	r2, #0
 800f460:	d1ef      	bne.n	800f442 <quorem+0xe8>
 800f462:	3c01      	subs	r4, #1
 800f464:	e7ea      	b.n	800f43c <quorem+0xe2>
 800f466:	2000      	movs	r0, #0
 800f468:	e7ee      	b.n	800f448 <quorem+0xee>
 800f46a:	0000      	movs	r0, r0
 800f46c:	0000      	movs	r0, r0
	...

0800f470 <_dtoa_r>:
 800f470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f474:	69c7      	ldr	r7, [r0, #28]
 800f476:	b099      	sub	sp, #100	@ 0x64
 800f478:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f47c:	ec55 4b10 	vmov	r4, r5, d0
 800f480:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800f482:	9109      	str	r1, [sp, #36]	@ 0x24
 800f484:	4683      	mov	fp, r0
 800f486:	920e      	str	r2, [sp, #56]	@ 0x38
 800f488:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f48a:	b97f      	cbnz	r7, 800f4ac <_dtoa_r+0x3c>
 800f48c:	2010      	movs	r0, #16
 800f48e:	f000 fdfd 	bl	801008c <malloc>
 800f492:	4602      	mov	r2, r0
 800f494:	f8cb 001c 	str.w	r0, [fp, #28]
 800f498:	b920      	cbnz	r0, 800f4a4 <_dtoa_r+0x34>
 800f49a:	4ba7      	ldr	r3, [pc, #668]	@ (800f738 <_dtoa_r+0x2c8>)
 800f49c:	21ef      	movs	r1, #239	@ 0xef
 800f49e:	48a7      	ldr	r0, [pc, #668]	@ (800f73c <_dtoa_r+0x2cc>)
 800f4a0:	f001 fcf2 	bl	8010e88 <__assert_func>
 800f4a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f4a8:	6007      	str	r7, [r0, #0]
 800f4aa:	60c7      	str	r7, [r0, #12]
 800f4ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f4b0:	6819      	ldr	r1, [r3, #0]
 800f4b2:	b159      	cbz	r1, 800f4cc <_dtoa_r+0x5c>
 800f4b4:	685a      	ldr	r2, [r3, #4]
 800f4b6:	604a      	str	r2, [r1, #4]
 800f4b8:	2301      	movs	r3, #1
 800f4ba:	4093      	lsls	r3, r2
 800f4bc:	608b      	str	r3, [r1, #8]
 800f4be:	4658      	mov	r0, fp
 800f4c0:	f000 feda 	bl	8010278 <_Bfree>
 800f4c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	601a      	str	r2, [r3, #0]
 800f4cc:	1e2b      	subs	r3, r5, #0
 800f4ce:	bfb9      	ittee	lt
 800f4d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f4d4:	9303      	strlt	r3, [sp, #12]
 800f4d6:	2300      	movge	r3, #0
 800f4d8:	6033      	strge	r3, [r6, #0]
 800f4da:	9f03      	ldr	r7, [sp, #12]
 800f4dc:	4b98      	ldr	r3, [pc, #608]	@ (800f740 <_dtoa_r+0x2d0>)
 800f4de:	bfbc      	itt	lt
 800f4e0:	2201      	movlt	r2, #1
 800f4e2:	6032      	strlt	r2, [r6, #0]
 800f4e4:	43bb      	bics	r3, r7
 800f4e6:	d112      	bne.n	800f50e <_dtoa_r+0x9e>
 800f4e8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f4ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f4ee:	6013      	str	r3, [r2, #0]
 800f4f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f4f4:	4323      	orrs	r3, r4
 800f4f6:	f000 854d 	beq.w	800ff94 <_dtoa_r+0xb24>
 800f4fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f4fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f754 <_dtoa_r+0x2e4>
 800f500:	2b00      	cmp	r3, #0
 800f502:	f000 854f 	beq.w	800ffa4 <_dtoa_r+0xb34>
 800f506:	f10a 0303 	add.w	r3, sl, #3
 800f50a:	f000 bd49 	b.w	800ffa0 <_dtoa_r+0xb30>
 800f50e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f512:	2200      	movs	r2, #0
 800f514:	ec51 0b17 	vmov	r0, r1, d7
 800f518:	2300      	movs	r3, #0
 800f51a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800f51e:	f7f1 faab 	bl	8000a78 <__aeabi_dcmpeq>
 800f522:	4680      	mov	r8, r0
 800f524:	b158      	cbz	r0, 800f53e <_dtoa_r+0xce>
 800f526:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f528:	2301      	movs	r3, #1
 800f52a:	6013      	str	r3, [r2, #0]
 800f52c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f52e:	b113      	cbz	r3, 800f536 <_dtoa_r+0xc6>
 800f530:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f532:	4b84      	ldr	r3, [pc, #528]	@ (800f744 <_dtoa_r+0x2d4>)
 800f534:	6013      	str	r3, [r2, #0]
 800f536:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f758 <_dtoa_r+0x2e8>
 800f53a:	f000 bd33 	b.w	800ffa4 <_dtoa_r+0xb34>
 800f53e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f542:	aa16      	add	r2, sp, #88	@ 0x58
 800f544:	a917      	add	r1, sp, #92	@ 0x5c
 800f546:	4658      	mov	r0, fp
 800f548:	f001 f980 	bl	801084c <__d2b>
 800f54c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f550:	4681      	mov	r9, r0
 800f552:	2e00      	cmp	r6, #0
 800f554:	d077      	beq.n	800f646 <_dtoa_r+0x1d6>
 800f556:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f558:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800f55c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f560:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f564:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f568:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f56c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f570:	4619      	mov	r1, r3
 800f572:	2200      	movs	r2, #0
 800f574:	4b74      	ldr	r3, [pc, #464]	@ (800f748 <_dtoa_r+0x2d8>)
 800f576:	f7f0 fe5f 	bl	8000238 <__aeabi_dsub>
 800f57a:	a369      	add	r3, pc, #420	@ (adr r3, 800f720 <_dtoa_r+0x2b0>)
 800f57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f580:	f7f1 f812 	bl	80005a8 <__aeabi_dmul>
 800f584:	a368      	add	r3, pc, #416	@ (adr r3, 800f728 <_dtoa_r+0x2b8>)
 800f586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f58a:	f7f0 fe57 	bl	800023c <__adddf3>
 800f58e:	4604      	mov	r4, r0
 800f590:	4630      	mov	r0, r6
 800f592:	460d      	mov	r5, r1
 800f594:	f7f0 ff9e 	bl	80004d4 <__aeabi_i2d>
 800f598:	a365      	add	r3, pc, #404	@ (adr r3, 800f730 <_dtoa_r+0x2c0>)
 800f59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f59e:	f7f1 f803 	bl	80005a8 <__aeabi_dmul>
 800f5a2:	4602      	mov	r2, r0
 800f5a4:	460b      	mov	r3, r1
 800f5a6:	4620      	mov	r0, r4
 800f5a8:	4629      	mov	r1, r5
 800f5aa:	f7f0 fe47 	bl	800023c <__adddf3>
 800f5ae:	4604      	mov	r4, r0
 800f5b0:	460d      	mov	r5, r1
 800f5b2:	f7f1 faa9 	bl	8000b08 <__aeabi_d2iz>
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	4607      	mov	r7, r0
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	4620      	mov	r0, r4
 800f5be:	4629      	mov	r1, r5
 800f5c0:	f7f1 fa64 	bl	8000a8c <__aeabi_dcmplt>
 800f5c4:	b140      	cbz	r0, 800f5d8 <_dtoa_r+0x168>
 800f5c6:	4638      	mov	r0, r7
 800f5c8:	f7f0 ff84 	bl	80004d4 <__aeabi_i2d>
 800f5cc:	4622      	mov	r2, r4
 800f5ce:	462b      	mov	r3, r5
 800f5d0:	f7f1 fa52 	bl	8000a78 <__aeabi_dcmpeq>
 800f5d4:	b900      	cbnz	r0, 800f5d8 <_dtoa_r+0x168>
 800f5d6:	3f01      	subs	r7, #1
 800f5d8:	2f16      	cmp	r7, #22
 800f5da:	d851      	bhi.n	800f680 <_dtoa_r+0x210>
 800f5dc:	4b5b      	ldr	r3, [pc, #364]	@ (800f74c <_dtoa_r+0x2dc>)
 800f5de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f5ea:	f7f1 fa4f 	bl	8000a8c <__aeabi_dcmplt>
 800f5ee:	2800      	cmp	r0, #0
 800f5f0:	d048      	beq.n	800f684 <_dtoa_r+0x214>
 800f5f2:	3f01      	subs	r7, #1
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	9312      	str	r3, [sp, #72]	@ 0x48
 800f5f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f5fa:	1b9b      	subs	r3, r3, r6
 800f5fc:	1e5a      	subs	r2, r3, #1
 800f5fe:	bf44      	itt	mi
 800f600:	f1c3 0801 	rsbmi	r8, r3, #1
 800f604:	2300      	movmi	r3, #0
 800f606:	9208      	str	r2, [sp, #32]
 800f608:	bf54      	ite	pl
 800f60a:	f04f 0800 	movpl.w	r8, #0
 800f60e:	9308      	strmi	r3, [sp, #32]
 800f610:	2f00      	cmp	r7, #0
 800f612:	db39      	blt.n	800f688 <_dtoa_r+0x218>
 800f614:	9b08      	ldr	r3, [sp, #32]
 800f616:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f618:	443b      	add	r3, r7
 800f61a:	9308      	str	r3, [sp, #32]
 800f61c:	2300      	movs	r3, #0
 800f61e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f620:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f622:	2b09      	cmp	r3, #9
 800f624:	d864      	bhi.n	800f6f0 <_dtoa_r+0x280>
 800f626:	2b05      	cmp	r3, #5
 800f628:	bfc4      	itt	gt
 800f62a:	3b04      	subgt	r3, #4
 800f62c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f62e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f630:	f1a3 0302 	sub.w	r3, r3, #2
 800f634:	bfcc      	ite	gt
 800f636:	2400      	movgt	r4, #0
 800f638:	2401      	movle	r4, #1
 800f63a:	2b03      	cmp	r3, #3
 800f63c:	d863      	bhi.n	800f706 <_dtoa_r+0x296>
 800f63e:	e8df f003 	tbb	[pc, r3]
 800f642:	372a      	.short	0x372a
 800f644:	5535      	.short	0x5535
 800f646:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f64a:	441e      	add	r6, r3
 800f64c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f650:	2b20      	cmp	r3, #32
 800f652:	bfc1      	itttt	gt
 800f654:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f658:	409f      	lslgt	r7, r3
 800f65a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f65e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f662:	bfd6      	itet	le
 800f664:	f1c3 0320 	rsble	r3, r3, #32
 800f668:	ea47 0003 	orrgt.w	r0, r7, r3
 800f66c:	fa04 f003 	lslle.w	r0, r4, r3
 800f670:	f7f0 ff20 	bl	80004b4 <__aeabi_ui2d>
 800f674:	2201      	movs	r2, #1
 800f676:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f67a:	3e01      	subs	r6, #1
 800f67c:	9214      	str	r2, [sp, #80]	@ 0x50
 800f67e:	e777      	b.n	800f570 <_dtoa_r+0x100>
 800f680:	2301      	movs	r3, #1
 800f682:	e7b8      	b.n	800f5f6 <_dtoa_r+0x186>
 800f684:	9012      	str	r0, [sp, #72]	@ 0x48
 800f686:	e7b7      	b.n	800f5f8 <_dtoa_r+0x188>
 800f688:	427b      	negs	r3, r7
 800f68a:	930a      	str	r3, [sp, #40]	@ 0x28
 800f68c:	2300      	movs	r3, #0
 800f68e:	eba8 0807 	sub.w	r8, r8, r7
 800f692:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f694:	e7c4      	b.n	800f620 <_dtoa_r+0x1b0>
 800f696:	2300      	movs	r3, #0
 800f698:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f69a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	dc35      	bgt.n	800f70c <_dtoa_r+0x29c>
 800f6a0:	2301      	movs	r3, #1
 800f6a2:	9300      	str	r3, [sp, #0]
 800f6a4:	9307      	str	r3, [sp, #28]
 800f6a6:	461a      	mov	r2, r3
 800f6a8:	920e      	str	r2, [sp, #56]	@ 0x38
 800f6aa:	e00b      	b.n	800f6c4 <_dtoa_r+0x254>
 800f6ac:	2301      	movs	r3, #1
 800f6ae:	e7f3      	b.n	800f698 <_dtoa_r+0x228>
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f6b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f6b6:	18fb      	adds	r3, r7, r3
 800f6b8:	9300      	str	r3, [sp, #0]
 800f6ba:	3301      	adds	r3, #1
 800f6bc:	2b01      	cmp	r3, #1
 800f6be:	9307      	str	r3, [sp, #28]
 800f6c0:	bfb8      	it	lt
 800f6c2:	2301      	movlt	r3, #1
 800f6c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f6c8:	2100      	movs	r1, #0
 800f6ca:	2204      	movs	r2, #4
 800f6cc:	f102 0514 	add.w	r5, r2, #20
 800f6d0:	429d      	cmp	r5, r3
 800f6d2:	d91f      	bls.n	800f714 <_dtoa_r+0x2a4>
 800f6d4:	6041      	str	r1, [r0, #4]
 800f6d6:	4658      	mov	r0, fp
 800f6d8:	f000 fd8e 	bl	80101f8 <_Balloc>
 800f6dc:	4682      	mov	sl, r0
 800f6de:	2800      	cmp	r0, #0
 800f6e0:	d13c      	bne.n	800f75c <_dtoa_r+0x2ec>
 800f6e2:	4b1b      	ldr	r3, [pc, #108]	@ (800f750 <_dtoa_r+0x2e0>)
 800f6e4:	4602      	mov	r2, r0
 800f6e6:	f240 11af 	movw	r1, #431	@ 0x1af
 800f6ea:	e6d8      	b.n	800f49e <_dtoa_r+0x2e>
 800f6ec:	2301      	movs	r3, #1
 800f6ee:	e7e0      	b.n	800f6b2 <_dtoa_r+0x242>
 800f6f0:	2401      	movs	r4, #1
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f6f8:	f04f 33ff 	mov.w	r3, #4294967295
 800f6fc:	9300      	str	r3, [sp, #0]
 800f6fe:	9307      	str	r3, [sp, #28]
 800f700:	2200      	movs	r2, #0
 800f702:	2312      	movs	r3, #18
 800f704:	e7d0      	b.n	800f6a8 <_dtoa_r+0x238>
 800f706:	2301      	movs	r3, #1
 800f708:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f70a:	e7f5      	b.n	800f6f8 <_dtoa_r+0x288>
 800f70c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f70e:	9300      	str	r3, [sp, #0]
 800f710:	9307      	str	r3, [sp, #28]
 800f712:	e7d7      	b.n	800f6c4 <_dtoa_r+0x254>
 800f714:	3101      	adds	r1, #1
 800f716:	0052      	lsls	r2, r2, #1
 800f718:	e7d8      	b.n	800f6cc <_dtoa_r+0x25c>
 800f71a:	bf00      	nop
 800f71c:	f3af 8000 	nop.w
 800f720:	636f4361 	.word	0x636f4361
 800f724:	3fd287a7 	.word	0x3fd287a7
 800f728:	8b60c8b3 	.word	0x8b60c8b3
 800f72c:	3fc68a28 	.word	0x3fc68a28
 800f730:	509f79fb 	.word	0x509f79fb
 800f734:	3fd34413 	.word	0x3fd34413
 800f738:	080112c1 	.word	0x080112c1
 800f73c:	080112d8 	.word	0x080112d8
 800f740:	7ff00000 	.word	0x7ff00000
 800f744:	08011291 	.word	0x08011291
 800f748:	3ff80000 	.word	0x3ff80000
 800f74c:	080113d0 	.word	0x080113d0
 800f750:	08011330 	.word	0x08011330
 800f754:	080112bd 	.word	0x080112bd
 800f758:	08011290 	.word	0x08011290
 800f75c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f760:	6018      	str	r0, [r3, #0]
 800f762:	9b07      	ldr	r3, [sp, #28]
 800f764:	2b0e      	cmp	r3, #14
 800f766:	f200 80a4 	bhi.w	800f8b2 <_dtoa_r+0x442>
 800f76a:	2c00      	cmp	r4, #0
 800f76c:	f000 80a1 	beq.w	800f8b2 <_dtoa_r+0x442>
 800f770:	2f00      	cmp	r7, #0
 800f772:	dd33      	ble.n	800f7dc <_dtoa_r+0x36c>
 800f774:	4bad      	ldr	r3, [pc, #692]	@ (800fa2c <_dtoa_r+0x5bc>)
 800f776:	f007 020f 	and.w	r2, r7, #15
 800f77a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f77e:	ed93 7b00 	vldr	d7, [r3]
 800f782:	05f8      	lsls	r0, r7, #23
 800f784:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f788:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f78c:	d516      	bpl.n	800f7bc <_dtoa_r+0x34c>
 800f78e:	4ba8      	ldr	r3, [pc, #672]	@ (800fa30 <_dtoa_r+0x5c0>)
 800f790:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f794:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f798:	f7f1 f830 	bl	80007fc <__aeabi_ddiv>
 800f79c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f7a0:	f004 040f 	and.w	r4, r4, #15
 800f7a4:	2603      	movs	r6, #3
 800f7a6:	4da2      	ldr	r5, [pc, #648]	@ (800fa30 <_dtoa_r+0x5c0>)
 800f7a8:	b954      	cbnz	r4, 800f7c0 <_dtoa_r+0x350>
 800f7aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f7ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f7b2:	f7f1 f823 	bl	80007fc <__aeabi_ddiv>
 800f7b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f7ba:	e028      	b.n	800f80e <_dtoa_r+0x39e>
 800f7bc:	2602      	movs	r6, #2
 800f7be:	e7f2      	b.n	800f7a6 <_dtoa_r+0x336>
 800f7c0:	07e1      	lsls	r1, r4, #31
 800f7c2:	d508      	bpl.n	800f7d6 <_dtoa_r+0x366>
 800f7c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f7c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f7cc:	f7f0 feec 	bl	80005a8 <__aeabi_dmul>
 800f7d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f7d4:	3601      	adds	r6, #1
 800f7d6:	1064      	asrs	r4, r4, #1
 800f7d8:	3508      	adds	r5, #8
 800f7da:	e7e5      	b.n	800f7a8 <_dtoa_r+0x338>
 800f7dc:	f000 80d2 	beq.w	800f984 <_dtoa_r+0x514>
 800f7e0:	427c      	negs	r4, r7
 800f7e2:	4b92      	ldr	r3, [pc, #584]	@ (800fa2c <_dtoa_r+0x5bc>)
 800f7e4:	4d92      	ldr	r5, [pc, #584]	@ (800fa30 <_dtoa_r+0x5c0>)
 800f7e6:	f004 020f 	and.w	r2, r4, #15
 800f7ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f7f6:	f7f0 fed7 	bl	80005a8 <__aeabi_dmul>
 800f7fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f7fe:	1124      	asrs	r4, r4, #4
 800f800:	2300      	movs	r3, #0
 800f802:	2602      	movs	r6, #2
 800f804:	2c00      	cmp	r4, #0
 800f806:	f040 80b2 	bne.w	800f96e <_dtoa_r+0x4fe>
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d1d3      	bne.n	800f7b6 <_dtoa_r+0x346>
 800f80e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f810:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f814:	2b00      	cmp	r3, #0
 800f816:	f000 80b7 	beq.w	800f988 <_dtoa_r+0x518>
 800f81a:	4b86      	ldr	r3, [pc, #536]	@ (800fa34 <_dtoa_r+0x5c4>)
 800f81c:	2200      	movs	r2, #0
 800f81e:	4620      	mov	r0, r4
 800f820:	4629      	mov	r1, r5
 800f822:	f7f1 f933 	bl	8000a8c <__aeabi_dcmplt>
 800f826:	2800      	cmp	r0, #0
 800f828:	f000 80ae 	beq.w	800f988 <_dtoa_r+0x518>
 800f82c:	9b07      	ldr	r3, [sp, #28]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	f000 80aa 	beq.w	800f988 <_dtoa_r+0x518>
 800f834:	9b00      	ldr	r3, [sp, #0]
 800f836:	2b00      	cmp	r3, #0
 800f838:	dd37      	ble.n	800f8aa <_dtoa_r+0x43a>
 800f83a:	1e7b      	subs	r3, r7, #1
 800f83c:	9304      	str	r3, [sp, #16]
 800f83e:	4620      	mov	r0, r4
 800f840:	4b7d      	ldr	r3, [pc, #500]	@ (800fa38 <_dtoa_r+0x5c8>)
 800f842:	2200      	movs	r2, #0
 800f844:	4629      	mov	r1, r5
 800f846:	f7f0 feaf 	bl	80005a8 <__aeabi_dmul>
 800f84a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f84e:	9c00      	ldr	r4, [sp, #0]
 800f850:	3601      	adds	r6, #1
 800f852:	4630      	mov	r0, r6
 800f854:	f7f0 fe3e 	bl	80004d4 <__aeabi_i2d>
 800f858:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f85c:	f7f0 fea4 	bl	80005a8 <__aeabi_dmul>
 800f860:	4b76      	ldr	r3, [pc, #472]	@ (800fa3c <_dtoa_r+0x5cc>)
 800f862:	2200      	movs	r2, #0
 800f864:	f7f0 fcea 	bl	800023c <__adddf3>
 800f868:	4605      	mov	r5, r0
 800f86a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f86e:	2c00      	cmp	r4, #0
 800f870:	f040 808d 	bne.w	800f98e <_dtoa_r+0x51e>
 800f874:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f878:	4b71      	ldr	r3, [pc, #452]	@ (800fa40 <_dtoa_r+0x5d0>)
 800f87a:	2200      	movs	r2, #0
 800f87c:	f7f0 fcdc 	bl	8000238 <__aeabi_dsub>
 800f880:	4602      	mov	r2, r0
 800f882:	460b      	mov	r3, r1
 800f884:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f888:	462a      	mov	r2, r5
 800f88a:	4633      	mov	r3, r6
 800f88c:	f7f1 f91c 	bl	8000ac8 <__aeabi_dcmpgt>
 800f890:	2800      	cmp	r0, #0
 800f892:	f040 828b 	bne.w	800fdac <_dtoa_r+0x93c>
 800f896:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f89a:	462a      	mov	r2, r5
 800f89c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f8a0:	f7f1 f8f4 	bl	8000a8c <__aeabi_dcmplt>
 800f8a4:	2800      	cmp	r0, #0
 800f8a6:	f040 8128 	bne.w	800fafa <_dtoa_r+0x68a>
 800f8aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f8ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f8b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	f2c0 815a 	blt.w	800fb6e <_dtoa_r+0x6fe>
 800f8ba:	2f0e      	cmp	r7, #14
 800f8bc:	f300 8157 	bgt.w	800fb6e <_dtoa_r+0x6fe>
 800f8c0:	4b5a      	ldr	r3, [pc, #360]	@ (800fa2c <_dtoa_r+0x5bc>)
 800f8c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f8c6:	ed93 7b00 	vldr	d7, [r3]
 800f8ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	ed8d 7b00 	vstr	d7, [sp]
 800f8d2:	da03      	bge.n	800f8dc <_dtoa_r+0x46c>
 800f8d4:	9b07      	ldr	r3, [sp, #28]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	f340 8101 	ble.w	800fade <_dtoa_r+0x66e>
 800f8dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f8e0:	4656      	mov	r6, sl
 800f8e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f8e6:	4620      	mov	r0, r4
 800f8e8:	4629      	mov	r1, r5
 800f8ea:	f7f0 ff87 	bl	80007fc <__aeabi_ddiv>
 800f8ee:	f7f1 f90b 	bl	8000b08 <__aeabi_d2iz>
 800f8f2:	4680      	mov	r8, r0
 800f8f4:	f7f0 fdee 	bl	80004d4 <__aeabi_i2d>
 800f8f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f8fc:	f7f0 fe54 	bl	80005a8 <__aeabi_dmul>
 800f900:	4602      	mov	r2, r0
 800f902:	460b      	mov	r3, r1
 800f904:	4620      	mov	r0, r4
 800f906:	4629      	mov	r1, r5
 800f908:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f90c:	f7f0 fc94 	bl	8000238 <__aeabi_dsub>
 800f910:	f806 4b01 	strb.w	r4, [r6], #1
 800f914:	9d07      	ldr	r5, [sp, #28]
 800f916:	eba6 040a 	sub.w	r4, r6, sl
 800f91a:	42a5      	cmp	r5, r4
 800f91c:	4602      	mov	r2, r0
 800f91e:	460b      	mov	r3, r1
 800f920:	f040 8117 	bne.w	800fb52 <_dtoa_r+0x6e2>
 800f924:	f7f0 fc8a 	bl	800023c <__adddf3>
 800f928:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f92c:	4604      	mov	r4, r0
 800f92e:	460d      	mov	r5, r1
 800f930:	f7f1 f8ca 	bl	8000ac8 <__aeabi_dcmpgt>
 800f934:	2800      	cmp	r0, #0
 800f936:	f040 80f9 	bne.w	800fb2c <_dtoa_r+0x6bc>
 800f93a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f93e:	4620      	mov	r0, r4
 800f940:	4629      	mov	r1, r5
 800f942:	f7f1 f899 	bl	8000a78 <__aeabi_dcmpeq>
 800f946:	b118      	cbz	r0, 800f950 <_dtoa_r+0x4e0>
 800f948:	f018 0f01 	tst.w	r8, #1
 800f94c:	f040 80ee 	bne.w	800fb2c <_dtoa_r+0x6bc>
 800f950:	4649      	mov	r1, r9
 800f952:	4658      	mov	r0, fp
 800f954:	f000 fc90 	bl	8010278 <_Bfree>
 800f958:	2300      	movs	r3, #0
 800f95a:	7033      	strb	r3, [r6, #0]
 800f95c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f95e:	3701      	adds	r7, #1
 800f960:	601f      	str	r7, [r3, #0]
 800f962:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f964:	2b00      	cmp	r3, #0
 800f966:	f000 831d 	beq.w	800ffa4 <_dtoa_r+0xb34>
 800f96a:	601e      	str	r6, [r3, #0]
 800f96c:	e31a      	b.n	800ffa4 <_dtoa_r+0xb34>
 800f96e:	07e2      	lsls	r2, r4, #31
 800f970:	d505      	bpl.n	800f97e <_dtoa_r+0x50e>
 800f972:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f976:	f7f0 fe17 	bl	80005a8 <__aeabi_dmul>
 800f97a:	3601      	adds	r6, #1
 800f97c:	2301      	movs	r3, #1
 800f97e:	1064      	asrs	r4, r4, #1
 800f980:	3508      	adds	r5, #8
 800f982:	e73f      	b.n	800f804 <_dtoa_r+0x394>
 800f984:	2602      	movs	r6, #2
 800f986:	e742      	b.n	800f80e <_dtoa_r+0x39e>
 800f988:	9c07      	ldr	r4, [sp, #28]
 800f98a:	9704      	str	r7, [sp, #16]
 800f98c:	e761      	b.n	800f852 <_dtoa_r+0x3e2>
 800f98e:	4b27      	ldr	r3, [pc, #156]	@ (800fa2c <_dtoa_r+0x5bc>)
 800f990:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f992:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f996:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f99a:	4454      	add	r4, sl
 800f99c:	2900      	cmp	r1, #0
 800f99e:	d053      	beq.n	800fa48 <_dtoa_r+0x5d8>
 800f9a0:	4928      	ldr	r1, [pc, #160]	@ (800fa44 <_dtoa_r+0x5d4>)
 800f9a2:	2000      	movs	r0, #0
 800f9a4:	f7f0 ff2a 	bl	80007fc <__aeabi_ddiv>
 800f9a8:	4633      	mov	r3, r6
 800f9aa:	462a      	mov	r2, r5
 800f9ac:	f7f0 fc44 	bl	8000238 <__aeabi_dsub>
 800f9b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f9b4:	4656      	mov	r6, sl
 800f9b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f9ba:	f7f1 f8a5 	bl	8000b08 <__aeabi_d2iz>
 800f9be:	4605      	mov	r5, r0
 800f9c0:	f7f0 fd88 	bl	80004d4 <__aeabi_i2d>
 800f9c4:	4602      	mov	r2, r0
 800f9c6:	460b      	mov	r3, r1
 800f9c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f9cc:	f7f0 fc34 	bl	8000238 <__aeabi_dsub>
 800f9d0:	3530      	adds	r5, #48	@ 0x30
 800f9d2:	4602      	mov	r2, r0
 800f9d4:	460b      	mov	r3, r1
 800f9d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f9da:	f806 5b01 	strb.w	r5, [r6], #1
 800f9de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f9e2:	f7f1 f853 	bl	8000a8c <__aeabi_dcmplt>
 800f9e6:	2800      	cmp	r0, #0
 800f9e8:	d171      	bne.n	800face <_dtoa_r+0x65e>
 800f9ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f9ee:	4911      	ldr	r1, [pc, #68]	@ (800fa34 <_dtoa_r+0x5c4>)
 800f9f0:	2000      	movs	r0, #0
 800f9f2:	f7f0 fc21 	bl	8000238 <__aeabi_dsub>
 800f9f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f9fa:	f7f1 f847 	bl	8000a8c <__aeabi_dcmplt>
 800f9fe:	2800      	cmp	r0, #0
 800fa00:	f040 8095 	bne.w	800fb2e <_dtoa_r+0x6be>
 800fa04:	42a6      	cmp	r6, r4
 800fa06:	f43f af50 	beq.w	800f8aa <_dtoa_r+0x43a>
 800fa0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800fa0e:	4b0a      	ldr	r3, [pc, #40]	@ (800fa38 <_dtoa_r+0x5c8>)
 800fa10:	2200      	movs	r2, #0
 800fa12:	f7f0 fdc9 	bl	80005a8 <__aeabi_dmul>
 800fa16:	4b08      	ldr	r3, [pc, #32]	@ (800fa38 <_dtoa_r+0x5c8>)
 800fa18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa22:	f7f0 fdc1 	bl	80005a8 <__aeabi_dmul>
 800fa26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fa2a:	e7c4      	b.n	800f9b6 <_dtoa_r+0x546>
 800fa2c:	080113d0 	.word	0x080113d0
 800fa30:	080113a8 	.word	0x080113a8
 800fa34:	3ff00000 	.word	0x3ff00000
 800fa38:	40240000 	.word	0x40240000
 800fa3c:	401c0000 	.word	0x401c0000
 800fa40:	40140000 	.word	0x40140000
 800fa44:	3fe00000 	.word	0x3fe00000
 800fa48:	4631      	mov	r1, r6
 800fa4a:	4628      	mov	r0, r5
 800fa4c:	f7f0 fdac 	bl	80005a8 <__aeabi_dmul>
 800fa50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fa54:	9415      	str	r4, [sp, #84]	@ 0x54
 800fa56:	4656      	mov	r6, sl
 800fa58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa5c:	f7f1 f854 	bl	8000b08 <__aeabi_d2iz>
 800fa60:	4605      	mov	r5, r0
 800fa62:	f7f0 fd37 	bl	80004d4 <__aeabi_i2d>
 800fa66:	4602      	mov	r2, r0
 800fa68:	460b      	mov	r3, r1
 800fa6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa6e:	f7f0 fbe3 	bl	8000238 <__aeabi_dsub>
 800fa72:	3530      	adds	r5, #48	@ 0x30
 800fa74:	f806 5b01 	strb.w	r5, [r6], #1
 800fa78:	4602      	mov	r2, r0
 800fa7a:	460b      	mov	r3, r1
 800fa7c:	42a6      	cmp	r6, r4
 800fa7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fa82:	f04f 0200 	mov.w	r2, #0
 800fa86:	d124      	bne.n	800fad2 <_dtoa_r+0x662>
 800fa88:	4bac      	ldr	r3, [pc, #688]	@ (800fd3c <_dtoa_r+0x8cc>)
 800fa8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800fa8e:	f7f0 fbd5 	bl	800023c <__adddf3>
 800fa92:	4602      	mov	r2, r0
 800fa94:	460b      	mov	r3, r1
 800fa96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa9a:	f7f1 f815 	bl	8000ac8 <__aeabi_dcmpgt>
 800fa9e:	2800      	cmp	r0, #0
 800faa0:	d145      	bne.n	800fb2e <_dtoa_r+0x6be>
 800faa2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800faa6:	49a5      	ldr	r1, [pc, #660]	@ (800fd3c <_dtoa_r+0x8cc>)
 800faa8:	2000      	movs	r0, #0
 800faaa:	f7f0 fbc5 	bl	8000238 <__aeabi_dsub>
 800faae:	4602      	mov	r2, r0
 800fab0:	460b      	mov	r3, r1
 800fab2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fab6:	f7f0 ffe9 	bl	8000a8c <__aeabi_dcmplt>
 800faba:	2800      	cmp	r0, #0
 800fabc:	f43f aef5 	beq.w	800f8aa <_dtoa_r+0x43a>
 800fac0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800fac2:	1e73      	subs	r3, r6, #1
 800fac4:	9315      	str	r3, [sp, #84]	@ 0x54
 800fac6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800faca:	2b30      	cmp	r3, #48	@ 0x30
 800facc:	d0f8      	beq.n	800fac0 <_dtoa_r+0x650>
 800face:	9f04      	ldr	r7, [sp, #16]
 800fad0:	e73e      	b.n	800f950 <_dtoa_r+0x4e0>
 800fad2:	4b9b      	ldr	r3, [pc, #620]	@ (800fd40 <_dtoa_r+0x8d0>)
 800fad4:	f7f0 fd68 	bl	80005a8 <__aeabi_dmul>
 800fad8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fadc:	e7bc      	b.n	800fa58 <_dtoa_r+0x5e8>
 800fade:	d10c      	bne.n	800fafa <_dtoa_r+0x68a>
 800fae0:	4b98      	ldr	r3, [pc, #608]	@ (800fd44 <_dtoa_r+0x8d4>)
 800fae2:	2200      	movs	r2, #0
 800fae4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fae8:	f7f0 fd5e 	bl	80005a8 <__aeabi_dmul>
 800faec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800faf0:	f7f0 ffe0 	bl	8000ab4 <__aeabi_dcmpge>
 800faf4:	2800      	cmp	r0, #0
 800faf6:	f000 8157 	beq.w	800fda8 <_dtoa_r+0x938>
 800fafa:	2400      	movs	r4, #0
 800fafc:	4625      	mov	r5, r4
 800fafe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fb00:	43db      	mvns	r3, r3
 800fb02:	9304      	str	r3, [sp, #16]
 800fb04:	4656      	mov	r6, sl
 800fb06:	2700      	movs	r7, #0
 800fb08:	4621      	mov	r1, r4
 800fb0a:	4658      	mov	r0, fp
 800fb0c:	f000 fbb4 	bl	8010278 <_Bfree>
 800fb10:	2d00      	cmp	r5, #0
 800fb12:	d0dc      	beq.n	800face <_dtoa_r+0x65e>
 800fb14:	b12f      	cbz	r7, 800fb22 <_dtoa_r+0x6b2>
 800fb16:	42af      	cmp	r7, r5
 800fb18:	d003      	beq.n	800fb22 <_dtoa_r+0x6b2>
 800fb1a:	4639      	mov	r1, r7
 800fb1c:	4658      	mov	r0, fp
 800fb1e:	f000 fbab 	bl	8010278 <_Bfree>
 800fb22:	4629      	mov	r1, r5
 800fb24:	4658      	mov	r0, fp
 800fb26:	f000 fba7 	bl	8010278 <_Bfree>
 800fb2a:	e7d0      	b.n	800face <_dtoa_r+0x65e>
 800fb2c:	9704      	str	r7, [sp, #16]
 800fb2e:	4633      	mov	r3, r6
 800fb30:	461e      	mov	r6, r3
 800fb32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fb36:	2a39      	cmp	r2, #57	@ 0x39
 800fb38:	d107      	bne.n	800fb4a <_dtoa_r+0x6da>
 800fb3a:	459a      	cmp	sl, r3
 800fb3c:	d1f8      	bne.n	800fb30 <_dtoa_r+0x6c0>
 800fb3e:	9a04      	ldr	r2, [sp, #16]
 800fb40:	3201      	adds	r2, #1
 800fb42:	9204      	str	r2, [sp, #16]
 800fb44:	2230      	movs	r2, #48	@ 0x30
 800fb46:	f88a 2000 	strb.w	r2, [sl]
 800fb4a:	781a      	ldrb	r2, [r3, #0]
 800fb4c:	3201      	adds	r2, #1
 800fb4e:	701a      	strb	r2, [r3, #0]
 800fb50:	e7bd      	b.n	800face <_dtoa_r+0x65e>
 800fb52:	4b7b      	ldr	r3, [pc, #492]	@ (800fd40 <_dtoa_r+0x8d0>)
 800fb54:	2200      	movs	r2, #0
 800fb56:	f7f0 fd27 	bl	80005a8 <__aeabi_dmul>
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	4604      	mov	r4, r0
 800fb60:	460d      	mov	r5, r1
 800fb62:	f7f0 ff89 	bl	8000a78 <__aeabi_dcmpeq>
 800fb66:	2800      	cmp	r0, #0
 800fb68:	f43f aebb 	beq.w	800f8e2 <_dtoa_r+0x472>
 800fb6c:	e6f0      	b.n	800f950 <_dtoa_r+0x4e0>
 800fb6e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fb70:	2a00      	cmp	r2, #0
 800fb72:	f000 80db 	beq.w	800fd2c <_dtoa_r+0x8bc>
 800fb76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fb78:	2a01      	cmp	r2, #1
 800fb7a:	f300 80bf 	bgt.w	800fcfc <_dtoa_r+0x88c>
 800fb7e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800fb80:	2a00      	cmp	r2, #0
 800fb82:	f000 80b7 	beq.w	800fcf4 <_dtoa_r+0x884>
 800fb86:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800fb8a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fb8c:	4646      	mov	r6, r8
 800fb8e:	9a08      	ldr	r2, [sp, #32]
 800fb90:	2101      	movs	r1, #1
 800fb92:	441a      	add	r2, r3
 800fb94:	4658      	mov	r0, fp
 800fb96:	4498      	add	r8, r3
 800fb98:	9208      	str	r2, [sp, #32]
 800fb9a:	f000 fc21 	bl	80103e0 <__i2b>
 800fb9e:	4605      	mov	r5, r0
 800fba0:	b15e      	cbz	r6, 800fbba <_dtoa_r+0x74a>
 800fba2:	9b08      	ldr	r3, [sp, #32]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	dd08      	ble.n	800fbba <_dtoa_r+0x74a>
 800fba8:	42b3      	cmp	r3, r6
 800fbaa:	9a08      	ldr	r2, [sp, #32]
 800fbac:	bfa8      	it	ge
 800fbae:	4633      	movge	r3, r6
 800fbb0:	eba8 0803 	sub.w	r8, r8, r3
 800fbb4:	1af6      	subs	r6, r6, r3
 800fbb6:	1ad3      	subs	r3, r2, r3
 800fbb8:	9308      	str	r3, [sp, #32]
 800fbba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fbbc:	b1f3      	cbz	r3, 800fbfc <_dtoa_r+0x78c>
 800fbbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	f000 80b7 	beq.w	800fd34 <_dtoa_r+0x8c4>
 800fbc6:	b18c      	cbz	r4, 800fbec <_dtoa_r+0x77c>
 800fbc8:	4629      	mov	r1, r5
 800fbca:	4622      	mov	r2, r4
 800fbcc:	4658      	mov	r0, fp
 800fbce:	f000 fcc7 	bl	8010560 <__pow5mult>
 800fbd2:	464a      	mov	r2, r9
 800fbd4:	4601      	mov	r1, r0
 800fbd6:	4605      	mov	r5, r0
 800fbd8:	4658      	mov	r0, fp
 800fbda:	f000 fc17 	bl	801040c <__multiply>
 800fbde:	4649      	mov	r1, r9
 800fbe0:	9004      	str	r0, [sp, #16]
 800fbe2:	4658      	mov	r0, fp
 800fbe4:	f000 fb48 	bl	8010278 <_Bfree>
 800fbe8:	9b04      	ldr	r3, [sp, #16]
 800fbea:	4699      	mov	r9, r3
 800fbec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fbee:	1b1a      	subs	r2, r3, r4
 800fbf0:	d004      	beq.n	800fbfc <_dtoa_r+0x78c>
 800fbf2:	4649      	mov	r1, r9
 800fbf4:	4658      	mov	r0, fp
 800fbf6:	f000 fcb3 	bl	8010560 <__pow5mult>
 800fbfa:	4681      	mov	r9, r0
 800fbfc:	2101      	movs	r1, #1
 800fbfe:	4658      	mov	r0, fp
 800fc00:	f000 fbee 	bl	80103e0 <__i2b>
 800fc04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc06:	4604      	mov	r4, r0
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	f000 81cf 	beq.w	800ffac <_dtoa_r+0xb3c>
 800fc0e:	461a      	mov	r2, r3
 800fc10:	4601      	mov	r1, r0
 800fc12:	4658      	mov	r0, fp
 800fc14:	f000 fca4 	bl	8010560 <__pow5mult>
 800fc18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc1a:	2b01      	cmp	r3, #1
 800fc1c:	4604      	mov	r4, r0
 800fc1e:	f300 8095 	bgt.w	800fd4c <_dtoa_r+0x8dc>
 800fc22:	9b02      	ldr	r3, [sp, #8]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	f040 8087 	bne.w	800fd38 <_dtoa_r+0x8c8>
 800fc2a:	9b03      	ldr	r3, [sp, #12]
 800fc2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	f040 8089 	bne.w	800fd48 <_dtoa_r+0x8d8>
 800fc36:	9b03      	ldr	r3, [sp, #12]
 800fc38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fc3c:	0d1b      	lsrs	r3, r3, #20
 800fc3e:	051b      	lsls	r3, r3, #20
 800fc40:	b12b      	cbz	r3, 800fc4e <_dtoa_r+0x7de>
 800fc42:	9b08      	ldr	r3, [sp, #32]
 800fc44:	3301      	adds	r3, #1
 800fc46:	9308      	str	r3, [sp, #32]
 800fc48:	f108 0801 	add.w	r8, r8, #1
 800fc4c:	2301      	movs	r3, #1
 800fc4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fc50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	f000 81b0 	beq.w	800ffb8 <_dtoa_r+0xb48>
 800fc58:	6923      	ldr	r3, [r4, #16]
 800fc5a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fc5e:	6918      	ldr	r0, [r3, #16]
 800fc60:	f000 fb72 	bl	8010348 <__hi0bits>
 800fc64:	f1c0 0020 	rsb	r0, r0, #32
 800fc68:	9b08      	ldr	r3, [sp, #32]
 800fc6a:	4418      	add	r0, r3
 800fc6c:	f010 001f 	ands.w	r0, r0, #31
 800fc70:	d077      	beq.n	800fd62 <_dtoa_r+0x8f2>
 800fc72:	f1c0 0320 	rsb	r3, r0, #32
 800fc76:	2b04      	cmp	r3, #4
 800fc78:	dd6b      	ble.n	800fd52 <_dtoa_r+0x8e2>
 800fc7a:	9b08      	ldr	r3, [sp, #32]
 800fc7c:	f1c0 001c 	rsb	r0, r0, #28
 800fc80:	4403      	add	r3, r0
 800fc82:	4480      	add	r8, r0
 800fc84:	4406      	add	r6, r0
 800fc86:	9308      	str	r3, [sp, #32]
 800fc88:	f1b8 0f00 	cmp.w	r8, #0
 800fc8c:	dd05      	ble.n	800fc9a <_dtoa_r+0x82a>
 800fc8e:	4649      	mov	r1, r9
 800fc90:	4642      	mov	r2, r8
 800fc92:	4658      	mov	r0, fp
 800fc94:	f000 fcbe 	bl	8010614 <__lshift>
 800fc98:	4681      	mov	r9, r0
 800fc9a:	9b08      	ldr	r3, [sp, #32]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	dd05      	ble.n	800fcac <_dtoa_r+0x83c>
 800fca0:	4621      	mov	r1, r4
 800fca2:	461a      	mov	r2, r3
 800fca4:	4658      	mov	r0, fp
 800fca6:	f000 fcb5 	bl	8010614 <__lshift>
 800fcaa:	4604      	mov	r4, r0
 800fcac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d059      	beq.n	800fd66 <_dtoa_r+0x8f6>
 800fcb2:	4621      	mov	r1, r4
 800fcb4:	4648      	mov	r0, r9
 800fcb6:	f000 fd19 	bl	80106ec <__mcmp>
 800fcba:	2800      	cmp	r0, #0
 800fcbc:	da53      	bge.n	800fd66 <_dtoa_r+0x8f6>
 800fcbe:	1e7b      	subs	r3, r7, #1
 800fcc0:	9304      	str	r3, [sp, #16]
 800fcc2:	4649      	mov	r1, r9
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	220a      	movs	r2, #10
 800fcc8:	4658      	mov	r0, fp
 800fcca:	f000 faf7 	bl	80102bc <__multadd>
 800fcce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fcd0:	4681      	mov	r9, r0
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	f000 8172 	beq.w	800ffbc <_dtoa_r+0xb4c>
 800fcd8:	2300      	movs	r3, #0
 800fcda:	4629      	mov	r1, r5
 800fcdc:	220a      	movs	r2, #10
 800fcde:	4658      	mov	r0, fp
 800fce0:	f000 faec 	bl	80102bc <__multadd>
 800fce4:	9b00      	ldr	r3, [sp, #0]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	4605      	mov	r5, r0
 800fcea:	dc67      	bgt.n	800fdbc <_dtoa_r+0x94c>
 800fcec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcee:	2b02      	cmp	r3, #2
 800fcf0:	dc41      	bgt.n	800fd76 <_dtoa_r+0x906>
 800fcf2:	e063      	b.n	800fdbc <_dtoa_r+0x94c>
 800fcf4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fcf6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800fcfa:	e746      	b.n	800fb8a <_dtoa_r+0x71a>
 800fcfc:	9b07      	ldr	r3, [sp, #28]
 800fcfe:	1e5c      	subs	r4, r3, #1
 800fd00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd02:	42a3      	cmp	r3, r4
 800fd04:	bfbf      	itttt	lt
 800fd06:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800fd08:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800fd0a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800fd0c:	1ae3      	sublt	r3, r4, r3
 800fd0e:	bfb4      	ite	lt
 800fd10:	18d2      	addlt	r2, r2, r3
 800fd12:	1b1c      	subge	r4, r3, r4
 800fd14:	9b07      	ldr	r3, [sp, #28]
 800fd16:	bfbc      	itt	lt
 800fd18:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800fd1a:	2400      	movlt	r4, #0
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	bfb5      	itete	lt
 800fd20:	eba8 0603 	sublt.w	r6, r8, r3
 800fd24:	9b07      	ldrge	r3, [sp, #28]
 800fd26:	2300      	movlt	r3, #0
 800fd28:	4646      	movge	r6, r8
 800fd2a:	e730      	b.n	800fb8e <_dtoa_r+0x71e>
 800fd2c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fd2e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800fd30:	4646      	mov	r6, r8
 800fd32:	e735      	b.n	800fba0 <_dtoa_r+0x730>
 800fd34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fd36:	e75c      	b.n	800fbf2 <_dtoa_r+0x782>
 800fd38:	2300      	movs	r3, #0
 800fd3a:	e788      	b.n	800fc4e <_dtoa_r+0x7de>
 800fd3c:	3fe00000 	.word	0x3fe00000
 800fd40:	40240000 	.word	0x40240000
 800fd44:	40140000 	.word	0x40140000
 800fd48:	9b02      	ldr	r3, [sp, #8]
 800fd4a:	e780      	b.n	800fc4e <_dtoa_r+0x7de>
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fd50:	e782      	b.n	800fc58 <_dtoa_r+0x7e8>
 800fd52:	d099      	beq.n	800fc88 <_dtoa_r+0x818>
 800fd54:	9a08      	ldr	r2, [sp, #32]
 800fd56:	331c      	adds	r3, #28
 800fd58:	441a      	add	r2, r3
 800fd5a:	4498      	add	r8, r3
 800fd5c:	441e      	add	r6, r3
 800fd5e:	9208      	str	r2, [sp, #32]
 800fd60:	e792      	b.n	800fc88 <_dtoa_r+0x818>
 800fd62:	4603      	mov	r3, r0
 800fd64:	e7f6      	b.n	800fd54 <_dtoa_r+0x8e4>
 800fd66:	9b07      	ldr	r3, [sp, #28]
 800fd68:	9704      	str	r7, [sp, #16]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	dc20      	bgt.n	800fdb0 <_dtoa_r+0x940>
 800fd6e:	9300      	str	r3, [sp, #0]
 800fd70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd72:	2b02      	cmp	r3, #2
 800fd74:	dd1e      	ble.n	800fdb4 <_dtoa_r+0x944>
 800fd76:	9b00      	ldr	r3, [sp, #0]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	f47f aec0 	bne.w	800fafe <_dtoa_r+0x68e>
 800fd7e:	4621      	mov	r1, r4
 800fd80:	2205      	movs	r2, #5
 800fd82:	4658      	mov	r0, fp
 800fd84:	f000 fa9a 	bl	80102bc <__multadd>
 800fd88:	4601      	mov	r1, r0
 800fd8a:	4604      	mov	r4, r0
 800fd8c:	4648      	mov	r0, r9
 800fd8e:	f000 fcad 	bl	80106ec <__mcmp>
 800fd92:	2800      	cmp	r0, #0
 800fd94:	f77f aeb3 	ble.w	800fafe <_dtoa_r+0x68e>
 800fd98:	4656      	mov	r6, sl
 800fd9a:	2331      	movs	r3, #49	@ 0x31
 800fd9c:	f806 3b01 	strb.w	r3, [r6], #1
 800fda0:	9b04      	ldr	r3, [sp, #16]
 800fda2:	3301      	adds	r3, #1
 800fda4:	9304      	str	r3, [sp, #16]
 800fda6:	e6ae      	b.n	800fb06 <_dtoa_r+0x696>
 800fda8:	9c07      	ldr	r4, [sp, #28]
 800fdaa:	9704      	str	r7, [sp, #16]
 800fdac:	4625      	mov	r5, r4
 800fdae:	e7f3      	b.n	800fd98 <_dtoa_r+0x928>
 800fdb0:	9b07      	ldr	r3, [sp, #28]
 800fdb2:	9300      	str	r3, [sp, #0]
 800fdb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	f000 8104 	beq.w	800ffc4 <_dtoa_r+0xb54>
 800fdbc:	2e00      	cmp	r6, #0
 800fdbe:	dd05      	ble.n	800fdcc <_dtoa_r+0x95c>
 800fdc0:	4629      	mov	r1, r5
 800fdc2:	4632      	mov	r2, r6
 800fdc4:	4658      	mov	r0, fp
 800fdc6:	f000 fc25 	bl	8010614 <__lshift>
 800fdca:	4605      	mov	r5, r0
 800fdcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d05a      	beq.n	800fe88 <_dtoa_r+0xa18>
 800fdd2:	6869      	ldr	r1, [r5, #4]
 800fdd4:	4658      	mov	r0, fp
 800fdd6:	f000 fa0f 	bl	80101f8 <_Balloc>
 800fdda:	4606      	mov	r6, r0
 800fddc:	b928      	cbnz	r0, 800fdea <_dtoa_r+0x97a>
 800fdde:	4b84      	ldr	r3, [pc, #528]	@ (800fff0 <_dtoa_r+0xb80>)
 800fde0:	4602      	mov	r2, r0
 800fde2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fde6:	f7ff bb5a 	b.w	800f49e <_dtoa_r+0x2e>
 800fdea:	692a      	ldr	r2, [r5, #16]
 800fdec:	3202      	adds	r2, #2
 800fdee:	0092      	lsls	r2, r2, #2
 800fdf0:	f105 010c 	add.w	r1, r5, #12
 800fdf4:	300c      	adds	r0, #12
 800fdf6:	f7ff faa2 	bl	800f33e <memcpy>
 800fdfa:	2201      	movs	r2, #1
 800fdfc:	4631      	mov	r1, r6
 800fdfe:	4658      	mov	r0, fp
 800fe00:	f000 fc08 	bl	8010614 <__lshift>
 800fe04:	f10a 0301 	add.w	r3, sl, #1
 800fe08:	9307      	str	r3, [sp, #28]
 800fe0a:	9b00      	ldr	r3, [sp, #0]
 800fe0c:	4453      	add	r3, sl
 800fe0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fe10:	9b02      	ldr	r3, [sp, #8]
 800fe12:	f003 0301 	and.w	r3, r3, #1
 800fe16:	462f      	mov	r7, r5
 800fe18:	930a      	str	r3, [sp, #40]	@ 0x28
 800fe1a:	4605      	mov	r5, r0
 800fe1c:	9b07      	ldr	r3, [sp, #28]
 800fe1e:	4621      	mov	r1, r4
 800fe20:	3b01      	subs	r3, #1
 800fe22:	4648      	mov	r0, r9
 800fe24:	9300      	str	r3, [sp, #0]
 800fe26:	f7ff fa98 	bl	800f35a <quorem>
 800fe2a:	4639      	mov	r1, r7
 800fe2c:	9002      	str	r0, [sp, #8]
 800fe2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fe32:	4648      	mov	r0, r9
 800fe34:	f000 fc5a 	bl	80106ec <__mcmp>
 800fe38:	462a      	mov	r2, r5
 800fe3a:	9008      	str	r0, [sp, #32]
 800fe3c:	4621      	mov	r1, r4
 800fe3e:	4658      	mov	r0, fp
 800fe40:	f000 fc70 	bl	8010724 <__mdiff>
 800fe44:	68c2      	ldr	r2, [r0, #12]
 800fe46:	4606      	mov	r6, r0
 800fe48:	bb02      	cbnz	r2, 800fe8c <_dtoa_r+0xa1c>
 800fe4a:	4601      	mov	r1, r0
 800fe4c:	4648      	mov	r0, r9
 800fe4e:	f000 fc4d 	bl	80106ec <__mcmp>
 800fe52:	4602      	mov	r2, r0
 800fe54:	4631      	mov	r1, r6
 800fe56:	4658      	mov	r0, fp
 800fe58:	920e      	str	r2, [sp, #56]	@ 0x38
 800fe5a:	f000 fa0d 	bl	8010278 <_Bfree>
 800fe5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fe62:	9e07      	ldr	r6, [sp, #28]
 800fe64:	ea43 0102 	orr.w	r1, r3, r2
 800fe68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fe6a:	4319      	orrs	r1, r3
 800fe6c:	d110      	bne.n	800fe90 <_dtoa_r+0xa20>
 800fe6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fe72:	d029      	beq.n	800fec8 <_dtoa_r+0xa58>
 800fe74:	9b08      	ldr	r3, [sp, #32]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	dd02      	ble.n	800fe80 <_dtoa_r+0xa10>
 800fe7a:	9b02      	ldr	r3, [sp, #8]
 800fe7c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800fe80:	9b00      	ldr	r3, [sp, #0]
 800fe82:	f883 8000 	strb.w	r8, [r3]
 800fe86:	e63f      	b.n	800fb08 <_dtoa_r+0x698>
 800fe88:	4628      	mov	r0, r5
 800fe8a:	e7bb      	b.n	800fe04 <_dtoa_r+0x994>
 800fe8c:	2201      	movs	r2, #1
 800fe8e:	e7e1      	b.n	800fe54 <_dtoa_r+0x9e4>
 800fe90:	9b08      	ldr	r3, [sp, #32]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	db04      	blt.n	800fea0 <_dtoa_r+0xa30>
 800fe96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fe98:	430b      	orrs	r3, r1
 800fe9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fe9c:	430b      	orrs	r3, r1
 800fe9e:	d120      	bne.n	800fee2 <_dtoa_r+0xa72>
 800fea0:	2a00      	cmp	r2, #0
 800fea2:	dded      	ble.n	800fe80 <_dtoa_r+0xa10>
 800fea4:	4649      	mov	r1, r9
 800fea6:	2201      	movs	r2, #1
 800fea8:	4658      	mov	r0, fp
 800feaa:	f000 fbb3 	bl	8010614 <__lshift>
 800feae:	4621      	mov	r1, r4
 800feb0:	4681      	mov	r9, r0
 800feb2:	f000 fc1b 	bl	80106ec <__mcmp>
 800feb6:	2800      	cmp	r0, #0
 800feb8:	dc03      	bgt.n	800fec2 <_dtoa_r+0xa52>
 800feba:	d1e1      	bne.n	800fe80 <_dtoa_r+0xa10>
 800febc:	f018 0f01 	tst.w	r8, #1
 800fec0:	d0de      	beq.n	800fe80 <_dtoa_r+0xa10>
 800fec2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fec6:	d1d8      	bne.n	800fe7a <_dtoa_r+0xa0a>
 800fec8:	9a00      	ldr	r2, [sp, #0]
 800feca:	2339      	movs	r3, #57	@ 0x39
 800fecc:	7013      	strb	r3, [r2, #0]
 800fece:	4633      	mov	r3, r6
 800fed0:	461e      	mov	r6, r3
 800fed2:	3b01      	subs	r3, #1
 800fed4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fed8:	2a39      	cmp	r2, #57	@ 0x39
 800feda:	d052      	beq.n	800ff82 <_dtoa_r+0xb12>
 800fedc:	3201      	adds	r2, #1
 800fede:	701a      	strb	r2, [r3, #0]
 800fee0:	e612      	b.n	800fb08 <_dtoa_r+0x698>
 800fee2:	2a00      	cmp	r2, #0
 800fee4:	dd07      	ble.n	800fef6 <_dtoa_r+0xa86>
 800fee6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800feea:	d0ed      	beq.n	800fec8 <_dtoa_r+0xa58>
 800feec:	9a00      	ldr	r2, [sp, #0]
 800feee:	f108 0301 	add.w	r3, r8, #1
 800fef2:	7013      	strb	r3, [r2, #0]
 800fef4:	e608      	b.n	800fb08 <_dtoa_r+0x698>
 800fef6:	9b07      	ldr	r3, [sp, #28]
 800fef8:	9a07      	ldr	r2, [sp, #28]
 800fefa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800fefe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ff00:	4293      	cmp	r3, r2
 800ff02:	d028      	beq.n	800ff56 <_dtoa_r+0xae6>
 800ff04:	4649      	mov	r1, r9
 800ff06:	2300      	movs	r3, #0
 800ff08:	220a      	movs	r2, #10
 800ff0a:	4658      	mov	r0, fp
 800ff0c:	f000 f9d6 	bl	80102bc <__multadd>
 800ff10:	42af      	cmp	r7, r5
 800ff12:	4681      	mov	r9, r0
 800ff14:	f04f 0300 	mov.w	r3, #0
 800ff18:	f04f 020a 	mov.w	r2, #10
 800ff1c:	4639      	mov	r1, r7
 800ff1e:	4658      	mov	r0, fp
 800ff20:	d107      	bne.n	800ff32 <_dtoa_r+0xac2>
 800ff22:	f000 f9cb 	bl	80102bc <__multadd>
 800ff26:	4607      	mov	r7, r0
 800ff28:	4605      	mov	r5, r0
 800ff2a:	9b07      	ldr	r3, [sp, #28]
 800ff2c:	3301      	adds	r3, #1
 800ff2e:	9307      	str	r3, [sp, #28]
 800ff30:	e774      	b.n	800fe1c <_dtoa_r+0x9ac>
 800ff32:	f000 f9c3 	bl	80102bc <__multadd>
 800ff36:	4629      	mov	r1, r5
 800ff38:	4607      	mov	r7, r0
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	220a      	movs	r2, #10
 800ff3e:	4658      	mov	r0, fp
 800ff40:	f000 f9bc 	bl	80102bc <__multadd>
 800ff44:	4605      	mov	r5, r0
 800ff46:	e7f0      	b.n	800ff2a <_dtoa_r+0xaba>
 800ff48:	9b00      	ldr	r3, [sp, #0]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	bfcc      	ite	gt
 800ff4e:	461e      	movgt	r6, r3
 800ff50:	2601      	movle	r6, #1
 800ff52:	4456      	add	r6, sl
 800ff54:	2700      	movs	r7, #0
 800ff56:	4649      	mov	r1, r9
 800ff58:	2201      	movs	r2, #1
 800ff5a:	4658      	mov	r0, fp
 800ff5c:	f000 fb5a 	bl	8010614 <__lshift>
 800ff60:	4621      	mov	r1, r4
 800ff62:	4681      	mov	r9, r0
 800ff64:	f000 fbc2 	bl	80106ec <__mcmp>
 800ff68:	2800      	cmp	r0, #0
 800ff6a:	dcb0      	bgt.n	800fece <_dtoa_r+0xa5e>
 800ff6c:	d102      	bne.n	800ff74 <_dtoa_r+0xb04>
 800ff6e:	f018 0f01 	tst.w	r8, #1
 800ff72:	d1ac      	bne.n	800fece <_dtoa_r+0xa5e>
 800ff74:	4633      	mov	r3, r6
 800ff76:	461e      	mov	r6, r3
 800ff78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ff7c:	2a30      	cmp	r2, #48	@ 0x30
 800ff7e:	d0fa      	beq.n	800ff76 <_dtoa_r+0xb06>
 800ff80:	e5c2      	b.n	800fb08 <_dtoa_r+0x698>
 800ff82:	459a      	cmp	sl, r3
 800ff84:	d1a4      	bne.n	800fed0 <_dtoa_r+0xa60>
 800ff86:	9b04      	ldr	r3, [sp, #16]
 800ff88:	3301      	adds	r3, #1
 800ff8a:	9304      	str	r3, [sp, #16]
 800ff8c:	2331      	movs	r3, #49	@ 0x31
 800ff8e:	f88a 3000 	strb.w	r3, [sl]
 800ff92:	e5b9      	b.n	800fb08 <_dtoa_r+0x698>
 800ff94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ff96:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800fff4 <_dtoa_r+0xb84>
 800ff9a:	b11b      	cbz	r3, 800ffa4 <_dtoa_r+0xb34>
 800ff9c:	f10a 0308 	add.w	r3, sl, #8
 800ffa0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ffa2:	6013      	str	r3, [r2, #0]
 800ffa4:	4650      	mov	r0, sl
 800ffa6:	b019      	add	sp, #100	@ 0x64
 800ffa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ffae:	2b01      	cmp	r3, #1
 800ffb0:	f77f ae37 	ble.w	800fc22 <_dtoa_r+0x7b2>
 800ffb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ffb6:	930a      	str	r3, [sp, #40]	@ 0x28
 800ffb8:	2001      	movs	r0, #1
 800ffba:	e655      	b.n	800fc68 <_dtoa_r+0x7f8>
 800ffbc:	9b00      	ldr	r3, [sp, #0]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	f77f aed6 	ble.w	800fd70 <_dtoa_r+0x900>
 800ffc4:	4656      	mov	r6, sl
 800ffc6:	4621      	mov	r1, r4
 800ffc8:	4648      	mov	r0, r9
 800ffca:	f7ff f9c6 	bl	800f35a <quorem>
 800ffce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ffd2:	f806 8b01 	strb.w	r8, [r6], #1
 800ffd6:	9b00      	ldr	r3, [sp, #0]
 800ffd8:	eba6 020a 	sub.w	r2, r6, sl
 800ffdc:	4293      	cmp	r3, r2
 800ffde:	ddb3      	ble.n	800ff48 <_dtoa_r+0xad8>
 800ffe0:	4649      	mov	r1, r9
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	220a      	movs	r2, #10
 800ffe6:	4658      	mov	r0, fp
 800ffe8:	f000 f968 	bl	80102bc <__multadd>
 800ffec:	4681      	mov	r9, r0
 800ffee:	e7ea      	b.n	800ffc6 <_dtoa_r+0xb56>
 800fff0:	08011330 	.word	0x08011330
 800fff4:	080112b4 	.word	0x080112b4

0800fff8 <_free_r>:
 800fff8:	b538      	push	{r3, r4, r5, lr}
 800fffa:	4605      	mov	r5, r0
 800fffc:	2900      	cmp	r1, #0
 800fffe:	d041      	beq.n	8010084 <_free_r+0x8c>
 8010000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010004:	1f0c      	subs	r4, r1, #4
 8010006:	2b00      	cmp	r3, #0
 8010008:	bfb8      	it	lt
 801000a:	18e4      	addlt	r4, r4, r3
 801000c:	f000 f8e8 	bl	80101e0 <__malloc_lock>
 8010010:	4a1d      	ldr	r2, [pc, #116]	@ (8010088 <_free_r+0x90>)
 8010012:	6813      	ldr	r3, [r2, #0]
 8010014:	b933      	cbnz	r3, 8010024 <_free_r+0x2c>
 8010016:	6063      	str	r3, [r4, #4]
 8010018:	6014      	str	r4, [r2, #0]
 801001a:	4628      	mov	r0, r5
 801001c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010020:	f000 b8e4 	b.w	80101ec <__malloc_unlock>
 8010024:	42a3      	cmp	r3, r4
 8010026:	d908      	bls.n	801003a <_free_r+0x42>
 8010028:	6820      	ldr	r0, [r4, #0]
 801002a:	1821      	adds	r1, r4, r0
 801002c:	428b      	cmp	r3, r1
 801002e:	bf01      	itttt	eq
 8010030:	6819      	ldreq	r1, [r3, #0]
 8010032:	685b      	ldreq	r3, [r3, #4]
 8010034:	1809      	addeq	r1, r1, r0
 8010036:	6021      	streq	r1, [r4, #0]
 8010038:	e7ed      	b.n	8010016 <_free_r+0x1e>
 801003a:	461a      	mov	r2, r3
 801003c:	685b      	ldr	r3, [r3, #4]
 801003e:	b10b      	cbz	r3, 8010044 <_free_r+0x4c>
 8010040:	42a3      	cmp	r3, r4
 8010042:	d9fa      	bls.n	801003a <_free_r+0x42>
 8010044:	6811      	ldr	r1, [r2, #0]
 8010046:	1850      	adds	r0, r2, r1
 8010048:	42a0      	cmp	r0, r4
 801004a:	d10b      	bne.n	8010064 <_free_r+0x6c>
 801004c:	6820      	ldr	r0, [r4, #0]
 801004e:	4401      	add	r1, r0
 8010050:	1850      	adds	r0, r2, r1
 8010052:	4283      	cmp	r3, r0
 8010054:	6011      	str	r1, [r2, #0]
 8010056:	d1e0      	bne.n	801001a <_free_r+0x22>
 8010058:	6818      	ldr	r0, [r3, #0]
 801005a:	685b      	ldr	r3, [r3, #4]
 801005c:	6053      	str	r3, [r2, #4]
 801005e:	4408      	add	r0, r1
 8010060:	6010      	str	r0, [r2, #0]
 8010062:	e7da      	b.n	801001a <_free_r+0x22>
 8010064:	d902      	bls.n	801006c <_free_r+0x74>
 8010066:	230c      	movs	r3, #12
 8010068:	602b      	str	r3, [r5, #0]
 801006a:	e7d6      	b.n	801001a <_free_r+0x22>
 801006c:	6820      	ldr	r0, [r4, #0]
 801006e:	1821      	adds	r1, r4, r0
 8010070:	428b      	cmp	r3, r1
 8010072:	bf04      	itt	eq
 8010074:	6819      	ldreq	r1, [r3, #0]
 8010076:	685b      	ldreq	r3, [r3, #4]
 8010078:	6063      	str	r3, [r4, #4]
 801007a:	bf04      	itt	eq
 801007c:	1809      	addeq	r1, r1, r0
 801007e:	6021      	streq	r1, [r4, #0]
 8010080:	6054      	str	r4, [r2, #4]
 8010082:	e7ca      	b.n	801001a <_free_r+0x22>
 8010084:	bd38      	pop	{r3, r4, r5, pc}
 8010086:	bf00      	nop
 8010088:	20002254 	.word	0x20002254

0801008c <malloc>:
 801008c:	4b02      	ldr	r3, [pc, #8]	@ (8010098 <malloc+0xc>)
 801008e:	4601      	mov	r1, r0
 8010090:	6818      	ldr	r0, [r3, #0]
 8010092:	f000 b825 	b.w	80100e0 <_malloc_r>
 8010096:	bf00      	nop
 8010098:	20000130 	.word	0x20000130

0801009c <sbrk_aligned>:
 801009c:	b570      	push	{r4, r5, r6, lr}
 801009e:	4e0f      	ldr	r6, [pc, #60]	@ (80100dc <sbrk_aligned+0x40>)
 80100a0:	460c      	mov	r4, r1
 80100a2:	6831      	ldr	r1, [r6, #0]
 80100a4:	4605      	mov	r5, r0
 80100a6:	b911      	cbnz	r1, 80100ae <sbrk_aligned+0x12>
 80100a8:	f000 fede 	bl	8010e68 <_sbrk_r>
 80100ac:	6030      	str	r0, [r6, #0]
 80100ae:	4621      	mov	r1, r4
 80100b0:	4628      	mov	r0, r5
 80100b2:	f000 fed9 	bl	8010e68 <_sbrk_r>
 80100b6:	1c43      	adds	r3, r0, #1
 80100b8:	d103      	bne.n	80100c2 <sbrk_aligned+0x26>
 80100ba:	f04f 34ff 	mov.w	r4, #4294967295
 80100be:	4620      	mov	r0, r4
 80100c0:	bd70      	pop	{r4, r5, r6, pc}
 80100c2:	1cc4      	adds	r4, r0, #3
 80100c4:	f024 0403 	bic.w	r4, r4, #3
 80100c8:	42a0      	cmp	r0, r4
 80100ca:	d0f8      	beq.n	80100be <sbrk_aligned+0x22>
 80100cc:	1a21      	subs	r1, r4, r0
 80100ce:	4628      	mov	r0, r5
 80100d0:	f000 feca 	bl	8010e68 <_sbrk_r>
 80100d4:	3001      	adds	r0, #1
 80100d6:	d1f2      	bne.n	80100be <sbrk_aligned+0x22>
 80100d8:	e7ef      	b.n	80100ba <sbrk_aligned+0x1e>
 80100da:	bf00      	nop
 80100dc:	20002250 	.word	0x20002250

080100e0 <_malloc_r>:
 80100e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100e4:	1ccd      	adds	r5, r1, #3
 80100e6:	f025 0503 	bic.w	r5, r5, #3
 80100ea:	3508      	adds	r5, #8
 80100ec:	2d0c      	cmp	r5, #12
 80100ee:	bf38      	it	cc
 80100f0:	250c      	movcc	r5, #12
 80100f2:	2d00      	cmp	r5, #0
 80100f4:	4606      	mov	r6, r0
 80100f6:	db01      	blt.n	80100fc <_malloc_r+0x1c>
 80100f8:	42a9      	cmp	r1, r5
 80100fa:	d904      	bls.n	8010106 <_malloc_r+0x26>
 80100fc:	230c      	movs	r3, #12
 80100fe:	6033      	str	r3, [r6, #0]
 8010100:	2000      	movs	r0, #0
 8010102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010106:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80101dc <_malloc_r+0xfc>
 801010a:	f000 f869 	bl	80101e0 <__malloc_lock>
 801010e:	f8d8 3000 	ldr.w	r3, [r8]
 8010112:	461c      	mov	r4, r3
 8010114:	bb44      	cbnz	r4, 8010168 <_malloc_r+0x88>
 8010116:	4629      	mov	r1, r5
 8010118:	4630      	mov	r0, r6
 801011a:	f7ff ffbf 	bl	801009c <sbrk_aligned>
 801011e:	1c43      	adds	r3, r0, #1
 8010120:	4604      	mov	r4, r0
 8010122:	d158      	bne.n	80101d6 <_malloc_r+0xf6>
 8010124:	f8d8 4000 	ldr.w	r4, [r8]
 8010128:	4627      	mov	r7, r4
 801012a:	2f00      	cmp	r7, #0
 801012c:	d143      	bne.n	80101b6 <_malloc_r+0xd6>
 801012e:	2c00      	cmp	r4, #0
 8010130:	d04b      	beq.n	80101ca <_malloc_r+0xea>
 8010132:	6823      	ldr	r3, [r4, #0]
 8010134:	4639      	mov	r1, r7
 8010136:	4630      	mov	r0, r6
 8010138:	eb04 0903 	add.w	r9, r4, r3
 801013c:	f000 fe94 	bl	8010e68 <_sbrk_r>
 8010140:	4581      	cmp	r9, r0
 8010142:	d142      	bne.n	80101ca <_malloc_r+0xea>
 8010144:	6821      	ldr	r1, [r4, #0]
 8010146:	1a6d      	subs	r5, r5, r1
 8010148:	4629      	mov	r1, r5
 801014a:	4630      	mov	r0, r6
 801014c:	f7ff ffa6 	bl	801009c <sbrk_aligned>
 8010150:	3001      	adds	r0, #1
 8010152:	d03a      	beq.n	80101ca <_malloc_r+0xea>
 8010154:	6823      	ldr	r3, [r4, #0]
 8010156:	442b      	add	r3, r5
 8010158:	6023      	str	r3, [r4, #0]
 801015a:	f8d8 3000 	ldr.w	r3, [r8]
 801015e:	685a      	ldr	r2, [r3, #4]
 8010160:	bb62      	cbnz	r2, 80101bc <_malloc_r+0xdc>
 8010162:	f8c8 7000 	str.w	r7, [r8]
 8010166:	e00f      	b.n	8010188 <_malloc_r+0xa8>
 8010168:	6822      	ldr	r2, [r4, #0]
 801016a:	1b52      	subs	r2, r2, r5
 801016c:	d420      	bmi.n	80101b0 <_malloc_r+0xd0>
 801016e:	2a0b      	cmp	r2, #11
 8010170:	d917      	bls.n	80101a2 <_malloc_r+0xc2>
 8010172:	1961      	adds	r1, r4, r5
 8010174:	42a3      	cmp	r3, r4
 8010176:	6025      	str	r5, [r4, #0]
 8010178:	bf18      	it	ne
 801017a:	6059      	strne	r1, [r3, #4]
 801017c:	6863      	ldr	r3, [r4, #4]
 801017e:	bf08      	it	eq
 8010180:	f8c8 1000 	streq.w	r1, [r8]
 8010184:	5162      	str	r2, [r4, r5]
 8010186:	604b      	str	r3, [r1, #4]
 8010188:	4630      	mov	r0, r6
 801018a:	f000 f82f 	bl	80101ec <__malloc_unlock>
 801018e:	f104 000b 	add.w	r0, r4, #11
 8010192:	1d23      	adds	r3, r4, #4
 8010194:	f020 0007 	bic.w	r0, r0, #7
 8010198:	1ac2      	subs	r2, r0, r3
 801019a:	bf1c      	itt	ne
 801019c:	1a1b      	subne	r3, r3, r0
 801019e:	50a3      	strne	r3, [r4, r2]
 80101a0:	e7af      	b.n	8010102 <_malloc_r+0x22>
 80101a2:	6862      	ldr	r2, [r4, #4]
 80101a4:	42a3      	cmp	r3, r4
 80101a6:	bf0c      	ite	eq
 80101a8:	f8c8 2000 	streq.w	r2, [r8]
 80101ac:	605a      	strne	r2, [r3, #4]
 80101ae:	e7eb      	b.n	8010188 <_malloc_r+0xa8>
 80101b0:	4623      	mov	r3, r4
 80101b2:	6864      	ldr	r4, [r4, #4]
 80101b4:	e7ae      	b.n	8010114 <_malloc_r+0x34>
 80101b6:	463c      	mov	r4, r7
 80101b8:	687f      	ldr	r7, [r7, #4]
 80101ba:	e7b6      	b.n	801012a <_malloc_r+0x4a>
 80101bc:	461a      	mov	r2, r3
 80101be:	685b      	ldr	r3, [r3, #4]
 80101c0:	42a3      	cmp	r3, r4
 80101c2:	d1fb      	bne.n	80101bc <_malloc_r+0xdc>
 80101c4:	2300      	movs	r3, #0
 80101c6:	6053      	str	r3, [r2, #4]
 80101c8:	e7de      	b.n	8010188 <_malloc_r+0xa8>
 80101ca:	230c      	movs	r3, #12
 80101cc:	6033      	str	r3, [r6, #0]
 80101ce:	4630      	mov	r0, r6
 80101d0:	f000 f80c 	bl	80101ec <__malloc_unlock>
 80101d4:	e794      	b.n	8010100 <_malloc_r+0x20>
 80101d6:	6005      	str	r5, [r0, #0]
 80101d8:	e7d6      	b.n	8010188 <_malloc_r+0xa8>
 80101da:	bf00      	nop
 80101dc:	20002254 	.word	0x20002254

080101e0 <__malloc_lock>:
 80101e0:	4801      	ldr	r0, [pc, #4]	@ (80101e8 <__malloc_lock+0x8>)
 80101e2:	f7ff b8aa 	b.w	800f33a <__retarget_lock_acquire_recursive>
 80101e6:	bf00      	nop
 80101e8:	2000224c 	.word	0x2000224c

080101ec <__malloc_unlock>:
 80101ec:	4801      	ldr	r0, [pc, #4]	@ (80101f4 <__malloc_unlock+0x8>)
 80101ee:	f7ff b8a5 	b.w	800f33c <__retarget_lock_release_recursive>
 80101f2:	bf00      	nop
 80101f4:	2000224c 	.word	0x2000224c

080101f8 <_Balloc>:
 80101f8:	b570      	push	{r4, r5, r6, lr}
 80101fa:	69c6      	ldr	r6, [r0, #28]
 80101fc:	4604      	mov	r4, r0
 80101fe:	460d      	mov	r5, r1
 8010200:	b976      	cbnz	r6, 8010220 <_Balloc+0x28>
 8010202:	2010      	movs	r0, #16
 8010204:	f7ff ff42 	bl	801008c <malloc>
 8010208:	4602      	mov	r2, r0
 801020a:	61e0      	str	r0, [r4, #28]
 801020c:	b920      	cbnz	r0, 8010218 <_Balloc+0x20>
 801020e:	4b18      	ldr	r3, [pc, #96]	@ (8010270 <_Balloc+0x78>)
 8010210:	4818      	ldr	r0, [pc, #96]	@ (8010274 <_Balloc+0x7c>)
 8010212:	216b      	movs	r1, #107	@ 0x6b
 8010214:	f000 fe38 	bl	8010e88 <__assert_func>
 8010218:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801021c:	6006      	str	r6, [r0, #0]
 801021e:	60c6      	str	r6, [r0, #12]
 8010220:	69e6      	ldr	r6, [r4, #28]
 8010222:	68f3      	ldr	r3, [r6, #12]
 8010224:	b183      	cbz	r3, 8010248 <_Balloc+0x50>
 8010226:	69e3      	ldr	r3, [r4, #28]
 8010228:	68db      	ldr	r3, [r3, #12]
 801022a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801022e:	b9b8      	cbnz	r0, 8010260 <_Balloc+0x68>
 8010230:	2101      	movs	r1, #1
 8010232:	fa01 f605 	lsl.w	r6, r1, r5
 8010236:	1d72      	adds	r2, r6, #5
 8010238:	0092      	lsls	r2, r2, #2
 801023a:	4620      	mov	r0, r4
 801023c:	f000 fe42 	bl	8010ec4 <_calloc_r>
 8010240:	b160      	cbz	r0, 801025c <_Balloc+0x64>
 8010242:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010246:	e00e      	b.n	8010266 <_Balloc+0x6e>
 8010248:	2221      	movs	r2, #33	@ 0x21
 801024a:	2104      	movs	r1, #4
 801024c:	4620      	mov	r0, r4
 801024e:	f000 fe39 	bl	8010ec4 <_calloc_r>
 8010252:	69e3      	ldr	r3, [r4, #28]
 8010254:	60f0      	str	r0, [r6, #12]
 8010256:	68db      	ldr	r3, [r3, #12]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d1e4      	bne.n	8010226 <_Balloc+0x2e>
 801025c:	2000      	movs	r0, #0
 801025e:	bd70      	pop	{r4, r5, r6, pc}
 8010260:	6802      	ldr	r2, [r0, #0]
 8010262:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010266:	2300      	movs	r3, #0
 8010268:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801026c:	e7f7      	b.n	801025e <_Balloc+0x66>
 801026e:	bf00      	nop
 8010270:	080112c1 	.word	0x080112c1
 8010274:	08011341 	.word	0x08011341

08010278 <_Bfree>:
 8010278:	b570      	push	{r4, r5, r6, lr}
 801027a:	69c6      	ldr	r6, [r0, #28]
 801027c:	4605      	mov	r5, r0
 801027e:	460c      	mov	r4, r1
 8010280:	b976      	cbnz	r6, 80102a0 <_Bfree+0x28>
 8010282:	2010      	movs	r0, #16
 8010284:	f7ff ff02 	bl	801008c <malloc>
 8010288:	4602      	mov	r2, r0
 801028a:	61e8      	str	r0, [r5, #28]
 801028c:	b920      	cbnz	r0, 8010298 <_Bfree+0x20>
 801028e:	4b09      	ldr	r3, [pc, #36]	@ (80102b4 <_Bfree+0x3c>)
 8010290:	4809      	ldr	r0, [pc, #36]	@ (80102b8 <_Bfree+0x40>)
 8010292:	218f      	movs	r1, #143	@ 0x8f
 8010294:	f000 fdf8 	bl	8010e88 <__assert_func>
 8010298:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801029c:	6006      	str	r6, [r0, #0]
 801029e:	60c6      	str	r6, [r0, #12]
 80102a0:	b13c      	cbz	r4, 80102b2 <_Bfree+0x3a>
 80102a2:	69eb      	ldr	r3, [r5, #28]
 80102a4:	6862      	ldr	r2, [r4, #4]
 80102a6:	68db      	ldr	r3, [r3, #12]
 80102a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80102ac:	6021      	str	r1, [r4, #0]
 80102ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80102b2:	bd70      	pop	{r4, r5, r6, pc}
 80102b4:	080112c1 	.word	0x080112c1
 80102b8:	08011341 	.word	0x08011341

080102bc <__multadd>:
 80102bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102c0:	690d      	ldr	r5, [r1, #16]
 80102c2:	4607      	mov	r7, r0
 80102c4:	460c      	mov	r4, r1
 80102c6:	461e      	mov	r6, r3
 80102c8:	f101 0c14 	add.w	ip, r1, #20
 80102cc:	2000      	movs	r0, #0
 80102ce:	f8dc 3000 	ldr.w	r3, [ip]
 80102d2:	b299      	uxth	r1, r3
 80102d4:	fb02 6101 	mla	r1, r2, r1, r6
 80102d8:	0c1e      	lsrs	r6, r3, #16
 80102da:	0c0b      	lsrs	r3, r1, #16
 80102dc:	fb02 3306 	mla	r3, r2, r6, r3
 80102e0:	b289      	uxth	r1, r1
 80102e2:	3001      	adds	r0, #1
 80102e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80102e8:	4285      	cmp	r5, r0
 80102ea:	f84c 1b04 	str.w	r1, [ip], #4
 80102ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80102f2:	dcec      	bgt.n	80102ce <__multadd+0x12>
 80102f4:	b30e      	cbz	r6, 801033a <__multadd+0x7e>
 80102f6:	68a3      	ldr	r3, [r4, #8]
 80102f8:	42ab      	cmp	r3, r5
 80102fa:	dc19      	bgt.n	8010330 <__multadd+0x74>
 80102fc:	6861      	ldr	r1, [r4, #4]
 80102fe:	4638      	mov	r0, r7
 8010300:	3101      	adds	r1, #1
 8010302:	f7ff ff79 	bl	80101f8 <_Balloc>
 8010306:	4680      	mov	r8, r0
 8010308:	b928      	cbnz	r0, 8010316 <__multadd+0x5a>
 801030a:	4602      	mov	r2, r0
 801030c:	4b0c      	ldr	r3, [pc, #48]	@ (8010340 <__multadd+0x84>)
 801030e:	480d      	ldr	r0, [pc, #52]	@ (8010344 <__multadd+0x88>)
 8010310:	21ba      	movs	r1, #186	@ 0xba
 8010312:	f000 fdb9 	bl	8010e88 <__assert_func>
 8010316:	6922      	ldr	r2, [r4, #16]
 8010318:	3202      	adds	r2, #2
 801031a:	f104 010c 	add.w	r1, r4, #12
 801031e:	0092      	lsls	r2, r2, #2
 8010320:	300c      	adds	r0, #12
 8010322:	f7ff f80c 	bl	800f33e <memcpy>
 8010326:	4621      	mov	r1, r4
 8010328:	4638      	mov	r0, r7
 801032a:	f7ff ffa5 	bl	8010278 <_Bfree>
 801032e:	4644      	mov	r4, r8
 8010330:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010334:	3501      	adds	r5, #1
 8010336:	615e      	str	r6, [r3, #20]
 8010338:	6125      	str	r5, [r4, #16]
 801033a:	4620      	mov	r0, r4
 801033c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010340:	08011330 	.word	0x08011330
 8010344:	08011341 	.word	0x08011341

08010348 <__hi0bits>:
 8010348:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801034c:	4603      	mov	r3, r0
 801034e:	bf36      	itet	cc
 8010350:	0403      	lslcc	r3, r0, #16
 8010352:	2000      	movcs	r0, #0
 8010354:	2010      	movcc	r0, #16
 8010356:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801035a:	bf3c      	itt	cc
 801035c:	021b      	lslcc	r3, r3, #8
 801035e:	3008      	addcc	r0, #8
 8010360:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010364:	bf3c      	itt	cc
 8010366:	011b      	lslcc	r3, r3, #4
 8010368:	3004      	addcc	r0, #4
 801036a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801036e:	bf3c      	itt	cc
 8010370:	009b      	lslcc	r3, r3, #2
 8010372:	3002      	addcc	r0, #2
 8010374:	2b00      	cmp	r3, #0
 8010376:	db05      	blt.n	8010384 <__hi0bits+0x3c>
 8010378:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801037c:	f100 0001 	add.w	r0, r0, #1
 8010380:	bf08      	it	eq
 8010382:	2020      	moveq	r0, #32
 8010384:	4770      	bx	lr

08010386 <__lo0bits>:
 8010386:	6803      	ldr	r3, [r0, #0]
 8010388:	4602      	mov	r2, r0
 801038a:	f013 0007 	ands.w	r0, r3, #7
 801038e:	d00b      	beq.n	80103a8 <__lo0bits+0x22>
 8010390:	07d9      	lsls	r1, r3, #31
 8010392:	d421      	bmi.n	80103d8 <__lo0bits+0x52>
 8010394:	0798      	lsls	r0, r3, #30
 8010396:	bf49      	itett	mi
 8010398:	085b      	lsrmi	r3, r3, #1
 801039a:	089b      	lsrpl	r3, r3, #2
 801039c:	2001      	movmi	r0, #1
 801039e:	6013      	strmi	r3, [r2, #0]
 80103a0:	bf5c      	itt	pl
 80103a2:	6013      	strpl	r3, [r2, #0]
 80103a4:	2002      	movpl	r0, #2
 80103a6:	4770      	bx	lr
 80103a8:	b299      	uxth	r1, r3
 80103aa:	b909      	cbnz	r1, 80103b0 <__lo0bits+0x2a>
 80103ac:	0c1b      	lsrs	r3, r3, #16
 80103ae:	2010      	movs	r0, #16
 80103b0:	b2d9      	uxtb	r1, r3
 80103b2:	b909      	cbnz	r1, 80103b8 <__lo0bits+0x32>
 80103b4:	3008      	adds	r0, #8
 80103b6:	0a1b      	lsrs	r3, r3, #8
 80103b8:	0719      	lsls	r1, r3, #28
 80103ba:	bf04      	itt	eq
 80103bc:	091b      	lsreq	r3, r3, #4
 80103be:	3004      	addeq	r0, #4
 80103c0:	0799      	lsls	r1, r3, #30
 80103c2:	bf04      	itt	eq
 80103c4:	089b      	lsreq	r3, r3, #2
 80103c6:	3002      	addeq	r0, #2
 80103c8:	07d9      	lsls	r1, r3, #31
 80103ca:	d403      	bmi.n	80103d4 <__lo0bits+0x4e>
 80103cc:	085b      	lsrs	r3, r3, #1
 80103ce:	f100 0001 	add.w	r0, r0, #1
 80103d2:	d003      	beq.n	80103dc <__lo0bits+0x56>
 80103d4:	6013      	str	r3, [r2, #0]
 80103d6:	4770      	bx	lr
 80103d8:	2000      	movs	r0, #0
 80103da:	4770      	bx	lr
 80103dc:	2020      	movs	r0, #32
 80103de:	4770      	bx	lr

080103e0 <__i2b>:
 80103e0:	b510      	push	{r4, lr}
 80103e2:	460c      	mov	r4, r1
 80103e4:	2101      	movs	r1, #1
 80103e6:	f7ff ff07 	bl	80101f8 <_Balloc>
 80103ea:	4602      	mov	r2, r0
 80103ec:	b928      	cbnz	r0, 80103fa <__i2b+0x1a>
 80103ee:	4b05      	ldr	r3, [pc, #20]	@ (8010404 <__i2b+0x24>)
 80103f0:	4805      	ldr	r0, [pc, #20]	@ (8010408 <__i2b+0x28>)
 80103f2:	f240 1145 	movw	r1, #325	@ 0x145
 80103f6:	f000 fd47 	bl	8010e88 <__assert_func>
 80103fa:	2301      	movs	r3, #1
 80103fc:	6144      	str	r4, [r0, #20]
 80103fe:	6103      	str	r3, [r0, #16]
 8010400:	bd10      	pop	{r4, pc}
 8010402:	bf00      	nop
 8010404:	08011330 	.word	0x08011330
 8010408:	08011341 	.word	0x08011341

0801040c <__multiply>:
 801040c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010410:	4614      	mov	r4, r2
 8010412:	690a      	ldr	r2, [r1, #16]
 8010414:	6923      	ldr	r3, [r4, #16]
 8010416:	429a      	cmp	r2, r3
 8010418:	bfa8      	it	ge
 801041a:	4623      	movge	r3, r4
 801041c:	460f      	mov	r7, r1
 801041e:	bfa4      	itt	ge
 8010420:	460c      	movge	r4, r1
 8010422:	461f      	movge	r7, r3
 8010424:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010428:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801042c:	68a3      	ldr	r3, [r4, #8]
 801042e:	6861      	ldr	r1, [r4, #4]
 8010430:	eb0a 0609 	add.w	r6, sl, r9
 8010434:	42b3      	cmp	r3, r6
 8010436:	b085      	sub	sp, #20
 8010438:	bfb8      	it	lt
 801043a:	3101      	addlt	r1, #1
 801043c:	f7ff fedc 	bl	80101f8 <_Balloc>
 8010440:	b930      	cbnz	r0, 8010450 <__multiply+0x44>
 8010442:	4602      	mov	r2, r0
 8010444:	4b44      	ldr	r3, [pc, #272]	@ (8010558 <__multiply+0x14c>)
 8010446:	4845      	ldr	r0, [pc, #276]	@ (801055c <__multiply+0x150>)
 8010448:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801044c:	f000 fd1c 	bl	8010e88 <__assert_func>
 8010450:	f100 0514 	add.w	r5, r0, #20
 8010454:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010458:	462b      	mov	r3, r5
 801045a:	2200      	movs	r2, #0
 801045c:	4543      	cmp	r3, r8
 801045e:	d321      	bcc.n	80104a4 <__multiply+0x98>
 8010460:	f107 0114 	add.w	r1, r7, #20
 8010464:	f104 0214 	add.w	r2, r4, #20
 8010468:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801046c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010470:	9302      	str	r3, [sp, #8]
 8010472:	1b13      	subs	r3, r2, r4
 8010474:	3b15      	subs	r3, #21
 8010476:	f023 0303 	bic.w	r3, r3, #3
 801047a:	3304      	adds	r3, #4
 801047c:	f104 0715 	add.w	r7, r4, #21
 8010480:	42ba      	cmp	r2, r7
 8010482:	bf38      	it	cc
 8010484:	2304      	movcc	r3, #4
 8010486:	9301      	str	r3, [sp, #4]
 8010488:	9b02      	ldr	r3, [sp, #8]
 801048a:	9103      	str	r1, [sp, #12]
 801048c:	428b      	cmp	r3, r1
 801048e:	d80c      	bhi.n	80104aa <__multiply+0x9e>
 8010490:	2e00      	cmp	r6, #0
 8010492:	dd03      	ble.n	801049c <__multiply+0x90>
 8010494:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010498:	2b00      	cmp	r3, #0
 801049a:	d05b      	beq.n	8010554 <__multiply+0x148>
 801049c:	6106      	str	r6, [r0, #16]
 801049e:	b005      	add	sp, #20
 80104a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104a4:	f843 2b04 	str.w	r2, [r3], #4
 80104a8:	e7d8      	b.n	801045c <__multiply+0x50>
 80104aa:	f8b1 a000 	ldrh.w	sl, [r1]
 80104ae:	f1ba 0f00 	cmp.w	sl, #0
 80104b2:	d024      	beq.n	80104fe <__multiply+0xf2>
 80104b4:	f104 0e14 	add.w	lr, r4, #20
 80104b8:	46a9      	mov	r9, r5
 80104ba:	f04f 0c00 	mov.w	ip, #0
 80104be:	f85e 7b04 	ldr.w	r7, [lr], #4
 80104c2:	f8d9 3000 	ldr.w	r3, [r9]
 80104c6:	fa1f fb87 	uxth.w	fp, r7
 80104ca:	b29b      	uxth	r3, r3
 80104cc:	fb0a 330b 	mla	r3, sl, fp, r3
 80104d0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80104d4:	f8d9 7000 	ldr.w	r7, [r9]
 80104d8:	4463      	add	r3, ip
 80104da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80104de:	fb0a c70b 	mla	r7, sl, fp, ip
 80104e2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80104e6:	b29b      	uxth	r3, r3
 80104e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80104ec:	4572      	cmp	r2, lr
 80104ee:	f849 3b04 	str.w	r3, [r9], #4
 80104f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80104f6:	d8e2      	bhi.n	80104be <__multiply+0xb2>
 80104f8:	9b01      	ldr	r3, [sp, #4]
 80104fa:	f845 c003 	str.w	ip, [r5, r3]
 80104fe:	9b03      	ldr	r3, [sp, #12]
 8010500:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010504:	3104      	adds	r1, #4
 8010506:	f1b9 0f00 	cmp.w	r9, #0
 801050a:	d021      	beq.n	8010550 <__multiply+0x144>
 801050c:	682b      	ldr	r3, [r5, #0]
 801050e:	f104 0c14 	add.w	ip, r4, #20
 8010512:	46ae      	mov	lr, r5
 8010514:	f04f 0a00 	mov.w	sl, #0
 8010518:	f8bc b000 	ldrh.w	fp, [ip]
 801051c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010520:	fb09 770b 	mla	r7, r9, fp, r7
 8010524:	4457      	add	r7, sl
 8010526:	b29b      	uxth	r3, r3
 8010528:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801052c:	f84e 3b04 	str.w	r3, [lr], #4
 8010530:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010534:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010538:	f8be 3000 	ldrh.w	r3, [lr]
 801053c:	fb09 330a 	mla	r3, r9, sl, r3
 8010540:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010544:	4562      	cmp	r2, ip
 8010546:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801054a:	d8e5      	bhi.n	8010518 <__multiply+0x10c>
 801054c:	9f01      	ldr	r7, [sp, #4]
 801054e:	51eb      	str	r3, [r5, r7]
 8010550:	3504      	adds	r5, #4
 8010552:	e799      	b.n	8010488 <__multiply+0x7c>
 8010554:	3e01      	subs	r6, #1
 8010556:	e79b      	b.n	8010490 <__multiply+0x84>
 8010558:	08011330 	.word	0x08011330
 801055c:	08011341 	.word	0x08011341

08010560 <__pow5mult>:
 8010560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010564:	4615      	mov	r5, r2
 8010566:	f012 0203 	ands.w	r2, r2, #3
 801056a:	4607      	mov	r7, r0
 801056c:	460e      	mov	r6, r1
 801056e:	d007      	beq.n	8010580 <__pow5mult+0x20>
 8010570:	4c25      	ldr	r4, [pc, #148]	@ (8010608 <__pow5mult+0xa8>)
 8010572:	3a01      	subs	r2, #1
 8010574:	2300      	movs	r3, #0
 8010576:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801057a:	f7ff fe9f 	bl	80102bc <__multadd>
 801057e:	4606      	mov	r6, r0
 8010580:	10ad      	asrs	r5, r5, #2
 8010582:	d03d      	beq.n	8010600 <__pow5mult+0xa0>
 8010584:	69fc      	ldr	r4, [r7, #28]
 8010586:	b97c      	cbnz	r4, 80105a8 <__pow5mult+0x48>
 8010588:	2010      	movs	r0, #16
 801058a:	f7ff fd7f 	bl	801008c <malloc>
 801058e:	4602      	mov	r2, r0
 8010590:	61f8      	str	r0, [r7, #28]
 8010592:	b928      	cbnz	r0, 80105a0 <__pow5mult+0x40>
 8010594:	4b1d      	ldr	r3, [pc, #116]	@ (801060c <__pow5mult+0xac>)
 8010596:	481e      	ldr	r0, [pc, #120]	@ (8010610 <__pow5mult+0xb0>)
 8010598:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801059c:	f000 fc74 	bl	8010e88 <__assert_func>
 80105a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80105a4:	6004      	str	r4, [r0, #0]
 80105a6:	60c4      	str	r4, [r0, #12]
 80105a8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80105ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80105b0:	b94c      	cbnz	r4, 80105c6 <__pow5mult+0x66>
 80105b2:	f240 2171 	movw	r1, #625	@ 0x271
 80105b6:	4638      	mov	r0, r7
 80105b8:	f7ff ff12 	bl	80103e0 <__i2b>
 80105bc:	2300      	movs	r3, #0
 80105be:	f8c8 0008 	str.w	r0, [r8, #8]
 80105c2:	4604      	mov	r4, r0
 80105c4:	6003      	str	r3, [r0, #0]
 80105c6:	f04f 0900 	mov.w	r9, #0
 80105ca:	07eb      	lsls	r3, r5, #31
 80105cc:	d50a      	bpl.n	80105e4 <__pow5mult+0x84>
 80105ce:	4631      	mov	r1, r6
 80105d0:	4622      	mov	r2, r4
 80105d2:	4638      	mov	r0, r7
 80105d4:	f7ff ff1a 	bl	801040c <__multiply>
 80105d8:	4631      	mov	r1, r6
 80105da:	4680      	mov	r8, r0
 80105dc:	4638      	mov	r0, r7
 80105de:	f7ff fe4b 	bl	8010278 <_Bfree>
 80105e2:	4646      	mov	r6, r8
 80105e4:	106d      	asrs	r5, r5, #1
 80105e6:	d00b      	beq.n	8010600 <__pow5mult+0xa0>
 80105e8:	6820      	ldr	r0, [r4, #0]
 80105ea:	b938      	cbnz	r0, 80105fc <__pow5mult+0x9c>
 80105ec:	4622      	mov	r2, r4
 80105ee:	4621      	mov	r1, r4
 80105f0:	4638      	mov	r0, r7
 80105f2:	f7ff ff0b 	bl	801040c <__multiply>
 80105f6:	6020      	str	r0, [r4, #0]
 80105f8:	f8c0 9000 	str.w	r9, [r0]
 80105fc:	4604      	mov	r4, r0
 80105fe:	e7e4      	b.n	80105ca <__pow5mult+0x6a>
 8010600:	4630      	mov	r0, r6
 8010602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010606:	bf00      	nop
 8010608:	0801139c 	.word	0x0801139c
 801060c:	080112c1 	.word	0x080112c1
 8010610:	08011341 	.word	0x08011341

08010614 <__lshift>:
 8010614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010618:	460c      	mov	r4, r1
 801061a:	6849      	ldr	r1, [r1, #4]
 801061c:	6923      	ldr	r3, [r4, #16]
 801061e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010622:	68a3      	ldr	r3, [r4, #8]
 8010624:	4607      	mov	r7, r0
 8010626:	4691      	mov	r9, r2
 8010628:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801062c:	f108 0601 	add.w	r6, r8, #1
 8010630:	42b3      	cmp	r3, r6
 8010632:	db0b      	blt.n	801064c <__lshift+0x38>
 8010634:	4638      	mov	r0, r7
 8010636:	f7ff fddf 	bl	80101f8 <_Balloc>
 801063a:	4605      	mov	r5, r0
 801063c:	b948      	cbnz	r0, 8010652 <__lshift+0x3e>
 801063e:	4602      	mov	r2, r0
 8010640:	4b28      	ldr	r3, [pc, #160]	@ (80106e4 <__lshift+0xd0>)
 8010642:	4829      	ldr	r0, [pc, #164]	@ (80106e8 <__lshift+0xd4>)
 8010644:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010648:	f000 fc1e 	bl	8010e88 <__assert_func>
 801064c:	3101      	adds	r1, #1
 801064e:	005b      	lsls	r3, r3, #1
 8010650:	e7ee      	b.n	8010630 <__lshift+0x1c>
 8010652:	2300      	movs	r3, #0
 8010654:	f100 0114 	add.w	r1, r0, #20
 8010658:	f100 0210 	add.w	r2, r0, #16
 801065c:	4618      	mov	r0, r3
 801065e:	4553      	cmp	r3, sl
 8010660:	db33      	blt.n	80106ca <__lshift+0xb6>
 8010662:	6920      	ldr	r0, [r4, #16]
 8010664:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010668:	f104 0314 	add.w	r3, r4, #20
 801066c:	f019 091f 	ands.w	r9, r9, #31
 8010670:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010674:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010678:	d02b      	beq.n	80106d2 <__lshift+0xbe>
 801067a:	f1c9 0e20 	rsb	lr, r9, #32
 801067e:	468a      	mov	sl, r1
 8010680:	2200      	movs	r2, #0
 8010682:	6818      	ldr	r0, [r3, #0]
 8010684:	fa00 f009 	lsl.w	r0, r0, r9
 8010688:	4310      	orrs	r0, r2
 801068a:	f84a 0b04 	str.w	r0, [sl], #4
 801068e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010692:	459c      	cmp	ip, r3
 8010694:	fa22 f20e 	lsr.w	r2, r2, lr
 8010698:	d8f3      	bhi.n	8010682 <__lshift+0x6e>
 801069a:	ebac 0304 	sub.w	r3, ip, r4
 801069e:	3b15      	subs	r3, #21
 80106a0:	f023 0303 	bic.w	r3, r3, #3
 80106a4:	3304      	adds	r3, #4
 80106a6:	f104 0015 	add.w	r0, r4, #21
 80106aa:	4584      	cmp	ip, r0
 80106ac:	bf38      	it	cc
 80106ae:	2304      	movcc	r3, #4
 80106b0:	50ca      	str	r2, [r1, r3]
 80106b2:	b10a      	cbz	r2, 80106b8 <__lshift+0xa4>
 80106b4:	f108 0602 	add.w	r6, r8, #2
 80106b8:	3e01      	subs	r6, #1
 80106ba:	4638      	mov	r0, r7
 80106bc:	612e      	str	r6, [r5, #16]
 80106be:	4621      	mov	r1, r4
 80106c0:	f7ff fdda 	bl	8010278 <_Bfree>
 80106c4:	4628      	mov	r0, r5
 80106c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80106ce:	3301      	adds	r3, #1
 80106d0:	e7c5      	b.n	801065e <__lshift+0x4a>
 80106d2:	3904      	subs	r1, #4
 80106d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80106d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80106dc:	459c      	cmp	ip, r3
 80106de:	d8f9      	bhi.n	80106d4 <__lshift+0xc0>
 80106e0:	e7ea      	b.n	80106b8 <__lshift+0xa4>
 80106e2:	bf00      	nop
 80106e4:	08011330 	.word	0x08011330
 80106e8:	08011341 	.word	0x08011341

080106ec <__mcmp>:
 80106ec:	690a      	ldr	r2, [r1, #16]
 80106ee:	4603      	mov	r3, r0
 80106f0:	6900      	ldr	r0, [r0, #16]
 80106f2:	1a80      	subs	r0, r0, r2
 80106f4:	b530      	push	{r4, r5, lr}
 80106f6:	d10e      	bne.n	8010716 <__mcmp+0x2a>
 80106f8:	3314      	adds	r3, #20
 80106fa:	3114      	adds	r1, #20
 80106fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010700:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010704:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010708:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801070c:	4295      	cmp	r5, r2
 801070e:	d003      	beq.n	8010718 <__mcmp+0x2c>
 8010710:	d205      	bcs.n	801071e <__mcmp+0x32>
 8010712:	f04f 30ff 	mov.w	r0, #4294967295
 8010716:	bd30      	pop	{r4, r5, pc}
 8010718:	42a3      	cmp	r3, r4
 801071a:	d3f3      	bcc.n	8010704 <__mcmp+0x18>
 801071c:	e7fb      	b.n	8010716 <__mcmp+0x2a>
 801071e:	2001      	movs	r0, #1
 8010720:	e7f9      	b.n	8010716 <__mcmp+0x2a>
	...

08010724 <__mdiff>:
 8010724:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010728:	4689      	mov	r9, r1
 801072a:	4606      	mov	r6, r0
 801072c:	4611      	mov	r1, r2
 801072e:	4648      	mov	r0, r9
 8010730:	4614      	mov	r4, r2
 8010732:	f7ff ffdb 	bl	80106ec <__mcmp>
 8010736:	1e05      	subs	r5, r0, #0
 8010738:	d112      	bne.n	8010760 <__mdiff+0x3c>
 801073a:	4629      	mov	r1, r5
 801073c:	4630      	mov	r0, r6
 801073e:	f7ff fd5b 	bl	80101f8 <_Balloc>
 8010742:	4602      	mov	r2, r0
 8010744:	b928      	cbnz	r0, 8010752 <__mdiff+0x2e>
 8010746:	4b3f      	ldr	r3, [pc, #252]	@ (8010844 <__mdiff+0x120>)
 8010748:	f240 2137 	movw	r1, #567	@ 0x237
 801074c:	483e      	ldr	r0, [pc, #248]	@ (8010848 <__mdiff+0x124>)
 801074e:	f000 fb9b 	bl	8010e88 <__assert_func>
 8010752:	2301      	movs	r3, #1
 8010754:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010758:	4610      	mov	r0, r2
 801075a:	b003      	add	sp, #12
 801075c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010760:	bfbc      	itt	lt
 8010762:	464b      	movlt	r3, r9
 8010764:	46a1      	movlt	r9, r4
 8010766:	4630      	mov	r0, r6
 8010768:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801076c:	bfba      	itte	lt
 801076e:	461c      	movlt	r4, r3
 8010770:	2501      	movlt	r5, #1
 8010772:	2500      	movge	r5, #0
 8010774:	f7ff fd40 	bl	80101f8 <_Balloc>
 8010778:	4602      	mov	r2, r0
 801077a:	b918      	cbnz	r0, 8010784 <__mdiff+0x60>
 801077c:	4b31      	ldr	r3, [pc, #196]	@ (8010844 <__mdiff+0x120>)
 801077e:	f240 2145 	movw	r1, #581	@ 0x245
 8010782:	e7e3      	b.n	801074c <__mdiff+0x28>
 8010784:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010788:	6926      	ldr	r6, [r4, #16]
 801078a:	60c5      	str	r5, [r0, #12]
 801078c:	f109 0310 	add.w	r3, r9, #16
 8010790:	f109 0514 	add.w	r5, r9, #20
 8010794:	f104 0e14 	add.w	lr, r4, #20
 8010798:	f100 0b14 	add.w	fp, r0, #20
 801079c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80107a0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80107a4:	9301      	str	r3, [sp, #4]
 80107a6:	46d9      	mov	r9, fp
 80107a8:	f04f 0c00 	mov.w	ip, #0
 80107ac:	9b01      	ldr	r3, [sp, #4]
 80107ae:	f85e 0b04 	ldr.w	r0, [lr], #4
 80107b2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80107b6:	9301      	str	r3, [sp, #4]
 80107b8:	fa1f f38a 	uxth.w	r3, sl
 80107bc:	4619      	mov	r1, r3
 80107be:	b283      	uxth	r3, r0
 80107c0:	1acb      	subs	r3, r1, r3
 80107c2:	0c00      	lsrs	r0, r0, #16
 80107c4:	4463      	add	r3, ip
 80107c6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80107ca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80107ce:	b29b      	uxth	r3, r3
 80107d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80107d4:	4576      	cmp	r6, lr
 80107d6:	f849 3b04 	str.w	r3, [r9], #4
 80107da:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80107de:	d8e5      	bhi.n	80107ac <__mdiff+0x88>
 80107e0:	1b33      	subs	r3, r6, r4
 80107e2:	3b15      	subs	r3, #21
 80107e4:	f023 0303 	bic.w	r3, r3, #3
 80107e8:	3415      	adds	r4, #21
 80107ea:	3304      	adds	r3, #4
 80107ec:	42a6      	cmp	r6, r4
 80107ee:	bf38      	it	cc
 80107f0:	2304      	movcc	r3, #4
 80107f2:	441d      	add	r5, r3
 80107f4:	445b      	add	r3, fp
 80107f6:	461e      	mov	r6, r3
 80107f8:	462c      	mov	r4, r5
 80107fa:	4544      	cmp	r4, r8
 80107fc:	d30e      	bcc.n	801081c <__mdiff+0xf8>
 80107fe:	f108 0103 	add.w	r1, r8, #3
 8010802:	1b49      	subs	r1, r1, r5
 8010804:	f021 0103 	bic.w	r1, r1, #3
 8010808:	3d03      	subs	r5, #3
 801080a:	45a8      	cmp	r8, r5
 801080c:	bf38      	it	cc
 801080e:	2100      	movcc	r1, #0
 8010810:	440b      	add	r3, r1
 8010812:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010816:	b191      	cbz	r1, 801083e <__mdiff+0x11a>
 8010818:	6117      	str	r7, [r2, #16]
 801081a:	e79d      	b.n	8010758 <__mdiff+0x34>
 801081c:	f854 1b04 	ldr.w	r1, [r4], #4
 8010820:	46e6      	mov	lr, ip
 8010822:	0c08      	lsrs	r0, r1, #16
 8010824:	fa1c fc81 	uxtah	ip, ip, r1
 8010828:	4471      	add	r1, lr
 801082a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801082e:	b289      	uxth	r1, r1
 8010830:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010834:	f846 1b04 	str.w	r1, [r6], #4
 8010838:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801083c:	e7dd      	b.n	80107fa <__mdiff+0xd6>
 801083e:	3f01      	subs	r7, #1
 8010840:	e7e7      	b.n	8010812 <__mdiff+0xee>
 8010842:	bf00      	nop
 8010844:	08011330 	.word	0x08011330
 8010848:	08011341 	.word	0x08011341

0801084c <__d2b>:
 801084c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010850:	460f      	mov	r7, r1
 8010852:	2101      	movs	r1, #1
 8010854:	ec59 8b10 	vmov	r8, r9, d0
 8010858:	4616      	mov	r6, r2
 801085a:	f7ff fccd 	bl	80101f8 <_Balloc>
 801085e:	4604      	mov	r4, r0
 8010860:	b930      	cbnz	r0, 8010870 <__d2b+0x24>
 8010862:	4602      	mov	r2, r0
 8010864:	4b23      	ldr	r3, [pc, #140]	@ (80108f4 <__d2b+0xa8>)
 8010866:	4824      	ldr	r0, [pc, #144]	@ (80108f8 <__d2b+0xac>)
 8010868:	f240 310f 	movw	r1, #783	@ 0x30f
 801086c:	f000 fb0c 	bl	8010e88 <__assert_func>
 8010870:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010874:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010878:	b10d      	cbz	r5, 801087e <__d2b+0x32>
 801087a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801087e:	9301      	str	r3, [sp, #4]
 8010880:	f1b8 0300 	subs.w	r3, r8, #0
 8010884:	d023      	beq.n	80108ce <__d2b+0x82>
 8010886:	4668      	mov	r0, sp
 8010888:	9300      	str	r3, [sp, #0]
 801088a:	f7ff fd7c 	bl	8010386 <__lo0bits>
 801088e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010892:	b1d0      	cbz	r0, 80108ca <__d2b+0x7e>
 8010894:	f1c0 0320 	rsb	r3, r0, #32
 8010898:	fa02 f303 	lsl.w	r3, r2, r3
 801089c:	430b      	orrs	r3, r1
 801089e:	40c2      	lsrs	r2, r0
 80108a0:	6163      	str	r3, [r4, #20]
 80108a2:	9201      	str	r2, [sp, #4]
 80108a4:	9b01      	ldr	r3, [sp, #4]
 80108a6:	61a3      	str	r3, [r4, #24]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	bf0c      	ite	eq
 80108ac:	2201      	moveq	r2, #1
 80108ae:	2202      	movne	r2, #2
 80108b0:	6122      	str	r2, [r4, #16]
 80108b2:	b1a5      	cbz	r5, 80108de <__d2b+0x92>
 80108b4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80108b8:	4405      	add	r5, r0
 80108ba:	603d      	str	r5, [r7, #0]
 80108bc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80108c0:	6030      	str	r0, [r6, #0]
 80108c2:	4620      	mov	r0, r4
 80108c4:	b003      	add	sp, #12
 80108c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80108ca:	6161      	str	r1, [r4, #20]
 80108cc:	e7ea      	b.n	80108a4 <__d2b+0x58>
 80108ce:	a801      	add	r0, sp, #4
 80108d0:	f7ff fd59 	bl	8010386 <__lo0bits>
 80108d4:	9b01      	ldr	r3, [sp, #4]
 80108d6:	6163      	str	r3, [r4, #20]
 80108d8:	3020      	adds	r0, #32
 80108da:	2201      	movs	r2, #1
 80108dc:	e7e8      	b.n	80108b0 <__d2b+0x64>
 80108de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80108e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80108e6:	6038      	str	r0, [r7, #0]
 80108e8:	6918      	ldr	r0, [r3, #16]
 80108ea:	f7ff fd2d 	bl	8010348 <__hi0bits>
 80108ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80108f2:	e7e5      	b.n	80108c0 <__d2b+0x74>
 80108f4:	08011330 	.word	0x08011330
 80108f8:	08011341 	.word	0x08011341

080108fc <__sfputc_r>:
 80108fc:	6893      	ldr	r3, [r2, #8]
 80108fe:	3b01      	subs	r3, #1
 8010900:	2b00      	cmp	r3, #0
 8010902:	b410      	push	{r4}
 8010904:	6093      	str	r3, [r2, #8]
 8010906:	da08      	bge.n	801091a <__sfputc_r+0x1e>
 8010908:	6994      	ldr	r4, [r2, #24]
 801090a:	42a3      	cmp	r3, r4
 801090c:	db01      	blt.n	8010912 <__sfputc_r+0x16>
 801090e:	290a      	cmp	r1, #10
 8010910:	d103      	bne.n	801091a <__sfputc_r+0x1e>
 8010912:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010916:	f000 ba13 	b.w	8010d40 <__swbuf_r>
 801091a:	6813      	ldr	r3, [r2, #0]
 801091c:	1c58      	adds	r0, r3, #1
 801091e:	6010      	str	r0, [r2, #0]
 8010920:	7019      	strb	r1, [r3, #0]
 8010922:	4608      	mov	r0, r1
 8010924:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010928:	4770      	bx	lr

0801092a <__sfputs_r>:
 801092a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801092c:	4606      	mov	r6, r0
 801092e:	460f      	mov	r7, r1
 8010930:	4614      	mov	r4, r2
 8010932:	18d5      	adds	r5, r2, r3
 8010934:	42ac      	cmp	r4, r5
 8010936:	d101      	bne.n	801093c <__sfputs_r+0x12>
 8010938:	2000      	movs	r0, #0
 801093a:	e007      	b.n	801094c <__sfputs_r+0x22>
 801093c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010940:	463a      	mov	r2, r7
 8010942:	4630      	mov	r0, r6
 8010944:	f7ff ffda 	bl	80108fc <__sfputc_r>
 8010948:	1c43      	adds	r3, r0, #1
 801094a:	d1f3      	bne.n	8010934 <__sfputs_r+0xa>
 801094c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010950 <_vfiprintf_r>:
 8010950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010954:	460d      	mov	r5, r1
 8010956:	b09d      	sub	sp, #116	@ 0x74
 8010958:	4614      	mov	r4, r2
 801095a:	4698      	mov	r8, r3
 801095c:	4606      	mov	r6, r0
 801095e:	b118      	cbz	r0, 8010968 <_vfiprintf_r+0x18>
 8010960:	6a03      	ldr	r3, [r0, #32]
 8010962:	b90b      	cbnz	r3, 8010968 <_vfiprintf_r+0x18>
 8010964:	f7fe fbd8 	bl	800f118 <__sinit>
 8010968:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801096a:	07d9      	lsls	r1, r3, #31
 801096c:	d405      	bmi.n	801097a <_vfiprintf_r+0x2a>
 801096e:	89ab      	ldrh	r3, [r5, #12]
 8010970:	059a      	lsls	r2, r3, #22
 8010972:	d402      	bmi.n	801097a <_vfiprintf_r+0x2a>
 8010974:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010976:	f7fe fce0 	bl	800f33a <__retarget_lock_acquire_recursive>
 801097a:	89ab      	ldrh	r3, [r5, #12]
 801097c:	071b      	lsls	r3, r3, #28
 801097e:	d501      	bpl.n	8010984 <_vfiprintf_r+0x34>
 8010980:	692b      	ldr	r3, [r5, #16]
 8010982:	b99b      	cbnz	r3, 80109ac <_vfiprintf_r+0x5c>
 8010984:	4629      	mov	r1, r5
 8010986:	4630      	mov	r0, r6
 8010988:	f000 fa18 	bl	8010dbc <__swsetup_r>
 801098c:	b170      	cbz	r0, 80109ac <_vfiprintf_r+0x5c>
 801098e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010990:	07dc      	lsls	r4, r3, #31
 8010992:	d504      	bpl.n	801099e <_vfiprintf_r+0x4e>
 8010994:	f04f 30ff 	mov.w	r0, #4294967295
 8010998:	b01d      	add	sp, #116	@ 0x74
 801099a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801099e:	89ab      	ldrh	r3, [r5, #12]
 80109a0:	0598      	lsls	r0, r3, #22
 80109a2:	d4f7      	bmi.n	8010994 <_vfiprintf_r+0x44>
 80109a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80109a6:	f7fe fcc9 	bl	800f33c <__retarget_lock_release_recursive>
 80109aa:	e7f3      	b.n	8010994 <_vfiprintf_r+0x44>
 80109ac:	2300      	movs	r3, #0
 80109ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80109b0:	2320      	movs	r3, #32
 80109b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80109b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80109ba:	2330      	movs	r3, #48	@ 0x30
 80109bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010b6c <_vfiprintf_r+0x21c>
 80109c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80109c4:	f04f 0901 	mov.w	r9, #1
 80109c8:	4623      	mov	r3, r4
 80109ca:	469a      	mov	sl, r3
 80109cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80109d0:	b10a      	cbz	r2, 80109d6 <_vfiprintf_r+0x86>
 80109d2:	2a25      	cmp	r2, #37	@ 0x25
 80109d4:	d1f9      	bne.n	80109ca <_vfiprintf_r+0x7a>
 80109d6:	ebba 0b04 	subs.w	fp, sl, r4
 80109da:	d00b      	beq.n	80109f4 <_vfiprintf_r+0xa4>
 80109dc:	465b      	mov	r3, fp
 80109de:	4622      	mov	r2, r4
 80109e0:	4629      	mov	r1, r5
 80109e2:	4630      	mov	r0, r6
 80109e4:	f7ff ffa1 	bl	801092a <__sfputs_r>
 80109e8:	3001      	adds	r0, #1
 80109ea:	f000 80a7 	beq.w	8010b3c <_vfiprintf_r+0x1ec>
 80109ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80109f0:	445a      	add	r2, fp
 80109f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80109f4:	f89a 3000 	ldrb.w	r3, [sl]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	f000 809f 	beq.w	8010b3c <_vfiprintf_r+0x1ec>
 80109fe:	2300      	movs	r3, #0
 8010a00:	f04f 32ff 	mov.w	r2, #4294967295
 8010a04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010a08:	f10a 0a01 	add.w	sl, sl, #1
 8010a0c:	9304      	str	r3, [sp, #16]
 8010a0e:	9307      	str	r3, [sp, #28]
 8010a10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010a14:	931a      	str	r3, [sp, #104]	@ 0x68
 8010a16:	4654      	mov	r4, sl
 8010a18:	2205      	movs	r2, #5
 8010a1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a1e:	4853      	ldr	r0, [pc, #332]	@ (8010b6c <_vfiprintf_r+0x21c>)
 8010a20:	f7ef fbae 	bl	8000180 <memchr>
 8010a24:	9a04      	ldr	r2, [sp, #16]
 8010a26:	b9d8      	cbnz	r0, 8010a60 <_vfiprintf_r+0x110>
 8010a28:	06d1      	lsls	r1, r2, #27
 8010a2a:	bf44      	itt	mi
 8010a2c:	2320      	movmi	r3, #32
 8010a2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010a32:	0713      	lsls	r3, r2, #28
 8010a34:	bf44      	itt	mi
 8010a36:	232b      	movmi	r3, #43	@ 0x2b
 8010a38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010a3c:	f89a 3000 	ldrb.w	r3, [sl]
 8010a40:	2b2a      	cmp	r3, #42	@ 0x2a
 8010a42:	d015      	beq.n	8010a70 <_vfiprintf_r+0x120>
 8010a44:	9a07      	ldr	r2, [sp, #28]
 8010a46:	4654      	mov	r4, sl
 8010a48:	2000      	movs	r0, #0
 8010a4a:	f04f 0c0a 	mov.w	ip, #10
 8010a4e:	4621      	mov	r1, r4
 8010a50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010a54:	3b30      	subs	r3, #48	@ 0x30
 8010a56:	2b09      	cmp	r3, #9
 8010a58:	d94b      	bls.n	8010af2 <_vfiprintf_r+0x1a2>
 8010a5a:	b1b0      	cbz	r0, 8010a8a <_vfiprintf_r+0x13a>
 8010a5c:	9207      	str	r2, [sp, #28]
 8010a5e:	e014      	b.n	8010a8a <_vfiprintf_r+0x13a>
 8010a60:	eba0 0308 	sub.w	r3, r0, r8
 8010a64:	fa09 f303 	lsl.w	r3, r9, r3
 8010a68:	4313      	orrs	r3, r2
 8010a6a:	9304      	str	r3, [sp, #16]
 8010a6c:	46a2      	mov	sl, r4
 8010a6e:	e7d2      	b.n	8010a16 <_vfiprintf_r+0xc6>
 8010a70:	9b03      	ldr	r3, [sp, #12]
 8010a72:	1d19      	adds	r1, r3, #4
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	9103      	str	r1, [sp, #12]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	bfbb      	ittet	lt
 8010a7c:	425b      	neglt	r3, r3
 8010a7e:	f042 0202 	orrlt.w	r2, r2, #2
 8010a82:	9307      	strge	r3, [sp, #28]
 8010a84:	9307      	strlt	r3, [sp, #28]
 8010a86:	bfb8      	it	lt
 8010a88:	9204      	strlt	r2, [sp, #16]
 8010a8a:	7823      	ldrb	r3, [r4, #0]
 8010a8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8010a8e:	d10a      	bne.n	8010aa6 <_vfiprintf_r+0x156>
 8010a90:	7863      	ldrb	r3, [r4, #1]
 8010a92:	2b2a      	cmp	r3, #42	@ 0x2a
 8010a94:	d132      	bne.n	8010afc <_vfiprintf_r+0x1ac>
 8010a96:	9b03      	ldr	r3, [sp, #12]
 8010a98:	1d1a      	adds	r2, r3, #4
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	9203      	str	r2, [sp, #12]
 8010a9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010aa2:	3402      	adds	r4, #2
 8010aa4:	9305      	str	r3, [sp, #20]
 8010aa6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010b7c <_vfiprintf_r+0x22c>
 8010aaa:	7821      	ldrb	r1, [r4, #0]
 8010aac:	2203      	movs	r2, #3
 8010aae:	4650      	mov	r0, sl
 8010ab0:	f7ef fb66 	bl	8000180 <memchr>
 8010ab4:	b138      	cbz	r0, 8010ac6 <_vfiprintf_r+0x176>
 8010ab6:	9b04      	ldr	r3, [sp, #16]
 8010ab8:	eba0 000a 	sub.w	r0, r0, sl
 8010abc:	2240      	movs	r2, #64	@ 0x40
 8010abe:	4082      	lsls	r2, r0
 8010ac0:	4313      	orrs	r3, r2
 8010ac2:	3401      	adds	r4, #1
 8010ac4:	9304      	str	r3, [sp, #16]
 8010ac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010aca:	4829      	ldr	r0, [pc, #164]	@ (8010b70 <_vfiprintf_r+0x220>)
 8010acc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010ad0:	2206      	movs	r2, #6
 8010ad2:	f7ef fb55 	bl	8000180 <memchr>
 8010ad6:	2800      	cmp	r0, #0
 8010ad8:	d03f      	beq.n	8010b5a <_vfiprintf_r+0x20a>
 8010ada:	4b26      	ldr	r3, [pc, #152]	@ (8010b74 <_vfiprintf_r+0x224>)
 8010adc:	bb1b      	cbnz	r3, 8010b26 <_vfiprintf_r+0x1d6>
 8010ade:	9b03      	ldr	r3, [sp, #12]
 8010ae0:	3307      	adds	r3, #7
 8010ae2:	f023 0307 	bic.w	r3, r3, #7
 8010ae6:	3308      	adds	r3, #8
 8010ae8:	9303      	str	r3, [sp, #12]
 8010aea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010aec:	443b      	add	r3, r7
 8010aee:	9309      	str	r3, [sp, #36]	@ 0x24
 8010af0:	e76a      	b.n	80109c8 <_vfiprintf_r+0x78>
 8010af2:	fb0c 3202 	mla	r2, ip, r2, r3
 8010af6:	460c      	mov	r4, r1
 8010af8:	2001      	movs	r0, #1
 8010afa:	e7a8      	b.n	8010a4e <_vfiprintf_r+0xfe>
 8010afc:	2300      	movs	r3, #0
 8010afe:	3401      	adds	r4, #1
 8010b00:	9305      	str	r3, [sp, #20]
 8010b02:	4619      	mov	r1, r3
 8010b04:	f04f 0c0a 	mov.w	ip, #10
 8010b08:	4620      	mov	r0, r4
 8010b0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b0e:	3a30      	subs	r2, #48	@ 0x30
 8010b10:	2a09      	cmp	r2, #9
 8010b12:	d903      	bls.n	8010b1c <_vfiprintf_r+0x1cc>
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d0c6      	beq.n	8010aa6 <_vfiprintf_r+0x156>
 8010b18:	9105      	str	r1, [sp, #20]
 8010b1a:	e7c4      	b.n	8010aa6 <_vfiprintf_r+0x156>
 8010b1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010b20:	4604      	mov	r4, r0
 8010b22:	2301      	movs	r3, #1
 8010b24:	e7f0      	b.n	8010b08 <_vfiprintf_r+0x1b8>
 8010b26:	ab03      	add	r3, sp, #12
 8010b28:	9300      	str	r3, [sp, #0]
 8010b2a:	462a      	mov	r2, r5
 8010b2c:	4b12      	ldr	r3, [pc, #72]	@ (8010b78 <_vfiprintf_r+0x228>)
 8010b2e:	a904      	add	r1, sp, #16
 8010b30:	4630      	mov	r0, r6
 8010b32:	f7fd fead 	bl	800e890 <_printf_float>
 8010b36:	4607      	mov	r7, r0
 8010b38:	1c78      	adds	r0, r7, #1
 8010b3a:	d1d6      	bne.n	8010aea <_vfiprintf_r+0x19a>
 8010b3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010b3e:	07d9      	lsls	r1, r3, #31
 8010b40:	d405      	bmi.n	8010b4e <_vfiprintf_r+0x1fe>
 8010b42:	89ab      	ldrh	r3, [r5, #12]
 8010b44:	059a      	lsls	r2, r3, #22
 8010b46:	d402      	bmi.n	8010b4e <_vfiprintf_r+0x1fe>
 8010b48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010b4a:	f7fe fbf7 	bl	800f33c <__retarget_lock_release_recursive>
 8010b4e:	89ab      	ldrh	r3, [r5, #12]
 8010b50:	065b      	lsls	r3, r3, #25
 8010b52:	f53f af1f 	bmi.w	8010994 <_vfiprintf_r+0x44>
 8010b56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010b58:	e71e      	b.n	8010998 <_vfiprintf_r+0x48>
 8010b5a:	ab03      	add	r3, sp, #12
 8010b5c:	9300      	str	r3, [sp, #0]
 8010b5e:	462a      	mov	r2, r5
 8010b60:	4b05      	ldr	r3, [pc, #20]	@ (8010b78 <_vfiprintf_r+0x228>)
 8010b62:	a904      	add	r1, sp, #16
 8010b64:	4630      	mov	r0, r6
 8010b66:	f7fe f92b 	bl	800edc0 <_printf_i>
 8010b6a:	e7e4      	b.n	8010b36 <_vfiprintf_r+0x1e6>
 8010b6c:	08011498 	.word	0x08011498
 8010b70:	080114a2 	.word	0x080114a2
 8010b74:	0800e891 	.word	0x0800e891
 8010b78:	0801092b 	.word	0x0801092b
 8010b7c:	0801149e 	.word	0x0801149e

08010b80 <__sflush_r>:
 8010b80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b88:	0716      	lsls	r6, r2, #28
 8010b8a:	4605      	mov	r5, r0
 8010b8c:	460c      	mov	r4, r1
 8010b8e:	d454      	bmi.n	8010c3a <__sflush_r+0xba>
 8010b90:	684b      	ldr	r3, [r1, #4]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	dc02      	bgt.n	8010b9c <__sflush_r+0x1c>
 8010b96:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	dd48      	ble.n	8010c2e <__sflush_r+0xae>
 8010b9c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010b9e:	2e00      	cmp	r6, #0
 8010ba0:	d045      	beq.n	8010c2e <__sflush_r+0xae>
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010ba8:	682f      	ldr	r7, [r5, #0]
 8010baa:	6a21      	ldr	r1, [r4, #32]
 8010bac:	602b      	str	r3, [r5, #0]
 8010bae:	d030      	beq.n	8010c12 <__sflush_r+0x92>
 8010bb0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010bb2:	89a3      	ldrh	r3, [r4, #12]
 8010bb4:	0759      	lsls	r1, r3, #29
 8010bb6:	d505      	bpl.n	8010bc4 <__sflush_r+0x44>
 8010bb8:	6863      	ldr	r3, [r4, #4]
 8010bba:	1ad2      	subs	r2, r2, r3
 8010bbc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010bbe:	b10b      	cbz	r3, 8010bc4 <__sflush_r+0x44>
 8010bc0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010bc2:	1ad2      	subs	r2, r2, r3
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010bc8:	6a21      	ldr	r1, [r4, #32]
 8010bca:	4628      	mov	r0, r5
 8010bcc:	47b0      	blx	r6
 8010bce:	1c43      	adds	r3, r0, #1
 8010bd0:	89a3      	ldrh	r3, [r4, #12]
 8010bd2:	d106      	bne.n	8010be2 <__sflush_r+0x62>
 8010bd4:	6829      	ldr	r1, [r5, #0]
 8010bd6:	291d      	cmp	r1, #29
 8010bd8:	d82b      	bhi.n	8010c32 <__sflush_r+0xb2>
 8010bda:	4a2a      	ldr	r2, [pc, #168]	@ (8010c84 <__sflush_r+0x104>)
 8010bdc:	410a      	asrs	r2, r1
 8010bde:	07d6      	lsls	r6, r2, #31
 8010be0:	d427      	bmi.n	8010c32 <__sflush_r+0xb2>
 8010be2:	2200      	movs	r2, #0
 8010be4:	6062      	str	r2, [r4, #4]
 8010be6:	04d9      	lsls	r1, r3, #19
 8010be8:	6922      	ldr	r2, [r4, #16]
 8010bea:	6022      	str	r2, [r4, #0]
 8010bec:	d504      	bpl.n	8010bf8 <__sflush_r+0x78>
 8010bee:	1c42      	adds	r2, r0, #1
 8010bf0:	d101      	bne.n	8010bf6 <__sflush_r+0x76>
 8010bf2:	682b      	ldr	r3, [r5, #0]
 8010bf4:	b903      	cbnz	r3, 8010bf8 <__sflush_r+0x78>
 8010bf6:	6560      	str	r0, [r4, #84]	@ 0x54
 8010bf8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010bfa:	602f      	str	r7, [r5, #0]
 8010bfc:	b1b9      	cbz	r1, 8010c2e <__sflush_r+0xae>
 8010bfe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010c02:	4299      	cmp	r1, r3
 8010c04:	d002      	beq.n	8010c0c <__sflush_r+0x8c>
 8010c06:	4628      	mov	r0, r5
 8010c08:	f7ff f9f6 	bl	800fff8 <_free_r>
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	6363      	str	r3, [r4, #52]	@ 0x34
 8010c10:	e00d      	b.n	8010c2e <__sflush_r+0xae>
 8010c12:	2301      	movs	r3, #1
 8010c14:	4628      	mov	r0, r5
 8010c16:	47b0      	blx	r6
 8010c18:	4602      	mov	r2, r0
 8010c1a:	1c50      	adds	r0, r2, #1
 8010c1c:	d1c9      	bne.n	8010bb2 <__sflush_r+0x32>
 8010c1e:	682b      	ldr	r3, [r5, #0]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d0c6      	beq.n	8010bb2 <__sflush_r+0x32>
 8010c24:	2b1d      	cmp	r3, #29
 8010c26:	d001      	beq.n	8010c2c <__sflush_r+0xac>
 8010c28:	2b16      	cmp	r3, #22
 8010c2a:	d11e      	bne.n	8010c6a <__sflush_r+0xea>
 8010c2c:	602f      	str	r7, [r5, #0]
 8010c2e:	2000      	movs	r0, #0
 8010c30:	e022      	b.n	8010c78 <__sflush_r+0xf8>
 8010c32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c36:	b21b      	sxth	r3, r3
 8010c38:	e01b      	b.n	8010c72 <__sflush_r+0xf2>
 8010c3a:	690f      	ldr	r7, [r1, #16]
 8010c3c:	2f00      	cmp	r7, #0
 8010c3e:	d0f6      	beq.n	8010c2e <__sflush_r+0xae>
 8010c40:	0793      	lsls	r3, r2, #30
 8010c42:	680e      	ldr	r6, [r1, #0]
 8010c44:	bf08      	it	eq
 8010c46:	694b      	ldreq	r3, [r1, #20]
 8010c48:	600f      	str	r7, [r1, #0]
 8010c4a:	bf18      	it	ne
 8010c4c:	2300      	movne	r3, #0
 8010c4e:	eba6 0807 	sub.w	r8, r6, r7
 8010c52:	608b      	str	r3, [r1, #8]
 8010c54:	f1b8 0f00 	cmp.w	r8, #0
 8010c58:	dde9      	ble.n	8010c2e <__sflush_r+0xae>
 8010c5a:	6a21      	ldr	r1, [r4, #32]
 8010c5c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010c5e:	4643      	mov	r3, r8
 8010c60:	463a      	mov	r2, r7
 8010c62:	4628      	mov	r0, r5
 8010c64:	47b0      	blx	r6
 8010c66:	2800      	cmp	r0, #0
 8010c68:	dc08      	bgt.n	8010c7c <__sflush_r+0xfc>
 8010c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c72:	81a3      	strh	r3, [r4, #12]
 8010c74:	f04f 30ff 	mov.w	r0, #4294967295
 8010c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c7c:	4407      	add	r7, r0
 8010c7e:	eba8 0800 	sub.w	r8, r8, r0
 8010c82:	e7e7      	b.n	8010c54 <__sflush_r+0xd4>
 8010c84:	dfbffffe 	.word	0xdfbffffe

08010c88 <_fflush_r>:
 8010c88:	b538      	push	{r3, r4, r5, lr}
 8010c8a:	690b      	ldr	r3, [r1, #16]
 8010c8c:	4605      	mov	r5, r0
 8010c8e:	460c      	mov	r4, r1
 8010c90:	b913      	cbnz	r3, 8010c98 <_fflush_r+0x10>
 8010c92:	2500      	movs	r5, #0
 8010c94:	4628      	mov	r0, r5
 8010c96:	bd38      	pop	{r3, r4, r5, pc}
 8010c98:	b118      	cbz	r0, 8010ca2 <_fflush_r+0x1a>
 8010c9a:	6a03      	ldr	r3, [r0, #32]
 8010c9c:	b90b      	cbnz	r3, 8010ca2 <_fflush_r+0x1a>
 8010c9e:	f7fe fa3b 	bl	800f118 <__sinit>
 8010ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d0f3      	beq.n	8010c92 <_fflush_r+0xa>
 8010caa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010cac:	07d0      	lsls	r0, r2, #31
 8010cae:	d404      	bmi.n	8010cba <_fflush_r+0x32>
 8010cb0:	0599      	lsls	r1, r3, #22
 8010cb2:	d402      	bmi.n	8010cba <_fflush_r+0x32>
 8010cb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010cb6:	f7fe fb40 	bl	800f33a <__retarget_lock_acquire_recursive>
 8010cba:	4628      	mov	r0, r5
 8010cbc:	4621      	mov	r1, r4
 8010cbe:	f7ff ff5f 	bl	8010b80 <__sflush_r>
 8010cc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010cc4:	07da      	lsls	r2, r3, #31
 8010cc6:	4605      	mov	r5, r0
 8010cc8:	d4e4      	bmi.n	8010c94 <_fflush_r+0xc>
 8010cca:	89a3      	ldrh	r3, [r4, #12]
 8010ccc:	059b      	lsls	r3, r3, #22
 8010cce:	d4e1      	bmi.n	8010c94 <_fflush_r+0xc>
 8010cd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010cd2:	f7fe fb33 	bl	800f33c <__retarget_lock_release_recursive>
 8010cd6:	e7dd      	b.n	8010c94 <_fflush_r+0xc>

08010cd8 <_putc_r>:
 8010cd8:	b570      	push	{r4, r5, r6, lr}
 8010cda:	460d      	mov	r5, r1
 8010cdc:	4614      	mov	r4, r2
 8010cde:	4606      	mov	r6, r0
 8010ce0:	b118      	cbz	r0, 8010cea <_putc_r+0x12>
 8010ce2:	6a03      	ldr	r3, [r0, #32]
 8010ce4:	b90b      	cbnz	r3, 8010cea <_putc_r+0x12>
 8010ce6:	f7fe fa17 	bl	800f118 <__sinit>
 8010cea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010cec:	07d8      	lsls	r0, r3, #31
 8010cee:	d405      	bmi.n	8010cfc <_putc_r+0x24>
 8010cf0:	89a3      	ldrh	r3, [r4, #12]
 8010cf2:	0599      	lsls	r1, r3, #22
 8010cf4:	d402      	bmi.n	8010cfc <_putc_r+0x24>
 8010cf6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010cf8:	f7fe fb1f 	bl	800f33a <__retarget_lock_acquire_recursive>
 8010cfc:	68a3      	ldr	r3, [r4, #8]
 8010cfe:	3b01      	subs	r3, #1
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	60a3      	str	r3, [r4, #8]
 8010d04:	da05      	bge.n	8010d12 <_putc_r+0x3a>
 8010d06:	69a2      	ldr	r2, [r4, #24]
 8010d08:	4293      	cmp	r3, r2
 8010d0a:	db12      	blt.n	8010d32 <_putc_r+0x5a>
 8010d0c:	b2eb      	uxtb	r3, r5
 8010d0e:	2b0a      	cmp	r3, #10
 8010d10:	d00f      	beq.n	8010d32 <_putc_r+0x5a>
 8010d12:	6823      	ldr	r3, [r4, #0]
 8010d14:	1c5a      	adds	r2, r3, #1
 8010d16:	6022      	str	r2, [r4, #0]
 8010d18:	701d      	strb	r5, [r3, #0]
 8010d1a:	b2ed      	uxtb	r5, r5
 8010d1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010d1e:	07da      	lsls	r2, r3, #31
 8010d20:	d405      	bmi.n	8010d2e <_putc_r+0x56>
 8010d22:	89a3      	ldrh	r3, [r4, #12]
 8010d24:	059b      	lsls	r3, r3, #22
 8010d26:	d402      	bmi.n	8010d2e <_putc_r+0x56>
 8010d28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010d2a:	f7fe fb07 	bl	800f33c <__retarget_lock_release_recursive>
 8010d2e:	4628      	mov	r0, r5
 8010d30:	bd70      	pop	{r4, r5, r6, pc}
 8010d32:	4629      	mov	r1, r5
 8010d34:	4622      	mov	r2, r4
 8010d36:	4630      	mov	r0, r6
 8010d38:	f000 f802 	bl	8010d40 <__swbuf_r>
 8010d3c:	4605      	mov	r5, r0
 8010d3e:	e7ed      	b.n	8010d1c <_putc_r+0x44>

08010d40 <__swbuf_r>:
 8010d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d42:	460e      	mov	r6, r1
 8010d44:	4614      	mov	r4, r2
 8010d46:	4605      	mov	r5, r0
 8010d48:	b118      	cbz	r0, 8010d52 <__swbuf_r+0x12>
 8010d4a:	6a03      	ldr	r3, [r0, #32]
 8010d4c:	b90b      	cbnz	r3, 8010d52 <__swbuf_r+0x12>
 8010d4e:	f7fe f9e3 	bl	800f118 <__sinit>
 8010d52:	69a3      	ldr	r3, [r4, #24]
 8010d54:	60a3      	str	r3, [r4, #8]
 8010d56:	89a3      	ldrh	r3, [r4, #12]
 8010d58:	071a      	lsls	r2, r3, #28
 8010d5a:	d501      	bpl.n	8010d60 <__swbuf_r+0x20>
 8010d5c:	6923      	ldr	r3, [r4, #16]
 8010d5e:	b943      	cbnz	r3, 8010d72 <__swbuf_r+0x32>
 8010d60:	4621      	mov	r1, r4
 8010d62:	4628      	mov	r0, r5
 8010d64:	f000 f82a 	bl	8010dbc <__swsetup_r>
 8010d68:	b118      	cbz	r0, 8010d72 <__swbuf_r+0x32>
 8010d6a:	f04f 37ff 	mov.w	r7, #4294967295
 8010d6e:	4638      	mov	r0, r7
 8010d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d72:	6823      	ldr	r3, [r4, #0]
 8010d74:	6922      	ldr	r2, [r4, #16]
 8010d76:	1a98      	subs	r0, r3, r2
 8010d78:	6963      	ldr	r3, [r4, #20]
 8010d7a:	b2f6      	uxtb	r6, r6
 8010d7c:	4283      	cmp	r3, r0
 8010d7e:	4637      	mov	r7, r6
 8010d80:	dc05      	bgt.n	8010d8e <__swbuf_r+0x4e>
 8010d82:	4621      	mov	r1, r4
 8010d84:	4628      	mov	r0, r5
 8010d86:	f7ff ff7f 	bl	8010c88 <_fflush_r>
 8010d8a:	2800      	cmp	r0, #0
 8010d8c:	d1ed      	bne.n	8010d6a <__swbuf_r+0x2a>
 8010d8e:	68a3      	ldr	r3, [r4, #8]
 8010d90:	3b01      	subs	r3, #1
 8010d92:	60a3      	str	r3, [r4, #8]
 8010d94:	6823      	ldr	r3, [r4, #0]
 8010d96:	1c5a      	adds	r2, r3, #1
 8010d98:	6022      	str	r2, [r4, #0]
 8010d9a:	701e      	strb	r6, [r3, #0]
 8010d9c:	6962      	ldr	r2, [r4, #20]
 8010d9e:	1c43      	adds	r3, r0, #1
 8010da0:	429a      	cmp	r2, r3
 8010da2:	d004      	beq.n	8010dae <__swbuf_r+0x6e>
 8010da4:	89a3      	ldrh	r3, [r4, #12]
 8010da6:	07db      	lsls	r3, r3, #31
 8010da8:	d5e1      	bpl.n	8010d6e <__swbuf_r+0x2e>
 8010daa:	2e0a      	cmp	r6, #10
 8010dac:	d1df      	bne.n	8010d6e <__swbuf_r+0x2e>
 8010dae:	4621      	mov	r1, r4
 8010db0:	4628      	mov	r0, r5
 8010db2:	f7ff ff69 	bl	8010c88 <_fflush_r>
 8010db6:	2800      	cmp	r0, #0
 8010db8:	d0d9      	beq.n	8010d6e <__swbuf_r+0x2e>
 8010dba:	e7d6      	b.n	8010d6a <__swbuf_r+0x2a>

08010dbc <__swsetup_r>:
 8010dbc:	b538      	push	{r3, r4, r5, lr}
 8010dbe:	4b29      	ldr	r3, [pc, #164]	@ (8010e64 <__swsetup_r+0xa8>)
 8010dc0:	4605      	mov	r5, r0
 8010dc2:	6818      	ldr	r0, [r3, #0]
 8010dc4:	460c      	mov	r4, r1
 8010dc6:	b118      	cbz	r0, 8010dd0 <__swsetup_r+0x14>
 8010dc8:	6a03      	ldr	r3, [r0, #32]
 8010dca:	b90b      	cbnz	r3, 8010dd0 <__swsetup_r+0x14>
 8010dcc:	f7fe f9a4 	bl	800f118 <__sinit>
 8010dd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010dd4:	0719      	lsls	r1, r3, #28
 8010dd6:	d422      	bmi.n	8010e1e <__swsetup_r+0x62>
 8010dd8:	06da      	lsls	r2, r3, #27
 8010dda:	d407      	bmi.n	8010dec <__swsetup_r+0x30>
 8010ddc:	2209      	movs	r2, #9
 8010dde:	602a      	str	r2, [r5, #0]
 8010de0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010de4:	81a3      	strh	r3, [r4, #12]
 8010de6:	f04f 30ff 	mov.w	r0, #4294967295
 8010dea:	e033      	b.n	8010e54 <__swsetup_r+0x98>
 8010dec:	0758      	lsls	r0, r3, #29
 8010dee:	d512      	bpl.n	8010e16 <__swsetup_r+0x5a>
 8010df0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010df2:	b141      	cbz	r1, 8010e06 <__swsetup_r+0x4a>
 8010df4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010df8:	4299      	cmp	r1, r3
 8010dfa:	d002      	beq.n	8010e02 <__swsetup_r+0x46>
 8010dfc:	4628      	mov	r0, r5
 8010dfe:	f7ff f8fb 	bl	800fff8 <_free_r>
 8010e02:	2300      	movs	r3, #0
 8010e04:	6363      	str	r3, [r4, #52]	@ 0x34
 8010e06:	89a3      	ldrh	r3, [r4, #12]
 8010e08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010e0c:	81a3      	strh	r3, [r4, #12]
 8010e0e:	2300      	movs	r3, #0
 8010e10:	6063      	str	r3, [r4, #4]
 8010e12:	6923      	ldr	r3, [r4, #16]
 8010e14:	6023      	str	r3, [r4, #0]
 8010e16:	89a3      	ldrh	r3, [r4, #12]
 8010e18:	f043 0308 	orr.w	r3, r3, #8
 8010e1c:	81a3      	strh	r3, [r4, #12]
 8010e1e:	6923      	ldr	r3, [r4, #16]
 8010e20:	b94b      	cbnz	r3, 8010e36 <__swsetup_r+0x7a>
 8010e22:	89a3      	ldrh	r3, [r4, #12]
 8010e24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010e28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010e2c:	d003      	beq.n	8010e36 <__swsetup_r+0x7a>
 8010e2e:	4621      	mov	r1, r4
 8010e30:	4628      	mov	r0, r5
 8010e32:	f000 f8b3 	bl	8010f9c <__smakebuf_r>
 8010e36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e3a:	f013 0201 	ands.w	r2, r3, #1
 8010e3e:	d00a      	beq.n	8010e56 <__swsetup_r+0x9a>
 8010e40:	2200      	movs	r2, #0
 8010e42:	60a2      	str	r2, [r4, #8]
 8010e44:	6962      	ldr	r2, [r4, #20]
 8010e46:	4252      	negs	r2, r2
 8010e48:	61a2      	str	r2, [r4, #24]
 8010e4a:	6922      	ldr	r2, [r4, #16]
 8010e4c:	b942      	cbnz	r2, 8010e60 <__swsetup_r+0xa4>
 8010e4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010e52:	d1c5      	bne.n	8010de0 <__swsetup_r+0x24>
 8010e54:	bd38      	pop	{r3, r4, r5, pc}
 8010e56:	0799      	lsls	r1, r3, #30
 8010e58:	bf58      	it	pl
 8010e5a:	6962      	ldrpl	r2, [r4, #20]
 8010e5c:	60a2      	str	r2, [r4, #8]
 8010e5e:	e7f4      	b.n	8010e4a <__swsetup_r+0x8e>
 8010e60:	2000      	movs	r0, #0
 8010e62:	e7f7      	b.n	8010e54 <__swsetup_r+0x98>
 8010e64:	20000130 	.word	0x20000130

08010e68 <_sbrk_r>:
 8010e68:	b538      	push	{r3, r4, r5, lr}
 8010e6a:	4d06      	ldr	r5, [pc, #24]	@ (8010e84 <_sbrk_r+0x1c>)
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	4604      	mov	r4, r0
 8010e70:	4608      	mov	r0, r1
 8010e72:	602b      	str	r3, [r5, #0]
 8010e74:	f7f0 fd10 	bl	8001898 <_sbrk>
 8010e78:	1c43      	adds	r3, r0, #1
 8010e7a:	d102      	bne.n	8010e82 <_sbrk_r+0x1a>
 8010e7c:	682b      	ldr	r3, [r5, #0]
 8010e7e:	b103      	cbz	r3, 8010e82 <_sbrk_r+0x1a>
 8010e80:	6023      	str	r3, [r4, #0]
 8010e82:	bd38      	pop	{r3, r4, r5, pc}
 8010e84:	20002248 	.word	0x20002248

08010e88 <__assert_func>:
 8010e88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010e8a:	4614      	mov	r4, r2
 8010e8c:	461a      	mov	r2, r3
 8010e8e:	4b09      	ldr	r3, [pc, #36]	@ (8010eb4 <__assert_func+0x2c>)
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	4605      	mov	r5, r0
 8010e94:	68d8      	ldr	r0, [r3, #12]
 8010e96:	b954      	cbnz	r4, 8010eae <__assert_func+0x26>
 8010e98:	4b07      	ldr	r3, [pc, #28]	@ (8010eb8 <__assert_func+0x30>)
 8010e9a:	461c      	mov	r4, r3
 8010e9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010ea0:	9100      	str	r1, [sp, #0]
 8010ea2:	462b      	mov	r3, r5
 8010ea4:	4905      	ldr	r1, [pc, #20]	@ (8010ebc <__assert_func+0x34>)
 8010ea6:	f000 f841 	bl	8010f2c <fiprintf>
 8010eaa:	f000 f8d5 	bl	8011058 <abort>
 8010eae:	4b04      	ldr	r3, [pc, #16]	@ (8010ec0 <__assert_func+0x38>)
 8010eb0:	e7f4      	b.n	8010e9c <__assert_func+0x14>
 8010eb2:	bf00      	nop
 8010eb4:	20000130 	.word	0x20000130
 8010eb8:	080114ee 	.word	0x080114ee
 8010ebc:	080114c0 	.word	0x080114c0
 8010ec0:	080114b3 	.word	0x080114b3

08010ec4 <_calloc_r>:
 8010ec4:	b570      	push	{r4, r5, r6, lr}
 8010ec6:	fba1 5402 	umull	r5, r4, r1, r2
 8010eca:	b93c      	cbnz	r4, 8010edc <_calloc_r+0x18>
 8010ecc:	4629      	mov	r1, r5
 8010ece:	f7ff f907 	bl	80100e0 <_malloc_r>
 8010ed2:	4606      	mov	r6, r0
 8010ed4:	b928      	cbnz	r0, 8010ee2 <_calloc_r+0x1e>
 8010ed6:	2600      	movs	r6, #0
 8010ed8:	4630      	mov	r0, r6
 8010eda:	bd70      	pop	{r4, r5, r6, pc}
 8010edc:	220c      	movs	r2, #12
 8010ede:	6002      	str	r2, [r0, #0]
 8010ee0:	e7f9      	b.n	8010ed6 <_calloc_r+0x12>
 8010ee2:	462a      	mov	r2, r5
 8010ee4:	4621      	mov	r1, r4
 8010ee6:	f7fe f9aa 	bl	800f23e <memset>
 8010eea:	e7f5      	b.n	8010ed8 <_calloc_r+0x14>

08010eec <__ascii_mbtowc>:
 8010eec:	b082      	sub	sp, #8
 8010eee:	b901      	cbnz	r1, 8010ef2 <__ascii_mbtowc+0x6>
 8010ef0:	a901      	add	r1, sp, #4
 8010ef2:	b142      	cbz	r2, 8010f06 <__ascii_mbtowc+0x1a>
 8010ef4:	b14b      	cbz	r3, 8010f0a <__ascii_mbtowc+0x1e>
 8010ef6:	7813      	ldrb	r3, [r2, #0]
 8010ef8:	600b      	str	r3, [r1, #0]
 8010efa:	7812      	ldrb	r2, [r2, #0]
 8010efc:	1e10      	subs	r0, r2, #0
 8010efe:	bf18      	it	ne
 8010f00:	2001      	movne	r0, #1
 8010f02:	b002      	add	sp, #8
 8010f04:	4770      	bx	lr
 8010f06:	4610      	mov	r0, r2
 8010f08:	e7fb      	b.n	8010f02 <__ascii_mbtowc+0x16>
 8010f0a:	f06f 0001 	mvn.w	r0, #1
 8010f0e:	e7f8      	b.n	8010f02 <__ascii_mbtowc+0x16>

08010f10 <__ascii_wctomb>:
 8010f10:	4603      	mov	r3, r0
 8010f12:	4608      	mov	r0, r1
 8010f14:	b141      	cbz	r1, 8010f28 <__ascii_wctomb+0x18>
 8010f16:	2aff      	cmp	r2, #255	@ 0xff
 8010f18:	d904      	bls.n	8010f24 <__ascii_wctomb+0x14>
 8010f1a:	228a      	movs	r2, #138	@ 0x8a
 8010f1c:	601a      	str	r2, [r3, #0]
 8010f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8010f22:	4770      	bx	lr
 8010f24:	700a      	strb	r2, [r1, #0]
 8010f26:	2001      	movs	r0, #1
 8010f28:	4770      	bx	lr
	...

08010f2c <fiprintf>:
 8010f2c:	b40e      	push	{r1, r2, r3}
 8010f2e:	b503      	push	{r0, r1, lr}
 8010f30:	4601      	mov	r1, r0
 8010f32:	ab03      	add	r3, sp, #12
 8010f34:	4805      	ldr	r0, [pc, #20]	@ (8010f4c <fiprintf+0x20>)
 8010f36:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f3a:	6800      	ldr	r0, [r0, #0]
 8010f3c:	9301      	str	r3, [sp, #4]
 8010f3e:	f7ff fd07 	bl	8010950 <_vfiprintf_r>
 8010f42:	b002      	add	sp, #8
 8010f44:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f48:	b003      	add	sp, #12
 8010f4a:	4770      	bx	lr
 8010f4c:	20000130 	.word	0x20000130

08010f50 <__swhatbuf_r>:
 8010f50:	b570      	push	{r4, r5, r6, lr}
 8010f52:	460c      	mov	r4, r1
 8010f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f58:	2900      	cmp	r1, #0
 8010f5a:	b096      	sub	sp, #88	@ 0x58
 8010f5c:	4615      	mov	r5, r2
 8010f5e:	461e      	mov	r6, r3
 8010f60:	da0d      	bge.n	8010f7e <__swhatbuf_r+0x2e>
 8010f62:	89a3      	ldrh	r3, [r4, #12]
 8010f64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010f68:	f04f 0100 	mov.w	r1, #0
 8010f6c:	bf14      	ite	ne
 8010f6e:	2340      	movne	r3, #64	@ 0x40
 8010f70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010f74:	2000      	movs	r0, #0
 8010f76:	6031      	str	r1, [r6, #0]
 8010f78:	602b      	str	r3, [r5, #0]
 8010f7a:	b016      	add	sp, #88	@ 0x58
 8010f7c:	bd70      	pop	{r4, r5, r6, pc}
 8010f7e:	466a      	mov	r2, sp
 8010f80:	f000 f848 	bl	8011014 <_fstat_r>
 8010f84:	2800      	cmp	r0, #0
 8010f86:	dbec      	blt.n	8010f62 <__swhatbuf_r+0x12>
 8010f88:	9901      	ldr	r1, [sp, #4]
 8010f8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010f8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010f92:	4259      	negs	r1, r3
 8010f94:	4159      	adcs	r1, r3
 8010f96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010f9a:	e7eb      	b.n	8010f74 <__swhatbuf_r+0x24>

08010f9c <__smakebuf_r>:
 8010f9c:	898b      	ldrh	r3, [r1, #12]
 8010f9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010fa0:	079d      	lsls	r5, r3, #30
 8010fa2:	4606      	mov	r6, r0
 8010fa4:	460c      	mov	r4, r1
 8010fa6:	d507      	bpl.n	8010fb8 <__smakebuf_r+0x1c>
 8010fa8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010fac:	6023      	str	r3, [r4, #0]
 8010fae:	6123      	str	r3, [r4, #16]
 8010fb0:	2301      	movs	r3, #1
 8010fb2:	6163      	str	r3, [r4, #20]
 8010fb4:	b003      	add	sp, #12
 8010fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fb8:	ab01      	add	r3, sp, #4
 8010fba:	466a      	mov	r2, sp
 8010fbc:	f7ff ffc8 	bl	8010f50 <__swhatbuf_r>
 8010fc0:	9f00      	ldr	r7, [sp, #0]
 8010fc2:	4605      	mov	r5, r0
 8010fc4:	4639      	mov	r1, r7
 8010fc6:	4630      	mov	r0, r6
 8010fc8:	f7ff f88a 	bl	80100e0 <_malloc_r>
 8010fcc:	b948      	cbnz	r0, 8010fe2 <__smakebuf_r+0x46>
 8010fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010fd2:	059a      	lsls	r2, r3, #22
 8010fd4:	d4ee      	bmi.n	8010fb4 <__smakebuf_r+0x18>
 8010fd6:	f023 0303 	bic.w	r3, r3, #3
 8010fda:	f043 0302 	orr.w	r3, r3, #2
 8010fde:	81a3      	strh	r3, [r4, #12]
 8010fe0:	e7e2      	b.n	8010fa8 <__smakebuf_r+0xc>
 8010fe2:	89a3      	ldrh	r3, [r4, #12]
 8010fe4:	6020      	str	r0, [r4, #0]
 8010fe6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010fea:	81a3      	strh	r3, [r4, #12]
 8010fec:	9b01      	ldr	r3, [sp, #4]
 8010fee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010ff2:	b15b      	cbz	r3, 801100c <__smakebuf_r+0x70>
 8010ff4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010ff8:	4630      	mov	r0, r6
 8010ffa:	f000 f81d 	bl	8011038 <_isatty_r>
 8010ffe:	b128      	cbz	r0, 801100c <__smakebuf_r+0x70>
 8011000:	89a3      	ldrh	r3, [r4, #12]
 8011002:	f023 0303 	bic.w	r3, r3, #3
 8011006:	f043 0301 	orr.w	r3, r3, #1
 801100a:	81a3      	strh	r3, [r4, #12]
 801100c:	89a3      	ldrh	r3, [r4, #12]
 801100e:	431d      	orrs	r5, r3
 8011010:	81a5      	strh	r5, [r4, #12]
 8011012:	e7cf      	b.n	8010fb4 <__smakebuf_r+0x18>

08011014 <_fstat_r>:
 8011014:	b538      	push	{r3, r4, r5, lr}
 8011016:	4d07      	ldr	r5, [pc, #28]	@ (8011034 <_fstat_r+0x20>)
 8011018:	2300      	movs	r3, #0
 801101a:	4604      	mov	r4, r0
 801101c:	4608      	mov	r0, r1
 801101e:	4611      	mov	r1, r2
 8011020:	602b      	str	r3, [r5, #0]
 8011022:	f7f0 fc11 	bl	8001848 <_fstat>
 8011026:	1c43      	adds	r3, r0, #1
 8011028:	d102      	bne.n	8011030 <_fstat_r+0x1c>
 801102a:	682b      	ldr	r3, [r5, #0]
 801102c:	b103      	cbz	r3, 8011030 <_fstat_r+0x1c>
 801102e:	6023      	str	r3, [r4, #0]
 8011030:	bd38      	pop	{r3, r4, r5, pc}
 8011032:	bf00      	nop
 8011034:	20002248 	.word	0x20002248

08011038 <_isatty_r>:
 8011038:	b538      	push	{r3, r4, r5, lr}
 801103a:	4d06      	ldr	r5, [pc, #24]	@ (8011054 <_isatty_r+0x1c>)
 801103c:	2300      	movs	r3, #0
 801103e:	4604      	mov	r4, r0
 8011040:	4608      	mov	r0, r1
 8011042:	602b      	str	r3, [r5, #0]
 8011044:	f7f0 fc10 	bl	8001868 <_isatty>
 8011048:	1c43      	adds	r3, r0, #1
 801104a:	d102      	bne.n	8011052 <_isatty_r+0x1a>
 801104c:	682b      	ldr	r3, [r5, #0]
 801104e:	b103      	cbz	r3, 8011052 <_isatty_r+0x1a>
 8011050:	6023      	str	r3, [r4, #0]
 8011052:	bd38      	pop	{r3, r4, r5, pc}
 8011054:	20002248 	.word	0x20002248

08011058 <abort>:
 8011058:	b508      	push	{r3, lr}
 801105a:	2006      	movs	r0, #6
 801105c:	f000 f82c 	bl	80110b8 <raise>
 8011060:	2001      	movs	r0, #1
 8011062:	f7f0 fba1 	bl	80017a8 <_exit>

08011066 <_raise_r>:
 8011066:	291f      	cmp	r1, #31
 8011068:	b538      	push	{r3, r4, r5, lr}
 801106a:	4605      	mov	r5, r0
 801106c:	460c      	mov	r4, r1
 801106e:	d904      	bls.n	801107a <_raise_r+0x14>
 8011070:	2316      	movs	r3, #22
 8011072:	6003      	str	r3, [r0, #0]
 8011074:	f04f 30ff 	mov.w	r0, #4294967295
 8011078:	bd38      	pop	{r3, r4, r5, pc}
 801107a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801107c:	b112      	cbz	r2, 8011084 <_raise_r+0x1e>
 801107e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011082:	b94b      	cbnz	r3, 8011098 <_raise_r+0x32>
 8011084:	4628      	mov	r0, r5
 8011086:	f000 f831 	bl	80110ec <_getpid_r>
 801108a:	4622      	mov	r2, r4
 801108c:	4601      	mov	r1, r0
 801108e:	4628      	mov	r0, r5
 8011090:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011094:	f000 b818 	b.w	80110c8 <_kill_r>
 8011098:	2b01      	cmp	r3, #1
 801109a:	d00a      	beq.n	80110b2 <_raise_r+0x4c>
 801109c:	1c59      	adds	r1, r3, #1
 801109e:	d103      	bne.n	80110a8 <_raise_r+0x42>
 80110a0:	2316      	movs	r3, #22
 80110a2:	6003      	str	r3, [r0, #0]
 80110a4:	2001      	movs	r0, #1
 80110a6:	e7e7      	b.n	8011078 <_raise_r+0x12>
 80110a8:	2100      	movs	r1, #0
 80110aa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80110ae:	4620      	mov	r0, r4
 80110b0:	4798      	blx	r3
 80110b2:	2000      	movs	r0, #0
 80110b4:	e7e0      	b.n	8011078 <_raise_r+0x12>
	...

080110b8 <raise>:
 80110b8:	4b02      	ldr	r3, [pc, #8]	@ (80110c4 <raise+0xc>)
 80110ba:	4601      	mov	r1, r0
 80110bc:	6818      	ldr	r0, [r3, #0]
 80110be:	f7ff bfd2 	b.w	8011066 <_raise_r>
 80110c2:	bf00      	nop
 80110c4:	20000130 	.word	0x20000130

080110c8 <_kill_r>:
 80110c8:	b538      	push	{r3, r4, r5, lr}
 80110ca:	4d07      	ldr	r5, [pc, #28]	@ (80110e8 <_kill_r+0x20>)
 80110cc:	2300      	movs	r3, #0
 80110ce:	4604      	mov	r4, r0
 80110d0:	4608      	mov	r0, r1
 80110d2:	4611      	mov	r1, r2
 80110d4:	602b      	str	r3, [r5, #0]
 80110d6:	f7f0 fb57 	bl	8001788 <_kill>
 80110da:	1c43      	adds	r3, r0, #1
 80110dc:	d102      	bne.n	80110e4 <_kill_r+0x1c>
 80110de:	682b      	ldr	r3, [r5, #0]
 80110e0:	b103      	cbz	r3, 80110e4 <_kill_r+0x1c>
 80110e2:	6023      	str	r3, [r4, #0]
 80110e4:	bd38      	pop	{r3, r4, r5, pc}
 80110e6:	bf00      	nop
 80110e8:	20002248 	.word	0x20002248

080110ec <_getpid_r>:
 80110ec:	f7f0 bb44 	b.w	8001778 <_getpid>

080110f0 <_init>:
 80110f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110f2:	bf00      	nop
 80110f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110f6:	bc08      	pop	{r3}
 80110f8:	469e      	mov	lr, r3
 80110fa:	4770      	bx	lr

080110fc <_fini>:
 80110fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110fe:	bf00      	nop
 8011100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011102:	bc08      	pop	{r3}
 8011104:	469e      	mov	lr, r3
 8011106:	4770      	bx	lr
